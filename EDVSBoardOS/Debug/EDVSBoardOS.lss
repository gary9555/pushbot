
EDVSBoardOS.axf:     file format elf32-littlearm


Disassembly of section .text.core_m0app_text:

1a040000 <__core_m0app_START__>:
1a040000:	20008400 	.word	0x20008400
1a040004:	1a040219 	.word	0x1a040219
1a040008:	1a0401e9 	.word	0x1a0401e9
1a04000c:	1a0401f1 	.word	0x1a0401f1
	...
1a04002c:	1a0401f9 	.word	0x1a0401f9
	...
1a040038:	1a040201 	.word	0x1a040201
1a04003c:	1a040209 	.word	0x1a040209
1a040040:	1a040211 	.word	0x1a040211
1a040044:	1a040211 	.word	0x1a040211
1a040048:	1a040211 	.word	0x1a040211
1a04004c:	00000000 	.word	0x00000000
1a040050:	1a040211 	.word	0x1a040211
1a040054:	1a040211 	.word	0x1a040211
1a040058:	1a040211 	.word	0x1a040211
1a04005c:	1a040211 	.word	0x1a040211
1a040060:	1a040211 	.word	0x1a040211
1a040064:	1a040211 	.word	0x1a040211
1a040068:	1a040211 	.word	0x1a040211
1a04006c:	1a040211 	.word	0x1a040211
1a040070:	1a040211 	.word	0x1a040211
1a040074:	1a040211 	.word	0x1a040211
1a040078:	1a040211 	.word	0x1a040211
1a04007c:	1a040211 	.word	0x1a040211
1a040080:	1a040211 	.word	0x1a040211
1a040084:	1a040211 	.word	0x1a040211
1a040088:	1a040211 	.word	0x1a040211
1a04008c:	1a040211 	.word	0x1a040211
1a040090:	1a040211 	.word	0x1a040211
1a040094:	1a040211 	.word	0x1a040211
1a040098:	1a040211 	.word	0x1a040211
1a04009c:	1a040211 	.word	0x1a040211
1a0400a0:	1a040211 	.word	0x1a040211
1a0400a4:	1a040211 	.word	0x1a040211
1a0400a8:	1a040211 	.word	0x1a040211
1a0400ac:	1a040211 	.word	0x1a040211
1a0400b0:	1a040211 	.word	0x1a040211
1a0400b4:	1a040211 	.word	0x1a040211
1a0400b8:	1a040211 	.word	0x1a040211
1a0400bc:	1a040211 	.word	0x1a040211
1a0400c0:	1a040490 	.word	0x1a040490
1a0400c4:	20008000 	.word	0x20008000
1a0400c8:	00000270 	.word	0x00000270
1a0400cc:	1a040490 	.word	0x1a040490
1a0400d0:	10086014 	.word	0x10086014
1a0400d4:	00000000 	.word	0x00000000
1a0400d8:	1a040490 	.word	0x1a040490
1a0400dc:	10002014 	.word	0x10002014
1a0400e0:	00000000 	.word	0x00000000
1a0400e4:	1a040490 	.word	0x1a040490
1a0400e8:	10080000 	.word	0x10080000
1a0400ec:	00000000 	.word	0x00000000
1a0400f0:	1a040490 	.word	0x1a040490
1a0400f4:	10000000 	.word	0x10000000
1a0400f8:	00000000 	.word	0x00000000
1a0400fc:	1a040490 	.word	0x1a040490
1a040100:	10086010 	.word	0x10086010
1a040104:	00000000 	.word	0x00000000
1a040108:	1a040490 	.word	0x1a040490
1a04010c:	20000000 	.word	0x20000000
1a040110:	00000000 	.word	0x00000000
1a040114:	1a040490 	.word	0x1a040490
1a040118:	20008400 	.word	0x20008400
1a04011c:	00000000 	.word	0x00000000
1a040120:	1a040490 	.word	0x1a040490
1a040124:	2000c000 	.word	0x2000c000
1a040128:	00000000 	.word	0x00000000
1a04012c:	20008270 	.word	0x20008270
1a040130:	00000000 	.word	0x00000000
1a040134:	10086014 	.word	0x10086014
1a040138:	00000000 	.word	0x00000000
1a04013c:	10002014 	.word	0x10002014
1a040140:	00000000 	.word	0x00000000
1a040144:	10080000 	.word	0x10080000
1a040148:	00000000 	.word	0x00000000
1a04014c:	10000000 	.word	0x10000000
1a040150:	00000000 	.word	0x00000000
1a040154:	10086010 	.word	0x10086010
1a040158:	00000000 	.word	0x00000000
1a04015c:	20000000 	.word	0x20000000
1a040160:	00000000 	.word	0x00000000
1a040164:	20008400 	.word	0x20008400
1a040168:	00000000 	.word	0x00000000
1a04016c:	2000c000 	.word	0x2000c000
1a040170:	00000000 	.word	0x00000000
1a040174:	b088b580 	.word	0xb088b580
1a040178:	60f8af00 	.word	0x60f8af00
1a04017c:	607a60b9 	.word	0x607a60b9
1a040180:	61fb68bb 	.word	0x61fb68bb
1a040184:	61bb68fb 	.word	0x61bb68fb
1a040188:	617b2300 	.word	0x617b2300
1a04018c:	69fbe00a 	.word	0x69fbe00a
1a040190:	61fa1d1a 	.word	0x61fa1d1a
1a040194:	1d1169ba 	.word	0x1d1169ba
1a040198:	681261b9 	.word	0x681261b9
1a04019c:	697b601a 	.word	0x697b601a
1a0401a0:	617b3304 	.word	0x617b3304
1a0401a4:	687b697a 	.word	0x687b697a
1a0401a8:	d3f0429a 	.word	0xd3f0429a
1a0401ac:	46bd46c0 	.word	0x46bd46c0
1a0401b0:	bd80b008 	.word	0xbd80b008
1a0401b4:	b084b580 	.word	0xb084b580
1a0401b8:	6078af00 	.word	0x6078af00
1a0401bc:	687b6039 	.word	0x687b6039
1a0401c0:	230060fb 	.word	0x230060fb
1a0401c4:	e00760bb 	.word	0xe00760bb
1a0401c8:	1d1a68fb 	.word	0x1d1a68fb
1a0401cc:	220060fa 	.word	0x220060fa
1a0401d0:	68bb601a 	.word	0x68bb601a
1a0401d4:	60bb3304 	.word	0x60bb3304
1a0401d8:	683b68ba 	.word	0x683b68ba
1a0401dc:	d3f3429a 	.word	0xd3f3429a
1a0401e0:	46bd46c0 	.word	0x46bd46c0
1a0401e4:	bd80b004 	.word	0xbd80b004
1a0401e8:	af00b580 	.word	0xaf00b580
1a0401ec:	46c0e7fe 	.word	0x46c0e7fe
1a0401f0:	af00b580 	.word	0xaf00b580
1a0401f4:	46c0e7fe 	.word	0x46c0e7fe
1a0401f8:	af00b580 	.word	0xaf00b580
1a0401fc:	46c0e7fe 	.word	0x46c0e7fe
1a040200:	af00b580 	.word	0xaf00b580
1a040204:	46c0e7fe 	.word	0x46c0e7fe
1a040208:	af00b580 	.word	0xaf00b580
1a04020c:	46c0e7fe 	.word	0x46c0e7fe
1a040210:	af00b580 	.word	0xaf00b580
1a040214:	46c0e7fe 	.word	0x46c0e7fe
1a040218:	b086b580 	.word	0xb086b580
1a04021c:	4b1caf00 	.word	0x4b1caf00
1a040220:	4a1c613b 	.word	0x4a1c613b
1a040224:	601a693b 	.word	0x601a693b
1a040228:	617b4b1b 	.word	0x617b4b1b
1a04022c:	697be014 	.word	0x697be014
1a040230:	617a1d1a 	.word	0x617a1d1a
1a040234:	60fb681b 	.word	0x60fb681b
1a040238:	1d1a697b 	.word	0x1d1a697b
1a04023c:	681b617a 	.word	0x681b617a
1a040240:	697b60bb 	.word	0x697b60bb
1a040244:	617a1d1a 	.word	0x617a1d1a
1a040248:	607b681b 	.word	0x607b681b
1a04024c:	68b9687a 	.word	0x68b9687a
1a040250:	001868fb 	.word	0x001868fb
1a040254:	ff8ef7ff 	.word	0xff8ef7ff
1a040258:	4b10697a 	.word	0x4b10697a
1a04025c:	d3e6429a 	.word	0xd3e6429a
1a040260:	697be00f 	.word	0x697be00f
1a040264:	617a1d1a 	.word	0x617a1d1a
1a040268:	60bb681b 	.word	0x60bb681b
1a04026c:	1d1a697b 	.word	0x1d1a697b
1a040270:	681b617a 	.word	0x681b617a
1a040274:	687a607b 	.word	0x687a607b
1a040278:	001168bb 	.word	0x001168bb
1a04027c:	f7ff0018 	.word	0xf7ff0018
1a040280:	697aff99 	.word	0x697aff99
1a040284:	429a4b06 	.word	0x429a4b06
1a040288:	f000d3eb 	.word	0xf000d3eb
1a04028c:	e7fef8f9 	.word	0xe7fef8f9
1a040290:	40043404 	.word	0x40043404
1a040294:	1a040000 	.word	0x1a040000
1a040298:	1a0400c0 	.word	0x1a0400c0
1a04029c:	1a04012c 	.word	0x1a04012c
1a0402a0:	1a040174 	.word	0x1a040174
1a0402a4:	b084b580 	.word	0xb084b580
1a0402a8:	60f8af00 	.word	0x60f8af00
1a0402ac:	1dfb60b9 	.word	0x1dfb60b9
1a0402b0:	1dfb701a 	.word	0x1dfb701a
1a0402b4:	68f9781b 	.word	0x68f9781b
1a0402b8:	015268ba 	.word	0x015268ba
1a0402bc:	5cd3188a 	.word	0x5cd3188a
1a0402c0:	1e5ab2db 	.word	0x1e5ab2db
1a0402c4:	b2db4193 	.word	0xb2db4193
1a0402c8:	46bd0018 	.word	0x46bd0018
1a0402cc:	bd80b004 	.word	0xbd80b004
1a0402d0:	b082b580 	.word	0xb082b580
1a0402d4:	6078af00 	.word	0x6078af00
1a0402d8:	1cfb000a 	.word	0x1cfb000a
1a0402dc:	1cfb701a 	.word	0x1cfb701a
1a0402e0:	687b781a 	.word	0x687b781a
1a0402e4:	01092184 	.word	0x01092184
1a0402e8:	4462468c 	.word	0x4462468c
1a0402ec:	58d30092 	.word	0x58d30092
1a0402f0:	46bd0018 	.word	0x46bd0018
1a0402f4:	bd80b002 	.word	0xbd80b002
1a0402f8:	b082b580 	.word	0xb082b580
1a0402fc:	6078af00 	.word	0x6078af00
1a040300:	00110008 	.word	0x00110008
1a040304:	1c021cfb 	.word	0x1c021cfb
1a040308:	1cbb701a 	.word	0x1cbb701a
1a04030c:	701a1c0a 	.word	0x701a1c0a
1a040310:	781a1cfb 	.word	0x781a1cfb
1a040314:	781b1cbb 	.word	0x781b1cbb
1a040318:	40992101 	.word	0x40992101
1a04031c:	0019000b 	.word	0x0019000b
1a040320:	2088687b 	.word	0x2088687b
1a040324:	46840100 	.word	0x46840100
1a040328:	00924462 	.word	0x00924462
1a04032c:	46c050d1 	.word	0x46c050d1
1a040330:	b00246bd 	.word	0xb00246bd
1a040334:	46c0bd80 	.word	0x46c0bd80
1a040338:	b082b580 	.word	0xb082b580
1a04033c:	6078af00 	.word	0x6078af00
1a040340:	00110008 	.word	0x00110008
1a040344:	1c021cfb 	.word	0x1c021cfb
1a040348:	1cbb701a 	.word	0x1cbb701a
1a04034c:	701a1c0a 	.word	0x701a1c0a
1a040350:	781a1cfb 	.word	0x781a1cfb
1a040354:	781b1cbb 	.word	0x781b1cbb
1a040358:	40992101 	.word	0x40992101
1a04035c:	0019000b 	.word	0x0019000b
1a040360:	208a687b 	.word	0x208a687b
1a040364:	46840100 	.word	0x46840100
1a040368:	00924462 	.word	0x00924462
1a04036c:	46c050d1 	.word	0x46c050d1
1a040370:	b00246bd 	.word	0xb00246bd
1a040374:	46c0bd80 	.word	0x46c0bd80
1a040378:	b082b580 	.word	0xb082b580
1a04037c:	6078af00 	.word	0x6078af00
1a040380:	1cfb000a 	.word	0x1cfb000a
1a040384:	1cfb701a 	.word	0x1cfb701a
1a040388:	b25b781b 	.word	0xb25b781b
1a04038c:	330a687a 	.word	0x330a687a
1a040390:	18d3009b 	.word	0x18d3009b
1a040394:	681b3304 	.word	0x681b3304
1a040398:	46bd0018 	.word	0x46bd0018
1a04039c:	bd80b002 	.word	0xbd80b002
1a0403a0:	b082b580 	.word	0xb082b580
1a0403a4:	6078af00 	.word	0x6078af00
1a0403a8:	1cfb000a 	.word	0x1cfb000a
1a0403ac:	687b701a 	.word	0x687b701a
1a0403b0:	589a4a0b 	.word	0x589a4a0b
1a0403b4:	23806879 	.word	0x23806879
1a0403b8:	188a015b 	.word	0x188a015b
1a0403bc:	1cfa18d3 	.word	0x1cfa18d3
1a0403c0:	701a7812 	.word	0x701a7812
1a0403c4:	4a06687b 	.word	0x4a06687b
1a0403c8:	3301589b 	.word	0x3301589b
1a0403cc:	0d1a051b 	.word	0x0d1a051b
1a0403d0:	4903687b 	.word	0x4903687b
1a0403d4:	46c0505a 	.word	0x46c0505a
1a0403d8:	b00246bd 	.word	0xb00246bd
1a0403dc:	46c0bd80 	.word	0x46c0bd80
1a0403e0:	00002008 	.word	0x00002008
1a0403e4:	b084b580 	.word	0xb084b580
1a0403e8:	6078af00 	.word	0x6078af00
1a0403ec:	4a0c687b 	.word	0x4a0c687b
1a0403f0:	687a589b 	.word	0x687a589b
1a0403f4:	b2da5cd3 	.word	0xb2da5cd3
1a0403f8:	18fb230f 	.word	0x18fb230f
1a0403fc:	687b701a 	.word	0x687b701a
1a040400:	589b4a07 	.word	0x589b4a07
1a040404:	051b3301 	.word	0x051b3301
1a040408:	687b0d1a 	.word	0x687b0d1a
1a04040c:	505a4904 	.word	0x505a4904
1a040410:	18fb230f 	.word	0x18fb230f
1a040414:	b2db781b 	.word	0xb2db781b
1a040418:	46bd0018 	.word	0x46bd0018
1a04041c:	bd80b004 	.word	0xbd80b004
1a040420:	00002004 	.word	0x00002004
1a040424:	b082b580 	.word	0xb082b580
1a040428:	6078af00 	.word	0x6078af00
1a04042c:	4a07687b 	.word	0x4a07687b
1a040430:	6879589a 	.word	0x6879589a
1a040434:	019b2380 	.word	0x019b2380
1a040438:	1ad358cb 	.word	0x1ad358cb
1a04043c:	41931e5a 	.word	0x41931e5a
1a040440:	0018b2db 	.word	0x0018b2db
1a040444:	b00246bd 	.word	0xb00246bd
1a040448:	46c0bd80 	.word	0x46c0bd80
1a04044c:	00002004 	.word	0x00002004
1a040450:	b082b580 	.word	0xb082b580
1a040454:	6078af00 	.word	0x6078af00
1a040458:	4a06687b 	.word	0x4a06687b
1a04045c:	687b589a 	.word	0x687b589a
1a040460:	585b4905 	.word	0x585b4905
1a040464:	3b011ad3 	.word	0x3b011ad3
1a040468:	0d1b051b 	.word	0x0d1b051b
1a04046c:	46bd0018 	.word	0x46bd0018
1a040470:	bd80b002 	.word	0xbd80b002
1a040474:	0000200c 	.word	0x0000200c
1a040478:	00002008 	.word	0x00002008
1a04047c:	ffffffff 	.word	0xffffffff
1a040480:	4802b401 	.word	0x4802b401
1a040484:	bc014684 	.word	0xbc014684
1a040488:	bf004760 	.word	0xbf004760
1a04048c:	20008001 	.word	0x20008001

Disassembly of section .text.core_m0app_data:

1a040490 <__start_data_core_m0app>:
1a040490:	b089b590 	.word	0xb089b590
1a040494:	4b68af00 	.word	0x4b68af00
1a040498:	601a2201 	.word	0x601a2201
1a04049c:	21014b67 	.word	0x21014b67
1a0404a0:	f0000018 	.word	0xf0000018
1a0404a4:	0003f8f5 	.word	0x0003f8f5
1a0404a8:	69fb61fb 	.word	0x69fb61fb
1a0404ac:	4b63617b 	.word	0x4b63617b
1a0404b0:	00182101 	.word	0x00182101
1a0404b4:	f8ecf000 	.word	0xf8ecf000
1a0404b8:	617b0003 	.word	0x617b0003
1a0404bc:	69fb697a 	.word	0x69fb697a
1a0404c0:	d04b429a 	.word	0xd04b429a
1a0404c4:	21034b5e 	.word	0x21034b5e
1a0404c8:	f0000018 	.word	0xf0000018
1a0404cc:	0003f8f9 	.word	0x0003f8f9
1a0404d0:	230eb29a 	.word	0x230eb29a
1a0404d4:	045218fb 	.word	0x045218fb
1a0404d8:	801a0c52 	.word	0x801a0c52
1a0404dc:	4a5a4b59 	.word	0x4a5a4b59
1a0404e0:	1c5a589b 	.word	0x1c5a589b
1a0404e4:	49584b57 	.word	0x49584b57
1a0404e8:	4b56505a 	.word	0x4b56505a
1a0404ec:	589b4a57 	.word	0x589b4a57
1a0404f0:	051b3301 	.word	0x051b3301
1a0404f4:	60bb0d1b 	.word	0x60bb0d1b
1a0404f8:	4a554b52 	.word	0x4a554b52
1a0404fc:	68bb589a 	.word	0x68bb589a
1a040500:	051b1ad3 	.word	0x051b1ad3
1a040504:	607b0d1b 	.word	0x607b0d1b
1a040508:	2b03687b 	.word	0x2b03687b
1a04050c:	e000dc10 	.word	0xe000dc10
1a040510:	4a4c46c0 	.word	0x4a4c46c0
1a040514:	01db23c0 	.word	0x01db23c0
1a040518:	2b0058d3 	.word	0x2b0058d3
1a04051c:	4b49d1f8 	.word	0x4b49d1f8
1a040520:	589b4a4b 	.word	0x589b4a4b
1a040524:	051b3301 	.word	0x051b3301
1a040528:	4b460d1a 	.word	0x4b460d1a
1a04052c:	505a4948 	.word	0x505a4948
1a040530:	68ba4b44 	.word	0x68ba4b44
1a040534:	01892180 	.word	0x01892180
1a040538:	4462468c 	.word	0x4462468c
1a04053c:	210e0052 	.word	0x210e0052
1a040540:	88091879 	.word	0x88091879
1a040544:	4b3f52d1 	.word	0x4b3f52d1
1a040548:	009268ba 	.word	0x009268ba
1a04054c:	50d16979 	.word	0x50d16979
1a040550:	493e4b3c 	.word	0x493e4b3c
1a040554:	505a68ba 	.word	0x505a68ba
1a040558:	61fb697b 	.word	0x61fb697b
1a04055c:	22084b38 	.word	0x22084b38
1a040560:	00182101 	.word	0x00182101
1a040564:	f8a4f000 	.word	0xf8a4f000
1a040568:	001a0003 	.word	0x001a0003
1a04056c:	40532301 	.word	0x40532301
1a040570:	2b00b2db 	.word	0x2b00b2db
1a040574:	4b37d01a 	.word	0x4b37d01a
1a040578:	2220695b 	.word	0x2220695b
1a04057c:	d0154013 	.word	0xd0154013
1a040580:	61bb230f 	.word	0x61bb230f
1a040584:	4c33e009 	.word	0x4c33e009
1a040588:	00184b33 	.word	0x00184b33
1a04058c:	f8b0f000 	.word	0xf8b0f000
1a040590:	60230003 	.word	0x60230003
1a040594:	3b0169bb 	.word	0x3b0169bb
1a040598:	4b2f61bb 	.word	0x4b2f61bb
1a04059c:	f0000018 	.word	0xf0000018
1a0405a0:	1e03f89f 	.word	0x1e03f89f
1a0405a4:	69bbd002 	.word	0x69bbd002
1a0405a8:	d1ec2b00 	.word	0xd1ec2b00
1a0405ac:	695b4b29 	.word	0x695b4b29
1a0405b0:	40132201 	.word	0x40132201
1a0405b4:	4b28d026 	.word	0x4b28d026
1a0405b8:	f0000018 	.word	0xf0000018
1a0405bc:	0003f859 	.word	0x0003f859
1a0405c0:	693b613b 	.word	0x693b613b
1a0405c4:	d01d2b00 	.word	0xd01d2b00
1a0405c8:	681b4b22 	.word	0x681b4b22
1a0405cc:	4b22b2da 	.word	0x4b22b2da
1a0405d0:	00180011 	.word	0x00180011
1a0405d4:	f87cf000 	.word	0xf87cf000
1a0405d8:	2b80693b 	.word	0x2b80693b
1a0405dc:	4b18d80c 	.word	0x4b18d80c
1a0405e0:	2100220a 	.word	0x2100220a
1a0405e4:	f0000018 	.word	0xf0000018
1a0405e8:	4b15f85b 	.word	0x4b15f85b
1a0405ec:	21002201 	.word	0x21002201
1a0405f0:	f0000018 	.word	0xf0000018
1a0405f4:	e005f845 	.word	0xe005f845
1a0405f8:	220a4b11 	.word	0x220a4b11
1a0405fc:	00182100 	.word	0x00182100
1a040600:	f83ef000 	.word	0xf83ef000
1a040604:	6bdb4b15 	.word	0x6bdb4b15
1a040608:	40132204 	.word	0x40132204
1a04060c:	4b13d002 	.word	0x4b13d002
1a040610:	63da4a13 	.word	0x63da4a13
1a040614:	6bdb4b13 	.word	0x6bdb4b13
1a040618:	40132204 	.word	0x40132204
1a04061c:	4b11d002 	.word	0x4b11d002
1a040620:	63da4a11 	.word	0x63da4a11
1a040624:	6bdb4b11 	.word	0x6bdb4b11
1a040628:	40132204 	.word	0x40132204
1a04062c:	e73ed100 	.word	0xe73ed100
1a040630:	4a0d4b0e 	.word	0x4a0d4b0e
1a040634:	e73a63da 	.word	0xe73a63da
1a040638:	10086010 	.word	0x10086010
1a04063c:	40085000 	.word	0x40085000
1a040640:	400f4000 	.word	0x400f4000
1a040644:	10080000 	.word	0x10080000
1a040648:	0000600c 	.word	0x0000600c
1a04064c:	00006004 	.word	0x00006004
1a040650:	00006008 	.word	0x00006008
1a040654:	40081000 	.word	0x40081000
1a040658:	10000000 	.word	0x10000000
1a04065c:	40084000 	.word	0x40084000
1a040660:	00000619 	.word	0x00000619
1a040664:	400c3000 	.word	0x400c3000
1a040668:	00000253 	.word	0x00000253
1a04066c:	400c4000 	.word	0x400c4000
1a040670:	4802b401 	.word	0x4802b401
1a040674:	bc014684 	.word	0xbc014684
1a040678:	bf004760 	.word	0xbf004760
1a04067c:	1a040451 	.word	0x1a040451
1a040680:	4802b401 	.word	0x4802b401
1a040684:	bc014684 	.word	0xbc014684
1a040688:	bf004760 	.word	0xbf004760
1a04068c:	1a040339 	.word	0x1a040339
1a040690:	4802b401 	.word	0x4802b401
1a040694:	bc014684 	.word	0xbc014684
1a040698:	bf004760 	.word	0xbf004760
1a04069c:	1a040379 	.word	0x1a040379
1a0406a0:	4802b401 	.word	0x4802b401
1a0406a4:	bc014684 	.word	0xbc014684
1a0406a8:	bf004760 	.word	0xbf004760
1a0406ac:	1a0402f9 	.word	0x1a0402f9
1a0406b0:	4802b401 	.word	0x4802b401
1a0406b4:	bc014684 	.word	0xbc014684
1a0406b8:	bf004760 	.word	0xbf004760
1a0406bc:	1a0402a5 	.word	0x1a0402a5
1a0406c0:	4802b401 	.word	0x4802b401
1a0406c4:	bc014684 	.word	0xbc014684
1a0406c8:	bf004760 	.word	0xbf004760
1a0406cc:	1a0402d1 	.word	0x1a0402d1
1a0406d0:	4802b401 	.word	0x4802b401
1a0406d4:	bc014684 	.word	0xbc014684
1a0406d8:	bf004760 	.word	0xbf004760
1a0406dc:	1a0403a1 	.word	0x1a0403a1
1a0406e0:	4802b401 	.word	0x4802b401
1a0406e4:	bc014684 	.word	0xbc014684
1a0406e8:	bf004760 	.word	0xbf004760
1a0406ec:	1a040425 	.word	0x1a040425
1a0406f0:	4802b401 	.word	0x4802b401
1a0406f4:	bc014684 	.word	0xbc014684
1a0406f8:	bf004760 	.word	0xbf004760
1a0406fc:	1a0403e5 	.word	0x1a0403e5

Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	1008a000 1a000f99 1a0001c9 1a0001cb     ................
1a000010:	1a0001cd 1a0001cf 1a0001d1 00000000     ................
	...
1a00002c:	1a0001d3 1a0001d5 00000000 1a0001d7     ................
1a00003c:	1a003c91 1a0001db 1a0001db 1a0001db     .<..............
1a00004c:	00000000 1a0001db 1a0001db 1a0001db     ................
1a00005c:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a00006c:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a00007c:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a00008c:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a00009c:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a0000ac:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a0000bc:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a0000cc:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a0000dc:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a0000ec:	1a0001db 00000000 1a0001db 1a0001db     ................
1a0000fc:	1a0001db 00000000 1a0001db 1a0001db     ................
1a00010c:	1a0001db 1a0001db                       ........

1a000114 <__data_section_table>:
1a000114:	1a01b1a0 	.word	0x1a01b1a0
1a000118:	10086018 	.word	0x10086018
1a00011c:	000004cc 	.word	0x000004cc
1a000120:	1a01b19c 	.word	0x1a01b19c
1a000124:	20008000 	.word	0x20008000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a01b19c 	.word	0x1a01b19c
1a000130:	10002014 	.word	0x10002014
1a000134:	00000000 	.word	0x00000000
1a000138:	1a01b19c 	.word	0x1a01b19c
1a00013c:	10080000 	.word	0x10080000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a01b19c 	.word	0x1a01b19c
1a000148:	10000000 	.word	0x10000000
1a00014c:	00000000 	.word	0x00000000
1a000150:	1a01b19c 	.word	0x1a01b19c
1a000154:	10086010 	.word	0x10086010
1a000158:	00000004 	.word	0x00000004
1a00015c:	1a01b1a0 	.word	0x1a01b1a0
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	1a01b1a0 	.word	0x1a01b1a0
1a00016c:	20008400 	.word	0x20008400
1a000170:	00000000 	.word	0x00000000
1a000174:	1a01b1a0 	.word	0x1a01b1a0
1a000178:	2000c000 	.word	0x2000c000
1a00017c:	00000000 	.word	0x00000000

1a000180 <__bss_section_table>:
1a000180:	100864e8 	.word	0x100864e8
1a000184:	00002c1c 	.word	0x00002c1c
1a000188:	20008000 	.word	0x20008000
1a00018c:	00000000 	.word	0x00000000
1a000190:	10002014 	.word	0x10002014
1a000194:	00000000 	.word	0x00000000
1a000198:	10080000 	.word	0x10080000
1a00019c:	00000000 	.word	0x00000000
1a0001a0:	10000000 	.word	0x10000000
1a0001a4:	00000000 	.word	0x00000000
1a0001a8:	10086014 	.word	0x10086014
1a0001ac:	00000000 	.word	0x00000000
1a0001b0:	20000000 	.word	0x20000000
1a0001b4:	00000000 	.word	0x00000000
1a0001b8:	8400      	strh	r0, [r0, #32]
1a0001ba:	2000      	movs	r0, #0
1a0001bc:	0000      	movs	r0, r0
1a0001be:	0000      	.short	0x0000
1a0001c0:	c000      	stmia	r0!, {}
1a0001c2:	2000      	.short	0x2000
1a0001c4:	0000      	movs	r0, r0
	...

1a0001c8 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a0001c8:	Address 0x1a0001c8 is out of bounds.


1a0001ca <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a0001ca:	e7fe      	b.n	1a0001ca <HardFault_Handler>

1a0001cc <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a0001cc:	Address 0x1a0001cc is out of bounds.


1a0001ce <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a0001ce:	e7fe      	b.n	1a0001ce <BusFault_Handler>

1a0001d0 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a0001d0:	e7fe      	b.n	1a0001d0 <UsageFault_Handler>

1a0001d2 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a0001d2:	e7fe      	.short	0xe7fe

1a0001d4 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a0001d4:	e7fe      	b.n	1a0001d4 <DebugMon_Handler>

1a0001d6 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a0001d6:	e7fe      	.short	0xe7fe
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a0001d8:	e7fe      	b.n	1a0001d8 <PendSV_Handler+0x2>

1a0001da <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001da:	e7fe      	.short	0xe7fe

1a0001dc <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001dc:	b510      	push	{r4, lr}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001de:	460b      	.short	0x460b
        *pulDest++ = *pulSrc++;
1a0001e0:	1a40      	subs	r0, r0, r1
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001e2:	1a5c      	.short	0x1a5c
1a0001e4:	42a2      	cmp	r2, r4
1a0001e6:	d903      	.short	0xd903
        *pulDest++ = *pulSrc++;
1a0001e8:	58c4      	ldr	r4, [r0, r3]
1a0001ea:	f843      	.short	0xf843
1a0001ec:	4b04      	ldr	r3, [pc, #16]	; (1a000200 <bss_init+0xe>)
1a0001ee:	e7f8      	.short	0xe7f8
}
1a0001f0:	bd10      	pop	{r4, pc}

1a0001f2 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
1a0001f2:	b510      	.short	0xb510
    unsigned int *pulDest = (unsigned int*) start;
1a0001f4:	4603      	mov	r3, r0
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
1a0001f6:	2400      	.short	0x2400

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001f8:	1a1a      	subs	r2, r3, r0
1a0001fa:	4291      	.short	0x4291
1a0001fc:	d902      	bls.n	1a000204 <bss_init+0x12>
        *pulDest++ = 0;
1a0001fe:	f843      	.short	0xf843
1a000200:	4b04      	ldr	r3, [pc, #16]	; (1a000214 <bss_init+0x22>)
1a000202:	e7f9      	.short	0xe7f9
}
1a000204:	bd10      	pop	{r4, pc}
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff      	.short	0xffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffffffff 	.word	0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffffffff 	.word	0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffffffff 	.word	0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffffffff 	.word	0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffffffff 	.word	0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffffffff 	.word	0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffffffff 	.word	0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffffffff 	.word	0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffffffff 	.word	0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffffffff 	.word	0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffffffff 	.word	0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffffffff 	.word	0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffffffff 	.word	0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffffffff 	.word	0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffffffff 	.word	0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffffffff 	.word	0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffffffff 	.word	0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffffffff 	.word	0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffffffff 	.word	0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffffffff 	.word	0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffffffff 	.word	0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffffffff 	.word	0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffffffff 	.word	0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffffffff 	.word	0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <Chip_SCU_PinMuxSet>:
 * @return	Nothing
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a000300:	b480      	push	{r7}
1a000302:	b083      	sub	sp, #12
1a000304:	af00      	add	r7, sp, #0
1a000306:	4603      	mov	r3, r0
1a000308:	71fb      	strb	r3, [r7, #7]
1a00030a:	460b      	mov	r3, r1
1a00030c:	71bb      	strb	r3, [r7, #6]
1a00030e:	4613      	mov	r3, r2
1a000310:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000312:	4807      	ldr	r0, [pc, #28]	; (1a000330 <Chip_SCU_PinMuxSet+0x30>)
1a000314:	79f9      	ldrb	r1, [r7, #7]
1a000316:	79bb      	ldrb	r3, [r7, #6]
1a000318:	88ba      	ldrh	r2, [r7, #4]
1a00031a:	0149      	lsls	r1, r1, #5
1a00031c:	f840440b 	.word	0xf840440b
1a000320:	2023      	movs	r0, #35	; 0x23
}
1a000322:	bf00      	.short	0xbf00
1a000324:	370c      	adds	r7, #12
1a000326:	46bd      	mov	sp, r7
1a000328:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00032c:	4770      	bx	lr
1a00032e:	bf00      	nop
1a000330:	6000      	str	r0, [r0, #0]
1a000332:	4008      	ands	r0, r1

1a000334 <Chip_GPIO_SetPinOutHigh>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a000334:	b480      	push	{r7}
1a000336:	b083      	sub	sp, #12
1a000338:	af00      	add	r7, sp, #0
1a00033a:	6078      	str	r0, [r7, #4]
1a00033c:	70fb460b 	.word	0x70fb460b
1a000340:	4613      	mov	r3, r2
1a000342:	70bb      	.short	0x70bb
	pGPIO->SET[port] = (1 << pin);
1a000344:	78fa      	ldrb	r2, [r7, #3]
1a000346:	78bb      	ldrb	r3, [r7, #2]
1a000348:	2101      	movs	r1, #1
1a00034a:	fa01 f303 	lsl.w	r3, r1, r3
1a00034e:	4619      	mov	r1, r3
1a000350:	687b      	ldr	r3, [r7, #4]
1a000352:	f502 6208 	add.w	r2, r2, #2176	; 0x880
1a000356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a00035a:	bf00      	.short	0xbf00
1a00035c:	370c      	adds	r7, #12
1a00035e:	46bd      	.short	0x46bd
1a000360:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000364:	bf004770 	.word	0xbf004770

1a000368 <Chip_GPIO_SetPinOutLow>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a000368:	b480      	push	{r7}
1a00036a:	b083      	sub	sp, #12
1a00036c:	6078af00 	.word	0x6078af00
1a000370:	460b      	mov	r3, r1
1a000372:	70fb      	.short	0x70fb
1a000374:	4613      	mov	r3, r2
1a000376:	70bb      	.short	0x70bb
	pGPIO->CLR[port] = (1 << pin);
1a000378:	78fa      	ldrb	r2, [r7, #3]
1a00037a:	78bb      	ldrb	r3, [r7, #2]
1a00037c:	2101      	movs	r1, #1
1a00037e:	fa01      	.short	0xfa01
1a000380:	f303 4619 	ssat	r6, #26, r3, lsl #16
1a000384:	f502687b 	.word	0xf502687b
1a000388:	620a      	str	r2, [r1, #32]
1a00038a:	f843      	.short	0xf843
1a00038c:	1022      	asrs	r2, r4, #32
}
1a00038e:	bf00      	.short	0xbf00
1a000390:	370c      	adds	r7, #12
1a000392:	46bd      	.short	0x46bd
1a000394:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000398:	bf004770 	.word	0xbf004770

1a00039c <Chip_TIMER_Enable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @return	Nothing
 * @note	Enables the timer to start counting.
 */
STATIC INLINE void Chip_TIMER_Enable(LPC_TIMER_T *pTMR)
{
1a00039c:	b480      	push	{r7}
1a00039e:	b083      	.short	0xb083
1a0003a0:	af00      	add	r7, sp, #0
1a0003a2:	6078      	str	r0, [r7, #4]
	pTMR->TCR |= TIMER_ENABLE;
1a0003a4:	685b687b 	.word	0x685b687b
1a0003a8:	f043 0201 	orr.w	r2, r3, #1
1a0003ac:	687b      	ldr	r3, [r7, #4]
1a0003ae:	605a      	str	r2, [r3, #4]
}
1a0003b0:	bf00      	nop
1a0003b2:	370c      	adds	r7, #12
1a0003b4:	f85d46bd 	.word	0xf85d46bd
1a0003b8:	7b04      	ldrb	r4, [r0, #12]
1a0003ba:	4770      	.short	0x4770

1a0003bc <Chip_TIMER_PrescaleSet>:
 * @param	prescale	: Prescale value to set the prescale register to
 * @return	Nothing
 * @note	Sets the prescale count value.
 */
STATIC INLINE void Chip_TIMER_PrescaleSet(LPC_TIMER_T *pTMR, uint32_t prescale)
{
1a0003bc:	b480      	push	{r7}
1a0003be:	b083      	.short	0xb083
1a0003c0:	af00      	add	r7, sp, #0
1a0003c2:	6078      	.short	0x6078
1a0003c4:	6039      	str	r1, [r7, #0]
	pTMR->PR = prescale;
1a0003c6:	687b      	ldr	r3, [r7, #4]
1a0003c8:	683a      	ldr	r2, [r7, #0]
1a0003ca:	60da      	str	r2, [r3, #12]
}
1a0003cc:	370cbf00 	.word	0x370cbf00
1a0003d0:	46bd      	mov	sp, r7
1a0003d2:	f85d      	.short	0xf85d
1a0003d4:	7b04      	ldrb	r4, [r0, #12]
1a0003d6:	4770      	.short	0x4770

1a0003d8 <Chip_TIMER_MatchDisableInt>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchDisableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a0003d8:	b480      	push	{r7}
1a0003da:	b083      	.short	0xb083
1a0003dc:	af00      	add	r7, sp, #0
1a0003de:	6078      	.short	0x6078
1a0003e0:	460b      	mov	r3, r1
1a0003e2:	70fb      	.short	0x70fb
	pTMR->MCR &= ~TIMER_INT_ON_MATCH(matchnum);
1a0003e4:	687b      	ldr	r3, [r7, #4]
1a0003e6:	6959      	.short	0x6959
1a0003e8:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a0003ec:	005b4613 	.word	0x005b4613
1a0003f0:	4413      	add	r3, r2
1a0003f2:	2201      	.short	0x2201
1a0003f4:	fa02 f303 	lsl.w	r3, r2, r3
1a0003f8:	43db      	mvns	r3, r3
1a0003fa:	ea01      	.short	0xea01
1a0003fc:	0203      	lsls	r3, r0, #8
1a0003fe:	687b      	.short	0x687b
1a000400:	615a      	str	r2, [r3, #20]
}
1a000402:	bf00      	.short	0xbf00
1a000404:	370c      	adds	r7, #12
1a000406:	46bd      	.short	0x46bd
1a000408:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00040c:	bf004770 	.word	0xbf004770

1a000410 <Chip_TIMER_ResetOnMatchDisable>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_ResetOnMatchDisable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a000410:	b480      	push	{r7}
1a000412:	b083      	.short	0xb083
1a000414:	af00      	add	r7, sp, #0
1a000416:	6078      	.short	0x6078
1a000418:	460b      	mov	r3, r1
1a00041a:	70fb      	strb	r3, [r7, #3]
	pTMR->MCR &= ~TIMER_RESET_ON_MATCH(matchnum);
1a00041c:	6959687b 	.word	0x6959687b
1a000420:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a000424:	005b4613 	.word	0x005b4613
1a000428:	4413      	add	r3, r2
1a00042a:	3301      	adds	r3, #1
1a00042c:	fa022201 	.word	0xfa022201
1a000430:	f303 43db 	ssat	r3, #28, r3, lsl #19
1a000434:	0203ea01 	.word	0x0203ea01
1a000438:	687b      	ldr	r3, [r7, #4]
1a00043a:	615a      	str	r2, [r3, #20]
}
1a00043c:	bf00      	nop
1a00043e:	370c      	adds	r7, #12
1a000440:	46bd      	mov	sp, r7
1a000442:	f85d      	.short	0xf85d
1a000444:	7b04      	ldrb	r4, [r0, #12]
1a000446:	4770      	bx	lr

1a000448 <Chip_TIMER_StopOnMatchDisable>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_StopOnMatchDisable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a000448:	b480      	push	{r7}
1a00044a:	b083      	sub	sp, #12
1a00044c:	6078af00 	.word	0x6078af00
1a000450:	460b      	mov	r3, r1
1a000452:	70fb      	strb	r3, [r7, #3]
	pTMR->MCR &= ~TIMER_STOP_ON_MATCH(matchnum);
1a000454:	6959687b 	.word	0x6959687b
1a000458:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a00045c:	005b4613 	.word	0x005b4613
1a000460:	4413      	add	r3, r2
1a000462:	3302      	.short	0x3302
1a000464:	2201      	movs	r2, #1
1a000466:	fa02      	.short	0xfa02
1a000468:	f303 43db 	ssat	r3, #28, r3, lsl #19
1a00046c:	0203ea01 	.word	0x0203ea01
1a000470:	687b      	ldr	r3, [r7, #4]
1a000472:	615a      	.short	0x615a
}
1a000474:	bf00      	nop
1a000476:	370c      	.short	0x370c
1a000478:	46bd      	mov	sp, r7
1a00047a:	f85d      	.short	0xf85d
1a00047c:	7b04      	ldrb	r4, [r0, #12]
1a00047e:	4770      	bx	lr

1a000480 <Chip_TIMER_CaptureRisingEdgeDisable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @param	capnum	: Capture signal/register to use
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_CaptureRisingEdgeDisable(LPC_TIMER_T *pTMR, int8_t capnum)
{
1a000480:	b083b480 	.word	0xb083b480
1a000484:	af00      	add	r7, sp, #0
1a000486:	6078      	str	r0, [r7, #4]
1a000488:	70fb460b 	.word	0x70fb460b
	pTMR->CCR &= ~TIMER_CAP_RISING(capnum);
1a00048c:	687b      	ldr	r3, [r7, #4]
1a00048e:	6a99      	.short	0x6a99
1a000490:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a000494:	005b4613 	.word	0x005b4613
1a000498:	4413      	add	r3, r2
1a00049a:	2201      	.short	0x2201
1a00049c:	fa02 f303 	lsl.w	r3, r2, r3
1a0004a0:	43db      	mvns	r3, r3
1a0004a2:	ea01 0203 	and.w	r2, r1, r3
1a0004a6:	687b      	.short	0x687b
1a0004a8:	629a      	str	r2, [r3, #40]	; 0x28
}
1a0004aa:	bf00      	.short	0xbf00
1a0004ac:	370c      	adds	r7, #12
1a0004ae:	46bd      	.short	0x46bd
1a0004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0004b4:	bf004770 	.word	0xbf004770

1a0004b8 <Chip_TIMER_CaptureFallingEdgeEnable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @param	capnum	: Capture signal/register to use
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_CaptureFallingEdgeEnable(LPC_TIMER_T *pTMR, int8_t capnum)
{
1a0004b8:	b480      	push	{r7}
1a0004ba:	b083      	.short	0xb083
1a0004bc:	af00      	add	r7, sp, #0
1a0004be:	6078      	.short	0x6078
1a0004c0:	460b      	mov	r3, r1
1a0004c2:	70fb      	.short	0x70fb
	pTMR->CCR |= TIMER_CAP_FALLING(capnum);
1a0004c4:	687b      	ldr	r3, [r7, #4]
1a0004c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
1a0004c8:	2003f997 	.word	0x2003f997
1a0004cc:	4613      	mov	r3, r2
1a0004ce:	005b      	.short	0x005b
1a0004d0:	4413      	add	r3, r2
1a0004d2:	3301      	.short	0x3301
1a0004d4:	2201      	movs	r2, #1
1a0004d6:	fa02      	.short	0xfa02
1a0004d8:	f303 ea41 			; <UNDEFINED> instruction: 0xf303ea41
1a0004dc:	687b0203 	.word	0x687b0203
1a0004e0:	629a      	str	r2, [r3, #40]	; 0x28
}
1a0004e2:	bf00      	.short	0xbf00
1a0004e4:	370c      	adds	r7, #12
1a0004e6:	46bd      	.short	0x46bd
1a0004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0004ec:	bf004770 	.word	0xbf004770

1a0004f0 <Chip_TIMER_CaptureDisableInt>:
 * @param	pTMR	: Pointer to timer IP register address
 * @param	capnum	: Capture signal/register to use
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_CaptureDisableInt(LPC_TIMER_T *pTMR, int8_t capnum)
{
1a0004f0:	b480      	push	{r7}
1a0004f2:	b083      	.short	0xb083
1a0004f4:	af00      	add	r7, sp, #0
1a0004f6:	6078      	.short	0x6078
1a0004f8:	460b      	mov	r3, r1
1a0004fa:	70fb      	.short	0x70fb
	pTMR->CCR &= ~TIMER_INT_ON_CAP(capnum);
1a0004fc:	687b      	ldr	r3, [r7, #4]
1a0004fe:	6a99      	.short	0x6a99
1a000500:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a000504:	005b4613 	.word	0x005b4613
1a000508:	4413      	add	r3, r2
1a00050a:	3302      	.short	0x3302
1a00050c:	2201      	movs	r2, #1
1a00050e:	fa02      	.short	0xfa02
1a000510:	f303 43db 	ssat	r3, #28, r3, lsl #19
1a000514:	0203ea01 	.word	0x0203ea01
1a000518:	687b      	ldr	r3, [r7, #4]
1a00051a:	629a      	.short	0x629a
}
1a00051c:	bf00      	nop
1a00051e:	370c      	.short	0x370c
1a000520:	46bd      	mov	sp, r7
1a000522:	f85d      	.short	0xf85d
1a000524:	7b04      	ldrb	r4, [r0, #12]
1a000526:	4770      	.short	0x4770

1a000528 <DVS128InitTimer>:
uint32_t eDVSProcessingMode;

//Using the NOINIT macros allows the flashed image size to be greatly reduced.
__NOINIT(RAM4) volatile struct eventRingBuffer events;

void DVS128InitTimer() {
1a000528:	b580      	push	{r7, lr}
1a00052a:	af00      	.short	0xaf00
	// *****************************************************************************
	// ** initialize Timer 1 (system main clock)
	// *****************************************************************************
	Chip_TIMER_Init(LPC_TIMER1);
1a00052c:	4815      	ldr	r0, [pc, #84]	; (1a000584 <DVS128InitTimer+0x5c>)
1a00052e:	f012 feab 	bl	1a013288 <Chip_TIMER_Init>
	Chip_TIMER_PrescaleSet(LPC_TIMER1, 191);	// prescaler: run at 1Mhz!
1a000532:	21bf      	.short	0x21bf
1a000534:	4813      	ldr	r0, [pc, #76]	; (1a000584 <DVS128InitTimer+0x5c>)
1a000536:	f7ff      	.short	0xf7ff
1a000538:	ff41 2101 	vrhadd.u8	d18, d1, d1
	Chip_TIMER_MatchDisableInt(LPC_TIMER1, TIMER_CAPTURE_CHANNEL);
1a00053c:	f7ff4811 	.word	0xf7ff4811
1a000540:	ff4b 2101 	vrhadd.u8	d18, d11, d1
	Chip_TIMER_ResetOnMatchDisable(LPC_TIMER1, TIMER_CAPTURE_CHANNEL);
1a000544:	f7ff480f 	.word	0xf7ff480f
1a000548:	ff63 2101 	vrhadd.u32	d18, d3, d1
	Chip_TIMER_StopOnMatchDisable(LPC_TIMER1, TIMER_CAPTURE_CHANNEL);
1a00054c:	f7ff480d 	.word	0xf7ff480d
1a000550:	ff7b 2101 	vrhadd.u<illegal width 64>	d18, d11, d1

	Chip_TIMER_CaptureRisingEdgeDisable(LPC_TIMER1, TIMER_CAPTURE_CHANNEL);
1a000554:	480b      	ldr	r0, [pc, #44]	; (1a000584 <DVS128InitTimer+0x5c>)
1a000556:	f7ff ff93 	bl	1a000480 <Chip_TIMER_CaptureRisingEdgeDisable>
	Chip_TIMER_CaptureFallingEdgeEnable(LPC_TIMER1, TIMER_CAPTURE_CHANNEL);
1a00055a:	2101      	.short	0x2101
1a00055c:	4809      	ldr	r0, [pc, #36]	; (1a000584 <DVS128InitTimer+0x5c>)
1a00055e:	f7ff      	.short	0xf7ff
1a000560:	ffab 2101 	vaddw.u32	q1, <illegal reg q5.5>, d1
	Chip_TIMER_CaptureDisableInt(LPC_TIMER1, TIMER_CAPTURE_CHANNEL);
1a000564:	f7ff4807 	.word	0xf7ff4807
1a000568:	ffc3 224d 	vmlal.u<illegal width 8>	q9, d3, d1[3]

	// set P5.1 to capture register CAP1_1
	Chip_SCU_PinMuxSet(PORT_DVS_REQUEST, PIN_DVS_REQUEST, MD_BUK | MD_EZI | FUNC5);
1a00056c:	20052101 	.word	0x20052101
1a000570:	f7ff fec6 	bl	1a000300 <Chip_SCU_PinMuxSet>

	//Select the capture input pin in the Global Input Multiplexer Array
	LPC_GIMA->CAP0_IN[1][1] = (uint32_t) (0x2 << 4);
1a000574:	22204b04 	.word	0x22204b04
1a000578:	615a      	str	r2, [r3, #20]

	Chip_TIMER_Enable(LPC_TIMER1);  //Enable timer1
1a00057a:	4802      	.short	0x4802
1a00057c:	f7ff ff0e 	bl	1a00039c <Chip_TIMER_Enable>
}
1a000580:	bd80bf00 	.word	0xbd80bf00
1a000584:	5000      	str	r0, [r0, r0]
1a000586:	4008      	.short	0x4008
1a000588:	7000      	strb	r0, [r0, #0]
1a00058a:	400c      	ands	r4, r1

1a00058c <DVS128BiasSet>:
}

// *****************************************************************************

// *****************************************************************************
void DVS128BiasSet(uint32_t biasID, uint32_t biasValue) {
1a00058c:	b083b480 	.word	0xb083b480
1a000590:	af00      	add	r7, sp, #0
1a000592:	6078      	.short	0x6078
1a000594:	6039      	str	r1, [r7, #0]
	if (biasID < 12) {
1a000596:	687b      	.short	0x687b
1a000598:	2b0b      	cmp	r3, #11
1a00059a:	d804      	.short	0xd804
		biasMatrix[biasID] = biasValue;
1a00059c:	4905      	ldr	r1, [pc, #20]	; (1a0005b4 <DVS128BiasSet+0x28>)
1a00059e:	687b      	.short	0x687b
1a0005a0:	683a      	ldr	r2, [r7, #0]
1a0005a2:	f841      	.short	0xf841
1a0005a4:	2023      	movs	r0, #35	; 0x23
	}
}
1a0005a6:	bf00      	.short	0xbf00
1a0005a8:	370c      	adds	r7, #12
1a0005aa:	46bd      	mov	sp, r7
1a0005ac:	7b04f85d 	.word	0x7b04f85d
1a0005b0:	4770      	bx	lr
1a0005b2:	bf00      	nop
1a0005b4:	64e8      	str	r0, [r5, #76]	; 0x4c
1a0005b6:	1008      	.short	0x1008

1a0005b8 <DVS128BiasGet>:
// *****************************************************************************
uint32_t DVS128BiasGet(uint32_t biasID) {
1a0005b8:	b480      	push	{r7}
1a0005ba:	b083      	.short	0xb083
1a0005bc:	af00      	add	r7, sp, #0
1a0005be:	6078      	str	r0, [r7, #4]
	if (biasID < 12) {
1a0005c0:	2b0b687b 	.word	0x2b0b687b
1a0005c4:	d804      	bhi.n	1a0005d0 <DVS128BiasGet+0x18>
		return (biasMatrix[biasID]);
1a0005c6:	4a06      	ldr	r2, [pc, #24]	; (1a0005e0 <DVS128BiasGet+0x28>)
1a0005c8:	f852687b 	.word	0xf852687b
1a0005cc:	3023      	adds	r0, #35	; 0x23
1a0005ce:	e000      	b.n	1a0005d2 <DVS128BiasGet+0x1a>
	}
	return (0);
1a0005d0:	46182300 	.word	0x46182300
}
1a0005d4:	370c      	adds	r7, #12
1a0005d6:	46bd      	.short	0x46bd
1a0005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0005dc:	bf004770 	.word	0xbf004770
1a0005e0:	64e8      	str	r0, [r5, #76]	; 0x4c
1a0005e2:	1008      	.short	0x1008

1a0005e4 <DVS128BiasLoadDefaultSet>:

// *****************************************************************************
void DVS128BiasLoadDefaultSet(uint32_t biasSetID) {
1a0005e4:	b480      	push	{r7}
1a0005e6:	b083      	.short	0xb083
1a0005e8:	af00      	add	r7, sp, #0
1a0005ea:	6078      	.short	0x6078

	switch (biasSetID) {
1a0005ec:	687b      	ldr	r3, [r7, #4]
1a0005ee:	2b05      	cmp	r3, #5
1a0005f0:	810df200 	.word	0x810df200
1a0005f4:	a201      	add	r2, pc, #4	; (adr r2, 1a0005fc <DVS128BiasLoadDefaultSet+0x18>)
1a0005f6:	f852      	.short	0xf852
1a0005f8:	f023 bf00 	b.w	1a0243fc <__exidx_end+0x9260>
1a0005fc:	1a000615 	.word	0x1a000615
1a000600:	0669      	lsls	r1, r5, #25
1a000602:	1a00      	.short	0x1a00
1a000604:	06bd      	lsls	r5, r7, #26
1a000606:	1a00      	.short	0x1a00
1a000608:	0713      	lsls	r3, r2, #28
1a00060a:	1a00      	.short	0x1a00
1a00060c:	0765      	lsls	r5, r4, #29
1a00060e:	1a00      	.short	0x1a00
1a000610:	07bb      	lsls	r3, r7, #30
1a000612:	1a00      	subs	r0, r0, r0

	case 0: // 12 bias values of 24 bits each 								BIAS_DEFAULT
		biasMatrix[0] = 1067; // 0x00042B,	  		// Tmpdiff128.IPot.cas
1a000614:	4b81      	ldr	r3, [pc, #516]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a000616:	f240      	.short	0xf240
1a000618:	422b      	tst	r3, r5
1a00061a:	601a      	.short	0x601a
		biasMatrix[1] = 12316; // 0x00301C,			// Tmpdiff128.IPot.injGnd
1a00061c:	4b7f      	ldr	r3, [pc, #508]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a00061e:	f243      	.short	0xf243
1a000620:	021c      	lsls	r4, r3, #8
1a000622:	605a      	.short	0x605a
		biasMatrix[2] = 16777215; // 0xFFFFFF,			// Tmpdiff128.IPot.reqPd
1a000624:	4b7d      	ldr	r3, [pc, #500]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a000626:	f06f      	.short	0xf06f
1a000628:	427f      	negs	r7, r7
1a00062a:	609a      	.short	0x609a
		biasMatrix[3] = 5579732; // 0x5523D4,			// Tmpdiff128.IPot.puX
1a00062c:	4b7b      	ldr	r3, [pc, #492]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a00062e:	4a7c      	ldr	r2, [pc, #496]	; (1a000820 <DVS128BiasLoadDefaultSet+0x23c>)
1a000630:	60da      	str	r2, [r3, #12]
		biasMatrix[4] = 151; // 0x000097,			// Tmpdiff128.IPot.diffOff
1a000632:	4b7a      	.short	0x4b7a
1a000634:	2297      	movs	r2, #151	; 0x97
1a000636:	611a      	.short	0x611a
		biasMatrix[5] = 427594; // 0x06864A,			// Tmpdiff128.IPot.req
1a000638:	4b78      	ldr	r3, [pc, #480]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a00063a:	4a7a      	.short	0x4a7a
1a00063c:	615a      	str	r2, [r3, #20]
		biasMatrix[6] = 0; // 0x000000,			// Tmpdiff128.IPot.refr
1a00063e:	4b77      	.short	0x4b77
1a000640:	2200      	movs	r2, #0
1a000642:	619a      	.short	0x619a
		biasMatrix[7] = 16777215; // 0xFFFFFF,			// Tmpdiff128.IPot.puY
1a000644:	4b75      	ldr	r3, [pc, #468]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a000646:	f06f      	.short	0xf06f
1a000648:	427f      	negs	r7, r7
1a00064a:	61da      	.short	0x61da
		biasMatrix[8] = 296253; // 0x04853D,			// Tmpdiff128.IPot.diffOn
1a00064c:	4b73      	ldr	r3, [pc, #460]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a00064e:	4a76      	ldr	r2, [pc, #472]	; (1a000828 <DVS128BiasLoadDefaultSet+0x244>)
1a000650:	621a      	str	r2, [r3, #32]
		biasMatrix[9] = 3624; // 0x000E28,			// Tmpdiff128.IPot.diff
1a000652:	4b72      	.short	0x4b72
1a000654:	f640 6228 	movw	r2, #3624	; 0xe28
1a000658:	4b70625a 	.word	0x4b70625a
		biasMatrix[10] = 39; // 0x000027,			// Tmpdiff128.IPot.foll
1a00065c:	2227      	movs	r2, #39	; 0x27
1a00065e:	629a      	.short	0x629a
		biasMatrix[11] = 4; // 0x000004			// Tmpdiff128.IPot.Pr
1a000660:	4b6e      	ldr	r3, [pc, #440]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a000662:	2204      	.short	0x2204
1a000664:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
1a000666:	e0d2      	.short	0xe0d2

	case 1: // 12 bias values of 24 bits each 								BIAS_BRAGFOST
		biasMatrix[0] = 1067;	  		// Tmpdiff128.IPot.cas
1a000668:	4b6c      	ldr	r3, [pc, #432]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a00066a:	f240      	.short	0xf240
1a00066c:	422b      	tst	r3, r5
1a00066e:	601a      	.short	0x601a
		biasMatrix[1] = 12316;			// Tmpdiff128.IPot.injGnd
1a000670:	4b6a      	ldr	r3, [pc, #424]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a000672:	f243      	.short	0xf243
1a000674:	021c      	lsls	r4, r3, #8
1a000676:	605a      	.short	0x605a
		biasMatrix[2] = 16777215;			// Tmpdiff128.IPot.reqPd
1a000678:	4b68      	ldr	r3, [pc, #416]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a00067a:	f06f      	.short	0xf06f
1a00067c:	427f      	negs	r7, r7
1a00067e:	609a      	.short	0x609a
		biasMatrix[3] = 5579731;			// Tmpdiff128.IPot.puX
1a000680:	4b66      	ldr	r3, [pc, #408]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a000682:	4a6a      	.short	0x4a6a
1a000684:	60da      	str	r2, [r3, #12]
		biasMatrix[4] = 60;			// Tmpdiff128.IPot.diffOff
1a000686:	4b65      	.short	0x4b65
1a000688:	223c      	movs	r2, #60	; 0x3c
1a00068a:	611a      	.short	0x611a
		biasMatrix[5] = 427594;			// Tmpdiff128.IPot.req
1a00068c:	4b63      	ldr	r3, [pc, #396]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a00068e:	4a65      	.short	0x4a65
1a000690:	615a      	str	r2, [r3, #20]
		biasMatrix[6] = 0;			// Tmpdiff128.IPot.refr
1a000692:	4b62      	.short	0x4b62
1a000694:	2200      	movs	r2, #0
1a000696:	619a      	.short	0x619a
		biasMatrix[7] = 16777215;			// Tmpdiff128.IPot.puY
1a000698:	4b60      	ldr	r3, [pc, #384]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a00069a:	f06f      	.short	0xf06f
1a00069c:	427f      	negs	r7, r7
1a00069e:	61da      	.short	0x61da
		biasMatrix[8] = 567391;			// Tmpdiff128.IPot.diffOn
1a0006a0:	4b5e      	ldr	r3, [pc, #376]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a0006a2:	4a63      	.short	0x4a63
1a0006a4:	621a      	str	r2, [r3, #32]
		biasMatrix[9] = 6831;			// Tmpdiff128.IPot.diff
1a0006a6:	4b5d      	.short	0x4b5d
1a0006a8:	f641 22af 	movw	r2, #6831	; 0x1aaf
1a0006ac:	4b5b625a 	.word	0x4b5b625a
		biasMatrix[10] = 39;			// Tmpdiff128.IPot.foll
1a0006b0:	2227      	movs	r2, #39	; 0x27
1a0006b2:	629a      	.short	0x629a
		biasMatrix[11] = 4;			// Tmpdiff128.IPot.Pr
1a0006b4:	4b59      	ldr	r3, [pc, #356]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a0006b6:	2204      	.short	0x2204
1a0006b8:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
1a0006ba:	e0a8      	.short	0xe0a8

	case 2: // 12 bias values of 24 bits each 								BIAS_FAST
		biasMatrix[0] = 1966;	  		// Tmpdiff128.IPot.cas
1a0006bc:	4b57      	ldr	r3, [pc, #348]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a0006be:	f240      	.short	0xf240
1a0006c0:	72ae      	strb	r6, [r5, #10]
1a0006c2:	601a      	.short	0x601a
		biasMatrix[1] = 1137667;			// Tmpdiff128.IPot.injGnd
1a0006c4:	4b55      	ldr	r3, [pc, #340]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a0006c6:	4a5b      	.short	0x4a5b
1a0006c8:	605a      	str	r2, [r3, #4]
		biasMatrix[2] = 16777215;			// Tmpdiff128.IPot.reqPd
1a0006ca:	4b54      	.short	0x4b54
1a0006cc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
1a0006d0:	4b52609a 	.word	0x4b52609a
		biasMatrix[3] = 8053457;			// Tmpdiff128.IPot.puX
1a0006d4:	4a58      	ldr	r2, [pc, #352]	; (1a000838 <DVS128BiasLoadDefaultSet+0x254>)
1a0006d6:	60da      	.short	0x60da
		biasMatrix[4] = 133;			// Tmpdiff128.IPot.diffOff
1a0006d8:	4b50      	ldr	r3, [pc, #320]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a0006da:	2285      	.short	0x2285
1a0006dc:	611a      	str	r2, [r3, #16]
		biasMatrix[5] = 160712;			// Tmpdiff128.IPot.req
1a0006de:	4b4f      	.short	0x4b4f
1a0006e0:	4a56      	ldr	r2, [pc, #344]	; (1a00083c <DVS128BiasLoadDefaultSet+0x258>)
1a0006e2:	615a      	.short	0x615a
		biasMatrix[6] = 944;			// Tmpdiff128.IPot.refr
1a0006e4:	4b4d      	ldr	r3, [pc, #308]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a0006e6:	f44f 726c 	mov.w	r2, #944	; 0x3b0
1a0006ea:	619a      	.short	0x619a
		biasMatrix[7] = 16777215;			// Tmpdiff128.IPot.puY
1a0006ec:	4b4b      	ldr	r3, [pc, #300]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a0006ee:	f06f      	.short	0xf06f
1a0006f0:	427f      	negs	r7, r7
1a0006f2:	61da      	.short	0x61da
		biasMatrix[8] = 205255;			// Tmpdiff128.IPot.diffOn
1a0006f4:	4b49      	ldr	r3, [pc, #292]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a0006f6:	4a52      	.short	0x4a52
1a0006f8:	621a      	str	r2, [r3, #32]
		biasMatrix[9] = 3207;			// Tmpdiff128.IPot.diff
1a0006fa:	4b48      	.short	0x4b48
1a0006fc:	f640 4287 	movw	r2, #3207	; 0xc87
1a000700:	4b46625a 	.word	0x4b46625a
		biasMatrix[10] = 278;			// Tmpdiff128.IPot.foll
1a000704:	f44f 728b 	mov.w	r2, #278	; 0x116
1a000708:	4b44629a 	.word	0x4b44629a
		biasMatrix[11] = 217;			// Tmpdiff128.IPot.Pr
1a00070c:	22d9      	movs	r2, #217	; 0xd9
1a00070e:	62da      	.short	0x62da
		break;
1a000710:	e07d      	b.n	1a00080e <DVS128BiasLoadDefaultSet+0x22a>

	case 3: // 12 bias values of 24 bits each 								BIAS_STEREO_PAIR
		biasMatrix[0] = 1966;
1a000712:	4b42      	.short	0x4b42
1a000714:	f240 72ae 	movw	r2, #1966	; 0x7ae
1a000718:	4b40601a 	.word	0x4b40601a
		biasMatrix[1] = 1135792;
1a00071c:	4a49      	ldr	r2, [pc, #292]	; (1a000844 <DVS128BiasLoadDefaultSet+0x260>)
1a00071e:	605a      	.short	0x605a
		biasMatrix[2] = 16769632;
1a000720:	4b3e      	ldr	r3, [pc, #248]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a000722:	4a49      	.short	0x4a49
1a000724:	609a      	str	r2, [r3, #8]
		biasMatrix[3] = 8061894;
1a000726:	4b3d      	.short	0x4b3d
1a000728:	4a48      	ldr	r2, [pc, #288]	; (1a00084c <DVS128BiasLoadDefaultSet+0x268>)
1a00072a:	60da      	.short	0x60da
		biasMatrix[4] = 133;
1a00072c:	4b3b      	ldr	r3, [pc, #236]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a00072e:	2285      	.short	0x2285
1a000730:	611a      	str	r2, [r3, #16]
		biasMatrix[5] = 160703;
1a000732:	4b3a      	.short	0x4b3a
1a000734:	4a46      	ldr	r2, [pc, #280]	; (1a000850 <DVS128BiasLoadDefaultSet+0x26c>)
1a000736:	615a      	.short	0x615a
		biasMatrix[6] = 935;
1a000738:	4b38      	ldr	r3, [pc, #224]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a00073a:	f240 32a7 	movw	r2, #935	; 0x3a7
1a00073e:	619a      	.short	0x619a
		biasMatrix[7] = 16769632;
1a000740:	4b36      	ldr	r3, [pc, #216]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a000742:	4a41      	.short	0x4a41
1a000744:	61da      	str	r2, [r3, #28]
		biasMatrix[8] = 205244;
1a000746:	4b35      	.short	0x4b35
1a000748:	4a42      	ldr	r2, [pc, #264]	; (1a000854 <DVS128BiasLoadDefaultSet+0x270>)
1a00074a:	621a      	.short	0x621a
		biasMatrix[9] = 3207;
1a00074c:	4b33      	ldr	r3, [pc, #204]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a00074e:	f640      	.short	0xf640
1a000750:	4287      	cmp	r7, r0
1a000752:	625a      	.short	0x625a
		biasMatrix[10] = 267;
1a000754:	4b31      	ldr	r3, [pc, #196]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a000756:	f240      	.short	0xf240
1a000758:	120b      	asrs	r3, r1, #8
1a00075a:	629a      	.short	0x629a
		biasMatrix[11] = 217;
1a00075c:	4b2f      	ldr	r3, [pc, #188]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a00075e:	22d9      	.short	0x22d9
1a000760:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
1a000762:	e054      	.short	0xe054

	case 4: // 12 bias values of 24 bits each 								BIAS_MINI_DVS
		biasMatrix[0] = 1966;
1a000764:	4b2d      	ldr	r3, [pc, #180]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a000766:	f240      	.short	0xf240
1a000768:	72ae      	strb	r6, [r5, #10]
1a00076a:	601a      	str	r2, [r3, #0]
		biasMatrix[1] = 1137667;
1a00076c:	4a314b2b 	.word	0x4a314b2b
1a000770:	605a      	str	r2, [r3, #4]
		biasMatrix[2] = 16777215;
1a000772:	4b2a      	.short	0x4b2a
1a000774:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
1a000778:	4b28609a 	.word	0x4b28609a
		biasMatrix[3] = 8053458;
1a00077c:	4a36      	ldr	r2, [pc, #216]	; (1a000858 <DVS128BiasLoadDefaultSet+0x274>)
1a00077e:	60da      	.short	0x60da
		biasMatrix[4] = 62;
1a000780:	4b26      	ldr	r3, [pc, #152]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a000782:	223e      	.short	0x223e
1a000784:	611a      	str	r2, [r3, #16]
		biasMatrix[5] = 160712;
1a000786:	4b25      	.short	0x4b25
1a000788:	4a2c      	ldr	r2, [pc, #176]	; (1a00083c <DVS128BiasLoadDefaultSet+0x258>)
1a00078a:	615a      	.short	0x615a
		biasMatrix[6] = 944;
1a00078c:	4b23      	ldr	r3, [pc, #140]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a00078e:	f44f      	.short	0xf44f
1a000790:	726c      	strb	r4, [r5, #9]
1a000792:	619a      	.short	0x619a
		biasMatrix[7] = 16777215;
1a000794:	4b21      	ldr	r3, [pc, #132]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a000796:	f06f      	.short	0xf06f
1a000798:	427f      	negs	r7, r7
1a00079a:	61da      	.short	0x61da
		biasMatrix[8] = 480988;
1a00079c:	4b1f      	ldr	r3, [pc, #124]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a00079e:	4a2f      	.short	0x4a2f
1a0007a0:	621a      	str	r2, [r3, #32]
		biasMatrix[9] = 3207;
1a0007a2:	4b1e      	.short	0x4b1e
1a0007a4:	f640 4287 	movw	r2, #3207	; 0xc87
1a0007a8:	4b1c625a 	.word	0x4b1c625a
		biasMatrix[10] = 278;
1a0007ac:	f44f 728b 	mov.w	r2, #278	; 0x116
1a0007b0:	629a      	str	r2, [r3, #40]	; 0x28
		biasMatrix[11] = 217;
1a0007b2:	4b1a      	ldr	r3, [pc, #104]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a0007b4:	22d9      	movs	r2, #217	; 0xd9
1a0007b6:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
1a0007b8:	e029      	b.n	1a00080e <DVS128BiasLoadDefaultSet+0x22a>

	case 5: // 12 bias values of 24 bits each 								BIAS_BRAGFOST - on/off balanced
		biasMatrix[0] = 1067;	  		// Tmpdiff128.IPot.cas
1a0007ba:	4b18      	ldr	r3, [pc, #96]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a0007bc:	f240 422b 	movw	r2, #1067	; 0x42b
1a0007c0:	601a      	str	r2, [r3, #0]
		biasMatrix[1] = 12316;			// Tmpdiff128.IPot.injGnd
1a0007c2:	4b16      	ldr	r3, [pc, #88]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a0007c4:	f243 021c 	movw	r2, #12316	; 0x301c
1a0007c8:	605a      	str	r2, [r3, #4]
		biasMatrix[2] = 16777215;			// Tmpdiff128.IPot.reqPd
1a0007ca:	4b14      	ldr	r3, [pc, #80]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a0007cc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
1a0007d0:	609a      	str	r2, [r3, #8]
		biasMatrix[3] = 5579731;			// Tmpdiff128.IPot.puX
1a0007d2:	4b12      	ldr	r3, [pc, #72]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a0007d4:	4a15      	ldr	r2, [pc, #84]	; (1a00082c <DVS128BiasLoadDefaultSet+0x248>)
1a0007d6:	60da      	str	r2, [r3, #12]
		biasMatrix[4] = 60;			// Tmpdiff128.IPot.diffOff
1a0007d8:	4b10      	ldr	r3, [pc, #64]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a0007da:	223c      	.short	0x223c
1a0007dc:	611a      	str	r2, [r3, #16]
		biasMatrix[5] = 427594;			// Tmpdiff128.IPot.req
1a0007de:	4b0f      	.short	0x4b0f
1a0007e0:	4a10      	ldr	r2, [pc, #64]	; (1a000824 <DVS128BiasLoadDefaultSet+0x240>)
1a0007e2:	615a      	.short	0x615a
		biasMatrix[6] = 0;			// Tmpdiff128.IPot.refr
1a0007e4:	4b0d      	ldr	r3, [pc, #52]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a0007e6:	2200      	.short	0x2200
1a0007e8:	619a      	str	r2, [r3, #24]
		biasMatrix[7] = 16777215;			// Tmpdiff128.IPot.puY
1a0007ea:	4b0c      	.short	0x4b0c
1a0007ec:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
1a0007f0:	4b0a61da 	.word	0x4b0a61da
		biasMatrix[8] = 567391;			// Tmpdiff128.IPot.diffOn
1a0007f4:	4a0e      	ldr	r2, [pc, #56]	; (1a000830 <DVS128BiasLoadDefaultSet+0x24c>)
1a0007f6:	621a      	.short	0x621a
		biasMatrix[9] = 19187;			// Tmpdiff128.IPot.diff
1a0007f8:	4b08      	ldr	r3, [pc, #32]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a0007fa:	f644      	.short	0xf644
1a0007fc:	22f3      	movs	r2, #243	; 0xf3
1a0007fe:	625a      	.short	0x625a
		biasMatrix[10] = 39;			// Tmpdiff128.IPot.foll
1a000800:	4b06      	ldr	r3, [pc, #24]	; (1a00081c <DVS128BiasLoadDefaultSet+0x238>)
1a000802:	2227      	.short	0x2227
1a000804:	629a      	str	r2, [r3, #40]	; 0x28
		biasMatrix[11] = 4;			// Tmpdiff128.IPot.Pr
1a000806:	4b05      	.short	0x4b05
1a000808:	2204      	movs	r2, #4
1a00080a:	62da      	.short	0x62da
		break;
1a00080c:	bf00      	nop

	}
}
1a00080e:	bf00      	.short	0xbf00
1a000810:	370c      	adds	r7, #12
1a000812:	46bd      	.short	0x46bd
1a000814:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000818:	bf004770 	.word	0xbf004770
1a00081c:	64e8      	str	r0, [r5, #76]	; 0x4c
1a00081e:	1008      	.short	0x1008
1a000820:	23d4      	movs	r3, #212	; 0xd4
1a000822:	0055      	.short	0x0055
1a000824:	864a      	strh	r2, [r1, #50]	; 0x32
1a000826:	0006      	.short	0x0006
1a000828:	853d      	strh	r5, [r7, #40]	; 0x28
1a00082a:	0004      	.short	0x0004
1a00082c:	23d3      	movs	r3, #211	; 0xd3
1a00082e:	0055      	.short	0x0055
1a000830:	a85f      	add	r0, sp, #380	; 0x17c
1a000832:	0008      	.short	0x0008
1a000834:	5c03      	ldrb	r3, [r0, r0]
1a000836:	0011      	.short	0x0011
1a000838:	e2d1      	b.n	1a000dde <DVS128BiasFlush+0x57e>
1a00083a:	007a      	.short	0x007a
1a00083c:	73c8      	strb	r0, [r1, #15]
1a00083e:	0002      	.short	0x0002
1a000840:	21c7      	movs	r1, #199	; 0xc7
1a000842:	0003      	.short	0x0003
1a000844:	54b0      	strb	r0, [r6, r2]
1a000846:	0011      	.short	0x0011
1a000848:	e260      	b.n	1a000d0c <DVS128BiasFlush+0x4ac>
1a00084a:	00ff      	.short	0x00ff
1a00084c:	03c6      	lsls	r6, r0, #15
1a00084e:	007b      	.short	0x007b
1a000850:	73bf      	strb	r7, [r7, #14]
1a000852:	0002      	.short	0x0002
1a000854:	21bc      	movs	r1, #188	; 0xbc
1a000856:	0003      	.short	0x0003
1a000858:	e2d2      	b.n	1a000e00 <DVS128BiasFlush+0x5a0>
1a00085a:	007a      	lsls	r2, r7, #1
1a00085c:	000756dc 	.word	0x000756dc

1a000860 <DVS128BiasFlush>:
						Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,GPIO_PORT_BIAS_CLOCK, GPIO_PIN_BIAS_CLOCK);\
						timerDelayUs(1);\
						Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,GPIO_PORT_BIAS_CLOCK, GPIO_PIN_BIAS_CLOCK);\
						timerDelayUs(1); }

void DVS128BiasFlush(uint32_t multiplier) {
1a000860:	b580      	push	{r7, lr}
1a000862:	b084      	.short	0xb084
1a000864:	af00      	add	r7, sp, #0
1a000866:	6078      	.short	0x6078
	uint32_t biasIndex, currentBias;

	for (biasIndex = 0; biasIndex < 12; biasIndex++) {
1a000868:	2300      	movs	r3, #0
1a00086a:	60fb      	.short	0x60fb
1a00086c:	e31a      	b.n	1a000ea4 <DVS128BiasFlush+0x644>
		currentBias = biasMatrix[biasIndex];
1a00086e:	4abe      	.short	0x4abe
1a000870:	68fb      	ldr	r3, [r7, #12]
1a000872:	f852      	.short	0xf852
1a000874:	3023      	adds	r0, #35	; 0x23
1a000876:	60bb      	.short	0x60bb

		currentBias *= multiplier;
1a000878:	68bb      	ldr	r3, [r7, #8]
1a00087a:	687a      	.short	0x687a
1a00087c:	fb02 f303 	mul.w	r3, r2, r3
1a000880:	68bb60bb 	.word	0x68bb60bb
		if (currentBias > 0xFFFFFF)
1a000884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1a000888:	f06fd302 	.word	0xf06fd302
			currentBias = 0xFFFFFF;
1a00088c:	437f      	muls	r7, r7
1a00088e:	60bb      	str	r3, [r7, #8]

		BOUT(currentBias & 0x800000);
1a000890:	f40368bb 	.word	0xf40368bb
1a000894:	0300      	lsls	r0, r0, #12
1a000896:	2b00      	.short	0x2b00
1a000898:	d005      	beq.n	1a0008a6 <DVS128BiasFlush+0x46>
1a00089a:	220a      	.short	0x220a
1a00089c:	2105      	movs	r1, #5
1a00089e:	48b3      	ldr	r0, [pc, #716]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a0008a0:	f7ff fd48 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a0008a4:	220ae004 	.word	0x220ae004
1a0008a8:	2105      	movs	r1, #5
1a0008aa:	48b0      	ldr	r0, [pc, #704]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a0008ac:	fd5cf7ff 	.word	0xfd5cf7ff
1a0008b0:	220f      	movs	r2, #15
1a0008b2:	2101      	movs	r1, #1
1a0008b4:	f7ff48ad 	.word	0xf7ff48ad
1a0008b8:	fd3d 2001 	ldc2	0, cr2, [sp, #-4]!
1a0008bc:	f005 fe60 	bl	1a006580 <timerDelayUs>
1a0008c0:	2101220f 	.word	0x2101220f
1a0008c4:	48a9      	ldr	r0, [pc, #676]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a0008c6:	f7ff      	.short	0xf7ff
1a0008c8:	fd4f 2001 	stc2l	0, cr2, [pc, #-4]	; 1a0008c8 <DVS128BiasFlush+0x68>
1a0008cc:	fe58f005 	.word	0xfe58f005
		BOUT(currentBias & 0x400000);
1a0008d0:	68bb      	ldr	r3, [r7, #8]
1a0008d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
1a0008d6:	2b00      	.short	0x2b00
1a0008d8:	d005      	beq.n	1a0008e6 <DVS128BiasFlush+0x86>
1a0008da:	220a      	.short	0x220a
1a0008dc:	2105      	movs	r1, #5
1a0008de:	48a3      	.short	0x48a3
1a0008e0:	f7ff fd28 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a0008e4:	220ae004 	.word	0x220ae004
1a0008e8:	2105      	movs	r1, #5
1a0008ea:	48a0      	.short	0x48a0
1a0008ec:	f7ff fd3c 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a0008f0:	2101220f 	.word	0x2101220f
1a0008f4:	489d      	ldr	r0, [pc, #628]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a0008f6:	f7ff      	.short	0xf7ff
1a0008f8:	fd1d 2001 	ldc2	0, cr2, [sp, #-4]
1a0008fc:	fe40f005 	.word	0xfe40f005
1a000900:	220f      	movs	r2, #15
1a000902:	2101      	.short	0x2101
1a000904:	4899      	ldr	r0, [pc, #612]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000906:	f7ff      	.short	0xf7ff
1a000908:	fd2f 2001 	stc2	0, cr2, [pc, #-4]!	; 1a000908 <DVS128BiasFlush+0xa8>
1a00090c:	fe38f005 	.word	0xfe38f005
		BOUT(currentBias & 0x200000);
1a000910:	68bb      	ldr	r3, [r7, #8]
1a000912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
1a000916:	2b00      	cmp	r3, #0
1a000918:	220ad005 	.word	0x220ad005
1a00091c:	2105      	movs	r1, #5
1a00091e:	4893      	.short	0x4893
1a000920:	f7ff fd08 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000924:	220ae004 	.word	0x220ae004
1a000928:	2105      	movs	r1, #5
1a00092a:	4890      	.short	0x4890
1a00092c:	f7ff fd1c 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000930:	2101220f 	.word	0x2101220f
1a000934:	488d      	ldr	r0, [pc, #564]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000936:	f7ff      	.short	0xf7ff
1a000938:	fcfd 2001 	ldc2l	0, cr2, [sp], #4
1a00093c:	fe20f005 	.word	0xfe20f005
1a000940:	220f      	movs	r2, #15
1a000942:	2101      	.short	0x2101
1a000944:	4889      	ldr	r0, [pc, #548]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000946:	f7ff fd0f 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a00094a:	2001      	movs	r0, #1
1a00094c:	f005 fe18 	bl	1a006580 <timerDelayUs>
		BOUT(currentBias & 0x100000);
1a000950:	f40368bb 	.word	0xf40368bb
1a000954:	1380      	asrs	r0, r0, #14
1a000956:	2b00      	.short	0x2b00
1a000958:	d005      	beq.n	1a000966 <DVS128BiasFlush+0x106>
1a00095a:	220a      	.short	0x220a
1a00095c:	2105      	movs	r1, #5
1a00095e:	4883      	ldr	r0, [pc, #524]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000960:	f7ff fce8 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000964:	e004      	b.n	1a000970 <DVS128BiasFlush+0x110>
1a000966:	220a      	movs	r2, #10
1a000968:	2105      	movs	r1, #5
1a00096a:	4880      	ldr	r0, [pc, #512]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a00096c:	f7ff fcfc 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000970:	220f      	movs	r2, #15
1a000972:	2101      	movs	r1, #1
1a000974:	487d      	ldr	r0, [pc, #500]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000976:	f7ff fcdd 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a00097a:	2001      	movs	r0, #1
1a00097c:	f005 fe00 	bl	1a006580 <timerDelayUs>
1a000980:	220f      	movs	r2, #15
1a000982:	2101      	movs	r1, #1
1a000984:	4879      	ldr	r0, [pc, #484]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000986:	f7ff fcef 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a00098a:	2001      	movs	r0, #1
1a00098c:	fdf8f005 	.word	0xfdf8f005

		BOUT(currentBias & 0x80000);
1a000990:	68bb      	ldr	r3, [r7, #8]
1a000992:	f403      	.short	0xf403
1a000994:	2300      	movs	r3, #0
1a000996:	2b00      	.short	0x2b00
1a000998:	d005      	beq.n	1a0009a6 <DVS128BiasFlush+0x146>
1a00099a:	220a      	.short	0x220a
1a00099c:	2105      	movs	r1, #5
1a00099e:	4873      	ldr	r0, [pc, #460]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a0009a0:	fcc8f7ff 	.word	0xfcc8f7ff
1a0009a4:	e004      	b.n	1a0009b0 <DVS128BiasFlush+0x150>
1a0009a6:	220a      	.short	0x220a
1a0009a8:	2105      	movs	r1, #5
1a0009aa:	4870      	ldr	r0, [pc, #448]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a0009ac:	fcdcf7ff 	.word	0xfcdcf7ff
1a0009b0:	220f      	movs	r2, #15
1a0009b2:	2101      	.short	0x2101
1a0009b4:	486d      	ldr	r0, [pc, #436]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a0009b6:	f7ff      	.short	0xf7ff
1a0009b8:	fcbd 2001 	ldc2	0, cr2, [sp], #4
1a0009bc:	fde0f005 	.word	0xfde0f005
1a0009c0:	220f      	movs	r2, #15
1a0009c2:	2101      	.short	0x2101
1a0009c4:	4869      	ldr	r0, [pc, #420]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a0009c6:	f7ff fccf 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a0009ca:	2001      	.short	0x2001
1a0009cc:	f005 fdd8 	bl	1a006580 <timerDelayUs>
		BOUT(currentBias & 0x40000);
1a0009d0:	68bb      	ldr	r3, [r7, #8]
1a0009d2:	f403      	.short	0xf403
1a0009d4:	2380      	movs	r3, #128	; 0x80
1a0009d6:	2b00      	cmp	r3, #0
1a0009d8:	220ad005 	.word	0x220ad005
1a0009dc:	2105      	movs	r1, #5
1a0009de:	4863      	ldr	r0, [pc, #396]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a0009e0:	fca8f7ff 	.word	0xfca8f7ff
1a0009e4:	e004      	b.n	1a0009f0 <DVS128BiasFlush+0x190>
1a0009e6:	220a      	movs	r2, #10
1a0009e8:	48602105 	.word	0x48602105
1a0009ec:	f7ff fcbc 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a0009f0:	220f      	movs	r2, #15
1a0009f2:	2101      	.short	0x2101
1a0009f4:	485d      	ldr	r0, [pc, #372]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a0009f6:	f7ff      	.short	0xf7ff
1a0009f8:	fc9d 2001 	ldc2	0, cr2, [sp], {1}
1a0009fc:	fdc0f005 	.word	0xfdc0f005
1a000a00:	220f      	movs	r2, #15
1a000a02:	2101      	.short	0x2101
1a000a04:	4859      	ldr	r0, [pc, #356]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000a06:	f7ff      	.short	0xf7ff
1a000a08:	fcaf 2001 	stc2	0, cr2, [pc], #4	; 1a000a10 <DVS128BiasFlush+0x1b0>
1a000a0c:	fdb8f005 	.word	0xfdb8f005
		BOUT(currentBias & 0x20000);
1a000a10:	68bb      	ldr	r3, [r7, #8]
1a000a12:	f403      	.short	0xf403
1a000a14:	3300      	adds	r3, #0
1a000a16:	2b00      	.short	0x2b00
1a000a18:	d005      	beq.n	1a000a26 <DVS128BiasFlush+0x1c6>
1a000a1a:	220a      	.short	0x220a
1a000a1c:	2105      	movs	r1, #5
1a000a1e:	4853      	.short	0x4853
1a000a20:	f7ff fc88 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000a24:	220ae004 	.word	0x220ae004
1a000a28:	2105      	movs	r1, #5
1a000a2a:	4850      	ldr	r0, [pc, #320]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000a2c:	f7ff fc9c 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000a30:	220f      	movs	r2, #15
1a000a32:	2101      	movs	r1, #1
1a000a34:	484d      	ldr	r0, [pc, #308]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000a36:	f7ff fc7d 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000a3a:	2001      	movs	r0, #1
1a000a3c:	f005 fda0 	bl	1a006580 <timerDelayUs>
1a000a40:	220f      	movs	r2, #15
1a000a42:	2101      	movs	r1, #1
1a000a44:	4849      	ldr	r0, [pc, #292]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000a46:	f7ff fc8f 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000a4a:	2001      	.short	0x2001
1a000a4c:	f005 fd98 	bl	1a006580 <timerDelayUs>
		BOUT(currentBias & 0x10000);
1a000a50:	f40368bb 	.word	0xf40368bb
1a000a54:	3380      	adds	r3, #128	; 0x80
1a000a56:	2b00      	.short	0x2b00
1a000a58:	d005      	beq.n	1a000a66 <DVS128BiasFlush+0x206>
1a000a5a:	220a      	.short	0x220a
1a000a5c:	2105      	movs	r1, #5
1a000a5e:	4843      	ldr	r0, [pc, #268]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000a60:	f7ff fc68 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000a64:	220ae004 	.word	0x220ae004
1a000a68:	2105      	movs	r1, #5
1a000a6a:	4840      	ldr	r0, [pc, #256]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000a6c:	f7ff fc7c 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000a70:	220f      	movs	r2, #15
1a000a72:	2101      	.short	0x2101
1a000a74:	483d      	ldr	r0, [pc, #244]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000a76:	f7ff      	.short	0xf7ff
1a000a78:	fc5d 2001 	mrrc2	0, 0, r2, sp, cr1
1a000a7c:	f005 fd80 	bl	1a006580 <timerDelayUs>
1a000a80:	220f      	movs	r2, #15
1a000a82:	2101      	movs	r1, #1
1a000a84:	4839      	ldr	r0, [pc, #228]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000a86:	f7ff fc6f 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000a8a:	2001      	movs	r0, #1
1a000a8c:	f005 fd78 	bl	1a006580 <timerDelayUs>

		BOUT(currentBias & 0x8000);
1a000a90:	68bb      	ldr	r3, [r7, #8]
1a000a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
1a000a96:	2b00      	cmp	r3, #0
1a000a98:	d005      	beq.n	1a000aa6 <DVS128BiasFlush+0x246>
1a000a9a:	220a      	movs	r2, #10
1a000a9c:	48332105 	.word	0x48332105
1a000aa0:	f7ff fc48 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000aa4:	220ae004 	.word	0x220ae004
1a000aa8:	2105      	movs	r1, #5
1a000aaa:	4830      	.short	0x4830
1a000aac:	f7ff fc5c 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000ab0:	2101220f 	.word	0x2101220f
1a000ab4:	482d      	ldr	r0, [pc, #180]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000ab6:	f7ff      	.short	0xf7ff
1a000ab8:	fc3d 2001 	ldc2	0, cr2, [sp], #-4
1a000abc:	f005 fd60 	bl	1a006580 <timerDelayUs>
1a000ac0:	220f      	movs	r2, #15
1a000ac2:	2101      	movs	r1, #1
1a000ac4:	f7ff4829 	.word	0xf7ff4829
1a000ac8:	fc4f 2001 	mcrr2	0, 0, r2, pc, cr1	; <UNPREDICTABLE>
1a000acc:	fd58f005 	.word	0xfd58f005
		BOUT(currentBias & 0x4000);
1a000ad0:	68bb      	ldr	r3, [r7, #8]
1a000ad2:	f403      	.short	0xf403
1a000ad4:	4380      	bics	r0, r0
1a000ad6:	2b00      	.short	0x2b00
1a000ad8:	d005      	beq.n	1a000ae6 <DVS128BiasFlush+0x286>
1a000ada:	220a      	.short	0x220a
1a000adc:	2105      	movs	r1, #5
1a000ade:	4823      	.short	0x4823
1a000ae0:	f7ff fc28 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000ae4:	220ae004 	.word	0x220ae004
1a000ae8:	2105      	movs	r1, #5
1a000aea:	4820      	.short	0x4820
1a000aec:	f7ff fc3c 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000af0:	2101220f 	.word	0x2101220f
1a000af4:	481d      	ldr	r0, [pc, #116]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000af6:	f7ff      	.short	0xf7ff
1a000af8:	fc1d 2001 	ldc2	0, cr2, [sp], {1}
1a000afc:	fd40f005 	.word	0xfd40f005
1a000b00:	220f      	movs	r2, #15
1a000b02:	2101      	.short	0x2101
1a000b04:	4819      	ldr	r0, [pc, #100]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000b06:	f7ff      	.short	0xf7ff
1a000b08:	fc2f 2001 	stc2	0, cr2, [pc], #-4	; 1a000b08 <DVS128BiasFlush+0x2a8>
1a000b0c:	fd38f005 	.word	0xfd38f005
		BOUT(currentBias & 0x2000);
1a000b10:	68bb      	ldr	r3, [r7, #8]
1a000b12:	f403      	.short	0xf403
1a000b14:	5300      	strh	r0, [r0, r4]
1a000b16:	2b00      	.short	0x2b00
1a000b18:	d005      	beq.n	1a000b26 <DVS128BiasFlush+0x2c6>
1a000b1a:	220a      	.short	0x220a
1a000b1c:	2105      	movs	r1, #5
1a000b1e:	4813      	ldr	r0, [pc, #76]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000b20:	f7ff fc08 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000b24:	e004      	b.n	1a000b30 <DVS128BiasFlush+0x2d0>
1a000b26:	220a      	movs	r2, #10
1a000b28:	48102105 	.word	0x48102105
1a000b2c:	f7ff fc1c 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000b30:	2101220f 	.word	0x2101220f
1a000b34:	480d      	ldr	r0, [pc, #52]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000b36:	f7ff      	.short	0xf7ff
1a000b38:	fbfd 2001 			; <UNDEFINED> instruction: 0xfbfd2001
1a000b3c:	fd20f005 	.word	0xfd20f005
1a000b40:	220f      	movs	r2, #15
1a000b42:	2101      	.short	0x2101
1a000b44:	4809      	ldr	r0, [pc, #36]	; (1a000b6c <DVS128BiasFlush+0x30c>)
1a000b46:	f7ff      	.short	0xf7ff
1a000b48:	fc0f 2001 	stc2	0, cr2, [pc], {1}
1a000b4c:	fd18f005 	.word	0xfd18f005
		BOUT(currentBias & 0x1000);
1a000b50:	68bb      	ldr	r3, [r7, #8]
1a000b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
1a000b56:	2b00      	cmp	r3, #0
1a000b58:	d00a      	beq.n	1a000b70 <DVS128BiasFlush+0x310>
1a000b5a:	220a      	movs	r2, #10
1a000b5c:	2105      	movs	r1, #5
1a000b5e:	4803      	.short	0x4803
1a000b60:	f7ff fbe8 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000b64:	bf00e009 	.word	0xbf00e009
1a000b68:	64e8      	str	r0, [r5, #76]	; 0x4c
1a000b6a:	1008      	asrs	r0, r1, #32
1a000b6c:	4000      	ands	r0, r0
1a000b6e:	400f      	ands	r7, r1
1a000b70:	2105220a 	.word	0x2105220a
1a000b74:	48be      	ldr	r0, [pc, #760]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000b76:	f7ff      	.short	0xf7ff
1a000b78:	fbf7 220f 			; <UNDEFINED> instruction: 0xfbf7220f
1a000b7c:	48bc2101 	.word	0x48bc2101
1a000b80:	f7ff fbd8 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000b84:	f0052001 	.word	0xf0052001
1a000b88:	fcfb 220f 	ldc2l	2, cr2, [fp], #60	; 0x3c
1a000b8c:	48b82101 	.word	0x48b82101
1a000b90:	f7ff fbea 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000b94:	f0052001 	.word	0xf0052001
1a000b98:	fcf3 68bb 	ldc2l	8, cr6, [r3], #748	; 0x2ec

		BOUT(currentBias & 0x800);
1a000b9c:	6300f403 	.word	0x6300f403
1a000ba0:	2b00      	cmp	r3, #0
1a000ba2:	d005      	beq.n	1a000bb0 <DVS128BiasFlush+0x350>
1a000ba4:	220a      	movs	r2, #10
1a000ba6:	2105      	movs	r1, #5
1a000ba8:	48b1      	ldr	r0, [pc, #708]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000baa:	f7ff fbc3 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000bae:	e004      	b.n	1a000bba <DVS128BiasFlush+0x35a>
1a000bb0:	220a      	movs	r2, #10
1a000bb2:	2105      	movs	r1, #5
1a000bb4:	48ae      	ldr	r0, [pc, #696]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000bb6:	f7ff fbd7 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000bba:	220f      	movs	r2, #15
1a000bbc:	2101      	movs	r1, #1
1a000bbe:	48ac      	ldr	r0, [pc, #688]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000bc0:	f7ff fbb8 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000bc4:	2001      	movs	r0, #1
1a000bc6:	f005 fcdb 	bl	1a006580 <timerDelayUs>
1a000bca:	220f      	movs	r2, #15
1a000bcc:	2101      	movs	r1, #1
1a000bce:	48a8      	ldr	r0, [pc, #672]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000bd0:	f7ff fbca 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000bd4:	2001      	movs	r0, #1
1a000bd6:	f005 fcd3 	bl	1a006580 <timerDelayUs>
		BOUT(currentBias & 0x400);
1a000bda:	68bb      	ldr	r3, [r7, #8]
1a000bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
1a000be0:	2b00      	cmp	r3, #0
1a000be2:	d005      	beq.n	1a000bf0 <DVS128BiasFlush+0x390>
1a000be4:	220a      	movs	r2, #10
1a000be6:	2105      	movs	r1, #5
1a000be8:	48a1      	ldr	r0, [pc, #644]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000bea:	f7ff fba3 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000bee:	e004      	b.n	1a000bfa <DVS128BiasFlush+0x39a>
1a000bf0:	220a      	movs	r2, #10
1a000bf2:	2105      	movs	r1, #5
1a000bf4:	489e      	ldr	r0, [pc, #632]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000bf6:	f7ff fbb7 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000bfa:	220f      	movs	r2, #15
1a000bfc:	2101      	movs	r1, #1
1a000bfe:	489c      	ldr	r0, [pc, #624]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000c00:	f7ff fb98 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000c04:	2001      	movs	r0, #1
1a000c06:	f005 fcbb 	bl	1a006580 <timerDelayUs>
1a000c0a:	220f      	movs	r2, #15
1a000c0c:	2101      	movs	r1, #1
1a000c0e:	4898      	ldr	r0, [pc, #608]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000c10:	f7ff fbaa 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000c14:	2001      	movs	r0, #1
1a000c16:	f005 fcb3 	bl	1a006580 <timerDelayUs>
		BOUT(currentBias & 0x200);
1a000c1a:	68bb      	ldr	r3, [r7, #8]
1a000c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
1a000c20:	2b00      	cmp	r3, #0
1a000c22:	d005      	beq.n	1a000c30 <DVS128BiasFlush+0x3d0>
1a000c24:	220a      	movs	r2, #10
1a000c26:	2105      	movs	r1, #5
1a000c28:	4891      	ldr	r0, [pc, #580]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000c2a:	f7ff fb83 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000c2e:	e004      	b.n	1a000c3a <DVS128BiasFlush+0x3da>
1a000c30:	220a      	movs	r2, #10
1a000c32:	2105      	movs	r1, #5
1a000c34:	488e      	ldr	r0, [pc, #568]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000c36:	f7ff fb97 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000c3a:	220f      	movs	r2, #15
1a000c3c:	2101      	movs	r1, #1
1a000c3e:	488c      	ldr	r0, [pc, #560]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000c40:	f7ff fb78 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000c44:	2001      	movs	r0, #1
1a000c46:	f005 fc9b 	bl	1a006580 <timerDelayUs>
1a000c4a:	220f      	movs	r2, #15
1a000c4c:	2101      	movs	r1, #1
1a000c4e:	4888      	ldr	r0, [pc, #544]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000c50:	f7ff fb8a 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000c54:	2001      	movs	r0, #1
1a000c56:	f005 fc93 	bl	1a006580 <timerDelayUs>
		BOUT(currentBias & 0x100);
1a000c5a:	68bb      	ldr	r3, [r7, #8]
1a000c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a000c60:	2b00      	cmp	r3, #0
1a000c62:	d005      	beq.n	1a000c70 <DVS128BiasFlush+0x410>
1a000c64:	220a      	movs	r2, #10
1a000c66:	2105      	movs	r1, #5
1a000c68:	4881      	ldr	r0, [pc, #516]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000c6a:	f7ff fb63 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000c6e:	e004      	b.n	1a000c7a <DVS128BiasFlush+0x41a>
1a000c70:	220a      	movs	r2, #10
1a000c72:	2105      	movs	r1, #5
1a000c74:	487e      	ldr	r0, [pc, #504]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000c76:	f7ff fb77 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000c7a:	220f      	movs	r2, #15
1a000c7c:	2101      	movs	r1, #1
1a000c7e:	487c      	ldr	r0, [pc, #496]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000c80:	f7ff fb58 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000c84:	2001      	movs	r0, #1
1a000c86:	f005 fc7b 	bl	1a006580 <timerDelayUs>
1a000c8a:	220f      	movs	r2, #15
1a000c8c:	2101      	movs	r1, #1
1a000c8e:	4878      	ldr	r0, [pc, #480]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000c90:	f7ff fb6a 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000c94:	2001      	movs	r0, #1
1a000c96:	f005 fc73 	bl	1a006580 <timerDelayUs>

		BOUT(currentBias & 0x80);
1a000c9a:	68bb      	ldr	r3, [r7, #8]
1a000c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
1a000ca0:	2b00      	cmp	r3, #0
1a000ca2:	d005      	beq.n	1a000cb0 <DVS128BiasFlush+0x450>
1a000ca4:	220a      	movs	r2, #10
1a000ca6:	2105      	movs	r1, #5
1a000ca8:	4871      	ldr	r0, [pc, #452]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000caa:	f7ff fb43 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000cae:	e004      	b.n	1a000cba <DVS128BiasFlush+0x45a>
1a000cb0:	220a      	movs	r2, #10
1a000cb2:	2105      	movs	r1, #5
1a000cb4:	486e      	ldr	r0, [pc, #440]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000cb6:	f7ff fb57 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000cba:	220f      	movs	r2, #15
1a000cbc:	2101      	movs	r1, #1
1a000cbe:	486c      	ldr	r0, [pc, #432]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000cc0:	f7ff fb38 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000cc4:	2001      	movs	r0, #1
1a000cc6:	f005 fc5b 	bl	1a006580 <timerDelayUs>
1a000cca:	220f      	movs	r2, #15
1a000ccc:	2101      	movs	r1, #1
1a000cce:	4868      	ldr	r0, [pc, #416]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000cd0:	f7ff fb4a 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000cd4:	2001      	movs	r0, #1
1a000cd6:	f005 fc53 	bl	1a006580 <timerDelayUs>
		BOUT(currentBias & 0x40);
1a000cda:	68bb      	ldr	r3, [r7, #8]
1a000cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a000ce0:	2b00      	cmp	r3, #0
1a000ce2:	d005      	beq.n	1a000cf0 <DVS128BiasFlush+0x490>
1a000ce4:	220a      	movs	r2, #10
1a000ce6:	2105      	movs	r1, #5
1a000ce8:	4861      	ldr	r0, [pc, #388]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000cea:	f7ff fb23 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000cee:	e004      	b.n	1a000cfa <DVS128BiasFlush+0x49a>
1a000cf0:	220a      	movs	r2, #10
1a000cf2:	2105      	movs	r1, #5
1a000cf4:	485e      	ldr	r0, [pc, #376]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000cf6:	f7ff fb37 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000cfa:	220f      	movs	r2, #15
1a000cfc:	2101      	movs	r1, #1
1a000cfe:	485c      	ldr	r0, [pc, #368]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000d00:	f7ff fb18 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000d04:	2001      	movs	r0, #1
1a000d06:	f005 fc3b 	bl	1a006580 <timerDelayUs>
1a000d0a:	220f      	movs	r2, #15
1a000d0c:	2101      	movs	r1, #1
1a000d0e:	4858      	ldr	r0, [pc, #352]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000d10:	f7ff fb2a 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000d14:	2001      	movs	r0, #1
1a000d16:	f005 fc33 	bl	1a006580 <timerDelayUs>
		BOUT(currentBias & 0x20);
1a000d1a:	68bb      	ldr	r3, [r7, #8]
1a000d1c:	f003 0320 	and.w	r3, r3, #32
1a000d20:	2b00      	cmp	r3, #0
1a000d22:	d005      	beq.n	1a000d30 <DVS128BiasFlush+0x4d0>
1a000d24:	220a      	movs	r2, #10
1a000d26:	2105      	movs	r1, #5
1a000d28:	4851      	ldr	r0, [pc, #324]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000d2a:	f7ff fb03 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000d2e:	e004      	b.n	1a000d3a <DVS128BiasFlush+0x4da>
1a000d30:	220a      	movs	r2, #10
1a000d32:	2105      	movs	r1, #5
1a000d34:	484e      	ldr	r0, [pc, #312]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000d36:	f7ff fb17 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000d3a:	220f      	movs	r2, #15
1a000d3c:	2101      	movs	r1, #1
1a000d3e:	484c      	ldr	r0, [pc, #304]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000d40:	f7ff faf8 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000d44:	2001      	movs	r0, #1
1a000d46:	f005 fc1b 	bl	1a006580 <timerDelayUs>
1a000d4a:	220f      	movs	r2, #15
1a000d4c:	2101      	movs	r1, #1
1a000d4e:	4848      	ldr	r0, [pc, #288]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000d50:	f7ff fb0a 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000d54:	2001      	movs	r0, #1
1a000d56:	f005 fc13 	bl	1a006580 <timerDelayUs>
		BOUT(currentBias & 0x10);
1a000d5a:	68bb      	ldr	r3, [r7, #8]
1a000d5c:	f003 0310 	and.w	r3, r3, #16
1a000d60:	2b00      	cmp	r3, #0
1a000d62:	d005      	beq.n	1a000d70 <DVS128BiasFlush+0x510>
1a000d64:	220a      	movs	r2, #10
1a000d66:	2105      	movs	r1, #5
1a000d68:	4841      	ldr	r0, [pc, #260]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000d6a:	f7ff fae3 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000d6e:	e004      	b.n	1a000d7a <DVS128BiasFlush+0x51a>
1a000d70:	220a      	movs	r2, #10
1a000d72:	2105      	movs	r1, #5
1a000d74:	483e      	ldr	r0, [pc, #248]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000d76:	f7ff faf7 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000d7a:	220f      	movs	r2, #15
1a000d7c:	2101      	movs	r1, #1
1a000d7e:	483c      	ldr	r0, [pc, #240]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000d80:	f7ff fad8 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000d84:	2001      	movs	r0, #1
1a000d86:	f005 fbfb 	bl	1a006580 <timerDelayUs>
1a000d8a:	220f      	movs	r2, #15
1a000d8c:	2101      	movs	r1, #1
1a000d8e:	4838      	ldr	r0, [pc, #224]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000d90:	f7ff faea 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000d94:	2001      	movs	r0, #1
1a000d96:	f005 fbf3 	bl	1a006580 <timerDelayUs>

		BOUT(currentBias & 0x8);
1a000d9a:	68bb      	ldr	r3, [r7, #8]
1a000d9c:	f003 0308 	and.w	r3, r3, #8
1a000da0:	2b00      	cmp	r3, #0
1a000da2:	d005      	beq.n	1a000db0 <DVS128BiasFlush+0x550>
1a000da4:	220a      	movs	r2, #10
1a000da6:	2105      	movs	r1, #5
1a000da8:	4831      	ldr	r0, [pc, #196]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000daa:	f7ff fac3 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000dae:	e004      	b.n	1a000dba <DVS128BiasFlush+0x55a>
1a000db0:	220a      	movs	r2, #10
1a000db2:	2105      	movs	r1, #5
1a000db4:	482e      	ldr	r0, [pc, #184]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000db6:	f7ff fad7 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000dba:	220f      	movs	r2, #15
1a000dbc:	2101      	movs	r1, #1
1a000dbe:	482c      	ldr	r0, [pc, #176]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000dc0:	f7ff fab8 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000dc4:	2001      	movs	r0, #1
1a000dc6:	f005 fbdb 	bl	1a006580 <timerDelayUs>
1a000dca:	220f      	movs	r2, #15
1a000dcc:	2101      	movs	r1, #1
1a000dce:	4828      	ldr	r0, [pc, #160]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000dd0:	f7ff faca 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000dd4:	2001      	movs	r0, #1
1a000dd6:	f005 fbd3 	bl	1a006580 <timerDelayUs>
		BOUT(currentBias & 0x4);
1a000dda:	68bb      	ldr	r3, [r7, #8]
1a000ddc:	f003 0304 	and.w	r3, r3, #4
1a000de0:	2b00      	cmp	r3, #0
1a000de2:	d005      	beq.n	1a000df0 <DVS128BiasFlush+0x590>
1a000de4:	220a      	movs	r2, #10
1a000de6:	2105      	movs	r1, #5
1a000de8:	4821      	ldr	r0, [pc, #132]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000dea:	f7ff faa3 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000dee:	e004      	b.n	1a000dfa <DVS128BiasFlush+0x59a>
1a000df0:	220a      	movs	r2, #10
1a000df2:	2105      	movs	r1, #5
1a000df4:	481e      	ldr	r0, [pc, #120]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000df6:	f7ff fab7 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000dfa:	220f      	movs	r2, #15
1a000dfc:	2101      	movs	r1, #1
1a000dfe:	481c      	ldr	r0, [pc, #112]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000e00:	f7ff fa98 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000e04:	2001      	movs	r0, #1
1a000e06:	f005 fbbb 	bl	1a006580 <timerDelayUs>
1a000e0a:	220f      	movs	r2, #15
1a000e0c:	2101      	movs	r1, #1
1a000e0e:	4818      	ldr	r0, [pc, #96]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000e10:	f7ff faaa 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000e14:	2001      	movs	r0, #1
1a000e16:	f005 fbb3 	bl	1a006580 <timerDelayUs>
		BOUT(currentBias & 0x2);
1a000e1a:	68bb      	ldr	r3, [r7, #8]
1a000e1c:	f003 0302 	and.w	r3, r3, #2
1a000e20:	2b00      	cmp	r3, #0
1a000e22:	d005      	beq.n	1a000e30 <DVS128BiasFlush+0x5d0>
1a000e24:	220a      	movs	r2, #10
1a000e26:	2105      	movs	r1, #5
1a000e28:	4811      	ldr	r0, [pc, #68]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000e2a:	f7ff fa83 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000e2e:	e004      	b.n	1a000e3a <DVS128BiasFlush+0x5da>
1a000e30:	220a      	movs	r2, #10
1a000e32:	2105      	movs	r1, #5
1a000e34:	480e      	ldr	r0, [pc, #56]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000e36:	f7ff fa97 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000e3a:	220f      	movs	r2, #15
1a000e3c:	2101      	movs	r1, #1
1a000e3e:	480c      	ldr	r0, [pc, #48]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000e40:	f7ff fa78 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000e44:	2001      	movs	r0, #1
1a000e46:	f005 fb9b 	bl	1a006580 <timerDelayUs>
1a000e4a:	220f      	movs	r2, #15
1a000e4c:	2101      	movs	r1, #1
1a000e4e:	4808      	ldr	r0, [pc, #32]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000e50:	f7ff fa8a 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000e54:	2001      	movs	r0, #1
1a000e56:	f005 fb93 	bl	1a006580 <timerDelayUs>
		BOUT(currentBias & 0x1);
1a000e5a:	68bb      	ldr	r3, [r7, #8]
1a000e5c:	f003 0301 	and.w	r3, r3, #1
1a000e60:	2b00      	cmp	r3, #0
1a000e62:	d007      	beq.n	1a000e74 <DVS128BiasFlush+0x614>
1a000e64:	220a      	movs	r2, #10
1a000e66:	2105      	movs	r1, #5
1a000e68:	4801      	ldr	r0, [pc, #4]	; (1a000e70 <DVS128BiasFlush+0x610>)
1a000e6a:	f7ff fa63 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000e6e:	e006      	b.n	1a000e7e <DVS128BiasFlush+0x61e>
1a000e70:	400f4000 	.word	0x400f4000
1a000e74:	220a      	movs	r2, #10
1a000e76:	2105      	movs	r1, #5
1a000e78:	4816      	ldr	r0, [pc, #88]	; (1a000ed4 <DVS128BiasFlush+0x674>)
1a000e7a:	f7ff fa75 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000e7e:	220f      	movs	r2, #15
1a000e80:	2101      	movs	r1, #1
1a000e82:	4814      	ldr	r0, [pc, #80]	; (1a000ed4 <DVS128BiasFlush+0x674>)
1a000e84:	f7ff fa56 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>
1a000e88:	2001      	movs	r0, #1
1a000e8a:	f005 fb79 	bl	1a006580 <timerDelayUs>
1a000e8e:	220f      	movs	r2, #15
1a000e90:	2101      	movs	r1, #1
1a000e92:	4810      	ldr	r0, [pc, #64]	; (1a000ed4 <DVS128BiasFlush+0x674>)
1a000e94:	f7ff fa68 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
1a000e98:	2001      	movs	r0, #1
1a000e9a:	f005 fb71 	bl	1a006580 <timerDelayUs>
						timerDelayUs(1); }

void DVS128BiasFlush(uint32_t multiplier) {
	uint32_t biasIndex, currentBias;

	for (biasIndex = 0; biasIndex < 12; biasIndex++) {
1a000e9e:	68fb      	ldr	r3, [r7, #12]
1a000ea0:	3301      	adds	r3, #1
1a000ea2:	60fb      	str	r3, [r7, #12]
1a000ea4:	68fb      	ldr	r3, [r7, #12]
1a000ea6:	2b0b      	cmp	r3, #11
1a000ea8:	f67f ace1 	bls.w	1a00086e <DVS128BiasFlush+0xe>
		BOUT(currentBias & 0x2);
		BOUT(currentBias & 0x1);

	}  // end of biasIndexclocking

	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, GPIO_PORT_BIAS_DATA, GPIO_PIN_BIAS_DATA); // set data pin to low just to have the same output all the time
1a000eac:	220a      	movs	r2, #10
1a000eae:	2105      	movs	r1, #5
1a000eb0:	4808      	ldr	r0, [pc, #32]	; (1a000ed4 <DVS128BiasFlush+0x674>)
1a000eb2:	f7ff fa59 	bl	1a000368 <Chip_GPIO_SetPinOutLow>

// trigger latch to push bias data to bias generators
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, GPIO_PORT_BIAS_LATCH, GPIO_PIN_BIAS_LATCH);
1a000eb6:	220c      	movs	r2, #12
1a000eb8:	2101      	movs	r1, #1
1a000eba:	4806      	ldr	r0, [pc, #24]	; (1a000ed4 <DVS128BiasFlush+0x674>)
1a000ebc:	f7ff fa54 	bl	1a000368 <Chip_GPIO_SetPinOutLow>
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, GPIO_PORT_BIAS_LATCH, GPIO_PIN_BIAS_LATCH);
1a000ec0:	220c      	movs	r2, #12
1a000ec2:	2101      	movs	r1, #1
1a000ec4:	4803      	ldr	r0, [pc, #12]	; (1a000ed4 <DVS128BiasFlush+0x674>)
1a000ec6:	f7ff fa35 	bl	1a000334 <Chip_GPIO_SetPinOutHigh>

}
1a000eca:	bf00      	nop
1a000ecc:	3710      	adds	r7, #16
1a000ece:	46bd      	mov	sp, r7
1a000ed0:	bd80      	pop	{r7, pc}
1a000ed2:	bf00      	nop
1a000ed4:	400f4000 	.word	0x400f4000

1a000ed8 <startSlave>:
#endif

/*******************************************************************
 * Static function to Release SLAVE processor from reset
 *******************************************************************/
static void startSlave(void) {
1a000ed8:	b480      	push	{r7}
1a000eda:	b083      	sub	sp, #12
1a000edc:	af00      	add	r7, sp, #0

	volatile uint32_t u32REG, u32Val;

	/* Release Slave from reset, first read status */
	/* Notice, this is a read only register !!! */
	u32REG = RGU_RESET_ACTIVE_STATUS1;
1a000ede:	4b0d      	ldr	r3, [pc, #52]	; (1a000f14 <startSlave+0x3c>)
1a000ee0:	681b      	ldr	r3, [r3, #0]
1a000ee2:	607b      	str	r3, [r7, #4]

	/* If the M0 is being held in reset, release it */
	/* 1 = no reset, 0 = reset */
	while (!(u32REG & (1u << 24))) {
1a000ee4:	e00a      	b.n	1a000efc <startSlave+0x24>
		u32Val = (~(u32REG) & (~(1 << 24)));
1a000ee6:	687b      	ldr	r3, [r7, #4]
1a000ee8:	43db      	mvns	r3, r3
1a000eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
1a000eee:	603b      	str	r3, [r7, #0]
		RGU_RESET_CTRL1 = u32Val;
1a000ef0:	4a09      	ldr	r2, [pc, #36]	; (1a000f18 <startSlave+0x40>)
1a000ef2:	683b      	ldr	r3, [r7, #0]
1a000ef4:	6013      	str	r3, [r2, #0]
		u32REG = RGU_RESET_ACTIVE_STATUS1;
1a000ef6:	4b07      	ldr	r3, [pc, #28]	; (1a000f14 <startSlave+0x3c>)
1a000ef8:	681b      	ldr	r3, [r3, #0]
1a000efa:	607b      	str	r3, [r7, #4]
	/* Notice, this is a read only register !!! */
	u32REG = RGU_RESET_ACTIVE_STATUS1;

	/* If the M0 is being held in reset, release it */
	/* 1 = no reset, 0 = reset */
	while (!(u32REG & (1u << 24))) {
1a000efc:	687b      	ldr	r3, [r7, #4]
1a000efe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
1a000f02:	2b00      	cmp	r3, #0
1a000f04:	d0ef      	beq.n	1a000ee6 <startSlave+0xe>
		u32Val = (~(u32REG) & (~(1 << 24)));
		RGU_RESET_CTRL1 = u32Val;
		u32REG = RGU_RESET_ACTIVE_STATUS1;
	};

}
1a000f06:	bf00      	nop
1a000f08:	370c      	adds	r7, #12
1a000f0a:	46bd      	mov	sp, r7
1a000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000f10:	4770      	bx	lr
1a000f12:	bf00      	nop
1a000f14:	40053154 	.word	0x40053154
1a000f18:	40053104 	.word	0x40053104

1a000f1c <haltSlave>:

/*******************************************************************
 * Static function to put the SLAVE processor back in reset
 *******************************************************************/
void haltSlave(void) {
1a000f1c:	b480      	push	{r7}
1a000f1e:	b083      	sub	sp, #12
1a000f20:	af00      	add	r7, sp, #0

	volatile uint32_t u32REG, u32Val;
	/* Check if M0 is reset by reading status */
	u32REG = RGU_RESET_ACTIVE_STATUS1;
1a000f22:	4b0d      	ldr	r3, [pc, #52]	; (1a000f58 <haltSlave+0x3c>)
1a000f24:	681b      	ldr	r3, [r3, #0]
1a000f26:	607b      	str	r3, [r7, #4]

	/* If the M0 has reset not asserted, halt it... */
	/* in u32REG, status register, 1 = no reset */
	while ((u32REG & (1u << 24))) {
1a000f28:	e00a      	b.n	1a000f40 <haltSlave+0x24>
		u32Val = ((~u32REG) | (1 << 24));
1a000f2a:	687b      	ldr	r3, [r7, #4]
1a000f2c:	43db      	mvns	r3, r3
1a000f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
1a000f32:	603b      	str	r3, [r7, #0]
		RGU_RESET_CTRL1 = u32Val;
1a000f34:	4a09      	ldr	r2, [pc, #36]	; (1a000f5c <haltSlave+0x40>)
1a000f36:	683b      	ldr	r3, [r7, #0]
1a000f38:	6013      	str	r3, [r2, #0]
		u32REG = RGU_RESET_ACTIVE_STATUS1;
1a000f3a:	4b07      	ldr	r3, [pc, #28]	; (1a000f58 <haltSlave+0x3c>)
1a000f3c:	681b      	ldr	r3, [r3, #0]
1a000f3e:	607b      	str	r3, [r7, #4]
	/* Check if M0 is reset by reading status */
	u32REG = RGU_RESET_ACTIVE_STATUS1;

	/* If the M0 has reset not asserted, halt it... */
	/* in u32REG, status register, 1 = no reset */
	while ((u32REG & (1u << 24))) {
1a000f40:	687b      	ldr	r3, [r7, #4]
1a000f42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
1a000f46:	2b00      	cmp	r3, #0
1a000f48:	d1ef      	bne.n	1a000f2a <haltSlave+0xe>
		u32Val = ((~u32REG) | (1 << 24));
		RGU_RESET_CTRL1 = u32Val;
		u32REG = RGU_RESET_ACTIVE_STATUS1;
	}
}
1a000f4a:	bf00      	nop
1a000f4c:	370c      	adds	r7, #12
1a000f4e:	46bd      	mov	sp, r7
1a000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000f54:	4770      	bx	lr
1a000f56:	bf00      	nop
1a000f58:	40053154 	.word	0x40053154
1a000f5c:	40053104 	.word	0x40053104

1a000f60 <cr_start_m0>:

/*******************************************************************
 * Function to start required CM0 slave cpu executing
 *******************************************************************/
void cr_start_m0(uint8_t *CM0image_start) {
1a000f60:	b580      	push	{r7, lr}
1a000f62:	b082      	sub	sp, #8
1a000f64:	af00      	add	r7, sp, #0
1a000f66:	6078      	str	r0, [r7, #4]

	// Make sure M0 is not running
	haltSlave();
1a000f68:	f7ff ffd8 	bl	1a000f1c <haltSlave>

	// Set M0's vector table to point to start of M0 image
	CREG_M0APPMEMMAP = (uint32_t) CM0image_start;
1a000f6c:	4a08      	ldr	r2, [pc, #32]	; (1a000f90 <cr_start_m0+0x30>)
1a000f6e:	687b      	ldr	r3, [r7, #4]
1a000f70:	6013      	str	r3, [r2, #0]
	__core_m0_has_started__ = 0; //the M0 will set this variable to 1
1a000f72:	4b08      	ldr	r3, [pc, #32]	; (1a000f94 <cr_start_m0+0x34>)
1a000f74:	2200      	movs	r2, #0
1a000f76:	601a      	str	r2, [r3, #0]
#if LOW_POWER_MODE
	NVIC_EnableIRQ(M0APP_IRQn);
#endif
	// Release M0 from reset
	startSlave();
1a000f78:	f7ff ffae 	bl	1a000ed8 <startSlave>
	while (!__core_m0_has_started__) {
1a000f7c:	bf00      	nop
1a000f7e:	4b05      	ldr	r3, [pc, #20]	; (1a000f94 <cr_start_m0+0x34>)
1a000f80:	681b      	ldr	r3, [r3, #0]
1a000f82:	2b00      	cmp	r3, #0
1a000f84:	d0fb      	beq.n	1a000f7e <cr_start_m0+0x1e>
		;//Wait for the M0 to be ready
	}
}
1a000f86:	bf00      	nop
1a000f88:	3708      	adds	r7, #8
1a000f8a:	46bd      	mov	sp, r7
1a000f8c:	bd80      	pop	{r7, pc}
1a000f8e:	bf00      	nop
1a000f90:	40043404 	.word	0x40043404
1a000f94:	10086010 	.word	0x10086010

1a000f98 <ResetISR>:
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a000f98:	b538      	push	{r3, r4, r5, lr}
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a000f9a:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000f9c:	4b15      	ldr	r3, [pc, #84]	; (1a000ff4 <ResetISR+0x5c>)
1a000f9e:	4a16      	ldr	r2, [pc, #88]	; (1a000ff8 <ResetISR+0x60>)
1a000fa0:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000fa2:	4a16      	ldr	r2, [pc, #88]	; (1a000ffc <ResetISR+0x64>)
1a000fa4:	605a      	str	r2, [r3, #4]

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000fa6:	4a16      	ldr	r2, [pc, #88]	; (1a001000 <ResetISR+0x68>)
1a000fa8:	f04f 33ff 	mov.w	r3, #4294967295
1a000fac:	6013      	str	r3, [r2, #0]
1a000fae:	6053      	str	r3, [r2, #4]
1a000fb0:	6093      	str	r3, [r2, #8]
1a000fb2:	60d3      	str	r3, [r2, #12]
1a000fb4:	6113      	str	r3, [r2, #16]
1a000fb6:	6153      	str	r3, [r2, #20]
1a000fb8:	6193      	str	r3, [r2, #24]
1a000fba:	61d3      	str	r3, [r2, #28]
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a000fbc:	b662      	cpsie	i
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a000fbe:	4c11      	ldr	r4, [pc, #68]	; (1a001004 <ResetISR+0x6c>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a000fc0:	4d11      	ldr	r5, [pc, #68]	; (1a001008 <ResetISR+0x70>)
1a000fc2:	42ac      	cmp	r4, r5
1a000fc4:	d207      	bcs.n	1a000fd6 <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
1a000fc6:	e894 0003 	ldmia.w	r4, {r0, r1}
1a000fca:	340c      	adds	r4, #12
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000fcc:	f854 2c04 	ldr.w	r2, [r4, #-4]
1a000fd0:	f7ff f904 	bl	1a0001dc <data_init>
1a000fd4:	e7f5      	b.n	1a000fc2 <ResetISR+0x2a>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a000fd6:	4d0d      	ldr	r5, [pc, #52]	; (1a00100c <ResetISR+0x74>)
1a000fd8:	42ac      	cmp	r4, r5
1a000fda:	d206      	bcs.n	1a000fea <ResetISR+0x52>
        ExeAddr = *SectionTableAddr++;
1a000fdc:	f854 0b08 	ldr.w	r0, [r4], #8
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a000fe0:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000fe4:	f7ff f905 	bl	1a0001f2 <bss_init>
1a000fe8:	e7f6      	b.n	1a000fd8 <ResetISR+0x40>
        *pSCB_VTOR = (unsigned int) g_pfnVectors;
    }
#endif

#if defined (__USE_LPCOPEN)
    SystemInit();
1a000fea:	f003 fc4f 	bl	1a00488c <SystemInit>
    // Call C++ library initialisation
    //
    __libc_init_array();
#endif

    main();
1a000fee:	f000 f9c1 	bl	1a001374 <main>
1a000ff2:	e7fe      	b.n	1a000ff2 <ResetISR+0x5a>
1a000ff4:	40053100 	.word	0x40053100
1a000ff8:	10df1000 	.word	0x10df1000
1a000ffc:	01dff7ff 	.word	0x01dff7ff
1a001000:	e000e280 	.word	0xe000e280
1a001004:	1a000114 	.word	0x1a000114
1a001008:	1a000180 	.word	0x1a000180
1a00100c:	1a0001c8 	.word	0x1a0001c8

1a001010 <Chip_SCU_PinMuxSet>:
 * @return	Nothing
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a001010:	b480      	push	{r7}
1a001012:	b083      	sub	sp, #12
1a001014:	af00      	add	r7, sp, #0
1a001016:	4603      	mov	r3, r0
1a001018:	71fb      	strb	r3, [r7, #7]
1a00101a:	460b      	mov	r3, r1
1a00101c:	71bb      	strb	r3, [r7, #6]
1a00101e:	4613      	mov	r3, r2
1a001020:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001022:	4807      	ldr	r0, [pc, #28]	; (1a001040 <Chip_SCU_PinMuxSet+0x30>)
1a001024:	79f9      	ldrb	r1, [r7, #7]
1a001026:	79bb      	ldrb	r3, [r7, #6]
1a001028:	88ba      	ldrh	r2, [r7, #4]
1a00102a:	0149      	lsls	r1, r1, #5
1a00102c:	440b      	add	r3, r1
1a00102e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a001032:	bf00      	nop
1a001034:	370c      	adds	r7, #12
1a001036:	46bd      	mov	sp, r7
1a001038:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00103c:	4770      	bx	lr
1a00103e:	bf00      	nop
1a001040:	40086000 	.word	0x40086000

1a001044 <Chip_GPIO_SetPinDIROutput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a001044:	b480      	push	{r7}
1a001046:	b083      	sub	sp, #12
1a001048:	af00      	add	r7, sp, #0
1a00104a:	6078      	str	r0, [r7, #4]
1a00104c:	460b      	mov	r3, r1
1a00104e:	70fb      	strb	r3, [r7, #3]
1a001050:	4613      	mov	r3, r2
1a001052:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] |= 1UL << pin;
1a001054:	78fa      	ldrb	r2, [r7, #3]
1a001056:	78f9      	ldrb	r1, [r7, #3]
1a001058:	687b      	ldr	r3, [r7, #4]
1a00105a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a00105e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a001062:	78bb      	ldrb	r3, [r7, #2]
1a001064:	2001      	movs	r0, #1
1a001066:	fa00 f303 	lsl.w	r3, r0, r3
1a00106a:	4319      	orrs	r1, r3
1a00106c:	687b      	ldr	r3, [r7, #4]
1a00106e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a001076:	bf00      	nop
1a001078:	370c      	adds	r7, #12
1a00107a:	46bd      	mov	sp, r7
1a00107c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001080:	4770      	bx	lr
1a001082:	bf00      	nop

1a001084 <Chip_GPIO_SetPinOutHigh>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a001084:	b480      	push	{r7}
1a001086:	b083      	sub	sp, #12
1a001088:	af00      	add	r7, sp, #0
1a00108a:	6078      	str	r0, [r7, #4]
1a00108c:	460b      	mov	r3, r1
1a00108e:	70fb      	strb	r3, [r7, #3]
1a001090:	4613      	mov	r3, r2
1a001092:	70bb      	strb	r3, [r7, #2]
	pGPIO->SET[port] = (1 << pin);
1a001094:	78fa      	ldrb	r2, [r7, #3]
1a001096:	78bb      	ldrb	r3, [r7, #2]
1a001098:	2101      	movs	r1, #1
1a00109a:	fa01 f303 	lsl.w	r3, r1, r3
1a00109e:	4619      	mov	r1, r3
1a0010a0:	687b      	ldr	r3, [r7, #4]
1a0010a2:	f502 6208 	add.w	r2, r2, #2176	; 0x880
1a0010a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a0010aa:	bf00      	nop
1a0010ac:	370c      	adds	r7, #12
1a0010ae:	46bd      	mov	sp, r7
1a0010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0010b4:	4770      	bx	lr
1a0010b6:	bf00      	nop

1a0010b8 <Chip_GPIO_SetPinOutLow>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a0010b8:	b480      	push	{r7}
1a0010ba:	b083      	sub	sp, #12
1a0010bc:	af00      	add	r7, sp, #0
1a0010be:	6078      	str	r0, [r7, #4]
1a0010c0:	460b      	mov	r3, r1
1a0010c2:	70fb      	strb	r3, [r7, #3]
1a0010c4:	4613      	mov	r3, r2
1a0010c6:	70bb      	strb	r3, [r7, #2]
	pGPIO->CLR[port] = (1 << pin);
1a0010c8:	78fa      	ldrb	r2, [r7, #3]
1a0010ca:	78bb      	ldrb	r3, [r7, #2]
1a0010cc:	2101      	movs	r1, #1
1a0010ce:	fa01 f303 	lsl.w	r3, r1, r3
1a0010d2:	4619      	mov	r1, r3
1a0010d4:	687b      	ldr	r3, [r7, #4]
1a0010d6:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
1a0010da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a0010de:	bf00      	nop
1a0010e0:	370c      	adds	r7, #12
1a0010e2:	46bd      	mov	sp, r7
1a0010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0010e8:	4770      	bx	lr
1a0010ea:	bf00      	nop

1a0010ec <ExtraPinsInit>:
#define FTDI_RESET_PIN_GPIO  		(2)
#define FTDI_RESET_PORT  			(1)
#define FTDI_RESET_PIN  			(15)


void ExtraPinsInit(void) {
1a0010ec:	b580      	push	{r7, lr}
1a0010ee:	af00      	add	r7, sp, #0
	toggleLed0 = 0;
1a0010f0:	4b21      	ldr	r3, [pc, #132]	; (1a001178 <ExtraPinsInit+0x8c>)
1a0010f2:	2200      	movs	r2, #0
1a0010f4:	601a      	str	r2, [r3, #0]
	ledBlinking = 0;
1a0010f6:	4b21      	ldr	r3, [pc, #132]	; (1a00117c <ExtraPinsInit+0x90>)
1a0010f8:	2200      	movs	r2, #0
1a0010fa:	701a      	strb	r2, [r3, #0]
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, VBAT_GND_PORT_GPIO, VBAT_GND_PIN_GPIO); /* set P1.17 as output */
1a0010fc:	220c      	movs	r2, #12
1a0010fe:	2100      	movs	r1, #0
1a001100:	481f      	ldr	r0, [pc, #124]	; (1a001180 <ExtraPinsInit+0x94>)
1a001102:	f7ff ff9f 	bl	1a001044 <Chip_GPIO_SetPinDIROutput>
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, VBAT_GND_PORT_GPIO, VBAT_GND_PIN_GPIO); //drive to ground
1a001106:	220c      	movs	r2, #12
1a001108:	2100      	movs	r1, #0
1a00110a:	481d      	ldr	r0, [pc, #116]	; (1a001180 <ExtraPinsInit+0x94>)
1a00110c:	f7ff ffd4 	bl	1a0010b8 <Chip_GPIO_SetPinOutLow>
	Chip_SCU_PinMuxSet(VBAT_GND_PORT, VBAT_GND_PIN, MD_PLN_FAST | FUNC0);
1a001110:	22f0      	movs	r2, #240	; 0xf0
1a001112:	2111      	movs	r1, #17
1a001114:	2001      	movs	r0, #1
1a001116:	f7ff ff7b 	bl	1a001010 <Chip_SCU_PinMuxSet>

	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, FTDI_RESET_PORT_GPIO, FTDI_RESET_PIN_GPIO); //enable the FTDI
1a00111a:	2202      	movs	r2, #2
1a00111c:	2100      	movs	r1, #0
1a00111e:	4818      	ldr	r0, [pc, #96]	; (1a001180 <ExtraPinsInit+0x94>)
1a001120:	f7ff ffb0 	bl	1a001084 <Chip_GPIO_SetPinOutHigh>
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, FTDI_RESET_PORT_GPIO, FTDI_RESET_PIN_GPIO); /* set P1.15 as output */
1a001124:	2202      	movs	r2, #2
1a001126:	2100      	movs	r1, #0
1a001128:	4815      	ldr	r0, [pc, #84]	; (1a001180 <ExtraPinsInit+0x94>)
1a00112a:	f7ff ff8b 	bl	1a001044 <Chip_GPIO_SetPinDIROutput>
	Chip_SCU_PinMuxSet(FTDI_RESET_PORT, FTDI_RESET_PIN, MD_PLN_FAST | FUNC0);
1a00112e:	22f0      	movs	r2, #240	; 0xf0
1a001130:	210f      	movs	r1, #15
1a001132:	2001      	movs	r0, #1
1a001134:	f7ff ff6c 	bl	1a001010 <Chip_SCU_PinMuxSet>

	// set P0.0 as output
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, LED0_PORT_GPIO, LED0_PIN_GPIO); //Turn on the LED
1a001138:	2200      	movs	r2, #0
1a00113a:	2100      	movs	r1, #0
1a00113c:	4810      	ldr	r0, [pc, #64]	; (1a001180 <ExtraPinsInit+0x94>)
1a00113e:	f7ff ffbb 	bl	1a0010b8 <Chip_GPIO_SetPinOutLow>
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, LED0_PORT_GPIO, LED0_PIN_GPIO);
1a001142:	2200      	movs	r2, #0
1a001144:	2100      	movs	r1, #0
1a001146:	480e      	ldr	r0, [pc, #56]	; (1a001180 <ExtraPinsInit+0x94>)
1a001148:	f7ff ff7c 	bl	1a001044 <Chip_GPIO_SetPinDIROutput>
	Chip_SCU_PinMuxSet(LED0_PORT, LED0_PIN, MD_PLN_FAST | FUNC0);
1a00114c:	22f0      	movs	r2, #240	; 0xf0
1a00114e:	2100      	movs	r1, #0
1a001150:	2000      	movs	r0, #0
1a001152:	f7ff ff5d 	bl	1a001010 <Chip_SCU_PinMuxSet>

	// set P0.1 as output
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, LED1_PORT_GPIO, LED1_PIN_GPIO); // Keep it Off
1a001156:	2201      	movs	r2, #1
1a001158:	2100      	movs	r1, #0
1a00115a:	4809      	ldr	r0, [pc, #36]	; (1a001180 <ExtraPinsInit+0x94>)
1a00115c:	f7ff ff92 	bl	1a001084 <Chip_GPIO_SetPinOutHigh>
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, LED1_PORT_GPIO, LED1_PIN_GPIO);
1a001160:	2201      	movs	r2, #1
1a001162:	2100      	movs	r1, #0
1a001164:	4806      	ldr	r0, [pc, #24]	; (1a001180 <ExtraPinsInit+0x94>)
1a001166:	f7ff ff6d 	bl	1a001044 <Chip_GPIO_SetPinDIROutput>
	Chip_SCU_PinMuxSet(LED1_PORT, LED1_PIN, MD_PLN_FAST | FUNC0);
1a00116a:	22f0      	movs	r2, #240	; 0xf0
1a00116c:	2101      	movs	r1, #1
1a00116e:	2000      	movs	r0, #0
1a001170:	f7ff ff4e 	bl	1a001010 <Chip_SCU_PinMuxSet>
}
1a001174:	bf00      	nop
1a001176:	bd80      	pop	{r7, pc}
1a001178:	10086520 	.word	0x10086520
1a00117c:	10086524 	.word	0x10086524
1a001180:	400f4000 	.word	0x400f4000

1a001184 <itd>:
0.000000, 1.000000, 0.707107, 0.382683, 0.195090, 0.098017 , 0.049068, 0.024541, 0.012272, 0.006136,
0.003068, 0.001534, 0.000767, 0.000383, 0.000192, 0.000096 , 0.000048, 0.000024, 0.000012, 0.000006,
0.000003,
};

int8_t itd(){
1a001184:	b480      	push	{r7}
1a001186:	b085      	sub	sp, #20
1a001188:	af00      	add	r7, sp, #0

	// fft(x)
	int8_t angle=0;
1a00118a:	2300      	movs	r3, #0
1a00118c:	73fb      	strb	r3, [r7, #15]
	COMPLEX *left;
	COMPLEX *right;
	int8_t lag;

	if(process_flag == 0){
1a00118e:	4b0a      	ldr	r3, [pc, #40]	; (1a0011b8 <itd+0x34>)
1a001190:	781b      	ldrb	r3, [r3, #0]
1a001192:	2b00      	cmp	r3, #0
1a001194:	d104      	bne.n	1a0011a0 <itd+0x1c>
		left=left0;
1a001196:	4b09      	ldr	r3, [pc, #36]	; (1a0011bc <itd+0x38>)
1a001198:	60bb      	str	r3, [r7, #8]
		right=right0;
1a00119a:	4b09      	ldr	r3, [pc, #36]	; (1a0011c0 <itd+0x3c>)
1a00119c:	607b      	str	r3, [r7, #4]
1a00119e:	e003      	b.n	1a0011a8 <itd+0x24>
	}
	else{
		left=left1;
1a0011a0:	4b08      	ldr	r3, [pc, #32]	; (1a0011c4 <itd+0x40>)
1a0011a2:	60bb      	str	r3, [r7, #8]
		right=right1;
1a0011a4:	4b08      	ldr	r3, [pc, #32]	; (1a0011c8 <itd+0x44>)
1a0011a6:	607b      	str	r3, [r7, #4]
	        angle = -angle;
	}else{
	    angle = 0;
	}
*/
	return angle;
1a0011a8:	7bfb      	ldrb	r3, [r7, #15]
1a0011aa:	b25b      	sxtb	r3, r3
}
1a0011ac:	4618      	mov	r0, r3
1a0011ae:	3714      	adds	r7, #20
1a0011b0:	46bd      	mov	sp, r7
1a0011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0011b6:	4770      	bx	lr
1a0011b8:	10086031 	.word	0x10086031
1a0011bc:	10087574 	.word	0x10087574
1a0011c0:	10087974 	.word	0x10087974
1a0011c4:	10087d74 	.word	0x10087d74
1a0011c8:	100883f4 	.word	0x100883f4

1a0011cc <Chip_GPIO_SetPinOutHigh>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a0011cc:	b480      	push	{r7}
1a0011ce:	b083      	sub	sp, #12
1a0011d0:	af00      	add	r7, sp, #0
1a0011d2:	6078      	str	r0, [r7, #4]
1a0011d4:	460b      	mov	r3, r1
1a0011d6:	70fb      	strb	r3, [r7, #3]
1a0011d8:	4613      	mov	r3, r2
1a0011da:	70bb      	strb	r3, [r7, #2]
	pGPIO->SET[port] = (1 << pin);
1a0011dc:	78fa      	ldrb	r2, [r7, #3]
1a0011de:	78bb      	ldrb	r3, [r7, #2]
1a0011e0:	2101      	movs	r1, #1
1a0011e2:	fa01 f303 	lsl.w	r3, r1, r3
1a0011e6:	4619      	mov	r1, r3
1a0011e8:	687b      	ldr	r3, [r7, #4]
1a0011ea:	f502 6208 	add.w	r2, r2, #2176	; 0x880
1a0011ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a0011f2:	bf00      	nop
1a0011f4:	370c      	adds	r7, #12
1a0011f6:	46bd      	mov	sp, r7
1a0011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0011fc:	4770      	bx	lr
1a0011fe:	bf00      	nop

1a001200 <Chip_GPIO_SetPinOutLow>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a001200:	b480      	push	{r7}
1a001202:	b083      	sub	sp, #12
1a001204:	af00      	add	r7, sp, #0
1a001206:	6078      	str	r0, [r7, #4]
1a001208:	460b      	mov	r3, r1
1a00120a:	70fb      	strb	r3, [r7, #3]
1a00120c:	4613      	mov	r3, r2
1a00120e:	70bb      	strb	r3, [r7, #2]
	pGPIO->CLR[port] = (1 << pin);
1a001210:	78fa      	ldrb	r2, [r7, #3]
1a001212:	78bb      	ldrb	r3, [r7, #2]
1a001214:	2101      	movs	r1, #1
1a001216:	fa01 f303 	lsl.w	r3, r1, r3
1a00121a:	4619      	mov	r1, r3
1a00121c:	687b      	ldr	r3, [r7, #4]
1a00121e:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
1a001222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a001226:	bf00      	nop
1a001228:	370c      	adds	r7, #12
1a00122a:	46bd      	mov	sp, r7
1a00122c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001230:	4770      	bx	lr
1a001232:	bf00      	nop

1a001234 <Chip_GPIO_SetPinToggle>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinToggle(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a001234:	b480      	push	{r7}
1a001236:	b083      	sub	sp, #12
1a001238:	af00      	add	r7, sp, #0
1a00123a:	6078      	str	r0, [r7, #4]
1a00123c:	460b      	mov	r3, r1
1a00123e:	70fb      	strb	r3, [r7, #3]
1a001240:	4613      	mov	r3, r2
1a001242:	70bb      	strb	r3, [r7, #2]
	pGPIO->NOT[port] = (1 << pin);
1a001244:	78fa      	ldrb	r2, [r7, #3]
1a001246:	78bb      	ldrb	r3, [r7, #2]
1a001248:	2101      	movs	r1, #1
1a00124a:	fa01 f303 	lsl.w	r3, r1, r3
1a00124e:	4619      	mov	r1, r3
1a001250:	687b      	ldr	r3, [r7, #4]
1a001252:	f502 620c 	add.w	r2, r2, #2240	; 0x8c0
1a001256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a00125a:	bf00      	nop
1a00125c:	370c      	adds	r7, #12
1a00125e:	46bd      	mov	sp, r7
1a001260:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001264:	4770      	bx	lr
1a001266:	bf00      	nop

1a001268 <bytesReceived>:

static inline uint8_t bytesToSend(volatile struct uart_hal * uart) {
	return uart->txBufferReadPointer != uart->txBufferWritePointer;
}

static inline uint8_t bytesReceived(volatile struct uart_hal * uart) {
1a001268:	b480      	push	{r7}
1a00126a:	b083      	sub	sp, #12
1a00126c:	af00      	add	r7, sp, #0
1a00126e:	6078      	str	r0, [r7, #4]
	return uart->rxBufferReadPointer != uart->rxBufferWritePointer;
1a001270:	687b      	ldr	r3, [r7, #4]
1a001272:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a001276:	330c      	adds	r3, #12
1a001278:	681a      	ldr	r2, [r3, #0]
1a00127a:	687b      	ldr	r3, [r7, #4]
1a00127c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a001280:	3308      	adds	r3, #8
1a001282:	681b      	ldr	r3, [r3, #0]
1a001284:	429a      	cmp	r2, r3
1a001286:	bf14      	ite	ne
1a001288:	2301      	movne	r3, #1
1a00128a:	2300      	moveq	r3, #0
1a00128c:	b2db      	uxtb	r3, r3
}
1a00128e:	4618      	mov	r0, r3
1a001290:	370c      	adds	r7, #12
1a001292:	46bd      	mov	sp, r7
1a001294:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001298:	4770      	bx	lr
1a00129a:	bf00      	nop

1a00129c <popByteFromReceptionBuffer>:
static inline volatile uint8_t popByteFromReceptionBuffer(volatile struct uart_hal * uart) {
1a00129c:	b480      	push	{r7}
1a00129e:	b085      	sub	sp, #20
1a0012a0:	af00      	add	r7, sp, #0
1a0012a2:	6078      	str	r0, [r7, #4]
	volatile uint8_t ret = uart->rxBuffer[uart->rxBufferReadPointer];
1a0012a4:	687b      	ldr	r3, [r7, #4]
1a0012a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a0012aa:	330c      	adds	r3, #12
1a0012ac:	681b      	ldr	r3, [r3, #0]
1a0012ae:	687a      	ldr	r2, [r7, #4]
1a0012b0:	4413      	add	r3, r2
1a0012b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0012b6:	781b      	ldrb	r3, [r3, #0]
1a0012b8:	b2db      	uxtb	r3, r3
1a0012ba:	73fb      	strb	r3, [r7, #15]
	uart->rxBufferReadPointer = (uart->rxBufferReadPointer + 1) & RX_BUFFER_MASK;
1a0012bc:	687b      	ldr	r3, [r7, #4]
1a0012be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a0012c2:	330c      	adds	r3, #12
1a0012c4:	681b      	ldr	r3, [r3, #0]
1a0012c6:	3301      	adds	r3, #1
1a0012c8:	f3c3 020b 	ubfx	r2, r3, #0, #12
1a0012cc:	687b      	ldr	r3, [r7, #4]
1a0012ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a0012d2:	330c      	adds	r3, #12
1a0012d4:	601a      	str	r2, [r3, #0]
	return ret;
1a0012d6:	7bfb      	ldrb	r3, [r7, #15]
1a0012d8:	b2db      	uxtb	r3, r3
}
1a0012da:	4618      	mov	r0, r3
1a0012dc:	3714      	adds	r7, #20
1a0012de:	46bd      	mov	sp, r7
1a0012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0012e4:	4770      	bx	lr
1a0012e6:	bf00      	nop

1a0012e8 <LED0SetOn>:
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, LED0_PORT_GPIO, LED0_PIN_GPIO); //Turn on the LED
}
/**
 * It enables the green LED
 */
static inline void LED0SetOn(void) {
1a0012e8:	b580      	push	{r7, lr}
1a0012ea:	af00      	add	r7, sp, #0
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, LED0_PORT_GPIO, LED0_PIN_GPIO); //Turn off the LED
1a0012ec:	2200      	movs	r2, #0
1a0012ee:	2100      	movs	r1, #0
1a0012f0:	4802      	ldr	r0, [pc, #8]	; (1a0012fc <LED0SetOn+0x14>)
1a0012f2:	f7ff ff85 	bl	1a001200 <Chip_GPIO_SetPinOutLow>
}
1a0012f6:	bf00      	nop
1a0012f8:	bd80      	pop	{r7, pc}
1a0012fa:	bf00      	nop
1a0012fc:	400f4000 	.word	0x400f4000

1a001300 <LED0Toggle>:
/**
 * It toggles the green LED
 */
static inline void LED0Toggle(void) {
1a001300:	b580      	push	{r7, lr}
1a001302:	af00      	add	r7, sp, #0
	Chip_GPIO_SetPinToggle(LPC_GPIO_PORT, LED0_PORT_GPIO, LED0_PIN_GPIO); //Toggle the LED
1a001304:	2200      	movs	r2, #0
1a001306:	2100      	movs	r1, #0
1a001308:	4802      	ldr	r0, [pc, #8]	; (1a001314 <LED0Toggle+0x14>)
1a00130a:	f7ff ff93 	bl	1a001234 <Chip_GPIO_SetPinToggle>
}
1a00130e:	bf00      	nop
1a001310:	bd80      	pop	{r7, pc}
1a001312:	bf00      	nop
1a001314:	400f4000 	.word	0x400f4000

1a001318 <LED1SetOff>:
/**
 * It disables the red LED
 */
static inline void LED1SetOff(void) {
1a001318:	b580      	push	{r7, lr}
1a00131a:	af00      	add	r7, sp, #0
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, LED1_PORT_GPIO, LED1_PIN_GPIO); //Turn on the LED
1a00131c:	2201      	movs	r2, #1
1a00131e:	2100      	movs	r1, #0
1a001320:	4802      	ldr	r0, [pc, #8]	; (1a00132c <LED1SetOff+0x14>)
1a001322:	f7ff ff53 	bl	1a0011cc <Chip_GPIO_SetPinOutHigh>
}
1a001326:	bf00      	nop
1a001328:	bd80      	pop	{r7, pc}
1a00132a:	bf00      	nop
1a00132c:	400f4000 	.word	0x400f4000

1a001330 <LED1SetOn>:
/**
 * It enables the red LED
 */
static inline void LED1SetOn(void) {
1a001330:	b580      	push	{r7, lr}
1a001332:	af00      	add	r7, sp, #0
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, LED1_PORT_GPIO, LED1_PIN_GPIO); //Turn off the LED
1a001334:	2201      	movs	r2, #1
1a001336:	2100      	movs	r1, #0
1a001338:	4802      	ldr	r0, [pc, #8]	; (1a001344 <LED1SetOn+0x14>)
1a00133a:	f7ff ff61 	bl	1a001200 <Chip_GPIO_SetPinOutLow>
}
1a00133e:	bf00      	nop
1a001340:	bd80      	pop	{r7, pc}
1a001342:	bf00      	nop
1a001344:	400f4000 	.word	0x400f4000

1a001348 <LED0SetBlinking>:
}
/**
 * It enables or disables the automatic 0.5Hz green LED blinking.
 * @param flag ENABLE or DISABLE
 */
static inline void LED0SetBlinking(uint8_t flag) {
1a001348:	b480      	push	{r7}
1a00134a:	b083      	sub	sp, #12
1a00134c:	af00      	add	r7, sp, #0
1a00134e:	4603      	mov	r3, r0
1a001350:	71fb      	strb	r3, [r7, #7]
	ledBlinking = flag ? 1 : 0;
1a001352:	79fb      	ldrb	r3, [r7, #7]
1a001354:	2b00      	cmp	r3, #0
1a001356:	bf14      	ite	ne
1a001358:	2301      	movne	r3, #1
1a00135a:	2300      	moveq	r3, #0
1a00135c:	b2db      	uxtb	r3, r3
1a00135e:	461a      	mov	r2, r3
1a001360:	4b03      	ldr	r3, [pc, #12]	; (1a001370 <LED0SetBlinking+0x28>)
1a001362:	701a      	strb	r2, [r3, #0]
}
1a001364:	bf00      	nop
1a001366:	370c      	adds	r7, #12
1a001368:	46bd      	mov	sp, r7
1a00136a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00136e:	4770      	bx	lr
1a001370:	10086524 	.word	0x10086524

1a001374 <main>:

//#define NEED_EVENT



int main(void) {
1a001374:	b5b0      	push	{r4, r5, r7, lr}
1a001376:	b08a      	sub	sp, #40	; 0x28
1a001378:	af00      	add	r7, sp, #0
	uint32_t DVSEventTimeLow;
	uint16_t DVSEvent;
	uint32_t timeStampMemory = 0, timeStampDelta = 0;
#endif

	int8_t angle = 0;
1a00137a:	2300      	movs	r3, #0
1a00137c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	ExtraPinsInit();
1a001380:	f7ff feb4 	bl	1a0010ec <ExtraPinsInit>
	disablePeripherals();
1a001384:	f005 f9c8 	bl	1a006718 <disablePeripherals>
	Chip_RIT_Init(LPC_RITIMER);
1a001388:	489d      	ldr	r0, [pc, #628]	; (1a001600 <main+0x28c>)
1a00138a:	f011 fe19 	bl	1a012fc0 <Chip_RIT_Init>
	RTC_TIME_T build = { .time = { BUILD_SEC_INT, BUILD_MIN_INT, BUILD_HOUR_INT, BUILD_DAY_INT, 0, 1, BUILD_MONTH_INT,
1a00138e:	4b9d      	ldr	r3, [pc, #628]	; (1a001604 <main+0x290>)
1a001390:	781b      	ldrb	r3, [r3, #0]
1a001392:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
1a001396:	4613      	mov	r3, r2
1a001398:	009b      	lsls	r3, r3, #2
1a00139a:	4413      	add	r3, r2
1a00139c:	005b      	lsls	r3, r3, #1
1a00139e:	461a      	mov	r2, r3
1a0013a0:	4b99      	ldr	r3, [pc, #612]	; (1a001608 <main+0x294>)
1a0013a2:	781b      	ldrb	r3, [r3, #0]
1a0013a4:	3b30      	subs	r3, #48	; 0x30
1a0013a6:	4413      	add	r3, r2
1a0013a8:	607b      	str	r3, [r7, #4]
1a0013aa:	2331      	movs	r3, #49	; 0x31
1a0013ac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
1a0013b0:	4613      	mov	r3, r2
1a0013b2:	009b      	lsls	r3, r3, #2
1a0013b4:	4413      	add	r3, r2
1a0013b6:	005b      	lsls	r3, r3, #1
1a0013b8:	461a      	mov	r2, r3
1a0013ba:	2336      	movs	r3, #54	; 0x36
1a0013bc:	3b30      	subs	r3, #48	; 0x30
1a0013be:	4413      	add	r3, r2
1a0013c0:	60bb      	str	r3, [r7, #8]
1a0013c2:	2332      	movs	r3, #50	; 0x32
1a0013c4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
1a0013c8:	4613      	mov	r3, r2
1a0013ca:	009b      	lsls	r3, r3, #2
1a0013cc:	4413      	add	r3, r2
1a0013ce:	005b      	lsls	r3, r3, #1
1a0013d0:	461a      	mov	r2, r3
1a0013d2:	2332      	movs	r3, #50	; 0x32
1a0013d4:	3b30      	subs	r3, #48	; 0x30
1a0013d6:	4413      	add	r3, r2
1a0013d8:	60fb      	str	r3, [r7, #12]
1a0013da:	2320      	movs	r3, #32
1a0013dc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
1a0013e0:	4613      	mov	r3, r2
1a0013e2:	009b      	lsls	r3, r3, #2
1a0013e4:	4413      	add	r3, r2
1a0013e6:	005b      	lsls	r3, r3, #1
1a0013e8:	461a      	mov	r2, r3
1a0013ea:	2339      	movs	r3, #57	; 0x39
1a0013ec:	3b30      	subs	r3, #48	; 0x30
1a0013ee:	4413      	add	r3, r2
1a0013f0:	613b      	str	r3, [r7, #16]
1a0013f2:	2300      	movs	r3, #0
1a0013f4:	617b      	str	r3, [r7, #20]
1a0013f6:	2301      	movs	r3, #1
1a0013f8:	61bb      	str	r3, [r7, #24]
1a0013fa:	234a      	movs	r3, #74	; 0x4a
1a0013fc:	2b4f      	cmp	r3, #79	; 0x4f
1a0013fe:	d005      	beq.n	1a00140c <main+0x98>
1a001400:	234a      	movs	r3, #74	; 0x4a
1a001402:	2b4e      	cmp	r3, #78	; 0x4e
1a001404:	d002      	beq.n	1a00140c <main+0x98>
1a001406:	234a      	movs	r3, #74	; 0x4a
1a001408:	2b44      	cmp	r3, #68	; 0x44
1a00140a:	d101      	bne.n	1a001410 <main+0x9c>
1a00140c:	2201      	movs	r2, #1
1a00140e:	e000      	b.n	1a001412 <main+0x9e>
1a001410:	2200      	movs	r2, #0
1a001412:	4613      	mov	r3, r2
1a001414:	009b      	lsls	r3, r3, #2
1a001416:	4413      	add	r3, r2
1a001418:	005b      	lsls	r3, r3, #1
1a00141a:	461a      	mov	r2, r3
1a00141c:	234a      	movs	r3, #74	; 0x4a
1a00141e:	2b4a      	cmp	r3, #74	; 0x4a
1a001420:	d105      	bne.n	1a00142e <main+0xba>
1a001422:	2375      	movs	r3, #117	; 0x75
1a001424:	2b61      	cmp	r3, #97	; 0x61
1a001426:	d102      	bne.n	1a00142e <main+0xba>
1a001428:	236c      	movs	r3, #108	; 0x6c
1a00142a:	2b6e      	cmp	r3, #110	; 0x6e
1a00142c:	d056      	beq.n	1a0014dc <main+0x168>
1a00142e:	234a      	movs	r3, #74	; 0x4a
1a001430:	2b46      	cmp	r3, #70	; 0x46
1a001432:	d051      	beq.n	1a0014d8 <main+0x164>
1a001434:	234a      	movs	r3, #74	; 0x4a
1a001436:	2b4d      	cmp	r3, #77	; 0x4d
1a001438:	d105      	bne.n	1a001446 <main+0xd2>
1a00143a:	2375      	movs	r3, #117	; 0x75
1a00143c:	2b61      	cmp	r3, #97	; 0x61
1a00143e:	d102      	bne.n	1a001446 <main+0xd2>
1a001440:	236c      	movs	r3, #108	; 0x6c
1a001442:	2b72      	cmp	r3, #114	; 0x72
1a001444:	d046      	beq.n	1a0014d4 <main+0x160>
1a001446:	234a      	movs	r3, #74	; 0x4a
1a001448:	2b41      	cmp	r3, #65	; 0x41
1a00144a:	d102      	bne.n	1a001452 <main+0xde>
1a00144c:	2375      	movs	r3, #117	; 0x75
1a00144e:	2b70      	cmp	r3, #112	; 0x70
1a001450:	d03e      	beq.n	1a0014d0 <main+0x15c>
1a001452:	234a      	movs	r3, #74	; 0x4a
1a001454:	2b4d      	cmp	r3, #77	; 0x4d
1a001456:	d105      	bne.n	1a001464 <main+0xf0>
1a001458:	2375      	movs	r3, #117	; 0x75
1a00145a:	2b61      	cmp	r3, #97	; 0x61
1a00145c:	d102      	bne.n	1a001464 <main+0xf0>
1a00145e:	236c      	movs	r3, #108	; 0x6c
1a001460:	2b79      	cmp	r3, #121	; 0x79
1a001462:	d033      	beq.n	1a0014cc <main+0x158>
1a001464:	234a      	movs	r3, #74	; 0x4a
1a001466:	2b4a      	cmp	r3, #74	; 0x4a
1a001468:	d105      	bne.n	1a001476 <main+0x102>
1a00146a:	2375      	movs	r3, #117	; 0x75
1a00146c:	2b75      	cmp	r3, #117	; 0x75
1a00146e:	d102      	bne.n	1a001476 <main+0x102>
1a001470:	236c      	movs	r3, #108	; 0x6c
1a001472:	2b6e      	cmp	r3, #110	; 0x6e
1a001474:	d028      	beq.n	1a0014c8 <main+0x154>
1a001476:	234a      	movs	r3, #74	; 0x4a
1a001478:	2b4a      	cmp	r3, #74	; 0x4a
1a00147a:	d105      	bne.n	1a001488 <main+0x114>
1a00147c:	2375      	movs	r3, #117	; 0x75
1a00147e:	2b75      	cmp	r3, #117	; 0x75
1a001480:	d102      	bne.n	1a001488 <main+0x114>
1a001482:	236c      	movs	r3, #108	; 0x6c
1a001484:	2b6c      	cmp	r3, #108	; 0x6c
1a001486:	d01d      	beq.n	1a0014c4 <main+0x150>
1a001488:	234a      	movs	r3, #74	; 0x4a
1a00148a:	2b41      	cmp	r3, #65	; 0x41
1a00148c:	d102      	bne.n	1a001494 <main+0x120>
1a00148e:	2375      	movs	r3, #117	; 0x75
1a001490:	2b75      	cmp	r3, #117	; 0x75
1a001492:	d015      	beq.n	1a0014c0 <main+0x14c>
1a001494:	234a      	movs	r3, #74	; 0x4a
1a001496:	2b53      	cmp	r3, #83	; 0x53
1a001498:	d010      	beq.n	1a0014bc <main+0x148>
1a00149a:	234a      	movs	r3, #74	; 0x4a
1a00149c:	2b4f      	cmp	r3, #79	; 0x4f
1a00149e:	d00b      	beq.n	1a0014b8 <main+0x144>
1a0014a0:	234a      	movs	r3, #74	; 0x4a
1a0014a2:	2b4e      	cmp	r3, #78	; 0x4e
1a0014a4:	d006      	beq.n	1a0014b4 <main+0x140>
1a0014a6:	234a      	movs	r3, #74	; 0x4a
1a0014a8:	2b44      	cmp	r3, #68	; 0x44
1a0014aa:	d101      	bne.n	1a0014b0 <main+0x13c>
1a0014ac:	2302      	movs	r3, #2
1a0014ae:	e016      	b.n	1a0014de <main+0x16a>
1a0014b0:	230f      	movs	r3, #15
1a0014b2:	e014      	b.n	1a0014de <main+0x16a>
1a0014b4:	2301      	movs	r3, #1
1a0014b6:	e012      	b.n	1a0014de <main+0x16a>
1a0014b8:	2300      	movs	r3, #0
1a0014ba:	e010      	b.n	1a0014de <main+0x16a>
1a0014bc:	2309      	movs	r3, #9
1a0014be:	e00e      	b.n	1a0014de <main+0x16a>
1a0014c0:	2308      	movs	r3, #8
1a0014c2:	e00c      	b.n	1a0014de <main+0x16a>
1a0014c4:	2307      	movs	r3, #7
1a0014c6:	e00a      	b.n	1a0014de <main+0x16a>
1a0014c8:	2306      	movs	r3, #6
1a0014ca:	e008      	b.n	1a0014de <main+0x16a>
1a0014cc:	2305      	movs	r3, #5
1a0014ce:	e006      	b.n	1a0014de <main+0x16a>
1a0014d0:	2304      	movs	r3, #4
1a0014d2:	e004      	b.n	1a0014de <main+0x16a>
1a0014d4:	2303      	movs	r3, #3
1a0014d6:	e002      	b.n	1a0014de <main+0x16a>
1a0014d8:	2302      	movs	r3, #2
1a0014da:	e000      	b.n	1a0014de <main+0x16a>
1a0014dc:	2301      	movs	r3, #1
1a0014de:	4413      	add	r3, r2
1a0014e0:	61fb      	str	r3, [r7, #28]
	BUILD_YEAR_INT } };
1a0014e2:	2332      	movs	r3, #50	; 0x32
1a0014e4:	3b30      	subs	r3, #48	; 0x30
1a0014e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0014ea:	fb02 f203 	mul.w	r2, r2, r3
1a0014ee:	2330      	movs	r3, #48	; 0x30
1a0014f0:	3b30      	subs	r3, #48	; 0x30
1a0014f2:	2164      	movs	r1, #100	; 0x64
1a0014f4:	fb01 f303 	mul.w	r3, r1, r3
1a0014f8:	18d1      	adds	r1, r2, r3
1a0014fa:	2331      	movs	r3, #49	; 0x31
1a0014fc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
1a001500:	4613      	mov	r3, r2
1a001502:	009b      	lsls	r3, r3, #2
1a001504:	4413      	add	r3, r2
1a001506:	005b      	lsls	r3, r3, #1
1a001508:	18ca      	adds	r2, r1, r3
1a00150a:	2336      	movs	r3, #54	; 0x36
1a00150c:	3b30      	subs	r3, #48	; 0x30
1a00150e:	4413      	add	r3, r2
	int8_t angle = 0;

	ExtraPinsInit();
	disablePeripherals();
	Chip_RIT_Init(LPC_RITIMER);
	RTC_TIME_T build = { .time = { BUILD_SEC_INT, BUILD_MIN_INT, BUILD_HOUR_INT, BUILD_DAY_INT, 0, 1, BUILD_MONTH_INT,
1a001510:	623b      	str	r3, [r7, #32]
	BUILD_YEAR_INT } };
	buildTime = build;
1a001512:	4b3e      	ldr	r3, [pc, #248]	; (1a00160c <main+0x298>)
1a001514:	461d      	mov	r5, r3
1a001516:	1d3c      	adds	r4, r7, #4
1a001518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a00151a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a00151c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a001520:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	//This should be one of the first initializations routines to run.
	sensorsInit();
1a001524:	f002 ff04 	bl	1a004330 <sensorsInit>
#ifdef NEED_EVENT
	DVS128ChipInit();
#endif
	DacInit();
1a001528:	f003 f99a 	bl	1a004860 <DacInit>
	UARTInit(LPC_UART, BAUD_RATE_DEFAULT); /* baud rate setting */
1a00152c:	4938      	ldr	r1, [pc, #224]	; (1a001610 <main+0x29c>)
1a00152e:	4839      	ldr	r0, [pc, #228]	; (1a001614 <main+0x2a0>)
1a001530:	f003 fc66 	bl	1a004e00 <UARTInit>
	initMotors();
1a001534:	f000 fe46 	bl	1a0021c4 <initMotors>
	PWMInit();
1a001538:	f001 ff00 	bl	1a00333c <PWMInit>
#if USE_IMU_DATA
	timerDelayMs(100);
1a00153c:	2064      	movs	r0, #100	; 0x64
1a00153e:	f005 f85b 	bl	1a0065f8 <timerDelayMs>
	MPU9105Init();
1a001542:	f001 fabb 	bl	1a002abc <MPU9105Init>
#endif
#if USE_SDCARD
	SDCardInit();
#endif
#if USE_PUSHBOT
	MiniRobInit();
1a001546:	f001 fd35 	bl	1a002fb4 <MiniRobInit>
#ifdef TEST_RUN
	test();
	//This will not return
#endif

	LED1SetOn();
1a00154a:	f7ff fef1 	bl	1a001330 <LED1SetOn>
	// Start M0APP slave processor
	cr_start_m0(&__core_m0app_START__);
1a00154e:	4832      	ldr	r0, [pc, #200]	; (1a001618 <main+0x2a4>)
1a001550:	f7ff fd06 	bl	1a000f60 <cr_start_m0>
	LED1SetOff();
1a001554:	f7ff fee0 	bl	1a001318 <LED1SetOff>

	LED0SetOn();
1a001558:	f7ff fec6 	bl	1a0012e8 <LED0SetOn>
	LED0SetBlinking(ENABLE);
1a00155c:	2001      	movs	r0, #1
1a00155e:	f7ff fef3 	bl	1a001348 <LED0SetBlinking>
	UARTShowVersion();
1a001562:	f003 fcd1 	bl	1a004f08 <UARTShowVersion>
	for (;;) {
		if (ledBlinking && toggleLed0) {
1a001566:	4b2d      	ldr	r3, [pc, #180]	; (1a00161c <main+0x2a8>)
1a001568:	781b      	ldrb	r3, [r3, #0]
1a00156a:	2b00      	cmp	r3, #0
1a00156c:	d010      	beq.n	1a001590 <main+0x21c>
1a00156e:	4b2c      	ldr	r3, [pc, #176]	; (1a001620 <main+0x2ac>)
1a001570:	681b      	ldr	r3, [r3, #0]
1a001572:	2b00      	cmp	r3, #0
1a001574:	d00c      	beq.n	1a001590 <main+0x21c>
			LED0Toggle();
1a001576:	f7ff fec3 	bl	1a001300 <LED0Toggle>
			toggleLed0 = 0;
1a00157a:	4b29      	ldr	r3, [pc, #164]	; (1a001620 <main+0x2ac>)
1a00157c:	2200      	movs	r2, #0
1a00157e:	601a      	str	r2, [r3, #0]
		}
		// *****************************************************************************
		//    UARTIterate();
		// *****************************************************************************
		while (bytesReceived(&uart)) {  // incoming char available?
1a001580:	e006      	b.n	1a001590 <main+0x21c>
			UART0ParseNewChar(popByteFromReceptionBuffer(&uart));
1a001582:	4828      	ldr	r0, [pc, #160]	; (1a001624 <main+0x2b0>)
1a001584:	f7ff fe8a 	bl	1a00129c <popByteFromReceptionBuffer>
1a001588:	4603      	mov	r3, r0
1a00158a:	4618      	mov	r0, r3
1a00158c:	f004 ff5e 	bl	1a00644c <UART0ParseNewChar>
			toggleLed0 = 0;
		}
		// *****************************************************************************
		//    UARTIterate();
		// *****************************************************************************
		while (bytesReceived(&uart)) {  // incoming char available?
1a001590:	4824      	ldr	r0, [pc, #144]	; (1a001624 <main+0x2b0>)
1a001592:	f7ff fe69 	bl	1a001268 <bytesReceived>
1a001596:	4603      	mov	r3, r0
1a001598:	2b00      	cmp	r3, #0
1a00159a:	d1f2      	bne.n	1a001582 <main+0x20e>
		 * manipulate the proceeding direction of the pushbot
		 */
		// if buffer reaches a length of 1024
		if(process_flag != -1){  // -1 for not ready, 0 for buffer0, 1 for buffer1
		//	SysTick->CTRL &= ~0x1;
			process_flag = -1;
1a00159c:	4b22      	ldr	r3, [pc, #136]	; (1a001628 <main+0x2b4>)
1a00159e:	22ff      	movs	r2, #255	; 0xff
1a0015a0:	701a      	strb	r2, [r3, #0]
			angle = itd();
1a0015a2:	f7ff fdef 	bl	1a001184 <itd>
1a0015a6:	4603      	mov	r3, r0
1a0015a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			//SysTick->CTRL |= 0x1;
			xprintf("%d\n", angle*57);
1a0015ac:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
1a0015b0:	4613      	mov	r3, r2
1a0015b2:	00db      	lsls	r3, r3, #3
1a0015b4:	1a9b      	subs	r3, r3, r2
1a0015b6:	00db      	lsls	r3, r3, #3
1a0015b8:	4413      	add	r3, r2
1a0015ba:	4619      	mov	r1, r3
1a0015bc:	481b      	ldr	r0, [pc, #108]	; (1a00162c <main+0x2b8>)
1a0015be:	f005 fadd 	bl	1a006b7c <xprintf>


		// start doing math

#if USE_IMU_DATA
		updateIMUData();
1a0015c2:	f001 f9f3 	bl	1a0029ac <updateIMUData>
#endif
#if USE_PUSHBOT
		refreshMiniRobSensors();
1a0015c6:	f001 fc45 	bl	1a002e54 <refreshMiniRobSensors>
		if (motor0.updateRequired) {
1a0015ca:	4b19      	ldr	r3, [pc, #100]	; (1a001630 <main+0x2bc>)
1a0015cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a0015d0:	b2db      	uxtb	r3, r3
1a0015d2:	2b00      	cmp	r3, #0
1a0015d4:	d006      	beq.n	1a0015e4 <main+0x270>
			motor0.updateRequired = 0;
1a0015d6:	4b16      	ldr	r3, [pc, #88]	; (1a001630 <main+0x2bc>)
1a0015d8:	2200      	movs	r2, #0
1a0015da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			updateMotorController(MOTOR0);
1a0015de:	2000      	movs	r0, #0
1a0015e0:	f000 fa7e 	bl	1a001ae0 <updateMotorController>
		}
		if (motor1.updateRequired) {
1a0015e4:	4b13      	ldr	r3, [pc, #76]	; (1a001634 <main+0x2c0>)
1a0015e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a0015ea:	b2db      	uxtb	r3, r3
1a0015ec:	2b00      	cmp	r3, #0
1a0015ee:	d0ba      	beq.n	1a001566 <main+0x1f2>
			motor1.updateRequired = 0;
1a0015f0:	4b10      	ldr	r3, [pc, #64]	; (1a001634 <main+0x2c0>)
1a0015f2:	2200      	movs	r2, #0
1a0015f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			updateMotorController(MOTOR1);
1a0015f8:	2001      	movs	r0, #1
1a0015fa:	f000 fa71 	bl	1a001ae0 <updateMotorController>
				sdcard.bytesWrittenPerSecond += sdcard.bytesWritten;
				sdcard.fileBufferIndex = 0;
			}
		}
#endif
	}
1a0015fe:	e7b2      	b.n	1a001566 <main+0x1f2>
1a001600:	400c0000 	.word	0x400c0000
1a001604:	1a0187a6 	.word	0x1a0187a6
1a001608:	1a0187a7 	.word	0x1a0187a7
1a00160c:	10087448 	.word	0x10087448
1a001610:	003d0900 	.word	0x003d0900
1a001614:	40081000 	.word	0x40081000
1a001618:	1a040000 	.word	0x1a040000
1a00161c:	10086524 	.word	0x10086524
1a001620:	10086520 	.word	0x10086520
1a001624:	10000000 	.word	0x10000000
1a001628:	10086031 	.word	0x10086031
1a00162c:	1a0187ac 	.word	0x1a0187ac
1a001630:	100874a4 	.word	0x100874a4
1a001634:	10087468 	.word	0x10087468

1a001638 <Chip_SCU_PinMuxSet>:
 * @return	Nothing
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a001638:	b480      	push	{r7}
1a00163a:	b083      	sub	sp, #12
1a00163c:	af00      	add	r7, sp, #0
1a00163e:	4603      	mov	r3, r0
1a001640:	71fb      	strb	r3, [r7, #7]
1a001642:	460b      	mov	r3, r1
1a001644:	71bb      	strb	r3, [r7, #6]
1a001646:	4613      	mov	r3, r2
1a001648:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00164a:	4807      	ldr	r0, [pc, #28]	; (1a001668 <Chip_SCU_PinMuxSet+0x30>)
1a00164c:	79f9      	ldrb	r1, [r7, #7]
1a00164e:	79bb      	ldrb	r3, [r7, #6]
1a001650:	88ba      	ldrh	r2, [r7, #4]
1a001652:	0149      	lsls	r1, r1, #5
1a001654:	440b      	add	r3, r1
1a001656:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a00165a:	bf00      	nop
1a00165c:	370c      	adds	r7, #12
1a00165e:	46bd      	mov	sp, r7
1a001660:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001664:	4770      	bx	lr
1a001666:	bf00      	nop
1a001668:	40086000 	.word	0x40086000

1a00166c <Chip_GPIO_SetPinDIROutput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a00166c:	b480      	push	{r7}
1a00166e:	b083      	sub	sp, #12
1a001670:	af00      	add	r7, sp, #0
1a001672:	6078      	str	r0, [r7, #4]
1a001674:	460b      	mov	r3, r1
1a001676:	70fb      	strb	r3, [r7, #3]
1a001678:	4613      	mov	r3, r2
1a00167a:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] |= 1UL << pin;
1a00167c:	78fa      	ldrb	r2, [r7, #3]
1a00167e:	78f9      	ldrb	r1, [r7, #3]
1a001680:	687b      	ldr	r3, [r7, #4]
1a001682:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a001686:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a00168a:	78bb      	ldrb	r3, [r7, #2]
1a00168c:	2001      	movs	r0, #1
1a00168e:	fa00 f303 	lsl.w	r3, r0, r3
1a001692:	4319      	orrs	r1, r3
1a001694:	687b      	ldr	r3, [r7, #4]
1a001696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00169a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a00169e:	bf00      	nop
1a0016a0:	370c      	adds	r7, #12
1a0016a2:	46bd      	mov	sp, r7
1a0016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0016a8:	4770      	bx	lr
1a0016aa:	bf00      	nop

1a0016ac <Chip_GPIO_SetPinDIRInput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a0016ac:	b480      	push	{r7}
1a0016ae:	b083      	sub	sp, #12
1a0016b0:	af00      	add	r7, sp, #0
1a0016b2:	6078      	str	r0, [r7, #4]
1a0016b4:	460b      	mov	r3, r1
1a0016b6:	70fb      	strb	r3, [r7, #3]
1a0016b8:	4613      	mov	r3, r2
1a0016ba:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0016bc:	78fa      	ldrb	r2, [r7, #3]
1a0016be:	78f9      	ldrb	r1, [r7, #3]
1a0016c0:	687b      	ldr	r3, [r7, #4]
1a0016c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a0016c6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a0016ca:	78bb      	ldrb	r3, [r7, #2]
1a0016cc:	2001      	movs	r0, #1
1a0016ce:	fa00 f303 	lsl.w	r3, r0, r3
1a0016d2:	43db      	mvns	r3, r3
1a0016d4:	4019      	ands	r1, r3
1a0016d6:	687b      	ldr	r3, [r7, #4]
1a0016d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0016dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a0016e0:	bf00      	nop
1a0016e2:	370c      	adds	r7, #12
1a0016e4:	46bd      	mov	sp, r7
1a0016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0016ea:	4770      	bx	lr

1a0016ec <Chip_GPIO_SetPinOutHigh>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a0016ec:	b480      	push	{r7}
1a0016ee:	b083      	sub	sp, #12
1a0016f0:	af00      	add	r7, sp, #0
1a0016f2:	6078      	str	r0, [r7, #4]
1a0016f4:	460b      	mov	r3, r1
1a0016f6:	70fb      	strb	r3, [r7, #3]
1a0016f8:	4613      	mov	r3, r2
1a0016fa:	70bb      	strb	r3, [r7, #2]
	pGPIO->SET[port] = (1 << pin);
1a0016fc:	78fa      	ldrb	r2, [r7, #3]
1a0016fe:	78bb      	ldrb	r3, [r7, #2]
1a001700:	2101      	movs	r1, #1
1a001702:	fa01 f303 	lsl.w	r3, r1, r3
1a001706:	4619      	mov	r1, r3
1a001708:	687b      	ldr	r3, [r7, #4]
1a00170a:	f502 6208 	add.w	r2, r2, #2176	; 0x880
1a00170e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a001712:	bf00      	nop
1a001714:	370c      	adds	r7, #12
1a001716:	46bd      	mov	sp, r7
1a001718:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00171c:	4770      	bx	lr
1a00171e:	bf00      	nop

1a001720 <Chip_GPIO_SetPinOutLow>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a001720:	b480      	push	{r7}
1a001722:	b083      	sub	sp, #12
1a001724:	af00      	add	r7, sp, #0
1a001726:	6078      	str	r0, [r7, #4]
1a001728:	460b      	mov	r3, r1
1a00172a:	70fb      	strb	r3, [r7, #3]
1a00172c:	4613      	mov	r3, r2
1a00172e:	70bb      	strb	r3, [r7, #2]
	pGPIO->CLR[port] = (1 << pin);
1a001730:	78fa      	ldrb	r2, [r7, #3]
1a001732:	78bb      	ldrb	r3, [r7, #2]
1a001734:	2101      	movs	r1, #1
1a001736:	fa01 f303 	lsl.w	r3, r1, r3
1a00173a:	4619      	mov	r1, r3
1a00173c:	687b      	ldr	r3, [r7, #4]
1a00173e:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
1a001742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a001746:	bf00      	nop
1a001748:	370c      	adds	r7, #12
1a00174a:	46bd      	mov	sp, r7
1a00174c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001750:	4770      	bx	lr
1a001752:	bf00      	nop

1a001754 <updateMotorPWMPeriod>:
struct motor_status motor0;
struct motor_status motor1;

static uint32_t motorDriverEnabled;

uint32_t updateMotorPWMPeriod(uint32_t motor, uint32_t period) {
1a001754:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001756:	b085      	sub	sp, #20
1a001758:	af00      	add	r7, sp, #0
1a00175a:	6078      	str	r0, [r7, #4]
1a00175c:	6039      	str	r1, [r7, #0]
	if (period == 0) {
1a00175e:	683b      	ldr	r3, [r7, #0]
1a001760:	2b00      	cmp	r3, #0
1a001762:	d101      	bne.n	1a001768 <updateMotorPWMPeriod+0x14>
		return 1;
1a001764:	2301      	movs	r3, #1
1a001766:	e058      	b.n	1a00181a <updateMotorPWMPeriod+0xc6>
	}
	uint64_t calculatedLimit = (((uint64_t) period * Chip_Clock_GetRate(CLK_APB1_MOTOCON)) / 1000000ULL);
1a001768:	683b      	ldr	r3, [r7, #0]
1a00176a:	461d      	mov	r5, r3
1a00176c:	f04f 0600 	mov.w	r6, #0
1a001770:	2021      	movs	r0, #33	; 0x21
1a001772:	f010 feb5 	bl	1a0124e0 <Chip_Clock_GetRate>
1a001776:	4603      	mov	r3, r0
1a001778:	f04f 0400 	mov.w	r4, #0
1a00177c:	fb03 f106 	mul.w	r1, r3, r6
1a001780:	fb05 f204 	mul.w	r2, r5, r4
1a001784:	440a      	add	r2, r1
1a001786:	fba5 0103 	umull	r0, r1, r5, r3
1a00178a:	1853      	adds	r3, r2, r1
1a00178c:	4619      	mov	r1, r3
1a00178e:	4a25      	ldr	r2, [pc, #148]	; (1a001824 <updateMotorPWMPeriod+0xd0>)
1a001790:	f04f 0300 	mov.w	r3, #0
1a001794:	f012 ff8c 	bl	1a0146b0 <__aeabi_uldivmod>
1a001798:	4603      	mov	r3, r0
1a00179a:	460c      	mov	r4, r1
1a00179c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if (calculatedLimit & 0xFFFFFFFF00000000ULL) { //Check for overflow
1a0017a0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
1a0017a4:	f04f 0100 	mov.w	r1, #0
1a0017a8:	f04f 32ff 	mov.w	r2, #4294967295
1a0017ac:	ea03 0301 	and.w	r3, r3, r1
1a0017b0:	ea04 0402 	and.w	r4, r4, r2
1a0017b4:	4323      	orrs	r3, r4
1a0017b6:	d001      	beq.n	1a0017bc <updateMotorPWMPeriod+0x68>
		return 1;
1a0017b8:	2301      	movs	r3, #1
1a0017ba:	e02e      	b.n	1a00181a <updateMotorPWMPeriod+0xc6>
	}
	if (motor == MOTOR0) {
1a0017bc:	687b      	ldr	r3, [r7, #4]
1a0017be:	2b00      	cmp	r3, #0
1a0017c0:	d112      	bne.n	1a0017e8 <updateMotorPWMPeriod+0x94>
		LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL] = (uint32_t) calculatedLimit;
1a0017c2:	4a19      	ldr	r2, [pc, #100]	; (1a001828 <updateMotorPWMPeriod+0xd4>)
1a0017c4:	68bb      	ldr	r3, [r7, #8]
1a0017c6:	62d3      	str	r3, [r2, #44]	; 0x2c
#if USE_PUSHBOT
		motor0.velocityWindUpGuard = calculatedLimit / motor0.proportionalGain;
1a0017c8:	4b18      	ldr	r3, [pc, #96]	; (1a00182c <updateMotorPWMPeriod+0xd8>)
1a0017ca:	69db      	ldr	r3, [r3, #28]
1a0017cc:	ea4f 74e3 	mov.w	r4, r3, asr #31
1a0017d0:	461a      	mov	r2, r3
1a0017d2:	4623      	mov	r3, r4
1a0017d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
1a0017d8:	f012 ff6a 	bl	1a0146b0 <__aeabi_uldivmod>
1a0017dc:	4603      	mov	r3, r0
1a0017de:	460c      	mov	r4, r1
1a0017e0:	461a      	mov	r2, r3
1a0017e2:	4b12      	ldr	r3, [pc, #72]	; (1a00182c <updateMotorPWMPeriod+0xd8>)
1a0017e4:	631a      	str	r2, [r3, #48]	; 0x30
1a0017e6:	e017      	b.n	1a001818 <updateMotorPWMPeriod+0xc4>
#endif
	} else if (motor == MOTOR1) {
1a0017e8:	687b      	ldr	r3, [r7, #4]
1a0017ea:	2b01      	cmp	r3, #1
1a0017ec:	d112      	bne.n	1a001814 <updateMotorPWMPeriod+0xc0>
		LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL] = (uint32_t) calculatedLimit;
1a0017ee:	4a0e      	ldr	r2, [pc, #56]	; (1a001828 <updateMotorPWMPeriod+0xd4>)
1a0017f0:	68bb      	ldr	r3, [r7, #8]
1a0017f2:	6293      	str	r3, [r2, #40]	; 0x28
#if USE_PUSHBOT
		motor1.velocityWindUpGuard = calculatedLimit / motor1.proportionalGain;
1a0017f4:	4b0e      	ldr	r3, [pc, #56]	; (1a001830 <updateMotorPWMPeriod+0xdc>)
1a0017f6:	69db      	ldr	r3, [r3, #28]
1a0017f8:	ea4f 74e3 	mov.w	r4, r3, asr #31
1a0017fc:	461a      	mov	r2, r3
1a0017fe:	4623      	mov	r3, r4
1a001800:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
1a001804:	f012 ff54 	bl	1a0146b0 <__aeabi_uldivmod>
1a001808:	4603      	mov	r3, r0
1a00180a:	460c      	mov	r4, r1
1a00180c:	461a      	mov	r2, r3
1a00180e:	4b08      	ldr	r3, [pc, #32]	; (1a001830 <updateMotorPWMPeriod+0xdc>)
1a001810:	631a      	str	r2, [r3, #48]	; 0x30
1a001812:	e001      	b.n	1a001818 <updateMotorPWMPeriod+0xc4>
#endif
	} else {
		return 1;
1a001814:	2301      	movs	r3, #1
1a001816:	e000      	b.n	1a00181a <updateMotorPWMPeriod+0xc6>
	}
	return 0;
1a001818:	2300      	movs	r3, #0
}
1a00181a:	4618      	mov	r0, r3
1a00181c:	3714      	adds	r7, #20
1a00181e:	46bd      	mov	sp, r7
1a001820:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001822:	bf00      	nop
1a001824:	000f4240 	.word	0x000f4240
1a001828:	400a0000 	.word	0x400a0000
1a00182c:	100874a4 	.word	0x100874a4
1a001830:	10087468 	.word	0x10087468

1a001834 <updateMotorMode>:
uint32_t updateMotorMode(uint32_t motor, uint32_t mode) {
1a001834:	b480      	push	{r7}
1a001836:	b083      	sub	sp, #12
1a001838:	af00      	add	r7, sp, #0
1a00183a:	6078      	str	r0, [r7, #4]
1a00183c:	6039      	str	r1, [r7, #0]
	if (motor == MOTOR0) {
1a00183e:	687b      	ldr	r3, [r7, #4]
1a001840:	2b00      	cmp	r3, #0
1a001842:	d103      	bne.n	1a00184c <updateMotorMode+0x18>
		motor0.controlMode = mode;
1a001844:	4a09      	ldr	r2, [pc, #36]	; (1a00186c <updateMotorMode+0x38>)
1a001846:	683b      	ldr	r3, [r7, #0]
1a001848:	60d3      	str	r3, [r2, #12]
1a00184a:	e008      	b.n	1a00185e <updateMotorMode+0x2a>
	} else if (motor == MOTOR1) {
1a00184c:	687b      	ldr	r3, [r7, #4]
1a00184e:	2b01      	cmp	r3, #1
1a001850:	d103      	bne.n	1a00185a <updateMotorMode+0x26>
		motor1.controlMode = mode;
1a001852:	4a07      	ldr	r2, [pc, #28]	; (1a001870 <updateMotorMode+0x3c>)
1a001854:	683b      	ldr	r3, [r7, #0]
1a001856:	60d3      	str	r3, [r2, #12]
1a001858:	e001      	b.n	1a00185e <updateMotorMode+0x2a>
	} else {
		return 1;
1a00185a:	2301      	movs	r3, #1
1a00185c:	e000      	b.n	1a001860 <updateMotorMode+0x2c>
	}
	return 0;
1a00185e:	2300      	movs	r3, #0
}
1a001860:	4618      	mov	r0, r3
1a001862:	370c      	adds	r7, #12
1a001864:	46bd      	mov	sp, r7
1a001866:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00186a:	4770      	bx	lr
1a00186c:	100874a4 	.word	0x100874a4
1a001870:	10087468 	.word	0x10087468

1a001874 <getMotorDutycycle>:

int32_t getMotorDutycycle(uint32_t motor) {
1a001874:	b480      	push	{r7}
1a001876:	b083      	sub	sp, #12
1a001878:	af00      	add	r7, sp, #0
1a00187a:	6078      	str	r0, [r7, #4]
	if (motor == MOTOR0) {
1a00187c:	687b      	ldr	r3, [r7, #4]
1a00187e:	2b00      	cmp	r3, #0
1a001880:	d109      	bne.n	1a001896 <getMotorDutycycle+0x22>
		return (motor0.currentDutycycle * 100) / (int32_t) LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL];
1a001882:	4b0f      	ldr	r3, [pc, #60]	; (1a0018c0 <getMotorDutycycle+0x4c>)
1a001884:	681b      	ldr	r3, [r3, #0]
1a001886:	2264      	movs	r2, #100	; 0x64
1a001888:	fb02 f303 	mul.w	r3, r2, r3
1a00188c:	4a0d      	ldr	r2, [pc, #52]	; (1a0018c4 <getMotorDutycycle+0x50>)
1a00188e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001890:	fb93 f3f2 	sdiv	r3, r3, r2
1a001894:	e00d      	b.n	1a0018b2 <getMotorDutycycle+0x3e>
	} else if (motor == MOTOR1) {
1a001896:	687b      	ldr	r3, [r7, #4]
1a001898:	2b01      	cmp	r3, #1
1a00189a:	d109      	bne.n	1a0018b0 <getMotorDutycycle+0x3c>
		return (motor1.currentDutycycle * 100) / (int32_t) LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL];
1a00189c:	4b0a      	ldr	r3, [pc, #40]	; (1a0018c8 <getMotorDutycycle+0x54>)
1a00189e:	681b      	ldr	r3, [r3, #0]
1a0018a0:	2264      	movs	r2, #100	; 0x64
1a0018a2:	fb02 f303 	mul.w	r3, r2, r3
1a0018a6:	4a07      	ldr	r2, [pc, #28]	; (1a0018c4 <getMotorDutycycle+0x50>)
1a0018a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
1a0018aa:	fb93 f3f2 	sdiv	r3, r3, r2
1a0018ae:	e000      	b.n	1a0018b2 <getMotorDutycycle+0x3e>
	}
	return 0;
1a0018b0:	2300      	movs	r3, #0
}
1a0018b2:	4618      	mov	r0, r3
1a0018b4:	370c      	adds	r7, #12
1a0018b6:	46bd      	mov	sp, r7
1a0018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0018bc:	4770      	bx	lr
1a0018be:	bf00      	nop
1a0018c0:	100874a4 	.word	0x100874a4
1a0018c4:	400a0000 	.word	0x400a0000
1a0018c8:	10087468 	.word	0x10087468

1a0018cc <getMotorWidth>:

int32_t getMotorWidth(uint32_t motor) {
1a0018cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0018d0:	b089      	sub	sp, #36	; 0x24
1a0018d2:	af00      	add	r7, sp, #0
1a0018d4:	60f8      	str	r0, [r7, #12]
	if (motor == MOTOR0) {
1a0018d6:	68f8      	ldr	r0, [r7, #12]
1a0018d8:	2800      	cmp	r0, #0
1a0018da:	d13b      	bne.n	1a001954 <getMotorWidth+0x88>
		int64_t period = ((int64_t) motor0.currentDutycycle * 1000000LL)
1a0018dc:	4b3e      	ldr	r3, [pc, #248]	; (1a0019d8 <getMotorWidth+0x10c>)
1a0018de:	681b      	ldr	r3, [r3, #0]
1a0018e0:	461d      	mov	r5, r3
1a0018e2:	ea4f 76e5 	mov.w	r6, r5, asr #31
1a0018e6:	462b      	mov	r3, r5
1a0018e8:	4634      	mov	r4, r6
1a0018ea:	0260      	lsls	r0, r4, #9
1a0018ec:	6078      	str	r0, [r7, #4]
1a0018ee:	6878      	ldr	r0, [r7, #4]
1a0018f0:	ea40 50d3 	orr.w	r0, r0, r3, lsr #23
1a0018f4:	6078      	str	r0, [r7, #4]
1a0018f6:	025b      	lsls	r3, r3, #9
1a0018f8:	603b      	str	r3, [r7, #0]
1a0018fa:	e9d7 3400 	ldrd	r3, r4, [r7]
1a0018fe:	0162      	lsls	r2, r4, #5
1a001900:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
1a001904:	0159      	lsls	r1, r3, #5
1a001906:	1ac9      	subs	r1, r1, r3
1a001908:	eb62 0204 	sbc.w	r2, r2, r4
1a00190c:	1949      	adds	r1, r1, r5
1a00190e:	eb42 0206 	adc.w	r2, r2, r6
1a001912:	ea4f 1982 	mov.w	r9, r2, lsl #6
1a001916:	ea49 6991 	orr.w	r9, r9, r1, lsr #26
1a00191a:	ea4f 1881 	mov.w	r8, r1, lsl #6
1a00191e:	ebb8 0801 	subs.w	r8, r8, r1
1a001922:	eb69 0902 	sbc.w	r9, r9, r2
1a001926:	eb18 0305 	adds.w	r3, r8, r5
1a00192a:	eb49 0406 	adc.w	r4, r9, r6
1a00192e:	4625      	mov	r5, r4
1a001930:	461c      	mov	r4, r3
				/ (int64_t) Chip_Clock_GetRate(CLK_APB1_MOTOCON);
1a001932:	2021      	movs	r0, #33	; 0x21
1a001934:	f010 fdd4 	bl	1a0124e0 <Chip_Clock_GetRate>
1a001938:	4603      	mov	r3, r0
1a00193a:	461a      	mov	r2, r3
1a00193c:	f04f 0300 	mov.w	r3, #0
	return 0;
}

int32_t getMotorWidth(uint32_t motor) {
	if (motor == MOTOR0) {
		int64_t period = ((int64_t) motor0.currentDutycycle * 1000000LL)
1a001940:	4620      	mov	r0, r4
1a001942:	4629      	mov	r1, r5
1a001944:	f012 fe64 	bl	1a014610 <__aeabi_ldivmod>
1a001948:	4603      	mov	r3, r0
1a00194a:	460c      	mov	r4, r1
1a00194c:	e9c7 3406 	strd	r3, r4, [r7, #24]
				/ (int64_t) Chip_Clock_GetRate(CLK_APB1_MOTOCON);
		return (int32_t) period;
1a001950:	69bb      	ldr	r3, [r7, #24]
1a001952:	e03c      	b.n	1a0019ce <getMotorWidth+0x102>
	} else if (motor == MOTOR1) {
1a001954:	68fa      	ldr	r2, [r7, #12]
1a001956:	2a01      	cmp	r2, #1
1a001958:	d137      	bne.n	1a0019ca <getMotorWidth+0xfe>
		int64_t period = ((int64_t) motor1.currentDutycycle * 1000000LL)
1a00195a:	4a20      	ldr	r2, [pc, #128]	; (1a0019dc <getMotorWidth+0x110>)
1a00195c:	6812      	ldr	r2, [r2, #0]
1a00195e:	4690      	mov	r8, r2
1a001960:	ea4f 79e8 	mov.w	r9, r8, asr #31
1a001964:	4641      	mov	r1, r8
1a001966:	464a      	mov	r2, r9
1a001968:	ea4f 2b42 	mov.w	fp, r2, lsl #9
1a00196c:	ea4b 5bd1 	orr.w	fp, fp, r1, lsr #23
1a001970:	ea4f 2a41 	mov.w	sl, r1, lsl #9
1a001974:	4651      	mov	r1, sl
1a001976:	465a      	mov	r2, fp
1a001978:	0154      	lsls	r4, r2, #5
1a00197a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
1a00197e:	014b      	lsls	r3, r1, #5
1a001980:	1a5b      	subs	r3, r3, r1
1a001982:	eb64 0402 	sbc.w	r4, r4, r2
1a001986:	eb13 0308 	adds.w	r3, r3, r8
1a00198a:	eb44 0409 	adc.w	r4, r4, r9
1a00198e:	01a6      	lsls	r6, r4, #6
1a001990:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
1a001994:	019d      	lsls	r5, r3, #6
1a001996:	1aed      	subs	r5, r5, r3
1a001998:	eb66 0604 	sbc.w	r6, r6, r4
1a00199c:	eb15 0308 	adds.w	r3, r5, r8
1a0019a0:	eb46 0409 	adc.w	r4, r6, r9
1a0019a4:	4625      	mov	r5, r4
1a0019a6:	461c      	mov	r4, r3
				/ (int64_t) Chip_Clock_GetRate(CLK_APB1_MOTOCON);
1a0019a8:	2021      	movs	r0, #33	; 0x21
1a0019aa:	f010 fd99 	bl	1a0124e0 <Chip_Clock_GetRate>
1a0019ae:	4603      	mov	r3, r0
1a0019b0:	461a      	mov	r2, r3
1a0019b2:	f04f 0300 	mov.w	r3, #0
	if (motor == MOTOR0) {
		int64_t period = ((int64_t) motor0.currentDutycycle * 1000000LL)
				/ (int64_t) Chip_Clock_GetRate(CLK_APB1_MOTOCON);
		return (int32_t) period;
	} else if (motor == MOTOR1) {
		int64_t period = ((int64_t) motor1.currentDutycycle * 1000000LL)
1a0019b6:	4620      	mov	r0, r4
1a0019b8:	4629      	mov	r1, r5
1a0019ba:	f012 fe29 	bl	1a014610 <__aeabi_ldivmod>
1a0019be:	4603      	mov	r3, r0
1a0019c0:	460c      	mov	r4, r1
1a0019c2:	e9c7 3404 	strd	r3, r4, [r7, #16]
				/ (int64_t) Chip_Clock_GetRate(CLK_APB1_MOTOCON);
		return (int32_t) period;
1a0019c6:	693b      	ldr	r3, [r7, #16]
1a0019c8:	e001      	b.n	1a0019ce <getMotorWidth+0x102>
	}
	return -1;
1a0019ca:	f04f 33ff 	mov.w	r3, #4294967295
}
1a0019ce:	4618      	mov	r0, r3
1a0019d0:	3724      	adds	r7, #36	; 0x24
1a0019d2:	46bd      	mov	sp, r7
1a0019d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0019d8:	100874a4 	.word	0x100874a4
1a0019dc:	10087468 	.word	0x10087468

1a0019e0 <updateMotorPID>:

#if USE_PUSHBOT
#include "pushbot.h"

uint32_t updateMotorPID(uint32_t motor, int32_t pGain, int32_t iGain, int32_t dGain) {
1a0019e0:	b480      	push	{r7}
1a0019e2:	b085      	sub	sp, #20
1a0019e4:	af00      	add	r7, sp, #0
1a0019e6:	60f8      	str	r0, [r7, #12]
1a0019e8:	60b9      	str	r1, [r7, #8]
1a0019ea:	607a      	str	r2, [r7, #4]
1a0019ec:	603b      	str	r3, [r7, #0]
	if (motor == MOTOR0) {
1a0019ee:	68fb      	ldr	r3, [r7, #12]
1a0019f0:	2b00      	cmp	r3, #0
1a0019f2:	d109      	bne.n	1a001a08 <updateMotorPID+0x28>
		motor0.proportionalGain = pGain;
1a0019f4:	4a0f      	ldr	r2, [pc, #60]	; (1a001a34 <updateMotorPID+0x54>)
1a0019f6:	68bb      	ldr	r3, [r7, #8]
1a0019f8:	61d3      	str	r3, [r2, #28]
		motor0.integralGain = iGain;
1a0019fa:	4a0e      	ldr	r2, [pc, #56]	; (1a001a34 <updateMotorPID+0x54>)
1a0019fc:	687b      	ldr	r3, [r7, #4]
1a0019fe:	6213      	str	r3, [r2, #32]
		motor0.derivativeGain = dGain;
1a001a00:	4a0c      	ldr	r2, [pc, #48]	; (1a001a34 <updateMotorPID+0x54>)
1a001a02:	683b      	ldr	r3, [r7, #0]
1a001a04:	6253      	str	r3, [r2, #36]	; 0x24
1a001a06:	e00e      	b.n	1a001a26 <updateMotorPID+0x46>
	} else if (motor == MOTOR1) {
1a001a08:	68fb      	ldr	r3, [r7, #12]
1a001a0a:	2b01      	cmp	r3, #1
1a001a0c:	d109      	bne.n	1a001a22 <updateMotorPID+0x42>
		motor1.proportionalGain = pGain;
1a001a0e:	4a0a      	ldr	r2, [pc, #40]	; (1a001a38 <updateMotorPID+0x58>)
1a001a10:	68bb      	ldr	r3, [r7, #8]
1a001a12:	61d3      	str	r3, [r2, #28]
		motor1.integralGain = iGain;
1a001a14:	4a08      	ldr	r2, [pc, #32]	; (1a001a38 <updateMotorPID+0x58>)
1a001a16:	687b      	ldr	r3, [r7, #4]
1a001a18:	6213      	str	r3, [r2, #32]
		motor1.derivativeGain = dGain;
1a001a1a:	4a07      	ldr	r2, [pc, #28]	; (1a001a38 <updateMotorPID+0x58>)
1a001a1c:	683b      	ldr	r3, [r7, #0]
1a001a1e:	6253      	str	r3, [r2, #36]	; 0x24
1a001a20:	e001      	b.n	1a001a26 <updateMotorPID+0x46>
	} else {
		return 1;
1a001a22:	2301      	movs	r3, #1
1a001a24:	e000      	b.n	1a001a28 <updateMotorPID+0x48>
	}
	return 0;
1a001a26:	2300      	movs	r3, #0
}
1a001a28:	4618      	mov	r0, r3
1a001a2a:	3714      	adds	r7, #20
1a001a2c:	46bd      	mov	sp, r7
1a001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001a32:	4770      	bx	lr
1a001a34:	100874a4 	.word	0x100874a4
1a001a38:	10087468 	.word	0x10087468

1a001a3c <updateMotorVelocity>:
#define MAX_SPEED	100
uint32_t updateMotorVelocity(uint32_t motor, int32_t speed) {
1a001a3c:	b480      	push	{r7}
1a001a3e:	b083      	sub	sp, #12
1a001a40:	af00      	add	r7, sp, #0
1a001a42:	6078      	str	r0, [r7, #4]
1a001a44:	6039      	str	r1, [r7, #0]
	if (speed > MAX_SPEED) {
1a001a46:	683b      	ldr	r3, [r7, #0]
1a001a48:	2b64      	cmp	r3, #100	; 0x64
1a001a4a:	dd02      	ble.n	1a001a52 <updateMotorVelocity+0x16>
		speed = MAX_SPEED;
1a001a4c:	2364      	movs	r3, #100	; 0x64
1a001a4e:	603b      	str	r3, [r7, #0]
1a001a50:	e006      	b.n	1a001a60 <updateMotorVelocity+0x24>
	} else if (speed < -MAX_SPEED) {
1a001a52:	683b      	ldr	r3, [r7, #0]
1a001a54:	f113 0f64 	cmn.w	r3, #100	; 0x64
1a001a58:	da02      	bge.n	1a001a60 <updateMotorVelocity+0x24>
		speed = -MAX_SPEED;
1a001a5a:	f06f 0363 	mvn.w	r3, #99	; 0x63
1a001a5e:	603b      	str	r3, [r7, #0]
	}

	if (motor == MOTOR0) {
1a001a60:	687b      	ldr	r3, [r7, #4]
1a001a62:	2b00      	cmp	r3, #0
1a001a64:	d113      	bne.n	1a001a8e <updateMotorVelocity+0x52>
		motor0.controllerWindUpGuard = 0;
1a001a66:	4b1a      	ldr	r3, [pc, #104]	; (1a001ad0 <updateMotorVelocity+0x94>)
1a001a68:	2200      	movs	r2, #0
1a001a6a:	635a      	str	r2, [r3, #52]	; 0x34
		motor0.requestedVelocity = speed;
1a001a6c:	4a18      	ldr	r2, [pc, #96]	; (1a001ad0 <updateMotorVelocity+0x94>)
1a001a6e:	683b      	ldr	r3, [r7, #0]
1a001a70:	6153      	str	r3, [r2, #20]
		//leftWheel.wheelStatus = 0;
		if (motor0.controlMode & DIRECT_MODE) {
1a001a72:	4b17      	ldr	r3, [pc, #92]	; (1a001ad0 <updateMotorVelocity+0x94>)
1a001a74:	68db      	ldr	r3, [r3, #12]
1a001a76:	f003 0301 	and.w	r3, r3, #1
1a001a7a:	2b00      	cmp	r3, #0
1a001a7c:	d003      	beq.n	1a001a86 <updateMotorVelocity+0x4a>
			motor0.requestedPosition = leftWheel.wheelStatus;
1a001a7e:	4b15      	ldr	r3, [pc, #84]	; (1a001ad4 <updateMotorVelocity+0x98>)
1a001a80:	681b      	ldr	r3, [r3, #0]
1a001a82:	4a13      	ldr	r2, [pc, #76]	; (1a001ad0 <updateMotorVelocity+0x94>)
1a001a84:	6193      	str	r3, [r2, #24]
		}
		motor0.controlMode = VELOCITY_MODE;
1a001a86:	4b12      	ldr	r3, [pc, #72]	; (1a001ad0 <updateMotorVelocity+0x94>)
1a001a88:	2202      	movs	r2, #2
1a001a8a:	60da      	str	r2, [r3, #12]
1a001a8c:	e018      	b.n	1a001ac0 <updateMotorVelocity+0x84>
	} else if (motor == MOTOR1) {
1a001a8e:	687b      	ldr	r3, [r7, #4]
1a001a90:	2b01      	cmp	r3, #1
1a001a92:	d113      	bne.n	1a001abc <updateMotorVelocity+0x80>
		motor1.controllerWindUpGuard = 0;
1a001a94:	4b10      	ldr	r3, [pc, #64]	; (1a001ad8 <updateMotorVelocity+0x9c>)
1a001a96:	2200      	movs	r2, #0
1a001a98:	635a      	str	r2, [r3, #52]	; 0x34
		motor1.requestedVelocity = speed;
1a001a9a:	4a0f      	ldr	r2, [pc, #60]	; (1a001ad8 <updateMotorVelocity+0x9c>)
1a001a9c:	683b      	ldr	r3, [r7, #0]
1a001a9e:	6153      	str	r3, [r2, #20]
		//rightWheel.wheelStatus = 0;
		if (motor1.controlMode & DIRECT_MODE) {
1a001aa0:	4b0d      	ldr	r3, [pc, #52]	; (1a001ad8 <updateMotorVelocity+0x9c>)
1a001aa2:	68db      	ldr	r3, [r3, #12]
1a001aa4:	f003 0301 	and.w	r3, r3, #1
1a001aa8:	2b00      	cmp	r3, #0
1a001aaa:	d003      	beq.n	1a001ab4 <updateMotorVelocity+0x78>
			motor1.requestedPosition = rightWheel.wheelStatus;
1a001aac:	4b0b      	ldr	r3, [pc, #44]	; (1a001adc <updateMotorVelocity+0xa0>)
1a001aae:	681b      	ldr	r3, [r3, #0]
1a001ab0:	4a09      	ldr	r2, [pc, #36]	; (1a001ad8 <updateMotorVelocity+0x9c>)
1a001ab2:	6193      	str	r3, [r2, #24]
		}
		motor1.controlMode = VELOCITY_MODE;
1a001ab4:	4b08      	ldr	r3, [pc, #32]	; (1a001ad8 <updateMotorVelocity+0x9c>)
1a001ab6:	2202      	movs	r2, #2
1a001ab8:	60da      	str	r2, [r3, #12]
1a001aba:	e001      	b.n	1a001ac0 <updateMotorVelocity+0x84>
	} else {
		return 1;
1a001abc:	2301      	movs	r3, #1
1a001abe:	e000      	b.n	1a001ac2 <updateMotorVelocity+0x86>
	}
	return 0;
1a001ac0:	2300      	movs	r3, #0
}
1a001ac2:	4618      	mov	r0, r3
1a001ac4:	370c      	adds	r7, #12
1a001ac6:	46bd      	mov	sp, r7
1a001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001acc:	4770      	bx	lr
1a001ace:	bf00      	nop
1a001ad0:	100874a4 	.word	0x100874a4
1a001ad4:	100874e0 	.word	0x100874e0
1a001ad8:	10087468 	.word	0x10087468
1a001adc:	100874ec 	.word	0x100874ec

1a001ae0 <updateMotorController>:

uint32_t updateMotorController(uint32_t motor) {
1a001ae0:	b580      	push	{r7, lr}
1a001ae2:	b086      	sub	sp, #24
1a001ae4:	af00      	add	r7, sp, #0
1a001ae6:	6078      	str	r0, [r7, #4]
	if (motor == MOTOR0) {
1a001ae8:	687b      	ldr	r3, [r7, #4]
1a001aea:	2b00      	cmp	r3, #0
1a001aec:	d16f      	bne.n	1a001bce <updateMotorController+0xee>
		if (motor0.velocityPrescalerCounter == 0) {
1a001aee:	4b75      	ldr	r3, [pc, #468]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001af0:	8a5b      	ldrh	r3, [r3, #18]
1a001af2:	2b00      	cmp	r3, #0
1a001af4:	d10b      	bne.n	1a001b0e <updateMotorController+0x2e>
			motor0.velocityPrescalerCounter = motor0.velocityPrescaler;
1a001af6:	4b73      	ldr	r3, [pc, #460]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001af8:	8a1a      	ldrh	r2, [r3, #16]
1a001afa:	4b72      	ldr	r3, [pc, #456]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001afc:	825a      	strh	r2, [r3, #18]
			motor0.requestedPosition += motor0.requestedVelocity;
1a001afe:	4b71      	ldr	r3, [pc, #452]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b00:	699a      	ldr	r2, [r3, #24]
1a001b02:	4b70      	ldr	r3, [pc, #448]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b04:	695b      	ldr	r3, [r3, #20]
1a001b06:	4413      	add	r3, r2
1a001b08:	4a6e      	ldr	r2, [pc, #440]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b0a:	6193      	str	r3, [r2, #24]
1a001b0c:	e005      	b.n	1a001b1a <updateMotorController+0x3a>
		} else {
			motor0.velocityPrescalerCounter--;
1a001b0e:	4b6d      	ldr	r3, [pc, #436]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b10:	8a5b      	ldrh	r3, [r3, #18]
1a001b12:	3b01      	subs	r3, #1
1a001b14:	b29a      	uxth	r2, r3
1a001b16:	4b6b      	ldr	r3, [pc, #428]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b18:	825a      	strh	r2, [r3, #18]
		}
		int32_t error = motor0.requestedPosition - leftWheel.wheelStatus;
1a001b1a:	4b6a      	ldr	r3, [pc, #424]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b1c:	699a      	ldr	r2, [r3, #24]
1a001b1e:	4b6a      	ldr	r3, [pc, #424]	; (1a001cc8 <updateMotorController+0x1e8>)
1a001b20:	681b      	ldr	r3, [r3, #0]
1a001b22:	1ad3      	subs	r3, r2, r3
1a001b24:	60fb      	str	r3, [r7, #12]
		//Check for a windup error
		if (error > motor0.velocityWindUpGuard) {
1a001b26:	4b67      	ldr	r3, [pc, #412]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
1a001b2a:	68fb      	ldr	r3, [r7, #12]
1a001b2c:	429a      	cmp	r2, r3
1a001b2e:	da07      	bge.n	1a001b40 <updateMotorController+0x60>
			motor0.requestedPosition = leftWheel.wheelStatus + motor0.velocityWindUpGuard;
1a001b30:	4b65      	ldr	r3, [pc, #404]	; (1a001cc8 <updateMotorController+0x1e8>)
1a001b32:	681a      	ldr	r2, [r3, #0]
1a001b34:	4b63      	ldr	r3, [pc, #396]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001b38:	4413      	add	r3, r2
1a001b3a:	4a62      	ldr	r2, [pc, #392]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b3c:	6193      	str	r3, [r2, #24]
1a001b3e:	e00c      	b.n	1a001b5a <updateMotorController+0x7a>
		} else if (error < -motor0.velocityWindUpGuard) {
1a001b40:	4b60      	ldr	r3, [pc, #384]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001b44:	425a      	negs	r2, r3
1a001b46:	68fb      	ldr	r3, [r7, #12]
1a001b48:	429a      	cmp	r2, r3
1a001b4a:	dd06      	ble.n	1a001b5a <updateMotorController+0x7a>
			motor0.requestedPosition = leftWheel.wheelStatus - motor0.velocityWindUpGuard;
1a001b4c:	4b5e      	ldr	r3, [pc, #376]	; (1a001cc8 <updateMotorController+0x1e8>)
1a001b4e:	681a      	ldr	r2, [r3, #0]
1a001b50:	4b5c      	ldr	r3, [pc, #368]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001b54:	1ad3      	subs	r3, r2, r3
1a001b56:	4a5b      	ldr	r2, [pc, #364]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b58:	6193      	str	r3, [r2, #24]
		}
		motor0.errorIntegral += error;
1a001b5a:	4b5a      	ldr	r3, [pc, #360]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001b5e:	68fb      	ldr	r3, [r7, #12]
1a001b60:	4413      	add	r3, r2
1a001b62:	4a58      	ldr	r2, [pc, #352]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b64:	62d3      	str	r3, [r2, #44]	; 0x2c
		if (motor0.errorIntegral > motor0.controllerWindUpGuard) {
1a001b66:	4b57      	ldr	r3, [pc, #348]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001b6a:	4b56      	ldr	r3, [pc, #344]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a001b6e:	429a      	cmp	r2, r3
1a001b70:	dd04      	ble.n	1a001b7c <updateMotorController+0x9c>
			motor0.errorIntegral = motor0.controllerWindUpGuard;
1a001b72:	4b54      	ldr	r3, [pc, #336]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a001b76:	4a53      	ldr	r2, [pc, #332]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b78:	62d3      	str	r3, [r2, #44]	; 0x2c
1a001b7a:	e00a      	b.n	1a001b92 <updateMotorController+0xb2>
		} else if (error < -motor0.velocityWindUpGuard) {
1a001b7c:	4b51      	ldr	r3, [pc, #324]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001b80:	425a      	negs	r2, r3
1a001b82:	68fb      	ldr	r3, [r7, #12]
1a001b84:	429a      	cmp	r2, r3
1a001b86:	dd04      	ble.n	1a001b92 <updateMotorController+0xb2>
			motor0.errorIntegral = -motor0.controllerWindUpGuard;
1a001b88:	4b4e      	ldr	r3, [pc, #312]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a001b8c:	425b      	negs	r3, r3
1a001b8e:	4a4d      	ldr	r2, [pc, #308]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b90:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		motor0.lastError = error;
1a001b92:	4a4c      	ldr	r2, [pc, #304]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b94:	68fb      	ldr	r3, [r7, #12]
1a001b96:	6293      	str	r3, [r2, #40]	; 0x28
		int32_t control = motor0.proportionalGain * error + motor0.derivativeGain * (error - motor0.lastError)
1a001b98:	4b4a      	ldr	r3, [pc, #296]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001b9a:	69db      	ldr	r3, [r3, #28]
1a001b9c:	68fa      	ldr	r2, [r7, #12]
1a001b9e:	fb02 f203 	mul.w	r2, r2, r3
1a001ba2:	4b48      	ldr	r3, [pc, #288]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a001ba6:	4947      	ldr	r1, [pc, #284]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001ba8:	6a89      	ldr	r1, [r1, #40]	; 0x28
1a001baa:	68f8      	ldr	r0, [r7, #12]
1a001bac:	1a41      	subs	r1, r0, r1
1a001bae:	fb01 f303 	mul.w	r3, r1, r3
1a001bb2:	441a      	add	r2, r3
				+ motor0.integralGain * motor0.errorIntegral;
1a001bb4:	4b43      	ldr	r3, [pc, #268]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001bb6:	6a1b      	ldr	r3, [r3, #32]
1a001bb8:	4942      	ldr	r1, [pc, #264]	; (1a001cc4 <updateMotorController+0x1e4>)
1a001bba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001bbc:	fb01 f303 	mul.w	r3, r1, r3
			motor0.errorIntegral = motor0.controllerWindUpGuard;
		} else if (error < -motor0.velocityWindUpGuard) {
			motor0.errorIntegral = -motor0.controllerWindUpGuard;
		}
		motor0.lastError = error;
		int32_t control = motor0.proportionalGain * error + motor0.derivativeGain * (error - motor0.lastError)
1a001bc0:	4413      	add	r3, r2
1a001bc2:	60bb      	str	r3, [r7, #8]
				+ motor0.integralGain * motor0.errorIntegral;
		updateMotorWidth(MOTOR0, control);
1a001bc4:	68b9      	ldr	r1, [r7, #8]
1a001bc6:	2000      	movs	r0, #0
1a001bc8:	f000 fa06 	bl	1a001fd8 <updateMotorWidth>
1a001bcc:	e074      	b.n	1a001cb8 <updateMotorController+0x1d8>
	} else if (motor == MOTOR1) {
1a001bce:	687b      	ldr	r3, [r7, #4]
1a001bd0:	2b01      	cmp	r3, #1
1a001bd2:	d16f      	bne.n	1a001cb4 <updateMotorController+0x1d4>
		if (motor1.velocityPrescalerCounter == 0) {
1a001bd4:	4b3d      	ldr	r3, [pc, #244]	; (1a001ccc <updateMotorController+0x1ec>)
1a001bd6:	8a5b      	ldrh	r3, [r3, #18]
1a001bd8:	2b00      	cmp	r3, #0
1a001bda:	d10b      	bne.n	1a001bf4 <updateMotorController+0x114>
			motor1.velocityPrescalerCounter = motor1.velocityPrescaler;
1a001bdc:	4b3b      	ldr	r3, [pc, #236]	; (1a001ccc <updateMotorController+0x1ec>)
1a001bde:	8a1a      	ldrh	r2, [r3, #16]
1a001be0:	4b3a      	ldr	r3, [pc, #232]	; (1a001ccc <updateMotorController+0x1ec>)
1a001be2:	825a      	strh	r2, [r3, #18]
			motor1.requestedPosition += motor1.requestedVelocity;
1a001be4:	4b39      	ldr	r3, [pc, #228]	; (1a001ccc <updateMotorController+0x1ec>)
1a001be6:	699a      	ldr	r2, [r3, #24]
1a001be8:	4b38      	ldr	r3, [pc, #224]	; (1a001ccc <updateMotorController+0x1ec>)
1a001bea:	695b      	ldr	r3, [r3, #20]
1a001bec:	4413      	add	r3, r2
1a001bee:	4a37      	ldr	r2, [pc, #220]	; (1a001ccc <updateMotorController+0x1ec>)
1a001bf0:	6193      	str	r3, [r2, #24]
1a001bf2:	e005      	b.n	1a001c00 <updateMotorController+0x120>
		} else {
			motor1.velocityPrescalerCounter--;
1a001bf4:	4b35      	ldr	r3, [pc, #212]	; (1a001ccc <updateMotorController+0x1ec>)
1a001bf6:	8a5b      	ldrh	r3, [r3, #18]
1a001bf8:	3b01      	subs	r3, #1
1a001bfa:	b29a      	uxth	r2, r3
1a001bfc:	4b33      	ldr	r3, [pc, #204]	; (1a001ccc <updateMotorController+0x1ec>)
1a001bfe:	825a      	strh	r2, [r3, #18]
		}
		int32_t error = motor1.requestedPosition - rightWheel.wheelStatus;
1a001c00:	4b32      	ldr	r3, [pc, #200]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c02:	699a      	ldr	r2, [r3, #24]
1a001c04:	4b32      	ldr	r3, [pc, #200]	; (1a001cd0 <updateMotorController+0x1f0>)
1a001c06:	681b      	ldr	r3, [r3, #0]
1a001c08:	1ad3      	subs	r3, r2, r3
1a001c0a:	617b      	str	r3, [r7, #20]
		//Check for a windup error
		if (error > motor1.velocityWindUpGuard) {
1a001c0c:	4b2f      	ldr	r3, [pc, #188]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
1a001c10:	697b      	ldr	r3, [r7, #20]
1a001c12:	429a      	cmp	r2, r3
1a001c14:	da07      	bge.n	1a001c26 <updateMotorController+0x146>
			motor1.requestedPosition = rightWheel.wheelStatus + motor1.velocityWindUpGuard;
1a001c16:	4b2e      	ldr	r3, [pc, #184]	; (1a001cd0 <updateMotorController+0x1f0>)
1a001c18:	681a      	ldr	r2, [r3, #0]
1a001c1a:	4b2c      	ldr	r3, [pc, #176]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001c1e:	4413      	add	r3, r2
1a001c20:	4a2a      	ldr	r2, [pc, #168]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c22:	6193      	str	r3, [r2, #24]
1a001c24:	e00c      	b.n	1a001c40 <updateMotorController+0x160>
		} else if (error < -motor1.velocityWindUpGuard) {
1a001c26:	4b29      	ldr	r3, [pc, #164]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001c2a:	425a      	negs	r2, r3
1a001c2c:	697b      	ldr	r3, [r7, #20]
1a001c2e:	429a      	cmp	r2, r3
1a001c30:	dd06      	ble.n	1a001c40 <updateMotorController+0x160>
			motor1.requestedPosition = rightWheel.wheelStatus - motor1.velocityWindUpGuard;
1a001c32:	4b27      	ldr	r3, [pc, #156]	; (1a001cd0 <updateMotorController+0x1f0>)
1a001c34:	681a      	ldr	r2, [r3, #0]
1a001c36:	4b25      	ldr	r3, [pc, #148]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001c3a:	1ad3      	subs	r3, r2, r3
1a001c3c:	4a23      	ldr	r2, [pc, #140]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c3e:	6193      	str	r3, [r2, #24]
		}
		motor1.errorIntegral += error;
1a001c40:	4b22      	ldr	r3, [pc, #136]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001c44:	697b      	ldr	r3, [r7, #20]
1a001c46:	4413      	add	r3, r2
1a001c48:	4a20      	ldr	r2, [pc, #128]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c4a:	62d3      	str	r3, [r2, #44]	; 0x2c
		if (motor1.errorIntegral > motor1.controllerWindUpGuard) {
1a001c4c:	4b1f      	ldr	r3, [pc, #124]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001c50:	4b1e      	ldr	r3, [pc, #120]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a001c54:	429a      	cmp	r2, r3
1a001c56:	dd04      	ble.n	1a001c62 <updateMotorController+0x182>
			motor1.errorIntegral = motor1.controllerWindUpGuard;
1a001c58:	4b1c      	ldr	r3, [pc, #112]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a001c5c:	4a1b      	ldr	r2, [pc, #108]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c5e:	62d3      	str	r3, [r2, #44]	; 0x2c
1a001c60:	e00a      	b.n	1a001c78 <updateMotorController+0x198>
		} else if (error < -motor1.velocityWindUpGuard) {
1a001c62:	4b1a      	ldr	r3, [pc, #104]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001c66:	425a      	negs	r2, r3
1a001c68:	697b      	ldr	r3, [r7, #20]
1a001c6a:	429a      	cmp	r2, r3
1a001c6c:	dd04      	ble.n	1a001c78 <updateMotorController+0x198>
			motor1.errorIntegral = -motor1.controllerWindUpGuard;
1a001c6e:	4b17      	ldr	r3, [pc, #92]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a001c72:	425b      	negs	r3, r3
1a001c74:	4a15      	ldr	r2, [pc, #84]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c76:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		motor1.lastError = error;
1a001c78:	4a14      	ldr	r2, [pc, #80]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c7a:	697b      	ldr	r3, [r7, #20]
1a001c7c:	6293      	str	r3, [r2, #40]	; 0x28
		int32_t control = motor1.proportionalGain * error + motor1.derivativeGain * (error - motor1.lastError)
1a001c7e:	4b13      	ldr	r3, [pc, #76]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c80:	69db      	ldr	r3, [r3, #28]
1a001c82:	697a      	ldr	r2, [r7, #20]
1a001c84:	fb02 f203 	mul.w	r2, r2, r3
1a001c88:	4b10      	ldr	r3, [pc, #64]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a001c8c:	490f      	ldr	r1, [pc, #60]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c8e:	6a89      	ldr	r1, [r1, #40]	; 0x28
1a001c90:	6978      	ldr	r0, [r7, #20]
1a001c92:	1a41      	subs	r1, r0, r1
1a001c94:	fb01 f303 	mul.w	r3, r1, r3
1a001c98:	441a      	add	r2, r3
				+ motor1.integralGain * motor1.errorIntegral;
1a001c9a:	4b0c      	ldr	r3, [pc, #48]	; (1a001ccc <updateMotorController+0x1ec>)
1a001c9c:	6a1b      	ldr	r3, [r3, #32]
1a001c9e:	490b      	ldr	r1, [pc, #44]	; (1a001ccc <updateMotorController+0x1ec>)
1a001ca0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001ca2:	fb01 f303 	mul.w	r3, r1, r3
			motor1.errorIntegral = motor1.controllerWindUpGuard;
		} else if (error < -motor1.velocityWindUpGuard) {
			motor1.errorIntegral = -motor1.controllerWindUpGuard;
		}
		motor1.lastError = error;
		int32_t control = motor1.proportionalGain * error + motor1.derivativeGain * (error - motor1.lastError)
1a001ca6:	4413      	add	r3, r2
1a001ca8:	613b      	str	r3, [r7, #16]
				+ motor1.integralGain * motor1.errorIntegral;
		updateMotorWidth(MOTOR1, control);
1a001caa:	6939      	ldr	r1, [r7, #16]
1a001cac:	2001      	movs	r0, #1
1a001cae:	f000 f993 	bl	1a001fd8 <updateMotorWidth>
1a001cb2:	e001      	b.n	1a001cb8 <updateMotorController+0x1d8>
	} else {
		return 1;
1a001cb4:	2301      	movs	r3, #1
1a001cb6:	e000      	b.n	1a001cba <updateMotorController+0x1da>
	}
	return 0;
1a001cb8:	2300      	movs	r3, #0
}
1a001cba:	4618      	mov	r0, r3
1a001cbc:	3718      	adds	r7, #24
1a001cbe:	46bd      	mov	sp, r7
1a001cc0:	bd80      	pop	{r7, pc}
1a001cc2:	bf00      	nop
1a001cc4:	100874a4 	.word	0x100874a4
1a001cc8:	100874e0 	.word	0x100874e0
1a001ccc:	10087468 	.word	0x10087468
1a001cd0:	100874ec 	.word	0x100874ec

1a001cd4 <updateMotorVelocityDecay>:

uint32_t updateMotorVelocityDecay(uint32_t motor, int32_t speed) {
1a001cd4:	b580      	push	{r7, lr}
1a001cd6:	b082      	sub	sp, #8
1a001cd8:	af00      	add	r7, sp, #0
1a001cda:	6078      	str	r0, [r7, #4]
1a001cdc:	6039      	str	r1, [r7, #0]
	if (updateMotorVelocity(motor, speed)) {
1a001cde:	6839      	ldr	r1, [r7, #0]
1a001ce0:	6878      	ldr	r0, [r7, #4]
1a001ce2:	f7ff feab 	bl	1a001a3c <updateMotorVelocity>
1a001ce6:	4603      	mov	r3, r0
1a001ce8:	2b00      	cmp	r3, #0
1a001cea:	d001      	beq.n	1a001cf0 <updateMotorVelocityDecay+0x1c>
		return 1;
1a001cec:	2301      	movs	r3, #1
1a001cee:	e014      	b.n	1a001d1a <updateMotorVelocityDecay+0x46>
	}
	if (motor == MOTOR0) {
1a001cf0:	687b      	ldr	r3, [r7, #4]
1a001cf2:	2b00      	cmp	r3, #0
1a001cf4:	d103      	bne.n	1a001cfe <updateMotorVelocityDecay+0x2a>
		motor0.decayCounter = 10;
1a001cf6:	4b0b      	ldr	r3, [pc, #44]	; (1a001d24 <updateMotorVelocityDecay+0x50>)
1a001cf8:	220a      	movs	r2, #10
1a001cfa:	609a      	str	r2, [r3, #8]
1a001cfc:	e008      	b.n	1a001d10 <updateMotorVelocityDecay+0x3c>
	} else if (motor == MOTOR1) {
1a001cfe:	687b      	ldr	r3, [r7, #4]
1a001d00:	2b01      	cmp	r3, #1
1a001d02:	d103      	bne.n	1a001d0c <updateMotorVelocityDecay+0x38>
		motor1.decayCounter = 10;
1a001d04:	4b08      	ldr	r3, [pc, #32]	; (1a001d28 <updateMotorVelocityDecay+0x54>)
1a001d06:	220a      	movs	r2, #10
1a001d08:	609a      	str	r2, [r3, #8]
1a001d0a:	e001      	b.n	1a001d10 <updateMotorVelocityDecay+0x3c>
	} else {
		return 1;
1a001d0c:	2301      	movs	r3, #1
1a001d0e:	e004      	b.n	1a001d1a <updateMotorVelocityDecay+0x46>
	}
	return updateMotorMode(motor, DECAY_MODE | VELOCITY_MODE);
1a001d10:	2106      	movs	r1, #6
1a001d12:	6878      	ldr	r0, [r7, #4]
1a001d14:	f7ff fd8e 	bl	1a001834 <updateMotorMode>
1a001d18:	4603      	mov	r3, r0
}
1a001d1a:	4618      	mov	r0, r3
1a001d1c:	3708      	adds	r7, #8
1a001d1e:	46bd      	mov	sp, r7
1a001d20:	bd80      	pop	{r7, pc}
1a001d22:	bf00      	nop
1a001d24:	100874a4 	.word	0x100874a4
1a001d28:	10087468 	.word	0x10087468

1a001d2c <updateMotorDutyCycleDecay>:

#endif

uint32_t updateMotorDutyCycleDecay(uint32_t motor, int32_t duty_cycle) {
1a001d2c:	b580      	push	{r7, lr}
1a001d2e:	b084      	sub	sp, #16
1a001d30:	af00      	add	r7, sp, #0
1a001d32:	6078      	str	r0, [r7, #4]
1a001d34:	6039      	str	r1, [r7, #0]
	if (duty_cycle > 100) {
1a001d36:	683b      	ldr	r3, [r7, #0]
1a001d38:	2b64      	cmp	r3, #100	; 0x64
1a001d3a:	dd02      	ble.n	1a001d42 <updateMotorDutyCycleDecay+0x16>
		duty_cycle = 100;
1a001d3c:	2364      	movs	r3, #100	; 0x64
1a001d3e:	603b      	str	r3, [r7, #0]
1a001d40:	e006      	b.n	1a001d50 <updateMotorDutyCycleDecay+0x24>
	} else if (duty_cycle < -100) {
1a001d42:	683b      	ldr	r3, [r7, #0]
1a001d44:	f113 0f64 	cmn.w	r3, #100	; 0x64
1a001d48:	da02      	bge.n	1a001d50 <updateMotorDutyCycleDecay+0x24>
		duty_cycle = -100;
1a001d4a:	f06f 0363 	mvn.w	r3, #99	; 0x63
1a001d4e:	603b      	str	r3, [r7, #0]
	}
//This cast from uint32_t to int32_t is safe
	if (motor == MOTOR0) {
1a001d50:	687b      	ldr	r3, [r7, #4]
1a001d52:	2b00      	cmp	r3, #0
1a001d54:	d112      	bne.n	1a001d7c <updateMotorDutyCycleDecay+0x50>
		int32_t lim = (int32_t) LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL];
1a001d56:	4b17      	ldr	r3, [pc, #92]	; (1a001db4 <updateMotorDutyCycleDecay+0x88>)
1a001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001d5a:	60fb      	str	r3, [r7, #12]
		return updateMotorWidthDecay(MOTOR0, ((duty_cycle * lim) / 100));
1a001d5c:	683b      	ldr	r3, [r7, #0]
1a001d5e:	68fa      	ldr	r2, [r7, #12]
1a001d60:	fb02 f303 	mul.w	r3, r2, r3
1a001d64:	4a14      	ldr	r2, [pc, #80]	; (1a001db8 <updateMotorDutyCycleDecay+0x8c>)
1a001d66:	fb82 1203 	smull	r1, r2, r2, r3
1a001d6a:	1152      	asrs	r2, r2, #5
1a001d6c:	17db      	asrs	r3, r3, #31
1a001d6e:	1ad3      	subs	r3, r2, r3
1a001d70:	4619      	mov	r1, r3
1a001d72:	2000      	movs	r0, #0
1a001d74:	f000 f85e 	bl	1a001e34 <updateMotorWidthDecay>
1a001d78:	4603      	mov	r3, r0
1a001d7a:	e016      	b.n	1a001daa <updateMotorDutyCycleDecay+0x7e>
	} else if (motor == MOTOR1) {
1a001d7c:	687b      	ldr	r3, [r7, #4]
1a001d7e:	2b01      	cmp	r3, #1
1a001d80:	d112      	bne.n	1a001da8 <updateMotorDutyCycleDecay+0x7c>
		int32_t lim = (int32_t) LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL];
1a001d82:	4b0c      	ldr	r3, [pc, #48]	; (1a001db4 <updateMotorDutyCycleDecay+0x88>)
1a001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1a001d86:	60bb      	str	r3, [r7, #8]
		return updateMotorWidthDecay(MOTOR1, ((duty_cycle * lim) / 100));
1a001d88:	683b      	ldr	r3, [r7, #0]
1a001d8a:	68ba      	ldr	r2, [r7, #8]
1a001d8c:	fb02 f303 	mul.w	r3, r2, r3
1a001d90:	4a09      	ldr	r2, [pc, #36]	; (1a001db8 <updateMotorDutyCycleDecay+0x8c>)
1a001d92:	fb82 1203 	smull	r1, r2, r2, r3
1a001d96:	1152      	asrs	r2, r2, #5
1a001d98:	17db      	asrs	r3, r3, #31
1a001d9a:	1ad3      	subs	r3, r2, r3
1a001d9c:	4619      	mov	r1, r3
1a001d9e:	2001      	movs	r0, #1
1a001da0:	f000 f848 	bl	1a001e34 <updateMotorWidthDecay>
1a001da4:	4603      	mov	r3, r0
1a001da6:	e000      	b.n	1a001daa <updateMotorDutyCycleDecay+0x7e>
	}
	return 1;
1a001da8:	2301      	movs	r3, #1
}
1a001daa:	4618      	mov	r0, r3
1a001dac:	3710      	adds	r7, #16
1a001dae:	46bd      	mov	sp, r7
1a001db0:	bd80      	pop	{r7, pc}
1a001db2:	bf00      	nop
1a001db4:	400a0000 	.word	0x400a0000
1a001db8:	51eb851f 	.word	0x51eb851f

1a001dbc <updateMotorWidthUsDecay>:

uint32_t updateMotorWidthUsDecay(uint32_t motor, int32_t widthUs) {
1a001dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001dbe:	b085      	sub	sp, #20
1a001dc0:	af00      	add	r7, sp, #0
1a001dc2:	6078      	str	r0, [r7, #4]
1a001dc4:	6039      	str	r1, [r7, #0]
	uint64_t calculatedWidth = (((uint64_t) widthUs * Chip_Clock_GetRate(CLK_APB1_MOTOCON)) / 1000000ULL);
1a001dc6:	683b      	ldr	r3, [r7, #0]
1a001dc8:	461d      	mov	r5, r3
1a001dca:	ea4f 76e5 	mov.w	r6, r5, asr #31
1a001dce:	2021      	movs	r0, #33	; 0x21
1a001dd0:	f010 fb86 	bl	1a0124e0 <Chip_Clock_GetRate>
1a001dd4:	4603      	mov	r3, r0
1a001dd6:	f04f 0400 	mov.w	r4, #0
1a001dda:	fb03 f106 	mul.w	r1, r3, r6
1a001dde:	fb05 f204 	mul.w	r2, r5, r4
1a001de2:	440a      	add	r2, r1
1a001de4:	fba5 0103 	umull	r0, r1, r5, r3
1a001de8:	1853      	adds	r3, r2, r1
1a001dea:	4619      	mov	r1, r3
1a001dec:	4a10      	ldr	r2, [pc, #64]	; (1a001e30 <updateMotorWidthUsDecay+0x74>)
1a001dee:	f04f 0300 	mov.w	r3, #0
1a001df2:	f012 fc5d 	bl	1a0146b0 <__aeabi_uldivmod>
1a001df6:	4603      	mov	r3, r0
1a001df8:	460c      	mov	r4, r1
1a001dfa:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if (calculatedWidth & 0xFFFFFFFF00000000ULL) { //Check for overflow
1a001dfe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
1a001e02:	f04f 0100 	mov.w	r1, #0
1a001e06:	f04f 32ff 	mov.w	r2, #4294967295
1a001e0a:	ea03 0301 	and.w	r3, r3, r1
1a001e0e:	ea04 0402 	and.w	r4, r4, r2
1a001e12:	4323      	orrs	r3, r4
1a001e14:	d001      	beq.n	1a001e1a <updateMotorWidthUsDecay+0x5e>
		return 1;
1a001e16:	2301      	movs	r3, #1
1a001e18:	e005      	b.n	1a001e26 <updateMotorWidthUsDecay+0x6a>
	}
	return updateMotorWidthDecay(motor, calculatedWidth);
1a001e1a:	68bb      	ldr	r3, [r7, #8]
1a001e1c:	4619      	mov	r1, r3
1a001e1e:	6878      	ldr	r0, [r7, #4]
1a001e20:	f000 f808 	bl	1a001e34 <updateMotorWidthDecay>
1a001e24:	4603      	mov	r3, r0
}
1a001e26:	4618      	mov	r0, r3
1a001e28:	3714      	adds	r7, #20
1a001e2a:	46bd      	mov	sp, r7
1a001e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001e2e:	bf00      	nop
1a001e30:	000f4240 	.word	0x000f4240

1a001e34 <updateMotorWidthDecay>:

uint32_t updateMotorWidthDecay(uint32_t motor, int32_t width) {
1a001e34:	b580      	push	{r7, lr}
1a001e36:	b084      	sub	sp, #16
1a001e38:	af00      	add	r7, sp, #0
1a001e3a:	6078      	str	r0, [r7, #4]
1a001e3c:	6039      	str	r1, [r7, #0]
	int32_t lim = 0;
1a001e3e:	2300      	movs	r3, #0
1a001e40:	60fb      	str	r3, [r7, #12]
	if (motor == MOTOR0) {
1a001e42:	687b      	ldr	r3, [r7, #4]
1a001e44:	2b00      	cmp	r3, #0
1a001e46:	d103      	bne.n	1a001e50 <updateMotorWidthDecay+0x1c>
		lim = (int32_t) LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL];
1a001e48:	4b1e      	ldr	r3, [pc, #120]	; (1a001ec4 <updateMotorWidthDecay+0x90>)
1a001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001e4c:	60fb      	str	r3, [r7, #12]
1a001e4e:	e002      	b.n	1a001e56 <updateMotorWidthDecay+0x22>
	} else {
		lim = (int32_t) LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL];
1a001e50:	4b1c      	ldr	r3, [pc, #112]	; (1a001ec4 <updateMotorWidthDecay+0x90>)
1a001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1a001e54:	60fb      	str	r3, [r7, #12]
	}

	if (width > lim) {
1a001e56:	683a      	ldr	r2, [r7, #0]
1a001e58:	68fb      	ldr	r3, [r7, #12]
1a001e5a:	429a      	cmp	r2, r3
1a001e5c:	dd02      	ble.n	1a001e64 <updateMotorWidthDecay+0x30>
		width = lim;
1a001e5e:	68fb      	ldr	r3, [r7, #12]
1a001e60:	603b      	str	r3, [r7, #0]
1a001e62:	e007      	b.n	1a001e74 <updateMotorWidthDecay+0x40>
	} else if (width < -lim) {
1a001e64:	68fb      	ldr	r3, [r7, #12]
1a001e66:	425a      	negs	r2, r3
1a001e68:	683b      	ldr	r3, [r7, #0]
1a001e6a:	429a      	cmp	r2, r3
1a001e6c:	dd02      	ble.n	1a001e74 <updateMotorWidthDecay+0x40>
		width = -lim;
1a001e6e:	68fb      	ldr	r3, [r7, #12]
1a001e70:	425b      	negs	r3, r3
1a001e72:	603b      	str	r3, [r7, #0]
	}
	if (motor == MOTOR0) {
1a001e74:	687b      	ldr	r3, [r7, #4]
1a001e76:	2b00      	cmp	r3, #0
1a001e78:	d106      	bne.n	1a001e88 <updateMotorWidthDecay+0x54>
		motor0.decayCounter = 10;
1a001e7a:	4b13      	ldr	r3, [pc, #76]	; (1a001ec8 <updateMotorWidthDecay+0x94>)
1a001e7c:	220a      	movs	r2, #10
1a001e7e:	609a      	str	r2, [r3, #8]
		motor0.requestedWidth = width;
1a001e80:	4a11      	ldr	r2, [pc, #68]	; (1a001ec8 <updateMotorWidthDecay+0x94>)
1a001e82:	683b      	ldr	r3, [r7, #0]
1a001e84:	6053      	str	r3, [r2, #4]
1a001e86:	e00b      	b.n	1a001ea0 <updateMotorWidthDecay+0x6c>
	} else if (motor == MOTOR1) {
1a001e88:	687b      	ldr	r3, [r7, #4]
1a001e8a:	2b01      	cmp	r3, #1
1a001e8c:	d106      	bne.n	1a001e9c <updateMotorWidthDecay+0x68>
		motor1.decayCounter = 10;
1a001e8e:	4b0f      	ldr	r3, [pc, #60]	; (1a001ecc <updateMotorWidthDecay+0x98>)
1a001e90:	220a      	movs	r2, #10
1a001e92:	609a      	str	r2, [r3, #8]
		motor1.requestedWidth = width;
1a001e94:	4a0d      	ldr	r2, [pc, #52]	; (1a001ecc <updateMotorWidthDecay+0x98>)
1a001e96:	683b      	ldr	r3, [r7, #0]
1a001e98:	6053      	str	r3, [r2, #4]
1a001e9a:	e001      	b.n	1a001ea0 <updateMotorWidthDecay+0x6c>
	} else {
		return 1;
1a001e9c:	2301      	movs	r3, #1
1a001e9e:	e00d      	b.n	1a001ebc <updateMotorWidthDecay+0x88>
	}
	if (updateMotorWidth(motor, width)) {
1a001ea0:	6839      	ldr	r1, [r7, #0]
1a001ea2:	6878      	ldr	r0, [r7, #4]
1a001ea4:	f000 f898 	bl	1a001fd8 <updateMotorWidth>
1a001ea8:	4603      	mov	r3, r0
1a001eaa:	2b00      	cmp	r3, #0
1a001eac:	d001      	beq.n	1a001eb2 <updateMotorWidthDecay+0x7e>
		return 1;
1a001eae:	2301      	movs	r3, #1
1a001eb0:	e004      	b.n	1a001ebc <updateMotorWidthDecay+0x88>
	}
	return updateMotorMode(motor, DECAY_MODE | DIRECT_MODE);
1a001eb2:	2105      	movs	r1, #5
1a001eb4:	6878      	ldr	r0, [r7, #4]
1a001eb6:	f7ff fcbd 	bl	1a001834 <updateMotorMode>
1a001eba:	4603      	mov	r3, r0
}
1a001ebc:	4618      	mov	r0, r3
1a001ebe:	3710      	adds	r7, #16
1a001ec0:	46bd      	mov	sp, r7
1a001ec2:	bd80      	pop	{r7, pc}
1a001ec4:	400a0000 	.word	0x400a0000
1a001ec8:	100874a4 	.word	0x100874a4
1a001ecc:	10087468 	.word	0x10087468

1a001ed0 <updateMotorDutyCycle>:

uint32_t updateMotorDutyCycle(uint32_t motor, int32_t duty_cycle) {
1a001ed0:	b580      	push	{r7, lr}
1a001ed2:	b084      	sub	sp, #16
1a001ed4:	af00      	add	r7, sp, #0
1a001ed6:	6078      	str	r0, [r7, #4]
1a001ed8:	6039      	str	r1, [r7, #0]
	if (duty_cycle > 100) {
1a001eda:	683b      	ldr	r3, [r7, #0]
1a001edc:	2b64      	cmp	r3, #100	; 0x64
1a001ede:	dd02      	ble.n	1a001ee6 <updateMotorDutyCycle+0x16>
		duty_cycle = 100;
1a001ee0:	2364      	movs	r3, #100	; 0x64
1a001ee2:	603b      	str	r3, [r7, #0]
1a001ee4:	e006      	b.n	1a001ef4 <updateMotorDutyCycle+0x24>
	} else if (duty_cycle < -100) {
1a001ee6:	683b      	ldr	r3, [r7, #0]
1a001ee8:	f113 0f64 	cmn.w	r3, #100	; 0x64
1a001eec:	da02      	bge.n	1a001ef4 <updateMotorDutyCycle+0x24>
		duty_cycle = -100;
1a001eee:	f06f 0363 	mvn.w	r3, #99	; 0x63
1a001ef2:	603b      	str	r3, [r7, #0]
	}
//This cast from uint32_t to int32_t is safe
	if (motor == MOTOR0) {
1a001ef4:	687b      	ldr	r3, [r7, #4]
1a001ef6:	2b00      	cmp	r3, #0
1a001ef8:	d112      	bne.n	1a001f20 <updateMotorDutyCycle+0x50>
		int32_t lim = (int32_t) LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL];
1a001efa:	4b17      	ldr	r3, [pc, #92]	; (1a001f58 <updateMotorDutyCycle+0x88>)
1a001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001efe:	60fb      	str	r3, [r7, #12]
		return updateMotorWidth(motor, ((duty_cycle * lim) / 100));
1a001f00:	683b      	ldr	r3, [r7, #0]
1a001f02:	68fa      	ldr	r2, [r7, #12]
1a001f04:	fb02 f303 	mul.w	r3, r2, r3
1a001f08:	4a14      	ldr	r2, [pc, #80]	; (1a001f5c <updateMotorDutyCycle+0x8c>)
1a001f0a:	fb82 1203 	smull	r1, r2, r2, r3
1a001f0e:	1152      	asrs	r2, r2, #5
1a001f10:	17db      	asrs	r3, r3, #31
1a001f12:	1ad3      	subs	r3, r2, r3
1a001f14:	4619      	mov	r1, r3
1a001f16:	6878      	ldr	r0, [r7, #4]
1a001f18:	f000 f85e 	bl	1a001fd8 <updateMotorWidth>
1a001f1c:	4603      	mov	r3, r0
1a001f1e:	e016      	b.n	1a001f4e <updateMotorDutyCycle+0x7e>
	} else if (motor == MOTOR1) {
1a001f20:	687b      	ldr	r3, [r7, #4]
1a001f22:	2b01      	cmp	r3, #1
1a001f24:	d112      	bne.n	1a001f4c <updateMotorDutyCycle+0x7c>
		int32_t lim = (int32_t) LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL];
1a001f26:	4b0c      	ldr	r3, [pc, #48]	; (1a001f58 <updateMotorDutyCycle+0x88>)
1a001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1a001f2a:	60bb      	str	r3, [r7, #8]
		return updateMotorWidth(motor, ((duty_cycle * lim) / 100));
1a001f2c:	683b      	ldr	r3, [r7, #0]
1a001f2e:	68ba      	ldr	r2, [r7, #8]
1a001f30:	fb02 f303 	mul.w	r3, r2, r3
1a001f34:	4a09      	ldr	r2, [pc, #36]	; (1a001f5c <updateMotorDutyCycle+0x8c>)
1a001f36:	fb82 1203 	smull	r1, r2, r2, r3
1a001f3a:	1152      	asrs	r2, r2, #5
1a001f3c:	17db      	asrs	r3, r3, #31
1a001f3e:	1ad3      	subs	r3, r2, r3
1a001f40:	4619      	mov	r1, r3
1a001f42:	6878      	ldr	r0, [r7, #4]
1a001f44:	f000 f848 	bl	1a001fd8 <updateMotorWidth>
1a001f48:	4603      	mov	r3, r0
1a001f4a:	e000      	b.n	1a001f4e <updateMotorDutyCycle+0x7e>
	}
	return 1;
1a001f4c:	2301      	movs	r3, #1
}
1a001f4e:	4618      	mov	r0, r3
1a001f50:	3710      	adds	r7, #16
1a001f52:	46bd      	mov	sp, r7
1a001f54:	bd80      	pop	{r7, pc}
1a001f56:	bf00      	nop
1a001f58:	400a0000 	.word	0x400a0000
1a001f5c:	51eb851f 	.word	0x51eb851f

1a001f60 <updateMotorWidthUs>:
uint32_t updateMotorWidthUs(uint32_t motor, int32_t widthUs) {
1a001f60:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001f62:	b085      	sub	sp, #20
1a001f64:	af00      	add	r7, sp, #0
1a001f66:	6078      	str	r0, [r7, #4]
1a001f68:	6039      	str	r1, [r7, #0]
	uint64_t calculatedWidth = (((uint64_t) widthUs * Chip_Clock_GetRate(CLK_APB1_MOTOCON)) / 1000000ULL);
1a001f6a:	683b      	ldr	r3, [r7, #0]
1a001f6c:	461d      	mov	r5, r3
1a001f6e:	ea4f 76e5 	mov.w	r6, r5, asr #31
1a001f72:	2021      	movs	r0, #33	; 0x21
1a001f74:	f010 fab4 	bl	1a0124e0 <Chip_Clock_GetRate>
1a001f78:	4603      	mov	r3, r0
1a001f7a:	f04f 0400 	mov.w	r4, #0
1a001f7e:	fb03 f106 	mul.w	r1, r3, r6
1a001f82:	fb05 f204 	mul.w	r2, r5, r4
1a001f86:	440a      	add	r2, r1
1a001f88:	fba5 0103 	umull	r0, r1, r5, r3
1a001f8c:	1853      	adds	r3, r2, r1
1a001f8e:	4619      	mov	r1, r3
1a001f90:	4a10      	ldr	r2, [pc, #64]	; (1a001fd4 <updateMotorWidthUs+0x74>)
1a001f92:	f04f 0300 	mov.w	r3, #0
1a001f96:	f012 fb8b 	bl	1a0146b0 <__aeabi_uldivmod>
1a001f9a:	4603      	mov	r3, r0
1a001f9c:	460c      	mov	r4, r1
1a001f9e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if (calculatedWidth & 0xFFFFFFFF00000000ULL) { //Check for overflow
1a001fa2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
1a001fa6:	f04f 0100 	mov.w	r1, #0
1a001faa:	f04f 32ff 	mov.w	r2, #4294967295
1a001fae:	ea03 0301 	and.w	r3, r3, r1
1a001fb2:	ea04 0402 	and.w	r4, r4, r2
1a001fb6:	4323      	orrs	r3, r4
1a001fb8:	d001      	beq.n	1a001fbe <updateMotorWidthUs+0x5e>
		return 1;
1a001fba:	2301      	movs	r3, #1
1a001fbc:	e005      	b.n	1a001fca <updateMotorWidthUs+0x6a>
	}
	return updateMotorWidth(motor, calculatedWidth);
1a001fbe:	68bb      	ldr	r3, [r7, #8]
1a001fc0:	4619      	mov	r1, r3
1a001fc2:	6878      	ldr	r0, [r7, #4]
1a001fc4:	f000 f808 	bl	1a001fd8 <updateMotorWidth>
1a001fc8:	4603      	mov	r3, r0
}
1a001fca:	4618      	mov	r0, r3
1a001fcc:	3714      	adds	r7, #20
1a001fce:	46bd      	mov	sp, r7
1a001fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001fd2:	bf00      	nop
1a001fd4:	000f4240 	.word	0x000f4240

1a001fd8 <updateMotorWidth>:

uint32_t updateMotorWidth(uint32_t motor, int32_t width) {
1a001fd8:	b580      	push	{r7, lr}
1a001fda:	b084      	sub	sp, #16
1a001fdc:	af00      	add	r7, sp, #0
1a001fde:	6078      	str	r0, [r7, #4]
1a001fe0:	6039      	str	r1, [r7, #0]
	if (motor == MOTOR0) {
1a001fe2:	687b      	ldr	r3, [r7, #4]
1a001fe4:	2b00      	cmp	r3, #0
1a001fe6:	d15b      	bne.n	1a0020a0 <updateMotorWidth+0xc8>
		int32_t lim = (int32_t) LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL];
1a001fe8:	4b60      	ldr	r3, [pc, #384]	; (1a00216c <updateMotorWidth+0x194>)
1a001fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001fec:	60bb      	str	r3, [r7, #8]
		if (width > lim) {
1a001fee:	683a      	ldr	r2, [r7, #0]
1a001ff0:	68bb      	ldr	r3, [r7, #8]
1a001ff2:	429a      	cmp	r2, r3
1a001ff4:	dd02      	ble.n	1a001ffc <updateMotorWidth+0x24>
			width = lim;
1a001ff6:	68bb      	ldr	r3, [r7, #8]
1a001ff8:	603b      	str	r3, [r7, #0]
1a001ffa:	e007      	b.n	1a00200c <updateMotorWidth+0x34>
		} else if (width < -lim) {
1a001ffc:	68bb      	ldr	r3, [r7, #8]
1a001ffe:	425a      	negs	r2, r3
1a002000:	683b      	ldr	r3, [r7, #0]
1a002002:	429a      	cmp	r2, r3
1a002004:	dd02      	ble.n	1a00200c <updateMotorWidth+0x34>
			width = -lim;
1a002006:	68bb      	ldr	r3, [r7, #8]
1a002008:	425b      	negs	r3, r3
1a00200a:	603b      	str	r3, [r7, #0]
		}
		motor0.currentDutycycle = width;
1a00200c:	4a58      	ldr	r2, [pc, #352]	; (1a002170 <updateMotorWidth+0x198>)
1a00200e:	683b      	ldr	r3, [r7, #0]
1a002010:	6013      	str	r3, [r2, #0]
		if (width == 0) {
1a002012:	683b      	ldr	r3, [r7, #0]
1a002014:	2b00      	cmp	r3, #0
1a002016:	d114      	bne.n	1a002042 <updateMotorWidth+0x6a>
			//Brake
			Chip_SCU_PinMuxSet(MOTOR0_PWM_1_PORT, MOTOR0_PWM_1_PIN, MD_PLN_FAST | FUNC0);
1a002018:	22f0      	movs	r2, #240	; 0xf0
1a00201a:	2107      	movs	r1, #7
1a00201c:	2005      	movs	r0, #5
1a00201e:	f7ff fb0b 	bl	1a001638 <Chip_SCU_PinMuxSet>
			Chip_SCU_PinMuxSet(MOTOR0_PWM_2_PORT, MOTOR0_PWM_2_PIN, MD_PLN_FAST | FUNC0);
1a002022:	22f0      	movs	r2, #240	; 0xf0
1a002024:	2100      	movs	r1, #0
1a002026:	2005      	movs	r0, #5
1a002028:	f7ff fb06 	bl	1a001638 <Chip_SCU_PinMuxSet>
			Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR0_PWM_1_PORT_GPIO, MOTOR0_PWM_1_PIN_GPIO);
1a00202c:	2207      	movs	r2, #7
1a00202e:	2102      	movs	r1, #2
1a002030:	4850      	ldr	r0, [pc, #320]	; (1a002174 <updateMotorWidth+0x19c>)
1a002032:	f7ff fb5b 	bl	1a0016ec <Chip_GPIO_SetPinOutHigh>
			Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR0_PWM_2_PORT_GPIO, MOTOR0_PWM_2_PIN_GPIO);
1a002036:	2209      	movs	r2, #9
1a002038:	2102      	movs	r1, #2
1a00203a:	484e      	ldr	r0, [pc, #312]	; (1a002174 <updateMotorWidth+0x19c>)
1a00203c:	f7ff fb56 	bl	1a0016ec <Chip_GPIO_SetPinOutHigh>
1a002040:	e08f      	b.n	1a002162 <updateMotorWidth+0x18a>
		}
		//Moving forward
		else if (width > 0) {
1a002042:	683b      	ldr	r3, [r7, #0]
1a002044:	2b00      	cmp	r3, #0
1a002046:	dd15      	ble.n	1a002074 <updateMotorWidth+0x9c>
			Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR0_PWM_1_PORT_GPIO, MOTOR0_PWM_1_PIN_GPIO);
1a002048:	2207      	movs	r2, #7
1a00204a:	2102      	movs	r1, #2
1a00204c:	4849      	ldr	r0, [pc, #292]	; (1a002174 <updateMotorWidth+0x19c>)
1a00204e:	f7ff fb4d 	bl	1a0016ec <Chip_GPIO_SetPinOutHigh>
			LPC_MCPWM->MAT[MOTOR0_PWM_CHANNEL] = LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL] - width;
1a002052:	4946      	ldr	r1, [pc, #280]	; (1a00216c <updateMotorWidth+0x194>)
1a002054:	4b45      	ldr	r3, [pc, #276]	; (1a00216c <updateMotorWidth+0x194>)
1a002056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002058:	683b      	ldr	r3, [r7, #0]
1a00205a:	1ad3      	subs	r3, r2, r3
1a00205c:	638b      	str	r3, [r1, #56]	; 0x38
			Chip_SCU_PinMuxSet(MOTOR0_PWM_1_PORT, MOTOR0_PWM_1_PIN, MD_PLN_FAST | FUNC0);
1a00205e:	22f0      	movs	r2, #240	; 0xf0
1a002060:	2107      	movs	r1, #7
1a002062:	2005      	movs	r0, #5
1a002064:	f7ff fae8 	bl	1a001638 <Chip_SCU_PinMuxSet>
			Chip_SCU_PinMuxSet(MOTOR0_PWM_2_PORT, MOTOR0_PWM_2_PIN, MD_PLN_FAST | FUNC1);
1a002068:	22f1      	movs	r2, #241	; 0xf1
1a00206a:	2100      	movs	r1, #0
1a00206c:	2005      	movs	r0, #5
1a00206e:	f7ff fae3 	bl	1a001638 <Chip_SCU_PinMuxSet>
1a002072:	e076      	b.n	1a002162 <updateMotorWidth+0x18a>
		} //Moving backwards
		else {
			width = -width;
1a002074:	683b      	ldr	r3, [r7, #0]
1a002076:	425b      	negs	r3, r3
1a002078:	603b      	str	r3, [r7, #0]
			//Speed is negative
			Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR0_PWM_2_PORT_GPIO, MOTOR0_PWM_2_PIN_GPIO);
1a00207a:	2209      	movs	r2, #9
1a00207c:	2102      	movs	r1, #2
1a00207e:	483d      	ldr	r0, [pc, #244]	; (1a002174 <updateMotorWidth+0x19c>)
1a002080:	f7ff fb34 	bl	1a0016ec <Chip_GPIO_SetPinOutHigh>
			LPC_MCPWM->MAT[MOTOR0_PWM_CHANNEL] = width;
1a002084:	4a39      	ldr	r2, [pc, #228]	; (1a00216c <updateMotorWidth+0x194>)
1a002086:	683b      	ldr	r3, [r7, #0]
1a002088:	6393      	str	r3, [r2, #56]	; 0x38
			Chip_SCU_PinMuxSet(MOTOR0_PWM_1_PORT, MOTOR0_PWM_1_PIN, MD_PLN_FAST | FUNC1);
1a00208a:	22f1      	movs	r2, #241	; 0xf1
1a00208c:	2107      	movs	r1, #7
1a00208e:	2005      	movs	r0, #5
1a002090:	f7ff fad2 	bl	1a001638 <Chip_SCU_PinMuxSet>
			Chip_SCU_PinMuxSet(MOTOR0_PWM_2_PORT, MOTOR0_PWM_2_PIN, MD_PLN_FAST | FUNC0);
1a002094:	22f0      	movs	r2, #240	; 0xf0
1a002096:	2100      	movs	r1, #0
1a002098:	2005      	movs	r0, #5
1a00209a:	f7ff facd 	bl	1a001638 <Chip_SCU_PinMuxSet>
1a00209e:	e060      	b.n	1a002162 <updateMotorWidth+0x18a>

		}
	} else if (motor == MOTOR1) {
1a0020a0:	687b      	ldr	r3, [r7, #4]
1a0020a2:	2b01      	cmp	r3, #1
1a0020a4:	d15b      	bne.n	1a00215e <updateMotorWidth+0x186>
		int32_t lim = (int32_t) LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL];
1a0020a6:	4b31      	ldr	r3, [pc, #196]	; (1a00216c <updateMotorWidth+0x194>)
1a0020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1a0020aa:	60fb      	str	r3, [r7, #12]
		if (width > lim) {
1a0020ac:	683a      	ldr	r2, [r7, #0]
1a0020ae:	68fb      	ldr	r3, [r7, #12]
1a0020b0:	429a      	cmp	r2, r3
1a0020b2:	dd02      	ble.n	1a0020ba <updateMotorWidth+0xe2>
			width = lim;
1a0020b4:	68fb      	ldr	r3, [r7, #12]
1a0020b6:	603b      	str	r3, [r7, #0]
1a0020b8:	e007      	b.n	1a0020ca <updateMotorWidth+0xf2>
		} else if (width < -lim) {
1a0020ba:	68fb      	ldr	r3, [r7, #12]
1a0020bc:	425a      	negs	r2, r3
1a0020be:	683b      	ldr	r3, [r7, #0]
1a0020c0:	429a      	cmp	r2, r3
1a0020c2:	dd02      	ble.n	1a0020ca <updateMotorWidth+0xf2>
			width = -lim;
1a0020c4:	68fb      	ldr	r3, [r7, #12]
1a0020c6:	425b      	negs	r3, r3
1a0020c8:	603b      	str	r3, [r7, #0]
		}
		motor1.currentDutycycle = width;
1a0020ca:	4a2b      	ldr	r2, [pc, #172]	; (1a002178 <updateMotorWidth+0x1a0>)
1a0020cc:	683b      	ldr	r3, [r7, #0]
1a0020ce:	6013      	str	r3, [r2, #0]
		if (width == 0) {
1a0020d0:	683b      	ldr	r3, [r7, #0]
1a0020d2:	2b00      	cmp	r3, #0
1a0020d4:	d114      	bne.n	1a002100 <updateMotorWidth+0x128>
			//Brake
			Chip_SCU_PinMuxSet(MOTOR1_PWM_1_PORT, MOTOR1_PWM_1_PIN, MD_PLN_FAST | FUNC0);
1a0020d6:	22f0      	movs	r2, #240	; 0xf0
1a0020d8:	2105      	movs	r1, #5
1a0020da:	2005      	movs	r0, #5
1a0020dc:	f7ff faac 	bl	1a001638 <Chip_SCU_PinMuxSet>
			Chip_SCU_PinMuxSet(MOTOR1_PWM_2_PORT, MOTOR1_PWM_2_PIN, MD_PLN_FAST | FUNC0);
1a0020e0:	22f0      	movs	r2, #240	; 0xf0
1a0020e2:	2106      	movs	r1, #6
1a0020e4:	2005      	movs	r0, #5
1a0020e6:	f7ff faa7 	bl	1a001638 <Chip_SCU_PinMuxSet>
			Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR1_PWM_1_PORT_GPIO, MOTOR1_PWM_1_PIN_GPIO);
1a0020ea:	220e      	movs	r2, #14
1a0020ec:	2102      	movs	r1, #2
1a0020ee:	4821      	ldr	r0, [pc, #132]	; (1a002174 <updateMotorWidth+0x19c>)
1a0020f0:	f7ff fafc 	bl	1a0016ec <Chip_GPIO_SetPinOutHigh>
			Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR1_PWM_2_PORT_GPIO, MOTOR1_PWM_2_PIN_GPIO);
1a0020f4:	220f      	movs	r2, #15
1a0020f6:	2102      	movs	r1, #2
1a0020f8:	481e      	ldr	r0, [pc, #120]	; (1a002174 <updateMotorWidth+0x19c>)
1a0020fa:	f7ff faf7 	bl	1a0016ec <Chip_GPIO_SetPinOutHigh>
1a0020fe:	e030      	b.n	1a002162 <updateMotorWidth+0x18a>
		}
		//Moving forward
		else if (width > 0) {
1a002100:	683b      	ldr	r3, [r7, #0]
1a002102:	2b00      	cmp	r3, #0
1a002104:	dd15      	ble.n	1a002132 <updateMotorWidth+0x15a>
			Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR1_PWM_1_PORT_GPIO, MOTOR1_PWM_1_PIN_GPIO);
1a002106:	220e      	movs	r2, #14
1a002108:	2102      	movs	r1, #2
1a00210a:	481a      	ldr	r0, [pc, #104]	; (1a002174 <updateMotorWidth+0x19c>)
1a00210c:	f7ff faee 	bl	1a0016ec <Chip_GPIO_SetPinOutHigh>
			LPC_MCPWM->MAT[MOTOR1_PWM_CHANNEL] = LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL] - width;
1a002110:	4916      	ldr	r1, [pc, #88]	; (1a00216c <updateMotorWidth+0x194>)
1a002112:	4b16      	ldr	r3, [pc, #88]	; (1a00216c <updateMotorWidth+0x194>)
1a002114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
1a002116:	683b      	ldr	r3, [r7, #0]
1a002118:	1ad3      	subs	r3, r2, r3
1a00211a:	634b      	str	r3, [r1, #52]	; 0x34
			Chip_SCU_PinMuxSet(MOTOR1_PWM_1_PORT, MOTOR1_PWM_1_PIN, MD_PLN_FAST | FUNC0);
1a00211c:	22f0      	movs	r2, #240	; 0xf0
1a00211e:	2105      	movs	r1, #5
1a002120:	2005      	movs	r0, #5
1a002122:	f7ff fa89 	bl	1a001638 <Chip_SCU_PinMuxSet>
			Chip_SCU_PinMuxSet(MOTOR1_PWM_2_PORT, MOTOR1_PWM_2_PIN, MD_PLN_FAST | FUNC1);
1a002126:	22f1      	movs	r2, #241	; 0xf1
1a002128:	2106      	movs	r1, #6
1a00212a:	2005      	movs	r0, #5
1a00212c:	f7ff fa84 	bl	1a001638 <Chip_SCU_PinMuxSet>
1a002130:	e017      	b.n	1a002162 <updateMotorWidth+0x18a>
		} //Moving backwards
		else {
			width = -width;
1a002132:	683b      	ldr	r3, [r7, #0]
1a002134:	425b      	negs	r3, r3
1a002136:	603b      	str	r3, [r7, #0]
			//Speed is negative
			Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR1_PWM_2_PORT_GPIO, MOTOR1_PWM_2_PIN_GPIO);
1a002138:	220f      	movs	r2, #15
1a00213a:	2102      	movs	r1, #2
1a00213c:	480d      	ldr	r0, [pc, #52]	; (1a002174 <updateMotorWidth+0x19c>)
1a00213e:	f7ff fad5 	bl	1a0016ec <Chip_GPIO_SetPinOutHigh>
			LPC_MCPWM->MAT[MOTOR1_PWM_CHANNEL] = width;
1a002142:	4a0a      	ldr	r2, [pc, #40]	; (1a00216c <updateMotorWidth+0x194>)
1a002144:	683b      	ldr	r3, [r7, #0]
1a002146:	6353      	str	r3, [r2, #52]	; 0x34
			Chip_SCU_PinMuxSet(MOTOR1_PWM_1_PORT, MOTOR1_PWM_1_PIN, MD_PLN_FAST | FUNC1);
1a002148:	22f1      	movs	r2, #241	; 0xf1
1a00214a:	2105      	movs	r1, #5
1a00214c:	2005      	movs	r0, #5
1a00214e:	f7ff fa73 	bl	1a001638 <Chip_SCU_PinMuxSet>
			Chip_SCU_PinMuxSet(MOTOR1_PWM_2_PORT, MOTOR1_PWM_2_PIN, MD_PLN_FAST | FUNC0);
1a002152:	22f0      	movs	r2, #240	; 0xf0
1a002154:	2106      	movs	r1, #6
1a002156:	2005      	movs	r0, #5
1a002158:	f7ff fa6e 	bl	1a001638 <Chip_SCU_PinMuxSet>
1a00215c:	e001      	b.n	1a002162 <updateMotorWidth+0x18a>
		}
	} else {
		return 1;
1a00215e:	2301      	movs	r3, #1
1a002160:	e000      	b.n	1a002164 <updateMotorWidth+0x18c>
	}
	return 0;
1a002162:	2300      	movs	r3, #0

}
1a002164:	4618      	mov	r0, r3
1a002166:	3710      	adds	r7, #16
1a002168:	46bd      	mov	sp, r7
1a00216a:	bd80      	pop	{r7, pc}
1a00216c:	400a0000 	.word	0x400a0000
1a002170:	100874a4 	.word	0x100874a4
1a002174:	400f4000 	.word	0x400f4000
1a002178:	10087468 	.word	0x10087468

1a00217c <enableMotorDriver>:

void enableMotorDriver(uint8_t enable) {
1a00217c:	b580      	push	{r7, lr}
1a00217e:	b082      	sub	sp, #8
1a002180:	af00      	add	r7, sp, #0
1a002182:	4603      	mov	r3, r0
1a002184:	71fb      	strb	r3, [r7, #7]
	motorDriverEnabled = enable;
1a002186:	79fb      	ldrb	r3, [r7, #7]
1a002188:	4a0c      	ldr	r2, [pc, #48]	; (1a0021bc <enableMotorDriver+0x40>)
1a00218a:	6013      	str	r3, [r2, #0]
	if (enable) {
1a00218c:	79fb      	ldrb	r3, [r7, #7]
1a00218e:	2b00      	cmp	r3, #0
1a002190:	d008      	beq.n	1a0021a4 <enableMotorDriver+0x28>
		motorDriverEnabled = 1;
1a002192:	4b0a      	ldr	r3, [pc, #40]	; (1a0021bc <enableMotorDriver+0x40>)
1a002194:	2201      	movs	r2, #1
1a002196:	601a      	str	r2, [r3, #0]
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR_DRIVER_ENABLE_PORT_GPIO, MOTOR_DRIVER_ENABLE_PIN_GPIO);
1a002198:	2205      	movs	r2, #5
1a00219a:	2100      	movs	r1, #0
1a00219c:	4808      	ldr	r0, [pc, #32]	; (1a0021c0 <enableMotorDriver+0x44>)
1a00219e:	f7ff faa5 	bl	1a0016ec <Chip_GPIO_SetPinOutHigh>
	} else {
		motorDriverEnabled = 0;
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, MOTOR_DRIVER_ENABLE_PORT_GPIO, MOTOR_DRIVER_ENABLE_PIN_GPIO);
	}
}
1a0021a2:	e007      	b.n	1a0021b4 <enableMotorDriver+0x38>
	motorDriverEnabled = enable;
	if (enable) {
		motorDriverEnabled = 1;
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR_DRIVER_ENABLE_PORT_GPIO, MOTOR_DRIVER_ENABLE_PIN_GPIO);
	} else {
		motorDriverEnabled = 0;
1a0021a4:	4b05      	ldr	r3, [pc, #20]	; (1a0021bc <enableMotorDriver+0x40>)
1a0021a6:	2200      	movs	r2, #0
1a0021a8:	601a      	str	r2, [r3, #0]
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, MOTOR_DRIVER_ENABLE_PORT_GPIO, MOTOR_DRIVER_ENABLE_PIN_GPIO);
1a0021aa:	2205      	movs	r2, #5
1a0021ac:	2100      	movs	r1, #0
1a0021ae:	4804      	ldr	r0, [pc, #16]	; (1a0021c0 <enableMotorDriver+0x44>)
1a0021b0:	f7ff fab6 	bl	1a001720 <Chip_GPIO_SetPinOutLow>
	}
}
1a0021b4:	bf00      	nop
1a0021b6:	3708      	adds	r7, #8
1a0021b8:	46bd      	mov	sp, r7
1a0021ba:	bd80      	pop	{r7, pc}
1a0021bc:	10086528 	.word	0x10086528
1a0021c0:	400f4000 	.word	0x400f4000

1a0021c4 <initMotors>:

void initMotors(void) {
1a0021c4:	b580      	push	{r7, lr}
1a0021c6:	af00      	add	r7, sp, #0
	Chip_Clock_Enable(CLK_APB1_MOTOCON);
1a0021c8:	2021      	movs	r0, #33	; 0x21
1a0021ca:	f010 f913 	bl	1a0123f4 <Chip_Clock_Enable>

	LPC_MCPWM->CAP_CLR = MCPWM_CAPCLR_CAP(0) | MCPWM_CAPCLR_CAP(1) | MCPWM_CAPCLR_CAP(2);
1a0021ce:	4b6c      	ldr	r3, [pc, #432]	; (1a002380 <initMotors+0x1bc>)
1a0021d0:	2207      	movs	r2, #7
1a0021d2:	675a      	str	r2, [r3, #116]	; 0x74

	LPC_MCPWM->INTF_CLR =
1a0021d4:	4b6a      	ldr	r3, [pc, #424]	; (1a002380 <initMotors+0x1bc>)
1a0021d6:	f240 7277 	movw	r2, #1911	; 0x777
1a0021da:	671a      	str	r2, [r3, #112]	; 0x70
			MCPWM_INT_ILIM(
					0) | MCPWM_INT_ILIM(1) | MCPWM_INT_ILIM(2) | MCPWM_INT_IMAT(0) | MCPWM_INT_IMAT(1) | MCPWM_INT_IMAT(2) | MCPWM_INT_ICAP(0) | MCPWM_INT_ICAP(1) | MCPWM_INT_ICAP(2);

	LPC_MCPWM->INTEN_CLR =
1a0021dc:	4b68      	ldr	r3, [pc, #416]	; (1a002380 <initMotors+0x1bc>)
1a0021de:	f240 7277 	movw	r2, #1911	; 0x777
1a0021e2:	659a      	str	r2, [r3, #88]	; 0x58
			MCPWM_INT_ILIM(
					0) | MCPWM_INT_ILIM(1) | MCPWM_INT_ILIM(2) | MCPWM_INT_IMAT(0) | MCPWM_INT_IMAT(1) | MCPWM_INT_IMAT(2) | MCPWM_INT_ICAP(0) | MCPWM_INT_ICAP(1) | MCPWM_INT_ICAP(2);
	LPC_MCPWM->CON_CLR = MCPWM_CON_CENTER(MOTOR0_PWM_CHANNEL) | MCPWM_CON_CENTER(MOTOR1_PWM_CHANNEL);
1a0021e4:	4b66      	ldr	r3, [pc, #408]	; (1a002380 <initMotors+0x1bc>)
1a0021e6:	4a67      	ldr	r2, [pc, #412]	; (1a002384 <initMotors+0x1c0>)
1a0021e8:	609a      	str	r2, [r3, #8]
	LPC_MCPWM->CON_CLR = MCPWM_CON_POLAR(MOTOR0_PWM_CHANNEL) | MCPWM_CON_POLAR(MOTOR1_PWM_CHANNEL);
1a0021ea:	4b65      	ldr	r3, [pc, #404]	; (1a002380 <initMotors+0x1bc>)
1a0021ec:	4a66      	ldr	r2, [pc, #408]	; (1a002388 <initMotors+0x1c4>)
1a0021ee:	609a      	str	r2, [r3, #8]
	LPC_MCPWM->CON_CLR = MCPWM_CON_DTE(MOTOR0_PWM_CHANNEL) | MCPWM_CON_DTE(MOTOR1_PWM_CHANNEL);
1a0021f0:	4b63      	ldr	r3, [pc, #396]	; (1a002380 <initMotors+0x1bc>)
1a0021f2:	4a66      	ldr	r2, [pc, #408]	; (1a00238c <initMotors+0x1c8>)
1a0021f4:	609a      	str	r2, [r3, #8]
	LPC_MCPWM->CON_CLR = MCPWM_CON_DISUP(MOTOR0_PWM_CHANNEL) | MCPWM_CON_DISUP(MOTOR1_PWM_CHANNEL);
1a0021f6:	4b62      	ldr	r3, [pc, #392]	; (1a002380 <initMotors+0x1bc>)
1a0021f8:	4a65      	ldr	r2, [pc, #404]	; (1a002390 <initMotors+0x1cc>)
1a0021fa:	609a      	str	r2, [r3, #8]

	LPC_MCPWM->TC[MOTOR0_PWM_CHANNEL] = 0;
1a0021fc:	4b60      	ldr	r3, [pc, #384]	; (1a002380 <initMotors+0x1bc>)
1a0021fe:	2200      	movs	r2, #0
1a002200:	621a      	str	r2, [r3, #32]
	LPC_MCPWM->TC[MOTOR1_PWM_CHANNEL] = 0;
1a002202:	4b5f      	ldr	r3, [pc, #380]	; (1a002380 <initMotors+0x1bc>)
1a002204:	2200      	movs	r2, #0
1a002206:	61da      	str	r2, [r3, #28]
	LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL] = BASE_PWM_DIVIDER; //192MHz/25KHz = 7680
1a002208:	4b5d      	ldr	r3, [pc, #372]	; (1a002380 <initMotors+0x1bc>)
1a00220a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
1a00220e:	62da      	str	r2, [r3, #44]	; 0x2c
	LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL] = BASE_PWM_DIVIDER; //192MHz/25KHz = 7680
1a002210:	4b5b      	ldr	r3, [pc, #364]	; (1a002380 <initMotors+0x1bc>)
1a002212:	f44f 5216 	mov.w	r2, #9600	; 0x2580
1a002216:	629a      	str	r2, [r3, #40]	; 0x28
	LPC_MCPWM->MAT[MOTOR0_PWM_CHANNEL] = BASE_PWM_DIVIDER;
1a002218:	4b59      	ldr	r3, [pc, #356]	; (1a002380 <initMotors+0x1bc>)
1a00221a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
1a00221e:	639a      	str	r2, [r3, #56]	; 0x38
	LPC_MCPWM->MAT[MOTOR1_PWM_CHANNEL] = BASE_PWM_DIVIDER;
1a002220:	4b57      	ldr	r3, [pc, #348]	; (1a002380 <initMotors+0x1bc>)
1a002222:	f44f 5216 	mov.w	r2, #9600	; 0x2580
1a002226:	635a      	str	r2, [r3, #52]	; 0x34

	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR0_PWM_1_PORT_GPIO, MOTOR0_PWM_1_PIN_GPIO);
1a002228:	2207      	movs	r2, #7
1a00222a:	2102      	movs	r1, #2
1a00222c:	4859      	ldr	r0, [pc, #356]	; (1a002394 <initMotors+0x1d0>)
1a00222e:	f7ff fa5d 	bl	1a0016ec <Chip_GPIO_SetPinOutHigh>
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR1_PWM_1_PORT_GPIO, MOTOR1_PWM_1_PIN_GPIO);
1a002232:	220e      	movs	r2, #14
1a002234:	2102      	movs	r1, #2
1a002236:	4857      	ldr	r0, [pc, #348]	; (1a002394 <initMotors+0x1d0>)
1a002238:	f7ff fa58 	bl	1a0016ec <Chip_GPIO_SetPinOutHigh>
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR0_PWM_2_PORT_GPIO, MOTOR0_PWM_2_PIN_GPIO);
1a00223c:	2209      	movs	r2, #9
1a00223e:	2102      	movs	r1, #2
1a002240:	4854      	ldr	r0, [pc, #336]	; (1a002394 <initMotors+0x1d0>)
1a002242:	f7ff fa53 	bl	1a0016ec <Chip_GPIO_SetPinOutHigh>
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR1_PWM_2_PORT_GPIO, MOTOR1_PWM_2_PIN_GPIO);
1a002246:	220f      	movs	r2, #15
1a002248:	2102      	movs	r1, #2
1a00224a:	4852      	ldr	r0, [pc, #328]	; (1a002394 <initMotors+0x1d0>)
1a00224c:	f7ff fa4e 	bl	1a0016ec <Chip_GPIO_SetPinOutHigh>
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, MOTOR0_PWM_1_PORT_GPIO, MOTOR0_PWM_1_PIN_GPIO);
1a002250:	2207      	movs	r2, #7
1a002252:	2102      	movs	r1, #2
1a002254:	484f      	ldr	r0, [pc, #316]	; (1a002394 <initMotors+0x1d0>)
1a002256:	f7ff fa09 	bl	1a00166c <Chip_GPIO_SetPinDIROutput>
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, MOTOR1_PWM_1_PORT_GPIO, MOTOR1_PWM_1_PIN_GPIO);
1a00225a:	220e      	movs	r2, #14
1a00225c:	2102      	movs	r1, #2
1a00225e:	484d      	ldr	r0, [pc, #308]	; (1a002394 <initMotors+0x1d0>)
1a002260:	f7ff fa04 	bl	1a00166c <Chip_GPIO_SetPinDIROutput>
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, MOTOR0_PWM_2_PORT_GPIO, MOTOR0_PWM_2_PIN_GPIO);
1a002264:	2209      	movs	r2, #9
1a002266:	2102      	movs	r1, #2
1a002268:	484a      	ldr	r0, [pc, #296]	; (1a002394 <initMotors+0x1d0>)
1a00226a:	f7ff f9ff 	bl	1a00166c <Chip_GPIO_SetPinDIROutput>
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, MOTOR1_PWM_2_PORT_GPIO, MOTOR1_PWM_2_PIN_GPIO);
1a00226e:	220f      	movs	r2, #15
1a002270:	2102      	movs	r1, #2
1a002272:	4848      	ldr	r0, [pc, #288]	; (1a002394 <initMotors+0x1d0>)
1a002274:	f7ff f9fa 	bl	1a00166c <Chip_GPIO_SetPinDIROutput>
	Chip_SCU_PinMuxSet(MOTOR0_PWM_1_PORT, MOTOR0_PWM_1_PIN, MD_PLN_FAST | FUNC0);
1a002278:	22f0      	movs	r2, #240	; 0xf0
1a00227a:	2107      	movs	r1, #7
1a00227c:	2005      	movs	r0, #5
1a00227e:	f7ff f9db 	bl	1a001638 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(MOTOR1_PWM_1_PORT, MOTOR1_PWM_1_PIN, MD_PLN_FAST | FUNC0);
1a002282:	22f0      	movs	r2, #240	; 0xf0
1a002284:	2105      	movs	r1, #5
1a002286:	2005      	movs	r0, #5
1a002288:	f7ff f9d6 	bl	1a001638 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(MOTOR0_PWM_2_PORT, MOTOR0_PWM_2_PIN, MD_PLN_FAST | FUNC0);
1a00228c:	22f0      	movs	r2, #240	; 0xf0
1a00228e:	2100      	movs	r1, #0
1a002290:	2005      	movs	r0, #5
1a002292:	f7ff f9d1 	bl	1a001638 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(MOTOR1_PWM_2_PORT, MOTOR1_PWM_2_PIN, MD_PLN_FAST | FUNC0);
1a002296:	22f0      	movs	r2, #240	; 0xf0
1a002298:	2106      	movs	r1, #6
1a00229a:	2005      	movs	r0, #5
1a00229c:	f7ff f9cc 	bl	1a001638 <Chip_SCU_PinMuxSet>

	motorDriverEnabled = 0;
1a0022a0:	4b3d      	ldr	r3, [pc, #244]	; (1a002398 <initMotors+0x1d4>)
1a0022a2:	2200      	movs	r2, #0
1a0022a4:	601a      	str	r2, [r3, #0]
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, MOTOR_DRIVER_ENABLE_PORT_GPIO, MOTOR_DRIVER_ENABLE_PIN_GPIO);
1a0022a6:	2205      	movs	r2, #5
1a0022a8:	2100      	movs	r1, #0
1a0022aa:	483a      	ldr	r0, [pc, #232]	; (1a002394 <initMotors+0x1d0>)
1a0022ac:	f7ff f9de 	bl	1a00166c <Chip_GPIO_SetPinDIROutput>
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, MOTOR_DRIVER_ENABLE_PORT_GPIO, MOTOR_DRIVER_ENABLE_PIN_GPIO);
1a0022b0:	2205      	movs	r2, #5
1a0022b2:	2100      	movs	r1, #0
1a0022b4:	4837      	ldr	r0, [pc, #220]	; (1a002394 <initMotors+0x1d0>)
1a0022b6:	f7ff fa33 	bl	1a001720 <Chip_GPIO_SetPinOutLow>
	Chip_SCU_PinMuxSet(MOTOR_DRIVER_ENABLE_PORT, MOTOR_DRIVER_ENABLE_PIN, MD_PLN_FAST | FUNC0);
1a0022ba:	22f0      	movs	r2, #240	; 0xf0
1a0022bc:	2106      	movs	r1, #6
1a0022be:	2006      	movs	r0, #6
1a0022c0:	f7ff f9ba 	bl	1a001638 <Chip_SCU_PinMuxSet>

	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, MOTOR_DRIVER_FAULT_PORT_GPIO, MOTOR_DRIVER_FAULT_PIN_GPIO);
1a0022c4:	220d      	movs	r2, #13
1a0022c6:	2100      	movs	r1, #0
1a0022c8:	4832      	ldr	r0, [pc, #200]	; (1a002394 <initMotors+0x1d0>)
1a0022ca:	f7ff f9ef 	bl	1a0016ac <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(MOTOR_DRIVER_FAULT_PORT, MOTOR_DRIVER_FAULT_PIN, MD_BUK | MD_EZI | FUNC0);
1a0022ce:	2248      	movs	r2, #72	; 0x48
1a0022d0:	2112      	movs	r1, #18
1a0022d2:	2001      	movs	r0, #1
1a0022d4:	f7ff f9b0 	bl	1a001638 <Chip_SCU_PinMuxSet>

	LPC_MCPWM->CON_SET = MCPWM_CON_RUN(MOTOR1_PWM_CHANNEL) | MCPWM_CON_RUN(MOTOR0_PWM_CHANNEL);
1a0022d8:	4b29      	ldr	r3, [pc, #164]	; (1a002380 <initMotors+0x1bc>)
1a0022da:	4a30      	ldr	r2, [pc, #192]	; (1a00239c <initMotors+0x1d8>)
1a0022dc:	605a      	str	r2, [r3, #4]
//Initialize the control structure
	memset(&motor0, 0, sizeof(struct motor_status));
1a0022de:	223c      	movs	r2, #60	; 0x3c
1a0022e0:	2100      	movs	r1, #0
1a0022e2:	482f      	ldr	r0, [pc, #188]	; (1a0023a0 <initMotors+0x1dc>)
1a0022e4:	f012 fcf8 	bl	1a014cd8 <memset>
	memset(&motor1, 0, sizeof(struct motor_status));
1a0022e8:	223c      	movs	r2, #60	; 0x3c
1a0022ea:	2100      	movs	r1, #0
1a0022ec:	482d      	ldr	r0, [pc, #180]	; (1a0023a4 <initMotors+0x1e0>)
1a0022ee:	f012 fcf3 	bl	1a014cd8 <memset>

	motor0.controlMode = DIRECT_MODE;
1a0022f2:	4b2b      	ldr	r3, [pc, #172]	; (1a0023a0 <initMotors+0x1dc>)
1a0022f4:	2201      	movs	r2, #1
1a0022f6:	60da      	str	r2, [r3, #12]
	motor1.controlMode = DIRECT_MODE;
1a0022f8:	4b2a      	ldr	r3, [pc, #168]	; (1a0023a4 <initMotors+0x1e0>)
1a0022fa:	2201      	movs	r2, #1
1a0022fc:	60da      	str	r2, [r3, #12]
#if USE_PUSHBOT
	motor0.velocityPrescaler = 20;
1a0022fe:	4b28      	ldr	r3, [pc, #160]	; (1a0023a0 <initMotors+0x1dc>)
1a002300:	2214      	movs	r2, #20
1a002302:	821a      	strh	r2, [r3, #16]
	motor1.velocityPrescaler = 20;
1a002304:	4b27      	ldr	r3, [pc, #156]	; (1a0023a4 <initMotors+0x1e0>)
1a002306:	2214      	movs	r2, #20
1a002308:	821a      	strh	r2, [r3, #16]
	motor0.proportionalGain = 80;
1a00230a:	4b25      	ldr	r3, [pc, #148]	; (1a0023a0 <initMotors+0x1dc>)
1a00230c:	2250      	movs	r2, #80	; 0x50
1a00230e:	61da      	str	r2, [r3, #28]
	motor1.proportionalGain = 80;
1a002310:	4b24      	ldr	r3, [pc, #144]	; (1a0023a4 <initMotors+0x1e0>)
1a002312:	2250      	movs	r2, #80	; 0x50
1a002314:	61da      	str	r2, [r3, #28]
	motor0.derivativeGain = 0;
1a002316:	4b22      	ldr	r3, [pc, #136]	; (1a0023a0 <initMotors+0x1dc>)
1a002318:	2200      	movs	r2, #0
1a00231a:	625a      	str	r2, [r3, #36]	; 0x24
	motor1.derivativeGain = 0;
1a00231c:	4b21      	ldr	r3, [pc, #132]	; (1a0023a4 <initMotors+0x1e0>)
1a00231e:	2200      	movs	r2, #0
1a002320:	625a      	str	r2, [r3, #36]	; 0x24
	motor0.velocityWindUpGuard = ( LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL] / motor0.proportionalGain) * 20;
1a002322:	4b17      	ldr	r3, [pc, #92]	; (1a002380 <initMotors+0x1bc>)
1a002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002326:	4a1e      	ldr	r2, [pc, #120]	; (1a0023a0 <initMotors+0x1dc>)
1a002328:	69d2      	ldr	r2, [r2, #28]
1a00232a:	fbb3 f2f2 	udiv	r2, r3, r2
1a00232e:	4613      	mov	r3, r2
1a002330:	009b      	lsls	r3, r3, #2
1a002332:	4413      	add	r3, r2
1a002334:	009b      	lsls	r3, r3, #2
1a002336:	461a      	mov	r2, r3
1a002338:	4b19      	ldr	r3, [pc, #100]	; (1a0023a0 <initMotors+0x1dc>)
1a00233a:	631a      	str	r2, [r3, #48]	; 0x30
	motor1.velocityWindUpGuard = ( LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL] / motor1.proportionalGain) * 20;
1a00233c:	4b10      	ldr	r3, [pc, #64]	; (1a002380 <initMotors+0x1bc>)
1a00233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1a002340:	4a18      	ldr	r2, [pc, #96]	; (1a0023a4 <initMotors+0x1e0>)
1a002342:	69d2      	ldr	r2, [r2, #28]
1a002344:	fbb3 f2f2 	udiv	r2, r3, r2
1a002348:	4613      	mov	r3, r2
1a00234a:	009b      	lsls	r3, r3, #2
1a00234c:	4413      	add	r3, r2
1a00234e:	009b      	lsls	r3, r3, #2
1a002350:	461a      	mov	r2, r3
1a002352:	4b14      	ldr	r3, [pc, #80]	; (1a0023a4 <initMotors+0x1e0>)
1a002354:	631a      	str	r2, [r3, #48]	; 0x30
	motor0.controllerWindUpGuard = LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL] / 10;
1a002356:	4b0a      	ldr	r3, [pc, #40]	; (1a002380 <initMotors+0x1bc>)
1a002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00235a:	4a13      	ldr	r2, [pc, #76]	; (1a0023a8 <initMotors+0x1e4>)
1a00235c:	fba2 2303 	umull	r2, r3, r2, r3
1a002360:	08db      	lsrs	r3, r3, #3
1a002362:	461a      	mov	r2, r3
1a002364:	4b0e      	ldr	r3, [pc, #56]	; (1a0023a0 <initMotors+0x1dc>)
1a002366:	635a      	str	r2, [r3, #52]	; 0x34
	motor1.controllerWindUpGuard = LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL] / 10;
1a002368:	4b05      	ldr	r3, [pc, #20]	; (1a002380 <initMotors+0x1bc>)
1a00236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1a00236c:	4a0e      	ldr	r2, [pc, #56]	; (1a0023a8 <initMotors+0x1e4>)
1a00236e:	fba2 2303 	umull	r2, r3, r2, r3
1a002372:	08db      	lsrs	r3, r3, #3
1a002374:	461a      	mov	r2, r3
1a002376:	4b0b      	ldr	r3, [pc, #44]	; (1a0023a4 <initMotors+0x1e0>)
1a002378:	635a      	str	r2, [r3, #52]	; 0x34
#endif
}
1a00237a:	bf00      	nop
1a00237c:	bd80      	pop	{r7, pc}
1a00237e:	bf00      	nop
1a002380:	400a0000 	.word	0x400a0000
1a002384:	00020200 	.word	0x00020200
1a002388:	00040400 	.word	0x00040400
1a00238c:	00080800 	.word	0x00080800
1a002390:	00101000 	.word	0x00101000
1a002394:	400f4000 	.word	0x400f4000
1a002398:	10086528 	.word	0x10086528
1a00239c:	00010100 	.word	0x00010100
1a0023a0:	100874a4 	.word	0x100874a4
1a0023a4:	10087468 	.word	0x10087468
1a0023a8:	cccccccd 	.word	0xcccccccd

1a0023ac <Chip_SCU_PinMuxSet>:
 * @return	Nothing
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a0023ac:	b480      	push	{r7}
1a0023ae:	b083      	sub	sp, #12
1a0023b0:	af00      	add	r7, sp, #0
1a0023b2:	4603      	mov	r3, r0
1a0023b4:	71fb      	strb	r3, [r7, #7]
1a0023b6:	460b      	mov	r3, r1
1a0023b8:	71bb      	strb	r3, [r7, #6]
1a0023ba:	4613      	mov	r3, r2
1a0023bc:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0023be:	4807      	ldr	r0, [pc, #28]	; (1a0023dc <Chip_SCU_PinMuxSet+0x30>)
1a0023c0:	79f9      	ldrb	r1, [r7, #7]
1a0023c2:	79bb      	ldrb	r3, [r7, #6]
1a0023c4:	88ba      	ldrh	r2, [r7, #4]
1a0023c6:	0149      	lsls	r1, r1, #5
1a0023c8:	440b      	add	r3, r1
1a0023ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a0023ce:	bf00      	nop
1a0023d0:	370c      	adds	r7, #12
1a0023d2:	46bd      	mov	sp, r7
1a0023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0023d8:	4770      	bx	lr
1a0023da:	bf00      	nop
1a0023dc:	40086000 	.word	0x40086000

1a0023e0 <Chip_GPIO_ReadPortBit>:
 * @param	pin		: GPIO pin to read
 * @return	true of the GPIO is high, false if low
 * @note	It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
1a0023e0:	b480      	push	{r7}
1a0023e2:	b085      	sub	sp, #20
1a0023e4:	af00      	add	r7, sp, #0
1a0023e6:	60f8      	str	r0, [r7, #12]
1a0023e8:	60b9      	str	r1, [r7, #8]
1a0023ea:	4613      	mov	r3, r2
1a0023ec:	71fb      	strb	r3, [r7, #7]
	return (bool) pGPIO->B[port][pin];
1a0023ee:	79fb      	ldrb	r3, [r7, #7]
1a0023f0:	68f9      	ldr	r1, [r7, #12]
1a0023f2:	68ba      	ldr	r2, [r7, #8]
1a0023f4:	0152      	lsls	r2, r2, #5
1a0023f6:	440a      	add	r2, r1
1a0023f8:	4413      	add	r3, r2
1a0023fa:	781b      	ldrb	r3, [r3, #0]
1a0023fc:	b2db      	uxtb	r3, r3
1a0023fe:	2b00      	cmp	r3, #0
1a002400:	bf14      	ite	ne
1a002402:	2301      	movne	r3, #1
1a002404:	2300      	moveq	r3, #0
1a002406:	b2db      	uxtb	r3, r3
}
1a002408:	4618      	mov	r0, r3
1a00240a:	3714      	adds	r7, #20
1a00240c:	46bd      	mov	sp, r7
1a00240e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002412:	4770      	bx	lr

1a002414 <Chip_GPIO_SetPinDIRInput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a002414:	b480      	push	{r7}
1a002416:	b083      	sub	sp, #12
1a002418:	af00      	add	r7, sp, #0
1a00241a:	6078      	str	r0, [r7, #4]
1a00241c:	460b      	mov	r3, r1
1a00241e:	70fb      	strb	r3, [r7, #3]
1a002420:	4613      	mov	r3, r2
1a002422:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002424:	78fa      	ldrb	r2, [r7, #3]
1a002426:	78f9      	ldrb	r1, [r7, #3]
1a002428:	687b      	ldr	r3, [r7, #4]
1a00242a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a00242e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a002432:	78bb      	ldrb	r3, [r7, #2]
1a002434:	2001      	movs	r0, #1
1a002436:	fa00 f303 	lsl.w	r3, r0, r3
1a00243a:	43db      	mvns	r3, r3
1a00243c:	4019      	ands	r1, r3
1a00243e:	687b      	ldr	r3, [r7, #4]
1a002440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a002448:	bf00      	nop
1a00244a:	370c      	adds	r7, #12
1a00244c:	46bd      	mov	sp, r7
1a00244e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002452:	4770      	bx	lr

1a002454 <fixedpt_str>:
 * be returned, meaning there will be invalid, bogus digits outside the
 * specified precisions.
 */
static inline void
fixedpt_str(fixedpt A, char *str, int max_dec, bool decimal_point)
{
1a002454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002458:	b092      	sub	sp, #72	; 0x48
1a00245a:	af00      	add	r7, sp, #0
1a00245c:	60f8      	str	r0, [r7, #12]
1a00245e:	60b9      	str	r1, [r7, #8]
1a002460:	607a      	str	r2, [r7, #4]
1a002462:	70fb      	strb	r3, [r7, #3]
	int ndec = 0, slen = 0;
1a002464:	2300      	movs	r3, #0
1a002466:	647b      	str	r3, [r7, #68]	; 0x44
1a002468:	2300      	movs	r3, #0
1a00246a:	643b      	str	r3, [r7, #64]	; 0x40
	char tmp[12] = {0};
1a00246c:	f107 0314 	add.w	r3, r7, #20
1a002470:	2200      	movs	r2, #0
1a002472:	601a      	str	r2, [r3, #0]
1a002474:	605a      	str	r2, [r3, #4]
1a002476:	609a      	str	r2, [r3, #8]
	fixedptud fr, ip;
	const fixedptud one = (fixedptud)1 << FIXEDPT_BITS;
1a002478:	f04f 0300 	mov.w	r3, #0
1a00247c:	f04f 0401 	mov.w	r4, #1
1a002480:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	const fixedptud mask = one - 1;
1a002484:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
1a002488:	f113 33ff 	adds.w	r3, r3, #4294967295
1a00248c:	f144 34ff 	adc.w	r4, r4, #4294967295
1a002490:	e9c7 3408 	strd	r3, r4, [r7, #32]

	if (max_dec == -1)
1a002494:	687b      	ldr	r3, [r7, #4]
1a002496:	f1b3 3fff 	cmp.w	r3, #4294967295
1a00249a:	d102      	bne.n	1a0024a2 <fixedpt_str+0x4e>
#if FIXEDPT_BITS == 32
		max_dec = 2;
1a00249c:	2302      	movs	r3, #2
1a00249e:	607b      	str	r3, [r7, #4]
1a0024a0:	e005      	b.n	1a0024ae <fixedpt_str+0x5a>
#elif FIXEDPT_BITS == 64
		max_dec = 10;
#else
#error Invalid width
#endif
	else if (max_dec == -2)
1a0024a2:	687b      	ldr	r3, [r7, #4]
1a0024a4:	f113 0f02 	cmn.w	r3, #2
1a0024a8:	d101      	bne.n	1a0024ae <fixedpt_str+0x5a>
		max_dec = 15;
1a0024aa:	230f      	movs	r3, #15
1a0024ac:	607b      	str	r3, [r7, #4]

	if (A < 0) {
1a0024ae:	68fb      	ldr	r3, [r7, #12]
1a0024b0:	2b00      	cmp	r3, #0
1a0024b2:	da0a      	bge.n	1a0024ca <fixedpt_str+0x76>
		str[slen++] = '-';
1a0024b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a0024b6:	1c5a      	adds	r2, r3, #1
1a0024b8:	643a      	str	r2, [r7, #64]	; 0x40
1a0024ba:	461a      	mov	r2, r3
1a0024bc:	68bb      	ldr	r3, [r7, #8]
1a0024be:	4413      	add	r3, r2
1a0024c0:	222d      	movs	r2, #45	; 0x2d
1a0024c2:	701a      	strb	r2, [r3, #0]
		A *= -1;
1a0024c4:	68fb      	ldr	r3, [r7, #12]
1a0024c6:	425b      	negs	r3, r3
1a0024c8:	60fb      	str	r3, [r7, #12]
	}

	ip = fixedpt_toint(A);
1a0024ca:	68fb      	ldr	r3, [r7, #12]
1a0024cc:	141b      	asrs	r3, r3, #16
1a0024ce:	ea4f 74e3 	mov.w	r4, r3, asr #31
1a0024d2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	do {
		tmp[ndec++] = '0' + ip % 10;
1a0024d6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
1a0024d8:	1c63      	adds	r3, r4, #1
1a0024da:	647b      	str	r3, [r7, #68]	; 0x44
1a0024dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
1a0024e0:	f04f 020a 	mov.w	r2, #10
1a0024e4:	f04f 0300 	mov.w	r3, #0
1a0024e8:	f012 f8e2 	bl	1a0146b0 <__aeabi_uldivmod>
1a0024ec:	b2d3      	uxtb	r3, r2
1a0024ee:	3330      	adds	r3, #48	; 0x30
1a0024f0:	b2da      	uxtb	r2, r3
1a0024f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
1a0024f6:	4423      	add	r3, r4
1a0024f8:	f803 2c34 	strb.w	r2, [r3, #-52]
		ip /= 10;
1a0024fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
1a002500:	f04f 020a 	mov.w	r2, #10
1a002504:	f04f 0300 	mov.w	r3, #0
1a002508:	f012 f8d2 	bl	1a0146b0 <__aeabi_uldivmod>
1a00250c:	4603      	mov	r3, r0
1a00250e:	460c      	mov	r4, r1
1a002510:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	} while (ip != 0);
1a002514:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
1a002518:	4323      	orrs	r3, r4
1a00251a:	d1dc      	bne.n	1a0024d6 <fixedpt_str+0x82>

	while (ndec > 0)
1a00251c:	e00e      	b.n	1a00253c <fixedpt_str+0xe8>
		str[slen++] = tmp[--ndec];
1a00251e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a002520:	1c5a      	adds	r2, r3, #1
1a002522:	643a      	str	r2, [r7, #64]	; 0x40
1a002524:	461a      	mov	r2, r3
1a002526:	68bb      	ldr	r3, [r7, #8]
1a002528:	4413      	add	r3, r2
1a00252a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1a00252c:	3a01      	subs	r2, #1
1a00252e:	647a      	str	r2, [r7, #68]	; 0x44
1a002530:	f107 0114 	add.w	r1, r7, #20
1a002534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1a002536:	440a      	add	r2, r1
1a002538:	7812      	ldrb	r2, [r2, #0]
1a00253a:	701a      	strb	r2, [r3, #0]
	do {
		tmp[ndec++] = '0' + ip % 10;
		ip /= 10;
	} while (ip != 0);

	while (ndec > 0)
1a00253c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a00253e:	2b00      	cmp	r3, #0
1a002540:	dced      	bgt.n	1a00251e <fixedpt_str+0xca>
		str[slen++] = tmp[--ndec];
	if (decimal_point)
1a002542:	78fb      	ldrb	r3, [r7, #3]
1a002544:	2b00      	cmp	r3, #0
1a002546:	d007      	beq.n	1a002558 <fixedpt_str+0x104>
	str[slen++] = '.';
1a002548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a00254a:	1c5a      	adds	r2, r3, #1
1a00254c:	643a      	str	r2, [r7, #64]	; 0x40
1a00254e:	461a      	mov	r2, r3
1a002550:	68bb      	ldr	r3, [r7, #8]
1a002552:	4413      	add	r3, r2
1a002554:	222e      	movs	r2, #46	; 0x2e
1a002556:	701a      	strb	r2, [r3, #0]

	fr = (fixedpt_fracpart(A) << FIXEDPT_WBITS) & mask;
1a002558:	68fb      	ldr	r3, [r7, #12]
1a00255a:	041b      	lsls	r3, r3, #16
1a00255c:	4619      	mov	r1, r3
1a00255e:	ea4f 72e1 	mov.w	r2, r1, asr #31
1a002562:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
1a002566:	ea03 0301 	and.w	r3, r3, r1
1a00256a:	ea04 0402 	and.w	r4, r4, r2
1a00256e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	do {
		fr = (fr & mask) * 10;
1a002572:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
1a002576:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
1a00257a:	ea03 0301 	and.w	r3, r3, r1
1a00257e:	ea04 0402 	and.w	r4, r4, r2
1a002582:	18db      	adds	r3, r3, r3
1a002584:	eb44 0404 	adc.w	r4, r4, r4
1a002588:	00a6      	lsls	r6, r4, #2
1a00258a:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
1a00258e:	009d      	lsls	r5, r3, #2
1a002590:	195b      	adds	r3, r3, r5
1a002592:	eb44 0406 	adc.w	r4, r4, r6
1a002596:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

		str[slen++] = '0' + (fr >> FIXEDPT_BITS) % 10;
1a00259a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a00259c:	1c5a      	adds	r2, r3, #1
1a00259e:	643a      	str	r2, [r7, #64]	; 0x40
1a0025a0:	461a      	mov	r2, r3
1a0025a2:	68bb      	ldr	r3, [r7, #8]
1a0025a4:	eb03 0a02 	add.w	sl, r3, r2
1a0025a8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
1a0025ac:	46a0      	mov	r8, r4
1a0025ae:	f04f 0900 	mov.w	r9, #0
1a0025b2:	f04f 020a 	mov.w	r2, #10
1a0025b6:	f04f 0300 	mov.w	r3, #0
1a0025ba:	4640      	mov	r0, r8
1a0025bc:	4649      	mov	r1, r9
1a0025be:	f012 f877 	bl	1a0146b0 <__aeabi_uldivmod>
1a0025c2:	461c      	mov	r4, r3
1a0025c4:	4613      	mov	r3, r2
1a0025c6:	b2db      	uxtb	r3, r3
1a0025c8:	3330      	adds	r3, #48	; 0x30
1a0025ca:	b2db      	uxtb	r3, r3
1a0025cc:	f88a 3000 	strb.w	r3, [sl]
		ndec++;
1a0025d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a0025d2:	3301      	adds	r3, #1
1a0025d4:	647b      	str	r3, [r7, #68]	; 0x44
	} while (fr != 0 && ndec < max_dec);
1a0025d6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
1a0025da:	4323      	orrs	r3, r4
1a0025dc:	d003      	beq.n	1a0025e6 <fixedpt_str+0x192>
1a0025de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1a0025e0:	687b      	ldr	r3, [r7, #4]
1a0025e2:	429a      	cmp	r2, r3
1a0025e4:	dbc5      	blt.n	1a002572 <fixedpt_str+0x11e>

	if (ndec > 1 && str[slen-1] == '0')
1a0025e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a0025e8:	2b01      	cmp	r3, #1
1a0025ea:	dd0d      	ble.n	1a002608 <fixedpt_str+0x1b4>
1a0025ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a0025ee:	3b01      	subs	r3, #1
1a0025f0:	68ba      	ldr	r2, [r7, #8]
1a0025f2:	4413      	add	r3, r2
1a0025f4:	781b      	ldrb	r3, [r3, #0]
1a0025f6:	2b30      	cmp	r3, #48	; 0x30
1a0025f8:	d106      	bne.n	1a002608 <fixedpt_str+0x1b4>
		str[slen-1] = '\0'; /* cut off trailing 0 */
1a0025fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a0025fc:	3b01      	subs	r3, #1
1a0025fe:	68ba      	ldr	r2, [r7, #8]
1a002600:	4413      	add	r3, r2
1a002602:	2200      	movs	r2, #0
1a002604:	701a      	strb	r2, [r3, #0]
1a002606:	e004      	b.n	1a002612 <fixedpt_str+0x1be>
	else
		str[slen] = '\0';
1a002608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a00260a:	68ba      	ldr	r2, [r7, #8]
1a00260c:	4413      	add	r3, r2
1a00260e:	2200      	movs	r2, #0
1a002610:	701a      	strb	r2, [r3, #0]
}
1a002612:	bf00      	nop
1a002614:	3748      	adds	r7, #72	; 0x48
1a002616:	46bd      	mov	sp, r7
1a002618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

1a00261c <fixedpt_cstr>:

/* Converts the given fixedpt number into a string, using a static
 * (non-threadsafe) string buffer */
static inline char*
fixedpt_cstr(const fixedpt A, const int max_dec,const bool decimal_point )
{
1a00261c:	b580      	push	{r7, lr}
1a00261e:	b084      	sub	sp, #16
1a002620:	af00      	add	r7, sp, #0
1a002622:	60f8      	str	r0, [r7, #12]
1a002624:	60b9      	str	r1, [r7, #8]
1a002626:	4613      	mov	r3, r2
1a002628:	71fb      	strb	r3, [r7, #7]
	static char str[25];

	fixedpt_str(A, str, max_dec, decimal_point);
1a00262a:	79fb      	ldrb	r3, [r7, #7]
1a00262c:	68ba      	ldr	r2, [r7, #8]
1a00262e:	4904      	ldr	r1, [pc, #16]	; (1a002640 <fixedpt_cstr+0x24>)
1a002630:	68f8      	ldr	r0, [r7, #12]
1a002632:	f7ff ff0f 	bl	1a002454 <fixedpt_str>
	return (str);
1a002636:	4b02      	ldr	r3, [pc, #8]	; (1a002640 <fixedpt_cstr+0x24>)
}
1a002638:	4618      	mov	r0, r3
1a00263a:	3710      	adds	r7, #16
1a00263c:	46bd      	mov	sp, r7
1a00263e:	bd80      	pop	{r7, pc}
1a002640:	10086560 	.word	0x10086560

1a002644 <printLongHexData>:

static struct platform_data_s compass_pdata = { .orientation = { 0, 1, 0, 1, 0, 0, 0, 0, -1 } };

#define MAX_NUMBER_STRING_SIZE 32

static void printLongHexData(long *data, int length) {
1a002644:	b580      	push	{r7, lr}
1a002646:	b084      	sub	sp, #16
1a002648:	af00      	add	r7, sp, #0
1a00264a:	6078      	str	r0, [r7, #4]
1a00264c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; ++i) {
1a00264e:	2300      	movs	r3, #0
1a002650:	60fb      	str	r3, [r7, #12]
1a002652:	e00b      	b.n	1a00266c <printLongHexData+0x28>
		xprintf(" %X", data[i]);
1a002654:	68fb      	ldr	r3, [r7, #12]
1a002656:	009b      	lsls	r3, r3, #2
1a002658:	687a      	ldr	r2, [r7, #4]
1a00265a:	4413      	add	r3, r2
1a00265c:	681b      	ldr	r3, [r3, #0]
1a00265e:	4619      	mov	r1, r3
1a002660:	4806      	ldr	r0, [pc, #24]	; (1a00267c <printLongHexData+0x38>)
1a002662:	f004 fa8b 	bl	1a006b7c <xprintf>
static struct platform_data_s compass_pdata = { .orientation = { 0, 1, 0, 1, 0, 0, 0, 0, -1 } };

#define MAX_NUMBER_STRING_SIZE 32

static void printLongHexData(long *data, int length) {
	for (int i = 0; i < length; ++i) {
1a002666:	68fb      	ldr	r3, [r7, #12]
1a002668:	3301      	adds	r3, #1
1a00266a:	60fb      	str	r3, [r7, #12]
1a00266c:	68fa      	ldr	r2, [r7, #12]
1a00266e:	683b      	ldr	r3, [r7, #0]
1a002670:	429a      	cmp	r2, r3
1a002672:	dbef      	blt.n	1a002654 <printLongHexData+0x10>
		xprintf(" %X", data[i]);
	}
}
1a002674:	bf00      	nop
1a002676:	3710      	adds	r7, #16
1a002678:	46bd      	mov	sp, r7
1a00267a:	bd80      	pop	{r7, pc}
1a00267c:	1a0187bc 	.word	0x1a0187bc

1a002680 <printShortData>:

static void printShortData(short *data, int length) {
1a002680:	b580      	push	{r7, lr}
1a002682:	b084      	sub	sp, #16
1a002684:	af00      	add	r7, sp, #0
1a002686:	6078      	str	r0, [r7, #4]
1a002688:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; ++i) {
1a00268a:	2300      	movs	r3, #0
1a00268c:	60fb      	str	r3, [r7, #12]
1a00268e:	e00c      	b.n	1a0026aa <printShortData+0x2a>
		xprintf(" %d", data[i]);
1a002690:	68fb      	ldr	r3, [r7, #12]
1a002692:	005b      	lsls	r3, r3, #1
1a002694:	687a      	ldr	r2, [r7, #4]
1a002696:	4413      	add	r3, r2
1a002698:	881b      	ldrh	r3, [r3, #0]
1a00269a:	b21b      	sxth	r3, r3
1a00269c:	4619      	mov	r1, r3
1a00269e:	4807      	ldr	r0, [pc, #28]	; (1a0026bc <printShortData+0x3c>)
1a0026a0:	f004 fa6c 	bl	1a006b7c <xprintf>
		xprintf(" %X", data[i]);
	}
}

static void printShortData(short *data, int length) {
	for (int i = 0; i < length; ++i) {
1a0026a4:	68fb      	ldr	r3, [r7, #12]
1a0026a6:	3301      	adds	r3, #1
1a0026a8:	60fb      	str	r3, [r7, #12]
1a0026aa:	68fa      	ldr	r2, [r7, #12]
1a0026ac:	683b      	ldr	r3, [r7, #0]
1a0026ae:	429a      	cmp	r2, r3
1a0026b0:	dbee      	blt.n	1a002690 <printShortData+0x10>
		xprintf(" %d", data[i]);
	}
}
1a0026b2:	bf00      	nop
1a0026b4:	3710      	adds	r7, #16
1a0026b6:	46bd      	mov	sp, r7
1a0026b8:	bd80      	pop	{r7, pc}
1a0026ba:	bf00      	nop
1a0026bc:	1a0187c0 	.word	0x1a0187c0

1a0026c0 <readFromMpl>:
};

/* ---------------------------------------------------------------------------*/
/* Get data from MPL.
 */
static void readFromMpl(uint8_t sensorId) {
1a0026c0:	b580      	push	{r7, lr}
1a0026c2:	b092      	sub	sp, #72	; 0x48
1a0026c4:	af00      	add	r7, sp, #0
1a0026c6:	4603      	mov	r3, r0
1a0026c8:	71fb      	strb	r3, [r7, #7]
	long data[9];
	int8_t accuracy;
	inv_time_t timestamp;

	xprintf("-S%d", sensorId);
1a0026ca:	79fb      	ldrb	r3, [r7, #7]
1a0026cc:	4619      	mov	r1, r3
1a0026ce:	487d      	ldr	r0, [pc, #500]	; (1a0028c4 <readFromMpl+0x204>)
1a0026d0:	f004 fa54 	bl	1a006b7c <xprintf>
	switch (sensorId) {
1a0026d4:	79fb      	ldrb	r3, [r7, #7]
1a0026d6:	3b07      	subs	r3, #7
1a0026d8:	2b0b      	cmp	r3, #11
1a0026da:	f200 80ef 	bhi.w	1a0028bc <readFromMpl+0x1fc>
1a0026de:	a201      	add	r2, pc, #4	; (adr r2, 1a0026e4 <readFromMpl+0x24>)
1a0026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0026e4:	1a002715 	.word	0x1a002715
1a0026e8:	1a002725 	.word	0x1a002725
1a0026ec:	1a002735 	.word	0x1a002735
1a0026f0:	1a002745 	.word	0x1a002745
1a0026f4:	1a00276f 	.word	0x1a00276f
1a0026f8:	1a002795 	.word	0x1a002795
1a0026fc:	1a0027bb 	.word	0x1a0027bb
1a002700:	1a0027e1 	.word	0x1a0027e1
1a002704:	1a002807 	.word	0x1a002807
1a002708:	1a00282d 	.word	0x1a00282d
1a00270c:	1a00284b 	.word	0x1a00284b
1a002710:	1a00289f 	.word	0x1a00289f
	case RAW_GYRO: {
		printShortData(gyrometer_data, 3);
1a002714:	2103      	movs	r1, #3
1a002716:	486c      	ldr	r0, [pc, #432]	; (1a0028c8 <readFromMpl+0x208>)
1a002718:	f7ff ffb2 	bl	1a002680 <printShortData>
		xputc('\n');
1a00271c:	200a      	movs	r0, #10
1a00271e:	f004 f87b 	bl	1a006818 <xputc>
		break;
1a002722:	e0cb      	b.n	1a0028bc <readFromMpl+0x1fc>
	}
	case RAW_ACCEL: {
		printShortData(accelerometer_data, 3);
1a002724:	2103      	movs	r1, #3
1a002726:	4869      	ldr	r0, [pc, #420]	; (1a0028cc <readFromMpl+0x20c>)
1a002728:	f7ff ffaa 	bl	1a002680 <printShortData>
		xputc('\n');
1a00272c:	200a      	movs	r0, #10
1a00272e:	f004 f873 	bl	1a006818 <xputc>
		break;
1a002732:	e0c3      	b.n	1a0028bc <readFromMpl+0x1fc>
	}
	case RAW_COMPASS: {
		printShortData(magnometer_data, 3);
1a002734:	2103      	movs	r1, #3
1a002736:	4866      	ldr	r0, [pc, #408]	; (1a0028d0 <readFromMpl+0x210>)
1a002738:	f7ff ffa2 	bl	1a002680 <printShortData>
		xputc('\n');
1a00273c:	200a      	movs	r0, #10
1a00273e:	f004 f86b 	bl	1a006818 <xputc>
		break;
1a002742:	e0bb      	b.n	1a0028bc <readFromMpl+0x1fc>
	}
	case CAL_GYRO: {
		inv_get_sensor_type_gyro(data, &accuracy, &timestamp);
1a002744:	f107 0218 	add.w	r2, r7, #24
1a002748:	f107 011f 	add.w	r1, r7, #31
1a00274c:	f107 0320 	add.w	r3, r7, #32
1a002750:	4618      	mov	r0, r3
1a002752:	f006 fd1d 	bl	1a009190 <inv_get_sensor_type_gyro>
		printLongHexData(data, 3);
1a002756:	f107 0320 	add.w	r3, r7, #32
1a00275a:	2103      	movs	r1, #3
1a00275c:	4618      	mov	r0, r3
1a00275e:	f7ff ff71 	bl	1a002644 <printLongHexData>
		xprintf(" %d\n", timestamp);
1a002762:	69bb      	ldr	r3, [r7, #24]
1a002764:	4619      	mov	r1, r3
1a002766:	485b      	ldr	r0, [pc, #364]	; (1a0028d4 <readFromMpl+0x214>)
1a002768:	f004 fa08 	bl	1a006b7c <xprintf>
		break;
1a00276c:	e0a6      	b.n	1a0028bc <readFromMpl+0x1fc>
	}
	case CAL_ACCEL: {
		inv_get_sensor_type_accel(data, &accuracy, &timestamp);
1a00276e:	f107 0218 	add.w	r2, r7, #24
1a002772:	f107 011f 	add.w	r1, r7, #31
1a002776:	f107 0320 	add.w	r3, r7, #32
1a00277a:	4618      	mov	r0, r3
1a00277c:	f006 fcee 	bl	1a00915c <inv_get_sensor_type_accel>
		printLongHexData(data, 3);
1a002780:	f107 0320 	add.w	r3, r7, #32
1a002784:	2103      	movs	r1, #3
1a002786:	4618      	mov	r0, r3
1a002788:	f7ff ff5c 	bl	1a002644 <printLongHexData>
		xputc('\n');
1a00278c:	200a      	movs	r0, #10
1a00278e:	f004 f843 	bl	1a006818 <xputc>
		break;
1a002792:	e093      	b.n	1a0028bc <readFromMpl+0x1fc>
	}
	case CAL_COMPASS: {
		inv_get_sensor_type_compass(data, &accuracy, &timestamp);
1a002794:	f107 0218 	add.w	r2, r7, #24
1a002798:	f107 011f 	add.w	r1, r7, #31
1a00279c:	f107 0320 	add.w	r3, r7, #32
1a0027a0:	4618      	mov	r0, r3
1a0027a2:	f006 fd0f 	bl	1a0091c4 <inv_get_sensor_type_compass>
		printLongHexData(data, 3);
1a0027a6:	f107 0320 	add.w	r3, r7, #32
1a0027aa:	2103      	movs	r1, #3
1a0027ac:	4618      	mov	r0, r3
1a0027ae:	f7ff ff49 	bl	1a002644 <printLongHexData>
		xputc('\n');
1a0027b2:	200a      	movs	r0, #10
1a0027b4:	f004 f830 	bl	1a006818 <xputc>
		break;
1a0027b8:	e080      	b.n	1a0028bc <readFromMpl+0x1fc>
	}
	case QUARTERNION: {
		inv_get_sensor_type_quat(data, &accuracy, &timestamp);
1a0027ba:	f107 0218 	add.w	r2, r7, #24
1a0027be:	f107 011f 	add.w	r1, r7, #31
1a0027c2:	f107 0320 	add.w	r3, r7, #32
1a0027c6:	4618      	mov	r0, r3
1a0027c8:	f006 fd16 	bl	1a0091f8 <inv_get_sensor_type_quat>
		printLongHexData(data, 4);
1a0027cc:	f107 0320 	add.w	r3, r7, #32
1a0027d0:	2104      	movs	r1, #4
1a0027d2:	4618      	mov	r0, r3
1a0027d4:	f7ff ff36 	bl	1a002644 <printLongHexData>
		xputc('\n');
1a0027d8:	200a      	movs	r0, #10
1a0027da:	f004 f81d 	bl	1a006818 <xputc>
		break;
1a0027de:	e06d      	b.n	1a0028bc <readFromMpl+0x1fc>
	}
	case EULER_ANGLES: {
		inv_get_sensor_type_euler(data, &accuracy, &timestamp);
1a0027e0:	f107 0218 	add.w	r2, r7, #24
1a0027e4:	f107 011f 	add.w	r1, r7, #31
1a0027e8:	f107 0320 	add.w	r3, r7, #32
1a0027ec:	4618      	mov	r0, r3
1a0027ee:	f006 fda3 	bl	1a009338 <inv_get_sensor_type_euler>
		printLongHexData(data, 4);
1a0027f2:	f107 0320 	add.w	r3, r7, #32
1a0027f6:	2104      	movs	r1, #4
1a0027f8:	4618      	mov	r0, r3
1a0027fa:	f7ff ff23 	bl	1a002644 <printLongHexData>
		xputc('\n');
1a0027fe:	200a      	movs	r0, #10
1a002800:	f004 f80a 	bl	1a006818 <xputc>
		break;
1a002804:	e05a      	b.n	1a0028bc <readFromMpl+0x1fc>
	}
	case ROTATION_MATRIX: {
		inv_get_sensor_type_rot_mat(data, &accuracy, &timestamp);
1a002806:	f107 0218 	add.w	r2, r7, #24
1a00280a:	f107 011f 	add.w	r1, r7, #31
1a00280e:	f107 0320 	add.w	r3, r7, #32
1a002812:	4618      	mov	r0, r3
1a002814:	f006 ff10 	bl	1a009638 <inv_get_sensor_type_rot_mat>
		printLongHexData(data, 9);
1a002818:	f107 0320 	add.w	r3, r7, #32
1a00281c:	2109      	movs	r1, #9
1a00281e:	4618      	mov	r0, r3
1a002820:	f7ff ff10 	bl	1a002644 <printLongHexData>
		xputc('\n');
1a002824:	200a      	movs	r0, #10
1a002826:	f003 fff7 	bl	1a006818 <xputc>
		break;
1a00282a:	e047      	b.n	1a0028bc <readFromMpl+0x1fc>
	}
	case HEADING: {
		inv_get_sensor_type_heading(data, &accuracy, &timestamp);
1a00282c:	f107 0218 	add.w	r2, r7, #24
1a002830:	f107 011f 	add.w	r1, r7, #31
1a002834:	f107 0320 	add.w	r3, r7, #32
1a002838:	4618      	mov	r0, r3
1a00283a:	f006 fcf9 	bl	1a009230 <inv_get_sensor_type_heading>
		xprintf(" %X\n", data[0]);
1a00283e:	6a3b      	ldr	r3, [r7, #32]
1a002840:	4619      	mov	r1, r3
1a002842:	4825      	ldr	r0, [pc, #148]	; (1a0028d8 <readFromMpl+0x218>)
1a002844:	f004 f99a 	bl	1a006b7c <xprintf>
		break;
1a002848:	e038      	b.n	1a0028bc <readFromMpl+0x1fc>
	}
	case LINEAR_ACCEL: {
		float float_data[3] = { 0 };
1a00284a:	f107 030c 	add.w	r3, r7, #12
1a00284e:	2200      	movs	r2, #0
1a002850:	601a      	str	r2, [r3, #0]
1a002852:	605a      	str	r2, [r3, #4]
1a002854:	609a      	str	r2, [r3, #8]
		inv_get_sensor_type_linear_acceleration(float_data, &accuracy, &timestamp);
1a002856:	f107 0218 	add.w	r2, r7, #24
1a00285a:	f107 011f 	add.w	r1, r7, #31
1a00285e:	f107 030c 	add.w	r3, r7, #12
1a002862:	4618      	mov	r0, r3
1a002864:	f005 f906 	bl	1a007a74 <inv_get_sensor_type_linear_acceleration>
		union ufloat converter;
		for (int i = 0; i < 3; ++i) {
1a002868:	2300      	movs	r3, #0
1a00286a:	647b      	str	r3, [r7, #68]	; 0x44
1a00286c:	e00f      	b.n	1a00288e <readFromMpl+0x1ce>
			converter.f = float_data[i];
1a00286e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a002870:	009b      	lsls	r3, r3, #2
1a002872:	f107 0248 	add.w	r2, r7, #72	; 0x48
1a002876:	4413      	add	r3, r2
1a002878:	3b3c      	subs	r3, #60	; 0x3c
1a00287a:	681b      	ldr	r3, [r3, #0]
1a00287c:	60bb      	str	r3, [r7, #8]
			xprintf(" %X", converter.u);
1a00287e:	68bb      	ldr	r3, [r7, #8]
1a002880:	4619      	mov	r1, r3
1a002882:	4816      	ldr	r0, [pc, #88]	; (1a0028dc <readFromMpl+0x21c>)
1a002884:	f004 f97a 	bl	1a006b7c <xprintf>
	}
	case LINEAR_ACCEL: {
		float float_data[3] = { 0 };
		inv_get_sensor_type_linear_acceleration(float_data, &accuracy, &timestamp);
		union ufloat converter;
		for (int i = 0; i < 3; ++i) {
1a002888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a00288a:	3301      	adds	r3, #1
1a00288c:	647b      	str	r3, [r7, #68]	; 0x44
1a00288e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a002890:	2b02      	cmp	r3, #2
1a002892:	ddec      	ble.n	1a00286e <readFromMpl+0x1ae>
			converter.f = float_data[i];
			xprintf(" %X", converter.u);
		}
		xputc('\n');
1a002894:	200a      	movs	r0, #10
1a002896:	f003 ffbf 	bl	1a006818 <xputc>
		break;
1a00289a:	bf00      	nop
1a00289c:	e00e      	b.n	1a0028bc <readFromMpl+0x1fc>
	}
	case STATUS: {
		xprintf(" %s %d\n", fixedpt_cstr(temperature, 3, false), sensor_timestamp);
1a00289e:	4b10      	ldr	r3, [pc, #64]	; (1a0028e0 <readFromMpl+0x220>)
1a0028a0:	681b      	ldr	r3, [r3, #0]
1a0028a2:	2200      	movs	r2, #0
1a0028a4:	2103      	movs	r1, #3
1a0028a6:	4618      	mov	r0, r3
1a0028a8:	f7ff feb8 	bl	1a00261c <fixedpt_cstr>
1a0028ac:	4601      	mov	r1, r0
1a0028ae:	4b0d      	ldr	r3, [pc, #52]	; (1a0028e4 <readFromMpl+0x224>)
1a0028b0:	681b      	ldr	r3, [r3, #0]
1a0028b2:	461a      	mov	r2, r3
1a0028b4:	480c      	ldr	r0, [pc, #48]	; (1a0028e8 <readFromMpl+0x228>)
1a0028b6:	f004 f961 	bl	1a006b7c <xprintf>
		break;
1a0028ba:	bf00      	nop
	}
	}
}
1a0028bc:	bf00      	nop
1a0028be:	3748      	adds	r7, #72	; 0x48
1a0028c0:	46bd      	mov	sp, r7
1a0028c2:	bd80      	pop	{r7, pc}
1a0028c4:	1a0187c4 	.word	0x1a0187c4
1a0028c8:	10086530 	.word	0x10086530
1a0028cc:	10086538 	.word	0x10086538
1a0028d0:	10086540 	.word	0x10086540
1a0028d4:	1a0187cc 	.word	0x1a0187cc
1a0028d8:	1a0187d4 	.word	0x1a0187d4
1a0028dc:	1a0187bc 	.word	0x1a0187bc
1a0028e0:	1008652c 	.word	0x1008652c
1a0028e4:	10086558 	.word	0x10086558
1a0028e8:	1a0187dc 	.word	0x1a0187dc

1a0028ec <RawGyroReport>:

void RawGyroReport() {
1a0028ec:	b580      	push	{r7, lr}
1a0028ee:	af00      	add	r7, sp, #0
	readFromMpl(RAW_GYRO);
1a0028f0:	2007      	movs	r0, #7
1a0028f2:	f7ff fee5 	bl	1a0026c0 <readFromMpl>
}
1a0028f6:	bf00      	nop
1a0028f8:	bd80      	pop	{r7, pc}
1a0028fa:	bf00      	nop

1a0028fc <RawAccelerometerReport>:
void RawAccelerometerReport() {
1a0028fc:	b580      	push	{r7, lr}
1a0028fe:	af00      	add	r7, sp, #0
	readFromMpl(RAW_ACCEL);
1a002900:	2008      	movs	r0, #8
1a002902:	f7ff fedd 	bl	1a0026c0 <readFromMpl>

}
1a002906:	bf00      	nop
1a002908:	bd80      	pop	{r7, pc}
1a00290a:	bf00      	nop

1a00290c <RawCompassReport>:
void RawCompassReport() {
1a00290c:	b580      	push	{r7, lr}
1a00290e:	af00      	add	r7, sp, #0
	readFromMpl(RAW_COMPASS);
1a002910:	2009      	movs	r0, #9
1a002912:	f7ff fed5 	bl	1a0026c0 <readFromMpl>
}
1a002916:	bf00      	nop
1a002918:	bd80      	pop	{r7, pc}
1a00291a:	bf00      	nop

1a00291c <CalGyroReport>:

void CalGyroReport() {
1a00291c:	b580      	push	{r7, lr}
1a00291e:	af00      	add	r7, sp, #0
	readFromMpl(CAL_GYRO);
1a002920:	200a      	movs	r0, #10
1a002922:	f7ff fecd 	bl	1a0026c0 <readFromMpl>
}
1a002926:	bf00      	nop
1a002928:	bd80      	pop	{r7, pc}
1a00292a:	bf00      	nop

1a00292c <CalAccelerometerReport>:

void CalAccelerometerReport() {
1a00292c:	b580      	push	{r7, lr}
1a00292e:	af00      	add	r7, sp, #0
	readFromMpl(CAL_ACCEL);
1a002930:	200b      	movs	r0, #11
1a002932:	f7ff fec5 	bl	1a0026c0 <readFromMpl>
}
1a002936:	bf00      	nop
1a002938:	bd80      	pop	{r7, pc}
1a00293a:	bf00      	nop

1a00293c <CalCompassReport>:

void CalCompassReport() {
1a00293c:	b580      	push	{r7, lr}
1a00293e:	af00      	add	r7, sp, #0
	readFromMpl(CAL_COMPASS);
1a002940:	200c      	movs	r0, #12
1a002942:	f7ff febd 	bl	1a0026c0 <readFromMpl>
}
1a002946:	bf00      	nop
1a002948:	bd80      	pop	{r7, pc}
1a00294a:	bf00      	nop

1a00294c <IMUStatusReport>:
void IMUStatusReport() {
1a00294c:	b580      	push	{r7, lr}
1a00294e:	af00      	add	r7, sp, #0
	readFromMpl(STATUS);
1a002950:	2012      	movs	r0, #18
1a002952:	f7ff feb5 	bl	1a0026c0 <readFromMpl>
}
1a002956:	bf00      	nop
1a002958:	bd80      	pop	{r7, pc}
1a00295a:	bf00      	nop

1a00295c <QuaternionReport>:

void QuaternionReport() {
1a00295c:	b580      	push	{r7, lr}
1a00295e:	af00      	add	r7, sp, #0
	readFromMpl(QUARTERNION);
1a002960:	200d      	movs	r0, #13
1a002962:	f7ff fead 	bl	1a0026c0 <readFromMpl>
}
1a002966:	bf00      	nop
1a002968:	bd80      	pop	{r7, pc}
1a00296a:	bf00      	nop

1a00296c <EulerAnglesReport>:

void EulerAnglesReport() {
1a00296c:	b580      	push	{r7, lr}
1a00296e:	af00      	add	r7, sp, #0
	readFromMpl(EULER_ANGLES);
1a002970:	200e      	movs	r0, #14
1a002972:	f7ff fea5 	bl	1a0026c0 <readFromMpl>
}
1a002976:	bf00      	nop
1a002978:	bd80      	pop	{r7, pc}
1a00297a:	bf00      	nop

1a00297c <RotationMatrixReport>:

void RotationMatrixReport() {
1a00297c:	b580      	push	{r7, lr}
1a00297e:	af00      	add	r7, sp, #0
	readFromMpl(ROTATION_MATRIX);
1a002980:	200f      	movs	r0, #15
1a002982:	f7ff fe9d 	bl	1a0026c0 <readFromMpl>
}
1a002986:	bf00      	nop
1a002988:	bd80      	pop	{r7, pc}
1a00298a:	bf00      	nop

1a00298c <HeadingReport>:

void HeadingReport() {
1a00298c:	b580      	push	{r7, lr}
1a00298e:	af00      	add	r7, sp, #0
	readFromMpl(HEADING);
1a002990:	2010      	movs	r0, #16
1a002992:	f7ff fe95 	bl	1a0026c0 <readFromMpl>
}
1a002996:	bf00      	nop
1a002998:	bd80      	pop	{r7, pc}
1a00299a:	bf00      	nop

1a00299c <LinearAccelReport>:

void LinearAccelReport() {
1a00299c:	b580      	push	{r7, lr}
1a00299e:	af00      	add	r7, sp, #0
	readFromMpl(LINEAR_ACCEL);
1a0029a0:	2011      	movs	r0, #17
1a0029a2:	f7ff fe8d 	bl	1a0026c0 <readFromMpl>
}
1a0029a6:	bf00      	nop
1a0029a8:	bd80      	pop	{r7, pc}
1a0029aa:	bf00      	nop

1a0029ac <updateIMUData>:

void updateIMUData() {
1a0029ac:	b580      	push	{r7, lr}
1a0029ae:	b088      	sub	sp, #32
1a0029b0:	af02      	add	r7, sp, #8

	short sensors;
	unsigned char more;
	if (mpuEnabled && Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, MPU_INT_GND_PORT_GPIO, MPU_INT_GND_PIN_GPIO)) {
1a0029b2:	4b3a      	ldr	r3, [pc, #232]	; (1a002a9c <updateIMUData+0xf0>)
1a0029b4:	781b      	ldrb	r3, [r3, #0]
1a0029b6:	2b00      	cmp	r3, #0
1a0029b8:	d06d      	beq.n	1a002a96 <updateIMUData+0xea>
1a0029ba:	2208      	movs	r2, #8
1a0029bc:	2105      	movs	r1, #5
1a0029be:	4838      	ldr	r0, [pc, #224]	; (1a002aa0 <updateIMUData+0xf4>)
1a0029c0:	f7ff fd0e 	bl	1a0023e0 <Chip_GPIO_ReadPortBit>
1a0029c4:	4603      	mov	r3, r0
1a0029c6:	2b00      	cmp	r3, #0
1a0029c8:	d065      	beq.n	1a002a96 <updateIMUData+0xea>
		if (dmp_read_fifo(gyrometer_data, accelerometer_data, quaternion, &sensor_timestamp, &sensors, &more)) {
1a0029ca:	f107 030d 	add.w	r3, r7, #13
1a0029ce:	9301      	str	r3, [sp, #4]
1a0029d0:	f107 030e 	add.w	r3, r7, #14
1a0029d4:	9300      	str	r3, [sp, #0]
1a0029d6:	4b33      	ldr	r3, [pc, #204]	; (1a002aa4 <updateIMUData+0xf8>)
1a0029d8:	4a33      	ldr	r2, [pc, #204]	; (1a002aa8 <updateIMUData+0xfc>)
1a0029da:	4934      	ldr	r1, [pc, #208]	; (1a002aac <updateIMUData+0x100>)
1a0029dc:	4834      	ldr	r0, [pc, #208]	; (1a002ab0 <updateIMUData+0x104>)
1a0029de:	f009 f80b 	bl	1a00b9f8 <dmp_read_fifo>
1a0029e2:	4603      	mov	r3, r0
1a0029e4:	2b00      	cmp	r3, #0
1a0029e6:	d156      	bne.n	1a002a96 <updateIMUData+0xea>
			return;
		}
		/* Push the new data to the MPL. */
		inv_build_gyro(gyrometer_data, sensor_timestamp);
1a0029e8:	4b2e      	ldr	r3, [pc, #184]	; (1a002aa4 <updateIMUData+0xf8>)
1a0029ea:	681b      	ldr	r3, [r3, #0]
1a0029ec:	4619      	mov	r1, r3
1a0029ee:	4830      	ldr	r0, [pc, #192]	; (1a002ab0 <updateIMUData+0x104>)
1a0029f0:	f004 fc44 	bl	1a00727c <inv_build_gyro>
		mpu_get_temperature(&temperature, &sensor_timestamp);
1a0029f4:	492b      	ldr	r1, [pc, #172]	; (1a002aa4 <updateIMUData+0xf8>)
1a0029f6:	482f      	ldr	r0, [pc, #188]	; (1a002ab4 <updateIMUData+0x108>)
1a0029f8:	f007 f8b6 	bl	1a009b68 <mpu_get_temperature>
		inv_build_temp(temperature, sensor_timestamp);
1a0029fc:	4b2d      	ldr	r3, [pc, #180]	; (1a002ab4 <updateIMUData+0x108>)
1a0029fe:	681a      	ldr	r2, [r3, #0]
1a002a00:	4b28      	ldr	r3, [pc, #160]	; (1a002aa4 <updateIMUData+0xf8>)
1a002a02:	681b      	ldr	r3, [r3, #0]
1a002a04:	4619      	mov	r1, r3
1a002a06:	4610      	mov	r0, r2
1a002a08:	f004 fcd0 	bl	1a0073ac <inv_build_temp>
		long converter[3];
		for (int i = 0; i < 3; i++) {
1a002a0c:	2300      	movs	r3, #0
1a002a0e:	617b      	str	r3, [r7, #20]
1a002a10:	e00e      	b.n	1a002a30 <updateIMUData+0x84>
			converter[i] = accelerometer_data[i];
1a002a12:	4a26      	ldr	r2, [pc, #152]	; (1a002aac <updateIMUData+0x100>)
1a002a14:	697b      	ldr	r3, [r7, #20]
1a002a16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
1a002a1a:	b21a      	sxth	r2, r3
1a002a1c:	697b      	ldr	r3, [r7, #20]
1a002a1e:	009b      	lsls	r3, r3, #2
1a002a20:	f107 0118 	add.w	r1, r7, #24
1a002a24:	440b      	add	r3, r1
1a002a26:	f843 2c18 	str.w	r2, [r3, #-24]
		/* Push the new data to the MPL. */
		inv_build_gyro(gyrometer_data, sensor_timestamp);
		mpu_get_temperature(&temperature, &sensor_timestamp);
		inv_build_temp(temperature, sensor_timestamp);
		long converter[3];
		for (int i = 0; i < 3; i++) {
1a002a2a:	697b      	ldr	r3, [r7, #20]
1a002a2c:	3301      	adds	r3, #1
1a002a2e:	617b      	str	r3, [r7, #20]
1a002a30:	697b      	ldr	r3, [r7, #20]
1a002a32:	2b02      	cmp	r3, #2
1a002a34:	dded      	ble.n	1a002a12 <updateIMUData+0x66>
			converter[i] = accelerometer_data[i];
		}
		inv_build_accel(converter, 0, sensor_timestamp);
1a002a36:	4b1b      	ldr	r3, [pc, #108]	; (1a002aa4 <updateIMUData+0xf8>)
1a002a38:	681a      	ldr	r2, [r3, #0]
1a002a3a:	463b      	mov	r3, r7
1a002a3c:	2100      	movs	r1, #0
1a002a3e:	4618      	mov	r0, r3
1a002a40:	f004 fbba 	bl	1a0071b8 <inv_build_accel>
		inv_build_quat(quaternion, 0, sensor_timestamp);
1a002a44:	4b17      	ldr	r3, [pc, #92]	; (1a002aa4 <updateIMUData+0xf8>)
1a002a46:	681b      	ldr	r3, [r3, #0]
1a002a48:	461a      	mov	r2, r3
1a002a4a:	2100      	movs	r1, #0
1a002a4c:	4816      	ldr	r0, [pc, #88]	; (1a002aa8 <updateIMUData+0xfc>)
1a002a4e:	f004 fcd1 	bl	1a0073f4 <inv_build_quat>
		for (int i = 0; i < 3; i++) {
1a002a52:	2300      	movs	r3, #0
1a002a54:	613b      	str	r3, [r7, #16]
1a002a56:	e00e      	b.n	1a002a76 <updateIMUData+0xca>
			converter[i] = magnometer_data[i];
1a002a58:	4a17      	ldr	r2, [pc, #92]	; (1a002ab8 <updateIMUData+0x10c>)
1a002a5a:	693b      	ldr	r3, [r7, #16]
1a002a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
1a002a60:	b21a      	sxth	r2, r3
1a002a62:	693b      	ldr	r3, [r7, #16]
1a002a64:	009b      	lsls	r3, r3, #2
1a002a66:	f107 0118 	add.w	r1, r7, #24
1a002a6a:	440b      	add	r3, r1
1a002a6c:	f843 2c18 	str.w	r2, [r3, #-24]
		for (int i = 0; i < 3; i++) {
			converter[i] = accelerometer_data[i];
		}
		inv_build_accel(converter, 0, sensor_timestamp);
		inv_build_quat(quaternion, 0, sensor_timestamp);
		for (int i = 0; i < 3; i++) {
1a002a70:	693b      	ldr	r3, [r7, #16]
1a002a72:	3301      	adds	r3, #1
1a002a74:	613b      	str	r3, [r7, #16]
1a002a76:	693b      	ldr	r3, [r7, #16]
1a002a78:	2b02      	cmp	r3, #2
1a002a7a:	dded      	ble.n	1a002a58 <updateIMUData+0xac>
			converter[i] = magnometer_data[i];
		}
		mpu_get_compass_reg(magnometer_data, &sensor_timestamp);
1a002a7c:	4909      	ldr	r1, [pc, #36]	; (1a002aa4 <updateIMUData+0xf8>)
1a002a7e:	480e      	ldr	r0, [pc, #56]	; (1a002ab8 <updateIMUData+0x10c>)
1a002a80:	f008 f9a6 	bl	1a00add0 <mpu_get_compass_reg>
		inv_build_compass((long*) magnometer_data, 0, sensor_timestamp);
1a002a84:	4b07      	ldr	r3, [pc, #28]	; (1a002aa4 <updateIMUData+0xf8>)
1a002a86:	681b      	ldr	r3, [r3, #0]
1a002a88:	461a      	mov	r2, r3
1a002a8a:	2100      	movs	r1, #0
1a002a8c:	480a      	ldr	r0, [pc, #40]	; (1a002ab8 <updateIMUData+0x10c>)
1a002a8e:	f004 fc1b 	bl	1a0072c8 <inv_build_compass>
		inv_execute_on_data();
1a002a92:	f004 fd7f 	bl	1a007594 <inv_execute_on_data>
	}
}
1a002a96:	3718      	adds	r7, #24
1a002a98:	46bd      	mov	sp, r7
1a002a9a:	bd80      	pop	{r7, pc}
1a002a9c:	1008655c 	.word	0x1008655c
1a002aa0:	400f4000 	.word	0x400f4000
1a002aa4:	10086558 	.word	0x10086558
1a002aa8:	10086548 	.word	0x10086548
1a002aac:	10086538 	.word	0x10086538
1a002ab0:	10086530 	.word	0x10086530
1a002ab4:	1008652c 	.word	0x1008652c
1a002ab8:	10086540 	.word	0x10086540

1a002abc <MPU9105Init>:

void MPU9105Init() {
1a002abc:	b580      	push	{r7, lr}
1a002abe:	b082      	sub	sp, #8
1a002ac0:	af00      	add	r7, sp, #0
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, MPU_INT_GND_PORT_GPIO, MPU_INT_GND_PIN_GPIO);
1a002ac2:	2208      	movs	r2, #8
1a002ac4:	2105      	movs	r1, #5
1a002ac6:	4877      	ldr	r0, [pc, #476]	; (1a002ca4 <MPU9105Init+0x1e8>)
1a002ac8:	f7ff fca4 	bl	1a002414 <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(MPU_INT_GND_PORT, MPU_INT_GND_PIN,
1a002acc:	225c      	movs	r2, #92	; 0x5c
1a002ace:	2101      	movs	r1, #1
1a002ad0:	2003      	movs	r0, #3
1a002ad2:	f7ff fc6b 	bl	1a0023ac <Chip_SCU_PinMuxSet>
	SCU_MODE_INBUFF_EN | SCU_MODE_FUNC4 | SCU_MODE_PULLDOWN);
	mpuEnabled = false;
1a002ad6:	4b74      	ldr	r3, [pc, #464]	; (1a002ca8 <MPU9105Init+0x1ec>)
1a002ad8:	2200      	movs	r2, #0
1a002ada:	701a      	strb	r2, [r3, #0]
	Chip_I2C_Init(I2C0);
1a002adc:	2000      	movs	r0, #0
1a002ade:	f010 f80b 	bl	1a012af8 <Chip_I2C_Init>
	Chip_I2C_SetClockRate(I2C0, FAST_MODE_BAUD);
1a002ae2:	4972      	ldr	r1, [pc, #456]	; (1a002cac <MPU9105Init+0x1f0>)
1a002ae4:	2000      	movs	r0, #0
1a002ae6:	f010 f83b 	bl	1a012b60 <Chip_I2C_SetClockRate>
	Chip_I2C_SetMasterEventHandler(I2C0, Chip_I2C_EventHandlerPolling);
1a002aea:	4971      	ldr	r1, [pc, #452]	; (1a002cb0 <MPU9105Init+0x1f4>)
1a002aec:	2000      	movs	r0, #0
1a002aee:	f010 f86b 	bl	1a012bc8 <Chip_I2C_SetMasterEventHandler>
	LPC_SCU->SFSI2C0 = SFSI2C0_CONFIGURE_STANDARD_FAST_MODE_PLUS;
1a002af2:	4b70      	ldr	r3, [pc, #448]	; (1a002cb4 <MPU9105Init+0x1f8>)
1a002af4:	f640 4208 	movw	r2, #3080	; 0xc08
1a002af8:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

	/* Set up gyro.
	 * Every function preceded by mpu_ is a driver function and can be found
	 * in inv_mpu.h.
	 */
	if (mpu_init(NULL)) {
1a002afc:	2000      	movs	r0, #0
1a002afe:	f006 ff01 	bl	1a009904 <mpu_init>
1a002b02:	4603      	mov	r3, r0
1a002b04:	2b00      	cmp	r3, #0
1a002b06:	d003      	beq.n	1a002b10 <MPU9105Init+0x54>
		Chip_I2C_DeInit(I2C0);
1a002b08:	2000      	movs	r0, #0
1a002b0a:	f010 f80f 	bl	1a012b2c <Chip_I2C_DeInit>
1a002b0e:	e0c5      	b.n	1a002c9c <MPU9105Init+0x1e0>
		return;
	}

	if (inv_init_mpl()) {
1a002b10:	f005 ff64 	bl	1a0089dc <inv_init_mpl>
		//TODO: handle this failure
	}
	/* Compute 6-axis and 9-axis quaternions. */
	inv_enable_quaternion();
1a002b14:	f00e fefc 	bl	1a011910 <inv_enable_quaternion>
	inv_enable_9x_sensor_fusion();
1a002b18:	f00d f94e 	bl	1a00fdb8 <inv_enable_9x_sensor_fusion>
	inv_9x_fusion_use_timestamps(1);
1a002b1c:	2001      	movs	r0, #1
1a002b1e:	f00d f943 	bl	1a00fda8 <inv_9x_fusion_use_timestamps>

	/* Update gyro biases when not in motion.
	 */
	inv_enable_fast_nomot();
1a002b22:	f00c fdfd 	bl	1a00f720 <inv_enable_fast_nomot>

	/* Update gyro biases when temperature changes. */
	inv_enable_gyro_tc();
1a002b26:	f00d fbd7 	bl	1a0102d8 <inv_enable_gyro_tc>

	/* This algorithm updates the accel biases when in motion. A more accurate
	 * bias measurement can be made when running the self-test but this algorithm
	 * can be enabled if the self-test can't be executed in your application.
	 */
	inv_enable_in_use_auto_calibration();
1a002b2a:	f009 ff01 	bl	1a00c930 <inv_enable_in_use_auto_calibration>
	/* Compass calibration algorithms. */
	inv_enable_vector_compass_cal();
1a002b2e:	f00c f881 	bl	1a00ec34 <inv_enable_vector_compass_cal>
	inv_enable_magnetic_disturbance();
1a002b32:	f00d ff23 	bl	1a01097c <inv_enable_magnetic_disturbance>
	/* If you need to estimate your heading before the compass is calibrated,
	 * enable this algorithm. It becomes useless after a good figure-eight is
	 * detected, so we'll just leave it out to save memory.
	 *
	 */
	inv_enable_heading_from_gyro();
1a002b36:	f00d fedd 	bl	1a0108f4 <inv_enable_heading_from_gyro>

	/* Allows use of the MPL APIs in read_from_mpl. */
	inv_enable_eMPL_outputs();
1a002b3a:	f006 fe67 	bl	1a00980c <inv_enable_eMPL_outputs>

	inv_start_mpl();
1a002b3e:	f005 ff89 	bl	1a008a54 <inv_start_mpl>

	/* Get/set hardware configuration. Start gyro. */
	/* Wake up all sensors. */
	mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1a002b42:	2079      	movs	r0, #121	; 0x79
1a002b44:	f007 fc00 	bl	1a00a348 <mpu_set_sensors>
	/* Push both gyro and accel data into the FIFO. */
	mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1a002b48:	2078      	movs	r0, #120	; 0x78
1a002b4a:	f007 fbab 	bl	1a00a2a4 <mpu_configure_fifo>

	mpu_set_sample_rate(DEFAULT_MPU_HZ);
1a002b4e:	2028      	movs	r0, #40	; 0x28
1a002b50:	f007 fafa 	bl	1a00a148 <mpu_set_sample_rate>

	/* The compass sampling rate can be less than the gyro/accel sampling rate.
	 * Use this function for proper power management.
	 */
	mpu_set_compass_sample_rate(DEFAULT_MPU_HZ);
1a002b54:	2028      	movs	r0, #40	; 0x28
1a002b56:	f007 fb65 	bl	1a00a224 <mpu_set_compass_sample_rate>
	unsigned char accel_fsr = 0;
1a002b5a:	2300      	movs	r3, #0
1a002b5c:	71fb      	strb	r3, [r7, #7]
	unsigned short gyro_rate = 0, gyro_fsr = 0, compass_fsr = 0;
1a002b5e:	2300      	movs	r3, #0
1a002b60:	80bb      	strh	r3, [r7, #4]
1a002b62:	2300      	movs	r3, #0
1a002b64:	807b      	strh	r3, [r7, #2]
1a002b66:	2300      	movs	r3, #0
1a002b68:	803b      	strh	r3, [r7, #0]
	/* Read back configuration in case it was set improperly. */
	mpu_get_sample_rate(&gyro_rate);
1a002b6a:	1d3b      	adds	r3, r7, #4
1a002b6c:	4618      	mov	r0, r3
1a002b6e:	f007 fad1 	bl	1a00a114 <mpu_get_sample_rate>
	mpu_get_gyro_fsr(&gyro_fsr);
1a002b72:	1cbb      	adds	r3, r7, #2
1a002b74:	4618      	mov	r0, r3
1a002b76:	f007 f957 	bl	1a009e28 <mpu_get_gyro_fsr>
	mpu_get_accel_fsr(&accel_fsr);
1a002b7a:	1dfb      	adds	r3, r7, #7
1a002b7c:	4618      	mov	r0, r3
1a002b7e:	f007 f9d9 	bl	1a009f34 <mpu_get_accel_fsr>
	mpu_get_compass_fsr(&compass_fsr);
1a002b82:	463b      	mov	r3, r7
1a002b84:	4618      	mov	r0, r3
1a002b86:	f008 f9ab 	bl	1a00aee0 <mpu_get_compass_fsr>

	/* Sync driver configuration with MPL. */
	/* Sample rate expected in microseconds. */
	inv_set_gyro_sample_rate(1000000L / gyro_rate);
1a002b8a:	88bb      	ldrh	r3, [r7, #4]
1a002b8c:	461a      	mov	r2, r3
1a002b8e:	4b4a      	ldr	r3, [pc, #296]	; (1a002cb8 <MPU9105Init+0x1fc>)
1a002b90:	fb93 f3f2 	sdiv	r3, r3, r2
1a002b94:	4618      	mov	r0, r3
1a002b96:	f004 f883 	bl	1a006ca0 <inv_set_gyro_sample_rate>
	inv_set_accel_sample_rate(1000000L / gyro_rate);
1a002b9a:	88bb      	ldrh	r3, [r7, #4]
1a002b9c:	461a      	mov	r2, r3
1a002b9e:	4b46      	ldr	r3, [pc, #280]	; (1a002cb8 <MPU9105Init+0x1fc>)
1a002ba0:	fb93 f3f2 	sdiv	r3, r3, r2
1a002ba4:	4618      	mov	r0, r3
1a002ba6:	f004 f8a1 	bl	1a006cec <inv_set_accel_sample_rate>

	/* The compass rate is independent of the gyro and accel rates. As long as
	 * inv_set_compass_sample_rate is called with the correct value, the 9-axis
	 * fusion algorithm's compass correction gain will work properly.
	 */
	inv_set_compass_sample_rate(1000000L / gyro_rate);
1a002baa:	88bb      	ldrh	r3, [r7, #4]
1a002bac:	461a      	mov	r2, r3
1a002bae:	4b42      	ldr	r3, [pc, #264]	; (1a002cb8 <MPU9105Init+0x1fc>)
1a002bb0:	fb93 f3f2 	sdiv	r3, r3, r2
1a002bb4:	4618      	mov	r0, r3
1a002bb6:	f004 f8c1 	bl	1a006d3c <inv_set_compass_sample_rate>

	/* Set chip-to-body orientation matrix.
	 * Set hardware units to dps/g's/degrees scaling factor.
	 */
	inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long) gyro_fsr << 15);
1a002bba:	4840      	ldr	r0, [pc, #256]	; (1a002cbc <MPU9105Init+0x200>)
1a002bbc:	f005 fe36 	bl	1a00882c <inv_orientation_matrix_to_scalar>
1a002bc0:	4603      	mov	r3, r0
1a002bc2:	461a      	mov	r2, r3
1a002bc4:	887b      	ldrh	r3, [r7, #2]
1a002bc6:	03db      	lsls	r3, r3, #15
1a002bc8:	4619      	mov	r1, r3
1a002bca:	4610      	mov	r0, r2
1a002bcc:	f004 f858 	bl	1a006c80 <inv_set_gyro_orientation_and_scale>
	inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
1a002bd0:	483a      	ldr	r0, [pc, #232]	; (1a002cbc <MPU9105Init+0x200>)
1a002bd2:	f005 fe2b 	bl	1a00882c <inv_orientation_matrix_to_scalar>
1a002bd6:	4603      	mov	r3, r0
1a002bd8:	461a      	mov	r2, r3
			(long) accel_fsr << 15);
1a002bda:	79fb      	ldrb	r3, [r7, #7]

	/* Set chip-to-body orientation matrix.
	 * Set hardware units to dps/g's/degrees scaling factor.
	 */
	inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long) gyro_fsr << 15);
	inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
1a002bdc:	03db      	lsls	r3, r3, #15
1a002bde:	4619      	mov	r1, r3
1a002be0:	4610      	mov	r0, r2
1a002be2:	f004 f955 	bl	1a006e90 <inv_set_accel_orientation_and_scale>
			(long) accel_fsr << 15);
	inv_set_compass_orientation_and_scale(inv_orientation_matrix_to_scalar(compass_pdata.orientation),
1a002be6:	4836      	ldr	r0, [pc, #216]	; (1a002cc0 <MPU9105Init+0x204>)
1a002be8:	f005 fe20 	bl	1a00882c <inv_orientation_matrix_to_scalar>
1a002bec:	4603      	mov	r3, r0
1a002bee:	461a      	mov	r2, r3
			(long) compass_fsr << 15);
1a002bf0:	883b      	ldrh	r3, [r7, #0]
	 * Set hardware units to dps/g's/degrees scaling factor.
	 */
	inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long) gyro_fsr << 15);
	inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
			(long) accel_fsr << 15);
	inv_set_compass_orientation_and_scale(inv_orientation_matrix_to_scalar(compass_pdata.orientation),
1a002bf2:	03db      	lsls	r3, r3, #15
1a002bf4:	4619      	mov	r1, r3
1a002bf6:	4610      	mov	r0, r2
1a002bf8:	f004 f95a 	bl	1a006eb0 <inv_set_compass_orientation_and_scale>
			(long) compass_fsr << 15);
	mpu_set_int_level(0);
1a002bfc:	2000      	movs	r0, #0
1a002bfe:	f007 fdc5 	bl	1a00a78c <mpu_set_int_level>
	mpu_set_int_latched(ENABLE);
1a002c02:	2001      	movs	r0, #1
1a002c04:	f007 fdd4 	bl	1a00a7b0 <mpu_set_int_latched>

	dmp_load_motion_driver_firmware();
1a002c08:	f008 f97c 	bl	1a00af04 <dmp_load_motion_driver_firmware>
	dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));
1a002c0c:	482b      	ldr	r0, [pc, #172]	; (1a002cbc <MPU9105Init+0x200>)
1a002c0e:	f005 fe0d 	bl	1a00882c <inv_orientation_matrix_to_scalar>
1a002c12:	4603      	mov	r3, r0
1a002c14:	4618      	mov	r0, r3
1a002c16:	f008 f985 	bl	1a00af24 <dmp_set_orientation>
	 * then the interrupts will be at 200Hz even if fifo rate
	 * is set at a different rate. To avoid this issue include the DMP_FEATURE_TAP
	 *
	 *  DMP sensor fusion works only with gyro at +-2000dps and accel +-2G
	 */
	dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
1a002c1a:	f240 1073 	movw	r0, #371	; 0x173
1a002c1e:	f008 fcfb 	bl	1a00b618 <dmp_enable_feature>
	DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |
	DMP_FEATURE_GYRO_CAL);
	dmp_set_fifo_rate(DEFAULT_MPU_HZ);
1a002c22:	2028      	movs	r0, #40	; 0x28
1a002c24:	f008 fa64 	bl	1a00b0f0 <dmp_set_fifo_rate>
	mpu_set_dmp_state(ENABLE);
1a002c28:	2001      	movs	r0, #1
1a002c2a:	f007 ff27 	bl	1a00aa7c <mpu_set_dmp_state>
	Chip_I2C_SetClockRate(I2C0, FAST_MODE_PLUS_BAUD);
1a002c2e:	4922      	ldr	r1, [pc, #136]	; (1a002cb8 <MPU9105Init+0x1fc>)
1a002c30:	2000      	movs	r0, #0
1a002c32:	f00f ff95 	bl	1a012b60 <Chip_I2C_SetClockRate>
	mpuEnabled = true;
1a002c36:	4b1c      	ldr	r3, [pc, #112]	; (1a002ca8 <MPU9105Init+0x1ec>)
1a002c38:	2201      	movs	r2, #1
1a002c3a:	701a      	strb	r2, [r3, #0]

	//Register the sensors
	sensorsTimers[STATUS].refresh = IMUStatusReport;
1a002c3c:	4b21      	ldr	r3, [pc, #132]	; (1a002cc4 <MPU9105Init+0x208>)
1a002c3e:	4a22      	ldr	r2, [pc, #136]	; (1a002cc8 <MPU9105Init+0x20c>)
1a002c40:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	sensorsTimers[RAW_ACCEL].refresh = RawAccelerometerReport;
1a002c44:	4b1f      	ldr	r3, [pc, #124]	; (1a002cc4 <MPU9105Init+0x208>)
1a002c46:	4a21      	ldr	r2, [pc, #132]	; (1a002ccc <MPU9105Init+0x210>)
1a002c48:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	sensorsTimers[RAW_GYRO].refresh = RawGyroReport;
1a002c4c:	4b1d      	ldr	r3, [pc, #116]	; (1a002cc4 <MPU9105Init+0x208>)
1a002c4e:	4a20      	ldr	r2, [pc, #128]	; (1a002cd0 <MPU9105Init+0x214>)
1a002c50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	sensorsTimers[RAW_COMPASS].refresh = RawCompassReport;
1a002c54:	4b1b      	ldr	r3, [pc, #108]	; (1a002cc4 <MPU9105Init+0x208>)
1a002c56:	4a1f      	ldr	r2, [pc, #124]	; (1a002cd4 <MPU9105Init+0x218>)
1a002c58:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	sensorsTimers[CAL_ACCEL].refresh = CalAccelerometerReport;
1a002c5c:	4b19      	ldr	r3, [pc, #100]	; (1a002cc4 <MPU9105Init+0x208>)
1a002c5e:	4a1e      	ldr	r2, [pc, #120]	; (1a002cd8 <MPU9105Init+0x21c>)
1a002c60:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	sensorsTimers[CAL_GYRO].refresh = CalGyroReport;
1a002c64:	4b17      	ldr	r3, [pc, #92]	; (1a002cc4 <MPU9105Init+0x208>)
1a002c66:	4a1d      	ldr	r2, [pc, #116]	; (1a002cdc <MPU9105Init+0x220>)
1a002c68:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	sensorsTimers[CAL_COMPASS].refresh = CalCompassReport;
1a002c6c:	4b15      	ldr	r3, [pc, #84]	; (1a002cc4 <MPU9105Init+0x208>)
1a002c6e:	4a1c      	ldr	r2, [pc, #112]	; (1a002ce0 <MPU9105Init+0x224>)
1a002c70:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	sensorsTimers[QUARTERNION].refresh = QuaternionReport;
1a002c74:	4b13      	ldr	r3, [pc, #76]	; (1a002cc4 <MPU9105Init+0x208>)
1a002c76:	4a1b      	ldr	r2, [pc, #108]	; (1a002ce4 <MPU9105Init+0x228>)
1a002c78:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	sensorsTimers[EULER_ANGLES].refresh = EulerAnglesReport;
1a002c7c:	4b11      	ldr	r3, [pc, #68]	; (1a002cc4 <MPU9105Init+0x208>)
1a002c7e:	4a1a      	ldr	r2, [pc, #104]	; (1a002ce8 <MPU9105Init+0x22c>)
1a002c80:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	sensorsTimers[ROTATION_MATRIX].refresh = RotationMatrixReport;
1a002c84:	4b0f      	ldr	r3, [pc, #60]	; (1a002cc4 <MPU9105Init+0x208>)
1a002c86:	4a19      	ldr	r2, [pc, #100]	; (1a002cec <MPU9105Init+0x230>)
1a002c88:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	sensorsTimers[HEADING].refresh = HeadingReport;
1a002c8c:	4b0d      	ldr	r3, [pc, #52]	; (1a002cc4 <MPU9105Init+0x208>)
1a002c8e:	4a18      	ldr	r2, [pc, #96]	; (1a002cf0 <MPU9105Init+0x234>)
1a002c90:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	sensorsTimers[LINEAR_ACCEL].refresh = LinearAccelReport;
1a002c94:	4b0b      	ldr	r3, [pc, #44]	; (1a002cc4 <MPU9105Init+0x208>)
1a002c96:	4a17      	ldr	r2, [pc, #92]	; (1a002cf4 <MPU9105Init+0x238>)
1a002c98:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
}
1a002c9c:	3708      	adds	r7, #8
1a002c9e:	46bd      	mov	sp, r7
1a002ca0:	bd80      	pop	{r7, pc}
1a002ca2:	bf00      	nop
1a002ca4:	400f4000 	.word	0x400f4000
1a002ca8:	1008655c 	.word	0x1008655c
1a002cac:	00061a80 	.word	0x00061a80
1a002cb0:	1a012a99 	.word	0x1a012a99
1a002cb4:	40086000 	.word	0x40086000
1a002cb8:	000f4240 	.word	0x000f4240
1a002cbc:	1008601c 	.word	0x1008601c
1a002cc0:	10086028 	.word	0x10086028
1a002cc4:	10088174 	.word	0x10088174
1a002cc8:	1a00294d 	.word	0x1a00294d
1a002ccc:	1a0028fd 	.word	0x1a0028fd
1a002cd0:	1a0028ed 	.word	0x1a0028ed
1a002cd4:	1a00290d 	.word	0x1a00290d
1a002cd8:	1a00292d 	.word	0x1a00292d
1a002cdc:	1a00291d 	.word	0x1a00291d
1a002ce0:	1a00293d 	.word	0x1a00293d
1a002ce4:	1a00295d 	.word	0x1a00295d
1a002ce8:	1a00296d 	.word	0x1a00296d
1a002cec:	1a00297d 	.word	0x1a00297d
1a002cf0:	1a00298d 	.word	0x1a00298d
1a002cf4:	1a00299d 	.word	0x1a00299d

1a002cf8 <i2c_write>:

void disableIMU(void) {

}
int i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t length, uint8_t const *data) {
1a002cf8:	b580      	push	{r7, lr}
1a002cfa:	b088      	sub	sp, #32
1a002cfc:	af00      	add	r7, sp, #0
1a002cfe:	603b      	str	r3, [r7, #0]
1a002d00:	4603      	mov	r3, r0
1a002d02:	71fb      	strb	r3, [r7, #7]
1a002d04:	460b      	mov	r3, r1
1a002d06:	71bb      	strb	r3, [r7, #6]
1a002d08:	4613      	mov	r3, r2
1a002d0a:	717b      	strb	r3, [r7, #5]
	uint8_t i2cTxBuffer[20]; //Arbitrary value;
	if (length > sizeof(i2cTxBuffer) - 1) {
1a002d0c:	797b      	ldrb	r3, [r7, #5]
1a002d0e:	2b13      	cmp	r3, #19
1a002d10:	d902      	bls.n	1a002d18 <i2c_write+0x20>
		return -1; //This is bad
1a002d12:	f04f 33ff 	mov.w	r3, #4294967295
1a002d16:	e019      	b.n	1a002d4c <i2c_write+0x54>
	}
	i2cTxBuffer[0] = reg_addr;
1a002d18:	79bb      	ldrb	r3, [r7, #6]
1a002d1a:	733b      	strb	r3, [r7, #12]
	memcpy(i2cTxBuffer + 1, data, length);
1a002d1c:	f107 030c 	add.w	r3, r7, #12
1a002d20:	3301      	adds	r3, #1
1a002d22:	797a      	ldrb	r2, [r7, #5]
1a002d24:	6839      	ldr	r1, [r7, #0]
1a002d26:	4618      	mov	r0, r3
1a002d28:	f011 fed8 	bl	1a014adc <memcpy>
	if (!Chip_I2C_MasterSend(I2C0, slave_addr, i2cTxBuffer, length + 1)) {
1a002d2c:	797b      	ldrb	r3, [r7, #5]
1a002d2e:	3301      	adds	r3, #1
1a002d30:	b2db      	uxtb	r3, r3
1a002d32:	f107 020c 	add.w	r2, r7, #12
1a002d36:	79f9      	ldrb	r1, [r7, #7]
1a002d38:	2000      	movs	r0, #0
1a002d3a:	f00f ffb9 	bl	1a012cb0 <Chip_I2C_MasterSend>
1a002d3e:	4603      	mov	r3, r0
1a002d40:	2b00      	cmp	r3, #0
1a002d42:	d102      	bne.n	1a002d4a <i2c_write+0x52>
		return -1; //This is bad
1a002d44:	f04f 33ff 	mov.w	r3, #4294967295
1a002d48:	e000      	b.n	1a002d4c <i2c_write+0x54>
	}
	return 0;
1a002d4a:	2300      	movs	r3, #0
}
1a002d4c:	4618      	mov	r0, r3
1a002d4e:	3720      	adds	r7, #32
1a002d50:	46bd      	mov	sp, r7
1a002d52:	bd80      	pop	{r7, pc}

1a002d54 <i2c_read>:

int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t length, uint8_t *data) {
1a002d54:	b580      	push	{r7, lr}
1a002d56:	b084      	sub	sp, #16
1a002d58:	af02      	add	r7, sp, #8
1a002d5a:	603b      	str	r3, [r7, #0]
1a002d5c:	4603      	mov	r3, r0
1a002d5e:	71fb      	strb	r3, [r7, #7]
1a002d60:	460b      	mov	r3, r1
1a002d62:	71bb      	strb	r3, [r7, #6]
1a002d64:	4613      	mov	r3, r2
1a002d66:	717b      	strb	r3, [r7, #5]
	if (!Chip_I2C_MasterCmdRead(I2C0, slave_addr, reg_addr, data, length)) {
1a002d68:	797b      	ldrb	r3, [r7, #5]
1a002d6a:	79ba      	ldrb	r2, [r7, #6]
1a002d6c:	79f9      	ldrb	r1, [r7, #7]
1a002d6e:	9300      	str	r3, [sp, #0]
1a002d70:	683b      	ldr	r3, [r7, #0]
1a002d72:	2000      	movs	r0, #0
1a002d74:	f00f ffd6 	bl	1a012d24 <Chip_I2C_MasterCmdRead>
1a002d78:	4603      	mov	r3, r0
1a002d7a:	2b00      	cmp	r3, #0
1a002d7c:	d102      	bne.n	1a002d84 <i2c_read+0x30>
		return -1; //This is bad
1a002d7e:	f04f 33ff 	mov.w	r3, #4294967295
1a002d82:	e000      	b.n	1a002d86 <i2c_read+0x32>
	}
	return 0;
1a002d84:	2300      	movs	r3, #0
}
1a002d86:	4618      	mov	r0, r3
1a002d88:	3708      	adds	r7, #8
1a002d8a:	46bd      	mov	sp, r7
1a002d8c:	bd80      	pop	{r7, pc}
1a002d8e:	bf00      	nop

1a002d90 <_MLPrintLog>:

/**
 * Stubs for the MPL library
 */

int _MLPrintLog(int priority, const char *tag, const char *fmt, ...) {
1a002d90:	b40c      	push	{r2, r3}
1a002d92:	b480      	push	{r7}
1a002d94:	b083      	sub	sp, #12
1a002d96:	af00      	add	r7, sp, #0
1a002d98:	6078      	str	r0, [r7, #4]
1a002d9a:	6039      	str	r1, [r7, #0]
	return 0;
1a002d9c:	2300      	movs	r3, #0
}
1a002d9e:	4618      	mov	r0, r3
1a002da0:	370c      	adds	r7, #12
1a002da2:	46bd      	mov	sp, r7
1a002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002da8:	b002      	add	sp, #8
1a002daa:	4770      	bx	lr

1a002dac <Chip_SCU_PinMuxSet>:
 * @return	Nothing
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a002dac:	b480      	push	{r7}
1a002dae:	b083      	sub	sp, #12
1a002db0:	af00      	add	r7, sp, #0
1a002db2:	4603      	mov	r3, r0
1a002db4:	71fb      	strb	r3, [r7, #7]
1a002db6:	460b      	mov	r3, r1
1a002db8:	71bb      	strb	r3, [r7, #6]
1a002dba:	4613      	mov	r3, r2
1a002dbc:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002dbe:	4807      	ldr	r0, [pc, #28]	; (1a002ddc <Chip_SCU_PinMuxSet+0x30>)
1a002dc0:	79f9      	ldrb	r1, [r7, #7]
1a002dc2:	79bb      	ldrb	r3, [r7, #6]
1a002dc4:	88ba      	ldrh	r2, [r7, #4]
1a002dc6:	0149      	lsls	r1, r1, #5
1a002dc8:	440b      	add	r3, r1
1a002dca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a002dce:	bf00      	nop
1a002dd0:	370c      	adds	r7, #12
1a002dd2:	46bd      	mov	sp, r7
1a002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002dd8:	4770      	bx	lr
1a002dda:	bf00      	nop
1a002ddc:	40086000 	.word	0x40086000

1a002de0 <Chip_GPIO_ReadPortBit>:
 * @param	pin		: GPIO pin to read
 * @return	true of the GPIO is high, false if low
 * @note	It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
1a002de0:	b480      	push	{r7}
1a002de2:	b085      	sub	sp, #20
1a002de4:	af00      	add	r7, sp, #0
1a002de6:	60f8      	str	r0, [r7, #12]
1a002de8:	60b9      	str	r1, [r7, #8]
1a002dea:	4613      	mov	r3, r2
1a002dec:	71fb      	strb	r3, [r7, #7]
	return (bool) pGPIO->B[port][pin];
1a002dee:	79fb      	ldrb	r3, [r7, #7]
1a002df0:	68f9      	ldr	r1, [r7, #12]
1a002df2:	68ba      	ldr	r2, [r7, #8]
1a002df4:	0152      	lsls	r2, r2, #5
1a002df6:	440a      	add	r2, r1
1a002df8:	4413      	add	r3, r2
1a002dfa:	781b      	ldrb	r3, [r3, #0]
1a002dfc:	b2db      	uxtb	r3, r3
1a002dfe:	2b00      	cmp	r3, #0
1a002e00:	bf14      	ite	ne
1a002e02:	2301      	movne	r3, #1
1a002e04:	2300      	moveq	r3, #0
1a002e06:	b2db      	uxtb	r3, r3
}
1a002e08:	4618      	mov	r0, r3
1a002e0a:	3714      	adds	r7, #20
1a002e0c:	46bd      	mov	sp, r7
1a002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002e12:	4770      	bx	lr

1a002e14 <Chip_GPIO_SetPinDIRInput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a002e14:	b480      	push	{r7}
1a002e16:	b083      	sub	sp, #12
1a002e18:	af00      	add	r7, sp, #0
1a002e1a:	6078      	str	r0, [r7, #4]
1a002e1c:	460b      	mov	r3, r1
1a002e1e:	70fb      	strb	r3, [r7, #3]
1a002e20:	4613      	mov	r3, r2
1a002e22:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002e24:	78fa      	ldrb	r2, [r7, #3]
1a002e26:	78f9      	ldrb	r1, [r7, #3]
1a002e28:	687b      	ldr	r3, [r7, #4]
1a002e2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a002e2e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a002e32:	78bb      	ldrb	r3, [r7, #2]
1a002e34:	2001      	movs	r0, #1
1a002e36:	fa00 f303 	lsl.w	r3, r0, r3
1a002e3a:	43db      	mvns	r3, r3
1a002e3c:	4019      	ands	r1, r3
1a002e3e:	687b      	ldr	r3, [r7, #4]
1a002e40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a002e48:	bf00      	nop
1a002e4a:	370c      	adds	r7, #12
1a002e4c:	46bd      	mov	sp, r7
1a002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002e52:	4770      	bx	lr

1a002e54 <refreshMiniRobSensors>:

#if LOW_POWER_MODE
#warning Sensor readings must be wrong!
#endif

void refreshMiniRobSensors() {
1a002e54:	b580      	push	{r7, lr}
1a002e56:	b082      	sub	sp, #8
1a002e58:	af00      	add	r7, sp, #0
	uint32_t currentState;
	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_A_PORT_GPIO, LEFT_SENSOR_A_PIN_GPIO)) {
1a002e5a:	2202      	movs	r2, #2
1a002e5c:	2102      	movs	r1, #2
1a002e5e:	4849      	ldr	r0, [pc, #292]	; (1a002f84 <refreshMiniRobSensors+0x130>)
1a002e60:	f7ff ffbe 	bl	1a002de0 <Chip_GPIO_ReadPortBit>
1a002e64:	4603      	mov	r3, r0
1a002e66:	2b00      	cmp	r3, #0
1a002e68:	d00c      	beq.n	1a002e84 <refreshMiniRobSensors+0x30>
		currentState = Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO) ? 2 : 3;
1a002e6a:	220c      	movs	r2, #12
1a002e6c:	2105      	movs	r1, #5
1a002e6e:	4845      	ldr	r0, [pc, #276]	; (1a002f84 <refreshMiniRobSensors+0x130>)
1a002e70:	f7ff ffb6 	bl	1a002de0 <Chip_GPIO_ReadPortBit>
1a002e74:	4603      	mov	r3, r0
1a002e76:	2b00      	cmp	r3, #0
1a002e78:	d001      	beq.n	1a002e7e <refreshMiniRobSensors+0x2a>
1a002e7a:	2302      	movs	r3, #2
1a002e7c:	e000      	b.n	1a002e80 <refreshMiniRobSensors+0x2c>
1a002e7e:	2303      	movs	r3, #3
1a002e80:	607b      	str	r3, [r7, #4]
1a002e82:	e006      	b.n	1a002e92 <refreshMiniRobSensors+0x3e>
	} else {
		currentState = Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO) ? 1 : 0;
1a002e84:	220c      	movs	r2, #12
1a002e86:	2105      	movs	r1, #5
1a002e88:	483e      	ldr	r0, [pc, #248]	; (1a002f84 <refreshMiniRobSensors+0x130>)
1a002e8a:	f7ff ffa9 	bl	1a002de0 <Chip_GPIO_ReadPortBit>
1a002e8e:	4603      	mov	r3, r0
1a002e90:	607b      	str	r3, [r7, #4]
	}
	if (currentState == ((leftWheel.previousState + 1) & 0x3)) {
1a002e92:	4b3d      	ldr	r3, [pc, #244]	; (1a002f88 <refreshMiniRobSensors+0x134>)
1a002e94:	891b      	ldrh	r3, [r3, #8]
1a002e96:	3301      	adds	r3, #1
1a002e98:	f003 0203 	and.w	r2, r3, #3
1a002e9c:	687b      	ldr	r3, [r7, #4]
1a002e9e:	429a      	cmp	r2, r3
1a002ea0:	d105      	bne.n	1a002eae <refreshMiniRobSensors+0x5a>
		leftWheel.wheelStatus++;
1a002ea2:	4b39      	ldr	r3, [pc, #228]	; (1a002f88 <refreshMiniRobSensors+0x134>)
1a002ea4:	681b      	ldr	r3, [r3, #0]
1a002ea6:	3301      	adds	r3, #1
1a002ea8:	4a37      	ldr	r2, [pc, #220]	; (1a002f88 <refreshMiniRobSensors+0x134>)
1a002eaa:	6013      	str	r3, [r2, #0]
1a002eac:	e019      	b.n	1a002ee2 <refreshMiniRobSensors+0x8e>
	} else if (leftWheel.previousState == ((currentState + 1) & 0x3)) {
1a002eae:	4b36      	ldr	r3, [pc, #216]	; (1a002f88 <refreshMiniRobSensors+0x134>)
1a002eb0:	891b      	ldrh	r3, [r3, #8]
1a002eb2:	461a      	mov	r2, r3
1a002eb4:	687b      	ldr	r3, [r7, #4]
1a002eb6:	3301      	adds	r3, #1
1a002eb8:	f003 0303 	and.w	r3, r3, #3
1a002ebc:	429a      	cmp	r2, r3
1a002ebe:	d105      	bne.n	1a002ecc <refreshMiniRobSensors+0x78>
		leftWheel.wheelStatus--;
1a002ec0:	4b31      	ldr	r3, [pc, #196]	; (1a002f88 <refreshMiniRobSensors+0x134>)
1a002ec2:	681b      	ldr	r3, [r3, #0]
1a002ec4:	3b01      	subs	r3, #1
1a002ec6:	4a30      	ldr	r2, [pc, #192]	; (1a002f88 <refreshMiniRobSensors+0x134>)
1a002ec8:	6013      	str	r3, [r2, #0]
1a002eca:	e00a      	b.n	1a002ee2 <refreshMiniRobSensors+0x8e>
	} else if (currentState != leftWheel.previousState) {
1a002ecc:	4b2e      	ldr	r3, [pc, #184]	; (1a002f88 <refreshMiniRobSensors+0x134>)
1a002ece:	891b      	ldrh	r3, [r3, #8]
1a002ed0:	461a      	mov	r2, r3
1a002ed2:	687b      	ldr	r3, [r7, #4]
1a002ed4:	429a      	cmp	r2, r3
1a002ed6:	d004      	beq.n	1a002ee2 <refreshMiniRobSensors+0x8e>
		leftWheel.errorCount++;
1a002ed8:	4b2b      	ldr	r3, [pc, #172]	; (1a002f88 <refreshMiniRobSensors+0x134>)
1a002eda:	685b      	ldr	r3, [r3, #4]
1a002edc:	3301      	adds	r3, #1
1a002ede:	4a2a      	ldr	r2, [pc, #168]	; (1a002f88 <refreshMiniRobSensors+0x134>)
1a002ee0:	6053      	str	r3, [r2, #4]
	}
	leftWheel.previousState = currentState;
1a002ee2:	687b      	ldr	r3, [r7, #4]
1a002ee4:	b29a      	uxth	r2, r3
1a002ee6:	4b28      	ldr	r3, [pc, #160]	; (1a002f88 <refreshMiniRobSensors+0x134>)
1a002ee8:	811a      	strh	r2, [r3, #8]

	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_A_PORT_GPIO, RIGHT_SENSOR_A_PIN_GPIO)) {
1a002eea:	2205      	movs	r2, #5
1a002eec:	2102      	movs	r1, #2
1a002eee:	4825      	ldr	r0, [pc, #148]	; (1a002f84 <refreshMiniRobSensors+0x130>)
1a002ef0:	f7ff ff76 	bl	1a002de0 <Chip_GPIO_ReadPortBit>
1a002ef4:	4603      	mov	r3, r0
1a002ef6:	2b00      	cmp	r3, #0
1a002ef8:	d00c      	beq.n	1a002f14 <refreshMiniRobSensors+0xc0>
		currentState = Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO) ? 2 : 3;
1a002efa:	2206      	movs	r2, #6
1a002efc:	2102      	movs	r1, #2
1a002efe:	4821      	ldr	r0, [pc, #132]	; (1a002f84 <refreshMiniRobSensors+0x130>)
1a002f00:	f7ff ff6e 	bl	1a002de0 <Chip_GPIO_ReadPortBit>
1a002f04:	4603      	mov	r3, r0
1a002f06:	2b00      	cmp	r3, #0
1a002f08:	d001      	beq.n	1a002f0e <refreshMiniRobSensors+0xba>
1a002f0a:	2302      	movs	r3, #2
1a002f0c:	e000      	b.n	1a002f10 <refreshMiniRobSensors+0xbc>
1a002f0e:	2303      	movs	r3, #3
1a002f10:	607b      	str	r3, [r7, #4]
1a002f12:	e006      	b.n	1a002f22 <refreshMiniRobSensors+0xce>
	} else {
		currentState = Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO) ? 1 : 0;
1a002f14:	2206      	movs	r2, #6
1a002f16:	2102      	movs	r1, #2
1a002f18:	481a      	ldr	r0, [pc, #104]	; (1a002f84 <refreshMiniRobSensors+0x130>)
1a002f1a:	f7ff ff61 	bl	1a002de0 <Chip_GPIO_ReadPortBit>
1a002f1e:	4603      	mov	r3, r0
1a002f20:	607b      	str	r3, [r7, #4]
	}
	if (currentState == ((rightWheel.previousState + 1) & 0x3)) {
1a002f22:	4b1a      	ldr	r3, [pc, #104]	; (1a002f8c <refreshMiniRobSensors+0x138>)
1a002f24:	891b      	ldrh	r3, [r3, #8]
1a002f26:	3301      	adds	r3, #1
1a002f28:	f003 0203 	and.w	r2, r3, #3
1a002f2c:	687b      	ldr	r3, [r7, #4]
1a002f2e:	429a      	cmp	r2, r3
1a002f30:	d105      	bne.n	1a002f3e <refreshMiniRobSensors+0xea>
		rightWheel.wheelStatus++;
1a002f32:	4b16      	ldr	r3, [pc, #88]	; (1a002f8c <refreshMiniRobSensors+0x138>)
1a002f34:	681b      	ldr	r3, [r3, #0]
1a002f36:	3301      	adds	r3, #1
1a002f38:	4a14      	ldr	r2, [pc, #80]	; (1a002f8c <refreshMiniRobSensors+0x138>)
1a002f3a:	6013      	str	r3, [r2, #0]
1a002f3c:	e019      	b.n	1a002f72 <refreshMiniRobSensors+0x11e>
	} else if (rightWheel.previousState == ((currentState + 1) & 0x3)) {
1a002f3e:	4b13      	ldr	r3, [pc, #76]	; (1a002f8c <refreshMiniRobSensors+0x138>)
1a002f40:	891b      	ldrh	r3, [r3, #8]
1a002f42:	461a      	mov	r2, r3
1a002f44:	687b      	ldr	r3, [r7, #4]
1a002f46:	3301      	adds	r3, #1
1a002f48:	f003 0303 	and.w	r3, r3, #3
1a002f4c:	429a      	cmp	r2, r3
1a002f4e:	d105      	bne.n	1a002f5c <refreshMiniRobSensors+0x108>
		rightWheel.wheelStatus--;
1a002f50:	4b0e      	ldr	r3, [pc, #56]	; (1a002f8c <refreshMiniRobSensors+0x138>)
1a002f52:	681b      	ldr	r3, [r3, #0]
1a002f54:	3b01      	subs	r3, #1
1a002f56:	4a0d      	ldr	r2, [pc, #52]	; (1a002f8c <refreshMiniRobSensors+0x138>)
1a002f58:	6013      	str	r3, [r2, #0]
1a002f5a:	e00a      	b.n	1a002f72 <refreshMiniRobSensors+0x11e>
	} else if (currentState != rightWheel.previousState) {
1a002f5c:	4b0b      	ldr	r3, [pc, #44]	; (1a002f8c <refreshMiniRobSensors+0x138>)
1a002f5e:	891b      	ldrh	r3, [r3, #8]
1a002f60:	461a      	mov	r2, r3
1a002f62:	687b      	ldr	r3, [r7, #4]
1a002f64:	429a      	cmp	r2, r3
1a002f66:	d004      	beq.n	1a002f72 <refreshMiniRobSensors+0x11e>
		rightWheel.errorCount++;
1a002f68:	4b08      	ldr	r3, [pc, #32]	; (1a002f8c <refreshMiniRobSensors+0x138>)
1a002f6a:	685b      	ldr	r3, [r3, #4]
1a002f6c:	3301      	adds	r3, #1
1a002f6e:	4a07      	ldr	r2, [pc, #28]	; (1a002f8c <refreshMiniRobSensors+0x138>)
1a002f70:	6053      	str	r3, [r2, #4]
	}
	rightWheel.previousState = currentState;
1a002f72:	687b      	ldr	r3, [r7, #4]
1a002f74:	b29a      	uxth	r2, r3
1a002f76:	4b05      	ldr	r3, [pc, #20]	; (1a002f8c <refreshMiniRobSensors+0x138>)
1a002f78:	811a      	strh	r2, [r3, #8]
}
1a002f7a:	bf00      	nop
1a002f7c:	3708      	adds	r7, #8
1a002f7e:	46bd      	mov	sp, r7
1a002f80:	bd80      	pop	{r7, pc}
1a002f82:	bf00      	nop
1a002f84:	400f4000 	.word	0x400f4000
1a002f88:	100874e0 	.word	0x100874e0
1a002f8c:	100874ec 	.word	0x100874ec

1a002f90 <reportValues>:

void reportValues() {
1a002f90:	b580      	push	{r7, lr}
1a002f92:	af00      	add	r7, sp, #0
	xprintf("-S%d %d %d\n", MOTOR_SENSORS, leftWheel.wheelStatus, rightWheel.wheelStatus);
1a002f94:	4b04      	ldr	r3, [pc, #16]	; (1a002fa8 <reportValues+0x18>)
1a002f96:	681a      	ldr	r2, [r3, #0]
1a002f98:	4b04      	ldr	r3, [pc, #16]	; (1a002fac <reportValues+0x1c>)
1a002f9a:	681b      	ldr	r3, [r3, #0]
1a002f9c:	211c      	movs	r1, #28
1a002f9e:	4804      	ldr	r0, [pc, #16]	; (1a002fb0 <reportValues+0x20>)
1a002fa0:	f003 fdec 	bl	1a006b7c <xprintf>
}
1a002fa4:	bf00      	nop
1a002fa6:	bd80      	pop	{r7, pc}
1a002fa8:	100874e0 	.word	0x100874e0
1a002fac:	100874ec 	.word	0x100874ec
1a002fb0:	1a0187e4 	.word	0x1a0187e4

1a002fb4 <MiniRobInit>:

void MiniRobInit() {
1a002fb4:	b580      	push	{r7, lr}
1a002fb6:	af00      	add	r7, sp, #0
//Register init function
	sensorsTimers[MOTOR_SENSORS].refresh = reportValues;
1a002fb8:	4b3b      	ldr	r3, [pc, #236]	; (1a0030a8 <MiniRobInit+0xf4>)
1a002fba:	4a3c      	ldr	r2, [pc, #240]	; (1a0030ac <MiniRobInit+0xf8>)
1a002fbc:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240

	leftWheel.wheelStatus = 0;
1a002fc0:	4b3b      	ldr	r3, [pc, #236]	; (1a0030b0 <MiniRobInit+0xfc>)
1a002fc2:	2200      	movs	r2, #0
1a002fc4:	601a      	str	r2, [r3, #0]
	leftWheel.errorCount = 0;
1a002fc6:	4b3a      	ldr	r3, [pc, #232]	; (1a0030b0 <MiniRobInit+0xfc>)
1a002fc8:	2200      	movs	r2, #0
1a002fca:	605a      	str	r2, [r3, #4]

	rightWheel.wheelStatus = 0;
1a002fcc:	4b39      	ldr	r3, [pc, #228]	; (1a0030b4 <MiniRobInit+0x100>)
1a002fce:	2200      	movs	r2, #0
1a002fd0:	601a      	str	r2, [r3, #0]
	rightWheel.errorCount = 0;
1a002fd2:	4b38      	ldr	r3, [pc, #224]	; (1a0030b4 <MiniRobInit+0x100>)
1a002fd4:	2200      	movs	r2, #0
1a002fd6:	605a      	str	r2, [r3, #4]

	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, RIGHT_SENSOR_A_PORT_GPIO, RIGHT_SENSOR_A_PIN_GPIO);
1a002fd8:	2205      	movs	r2, #5
1a002fda:	2102      	movs	r1, #2
1a002fdc:	4836      	ldr	r0, [pc, #216]	; (1a0030b8 <MiniRobInit+0x104>)
1a002fde:	f7ff ff19 	bl	1a002e14 <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(RIGHT_SENSOR_A_PORT, RIGHT_SENSOR_A_PIN, SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | FUNC0);
1a002fe2:	2240      	movs	r2, #64	; 0x40
1a002fe4:	2105      	movs	r1, #5
1a002fe6:	2004      	movs	r0, #4
1a002fe8:	f7ff fee0 	bl	1a002dac <Chip_SCU_PinMuxSet>

	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO);
1a002fec:	2206      	movs	r2, #6
1a002fee:	2102      	movs	r1, #2
1a002ff0:	4831      	ldr	r0, [pc, #196]	; (1a0030b8 <MiniRobInit+0x104>)
1a002ff2:	f7ff ff0f 	bl	1a002e14 <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(RIGHT_SENSOR_B_PORT, RIGHT_SENSOR_B_PIN, SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | FUNC0);
1a002ff6:	2240      	movs	r2, #64	; 0x40
1a002ff8:	2106      	movs	r1, #6
1a002ffa:	2004      	movs	r0, #4
1a002ffc:	f7ff fed6 	bl	1a002dac <Chip_SCU_PinMuxSet>

	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, LEFT_SENSOR_A_PORT_GPIO, LEFT_SENSOR_A_PIN_GPIO);
1a003000:	2202      	movs	r2, #2
1a003002:	2102      	movs	r1, #2
1a003004:	482c      	ldr	r0, [pc, #176]	; (1a0030b8 <MiniRobInit+0x104>)
1a003006:	f7ff ff05 	bl	1a002e14 <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(LEFT_SENSOR_A_PORT, LEFT_SENSOR_A_PIN, SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | FUNC0);
1a00300a:	2240      	movs	r2, #64	; 0x40
1a00300c:	2102      	movs	r1, #2
1a00300e:	2004      	movs	r0, #4
1a003010:	f7ff fecc 	bl	1a002dac <Chip_SCU_PinMuxSet>

	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO);
1a003014:	220c      	movs	r2, #12
1a003016:	2105      	movs	r1, #5
1a003018:	4827      	ldr	r0, [pc, #156]	; (1a0030b8 <MiniRobInit+0x104>)
1a00301a:	f7ff fefb 	bl	1a002e14 <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(LEFT_SENSOR_B_PORT, LEFT_SENSOR_B_PIN, SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | FUNC0);
1a00301e:	2240      	movs	r2, #64	; 0x40
1a003020:	2108      	movs	r1, #8
1a003022:	2004      	movs	r0, #4
1a003024:	f7ff fec2 	bl	1a002dac <Chip_SCU_PinMuxSet>

	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_A_PORT_GPIO, LEFT_SENSOR_A_PIN_GPIO)) {
1a003028:	2202      	movs	r2, #2
1a00302a:	2102      	movs	r1, #2
1a00302c:	4822      	ldr	r0, [pc, #136]	; (1a0030b8 <MiniRobInit+0x104>)
1a00302e:	f7ff fed7 	bl	1a002de0 <Chip_GPIO_ReadPortBit>
1a003032:	4603      	mov	r3, r0
1a003034:	2b00      	cmp	r3, #0
1a003036:	d00d      	beq.n	1a003054 <MiniRobInit+0xa0>
		leftWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO) ? 2 : 3;
1a003038:	220c      	movs	r2, #12
1a00303a:	2105      	movs	r1, #5
1a00303c:	481e      	ldr	r0, [pc, #120]	; (1a0030b8 <MiniRobInit+0x104>)
1a00303e:	f7ff fecf 	bl	1a002de0 <Chip_GPIO_ReadPortBit>
1a003042:	4603      	mov	r3, r0

	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO);
	Chip_SCU_PinMuxSet(LEFT_SENSOR_B_PORT, LEFT_SENSOR_B_PIN, SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | FUNC0);

	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_A_PORT_GPIO, LEFT_SENSOR_A_PIN_GPIO)) {
		leftWheel.previousState =
1a003044:	2b00      	cmp	r3, #0
1a003046:	d001      	beq.n	1a00304c <MiniRobInit+0x98>
1a003048:	2202      	movs	r2, #2
1a00304a:	e000      	b.n	1a00304e <MiniRobInit+0x9a>
1a00304c:	2203      	movs	r2, #3
1a00304e:	4b18      	ldr	r3, [pc, #96]	; (1a0030b0 <MiniRobInit+0xfc>)
1a003050:	811a      	strh	r2, [r3, #8]
1a003052:	e008      	b.n	1a003066 <MiniRobInit+0xb2>
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO) ? 2 : 3;
	} else {
		leftWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO) ? 1 : 0;
1a003054:	220c      	movs	r2, #12
1a003056:	2105      	movs	r1, #5
1a003058:	4817      	ldr	r0, [pc, #92]	; (1a0030b8 <MiniRobInit+0x104>)
1a00305a:	f7ff fec1 	bl	1a002de0 <Chip_GPIO_ReadPortBit>
1a00305e:	4603      	mov	r3, r0

	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_A_PORT_GPIO, LEFT_SENSOR_A_PIN_GPIO)) {
		leftWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO) ? 2 : 3;
	} else {
		leftWheel.previousState =
1a003060:	b29a      	uxth	r2, r3
1a003062:	4b13      	ldr	r3, [pc, #76]	; (1a0030b0 <MiniRobInit+0xfc>)
1a003064:	811a      	strh	r2, [r3, #8]
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO) ? 1 : 0;
	}

	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_A_PORT_GPIO, RIGHT_SENSOR_A_PIN_GPIO)) {
1a003066:	2205      	movs	r2, #5
1a003068:	2102      	movs	r1, #2
1a00306a:	4813      	ldr	r0, [pc, #76]	; (1a0030b8 <MiniRobInit+0x104>)
1a00306c:	f7ff feb8 	bl	1a002de0 <Chip_GPIO_ReadPortBit>
1a003070:	4603      	mov	r3, r0
1a003072:	2b00      	cmp	r3, #0
1a003074:	d00d      	beq.n	1a003092 <MiniRobInit+0xde>
		rightWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO) ? 2 : 3;
1a003076:	2206      	movs	r2, #6
1a003078:	2102      	movs	r1, #2
1a00307a:	480f      	ldr	r0, [pc, #60]	; (1a0030b8 <MiniRobInit+0x104>)
1a00307c:	f7ff feb0 	bl	1a002de0 <Chip_GPIO_ReadPortBit>
1a003080:	4603      	mov	r3, r0
		leftWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO) ? 1 : 0;
	}

	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_A_PORT_GPIO, RIGHT_SENSOR_A_PIN_GPIO)) {
		rightWheel.previousState =
1a003082:	2b00      	cmp	r3, #0
1a003084:	d001      	beq.n	1a00308a <MiniRobInit+0xd6>
1a003086:	2202      	movs	r2, #2
1a003088:	e000      	b.n	1a00308c <MiniRobInit+0xd8>
1a00308a:	2203      	movs	r2, #3
1a00308c:	4b09      	ldr	r3, [pc, #36]	; (1a0030b4 <MiniRobInit+0x100>)
1a00308e:	811a      	strh	r2, [r3, #8]
	} else {
		rightWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO) ? 1 : 0;
	}

}
1a003090:	e008      	b.n	1a0030a4 <MiniRobInit+0xf0>
	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_A_PORT_GPIO, RIGHT_SENSOR_A_PIN_GPIO)) {
		rightWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO) ? 2 : 3;
	} else {
		rightWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO) ? 1 : 0;
1a003092:	2206      	movs	r2, #6
1a003094:	2102      	movs	r1, #2
1a003096:	4808      	ldr	r0, [pc, #32]	; (1a0030b8 <MiniRobInit+0x104>)
1a003098:	f7ff fea2 	bl	1a002de0 <Chip_GPIO_ReadPortBit>
1a00309c:	4603      	mov	r3, r0

	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_A_PORT_GPIO, RIGHT_SENSOR_A_PIN_GPIO)) {
		rightWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO) ? 2 : 3;
	} else {
		rightWheel.previousState =
1a00309e:	b29a      	uxth	r2, r3
1a0030a0:	4b04      	ldr	r3, [pc, #16]	; (1a0030b4 <MiniRobInit+0x100>)
1a0030a2:	811a      	strh	r2, [r3, #8]
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO) ? 1 : 0;
	}

}
1a0030a4:	bf00      	nop
1a0030a6:	bd80      	pop	{r7, pc}
1a0030a8:	10088174 	.word	0x10088174
1a0030ac:	1a002f91 	.word	0x1a002f91
1a0030b0:	100874e0 	.word	0x100874e0
1a0030b4:	100874ec 	.word	0x100874ec
1a0030b8:	400f4000 	.word	0x400f4000

1a0030bc <Chip_SCU_PinMuxSet>:
 * @return	Nothing
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a0030bc:	b480      	push	{r7}
1a0030be:	b083      	sub	sp, #12
1a0030c0:	af00      	add	r7, sp, #0
1a0030c2:	4603      	mov	r3, r0
1a0030c4:	71fb      	strb	r3, [r7, #7]
1a0030c6:	460b      	mov	r3, r1
1a0030c8:	71bb      	strb	r3, [r7, #6]
1a0030ca:	4613      	mov	r3, r2
1a0030cc:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0030ce:	4807      	ldr	r0, [pc, #28]	; (1a0030ec <Chip_SCU_PinMuxSet+0x30>)
1a0030d0:	79f9      	ldrb	r1, [r7, #7]
1a0030d2:	79bb      	ldrb	r3, [r7, #6]
1a0030d4:	88ba      	ldrh	r2, [r7, #4]
1a0030d6:	0149      	lsls	r1, r1, #5
1a0030d8:	440b      	add	r3, r1
1a0030da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a0030de:	bf00      	nop
1a0030e0:	370c      	adds	r7, #12
1a0030e2:	46bd      	mov	sp, r7
1a0030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0030e8:	4770      	bx	lr
1a0030ea:	bf00      	nop
1a0030ec:	40086000 	.word	0x40086000

1a0030f0 <Chip_GPIO_SetPinDIROutput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a0030f0:	b480      	push	{r7}
1a0030f2:	b083      	sub	sp, #12
1a0030f4:	af00      	add	r7, sp, #0
1a0030f6:	6078      	str	r0, [r7, #4]
1a0030f8:	460b      	mov	r3, r1
1a0030fa:	70fb      	strb	r3, [r7, #3]
1a0030fc:	4613      	mov	r3, r2
1a0030fe:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] |= 1UL << pin;
1a003100:	78fa      	ldrb	r2, [r7, #3]
1a003102:	78f9      	ldrb	r1, [r7, #3]
1a003104:	687b      	ldr	r3, [r7, #4]
1a003106:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a00310a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a00310e:	78bb      	ldrb	r3, [r7, #2]
1a003110:	2001      	movs	r0, #1
1a003112:	fa00 f303 	lsl.w	r3, r0, r3
1a003116:	4319      	orrs	r1, r3
1a003118:	687b      	ldr	r3, [r7, #4]
1a00311a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00311e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a003122:	bf00      	nop
1a003124:	370c      	adds	r7, #12
1a003126:	46bd      	mov	sp, r7
1a003128:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00312c:	4770      	bx	lr
1a00312e:	bf00      	nop

1a003130 <Chip_GPIO_SetPinDIRInput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a003130:	b480      	push	{r7}
1a003132:	b083      	sub	sp, #12
1a003134:	af00      	add	r7, sp, #0
1a003136:	6078      	str	r0, [r7, #4]
1a003138:	460b      	mov	r3, r1
1a00313a:	70fb      	strb	r3, [r7, #3]
1a00313c:	4613      	mov	r3, r2
1a00313e:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a003140:	78fa      	ldrb	r2, [r7, #3]
1a003142:	78f9      	ldrb	r1, [r7, #3]
1a003144:	687b      	ldr	r3, [r7, #4]
1a003146:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a00314a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a00314e:	78bb      	ldrb	r3, [r7, #2]
1a003150:	2001      	movs	r0, #1
1a003152:	fa00 f303 	lsl.w	r3, r0, r3
1a003156:	43db      	mvns	r3, r3
1a003158:	4019      	ands	r1, r3
1a00315a:	687b      	ldr	r3, [r7, #4]
1a00315c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a003164:	bf00      	nop
1a003166:	370c      	adds	r7, #12
1a003168:	46bd      	mov	sp, r7
1a00316a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00316e:	4770      	bx	lr

1a003170 <Chip_GPIO_SetPinOutHigh>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a003170:	b480      	push	{r7}
1a003172:	b083      	sub	sp, #12
1a003174:	af00      	add	r7, sp, #0
1a003176:	6078      	str	r0, [r7, #4]
1a003178:	460b      	mov	r3, r1
1a00317a:	70fb      	strb	r3, [r7, #3]
1a00317c:	4613      	mov	r3, r2
1a00317e:	70bb      	strb	r3, [r7, #2]
	pGPIO->SET[port] = (1 << pin);
1a003180:	78fa      	ldrb	r2, [r7, #3]
1a003182:	78bb      	ldrb	r3, [r7, #2]
1a003184:	2101      	movs	r1, #1
1a003186:	fa01 f303 	lsl.w	r3, r1, r3
1a00318a:	4619      	mov	r1, r3
1a00318c:	687b      	ldr	r3, [r7, #4]
1a00318e:	f502 6208 	add.w	r2, r2, #2176	; 0x880
1a003192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a003196:	bf00      	nop
1a003198:	370c      	adds	r7, #12
1a00319a:	46bd      	mov	sp, r7
1a00319c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0031a0:	4770      	bx	lr
1a0031a2:	bf00      	nop

1a0031a4 <Chip_GPIO_SetPinOutLow>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a0031a4:	b480      	push	{r7}
1a0031a6:	b083      	sub	sp, #12
1a0031a8:	af00      	add	r7, sp, #0
1a0031aa:	6078      	str	r0, [r7, #4]
1a0031ac:	460b      	mov	r3, r1
1a0031ae:	70fb      	strb	r3, [r7, #3]
1a0031b0:	4613      	mov	r3, r2
1a0031b2:	70bb      	strb	r3, [r7, #2]
	pGPIO->CLR[port] = (1 << pin);
1a0031b4:	78fa      	ldrb	r2, [r7, #3]
1a0031b6:	78bb      	ldrb	r3, [r7, #2]
1a0031b8:	2101      	movs	r1, #1
1a0031ba:	fa01 f303 	lsl.w	r3, r1, r3
1a0031be:	4619      	mov	r1, r3
1a0031c0:	687b      	ldr	r3, [r7, #4]
1a0031c2:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
1a0031c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a0031ca:	bf00      	nop
1a0031cc:	370c      	adds	r7, #12
1a0031ce:	46bd      	mov	sp, r7
1a0031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0031d4:	4770      	bx	lr
1a0031d6:	bf00      	nop

1a0031d8 <Chip_TIMER_Enable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @return	Nothing
 * @note	Enables the timer to start counting.
 */
STATIC INLINE void Chip_TIMER_Enable(LPC_TIMER_T *pTMR)
{
1a0031d8:	b480      	push	{r7}
1a0031da:	b083      	sub	sp, #12
1a0031dc:	af00      	add	r7, sp, #0
1a0031de:	6078      	str	r0, [r7, #4]
	pTMR->TCR |= TIMER_ENABLE;
1a0031e0:	687b      	ldr	r3, [r7, #4]
1a0031e2:	685b      	ldr	r3, [r3, #4]
1a0031e4:	f043 0201 	orr.w	r2, r3, #1
1a0031e8:	687b      	ldr	r3, [r7, #4]
1a0031ea:	605a      	str	r2, [r3, #4]
}
1a0031ec:	bf00      	nop
1a0031ee:	370c      	adds	r7, #12
1a0031f0:	46bd      	mov	sp, r7
1a0031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0031f6:	4770      	bx	lr

1a0031f8 <Chip_TIMER_Disable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @return	Nothing
 * @note	Disables the timer to stop counting.
 */
STATIC INLINE void Chip_TIMER_Disable(LPC_TIMER_T *pTMR)
{
1a0031f8:	b480      	push	{r7}
1a0031fa:	b083      	sub	sp, #12
1a0031fc:	af00      	add	r7, sp, #0
1a0031fe:	6078      	str	r0, [r7, #4]
	pTMR->TCR &= ~TIMER_ENABLE;
1a003200:	687b      	ldr	r3, [r7, #4]
1a003202:	685b      	ldr	r3, [r3, #4]
1a003204:	f023 0201 	bic.w	r2, r3, #1
1a003208:	687b      	ldr	r3, [r7, #4]
1a00320a:	605a      	str	r2, [r3, #4]
}
1a00320c:	bf00      	nop
1a00320e:	370c      	adds	r7, #12
1a003210:	46bd      	mov	sp, r7
1a003212:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003216:	4770      	bx	lr

1a003218 <Chip_TIMER_PrescaleSet>:
 * @param	prescale	: Prescale value to set the prescale register to
 * @return	Nothing
 * @note	Sets the prescale count value.
 */
STATIC INLINE void Chip_TIMER_PrescaleSet(LPC_TIMER_T *pTMR, uint32_t prescale)
{
1a003218:	b480      	push	{r7}
1a00321a:	b083      	sub	sp, #12
1a00321c:	af00      	add	r7, sp, #0
1a00321e:	6078      	str	r0, [r7, #4]
1a003220:	6039      	str	r1, [r7, #0]
	pTMR->PR = prescale;
1a003222:	687b      	ldr	r3, [r7, #4]
1a003224:	683a      	ldr	r2, [r7, #0]
1a003226:	60da      	str	r2, [r3, #12]
}
1a003228:	bf00      	nop
1a00322a:	370c      	adds	r7, #12
1a00322c:	46bd      	mov	sp, r7
1a00322e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003232:	4770      	bx	lr

1a003234 <Chip_TIMER_SetMatch>:
 * @param	matchval	: Match value for the selected match count
 * @return	Nothing
 * @note	Sets one of the timer match values.
 */
STATIC INLINE void Chip_TIMER_SetMatch(LPC_TIMER_T *pTMR, int8_t matchnum, uint32_t matchval)
{
1a003234:	b480      	push	{r7}
1a003236:	b085      	sub	sp, #20
1a003238:	af00      	add	r7, sp, #0
1a00323a:	60f8      	str	r0, [r7, #12]
1a00323c:	460b      	mov	r3, r1
1a00323e:	607a      	str	r2, [r7, #4]
1a003240:	72fb      	strb	r3, [r7, #11]
	pTMR->MR[matchnum] = matchval;
1a003242:	f997 200b 	ldrsb.w	r2, [r7, #11]
1a003246:	68fb      	ldr	r3, [r7, #12]
1a003248:	3206      	adds	r2, #6
1a00324a:	6879      	ldr	r1, [r7, #4]
1a00324c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a003250:	bf00      	nop
1a003252:	3714      	adds	r7, #20
1a003254:	46bd      	mov	sp, r7
1a003256:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00325a:	4770      	bx	lr

1a00325c <Chip_TIMER_MatchDisableInt>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchDisableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a00325c:	b480      	push	{r7}
1a00325e:	b083      	sub	sp, #12
1a003260:	af00      	add	r7, sp, #0
1a003262:	6078      	str	r0, [r7, #4]
1a003264:	460b      	mov	r3, r1
1a003266:	70fb      	strb	r3, [r7, #3]
	pTMR->MCR &= ~TIMER_INT_ON_MATCH(matchnum);
1a003268:	687b      	ldr	r3, [r7, #4]
1a00326a:	6959      	ldr	r1, [r3, #20]
1a00326c:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a003270:	4613      	mov	r3, r2
1a003272:	005b      	lsls	r3, r3, #1
1a003274:	4413      	add	r3, r2
1a003276:	2201      	movs	r2, #1
1a003278:	fa02 f303 	lsl.w	r3, r2, r3
1a00327c:	43db      	mvns	r3, r3
1a00327e:	ea01 0203 	and.w	r2, r1, r3
1a003282:	687b      	ldr	r3, [r7, #4]
1a003284:	615a      	str	r2, [r3, #20]
}
1a003286:	bf00      	nop
1a003288:	370c      	adds	r7, #12
1a00328a:	46bd      	mov	sp, r7
1a00328c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003290:	4770      	bx	lr
1a003292:	bf00      	nop

1a003294 <Chip_TIMER_ResetOnMatchEnable>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_ResetOnMatchEnable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a003294:	b480      	push	{r7}
1a003296:	b083      	sub	sp, #12
1a003298:	af00      	add	r7, sp, #0
1a00329a:	6078      	str	r0, [r7, #4]
1a00329c:	460b      	mov	r3, r1
1a00329e:	70fb      	strb	r3, [r7, #3]
	pTMR->MCR |= TIMER_RESET_ON_MATCH(matchnum);
1a0032a0:	687b      	ldr	r3, [r7, #4]
1a0032a2:	6959      	ldr	r1, [r3, #20]
1a0032a4:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a0032a8:	4613      	mov	r3, r2
1a0032aa:	005b      	lsls	r3, r3, #1
1a0032ac:	4413      	add	r3, r2
1a0032ae:	3301      	adds	r3, #1
1a0032b0:	2201      	movs	r2, #1
1a0032b2:	fa02 f303 	lsl.w	r3, r2, r3
1a0032b6:	ea41 0203 	orr.w	r2, r1, r3
1a0032ba:	687b      	ldr	r3, [r7, #4]
1a0032bc:	615a      	str	r2, [r3, #20]
}
1a0032be:	bf00      	nop
1a0032c0:	370c      	adds	r7, #12
1a0032c2:	46bd      	mov	sp, r7
1a0032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0032c8:	4770      	bx	lr
1a0032ca:	bf00      	nop

1a0032cc <Chip_TIMER_ResetOnMatchDisable>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_ResetOnMatchDisable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a0032cc:	b480      	push	{r7}
1a0032ce:	b083      	sub	sp, #12
1a0032d0:	af00      	add	r7, sp, #0
1a0032d2:	6078      	str	r0, [r7, #4]
1a0032d4:	460b      	mov	r3, r1
1a0032d6:	70fb      	strb	r3, [r7, #3]
	pTMR->MCR &= ~TIMER_RESET_ON_MATCH(matchnum);
1a0032d8:	687b      	ldr	r3, [r7, #4]
1a0032da:	6959      	ldr	r1, [r3, #20]
1a0032dc:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a0032e0:	4613      	mov	r3, r2
1a0032e2:	005b      	lsls	r3, r3, #1
1a0032e4:	4413      	add	r3, r2
1a0032e6:	3301      	adds	r3, #1
1a0032e8:	2201      	movs	r2, #1
1a0032ea:	fa02 f303 	lsl.w	r3, r2, r3
1a0032ee:	43db      	mvns	r3, r3
1a0032f0:	ea01 0203 	and.w	r2, r1, r3
1a0032f4:	687b      	ldr	r3, [r7, #4]
1a0032f6:	615a      	str	r2, [r3, #20]
}
1a0032f8:	bf00      	nop
1a0032fa:	370c      	adds	r7, #12
1a0032fc:	46bd      	mov	sp, r7
1a0032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003302:	4770      	bx	lr

1a003304 <Chip_TIMER_StopOnMatchDisable>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_StopOnMatchDisable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a003304:	b480      	push	{r7}
1a003306:	b083      	sub	sp, #12
1a003308:	af00      	add	r7, sp, #0
1a00330a:	6078      	str	r0, [r7, #4]
1a00330c:	460b      	mov	r3, r1
1a00330e:	70fb      	strb	r3, [r7, #3]
	pTMR->MCR &= ~TIMER_STOP_ON_MATCH(matchnum);
1a003310:	687b      	ldr	r3, [r7, #4]
1a003312:	6959      	ldr	r1, [r3, #20]
1a003314:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a003318:	4613      	mov	r3, r2
1a00331a:	005b      	lsls	r3, r3, #1
1a00331c:	4413      	add	r3, r2
1a00331e:	3302      	adds	r3, #2
1a003320:	2201      	movs	r2, #1
1a003322:	fa02 f303 	lsl.w	r3, r2, r3
1a003326:	43db      	mvns	r3, r3
1a003328:	ea01 0203 	and.w	r2, r1, r3
1a00332c:	687b      	ldr	r3, [r7, #4]
1a00332e:	615a      	str	r2, [r3, #20]
}
1a003330:	bf00      	nop
1a003332:	370c      	adds	r7, #12
1a003334:	46bd      	mov	sp, r7
1a003336:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00333a:	4770      	bx	lr

1a00333c <PWMInit>:
	uint16_t timerChannel[2]; /* map output[0-1] to the timer match channel */
	uint16_t enabled[2];/*1 if the output is enable*/
	uint32_t period; /* base period of the timer in microseconds*/
} halTimers[3]; /*one instance for the each of the channels*/

void PWMInit(void) {
1a00333c:	b580      	push	{r7, lr}
1a00333e:	b082      	sub	sp, #8
1a003340:	af00      	add	r7, sp, #0
	halTimers[CHANNEL_A_TIMER_INDEX].timer = CHANNEL_A_TIMER;
1a003342:	4ba0      	ldr	r3, [pc, #640]	; (1a0035c4 <PWMInit+0x288>)
1a003344:	4aa0      	ldr	r2, [pc, #640]	; (1a0035c8 <PWMInit+0x28c>)
1a003346:	601a      	str	r2, [r3, #0]
	halTimers[CHANNEL_A_TIMER_INDEX].port[0] = CHANNEL_A_0_PORT;
1a003348:	4b9e      	ldr	r3, [pc, #632]	; (1a0035c4 <PWMInit+0x288>)
1a00334a:	2202      	movs	r2, #2
1a00334c:	731a      	strb	r2, [r3, #12]
	halTimers[CHANNEL_A_TIMER_INDEX].port[1] = CHANNEL_A_1_PORT;
1a00334e:	4b9d      	ldr	r3, [pc, #628]	; (1a0035c4 <PWMInit+0x288>)
1a003350:	2202      	movs	r2, #2
1a003352:	735a      	strb	r2, [r3, #13]
	halTimers[CHANNEL_A_TIMER_INDEX].pin[0] = CHANNEL_A_0_PIN;
1a003354:	4b9b      	ldr	r3, [pc, #620]	; (1a0035c4 <PWMInit+0x288>)
1a003356:	2203      	movs	r2, #3
1a003358:	739a      	strb	r2, [r3, #14]
	halTimers[CHANNEL_A_TIMER_INDEX].pin[1] = CHANNEL_A_1_PIN;
1a00335a:	4b9a      	ldr	r3, [pc, #616]	; (1a0035c4 <PWMInit+0x288>)
1a00335c:	2204      	movs	r2, #4
1a00335e:	73da      	strb	r2, [r3, #15]
	halTimers[CHANNEL_A_TIMER_INDEX].portGpio[0] = CHANNEL_A_0_PORT_GPIO;
1a003360:	4b98      	ldr	r3, [pc, #608]	; (1a0035c4 <PWMInit+0x288>)
1a003362:	2205      	movs	r2, #5
1a003364:	741a      	strb	r2, [r3, #16]
	halTimers[CHANNEL_A_TIMER_INDEX].portGpio[1] = CHANNEL_A_1_PORT_GPIO;
1a003366:	4b97      	ldr	r3, [pc, #604]	; (1a0035c4 <PWMInit+0x288>)
1a003368:	2205      	movs	r2, #5
1a00336a:	745a      	strb	r2, [r3, #17]
	halTimers[CHANNEL_A_TIMER_INDEX].pinGpio[0] = CHANNEL_A_0_PIN_GPIO;
1a00336c:	4b95      	ldr	r3, [pc, #596]	; (1a0035c4 <PWMInit+0x288>)
1a00336e:	2203      	movs	r2, #3
1a003370:	749a      	strb	r2, [r3, #18]
	halTimers[CHANNEL_A_TIMER_INDEX].pinGpio[1] = CHANNEL_A_1_PIN_GPIO;
1a003372:	4b94      	ldr	r3, [pc, #592]	; (1a0035c4 <PWMInit+0x288>)
1a003374:	2204      	movs	r2, #4
1a003376:	74da      	strb	r2, [r3, #19]
	halTimers[CHANNEL_A_TIMER_INDEX].timerMode[0] = MD_PUP | FUNC6;
1a003378:	4b92      	ldr	r3, [pc, #584]	; (1a0035c4 <PWMInit+0x288>)
1a00337a:	2206      	movs	r2, #6
1a00337c:	831a      	strh	r2, [r3, #24]
	halTimers[CHANNEL_A_TIMER_INDEX].timerMode[1] = MD_PUP | FUNC6;
1a00337e:	4b91      	ldr	r3, [pc, #580]	; (1a0035c4 <PWMInit+0x288>)
1a003380:	2206      	movs	r2, #6
1a003382:	835a      	strh	r2, [r3, #26]
	halTimers[CHANNEL_A_TIMER_INDEX].gpioMode[0] = MD_PUP | FUNC4;
1a003384:	4b8f      	ldr	r3, [pc, #572]	; (1a0035c4 <PWMInit+0x288>)
1a003386:	2204      	movs	r2, #4
1a003388:	829a      	strh	r2, [r3, #20]
	halTimers[CHANNEL_A_TIMER_INDEX].gpioMode[1] = MD_PUP | FUNC4;
1a00338a:	4b8e      	ldr	r3, [pc, #568]	; (1a0035c4 <PWMInit+0x288>)
1a00338c:	2204      	movs	r2, #4
1a00338e:	82da      	strh	r2, [r3, #22]
	halTimers[CHANNEL_A_TIMER_INDEX].timerChannel[0] = 0;
1a003390:	4b8c      	ldr	r3, [pc, #560]	; (1a0035c4 <PWMInit+0x288>)
1a003392:	2200      	movs	r2, #0
1a003394:	839a      	strh	r2, [r3, #28]
	halTimers[CHANNEL_A_TIMER_INDEX].timerChannel[1] = 1;
1a003396:	4b8b      	ldr	r3, [pc, #556]	; (1a0035c4 <PWMInit+0x288>)
1a003398:	2201      	movs	r2, #1
1a00339a:	83da      	strh	r2, [r3, #30]
	halTimers[CHANNEL_A_TIMER_INDEX].witdh[0] = 0;
1a00339c:	4b89      	ldr	r3, [pc, #548]	; (1a0035c4 <PWMInit+0x288>)
1a00339e:	2200      	movs	r2, #0
1a0033a0:	605a      	str	r2, [r3, #4]
	halTimers[CHANNEL_A_TIMER_INDEX].witdh[1] = 0;
1a0033a2:	4b88      	ldr	r3, [pc, #544]	; (1a0035c4 <PWMInit+0x288>)
1a0033a4:	2200      	movs	r2, #0
1a0033a6:	609a      	str	r2, [r3, #8]
	halTimers[CHANNEL_A_TIMER_INDEX].enabled[0] = 0;
1a0033a8:	4b86      	ldr	r3, [pc, #536]	; (1a0035c4 <PWMInit+0x288>)
1a0033aa:	2200      	movs	r2, #0
1a0033ac:	841a      	strh	r2, [r3, #32]
	halTimers[CHANNEL_A_TIMER_INDEX].enabled[1] = 0;
1a0033ae:	4b85      	ldr	r3, [pc, #532]	; (1a0035c4 <PWMInit+0x288>)
1a0033b0:	2200      	movs	r2, #0
1a0033b2:	845a      	strh	r2, [r3, #34]	; 0x22
	halTimers[CHANNEL_A_TIMER_INDEX].period = 0;
1a0033b4:	4b83      	ldr	r3, [pc, #524]	; (1a0035c4 <PWMInit+0x288>)
1a0033b6:	2200      	movs	r2, #0
1a0033b8:	625a      	str	r2, [r3, #36]	; 0x24
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, CHANNEL_A_0_PORT_GPIO, CHANNEL_A_0_PIN_GPIO);
1a0033ba:	2203      	movs	r2, #3
1a0033bc:	2105      	movs	r1, #5
1a0033be:	4883      	ldr	r0, [pc, #524]	; (1a0035cc <PWMInit+0x290>)
1a0033c0:	f7ff fef0 	bl	1a0031a4 <Chip_GPIO_SetPinOutLow>
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, CHANNEL_A_1_PORT_GPIO, CHANNEL_A_1_PIN_GPIO);
1a0033c4:	2204      	movs	r2, #4
1a0033c6:	2105      	movs	r1, #5
1a0033c8:	4880      	ldr	r0, [pc, #512]	; (1a0035cc <PWMInit+0x290>)
1a0033ca:	f7ff feeb 	bl	1a0031a4 <Chip_GPIO_SetPinOutLow>
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_A_0_PORT_GPIO, CHANNEL_A_0_PIN_GPIO);
1a0033ce:	2203      	movs	r2, #3
1a0033d0:	2105      	movs	r1, #5
1a0033d2:	487e      	ldr	r0, [pc, #504]	; (1a0035cc <PWMInit+0x290>)
1a0033d4:	f7ff feac 	bl	1a003130 <Chip_GPIO_SetPinDIRInput>
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_A_1_PORT_GPIO, CHANNEL_A_1_PIN_GPIO);
1a0033d8:	2204      	movs	r2, #4
1a0033da:	2105      	movs	r1, #5
1a0033dc:	487b      	ldr	r0, [pc, #492]	; (1a0035cc <PWMInit+0x290>)
1a0033de:	f7ff fea7 	bl	1a003130 <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(CHANNEL_A_0_PORT, CHANNEL_A_0_PIN, halTimers[CHANNEL_A_TIMER_INDEX].gpioMode[0]);
1a0033e2:	4b78      	ldr	r3, [pc, #480]	; (1a0035c4 <PWMInit+0x288>)
1a0033e4:	8a9b      	ldrh	r3, [r3, #20]
1a0033e6:	461a      	mov	r2, r3
1a0033e8:	2103      	movs	r1, #3
1a0033ea:	2002      	movs	r0, #2
1a0033ec:	f7ff fe66 	bl	1a0030bc <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(CHANNEL_A_1_PORT, CHANNEL_A_1_PIN, halTimers[CHANNEL_A_TIMER_INDEX].gpioMode[1]);
1a0033f0:	4b74      	ldr	r3, [pc, #464]	; (1a0035c4 <PWMInit+0x288>)
1a0033f2:	8adb      	ldrh	r3, [r3, #22]
1a0033f4:	461a      	mov	r2, r3
1a0033f6:	2104      	movs	r1, #4
1a0033f8:	2002      	movs	r0, #2
1a0033fa:	f7ff fe5f 	bl	1a0030bc <Chip_SCU_PinMuxSet>

	halTimers[CHANNEL_B_TIMER_INDEX].timer = CHANNEL_B_TIMER;
1a0033fe:	4b71      	ldr	r3, [pc, #452]	; (1a0035c4 <PWMInit+0x288>)
1a003400:	4a73      	ldr	r2, [pc, #460]	; (1a0035d0 <PWMInit+0x294>)
1a003402:	629a      	str	r2, [r3, #40]	; 0x28
	halTimers[CHANNEL_B_TIMER_INDEX].port[0] = CHANNEL_B_0_PORT;
1a003404:	4b6f      	ldr	r3, [pc, #444]	; (1a0035c4 <PWMInit+0x288>)
1a003406:	2206      	movs	r2, #6
1a003408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	halTimers[CHANNEL_B_TIMER_INDEX].port[1] = CHANNEL_B_1_PORT;
1a00340c:	4b6d      	ldr	r3, [pc, #436]	; (1a0035c4 <PWMInit+0x288>)
1a00340e:	2206      	movs	r2, #6
1a003410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	halTimers[CHANNEL_B_TIMER_INDEX].pin[0] = CHANNEL_B_0_PIN;
1a003414:	4b6b      	ldr	r3, [pc, #428]	; (1a0035c4 <PWMInit+0x288>)
1a003416:	2207      	movs	r2, #7
1a003418:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	halTimers[CHANNEL_B_TIMER_INDEX].pin[1] = CHANNEL_B_1_PIN;
1a00341c:	4b69      	ldr	r3, [pc, #420]	; (1a0035c4 <PWMInit+0x288>)
1a00341e:	2208      	movs	r2, #8
1a003420:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	halTimers[CHANNEL_B_TIMER_INDEX].portGpio[0] = CHANNEL_B_0_PORT_GPIO;
1a003424:	4b67      	ldr	r3, [pc, #412]	; (1a0035c4 <PWMInit+0x288>)
1a003426:	2205      	movs	r2, #5
1a003428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	halTimers[CHANNEL_B_TIMER_INDEX].portGpio[1] = CHANNEL_B_1_PORT_GPIO;
1a00342c:	4b65      	ldr	r3, [pc, #404]	; (1a0035c4 <PWMInit+0x288>)
1a00342e:	2205      	movs	r2, #5
1a003430:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	halTimers[CHANNEL_B_TIMER_INDEX].pinGpio[0] = CHANNEL_B_0_PIN_GPIO;
1a003434:	4b63      	ldr	r3, [pc, #396]	; (1a0035c4 <PWMInit+0x288>)
1a003436:	220f      	movs	r2, #15
1a003438:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	halTimers[CHANNEL_B_TIMER_INDEX].pinGpio[1] = CHANNEL_B_1_PIN_GPIO;
1a00343c:	4b61      	ldr	r3, [pc, #388]	; (1a0035c4 <PWMInit+0x288>)
1a00343e:	2210      	movs	r2, #16
1a003440:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	halTimers[CHANNEL_B_TIMER_INDEX].timerMode[0] = MD_PUP | FUNC5;
1a003444:	4b5f      	ldr	r3, [pc, #380]	; (1a0035c4 <PWMInit+0x288>)
1a003446:	2205      	movs	r2, #5
1a003448:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	halTimers[CHANNEL_B_TIMER_INDEX].timerMode[1] = MD_PUP | FUNC5;
1a00344c:	4b5d      	ldr	r3, [pc, #372]	; (1a0035c4 <PWMInit+0x288>)
1a00344e:	2205      	movs	r2, #5
1a003450:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	halTimers[CHANNEL_B_TIMER_INDEX].gpioMode[0] = MD_PUP | FUNC4;
1a003454:	4b5b      	ldr	r3, [pc, #364]	; (1a0035c4 <PWMInit+0x288>)
1a003456:	2204      	movs	r2, #4
1a003458:	879a      	strh	r2, [r3, #60]	; 0x3c
	halTimers[CHANNEL_B_TIMER_INDEX].gpioMode[1] = MD_PUP | FUNC4;
1a00345a:	4b5a      	ldr	r3, [pc, #360]	; (1a0035c4 <PWMInit+0x288>)
1a00345c:	2204      	movs	r2, #4
1a00345e:	87da      	strh	r2, [r3, #62]	; 0x3e
	halTimers[CHANNEL_B_TIMER_INDEX].timerChannel[0] = 0;
1a003460:	4b58      	ldr	r3, [pc, #352]	; (1a0035c4 <PWMInit+0x288>)
1a003462:	2200      	movs	r2, #0
1a003464:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	halTimers[CHANNEL_B_TIMER_INDEX].timerChannel[1] = 1;
1a003468:	4b56      	ldr	r3, [pc, #344]	; (1a0035c4 <PWMInit+0x288>)
1a00346a:	2201      	movs	r2, #1
1a00346c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	halTimers[CHANNEL_B_TIMER_INDEX].witdh[0] = 0;
1a003470:	4b54      	ldr	r3, [pc, #336]	; (1a0035c4 <PWMInit+0x288>)
1a003472:	2200      	movs	r2, #0
1a003474:	62da      	str	r2, [r3, #44]	; 0x2c
	halTimers[CHANNEL_B_TIMER_INDEX].witdh[1] = 0;
1a003476:	4b53      	ldr	r3, [pc, #332]	; (1a0035c4 <PWMInit+0x288>)
1a003478:	2200      	movs	r2, #0
1a00347a:	631a      	str	r2, [r3, #48]	; 0x30
	halTimers[CHANNEL_B_TIMER_INDEX].enabled[0] = 0;
1a00347c:	4b51      	ldr	r3, [pc, #324]	; (1a0035c4 <PWMInit+0x288>)
1a00347e:	2200      	movs	r2, #0
1a003480:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	halTimers[CHANNEL_B_TIMER_INDEX].enabled[1] = 0;
1a003484:	4b4f      	ldr	r3, [pc, #316]	; (1a0035c4 <PWMInit+0x288>)
1a003486:	2200      	movs	r2, #0
1a003488:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	halTimers[CHANNEL_B_TIMER_INDEX].period = 0;
1a00348c:	4b4d      	ldr	r3, [pc, #308]	; (1a0035c4 <PWMInit+0x288>)
1a00348e:	2200      	movs	r2, #0
1a003490:	64da      	str	r2, [r3, #76]	; 0x4c
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, CHANNEL_B_0_PORT_GPIO, CHANNEL_B_0_PIN_GPIO);
1a003492:	220f      	movs	r2, #15
1a003494:	2105      	movs	r1, #5
1a003496:	484d      	ldr	r0, [pc, #308]	; (1a0035cc <PWMInit+0x290>)
1a003498:	f7ff fe84 	bl	1a0031a4 <Chip_GPIO_SetPinOutLow>
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, CHANNEL_B_1_PORT_GPIO, CHANNEL_B_1_PIN_GPIO);
1a00349c:	2210      	movs	r2, #16
1a00349e:	2105      	movs	r1, #5
1a0034a0:	484a      	ldr	r0, [pc, #296]	; (1a0035cc <PWMInit+0x290>)
1a0034a2:	f7ff fe7f 	bl	1a0031a4 <Chip_GPIO_SetPinOutLow>
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_B_0_PORT_GPIO, CHANNEL_B_0_PIN_GPIO);
1a0034a6:	220f      	movs	r2, #15
1a0034a8:	2105      	movs	r1, #5
1a0034aa:	4848      	ldr	r0, [pc, #288]	; (1a0035cc <PWMInit+0x290>)
1a0034ac:	f7ff fe40 	bl	1a003130 <Chip_GPIO_SetPinDIRInput>
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_B_1_PORT_GPIO, CHANNEL_B_1_PIN_GPIO);
1a0034b0:	2210      	movs	r2, #16
1a0034b2:	2105      	movs	r1, #5
1a0034b4:	4845      	ldr	r0, [pc, #276]	; (1a0035cc <PWMInit+0x290>)
1a0034b6:	f7ff fe3b 	bl	1a003130 <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(CHANNEL_B_0_PORT, CHANNEL_B_0_PIN, halTimers[CHANNEL_B_TIMER_INDEX].gpioMode[0]);
1a0034ba:	4b42      	ldr	r3, [pc, #264]	; (1a0035c4 <PWMInit+0x288>)
1a0034bc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
1a0034be:	461a      	mov	r2, r3
1a0034c0:	2107      	movs	r1, #7
1a0034c2:	2006      	movs	r0, #6
1a0034c4:	f7ff fdfa 	bl	1a0030bc <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(CHANNEL_B_1_PORT, CHANNEL_B_1_PIN, halTimers[CHANNEL_B_TIMER_INDEX].gpioMode[1]);
1a0034c8:	4b3e      	ldr	r3, [pc, #248]	; (1a0035c4 <PWMInit+0x288>)
1a0034ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
1a0034cc:	461a      	mov	r2, r3
1a0034ce:	2108      	movs	r1, #8
1a0034d0:	2006      	movs	r0, #6
1a0034d2:	f7ff fdf3 	bl	1a0030bc <Chip_SCU_PinMuxSet>

	halTimers[CHANNEL_C_TIMER_INDEX].timer = CHANNEL_C_TIMER;
1a0034d6:	4b3b      	ldr	r3, [pc, #236]	; (1a0035c4 <PWMInit+0x288>)
1a0034d8:	4a3e      	ldr	r2, [pc, #248]	; (1a0035d4 <PWMInit+0x298>)
1a0034da:	651a      	str	r2, [r3, #80]	; 0x50
	halTimers[CHANNEL_C_TIMER_INDEX].port[0] = CHANNEL_C_0_PORT;
1a0034dc:	4b39      	ldr	r3, [pc, #228]	; (1a0035c4 <PWMInit+0x288>)
1a0034de:	2202      	movs	r2, #2
1a0034e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	halTimers[CHANNEL_C_TIMER_INDEX].port[1] = CHANNEL_C_1_PORT;
1a0034e4:	4b37      	ldr	r3, [pc, #220]	; (1a0035c4 <PWMInit+0x288>)
1a0034e6:	2202      	movs	r2, #2
1a0034e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	halTimers[CHANNEL_C_TIMER_INDEX].pin[0] = CHANNEL_C_0_PIN;
1a0034ec:	4b35      	ldr	r3, [pc, #212]	; (1a0035c4 <PWMInit+0x288>)
1a0034ee:	2208      	movs	r2, #8
1a0034f0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	halTimers[CHANNEL_C_TIMER_INDEX].pin[1] = CHANNEL_C_1_PIN;
1a0034f4:	4b33      	ldr	r3, [pc, #204]	; (1a0035c4 <PWMInit+0x288>)
1a0034f6:	2209      	movs	r2, #9
1a0034f8:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	halTimers[CHANNEL_C_TIMER_INDEX].portGpio[0] = CHANNEL_C_0_PORT_GPIO;
1a0034fc:	4b31      	ldr	r3, [pc, #196]	; (1a0035c4 <PWMInit+0x288>)
1a0034fe:	2205      	movs	r2, #5
1a003500:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	halTimers[CHANNEL_C_TIMER_INDEX].portGpio[1] = CHANNEL_C_1_PORT_GPIO;
1a003504:	4b2f      	ldr	r3, [pc, #188]	; (1a0035c4 <PWMInit+0x288>)
1a003506:	2201      	movs	r2, #1
1a003508:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	halTimers[CHANNEL_C_TIMER_INDEX].pinGpio[0] = CHANNEL_C_0_PIN_GPIO;
1a00350c:	4b2d      	ldr	r3, [pc, #180]	; (1a0035c4 <PWMInit+0x288>)
1a00350e:	2207      	movs	r2, #7
1a003510:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	halTimers[CHANNEL_C_TIMER_INDEX].pinGpio[1] = CHANNEL_C_1_PIN_GPIO;
1a003514:	4b2b      	ldr	r3, [pc, #172]	; (1a0035c4 <PWMInit+0x288>)
1a003516:	220a      	movs	r2, #10
1a003518:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	halTimers[CHANNEL_C_TIMER_INDEX].timerMode[0] = MD_PUP | FUNC1;
1a00351c:	4b29      	ldr	r3, [pc, #164]	; (1a0035c4 <PWMInit+0x288>)
1a00351e:	2201      	movs	r2, #1
1a003520:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	halTimers[CHANNEL_C_TIMER_INDEX].timerMode[1] = MD_PUP | FUNC1;
1a003524:	4b27      	ldr	r3, [pc, #156]	; (1a0035c4 <PWMInit+0x288>)
1a003526:	2201      	movs	r2, #1
1a003528:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	halTimers[CHANNEL_C_TIMER_INDEX].gpioMode[0] = MD_PUP | FUNC4;
1a00352c:	4b25      	ldr	r3, [pc, #148]	; (1a0035c4 <PWMInit+0x288>)
1a00352e:	2204      	movs	r2, #4
1a003530:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	halTimers[CHANNEL_C_TIMER_INDEX].gpioMode[1] = MD_PUP | FUNC0;
1a003534:	4b23      	ldr	r3, [pc, #140]	; (1a0035c4 <PWMInit+0x288>)
1a003536:	2200      	movs	r2, #0
1a003538:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	halTimers[CHANNEL_C_TIMER_INDEX].timerChannel[0] = 0;
1a00353c:	4b21      	ldr	r3, [pc, #132]	; (1a0035c4 <PWMInit+0x288>)
1a00353e:	2200      	movs	r2, #0
1a003540:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	halTimers[CHANNEL_C_TIMER_INDEX].timerChannel[1] = 3; // Special mapping for the Channel C_1
1a003544:	4b1f      	ldr	r3, [pc, #124]	; (1a0035c4 <PWMInit+0x288>)
1a003546:	2203      	movs	r2, #3
1a003548:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	halTimers[CHANNEL_C_TIMER_INDEX].witdh[0] = 0;
1a00354c:	4b1d      	ldr	r3, [pc, #116]	; (1a0035c4 <PWMInit+0x288>)
1a00354e:	2200      	movs	r2, #0
1a003550:	655a      	str	r2, [r3, #84]	; 0x54
	halTimers[CHANNEL_C_TIMER_INDEX].witdh[1] = 0;
1a003552:	4b1c      	ldr	r3, [pc, #112]	; (1a0035c4 <PWMInit+0x288>)
1a003554:	2200      	movs	r2, #0
1a003556:	659a      	str	r2, [r3, #88]	; 0x58
	halTimers[CHANNEL_C_TIMER_INDEX].enabled[0] = 0;
1a003558:	4b1a      	ldr	r3, [pc, #104]	; (1a0035c4 <PWMInit+0x288>)
1a00355a:	2200      	movs	r2, #0
1a00355c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	halTimers[CHANNEL_C_TIMER_INDEX].enabled[1] = 0;
1a003560:	4b18      	ldr	r3, [pc, #96]	; (1a0035c4 <PWMInit+0x288>)
1a003562:	2200      	movs	r2, #0
1a003564:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	halTimers[CHANNEL_C_TIMER_INDEX].period = 0;
1a003568:	4b16      	ldr	r3, [pc, #88]	; (1a0035c4 <PWMInit+0x288>)
1a00356a:	2200      	movs	r2, #0
1a00356c:	675a      	str	r2, [r3, #116]	; 0x74
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, CHANNEL_C_0_PORT_GPIO, CHANNEL_C_0_PIN_GPIO);
1a00356e:	2207      	movs	r2, #7
1a003570:	2105      	movs	r1, #5
1a003572:	4816      	ldr	r0, [pc, #88]	; (1a0035cc <PWMInit+0x290>)
1a003574:	f7ff fe16 	bl	1a0031a4 <Chip_GPIO_SetPinOutLow>
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, CHANNEL_C_1_PORT_GPIO, CHANNEL_C_1_PIN_GPIO);
1a003578:	220a      	movs	r2, #10
1a00357a:	2101      	movs	r1, #1
1a00357c:	4813      	ldr	r0, [pc, #76]	; (1a0035cc <PWMInit+0x290>)
1a00357e:	f7ff fe11 	bl	1a0031a4 <Chip_GPIO_SetPinOutLow>
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_C_0_PORT_GPIO, CHANNEL_C_0_PIN_GPIO);
1a003582:	2207      	movs	r2, #7
1a003584:	2105      	movs	r1, #5
1a003586:	4811      	ldr	r0, [pc, #68]	; (1a0035cc <PWMInit+0x290>)
1a003588:	f7ff fdd2 	bl	1a003130 <Chip_GPIO_SetPinDIRInput>
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_C_1_PORT_GPIO, CHANNEL_C_1_PIN_GPIO);
1a00358c:	220a      	movs	r2, #10
1a00358e:	2101      	movs	r1, #1
1a003590:	480e      	ldr	r0, [pc, #56]	; (1a0035cc <PWMInit+0x290>)
1a003592:	f7ff fdcd 	bl	1a003130 <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(CHANNEL_C_0_PORT, CHANNEL_C_0_PIN, halTimers[CHANNEL_C_TIMER_INDEX].gpioMode[0]);
1a003596:	4b0b      	ldr	r3, [pc, #44]	; (1a0035c4 <PWMInit+0x288>)
1a003598:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
1a00359c:	461a      	mov	r2, r3
1a00359e:	2108      	movs	r1, #8
1a0035a0:	2002      	movs	r0, #2
1a0035a2:	f7ff fd8b 	bl	1a0030bc <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(CHANNEL_C_1_PORT, CHANNEL_C_1_PIN, halTimers[CHANNEL_C_TIMER_INDEX].gpioMode[1]);
1a0035a6:	4b07      	ldr	r3, [pc, #28]	; (1a0035c4 <PWMInit+0x288>)
1a0035a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
1a0035ac:	461a      	mov	r2, r3
1a0035ae:	2109      	movs	r1, #9
1a0035b0:	2002      	movs	r0, #2
1a0035b2:	f7ff fd83 	bl	1a0030bc <Chip_SCU_PinMuxSet>
	for (int i = 0; i < 3; ++i) {
1a0035b6:	2300      	movs	r3, #0
1a0035b8:	607b      	str	r3, [r7, #4]
1a0035ba:	e07b      	b.n	1a0036b4 <PWMInit+0x378>
		for (int j = 0; j < 2; ++j) {
1a0035bc:	2300      	movs	r3, #0
1a0035be:	603b      	str	r3, [r7, #0]
1a0035c0:	e072      	b.n	1a0036a8 <PWMInit+0x36c>
1a0035c2:	bf00      	nop
1a0035c4:	100874f8 	.word	0x100874f8
1a0035c8:	400c4000 	.word	0x400c4000
1a0035cc:	400f4000 	.word	0x400f4000
1a0035d0:	400c3000 	.word	0x400c3000
1a0035d4:	40084000 	.word	0x40084000
			Chip_TIMER_ResetOnMatchDisable(halTimers[i].timer, halTimers[i].timerChannel[j]);
1a0035d8:	493a      	ldr	r1, [pc, #232]	; (1a0036c4 <PWMInit+0x388>)
1a0035da:	687a      	ldr	r2, [r7, #4]
1a0035dc:	4613      	mov	r3, r2
1a0035de:	009b      	lsls	r3, r3, #2
1a0035e0:	4413      	add	r3, r2
1a0035e2:	00db      	lsls	r3, r3, #3
1a0035e4:	440b      	add	r3, r1
1a0035e6:	6818      	ldr	r0, [r3, #0]
1a0035e8:	4936      	ldr	r1, [pc, #216]	; (1a0036c4 <PWMInit+0x388>)
1a0035ea:	687a      	ldr	r2, [r7, #4]
1a0035ec:	4613      	mov	r3, r2
1a0035ee:	009b      	lsls	r3, r3, #2
1a0035f0:	4413      	add	r3, r2
1a0035f2:	009b      	lsls	r3, r3, #2
1a0035f4:	683a      	ldr	r2, [r7, #0]
1a0035f6:	4413      	add	r3, r2
1a0035f8:	330c      	adds	r3, #12
1a0035fa:	005b      	lsls	r3, r3, #1
1a0035fc:	440b      	add	r3, r1
1a0035fe:	889b      	ldrh	r3, [r3, #4]
1a003600:	b2db      	uxtb	r3, r3
1a003602:	b25b      	sxtb	r3, r3
1a003604:	4619      	mov	r1, r3
1a003606:	f7ff fe61 	bl	1a0032cc <Chip_TIMER_ResetOnMatchDisable>
			Chip_TIMER_StopOnMatchDisable(halTimers[i].timer, halTimers[i].timerChannel[j]);
1a00360a:	492e      	ldr	r1, [pc, #184]	; (1a0036c4 <PWMInit+0x388>)
1a00360c:	687a      	ldr	r2, [r7, #4]
1a00360e:	4613      	mov	r3, r2
1a003610:	009b      	lsls	r3, r3, #2
1a003612:	4413      	add	r3, r2
1a003614:	00db      	lsls	r3, r3, #3
1a003616:	440b      	add	r3, r1
1a003618:	6818      	ldr	r0, [r3, #0]
1a00361a:	492a      	ldr	r1, [pc, #168]	; (1a0036c4 <PWMInit+0x388>)
1a00361c:	687a      	ldr	r2, [r7, #4]
1a00361e:	4613      	mov	r3, r2
1a003620:	009b      	lsls	r3, r3, #2
1a003622:	4413      	add	r3, r2
1a003624:	009b      	lsls	r3, r3, #2
1a003626:	683a      	ldr	r2, [r7, #0]
1a003628:	4413      	add	r3, r2
1a00362a:	330c      	adds	r3, #12
1a00362c:	005b      	lsls	r3, r3, #1
1a00362e:	440b      	add	r3, r1
1a003630:	889b      	ldrh	r3, [r3, #4]
1a003632:	b2db      	uxtb	r3, r3
1a003634:	b25b      	sxtb	r3, r3
1a003636:	4619      	mov	r1, r3
1a003638:	f7ff fe64 	bl	1a003304 <Chip_TIMER_StopOnMatchDisable>
			Chip_TIMER_MatchDisableInt(halTimers[i].timer, halTimers[i].timerChannel[j]);
1a00363c:	4921      	ldr	r1, [pc, #132]	; (1a0036c4 <PWMInit+0x388>)
1a00363e:	687a      	ldr	r2, [r7, #4]
1a003640:	4613      	mov	r3, r2
1a003642:	009b      	lsls	r3, r3, #2
1a003644:	4413      	add	r3, r2
1a003646:	00db      	lsls	r3, r3, #3
1a003648:	440b      	add	r3, r1
1a00364a:	6818      	ldr	r0, [r3, #0]
1a00364c:	491d      	ldr	r1, [pc, #116]	; (1a0036c4 <PWMInit+0x388>)
1a00364e:	687a      	ldr	r2, [r7, #4]
1a003650:	4613      	mov	r3, r2
1a003652:	009b      	lsls	r3, r3, #2
1a003654:	4413      	add	r3, r2
1a003656:	009b      	lsls	r3, r3, #2
1a003658:	683a      	ldr	r2, [r7, #0]
1a00365a:	4413      	add	r3, r2
1a00365c:	330c      	adds	r3, #12
1a00365e:	005b      	lsls	r3, r3, #1
1a003660:	440b      	add	r3, r1
1a003662:	889b      	ldrh	r3, [r3, #4]
1a003664:	b2db      	uxtb	r3, r3
1a003666:	b25b      	sxtb	r3, r3
1a003668:	4619      	mov	r1, r3
1a00366a:	f7ff fdf7 	bl	1a00325c <Chip_TIMER_MatchDisableInt>
			Chip_TIMER_ExtMatchControlSet(halTimers[i].timer, 1, TIMER_EXTMATCH_CLEAR, halTimers[i].timerChannel[j]);
1a00366e:	4915      	ldr	r1, [pc, #84]	; (1a0036c4 <PWMInit+0x388>)
1a003670:	687a      	ldr	r2, [r7, #4]
1a003672:	4613      	mov	r3, r2
1a003674:	009b      	lsls	r3, r3, #2
1a003676:	4413      	add	r3, r2
1a003678:	00db      	lsls	r3, r3, #3
1a00367a:	440b      	add	r3, r1
1a00367c:	6818      	ldr	r0, [r3, #0]
1a00367e:	4911      	ldr	r1, [pc, #68]	; (1a0036c4 <PWMInit+0x388>)
1a003680:	687a      	ldr	r2, [r7, #4]
1a003682:	4613      	mov	r3, r2
1a003684:	009b      	lsls	r3, r3, #2
1a003686:	4413      	add	r3, r2
1a003688:	009b      	lsls	r3, r3, #2
1a00368a:	683a      	ldr	r2, [r7, #0]
1a00368c:	4413      	add	r3, r2
1a00368e:	330c      	adds	r3, #12
1a003690:	005b      	lsls	r3, r3, #1
1a003692:	440b      	add	r3, r1
1a003694:	889b      	ldrh	r3, [r3, #4]
1a003696:	b2db      	uxtb	r3, r3
1a003698:	b25b      	sxtb	r3, r3
1a00369a:	2201      	movs	r2, #1
1a00369c:	2101      	movs	r1, #1
1a00369e:	f00f fe31 	bl	1a013304 <Chip_TIMER_ExtMatchControlSet>
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_C_0_PORT_GPIO, CHANNEL_C_0_PIN_GPIO);
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_C_1_PORT_GPIO, CHANNEL_C_1_PIN_GPIO);
	Chip_SCU_PinMuxSet(CHANNEL_C_0_PORT, CHANNEL_C_0_PIN, halTimers[CHANNEL_C_TIMER_INDEX].gpioMode[0]);
	Chip_SCU_PinMuxSet(CHANNEL_C_1_PORT, CHANNEL_C_1_PIN, halTimers[CHANNEL_C_TIMER_INDEX].gpioMode[1]);
	for (int i = 0; i < 3; ++i) {
		for (int j = 0; j < 2; ++j) {
1a0036a2:	683b      	ldr	r3, [r7, #0]
1a0036a4:	3301      	adds	r3, #1
1a0036a6:	603b      	str	r3, [r7, #0]
1a0036a8:	683b      	ldr	r3, [r7, #0]
1a0036aa:	2b01      	cmp	r3, #1
1a0036ac:	dd94      	ble.n	1a0035d8 <PWMInit+0x29c>
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, CHANNEL_C_1_PORT_GPIO, CHANNEL_C_1_PIN_GPIO);
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_C_0_PORT_GPIO, CHANNEL_C_0_PIN_GPIO);
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_C_1_PORT_GPIO, CHANNEL_C_1_PIN_GPIO);
	Chip_SCU_PinMuxSet(CHANNEL_C_0_PORT, CHANNEL_C_0_PIN, halTimers[CHANNEL_C_TIMER_INDEX].gpioMode[0]);
	Chip_SCU_PinMuxSet(CHANNEL_C_1_PORT, CHANNEL_C_1_PIN, halTimers[CHANNEL_C_TIMER_INDEX].gpioMode[1]);
	for (int i = 0; i < 3; ++i) {
1a0036ae:	687b      	ldr	r3, [r7, #4]
1a0036b0:	3301      	adds	r3, #1
1a0036b2:	607b      	str	r3, [r7, #4]
1a0036b4:	687b      	ldr	r3, [r7, #4]
1a0036b6:	2b02      	cmp	r3, #2
1a0036b8:	dd80      	ble.n	1a0035bc <PWMInit+0x280>
			Chip_TIMER_MatchDisableInt(halTimers[i].timer, halTimers[i].timerChannel[j]);
			Chip_TIMER_ExtMatchControlSet(halTimers[i].timer, 1, TIMER_EXTMATCH_CLEAR, halTimers[i].timerChannel[j]);
		}
	}

}
1a0036ba:	bf00      	nop
1a0036bc:	3708      	adds	r7, #8
1a0036be:	46bd      	mov	sp, r7
1a0036c0:	bd80      	pop	{r7, pc}
1a0036c2:	bf00      	nop
1a0036c4:	100874f8 	.word	0x100874f8

1a0036c8 <PWMSetPeriod>:

uint32_t PWMSetPeriod(uint8_t channel, uint32_t period) {
1a0036c8:	b590      	push	{r4, r7, lr}
1a0036ca:	b085      	sub	sp, #20
1a0036cc:	af00      	add	r7, sp, #0
1a0036ce:	4603      	mov	r3, r0
1a0036d0:	6039      	str	r1, [r7, #0]
1a0036d2:	71fb      	strb	r3, [r7, #7]
	if (channel > CHANNEL_C_TIMER_INDEX) {
1a0036d4:	79fb      	ldrb	r3, [r7, #7]
1a0036d6:	2b02      	cmp	r3, #2
1a0036d8:	d901      	bls.n	1a0036de <PWMSetPeriod+0x16>
		return 1;
1a0036da:	2301      	movs	r3, #1
1a0036dc:	e134      	b.n	1a003948 <PWMSetPeriod+0x280>
	}
	if (eDVSMode != EDVS_MODE_INTERNAL && channel == 0) {
1a0036de:	4b9c      	ldr	r3, [pc, #624]	; (1a003950 <PWMSetPeriod+0x288>)
1a0036e0:	781b      	ldrb	r3, [r3, #0]
1a0036e2:	2b00      	cmp	r3, #0
1a0036e4:	d004      	beq.n	1a0036f0 <PWMSetPeriod+0x28>
1a0036e6:	79fb      	ldrb	r3, [r7, #7]
1a0036e8:	2b00      	cmp	r3, #0
1a0036ea:	d101      	bne.n	1a0036f0 <PWMSetPeriod+0x28>
		return 1; // channel 0 taken for master/slave mode
1a0036ec:	2301      	movs	r3, #1
1a0036ee:	e12b      	b.n	1a003948 <PWMSetPeriod+0x280>
	}
	LPC_TIMER_T * timer = halTimers[channel].timer;
1a0036f0:	79fa      	ldrb	r2, [r7, #7]
1a0036f2:	4998      	ldr	r1, [pc, #608]	; (1a003954 <PWMSetPeriod+0x28c>)
1a0036f4:	4613      	mov	r3, r2
1a0036f6:	009b      	lsls	r3, r3, #2
1a0036f8:	4413      	add	r3, r2
1a0036fa:	00db      	lsls	r3, r3, #3
1a0036fc:	440b      	add	r3, r1
1a0036fe:	681b      	ldr	r3, [r3, #0]
1a003700:	60fb      	str	r3, [r7, #12]
	halTimers[channel].period = period;
1a003702:	79fa      	ldrb	r2, [r7, #7]
1a003704:	4993      	ldr	r1, [pc, #588]	; (1a003954 <PWMSetPeriod+0x28c>)
1a003706:	4613      	mov	r3, r2
1a003708:	009b      	lsls	r3, r3, #2
1a00370a:	4413      	add	r3, r2
1a00370c:	00db      	lsls	r3, r3, #3
1a00370e:	440b      	add	r3, r1
1a003710:	3324      	adds	r3, #36	; 0x24
1a003712:	683a      	ldr	r2, [r7, #0]
1a003714:	601a      	str	r2, [r3, #0]
	/**
	 * If the period equal 0, the timer is disable and its outputs are set as GPIO and driven low.
	 */
	if (period == 0) {
1a003716:	683b      	ldr	r3, [r7, #0]
1a003718:	2b00      	cmp	r3, #0
1a00371a:	f040 80b7 	bne.w	1a00388c <PWMSetPeriod+0x1c4>
		Chip_TIMER_DeInit(timer); //Stop the timer
1a00371e:	68f8      	ldr	r0, [r7, #12]
1a003720:	f00f fdc2 	bl	1a0132a8 <Chip_TIMER_DeInit>
		Chip_TIMER_SetMatch(timer, 2, 0);
1a003724:	2200      	movs	r2, #0
1a003726:	2102      	movs	r1, #2
1a003728:	68f8      	ldr	r0, [r7, #12]
1a00372a:	f7ff fd83 	bl	1a003234 <Chip_TIMER_SetMatch>
		halTimers[channel].enabled[0] = DISABLE;
1a00372e:	79fa      	ldrb	r2, [r7, #7]
1a003730:	4988      	ldr	r1, [pc, #544]	; (1a003954 <PWMSetPeriod+0x28c>)
1a003732:	4613      	mov	r3, r2
1a003734:	009b      	lsls	r3, r3, #2
1a003736:	4413      	add	r3, r2
1a003738:	00db      	lsls	r3, r3, #3
1a00373a:	440b      	add	r3, r1
1a00373c:	3320      	adds	r3, #32
1a00373e:	2200      	movs	r2, #0
1a003740:	801a      	strh	r2, [r3, #0]
		halTimers[channel].enabled[1] = DISABLE;
1a003742:	79fa      	ldrb	r2, [r7, #7]
1a003744:	4983      	ldr	r1, [pc, #524]	; (1a003954 <PWMSetPeriod+0x28c>)
1a003746:	4613      	mov	r3, r2
1a003748:	009b      	lsls	r3, r3, #2
1a00374a:	4413      	add	r3, r2
1a00374c:	00db      	lsls	r3, r3, #3
1a00374e:	440b      	add	r3, r1
1a003750:	3322      	adds	r3, #34	; 0x22
1a003752:	2200      	movs	r2, #0
1a003754:	801a      	strh	r2, [r3, #0]
		Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, halTimers[channel].portGpio[0], halTimers[channel].pinGpio[0]);
1a003756:	79fa      	ldrb	r2, [r7, #7]
1a003758:	497e      	ldr	r1, [pc, #504]	; (1a003954 <PWMSetPeriod+0x28c>)
1a00375a:	4613      	mov	r3, r2
1a00375c:	009b      	lsls	r3, r3, #2
1a00375e:	4413      	add	r3, r2
1a003760:	00db      	lsls	r3, r3, #3
1a003762:	440b      	add	r3, r1
1a003764:	3310      	adds	r3, #16
1a003766:	7818      	ldrb	r0, [r3, #0]
1a003768:	79fa      	ldrb	r2, [r7, #7]
1a00376a:	497a      	ldr	r1, [pc, #488]	; (1a003954 <PWMSetPeriod+0x28c>)
1a00376c:	4613      	mov	r3, r2
1a00376e:	009b      	lsls	r3, r3, #2
1a003770:	4413      	add	r3, r2
1a003772:	00db      	lsls	r3, r3, #3
1a003774:	440b      	add	r3, r1
1a003776:	3312      	adds	r3, #18
1a003778:	781b      	ldrb	r3, [r3, #0]
1a00377a:	461a      	mov	r2, r3
1a00377c:	4601      	mov	r1, r0
1a00377e:	4876      	ldr	r0, [pc, #472]	; (1a003958 <PWMSetPeriod+0x290>)
1a003780:	f7ff fcd6 	bl	1a003130 <Chip_GPIO_SetPinDIRInput>
		Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, halTimers[channel].portGpio[1], halTimers[channel].pinGpio[1]);
1a003784:	79fa      	ldrb	r2, [r7, #7]
1a003786:	4973      	ldr	r1, [pc, #460]	; (1a003954 <PWMSetPeriod+0x28c>)
1a003788:	4613      	mov	r3, r2
1a00378a:	009b      	lsls	r3, r3, #2
1a00378c:	4413      	add	r3, r2
1a00378e:	00db      	lsls	r3, r3, #3
1a003790:	440b      	add	r3, r1
1a003792:	3311      	adds	r3, #17
1a003794:	7818      	ldrb	r0, [r3, #0]
1a003796:	79fa      	ldrb	r2, [r7, #7]
1a003798:	496e      	ldr	r1, [pc, #440]	; (1a003954 <PWMSetPeriod+0x28c>)
1a00379a:	4613      	mov	r3, r2
1a00379c:	009b      	lsls	r3, r3, #2
1a00379e:	4413      	add	r3, r2
1a0037a0:	00db      	lsls	r3, r3, #3
1a0037a2:	440b      	add	r3, r1
1a0037a4:	3313      	adds	r3, #19
1a0037a6:	781b      	ldrb	r3, [r3, #0]
1a0037a8:	461a      	mov	r2, r3
1a0037aa:	4601      	mov	r1, r0
1a0037ac:	486a      	ldr	r0, [pc, #424]	; (1a003958 <PWMSetPeriod+0x290>)
1a0037ae:	f7ff fcbf 	bl	1a003130 <Chip_GPIO_SetPinDIRInput>
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, halTimers[channel].portGpio[0], halTimers[channel].pinGpio[0]);
1a0037b2:	79fa      	ldrb	r2, [r7, #7]
1a0037b4:	4967      	ldr	r1, [pc, #412]	; (1a003954 <PWMSetPeriod+0x28c>)
1a0037b6:	4613      	mov	r3, r2
1a0037b8:	009b      	lsls	r3, r3, #2
1a0037ba:	4413      	add	r3, r2
1a0037bc:	00db      	lsls	r3, r3, #3
1a0037be:	440b      	add	r3, r1
1a0037c0:	3310      	adds	r3, #16
1a0037c2:	7818      	ldrb	r0, [r3, #0]
1a0037c4:	79fa      	ldrb	r2, [r7, #7]
1a0037c6:	4963      	ldr	r1, [pc, #396]	; (1a003954 <PWMSetPeriod+0x28c>)
1a0037c8:	4613      	mov	r3, r2
1a0037ca:	009b      	lsls	r3, r3, #2
1a0037cc:	4413      	add	r3, r2
1a0037ce:	00db      	lsls	r3, r3, #3
1a0037d0:	440b      	add	r3, r1
1a0037d2:	3312      	adds	r3, #18
1a0037d4:	781b      	ldrb	r3, [r3, #0]
1a0037d6:	461a      	mov	r2, r3
1a0037d8:	4601      	mov	r1, r0
1a0037da:	485f      	ldr	r0, [pc, #380]	; (1a003958 <PWMSetPeriod+0x290>)
1a0037dc:	f7ff fce2 	bl	1a0031a4 <Chip_GPIO_SetPinOutLow>
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, halTimers[channel].portGpio[1], halTimers[channel].pinGpio[1]);
1a0037e0:	79fa      	ldrb	r2, [r7, #7]
1a0037e2:	495c      	ldr	r1, [pc, #368]	; (1a003954 <PWMSetPeriod+0x28c>)
1a0037e4:	4613      	mov	r3, r2
1a0037e6:	009b      	lsls	r3, r3, #2
1a0037e8:	4413      	add	r3, r2
1a0037ea:	00db      	lsls	r3, r3, #3
1a0037ec:	440b      	add	r3, r1
1a0037ee:	3311      	adds	r3, #17
1a0037f0:	7818      	ldrb	r0, [r3, #0]
1a0037f2:	79fa      	ldrb	r2, [r7, #7]
1a0037f4:	4957      	ldr	r1, [pc, #348]	; (1a003954 <PWMSetPeriod+0x28c>)
1a0037f6:	4613      	mov	r3, r2
1a0037f8:	009b      	lsls	r3, r3, #2
1a0037fa:	4413      	add	r3, r2
1a0037fc:	00db      	lsls	r3, r3, #3
1a0037fe:	440b      	add	r3, r1
1a003800:	3313      	adds	r3, #19
1a003802:	781b      	ldrb	r3, [r3, #0]
1a003804:	461a      	mov	r2, r3
1a003806:	4601      	mov	r1, r0
1a003808:	4853      	ldr	r0, [pc, #332]	; (1a003958 <PWMSetPeriod+0x290>)
1a00380a:	f7ff fccb 	bl	1a0031a4 <Chip_GPIO_SetPinOutLow>
		Chip_SCU_PinMuxSet(halTimers[channel].port[0], halTimers[channel].pin[0], halTimers[channel].gpioMode[0]);
1a00380e:	79fa      	ldrb	r2, [r7, #7]
1a003810:	4950      	ldr	r1, [pc, #320]	; (1a003954 <PWMSetPeriod+0x28c>)
1a003812:	4613      	mov	r3, r2
1a003814:	009b      	lsls	r3, r3, #2
1a003816:	4413      	add	r3, r2
1a003818:	00db      	lsls	r3, r3, #3
1a00381a:	440b      	add	r3, r1
1a00381c:	330c      	adds	r3, #12
1a00381e:	7818      	ldrb	r0, [r3, #0]
1a003820:	79fa      	ldrb	r2, [r7, #7]
1a003822:	494c      	ldr	r1, [pc, #304]	; (1a003954 <PWMSetPeriod+0x28c>)
1a003824:	4613      	mov	r3, r2
1a003826:	009b      	lsls	r3, r3, #2
1a003828:	4413      	add	r3, r2
1a00382a:	00db      	lsls	r3, r3, #3
1a00382c:	440b      	add	r3, r1
1a00382e:	330e      	adds	r3, #14
1a003830:	781c      	ldrb	r4, [r3, #0]
1a003832:	79fa      	ldrb	r2, [r7, #7]
1a003834:	4947      	ldr	r1, [pc, #284]	; (1a003954 <PWMSetPeriod+0x28c>)
1a003836:	4613      	mov	r3, r2
1a003838:	009b      	lsls	r3, r3, #2
1a00383a:	4413      	add	r3, r2
1a00383c:	00db      	lsls	r3, r3, #3
1a00383e:	440b      	add	r3, r1
1a003840:	3314      	adds	r3, #20
1a003842:	881b      	ldrh	r3, [r3, #0]
1a003844:	461a      	mov	r2, r3
1a003846:	4621      	mov	r1, r4
1a003848:	f7ff fc38 	bl	1a0030bc <Chip_SCU_PinMuxSet>
		Chip_SCU_PinMuxSet(halTimers[channel].port[1], halTimers[channel].pin[1], halTimers[channel].gpioMode[1]);
1a00384c:	79fa      	ldrb	r2, [r7, #7]
1a00384e:	4941      	ldr	r1, [pc, #260]	; (1a003954 <PWMSetPeriod+0x28c>)
1a003850:	4613      	mov	r3, r2
1a003852:	009b      	lsls	r3, r3, #2
1a003854:	4413      	add	r3, r2
1a003856:	00db      	lsls	r3, r3, #3
1a003858:	440b      	add	r3, r1
1a00385a:	330d      	adds	r3, #13
1a00385c:	7818      	ldrb	r0, [r3, #0]
1a00385e:	79fa      	ldrb	r2, [r7, #7]
1a003860:	493c      	ldr	r1, [pc, #240]	; (1a003954 <PWMSetPeriod+0x28c>)
1a003862:	4613      	mov	r3, r2
1a003864:	009b      	lsls	r3, r3, #2
1a003866:	4413      	add	r3, r2
1a003868:	00db      	lsls	r3, r3, #3
1a00386a:	440b      	add	r3, r1
1a00386c:	330f      	adds	r3, #15
1a00386e:	781c      	ldrb	r4, [r3, #0]
1a003870:	79fa      	ldrb	r2, [r7, #7]
1a003872:	4938      	ldr	r1, [pc, #224]	; (1a003954 <PWMSetPeriod+0x28c>)
1a003874:	4613      	mov	r3, r2
1a003876:	009b      	lsls	r3, r3, #2
1a003878:	4413      	add	r3, r2
1a00387a:	00db      	lsls	r3, r3, #3
1a00387c:	440b      	add	r3, r1
1a00387e:	3316      	adds	r3, #22
1a003880:	881b      	ldrh	r3, [r3, #0]
1a003882:	461a      	mov	r2, r3
1a003884:	4621      	mov	r1, r4
1a003886:	f7ff fc19 	bl	1a0030bc <Chip_SCU_PinMuxSet>
1a00388a:	e05c      	b.n	1a003946 <PWMSetPeriod+0x27e>
		 * The channel match 2 is used as the controller of the base frequency.
		 * When there is a match on this channel, the timer is reset and the external match bit
		 * is set to 1.
		 * The M0 core is looking for this change and it sets the output of the channels to high.
		 */
		Chip_TIMER_Init(timer);
1a00388c:	68f8      	ldr	r0, [r7, #12]
1a00388e:	f00f fcfb 	bl	1a013288 <Chip_TIMER_Init>
		Chip_TIMER_Disable(timer);
1a003892:	68f8      	ldr	r0, [r7, #12]
1a003894:	f7ff fcb0 	bl	1a0031f8 <Chip_TIMER_Disable>
		Chip_TIMER_Reset(timer);
1a003898:	68f8      	ldr	r0, [r7, #12]
1a00389a:	f00f fd15 	bl	1a0132c8 <Chip_TIMER_Reset>
		/**
		 * The Main clock is running at 192Mhz so set the Prescaler in order to have
		 * a 1 Mhz timer. Timer_CLK = Main_CLK/ (PR+1)
		 */
		Chip_TIMER_PrescaleSet(timer, 191);
1a00389e:	21bf      	movs	r1, #191	; 0xbf
1a0038a0:	68f8      	ldr	r0, [r7, #12]
1a0038a2:	f7ff fcb9 	bl	1a003218 <Chip_TIMER_PrescaleSet>
		Chip_TIMER_ResetOnMatchEnable(timer, 2);
1a0038a6:	2102      	movs	r1, #2
1a0038a8:	68f8      	ldr	r0, [r7, #12]
1a0038aa:	f7ff fcf3 	bl	1a003294 <Chip_TIMER_ResetOnMatchEnable>
		Chip_TIMER_StopOnMatchDisable(timer, 2);
1a0038ae:	2102      	movs	r1, #2
1a0038b0:	68f8      	ldr	r0, [r7, #12]
1a0038b2:	f7ff fd27 	bl	1a003304 <Chip_TIMER_StopOnMatchDisable>
		Chip_TIMER_MatchDisableInt(timer, 2);
1a0038b6:	2102      	movs	r1, #2
1a0038b8:	68f8      	ldr	r0, [r7, #12]
1a0038ba:	f7ff fccf 	bl	1a00325c <Chip_TIMER_MatchDisableInt>
		Chip_TIMER_SetMatch(timer, 2, period);
1a0038be:	683a      	ldr	r2, [r7, #0]
1a0038c0:	2102      	movs	r1, #2
1a0038c2:	68f8      	ldr	r0, [r7, #12]
1a0038c4:	f7ff fcb6 	bl	1a003234 <Chip_TIMER_SetMatch>
		//Reconfigure match channels!
		if (halTimers[channel].enabled[0]) {
1a0038c8:	79fa      	ldrb	r2, [r7, #7]
1a0038ca:	4922      	ldr	r1, [pc, #136]	; (1a003954 <PWMSetPeriod+0x28c>)
1a0038cc:	4613      	mov	r3, r2
1a0038ce:	009b      	lsls	r3, r3, #2
1a0038d0:	4413      	add	r3, r2
1a0038d2:	00db      	lsls	r3, r3, #3
1a0038d4:	440b      	add	r3, r1
1a0038d6:	3320      	adds	r3, #32
1a0038d8:	881b      	ldrh	r3, [r3, #0]
1a0038da:	2b00      	cmp	r3, #0
1a0038dc:	d00d      	beq.n	1a0038fa <PWMSetPeriod+0x232>
			PWMSetWidth(channel, 0, halTimers[channel].witdh[0]);
1a0038de:	79fa      	ldrb	r2, [r7, #7]
1a0038e0:	491c      	ldr	r1, [pc, #112]	; (1a003954 <PWMSetPeriod+0x28c>)
1a0038e2:	4613      	mov	r3, r2
1a0038e4:	009b      	lsls	r3, r3, #2
1a0038e6:	4413      	add	r3, r2
1a0038e8:	00db      	lsls	r3, r3, #3
1a0038ea:	440b      	add	r3, r1
1a0038ec:	3304      	adds	r3, #4
1a0038ee:	681a      	ldr	r2, [r3, #0]
1a0038f0:	79fb      	ldrb	r3, [r7, #7]
1a0038f2:	2100      	movs	r1, #0
1a0038f4:	4618      	mov	r0, r3
1a0038f6:	f000 f86f 	bl	1a0039d8 <PWMSetWidth>
		}
		if (halTimers[channel].enabled[1]) {
1a0038fa:	79fa      	ldrb	r2, [r7, #7]
1a0038fc:	4915      	ldr	r1, [pc, #84]	; (1a003954 <PWMSetPeriod+0x28c>)
1a0038fe:	4613      	mov	r3, r2
1a003900:	009b      	lsls	r3, r3, #2
1a003902:	4413      	add	r3, r2
1a003904:	00db      	lsls	r3, r3, #3
1a003906:	440b      	add	r3, r1
1a003908:	3322      	adds	r3, #34	; 0x22
1a00390a:	881b      	ldrh	r3, [r3, #0]
1a00390c:	2b00      	cmp	r3, #0
1a00390e:	d00d      	beq.n	1a00392c <PWMSetPeriod+0x264>
			PWMSetWidth(channel, 1, halTimers[channel].witdh[1]);
1a003910:	79fa      	ldrb	r2, [r7, #7]
1a003912:	4910      	ldr	r1, [pc, #64]	; (1a003954 <PWMSetPeriod+0x28c>)
1a003914:	4613      	mov	r3, r2
1a003916:	009b      	lsls	r3, r3, #2
1a003918:	4413      	add	r3, r2
1a00391a:	00db      	lsls	r3, r3, #3
1a00391c:	440b      	add	r3, r1
1a00391e:	3308      	adds	r3, #8
1a003920:	681a      	ldr	r2, [r3, #0]
1a003922:	79fb      	ldrb	r3, [r7, #7]
1a003924:	2101      	movs	r1, #1
1a003926:	4618      	mov	r0, r3
1a003928:	f000 f856 	bl	1a0039d8 <PWMSetWidth>
		}
		Chip_TIMER_ExtMatchControlSet(timer, 0, TIMER_EXTMATCH_SET, 2);
1a00392c:	2302      	movs	r3, #2
1a00392e:	2202      	movs	r2, #2
1a003930:	2100      	movs	r1, #0
1a003932:	68f8      	ldr	r0, [r7, #12]
1a003934:	f00f fce6 	bl	1a013304 <Chip_TIMER_ExtMatchControlSet>
		// Clear interrupt pending
		timer->IR = 0xFFFFFFFF;
1a003938:	68fb      	ldr	r3, [r7, #12]
1a00393a:	f04f 32ff 	mov.w	r2, #4294967295
1a00393e:	601a      	str	r2, [r3, #0]
		Chip_TIMER_Enable(timer);
1a003940:	68f8      	ldr	r0, [r7, #12]
1a003942:	f7ff fc49 	bl	1a0031d8 <Chip_TIMER_Enable>
	}
	return 0;
1a003946:	2300      	movs	r3, #0
}
1a003948:	4618      	mov	r0, r3
1a00394a:	3714      	adds	r7, #20
1a00394c:	46bd      	mov	sp, r7
1a00394e:	bd90      	pop	{r4, r7, pc}
1a003950:	10086518 	.word	0x10086518
1a003954:	100874f8 	.word	0x100874f8
1a003958:	400f4000 	.word	0x400f4000

1a00395c <PWMSetDutyCycle>:

uint32_t PWMSetDutyCycle(uint8_t channel, uint8_t output, uint32_t dutycycle) {
1a00395c:	b580      	push	{r7, lr}
1a00395e:	b082      	sub	sp, #8
1a003960:	af00      	add	r7, sp, #0
1a003962:	4603      	mov	r3, r0
1a003964:	603a      	str	r2, [r7, #0]
1a003966:	71fb      	strb	r3, [r7, #7]
1a003968:	460b      	mov	r3, r1
1a00396a:	71bb      	strb	r3, [r7, #6]
	if (output >= MAX_OUTPUTS || channel > CHANNEL_C_TIMER_INDEX) {
1a00396c:	79bb      	ldrb	r3, [r7, #6]
1a00396e:	2b01      	cmp	r3, #1
1a003970:	d802      	bhi.n	1a003978 <PWMSetDutyCycle+0x1c>
1a003972:	79fb      	ldrb	r3, [r7, #7]
1a003974:	2b02      	cmp	r3, #2
1a003976:	d901      	bls.n	1a00397c <PWMSetDutyCycle+0x20>
		return 1;
1a003978:	2301      	movs	r3, #1
1a00397a:	e023      	b.n	1a0039c4 <PWMSetDutyCycle+0x68>
	}
	if (eDVSMode != EDVS_MODE_INTERNAL && channel == 0) {
1a00397c:	4b13      	ldr	r3, [pc, #76]	; (1a0039cc <PWMSetDutyCycle+0x70>)
1a00397e:	781b      	ldrb	r3, [r3, #0]
1a003980:	2b00      	cmp	r3, #0
1a003982:	d004      	beq.n	1a00398e <PWMSetDutyCycle+0x32>
1a003984:	79fb      	ldrb	r3, [r7, #7]
1a003986:	2b00      	cmp	r3, #0
1a003988:	d101      	bne.n	1a00398e <PWMSetDutyCycle+0x32>
		return 1; // channel 0 taken for master/slave mode
1a00398a:	2301      	movs	r3, #1
1a00398c:	e01a      	b.n	1a0039c4 <PWMSetDutyCycle+0x68>
	}
	if (dutycycle > 100) {
1a00398e:	683b      	ldr	r3, [r7, #0]
1a003990:	2b64      	cmp	r3, #100	; 0x64
1a003992:	d901      	bls.n	1a003998 <PWMSetDutyCycle+0x3c>
		dutycycle = 100;
1a003994:	2364      	movs	r3, #100	; 0x64
1a003996:	603b      	str	r3, [r7, #0]
	}
	return PWMSetWidth(channel, output, (dutycycle * halTimers[channel].period) / 100);
1a003998:	79fa      	ldrb	r2, [r7, #7]
1a00399a:	490d      	ldr	r1, [pc, #52]	; (1a0039d0 <PWMSetDutyCycle+0x74>)
1a00399c:	4613      	mov	r3, r2
1a00399e:	009b      	lsls	r3, r3, #2
1a0039a0:	4413      	add	r3, r2
1a0039a2:	00db      	lsls	r3, r3, #3
1a0039a4:	440b      	add	r3, r1
1a0039a6:	3324      	adds	r3, #36	; 0x24
1a0039a8:	681b      	ldr	r3, [r3, #0]
1a0039aa:	683a      	ldr	r2, [r7, #0]
1a0039ac:	fb02 f303 	mul.w	r3, r2, r3
1a0039b0:	4a08      	ldr	r2, [pc, #32]	; (1a0039d4 <PWMSetDutyCycle+0x78>)
1a0039b2:	fba2 2303 	umull	r2, r3, r2, r3
1a0039b6:	095a      	lsrs	r2, r3, #5
1a0039b8:	79b9      	ldrb	r1, [r7, #6]
1a0039ba:	79fb      	ldrb	r3, [r7, #7]
1a0039bc:	4618      	mov	r0, r3
1a0039be:	f000 f80b 	bl	1a0039d8 <PWMSetWidth>
1a0039c2:	4603      	mov	r3, r0
}
1a0039c4:	4618      	mov	r0, r3
1a0039c6:	3708      	adds	r7, #8
1a0039c8:	46bd      	mov	sp, r7
1a0039ca:	bd80      	pop	{r7, pc}
1a0039cc:	10086518 	.word	0x10086518
1a0039d0:	100874f8 	.word	0x100874f8
1a0039d4:	51eb851f 	.word	0x51eb851f

1a0039d8 <PWMSetWidth>:

uint32_t PWMSetWidth(uint8_t channel, uint8_t output, uint32_t width) {
1a0039d8:	b5b0      	push	{r4, r5, r7, lr}
1a0039da:	b084      	sub	sp, #16
1a0039dc:	af00      	add	r7, sp, #0
1a0039de:	4603      	mov	r3, r0
1a0039e0:	603a      	str	r2, [r7, #0]
1a0039e2:	71fb      	strb	r3, [r7, #7]
1a0039e4:	460b      	mov	r3, r1
1a0039e6:	71bb      	strb	r3, [r7, #6]
	if (output >= MAX_OUTPUTS || channel > CHANNEL_C_TIMER_INDEX) {
1a0039e8:	79bb      	ldrb	r3, [r7, #6]
1a0039ea:	2b01      	cmp	r3, #1
1a0039ec:	d802      	bhi.n	1a0039f4 <PWMSetWidth+0x1c>
1a0039ee:	79fb      	ldrb	r3, [r7, #7]
1a0039f0:	2b02      	cmp	r3, #2
1a0039f2:	d901      	bls.n	1a0039f8 <PWMSetWidth+0x20>
		return 1;
1a0039f4:	2301      	movs	r3, #1
1a0039f6:	e127      	b.n	1a003c48 <PWMSetWidth+0x270>
	}
	if (eDVSMode != EDVS_MODE_INTERNAL && channel == 0) {
1a0039f8:	4b95      	ldr	r3, [pc, #596]	; (1a003c50 <PWMSetWidth+0x278>)
1a0039fa:	781b      	ldrb	r3, [r3, #0]
1a0039fc:	2b00      	cmp	r3, #0
1a0039fe:	d004      	beq.n	1a003a0a <PWMSetWidth+0x32>
1a003a00:	79fb      	ldrb	r3, [r7, #7]
1a003a02:	2b00      	cmp	r3, #0
1a003a04:	d101      	bne.n	1a003a0a <PWMSetWidth+0x32>
		return 1; // channel 0 taken for master/slave mode
1a003a06:	2301      	movs	r3, #1
1a003a08:	e11e      	b.n	1a003c48 <PWMSetWidth+0x270>
	}
	LPC_TIMER_T * timer = halTimers[channel].timer;
1a003a0a:	79fa      	ldrb	r2, [r7, #7]
1a003a0c:	4991      	ldr	r1, [pc, #580]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003a0e:	4613      	mov	r3, r2
1a003a10:	009b      	lsls	r3, r3, #2
1a003a12:	4413      	add	r3, r2
1a003a14:	00db      	lsls	r3, r3, #3
1a003a16:	440b      	add	r3, r1
1a003a18:	681b      	ldr	r3, [r3, #0]
1a003a1a:	60fb      	str	r3, [r7, #12]
	halTimers[channel].witdh[output] = width;
1a003a1c:	79fa      	ldrb	r2, [r7, #7]
1a003a1e:	79b9      	ldrb	r1, [r7, #6]
1a003a20:	488c      	ldr	r0, [pc, #560]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003a22:	4613      	mov	r3, r2
1a003a24:	009b      	lsls	r3, r3, #2
1a003a26:	4413      	add	r3, r2
1a003a28:	005b      	lsls	r3, r3, #1
1a003a2a:	440b      	add	r3, r1
1a003a2c:	009b      	lsls	r3, r3, #2
1a003a2e:	4403      	add	r3, r0
1a003a30:	683a      	ldr	r2, [r7, #0]
1a003a32:	605a      	str	r2, [r3, #4]
	halTimers[channel].enabled[output] = ENABLE;
1a003a34:	79fa      	ldrb	r2, [r7, #7]
1a003a36:	79b9      	ldrb	r1, [r7, #6]
1a003a38:	4886      	ldr	r0, [pc, #536]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003a3a:	4613      	mov	r3, r2
1a003a3c:	009b      	lsls	r3, r3, #2
1a003a3e:	4413      	add	r3, r2
1a003a40:	009b      	lsls	r3, r3, #2
1a003a42:	440b      	add	r3, r1
1a003a44:	3310      	adds	r3, #16
1a003a46:	2201      	movs	r2, #1
1a003a48:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	/**
	 * Since we have to use the Core M0 to overcome hardware limitations
	 * when the width is 0 or bigger than the period of the wave,
	 * the output is set as GPIO and driven accordingly.
	 */
	if (width == 0) { //Set GPIO Low
1a003a4c:	683b      	ldr	r3, [r7, #0]
1a003a4e:	2b00      	cmp	r3, #0
1a003a50:	d15d      	bne.n	1a003b0e <PWMSetWidth+0x136>
		Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, halTimers[channel].portGpio[output],
1a003a52:	79fa      	ldrb	r2, [r7, #7]
1a003a54:	79b9      	ldrb	r1, [r7, #6]
1a003a56:	487f      	ldr	r0, [pc, #508]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003a58:	4613      	mov	r3, r2
1a003a5a:	009b      	lsls	r3, r3, #2
1a003a5c:	4413      	add	r3, r2
1a003a5e:	00db      	lsls	r3, r3, #3
1a003a60:	4403      	add	r3, r0
1a003a62:	440b      	add	r3, r1
1a003a64:	3310      	adds	r3, #16
1a003a66:	781c      	ldrb	r4, [r3, #0]
1a003a68:	79fa      	ldrb	r2, [r7, #7]
1a003a6a:	79b9      	ldrb	r1, [r7, #6]
1a003a6c:	4879      	ldr	r0, [pc, #484]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003a6e:	4613      	mov	r3, r2
1a003a70:	009b      	lsls	r3, r3, #2
1a003a72:	4413      	add	r3, r2
1a003a74:	00db      	lsls	r3, r3, #3
1a003a76:	4403      	add	r3, r0
1a003a78:	440b      	add	r3, r1
1a003a7a:	3312      	adds	r3, #18
1a003a7c:	781b      	ldrb	r3, [r3, #0]
1a003a7e:	461a      	mov	r2, r3
1a003a80:	4621      	mov	r1, r4
1a003a82:	4875      	ldr	r0, [pc, #468]	; (1a003c58 <PWMSetWidth+0x280>)
1a003a84:	f7ff fb34 	bl	1a0030f0 <Chip_GPIO_SetPinDIROutput>
				halTimers[channel].pinGpio[output]);
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, halTimers[channel].portGpio[output], halTimers[channel].pinGpio[output]);
1a003a88:	79fa      	ldrb	r2, [r7, #7]
1a003a8a:	79b9      	ldrb	r1, [r7, #6]
1a003a8c:	4871      	ldr	r0, [pc, #452]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003a8e:	4613      	mov	r3, r2
1a003a90:	009b      	lsls	r3, r3, #2
1a003a92:	4413      	add	r3, r2
1a003a94:	00db      	lsls	r3, r3, #3
1a003a96:	4403      	add	r3, r0
1a003a98:	440b      	add	r3, r1
1a003a9a:	3310      	adds	r3, #16
1a003a9c:	781c      	ldrb	r4, [r3, #0]
1a003a9e:	79fa      	ldrb	r2, [r7, #7]
1a003aa0:	79b9      	ldrb	r1, [r7, #6]
1a003aa2:	486c      	ldr	r0, [pc, #432]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003aa4:	4613      	mov	r3, r2
1a003aa6:	009b      	lsls	r3, r3, #2
1a003aa8:	4413      	add	r3, r2
1a003aaa:	00db      	lsls	r3, r3, #3
1a003aac:	4403      	add	r3, r0
1a003aae:	440b      	add	r3, r1
1a003ab0:	3312      	adds	r3, #18
1a003ab2:	781b      	ldrb	r3, [r3, #0]
1a003ab4:	461a      	mov	r2, r3
1a003ab6:	4621      	mov	r1, r4
1a003ab8:	4867      	ldr	r0, [pc, #412]	; (1a003c58 <PWMSetWidth+0x280>)
1a003aba:	f7ff fb73 	bl	1a0031a4 <Chip_GPIO_SetPinOutLow>
		Chip_SCU_PinMuxSet(halTimers[channel].port[output], halTimers[channel].pin[output],
1a003abe:	79fa      	ldrb	r2, [r7, #7]
1a003ac0:	79b9      	ldrb	r1, [r7, #6]
1a003ac2:	4864      	ldr	r0, [pc, #400]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003ac4:	4613      	mov	r3, r2
1a003ac6:	009b      	lsls	r3, r3, #2
1a003ac8:	4413      	add	r3, r2
1a003aca:	00db      	lsls	r3, r3, #3
1a003acc:	4403      	add	r3, r0
1a003ace:	440b      	add	r3, r1
1a003ad0:	330c      	adds	r3, #12
1a003ad2:	781c      	ldrb	r4, [r3, #0]
1a003ad4:	79fa      	ldrb	r2, [r7, #7]
1a003ad6:	79b9      	ldrb	r1, [r7, #6]
1a003ad8:	485e      	ldr	r0, [pc, #376]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003ada:	4613      	mov	r3, r2
1a003adc:	009b      	lsls	r3, r3, #2
1a003ade:	4413      	add	r3, r2
1a003ae0:	00db      	lsls	r3, r3, #3
1a003ae2:	4403      	add	r3, r0
1a003ae4:	440b      	add	r3, r1
1a003ae6:	330e      	adds	r3, #14
1a003ae8:	781d      	ldrb	r5, [r3, #0]
1a003aea:	79fa      	ldrb	r2, [r7, #7]
1a003aec:	79b9      	ldrb	r1, [r7, #6]
1a003aee:	4859      	ldr	r0, [pc, #356]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003af0:	4613      	mov	r3, r2
1a003af2:	009b      	lsls	r3, r3, #2
1a003af4:	4413      	add	r3, r2
1a003af6:	009b      	lsls	r3, r3, #2
1a003af8:	440b      	add	r3, r1
1a003afa:	3308      	adds	r3, #8
1a003afc:	005b      	lsls	r3, r3, #1
1a003afe:	4403      	add	r3, r0
1a003b00:	889b      	ldrh	r3, [r3, #4]
1a003b02:	461a      	mov	r2, r3
1a003b04:	4629      	mov	r1, r5
1a003b06:	4620      	mov	r0, r4
1a003b08:	f7ff fad8 	bl	1a0030bc <Chip_SCU_PinMuxSet>
1a003b0c:	e09b      	b.n	1a003c46 <PWMSetWidth+0x26e>
				halTimers[channel].gpioMode[output]);
	} else if (width >= timer->MR[2]) { //Set GPIO High
1a003b0e:	68fb      	ldr	r3, [r7, #12]
1a003b10:	6a1a      	ldr	r2, [r3, #32]
1a003b12:	683b      	ldr	r3, [r7, #0]
1a003b14:	429a      	cmp	r2, r3
1a003b16:	d85d      	bhi.n	1a003bd4 <PWMSetWidth+0x1fc>
		Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, halTimers[channel].portGpio[output],
1a003b18:	79fa      	ldrb	r2, [r7, #7]
1a003b1a:	79b9      	ldrb	r1, [r7, #6]
1a003b1c:	484d      	ldr	r0, [pc, #308]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003b1e:	4613      	mov	r3, r2
1a003b20:	009b      	lsls	r3, r3, #2
1a003b22:	4413      	add	r3, r2
1a003b24:	00db      	lsls	r3, r3, #3
1a003b26:	4403      	add	r3, r0
1a003b28:	440b      	add	r3, r1
1a003b2a:	3310      	adds	r3, #16
1a003b2c:	781c      	ldrb	r4, [r3, #0]
1a003b2e:	79fa      	ldrb	r2, [r7, #7]
1a003b30:	79b9      	ldrb	r1, [r7, #6]
1a003b32:	4848      	ldr	r0, [pc, #288]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003b34:	4613      	mov	r3, r2
1a003b36:	009b      	lsls	r3, r3, #2
1a003b38:	4413      	add	r3, r2
1a003b3a:	00db      	lsls	r3, r3, #3
1a003b3c:	4403      	add	r3, r0
1a003b3e:	440b      	add	r3, r1
1a003b40:	3312      	adds	r3, #18
1a003b42:	781b      	ldrb	r3, [r3, #0]
1a003b44:	461a      	mov	r2, r3
1a003b46:	4621      	mov	r1, r4
1a003b48:	4843      	ldr	r0, [pc, #268]	; (1a003c58 <PWMSetWidth+0x280>)
1a003b4a:	f7ff fad1 	bl	1a0030f0 <Chip_GPIO_SetPinDIROutput>
				halTimers[channel].pinGpio[output]);
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, halTimers[channel].portGpio[output], halTimers[channel].pinGpio[output]);
1a003b4e:	79fa      	ldrb	r2, [r7, #7]
1a003b50:	79b9      	ldrb	r1, [r7, #6]
1a003b52:	4840      	ldr	r0, [pc, #256]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003b54:	4613      	mov	r3, r2
1a003b56:	009b      	lsls	r3, r3, #2
1a003b58:	4413      	add	r3, r2
1a003b5a:	00db      	lsls	r3, r3, #3
1a003b5c:	4403      	add	r3, r0
1a003b5e:	440b      	add	r3, r1
1a003b60:	3310      	adds	r3, #16
1a003b62:	781c      	ldrb	r4, [r3, #0]
1a003b64:	79fa      	ldrb	r2, [r7, #7]
1a003b66:	79b9      	ldrb	r1, [r7, #6]
1a003b68:	483a      	ldr	r0, [pc, #232]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003b6a:	4613      	mov	r3, r2
1a003b6c:	009b      	lsls	r3, r3, #2
1a003b6e:	4413      	add	r3, r2
1a003b70:	00db      	lsls	r3, r3, #3
1a003b72:	4403      	add	r3, r0
1a003b74:	440b      	add	r3, r1
1a003b76:	3312      	adds	r3, #18
1a003b78:	781b      	ldrb	r3, [r3, #0]
1a003b7a:	461a      	mov	r2, r3
1a003b7c:	4621      	mov	r1, r4
1a003b7e:	4836      	ldr	r0, [pc, #216]	; (1a003c58 <PWMSetWidth+0x280>)
1a003b80:	f7ff faf6 	bl	1a003170 <Chip_GPIO_SetPinOutHigh>
		Chip_SCU_PinMuxSet(halTimers[channel].port[output], halTimers[channel].pin[output],
1a003b84:	79fa      	ldrb	r2, [r7, #7]
1a003b86:	79b9      	ldrb	r1, [r7, #6]
1a003b88:	4832      	ldr	r0, [pc, #200]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003b8a:	4613      	mov	r3, r2
1a003b8c:	009b      	lsls	r3, r3, #2
1a003b8e:	4413      	add	r3, r2
1a003b90:	00db      	lsls	r3, r3, #3
1a003b92:	4403      	add	r3, r0
1a003b94:	440b      	add	r3, r1
1a003b96:	330c      	adds	r3, #12
1a003b98:	781c      	ldrb	r4, [r3, #0]
1a003b9a:	79fa      	ldrb	r2, [r7, #7]
1a003b9c:	79b9      	ldrb	r1, [r7, #6]
1a003b9e:	482d      	ldr	r0, [pc, #180]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003ba0:	4613      	mov	r3, r2
1a003ba2:	009b      	lsls	r3, r3, #2
1a003ba4:	4413      	add	r3, r2
1a003ba6:	00db      	lsls	r3, r3, #3
1a003ba8:	4403      	add	r3, r0
1a003baa:	440b      	add	r3, r1
1a003bac:	330e      	adds	r3, #14
1a003bae:	781d      	ldrb	r5, [r3, #0]
1a003bb0:	79fa      	ldrb	r2, [r7, #7]
1a003bb2:	79b9      	ldrb	r1, [r7, #6]
1a003bb4:	4827      	ldr	r0, [pc, #156]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003bb6:	4613      	mov	r3, r2
1a003bb8:	009b      	lsls	r3, r3, #2
1a003bba:	4413      	add	r3, r2
1a003bbc:	009b      	lsls	r3, r3, #2
1a003bbe:	440b      	add	r3, r1
1a003bc0:	3308      	adds	r3, #8
1a003bc2:	005b      	lsls	r3, r3, #1
1a003bc4:	4403      	add	r3, r0
1a003bc6:	889b      	ldrh	r3, [r3, #4]
1a003bc8:	461a      	mov	r2, r3
1a003bca:	4629      	mov	r1, r5
1a003bcc:	4620      	mov	r0, r4
1a003bce:	f7ff fa75 	bl	1a0030bc <Chip_SCU_PinMuxSet>
1a003bd2:	e038      	b.n	1a003c46 <PWMSetWidth+0x26e>
				halTimers[channel].gpioMode[output]);
	} else {
		Chip_TIMER_SetMatch(timer, halTimers[channel].timerChannel[output], width);
1a003bd4:	79fa      	ldrb	r2, [r7, #7]
1a003bd6:	79b9      	ldrb	r1, [r7, #6]
1a003bd8:	481e      	ldr	r0, [pc, #120]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003bda:	4613      	mov	r3, r2
1a003bdc:	009b      	lsls	r3, r3, #2
1a003bde:	4413      	add	r3, r2
1a003be0:	009b      	lsls	r3, r3, #2
1a003be2:	440b      	add	r3, r1
1a003be4:	330c      	adds	r3, #12
1a003be6:	005b      	lsls	r3, r3, #1
1a003be8:	4403      	add	r3, r0
1a003bea:	889b      	ldrh	r3, [r3, #4]
1a003bec:	b2db      	uxtb	r3, r3
1a003bee:	b25b      	sxtb	r3, r3
1a003bf0:	683a      	ldr	r2, [r7, #0]
1a003bf2:	4619      	mov	r1, r3
1a003bf4:	68f8      	ldr	r0, [r7, #12]
1a003bf6:	f7ff fb1d 	bl	1a003234 <Chip_TIMER_SetMatch>
		Chip_SCU_PinMuxSet(halTimers[channel].port[output], halTimers[channel].pin[output],
1a003bfa:	79fa      	ldrb	r2, [r7, #7]
1a003bfc:	79b9      	ldrb	r1, [r7, #6]
1a003bfe:	4815      	ldr	r0, [pc, #84]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003c00:	4613      	mov	r3, r2
1a003c02:	009b      	lsls	r3, r3, #2
1a003c04:	4413      	add	r3, r2
1a003c06:	00db      	lsls	r3, r3, #3
1a003c08:	4403      	add	r3, r0
1a003c0a:	440b      	add	r3, r1
1a003c0c:	330c      	adds	r3, #12
1a003c0e:	781c      	ldrb	r4, [r3, #0]
1a003c10:	79fa      	ldrb	r2, [r7, #7]
1a003c12:	79b9      	ldrb	r1, [r7, #6]
1a003c14:	480f      	ldr	r0, [pc, #60]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003c16:	4613      	mov	r3, r2
1a003c18:	009b      	lsls	r3, r3, #2
1a003c1a:	4413      	add	r3, r2
1a003c1c:	00db      	lsls	r3, r3, #3
1a003c1e:	4403      	add	r3, r0
1a003c20:	440b      	add	r3, r1
1a003c22:	330e      	adds	r3, #14
1a003c24:	781d      	ldrb	r5, [r3, #0]
1a003c26:	79fa      	ldrb	r2, [r7, #7]
1a003c28:	79b9      	ldrb	r1, [r7, #6]
1a003c2a:	480a      	ldr	r0, [pc, #40]	; (1a003c54 <PWMSetWidth+0x27c>)
1a003c2c:	4613      	mov	r3, r2
1a003c2e:	009b      	lsls	r3, r3, #2
1a003c30:	4413      	add	r3, r2
1a003c32:	009b      	lsls	r3, r3, #2
1a003c34:	440b      	add	r3, r1
1a003c36:	330c      	adds	r3, #12
1a003c38:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
1a003c3c:	461a      	mov	r2, r3
1a003c3e:	4629      	mov	r1, r5
1a003c40:	4620      	mov	r0, r4
1a003c42:	f7ff fa3b 	bl	1a0030bc <Chip_SCU_PinMuxSet>
				halTimers[channel].timerMode[output]);
	}
	return 0;
1a003c46:	2300      	movs	r3, #0
}
1a003c48:	4618      	mov	r0, r3
1a003c4a:	3710      	adds	r7, #16
1a003c4c:	46bd      	mov	sp, r7
1a003c4e:	bdb0      	pop	{r4, r5, r7, pc}
1a003c50:	10086518 	.word	0x10086518
1a003c54:	100874f8 	.word	0x100874f8
1a003c58:	400f4000 	.word	0x400f4000

1a003c5c <Chip_SCU_PinMuxSet>:
 * @return	Nothing
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a003c5c:	b480      	push	{r7}
1a003c5e:	b083      	sub	sp, #12
1a003c60:	af00      	add	r7, sp, #0
1a003c62:	4603      	mov	r3, r0
1a003c64:	71fb      	strb	r3, [r7, #7]
1a003c66:	460b      	mov	r3, r1
1a003c68:	71bb      	strb	r3, [r7, #6]
1a003c6a:	4613      	mov	r3, r2
1a003c6c:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003c6e:	4807      	ldr	r0, [pc, #28]	; (1a003c8c <Chip_SCU_PinMuxSet+0x30>)
1a003c70:	79f9      	ldrb	r1, [r7, #7]
1a003c72:	79bb      	ldrb	r3, [r7, #6]
1a003c74:	88ba      	ldrh	r2, [r7, #4]
1a003c76:	0149      	lsls	r1, r1, #5
1a003c78:	440b      	add	r3, r1
1a003c7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a003c7e:	bf00      	nop
1a003c80:	370c      	adds	r7, #12
1a003c82:	46bd      	mov	sp, r7
1a003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003c88:	4770      	bx	lr
1a003c8a:	bf00      	nop
1a003c8c:	40086000 	.word	0x40086000

1a003c90 <SysTick_Handler>:
/**
 * The Systick handler is used for a lot more tasks than sensor timing.
 * It also provides a timer for decaying for the motor velocity, motor control
 * and second timer used for the LED blinking and Retina event rate.
 */
void SysTick_Handler(void) {  // now the systick handler function is called every 1/50000 second
1a003c90:	b580      	push	{r7, lr}
1a003c92:	af00      	add	r7, sp, #0
	static uint16_t second_timer = 0;

#if USE_PUSHBOT
	static uint16_t one_k_hertz_timer = 0;
	static uint16_t ten_hertz_timer = 0;
	if (++ten_hertz_timer >= 5000) {  // 100
1a003c94:	4ba1      	ldr	r3, [pc, #644]	; (1a003f1c <SysTick_Handler+0x28c>)
1a003c96:	881b      	ldrh	r3, [r3, #0]
1a003c98:	3301      	adds	r3, #1
1a003c9a:	b29a      	uxth	r2, r3
1a003c9c:	4b9f      	ldr	r3, [pc, #636]	; (1a003f1c <SysTick_Handler+0x28c>)
1a003c9e:	801a      	strh	r2, [r3, #0]
1a003ca0:	4b9e      	ldr	r3, [pc, #632]	; (1a003f1c <SysTick_Handler+0x28c>)
1a003ca2:	881b      	ldrh	r3, [r3, #0]
1a003ca4:	f241 3287 	movw	r2, #4999	; 0x1387
1a003ca8:	4293      	cmp	r3, r2
1a003caa:	f240 8085 	bls.w	1a003db8 <SysTick_Handler+0x128>
		ten_hertz_timer = 0;
1a003cae:	4b9b      	ldr	r3, [pc, #620]	; (1a003f1c <SysTick_Handler+0x28c>)
1a003cb0:	2200      	movs	r2, #0
1a003cb2:	801a      	strh	r2, [r3, #0]
		if (motor0.controlMode & DECAY_MODE) {
1a003cb4:	4b9a      	ldr	r3, [pc, #616]	; (1a003f20 <SysTick_Handler+0x290>)
1a003cb6:	68db      	ldr	r3, [r3, #12]
1a003cb8:	f003 0304 	and.w	r3, r3, #4
1a003cbc:	2b00      	cmp	r3, #0
1a003cbe:	d03a      	beq.n	1a003d36 <SysTick_Handler+0xa6>
			if (motor0.decayCounter == 0) {
1a003cc0:	4b97      	ldr	r3, [pc, #604]	; (1a003f20 <SysTick_Handler+0x290>)
1a003cc2:	689b      	ldr	r3, [r3, #8]
1a003cc4:	2b00      	cmp	r3, #0
1a003cc6:	d131      	bne.n	1a003d2c <SysTick_Handler+0x9c>
				if (motor0.controlMode & DIRECT_MODE) {
1a003cc8:	4b95      	ldr	r3, [pc, #596]	; (1a003f20 <SysTick_Handler+0x290>)
1a003cca:	68db      	ldr	r3, [r3, #12]
1a003ccc:	f003 0301 	and.w	r3, r3, #1
1a003cd0:	2b00      	cmp	r3, #0
1a003cd2:	d017      	beq.n	1a003d04 <SysTick_Handler+0x74>
					if (motor0.requestedWidth != 0) {
1a003cd4:	4b92      	ldr	r3, [pc, #584]	; (1a003f20 <SysTick_Handler+0x290>)
1a003cd6:	685b      	ldr	r3, [r3, #4]
1a003cd8:	2b00      	cmp	r3, #0
1a003cda:	d02c      	beq.n	1a003d36 <SysTick_Handler+0xa6>
						motor0.requestedWidth = (motor0.requestedWidth * 90) / 100;
1a003cdc:	4b90      	ldr	r3, [pc, #576]	; (1a003f20 <SysTick_Handler+0x290>)
1a003cde:	685b      	ldr	r3, [r3, #4]
1a003ce0:	225a      	movs	r2, #90	; 0x5a
1a003ce2:	fb02 f303 	mul.w	r3, r2, r3
1a003ce6:	4a8f      	ldr	r2, [pc, #572]	; (1a003f24 <SysTick_Handler+0x294>)
1a003ce8:	fb82 1203 	smull	r1, r2, r2, r3
1a003cec:	1152      	asrs	r2, r2, #5
1a003cee:	17db      	asrs	r3, r3, #31
1a003cf0:	1ad3      	subs	r3, r2, r3
1a003cf2:	4a8b      	ldr	r2, [pc, #556]	; (1a003f20 <SysTick_Handler+0x290>)
1a003cf4:	6053      	str	r3, [r2, #4]
						updateMotorWidth(0, motor0.requestedWidth);
1a003cf6:	4b8a      	ldr	r3, [pc, #552]	; (1a003f20 <SysTick_Handler+0x290>)
1a003cf8:	685b      	ldr	r3, [r3, #4]
1a003cfa:	4619      	mov	r1, r3
1a003cfc:	2000      	movs	r0, #0
1a003cfe:	f7fe f96b 	bl	1a001fd8 <updateMotorWidth>
1a003d02:	e018      	b.n	1a003d36 <SysTick_Handler+0xa6>
					}
				} else {
					if (motor0.requestedVelocity > 0) {
1a003d04:	4b86      	ldr	r3, [pc, #536]	; (1a003f20 <SysTick_Handler+0x290>)
1a003d06:	695b      	ldr	r3, [r3, #20]
1a003d08:	2b00      	cmp	r3, #0
1a003d0a:	dd05      	ble.n	1a003d18 <SysTick_Handler+0x88>
						motor0.requestedVelocity--;
1a003d0c:	4b84      	ldr	r3, [pc, #528]	; (1a003f20 <SysTick_Handler+0x290>)
1a003d0e:	695b      	ldr	r3, [r3, #20]
1a003d10:	3b01      	subs	r3, #1
1a003d12:	4a83      	ldr	r2, [pc, #524]	; (1a003f20 <SysTick_Handler+0x290>)
1a003d14:	6153      	str	r3, [r2, #20]
1a003d16:	e00e      	b.n	1a003d36 <SysTick_Handler+0xa6>
					} else if (motor0.requestedVelocity < 0) {
1a003d18:	4b81      	ldr	r3, [pc, #516]	; (1a003f20 <SysTick_Handler+0x290>)
1a003d1a:	695b      	ldr	r3, [r3, #20]
1a003d1c:	2b00      	cmp	r3, #0
1a003d1e:	da0a      	bge.n	1a003d36 <SysTick_Handler+0xa6>
						motor0.requestedVelocity++;
1a003d20:	4b7f      	ldr	r3, [pc, #508]	; (1a003f20 <SysTick_Handler+0x290>)
1a003d22:	695b      	ldr	r3, [r3, #20]
1a003d24:	3301      	adds	r3, #1
1a003d26:	4a7e      	ldr	r2, [pc, #504]	; (1a003f20 <SysTick_Handler+0x290>)
1a003d28:	6153      	str	r3, [r2, #20]
1a003d2a:	e004      	b.n	1a003d36 <SysTick_Handler+0xa6>
					}
				}
			} else {
				motor0.decayCounter--;
1a003d2c:	4b7c      	ldr	r3, [pc, #496]	; (1a003f20 <SysTick_Handler+0x290>)
1a003d2e:	689b      	ldr	r3, [r3, #8]
1a003d30:	3b01      	subs	r3, #1
1a003d32:	4a7b      	ldr	r2, [pc, #492]	; (1a003f20 <SysTick_Handler+0x290>)
1a003d34:	6093      	str	r3, [r2, #8]
			}
		}
		if (motor1.controlMode & (DECAY_MODE)) {
1a003d36:	4b7c      	ldr	r3, [pc, #496]	; (1a003f28 <SysTick_Handler+0x298>)
1a003d38:	68db      	ldr	r3, [r3, #12]
1a003d3a:	f003 0304 	and.w	r3, r3, #4
1a003d3e:	2b00      	cmp	r3, #0
1a003d40:	d03a      	beq.n	1a003db8 <SysTick_Handler+0x128>
			if (motor1.decayCounter == 0) {
1a003d42:	4b79      	ldr	r3, [pc, #484]	; (1a003f28 <SysTick_Handler+0x298>)
1a003d44:	689b      	ldr	r3, [r3, #8]
1a003d46:	2b00      	cmp	r3, #0
1a003d48:	d131      	bne.n	1a003dae <SysTick_Handler+0x11e>
				if (motor1.controlMode & DIRECT_MODE) {
1a003d4a:	4b77      	ldr	r3, [pc, #476]	; (1a003f28 <SysTick_Handler+0x298>)
1a003d4c:	68db      	ldr	r3, [r3, #12]
1a003d4e:	f003 0301 	and.w	r3, r3, #1
1a003d52:	2b00      	cmp	r3, #0
1a003d54:	d017      	beq.n	1a003d86 <SysTick_Handler+0xf6>
					if (motor1.requestedWidth != 0) {
1a003d56:	4b74      	ldr	r3, [pc, #464]	; (1a003f28 <SysTick_Handler+0x298>)
1a003d58:	685b      	ldr	r3, [r3, #4]
1a003d5a:	2b00      	cmp	r3, #0
1a003d5c:	d02c      	beq.n	1a003db8 <SysTick_Handler+0x128>
						motor1.requestedWidth = (motor1.requestedWidth * 90) / 100;
1a003d5e:	4b72      	ldr	r3, [pc, #456]	; (1a003f28 <SysTick_Handler+0x298>)
1a003d60:	685b      	ldr	r3, [r3, #4]
1a003d62:	225a      	movs	r2, #90	; 0x5a
1a003d64:	fb02 f303 	mul.w	r3, r2, r3
1a003d68:	4a6e      	ldr	r2, [pc, #440]	; (1a003f24 <SysTick_Handler+0x294>)
1a003d6a:	fb82 1203 	smull	r1, r2, r2, r3
1a003d6e:	1152      	asrs	r2, r2, #5
1a003d70:	17db      	asrs	r3, r3, #31
1a003d72:	1ad3      	subs	r3, r2, r3
1a003d74:	4a6c      	ldr	r2, [pc, #432]	; (1a003f28 <SysTick_Handler+0x298>)
1a003d76:	6053      	str	r3, [r2, #4]
						updateMotorWidth(1, motor1.requestedWidth);
1a003d78:	4b6b      	ldr	r3, [pc, #428]	; (1a003f28 <SysTick_Handler+0x298>)
1a003d7a:	685b      	ldr	r3, [r3, #4]
1a003d7c:	4619      	mov	r1, r3
1a003d7e:	2001      	movs	r0, #1
1a003d80:	f7fe f92a 	bl	1a001fd8 <updateMotorWidth>
1a003d84:	e018      	b.n	1a003db8 <SysTick_Handler+0x128>
					}
				} else {
					if (motor1.requestedVelocity > 0) {
1a003d86:	4b68      	ldr	r3, [pc, #416]	; (1a003f28 <SysTick_Handler+0x298>)
1a003d88:	695b      	ldr	r3, [r3, #20]
1a003d8a:	2b00      	cmp	r3, #0
1a003d8c:	dd05      	ble.n	1a003d9a <SysTick_Handler+0x10a>
						motor1.requestedVelocity--;
1a003d8e:	4b66      	ldr	r3, [pc, #408]	; (1a003f28 <SysTick_Handler+0x298>)
1a003d90:	695b      	ldr	r3, [r3, #20]
1a003d92:	3b01      	subs	r3, #1
1a003d94:	4a64      	ldr	r2, [pc, #400]	; (1a003f28 <SysTick_Handler+0x298>)
1a003d96:	6153      	str	r3, [r2, #20]
1a003d98:	e00e      	b.n	1a003db8 <SysTick_Handler+0x128>
					} else if (motor1.requestedVelocity < 0) {
1a003d9a:	4b63      	ldr	r3, [pc, #396]	; (1a003f28 <SysTick_Handler+0x298>)
1a003d9c:	695b      	ldr	r3, [r3, #20]
1a003d9e:	2b00      	cmp	r3, #0
1a003da0:	da0a      	bge.n	1a003db8 <SysTick_Handler+0x128>
						motor1.requestedVelocity++;
1a003da2:	4b61      	ldr	r3, [pc, #388]	; (1a003f28 <SysTick_Handler+0x298>)
1a003da4:	695b      	ldr	r3, [r3, #20]
1a003da6:	3301      	adds	r3, #1
1a003da8:	4a5f      	ldr	r2, [pc, #380]	; (1a003f28 <SysTick_Handler+0x298>)
1a003daa:	6153      	str	r3, [r2, #20]
1a003dac:	e004      	b.n	1a003db8 <SysTick_Handler+0x128>
					}
				}
			} else {
				motor1.decayCounter--;
1a003dae:	4b5e      	ldr	r3, [pc, #376]	; (1a003f28 <SysTick_Handler+0x298>)
1a003db0:	689b      	ldr	r3, [r3, #8]
1a003db2:	3b01      	subs	r3, #1
1a003db4:	4a5c      	ldr	r2, [pc, #368]	; (1a003f28 <SysTick_Handler+0x298>)
1a003db6:	6093      	str	r3, [r2, #8]
			}
		}
	}
	if(one_k_hertz_timer == 50){
1a003db8:	4b5c      	ldr	r3, [pc, #368]	; (1a003f2c <SysTick_Handler+0x29c>)
1a003dba:	881b      	ldrh	r3, [r3, #0]
1a003dbc:	2b32      	cmp	r3, #50	; 0x32
1a003dbe:	d116      	bne.n	1a003dee <SysTick_Handler+0x15e>
		one_k_hertz_timer = 0;
1a003dc0:	4b5a      	ldr	r3, [pc, #360]	; (1a003f2c <SysTick_Handler+0x29c>)
1a003dc2:	2200      	movs	r2, #0
1a003dc4:	801a      	strh	r2, [r3, #0]
		if (motor0.controlMode & VELOCITY_MODE) {
1a003dc6:	4b56      	ldr	r3, [pc, #344]	; (1a003f20 <SysTick_Handler+0x290>)
1a003dc8:	68db      	ldr	r3, [r3, #12]
1a003dca:	f003 0302 	and.w	r3, r3, #2
1a003dce:	2b00      	cmp	r3, #0
1a003dd0:	d003      	beq.n	1a003dda <SysTick_Handler+0x14a>
			motor0.updateRequired = 1;
1a003dd2:	4b53      	ldr	r3, [pc, #332]	; (1a003f20 <SysTick_Handler+0x290>)
1a003dd4:	2201      	movs	r2, #1
1a003dd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		}
		if (motor1.controlMode & VELOCITY_MODE) {
1a003dda:	4b53      	ldr	r3, [pc, #332]	; (1a003f28 <SysTick_Handler+0x298>)
1a003ddc:	68db      	ldr	r3, [r3, #12]
1a003dde:	f003 0302 	and.w	r3, r3, #2
1a003de2:	2b00      	cmp	r3, #0
1a003de4:	d003      	beq.n	1a003dee <SysTick_Handler+0x15e>
			motor1.updateRequired = 1;
1a003de6:	4b50      	ldr	r3, [pc, #320]	; (1a003f28 <SysTick_Handler+0x298>)
1a003de8:	2201      	movs	r2, #1
1a003dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		}
	}
#endif
	if (++second_timer >= 50000) { //1000
1a003dee:	4b50      	ldr	r3, [pc, #320]	; (1a003f30 <SysTick_Handler+0x2a0>)
1a003df0:	881b      	ldrh	r3, [r3, #0]
1a003df2:	3301      	adds	r3, #1
1a003df4:	b29a      	uxth	r2, r3
1a003df6:	4b4e      	ldr	r3, [pc, #312]	; (1a003f30 <SysTick_Handler+0x2a0>)
1a003df8:	801a      	strh	r2, [r3, #0]
1a003dfa:	4b4d      	ldr	r3, [pc, #308]	; (1a003f30 <SysTick_Handler+0x2a0>)
1a003dfc:	881b      	ldrh	r3, [r3, #0]
1a003dfe:	f24c 324f 	movw	r2, #49999	; 0xc34f
1a003e02:	4293      	cmp	r3, r2
1a003e04:	d914      	bls.n	1a003e30 <SysTick_Handler+0x1a0>
		lastEventCount = events.currentEventRate;
1a003e06:	4b4b      	ldr	r3, [pc, #300]	; (1a003f34 <SysTick_Handler+0x2a4>)
1a003e08:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
1a003e0c:	330c      	adds	r3, #12
1a003e0e:	681b      	ldr	r3, [r3, #0]
1a003e10:	4a49      	ldr	r2, [pc, #292]	; (1a003f38 <SysTick_Handler+0x2a8>)
1a003e12:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
1a003e14:	f3bf 8f4f 	dsb	sy
#if USE_SDCARD
		lastByteCount = sdcard.bytesWrittenPerSecond;
		lastEventRecordedCount = sdcard.eventsRecordedPerSecond;
#endif
		__DSB(); //Ensure it has been saved
		events.currentEventRate = 0;
1a003e18:	4b46      	ldr	r3, [pc, #280]	; (1a003f34 <SysTick_Handler+0x2a4>)
1a003e1a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
1a003e1e:	330c      	adds	r3, #12
1a003e20:	2200      	movs	r2, #0
1a003e22:	601a      	str	r2, [r3, #0]
#if USE_SDCARD
		sdcard.bytesWrittenPerSecond = 0;
		sdcard.eventsRecordedPerSecond = 0;
#endif

		second_timer = 0;
1a003e24:	4b42      	ldr	r3, [pc, #264]	; (1a003f30 <SysTick_Handler+0x2a0>)
1a003e26:	2200      	movs	r2, #0
1a003e28:	801a      	strh	r2, [r3, #0]
		toggleLed0 = 1;
1a003e2a:	4b44      	ldr	r3, [pc, #272]	; (1a003f3c <SysTick_Handler+0x2ac>)
1a003e2c:	2201      	movs	r2, #1
1a003e2e:	601a      	str	r2, [r3, #0]
	}

	//GET adc value every 1/50000 second
	// only when both channels successfully get the data that we increase the buf length
	if(!buf_flag){
1a003e30:	4b43      	ldr	r3, [pc, #268]	; (1a003f40 <SysTick_Handler+0x2b0>)
1a003e32:	781b      	ldrb	r3, [r3, #0]
1a003e34:	2b00      	cmp	r3, #0
1a003e36:	d137      	bne.n	1a003ea8 <SysTick_Handler+0x218>
		if(Chip_ADC_ReadValue(LPC_ADC1, 6, &left0[buf_length].real) == SUCCESS){
1a003e38:	4b42      	ldr	r3, [pc, #264]	; (1a003f44 <SysTick_Handler+0x2b4>)
1a003e3a:	881b      	ldrh	r3, [r3, #0]
1a003e3c:	00db      	lsls	r3, r3, #3
1a003e3e:	4a42      	ldr	r2, [pc, #264]	; (1a003f48 <SysTick_Handler+0x2b8>)
1a003e40:	4413      	add	r3, r2
1a003e42:	461a      	mov	r2, r3
1a003e44:	2106      	movs	r1, #6
1a003e46:	4841      	ldr	r0, [pc, #260]	; (1a003f4c <SysTick_Handler+0x2bc>)
1a003e48:	f00d fe3e 	bl	1a011ac8 <Chip_ADC_ReadValue>
1a003e4c:	4603      	mov	r3, r0
1a003e4e:	2b01      	cmp	r3, #1
1a003e50:	d161      	bne.n	1a003f16 <SysTick_Handler+0x286>
			if(Chip_ADC_ReadValue(LPC_ADC1, 7, &right0[buf_length].real) == SUCCESS){
1a003e52:	4b3c      	ldr	r3, [pc, #240]	; (1a003f44 <SysTick_Handler+0x2b4>)
1a003e54:	881b      	ldrh	r3, [r3, #0]
1a003e56:	00db      	lsls	r3, r3, #3
1a003e58:	4a3d      	ldr	r2, [pc, #244]	; (1a003f50 <SysTick_Handler+0x2c0>)
1a003e5a:	4413      	add	r3, r2
1a003e5c:	461a      	mov	r2, r3
1a003e5e:	2107      	movs	r1, #7
1a003e60:	483a      	ldr	r0, [pc, #232]	; (1a003f4c <SysTick_Handler+0x2bc>)
1a003e62:	f00d fe31 	bl	1a011ac8 <Chip_ADC_ReadValue>
1a003e66:	4603      	mov	r3, r0
1a003e68:	2b01      	cmp	r3, #1
1a003e6a:	d154      	bne.n	1a003f16 <SysTick_Handler+0x286>
				if(++buf_length == BUFFER_MAX_SIZE){
1a003e6c:	4b35      	ldr	r3, [pc, #212]	; (1a003f44 <SysTick_Handler+0x2b4>)
1a003e6e:	881b      	ldrh	r3, [r3, #0]
1a003e70:	3301      	adds	r3, #1
1a003e72:	b29a      	uxth	r2, r3
1a003e74:	4b33      	ldr	r3, [pc, #204]	; (1a003f44 <SysTick_Handler+0x2b4>)
1a003e76:	801a      	strh	r2, [r3, #0]
1a003e78:	4b32      	ldr	r3, [pc, #200]	; (1a003f44 <SysTick_Handler+0x2b4>)
1a003e7a:	881b      	ldrh	r3, [r3, #0]
1a003e7c:	2b80      	cmp	r3, #128	; 0x80
1a003e7e:	d14a      	bne.n	1a003f16 <SysTick_Handler+0x286>
					buf_length = 0;
1a003e80:	4b30      	ldr	r3, [pc, #192]	; (1a003f44 <SysTick_Handler+0x2b4>)
1a003e82:	2200      	movs	r2, #0
1a003e84:	801a      	strh	r2, [r3, #0]
					buf_flag = !buf_flag;
1a003e86:	4b2e      	ldr	r3, [pc, #184]	; (1a003f40 <SysTick_Handler+0x2b0>)
1a003e88:	781b      	ldrb	r3, [r3, #0]
1a003e8a:	2b00      	cmp	r3, #0
1a003e8c:	bf0c      	ite	eq
1a003e8e:	2301      	moveq	r3, #1
1a003e90:	2300      	movne	r3, #0
1a003e92:	b2db      	uxtb	r3, r3
1a003e94:	461a      	mov	r2, r3
1a003e96:	4b2a      	ldr	r3, [pc, #168]	; (1a003f40 <SysTick_Handler+0x2b0>)
1a003e98:	701a      	strb	r2, [r3, #0]
					process_flag = 0;
1a003e9a:	4b2e      	ldr	r3, [pc, #184]	; (1a003f54 <SysTick_Handler+0x2c4>)
1a003e9c:	2200      	movs	r2, #0
1a003e9e:	701a      	strb	r2, [r3, #0]
					xputs(">>>>>");
1a003ea0:	482d      	ldr	r0, [pc, #180]	; (1a003f58 <SysTick_Handler+0x2c8>)
1a003ea2:	f002 fcdb 	bl	1a00685c <xputs>
			enabledSensors[i]->triggered = 1;
			sensorRefreshRequested = 1;
		}
	}
	*/
}
1a003ea6:	e036      	b.n	1a003f16 <SysTick_Handler+0x286>
					xputs(">>>>>");
				}
			}
		}
	}else{
		if(Chip_ADC_ReadValue(LPC_ADC1, 6, &left1[buf_length].real) == SUCCESS){
1a003ea8:	4b26      	ldr	r3, [pc, #152]	; (1a003f44 <SysTick_Handler+0x2b4>)
1a003eaa:	881b      	ldrh	r3, [r3, #0]
1a003eac:	00db      	lsls	r3, r3, #3
1a003eae:	4a2b      	ldr	r2, [pc, #172]	; (1a003f5c <SysTick_Handler+0x2cc>)
1a003eb0:	4413      	add	r3, r2
1a003eb2:	461a      	mov	r2, r3
1a003eb4:	2106      	movs	r1, #6
1a003eb6:	4825      	ldr	r0, [pc, #148]	; (1a003f4c <SysTick_Handler+0x2bc>)
1a003eb8:	f00d fe06 	bl	1a011ac8 <Chip_ADC_ReadValue>
1a003ebc:	4603      	mov	r3, r0
1a003ebe:	2b01      	cmp	r3, #1
1a003ec0:	d129      	bne.n	1a003f16 <SysTick_Handler+0x286>
			if(Chip_ADC_ReadValue(LPC_ADC1, 7, &right1[buf_length].real) == SUCCESS){
1a003ec2:	4b20      	ldr	r3, [pc, #128]	; (1a003f44 <SysTick_Handler+0x2b4>)
1a003ec4:	881b      	ldrh	r3, [r3, #0]
1a003ec6:	00db      	lsls	r3, r3, #3
1a003ec8:	4a25      	ldr	r2, [pc, #148]	; (1a003f60 <SysTick_Handler+0x2d0>)
1a003eca:	4413      	add	r3, r2
1a003ecc:	461a      	mov	r2, r3
1a003ece:	2107      	movs	r1, #7
1a003ed0:	481e      	ldr	r0, [pc, #120]	; (1a003f4c <SysTick_Handler+0x2bc>)
1a003ed2:	f00d fdf9 	bl	1a011ac8 <Chip_ADC_ReadValue>
1a003ed6:	4603      	mov	r3, r0
1a003ed8:	2b01      	cmp	r3, #1
1a003eda:	d11c      	bne.n	1a003f16 <SysTick_Handler+0x286>
				if(++buf_length == BUFFER_MAX_SIZE){
1a003edc:	4b19      	ldr	r3, [pc, #100]	; (1a003f44 <SysTick_Handler+0x2b4>)
1a003ede:	881b      	ldrh	r3, [r3, #0]
1a003ee0:	3301      	adds	r3, #1
1a003ee2:	b29a      	uxth	r2, r3
1a003ee4:	4b17      	ldr	r3, [pc, #92]	; (1a003f44 <SysTick_Handler+0x2b4>)
1a003ee6:	801a      	strh	r2, [r3, #0]
1a003ee8:	4b16      	ldr	r3, [pc, #88]	; (1a003f44 <SysTick_Handler+0x2b4>)
1a003eea:	881b      	ldrh	r3, [r3, #0]
1a003eec:	2b80      	cmp	r3, #128	; 0x80
1a003eee:	d112      	bne.n	1a003f16 <SysTick_Handler+0x286>
					buf_length = 0;
1a003ef0:	4b14      	ldr	r3, [pc, #80]	; (1a003f44 <SysTick_Handler+0x2b4>)
1a003ef2:	2200      	movs	r2, #0
1a003ef4:	801a      	strh	r2, [r3, #0]
					buf_flag = !buf_flag;
1a003ef6:	4b12      	ldr	r3, [pc, #72]	; (1a003f40 <SysTick_Handler+0x2b0>)
1a003ef8:	781b      	ldrb	r3, [r3, #0]
1a003efa:	2b00      	cmp	r3, #0
1a003efc:	bf0c      	ite	eq
1a003efe:	2301      	moveq	r3, #1
1a003f00:	2300      	movne	r3, #0
1a003f02:	b2db      	uxtb	r3, r3
1a003f04:	461a      	mov	r2, r3
1a003f06:	4b0e      	ldr	r3, [pc, #56]	; (1a003f40 <SysTick_Handler+0x2b0>)
1a003f08:	701a      	strb	r2, [r3, #0]
					process_flag = 1;
1a003f0a:	4b12      	ldr	r3, [pc, #72]	; (1a003f54 <SysTick_Handler+0x2c4>)
1a003f0c:	2201      	movs	r2, #1
1a003f0e:	701a      	strb	r2, [r3, #0]
					xputs("<<");
1a003f10:	4814      	ldr	r0, [pc, #80]	; (1a003f64 <SysTick_Handler+0x2d4>)
1a003f12:	f002 fca3 	bl	1a00685c <xputs>
			enabledSensors[i]->triggered = 1;
			sensorRefreshRequested = 1;
		}
	}
	*/
}
1a003f16:	bf00      	nop
1a003f18:	bd80      	pop	{r7, pc}
1a003f1a:	bf00      	nop
1a003f1c:	1008658c 	.word	0x1008658c
1a003f20:	100874a4 	.word	0x100874a4
1a003f24:	51eb851f 	.word	0x51eb851f
1a003f28:	10087468 	.word	0x10087468
1a003f2c:	1008658e 	.word	0x1008658e
1a003f30:	10086590 	.word	0x10086590
1a003f34:	10080000 	.word	0x10080000
1a003f38:	1008657c 	.word	0x1008657c
1a003f3c:	10086520 	.word	0x10086520
1a003f40:	1008658a 	.word	0x1008658a
1a003f44:	10086588 	.word	0x10086588
1a003f48:	10087574 	.word	0x10087574
1a003f4c:	400e4000 	.word	0x400e4000
1a003f50:	10087974 	.word	0x10087974
1a003f54:	10086031 	.word	0x10086031
1a003f58:	1a0187f0 	.word	0x1a0187f0
1a003f5c:	10087d74 	.word	0x10087d74
1a003f60:	100883f4 	.word	0x100883f4
1a003f64:	1a0187f8 	.word	0x1a0187f8

1a003f68 <printADCRead>:

STATIC INLINE void printADCRead(uint8_t sensorId, uint8_t channel) {
1a003f68:	b580      	push	{r7, lr}
1a003f6a:	b084      	sub	sp, #16
1a003f6c:	af00      	add	r7, sp, #0
1a003f6e:	4603      	mov	r3, r0
1a003f70:	460a      	mov	r2, r1
1a003f72:	71fb      	strb	r3, [r7, #7]
1a003f74:	4613      	mov	r3, r2
1a003f76:	71bb      	strb	r3, [r7, #6]
	uint16_t data;
	if (Chip_ADC_ReadValue(LPC_ADC1, channel, &data) == SUCCESS) {
1a003f78:	f107 020e 	add.w	r2, r7, #14
1a003f7c:	79bb      	ldrb	r3, [r7, #6]
1a003f7e:	4619      	mov	r1, r3
1a003f80:	480a      	ldr	r0, [pc, #40]	; (1a003fac <printADCRead+0x44>)
1a003f82:	f00d fda1 	bl	1a011ac8 <Chip_ADC_ReadValue>
1a003f86:	4603      	mov	r3, r0
1a003f88:	2b01      	cmp	r3, #1
1a003f8a:	d106      	bne.n	1a003f9a <printADCRead+0x32>
		xprintf("-S%d %u\n", sensorId, data);
1a003f8c:	79fb      	ldrb	r3, [r7, #7]
1a003f8e:	89fa      	ldrh	r2, [r7, #14]
1a003f90:	4619      	mov	r1, r3
1a003f92:	4807      	ldr	r0, [pc, #28]	; (1a003fb0 <printADCRead+0x48>)
1a003f94:	f002 fdf2 	bl	1a006b7c <xprintf>
	} else {
		xprintf("-S%d -1\n", sensorId);
	}
}
1a003f98:	e004      	b.n	1a003fa4 <printADCRead+0x3c>
STATIC INLINE void printADCRead(uint8_t sensorId, uint8_t channel) {
	uint16_t data;
	if (Chip_ADC_ReadValue(LPC_ADC1, channel, &data) == SUCCESS) {
		xprintf("-S%d %u\n", sensorId, data);
	} else {
		xprintf("-S%d -1\n", sensorId);
1a003f9a:	79fb      	ldrb	r3, [r7, #7]
1a003f9c:	4619      	mov	r1, r3
1a003f9e:	4805      	ldr	r0, [pc, #20]	; (1a003fb4 <printADCRead+0x4c>)
1a003fa0:	f002 fdec 	bl	1a006b7c <xprintf>
	}
}
1a003fa4:	bf00      	nop
1a003fa6:	3710      	adds	r7, #16
1a003fa8:	46bd      	mov	sp, r7
1a003faa:	bd80      	pop	{r7, pc}
1a003fac:	400e4000 	.word	0x400e4000
1a003fb0:	1a0187fc 	.word	0x1a0187fc
1a003fb4:	1a018808 	.word	0x1a018808

1a003fb8 <batteryInit>:

void batteryInit() {
1a003fb8:	b580      	push	{r7, lr}
1a003fba:	af00      	add	r7, sp, #0
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_START_NOW, ADC_TRIGGERMODE_RISING); //This must be before the burst cmd
1a003fbc:	2200      	movs	r2, #0
1a003fbe:	2101      	movs	r1, #1
1a003fc0:	4806      	ldr	r0, [pc, #24]	; (1a003fdc <batteryInit+0x24>)
1a003fc2:	f00d fd93 	bl	1a011aec <Chip_ADC_SetStartMode>
	Chip_ADC_SetBurstCmd(LPC_ADC1, ENABLE);
1a003fc6:	2101      	movs	r1, #1
1a003fc8:	4804      	ldr	r0, [pc, #16]	; (1a003fdc <batteryInit+0x24>)
1a003fca:	f00d fde3 	bl	1a011b94 <Chip_ADC_SetBurstCmd>
	Chip_ADC_EnableChannel(LPC_ADC1, 1, ENABLE);
1a003fce:	2201      	movs	r2, #1
1a003fd0:	2101      	movs	r1, #1
1a003fd2:	4802      	ldr	r0, [pc, #8]	; (1a003fdc <batteryInit+0x24>)
1a003fd4:	f00d fdb2 	bl	1a011b3c <Chip_ADC_EnableChannel>
}
1a003fd8:	bf00      	nop
1a003fda:	bd80      	pop	{r7, pc}
1a003fdc:	400e4000 	.word	0x400e4000

1a003fe0 <batteryReport>:

#define VBAT_DIVISOR		(11)
void batteryReport() {
1a003fe0:	b580      	push	{r7, lr}
1a003fe2:	b082      	sub	sp, #8
1a003fe4:	af00      	add	r7, sp, #0
	uint16_t adcRead;
	if (Chip_ADC_ReadValue(LPC_ADC1, 1, &adcRead) == SUCCESS) {
1a003fe6:	1cbb      	adds	r3, r7, #2
1a003fe8:	461a      	mov	r2, r3
1a003fea:	2101      	movs	r1, #1
1a003fec:	480c      	ldr	r0, [pc, #48]	; (1a004020 <batteryReport+0x40>)
1a003fee:	f00d fd6b 	bl	1a011ac8 <Chip_ADC_ReadValue>
1a003ff2:	4603      	mov	r3, r0
1a003ff4:	2b01      	cmp	r3, #1
1a003ff6:	d10c      	bne.n	1a004012 <batteryReport+0x32>
		uint32_t data = (adcRead * 2800 * VBAT_DIVISOR) >> 10; //divide by 1024
1a003ff8:	887b      	ldrh	r3, [r7, #2]
1a003ffa:	461a      	mov	r2, r3
1a003ffc:	f647 0350 	movw	r3, #30800	; 0x7850
1a004000:	fb03 f302 	mul.w	r3, r3, r2
1a004004:	129b      	asrs	r3, r3, #10
1a004006:	607b      	str	r3, [r7, #4]
		xprintf("-S0 %u\n", data);
1a004008:	6879      	ldr	r1, [r7, #4]
1a00400a:	4806      	ldr	r0, [pc, #24]	; (1a004024 <batteryReport+0x44>)
1a00400c:	f002 fdb6 	bl	1a006b7c <xprintf>
	} else {
		xputs("-S0 -1\n");
	}
}
1a004010:	e002      	b.n	1a004018 <batteryReport+0x38>
	uint16_t adcRead;
	if (Chip_ADC_ReadValue(LPC_ADC1, 1, &adcRead) == SUCCESS) {
		uint32_t data = (adcRead * 2800 * VBAT_DIVISOR) >> 10; //divide by 1024
		xprintf("-S0 %u\n", data);
	} else {
		xputs("-S0 -1\n");
1a004012:	4805      	ldr	r0, [pc, #20]	; (1a004028 <batteryReport+0x48>)
1a004014:	f002 fc22 	bl	1a00685c <xputs>
	}
}
1a004018:	bf00      	nop
1a00401a:	3708      	adds	r7, #8
1a00401c:	46bd      	mov	sp, r7
1a00401e:	bd80      	pop	{r7, pc}
1a004020:	400e4000 	.word	0x400e4000
1a004024:	1a018814 	.word	0x1a018814
1a004028:	1a01881c 	.word	0x1a01881c

1a00402c <ADC0Init>:

void ADC0Init() {
1a00402c:	b580      	push	{r7, lr}
1a00402e:	af00      	add	r7, sp, #0
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_START_NOW, ADC_TRIGGERMODE_RISING); //This must be before the burst cmd
1a004030:	2200      	movs	r2, #0
1a004032:	2101      	movs	r1, #1
1a004034:	4806      	ldr	r0, [pc, #24]	; (1a004050 <ADC0Init+0x24>)
1a004036:	f00d fd59 	bl	1a011aec <Chip_ADC_SetStartMode>
	Chip_ADC_SetBurstCmd(LPC_ADC1, ENABLE);
1a00403a:	2101      	movs	r1, #1
1a00403c:	4804      	ldr	r0, [pc, #16]	; (1a004050 <ADC0Init+0x24>)
1a00403e:	f00d fda9 	bl	1a011b94 <Chip_ADC_SetBurstCmd>
	Chip_ADC_EnableChannel(LPC_ADC1, 2, ENABLE);
1a004042:	2201      	movs	r2, #1
1a004044:	2102      	movs	r1, #2
1a004046:	4802      	ldr	r0, [pc, #8]	; (1a004050 <ADC0Init+0x24>)
1a004048:	f00d fd78 	bl	1a011b3c <Chip_ADC_EnableChannel>
}
1a00404c:	bf00      	nop
1a00404e:	bd80      	pop	{r7, pc}
1a004050:	400e4000 	.word	0x400e4000

1a004054 <ADC0Report>:
void ADC0Report() {
1a004054:	b580      	push	{r7, lr}
1a004056:	af00      	add	r7, sp, #0
	printADCRead(1, 2);
1a004058:	2102      	movs	r1, #2
1a00405a:	2001      	movs	r0, #1
1a00405c:	f7ff ff84 	bl	1a003f68 <printADCRead>
}
1a004060:	bf00      	nop
1a004062:	bd80      	pop	{r7, pc}

1a004064 <ADC1Init>:
void ADC1Init() {
1a004064:	b580      	push	{r7, lr}
1a004066:	af00      	add	r7, sp, #0
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_START_NOW, ADC_TRIGGERMODE_RISING); //This must be before the burst cmd
1a004068:	2200      	movs	r2, #0
1a00406a:	2101      	movs	r1, #1
1a00406c:	4806      	ldr	r0, [pc, #24]	; (1a004088 <ADC1Init+0x24>)
1a00406e:	f00d fd3d 	bl	1a011aec <Chip_ADC_SetStartMode>
	Chip_ADC_SetBurstCmd(LPC_ADC1, ENABLE);
1a004072:	2101      	movs	r1, #1
1a004074:	4804      	ldr	r0, [pc, #16]	; (1a004088 <ADC1Init+0x24>)
1a004076:	f00d fd8d 	bl	1a011b94 <Chip_ADC_SetBurstCmd>
	Chip_ADC_EnableChannel(LPC_ADC1, 3, ENABLE);
1a00407a:	2201      	movs	r2, #1
1a00407c:	2103      	movs	r1, #3
1a00407e:	4802      	ldr	r0, [pc, #8]	; (1a004088 <ADC1Init+0x24>)
1a004080:	f00d fd5c 	bl	1a011b3c <Chip_ADC_EnableChannel>
}
1a004084:	bf00      	nop
1a004086:	bd80      	pop	{r7, pc}
1a004088:	400e4000 	.word	0x400e4000

1a00408c <ADC1Report>:
void ADC1Report() {
1a00408c:	b580      	push	{r7, lr}
1a00408e:	af00      	add	r7, sp, #0
	printADCRead(2, 3);
1a004090:	2103      	movs	r1, #3
1a004092:	2002      	movs	r0, #2
1a004094:	f7ff ff68 	bl	1a003f68 <printADCRead>
}
1a004098:	bf00      	nop
1a00409a:	bd80      	pop	{r7, pc}

1a00409c <ADC2Init>:

void ADC2Init() {
1a00409c:	b580      	push	{r7, lr}
1a00409e:	af00      	add	r7, sp, #0
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_START_NOW, ADC_TRIGGERMODE_RISING); //This must be before the burst cmd
1a0040a0:	2200      	movs	r2, #0
1a0040a2:	2101      	movs	r1, #1
1a0040a4:	4806      	ldr	r0, [pc, #24]	; (1a0040c0 <ADC2Init+0x24>)
1a0040a6:	f00d fd21 	bl	1a011aec <Chip_ADC_SetStartMode>
	Chip_ADC_SetBurstCmd(LPC_ADC1, ENABLE);
1a0040aa:	2101      	movs	r1, #1
1a0040ac:	4804      	ldr	r0, [pc, #16]	; (1a0040c0 <ADC2Init+0x24>)
1a0040ae:	f00d fd71 	bl	1a011b94 <Chip_ADC_SetBurstCmd>
	Chip_ADC_EnableChannel(LPC_ADC1, 4, ENABLE);
1a0040b2:	2201      	movs	r2, #1
1a0040b4:	2104      	movs	r1, #4
1a0040b6:	4802      	ldr	r0, [pc, #8]	; (1a0040c0 <ADC2Init+0x24>)
1a0040b8:	f00d fd40 	bl	1a011b3c <Chip_ADC_EnableChannel>
}
1a0040bc:	bf00      	nop
1a0040be:	bd80      	pop	{r7, pc}
1a0040c0:	400e4000 	.word	0x400e4000

1a0040c4 <ADC2Report>:
void ADC2Report() {
1a0040c4:	b580      	push	{r7, lr}
1a0040c6:	af00      	add	r7, sp, #0
	printADCRead(3, 4);
1a0040c8:	2104      	movs	r1, #4
1a0040ca:	2003      	movs	r0, #3
1a0040cc:	f7ff ff4c 	bl	1a003f68 <printADCRead>
}
1a0040d0:	bf00      	nop
1a0040d2:	bd80      	pop	{r7, pc}

1a0040d4 <ADC3Init>:
void ADC3Init() {
1a0040d4:	b580      	push	{r7, lr}
1a0040d6:	af00      	add	r7, sp, #0
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_START_NOW, ADC_TRIGGERMODE_RISING); //This must be before the burst cmd
1a0040d8:	2200      	movs	r2, #0
1a0040da:	2101      	movs	r1, #1
1a0040dc:	4806      	ldr	r0, [pc, #24]	; (1a0040f8 <ADC3Init+0x24>)
1a0040de:	f00d fd05 	bl	1a011aec <Chip_ADC_SetStartMode>
	Chip_ADC_SetBurstCmd(LPC_ADC1, ENABLE);
1a0040e2:	2101      	movs	r1, #1
1a0040e4:	4804      	ldr	r0, [pc, #16]	; (1a0040f8 <ADC3Init+0x24>)
1a0040e6:	f00d fd55 	bl	1a011b94 <Chip_ADC_SetBurstCmd>
	Chip_ADC_EnableChannel(LPC_ADC1, 5, ENABLE);
1a0040ea:	2201      	movs	r2, #1
1a0040ec:	2105      	movs	r1, #5
1a0040ee:	4802      	ldr	r0, [pc, #8]	; (1a0040f8 <ADC3Init+0x24>)
1a0040f0:	f00d fd24 	bl	1a011b3c <Chip_ADC_EnableChannel>
}
1a0040f4:	bf00      	nop
1a0040f6:	bd80      	pop	{r7, pc}
1a0040f8:	400e4000 	.word	0x400e4000

1a0040fc <ADC3Report>:
void ADC3Report() {
1a0040fc:	b580      	push	{r7, lr}
1a0040fe:	af00      	add	r7, sp, #0
	printADCRead(4, 5);
1a004100:	2105      	movs	r1, #5
1a004102:	2004      	movs	r0, #4
1a004104:	f7ff ff30 	bl	1a003f68 <printADCRead>
}
1a004108:	bf00      	nop
1a00410a:	bd80      	pop	{r7, pc}

1a00410c <ADC4Init>:
void ADC4Init() {
1a00410c:	b580      	push	{r7, lr}
1a00410e:	af00      	add	r7, sp, #0
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_START_NOW, ADC_TRIGGERMODE_RISING); //This must be before the burst cmd
1a004110:	2200      	movs	r2, #0
1a004112:	2101      	movs	r1, #1
1a004114:	4806      	ldr	r0, [pc, #24]	; (1a004130 <ADC4Init+0x24>)
1a004116:	f00d fce9 	bl	1a011aec <Chip_ADC_SetStartMode>
	Chip_ADC_SetBurstCmd(LPC_ADC1, ENABLE);
1a00411a:	2101      	movs	r1, #1
1a00411c:	4804      	ldr	r0, [pc, #16]	; (1a004130 <ADC4Init+0x24>)
1a00411e:	f00d fd39 	bl	1a011b94 <Chip_ADC_SetBurstCmd>
	Chip_ADC_EnableChannel(LPC_ADC1, 6, ENABLE);
1a004122:	2201      	movs	r2, #1
1a004124:	2106      	movs	r1, #6
1a004126:	4802      	ldr	r0, [pc, #8]	; (1a004130 <ADC4Init+0x24>)
1a004128:	f00d fd08 	bl	1a011b3c <Chip_ADC_EnableChannel>
}
1a00412c:	bf00      	nop
1a00412e:	bd80      	pop	{r7, pc}
1a004130:	400e4000 	.word	0x400e4000

1a004134 <ADC4Report>:
void ADC4Report() {
1a004134:	b580      	push	{r7, lr}
1a004136:	af00      	add	r7, sp, #0
	printADCRead(5, 6);
1a004138:	2106      	movs	r1, #6
1a00413a:	2005      	movs	r0, #5
1a00413c:	f7ff ff14 	bl	1a003f68 <printADCRead>
}
1a004140:	bf00      	nop
1a004142:	bd80      	pop	{r7, pc}

1a004144 <ADC5Init>:
void ADC5Init() {
1a004144:	b580      	push	{r7, lr}
1a004146:	af00      	add	r7, sp, #0
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_START_NOW, ADC_TRIGGERMODE_RISING); //This must be before the burst cmd
1a004148:	2200      	movs	r2, #0
1a00414a:	2101      	movs	r1, #1
1a00414c:	4806      	ldr	r0, [pc, #24]	; (1a004168 <ADC5Init+0x24>)
1a00414e:	f00d fccd 	bl	1a011aec <Chip_ADC_SetStartMode>
	Chip_ADC_SetBurstCmd(LPC_ADC1, ENABLE);
1a004152:	2101      	movs	r1, #1
1a004154:	4804      	ldr	r0, [pc, #16]	; (1a004168 <ADC5Init+0x24>)
1a004156:	f00d fd1d 	bl	1a011b94 <Chip_ADC_SetBurstCmd>
	Chip_ADC_EnableChannel(LPC_ADC1, 7, ENABLE);
1a00415a:	2201      	movs	r2, #1
1a00415c:	2107      	movs	r1, #7
1a00415e:	4802      	ldr	r0, [pc, #8]	; (1a004168 <ADC5Init+0x24>)
1a004160:	f00d fcec 	bl	1a011b3c <Chip_ADC_EnableChannel>
}
1a004164:	bf00      	nop
1a004166:	bd80      	pop	{r7, pc}
1a004168:	400e4000 	.word	0x400e4000

1a00416c <ADC5Report>:
void ADC5Report() {
1a00416c:	b580      	push	{r7, lr}
1a00416e:	af00      	add	r7, sp, #0
	printADCRead(6, 7);
1a004170:	2107      	movs	r1, #7
1a004172:	2006      	movs	r0, #6
1a004174:	f7ff fef8 	bl	1a003f68 <printADCRead>
}
1a004178:	bf00      	nop
1a00417a:	bd80      	pop	{r7, pc}

1a00417c <MotorPWMReport>:

void MotorPWMReport() {
1a00417c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00417e:	b083      	sub	sp, #12
1a004180:	af02      	add	r7, sp, #8
	xprintf("-S%d %d %d %d %d\n", PWM_SIGNALS, getMotorWidth(MOTOR0), getMotorWidth(MOTOR1), getMotorDutycycle(MOTOR0),
1a004182:	2000      	movs	r0, #0
1a004184:	f7fd fba2 	bl	1a0018cc <getMotorWidth>
1a004188:	4605      	mov	r5, r0
1a00418a:	2001      	movs	r0, #1
1a00418c:	f7fd fb9e 	bl	1a0018cc <getMotorWidth>
1a004190:	4606      	mov	r6, r0
1a004192:	2000      	movs	r0, #0
1a004194:	f7fd fb6e 	bl	1a001874 <getMotorDutycycle>
1a004198:	4604      	mov	r4, r0
1a00419a:	2001      	movs	r0, #1
1a00419c:	f7fd fb6a 	bl	1a001874 <getMotorDutycycle>
1a0041a0:	4603      	mov	r3, r0
1a0041a2:	9301      	str	r3, [sp, #4]
1a0041a4:	9400      	str	r4, [sp, #0]
1a0041a6:	4633      	mov	r3, r6
1a0041a8:	462a      	mov	r2, r5
1a0041aa:	2113      	movs	r1, #19
1a0041ac:	4803      	ldr	r0, [pc, #12]	; (1a0041bc <MotorPWMReport+0x40>)
1a0041ae:	f002 fce5 	bl	1a006b7c <xprintf>
			getMotorDutycycle(MOTOR1));
}
1a0041b2:	bf00      	nop
1a0041b4:	3704      	adds	r7, #4
1a0041b6:	46bd      	mov	sp, r7
1a0041b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0041ba:	bf00      	nop
1a0041bc:	1a018824 	.word	0x1a018824

1a0041c0 <MotorCurrentsInit>:

void MotorCurrentsInit() {
1a0041c0:	b580      	push	{r7, lr}
1a0041c2:	af00      	add	r7, sp, #0
	Chip_SCU_PinMuxSet(MOTOR_DRIVER_CURRENT1_SENSOR_PORT, MOTOR_DRIVER_CURRENT1_SENSOR_PIN, SCU_MODE_INACT | FUNC7);
1a0041c4:	2217      	movs	r2, #23
1a0041c6:	2101      	movs	r1, #1
1a0041c8:	2004      	movs	r0, #4
1a0041ca:	f7ff fd47 	bl	1a003c5c <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(MOTOR_DRIVER_CURRENT2_SENSOR_PORT, MOTOR_DRIVER_CURRENT2_SENSOR_PIN, SCU_MODE_INACT | FUNC7);
1a0041ce:	2217      	movs	r2, #23
1a0041d0:	2103      	movs	r1, #3
1a0041d2:	2004      	movs	r0, #4
1a0041d4:	f7ff fd42 	bl	1a003c5c <Chip_SCU_PinMuxSet>
	LPC_SCU->ENAIO[0] |= 0x3; //Enable Analog function on these GPIO pins.
1a0041d8:	4a0e      	ldr	r2, [pc, #56]	; (1a004214 <MotorCurrentsInit+0x54>)
1a0041da:	4b0e      	ldr	r3, [pc, #56]	; (1a004214 <MotorCurrentsInit+0x54>)
1a0041dc:	f8d3 3c88 	ldr.w	r3, [r3, #3208]	; 0xc88
1a0041e0:	f043 0303 	orr.w	r3, r3, #3
1a0041e4:	f8c2 3c88 	str.w	r3, [r2, #3208]	; 0xc88
	Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING); //This must be before the burst cmd
1a0041e8:	2200      	movs	r2, #0
1a0041ea:	2101      	movs	r1, #1
1a0041ec:	480a      	ldr	r0, [pc, #40]	; (1a004218 <MotorCurrentsInit+0x58>)
1a0041ee:	f00d fc7d 	bl	1a011aec <Chip_ADC_SetStartMode>
	Chip_ADC_SetBurstCmd(LPC_ADC0, ENABLE);
1a0041f2:	2101      	movs	r1, #1
1a0041f4:	4808      	ldr	r0, [pc, #32]	; (1a004218 <MotorCurrentsInit+0x58>)
1a0041f6:	f00d fccd 	bl	1a011b94 <Chip_ADC_SetBurstCmd>
	Chip_ADC_EnableChannel(LPC_ADC0, 0, ENABLE);
1a0041fa:	2201      	movs	r2, #1
1a0041fc:	2100      	movs	r1, #0
1a0041fe:	4806      	ldr	r0, [pc, #24]	; (1a004218 <MotorCurrentsInit+0x58>)
1a004200:	f00d fc9c 	bl	1a011b3c <Chip_ADC_EnableChannel>
	Chip_ADC_EnableChannel(LPC_ADC0, 1, ENABLE);
1a004204:	2201      	movs	r2, #1
1a004206:	2101      	movs	r1, #1
1a004208:	4803      	ldr	r0, [pc, #12]	; (1a004218 <MotorCurrentsInit+0x58>)
1a00420a:	f00d fc97 	bl	1a011b3c <Chip_ADC_EnableChannel>
}
1a00420e:	bf00      	nop
1a004210:	bd80      	pop	{r7, pc}
1a004212:	bf00      	nop
1a004214:	40086000 	.word	0x40086000
1a004218:	400e3000 	.word	0x400e3000

1a00421c <MotorCurrentsReport>:
#define AMPLIFIER_GAIN		(46454ULL) //(1+100k/2.2k)*10
#define SENSE_RESISTOR		(10ULL)
void MotorCurrentsReport() {
1a00421c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a004220:	b089      	sub	sp, #36	; 0x24
1a004222:	af02      	add	r7, sp, #8
	uint16_t motor0, motor1;
	uint64_t motor0Current = -1;
1a004224:	f04f 33ff 	mov.w	r3, #4294967295
1a004228:	f04f 34ff 	mov.w	r4, #4294967295
1a00422c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	uint64_t motor1Current = -1;
1a004230:	f04f 33ff 	mov.w	r3, #4294967295
1a004234:	f04f 34ff 	mov.w	r4, #4294967295
1a004238:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if (Chip_ADC_ReadValue(LPC_ADC0, 0, &motor0) == SUCCESS) {
1a00423c:	1dbb      	adds	r3, r7, #6
1a00423e:	461a      	mov	r2, r3
1a004240:	2100      	movs	r1, #0
1a004242:	4830      	ldr	r0, [pc, #192]	; (1a004304 <MotorCurrentsReport+0xe8>)
1a004244:	f00d fc40 	bl	1a011ac8 <Chip_ADC_ReadValue>
1a004248:	4603      	mov	r3, r0
1a00424a:	2b01      	cmp	r3, #1
1a00424c:	d121      	bne.n	1a004292 <MotorCurrentsReport+0x76>
		motor0Current = ((motor0 * 2800ULL * AMPLIFIER_GAIN * SENSE_RESISTOR) >> 10) / 1000ULL;
1a00424e:	88fb      	ldrh	r3, [r7, #6]
1a004250:	b29b      	uxth	r3, r3
1a004252:	f04f 0400 	mov.w	r4, #0
1a004256:	4a2c      	ldr	r2, [pc, #176]	; (1a004308 <MotorCurrentsReport+0xec>)
1a004258:	fb02 f104 	mul.w	r1, r2, r4
1a00425c:	2200      	movs	r2, #0
1a00425e:	fb02 f203 	mul.w	r2, r2, r3
1a004262:	440a      	add	r2, r1
1a004264:	4928      	ldr	r1, [pc, #160]	; (1a004308 <MotorCurrentsReport+0xec>)
1a004266:	fba3 3401 	umull	r3, r4, r3, r1
1a00426a:	4422      	add	r2, r4
1a00426c:	4614      	mov	r4, r2
1a00426e:	ea4f 2893 	mov.w	r8, r3, lsr #10
1a004272:	ea48 5884 	orr.w	r8, r8, r4, lsl #22
1a004276:	ea4f 2994 	mov.w	r9, r4, lsr #10
1a00427a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00427e:	f04f 0300 	mov.w	r3, #0
1a004282:	4640      	mov	r0, r8
1a004284:	4649      	mov	r1, r9
1a004286:	f010 fa13 	bl	1a0146b0 <__aeabi_uldivmod>
1a00428a:	4603      	mov	r3, r0
1a00428c:	460c      	mov	r4, r1
1a00428e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}
	if (Chip_ADC_ReadValue(LPC_ADC0, 1, &motor1) == SUCCESS) {
1a004292:	1d3b      	adds	r3, r7, #4
1a004294:	461a      	mov	r2, r3
1a004296:	2101      	movs	r1, #1
1a004298:	481a      	ldr	r0, [pc, #104]	; (1a004304 <MotorCurrentsReport+0xe8>)
1a00429a:	f00d fc15 	bl	1a011ac8 <Chip_ADC_ReadValue>
1a00429e:	4603      	mov	r3, r0
1a0042a0:	2b01      	cmp	r3, #1
1a0042a2:	d11f      	bne.n	1a0042e4 <MotorCurrentsReport+0xc8>
		motor1Current = ((motor1 * 2800ULL * AMPLIFIER_GAIN * SENSE_RESISTOR) >> 10) / 1000ULL;
1a0042a4:	88bb      	ldrh	r3, [r7, #4]
1a0042a6:	b29b      	uxth	r3, r3
1a0042a8:	f04f 0400 	mov.w	r4, #0
1a0042ac:	4a16      	ldr	r2, [pc, #88]	; (1a004308 <MotorCurrentsReport+0xec>)
1a0042ae:	fb02 f104 	mul.w	r1, r2, r4
1a0042b2:	2200      	movs	r2, #0
1a0042b4:	fb02 f203 	mul.w	r2, r2, r3
1a0042b8:	440a      	add	r2, r1
1a0042ba:	4913      	ldr	r1, [pc, #76]	; (1a004308 <MotorCurrentsReport+0xec>)
1a0042bc:	fba3 3401 	umull	r3, r4, r3, r1
1a0042c0:	4422      	add	r2, r4
1a0042c2:	4614      	mov	r4, r2
1a0042c4:	0a9d      	lsrs	r5, r3, #10
1a0042c6:	ea45 5584 	orr.w	r5, r5, r4, lsl #22
1a0042ca:	0aa6      	lsrs	r6, r4, #10
1a0042cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0042d0:	f04f 0300 	mov.w	r3, #0
1a0042d4:	4628      	mov	r0, r5
1a0042d6:	4631      	mov	r1, r6
1a0042d8:	f010 f9ea 	bl	1a0146b0 <__aeabi_uldivmod>
1a0042dc:	4603      	mov	r3, r0
1a0042de:	460c      	mov	r4, r1
1a0042e0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	}
	xprintf("-S%d %u %u\n", MOTOR_CURRENTS, motor0Current, motor1Current);
1a0042e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
1a0042e8:	e9cd 3400 	strd	r3, r4, [sp]
1a0042ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
1a0042f0:	2114      	movs	r1, #20
1a0042f2:	4806      	ldr	r0, [pc, #24]	; (1a00430c <MotorCurrentsReport+0xf0>)
1a0042f4:	f002 fc42 	bl	1a006b7c <xprintf>
}
1a0042f8:	bf00      	nop
1a0042fa:	371c      	adds	r7, #28
1a0042fc:	46bd      	mov	sp, r7
1a0042fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a004302:	bf00      	nop
1a004304:	400e3000 	.word	0x400e3000
1a004308:	4d874a40 	.word	0x4d874a40
1a00430c:	1a018838 	.word	0x1a018838

1a004310 <EventCountReport>:

void EventCountReport() {
1a004310:	b580      	push	{r7, lr}
1a004312:	af00      	add	r7, sp, #0
#if USE_SDCARD
	xprintf("-S%d %d %d %d\n", EVENT_RATE, lastEventCount, lastEventRecordedCount, lastByteCount);
#else
	xprintf("-S%d %d\n", EVENT_RATE, lastEventCount);
1a004314:	4b04      	ldr	r3, [pc, #16]	; (1a004328 <EventCountReport+0x18>)
1a004316:	681b      	ldr	r3, [r3, #0]
1a004318:	461a      	mov	r2, r3
1a00431a:	2115      	movs	r1, #21
1a00431c:	4803      	ldr	r0, [pc, #12]	; (1a00432c <EventCountReport+0x1c>)
1a00431e:	f002 fc2d 	bl	1a006b7c <xprintf>
#endif
}
1a004322:	bf00      	nop
1a004324:	bd80      	pop	{r7, pc}
1a004326:	bf00      	nop
1a004328:	1008657c 	.word	0x1008657c
1a00432c:	1a018844 	.word	0x1a018844

1a004330 <sensorsInit>:

void sensorsInit(void) {
1a004330:	b580      	push	{r7, lr}
1a004332:	b082      	sub	sp, #8
1a004334:	af00      	add	r7, sp, #0
	Chip_ADC_Init(LPC_ADC0, &adcConfig);
1a004336:	4965      	ldr	r1, [pc, #404]	; (1a0044cc <sensorsInit+0x19c>)
1a004338:	4865      	ldr	r0, [pc, #404]	; (1a0044d0 <sensorsInit+0x1a0>)
1a00433a:	f00d fb81 	bl	1a011a40 <Chip_ADC_Init>
	Chip_ADC_SetStartMode(LPC_ADC0, ADC_NO_START, ADC_TRIGGERMODE_RISING);
1a00433e:	2200      	movs	r2, #0
1a004340:	2100      	movs	r1, #0
1a004342:	4863      	ldr	r0, [pc, #396]	; (1a0044d0 <sensorsInit+0x1a0>)
1a004344:	f00d fbd2 	bl	1a011aec <Chip_ADC_SetStartMode>
	Chip_ADC_Init(LPC_ADC1, &adcConfig);
1a004348:	4960      	ldr	r1, [pc, #384]	; (1a0044cc <sensorsInit+0x19c>)
1a00434a:	4862      	ldr	r0, [pc, #392]	; (1a0044d4 <sensorsInit+0x1a4>)
1a00434c:	f00d fb78 	bl	1a011a40 <Chip_ADC_Init>
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_NO_START, ADC_TRIGGERMODE_RISING);
1a004350:	2200      	movs	r2, #0
1a004352:	2100      	movs	r1, #0
1a004354:	485f      	ldr	r0, [pc, #380]	; (1a0044d4 <sensorsInit+0x1a4>)
1a004356:	f00d fbc9 	bl	1a011aec <Chip_ADC_SetStartMode>

	sensorRefreshRequested = 0;
1a00435a:	4b5f      	ldr	r3, [pc, #380]	; (1a0044d8 <sensorsInit+0x1a8>)
1a00435c:	2200      	movs	r2, #0
1a00435e:	701a      	strb	r2, [r3, #0]
	sensorsEnabledCounter = 0;
1a004360:	4b5e      	ldr	r3, [pc, #376]	; (1a0044dc <sensorsInit+0x1ac>)
1a004362:	2200      	movs	r2, #0
1a004364:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_SENSORS; ++i) {
1a004366:	2300      	movs	r3, #0
1a004368:	607b      	str	r3, [r7, #4]
1a00436a:	e04d      	b.n	1a004408 <sensorsInit+0xd8>
		enabledSensors[i] = NULL;
1a00436c:	4a5c      	ldr	r2, [pc, #368]	; (1a0044e0 <sensorsInit+0x1b0>)
1a00436e:	687b      	ldr	r3, [r7, #4]
1a004370:	2100      	movs	r1, #0
1a004372:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sensorsTimers[i].initialized = false;
1a004376:	495b      	ldr	r1, [pc, #364]	; (1a0044e4 <sensorsInit+0x1b4>)
1a004378:	687a      	ldr	r2, [r7, #4]
1a00437a:	4613      	mov	r3, r2
1a00437c:	009b      	lsls	r3, r3, #2
1a00437e:	4413      	add	r3, r2
1a004380:	009b      	lsls	r3, r3, #2
1a004382:	440b      	add	r3, r1
1a004384:	2200      	movs	r2, #0
1a004386:	701a      	strb	r2, [r3, #0]
		sensorsTimers[i].triggered = false;
1a004388:	4956      	ldr	r1, [pc, #344]	; (1a0044e4 <sensorsInit+0x1b4>)
1a00438a:	687a      	ldr	r2, [r7, #4]
1a00438c:	4613      	mov	r3, r2
1a00438e:	009b      	lsls	r3, r3, #2
1a004390:	4413      	add	r3, r2
1a004392:	009b      	lsls	r3, r3, #2
1a004394:	440b      	add	r3, r1
1a004396:	3301      	adds	r3, #1
1a004398:	2200      	movs	r2, #0
1a00439a:	701a      	strb	r2, [r3, #0]
		sensorsTimers[i].reload = 0;
1a00439c:	4951      	ldr	r1, [pc, #324]	; (1a0044e4 <sensorsInit+0x1b4>)
1a00439e:	687a      	ldr	r2, [r7, #4]
1a0043a0:	4613      	mov	r3, r2
1a0043a2:	009b      	lsls	r3, r3, #2
1a0043a4:	4413      	add	r3, r2
1a0043a6:	009b      	lsls	r3, r3, #2
1a0043a8:	440b      	add	r3, r1
1a0043aa:	3304      	adds	r3, #4
1a0043ac:	2200      	movs	r2, #0
1a0043ae:	601a      	str	r2, [r3, #0]
		sensorsTimers[i].counter = 0;
1a0043b0:	494c      	ldr	r1, [pc, #304]	; (1a0044e4 <sensorsInit+0x1b4>)
1a0043b2:	687a      	ldr	r2, [r7, #4]
1a0043b4:	4613      	mov	r3, r2
1a0043b6:	009b      	lsls	r3, r3, #2
1a0043b8:	4413      	add	r3, r2
1a0043ba:	009b      	lsls	r3, r3, #2
1a0043bc:	440b      	add	r3, r1
1a0043be:	3308      	adds	r3, #8
1a0043c0:	2200      	movs	r2, #0
1a0043c2:	601a      	str	r2, [r3, #0]
		sensorsTimers[i].position = -1;
1a0043c4:	4947      	ldr	r1, [pc, #284]	; (1a0044e4 <sensorsInit+0x1b4>)
1a0043c6:	687a      	ldr	r2, [r7, #4]
1a0043c8:	4613      	mov	r3, r2
1a0043ca:	009b      	lsls	r3, r3, #2
1a0043cc:	4413      	add	r3, r2
1a0043ce:	009b      	lsls	r3, r3, #2
1a0043d0:	440b      	add	r3, r1
1a0043d2:	3302      	adds	r3, #2
1a0043d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a0043d8:	801a      	strh	r2, [r3, #0]
		sensorsTimers[i].init = NULL;
1a0043da:	4942      	ldr	r1, [pc, #264]	; (1a0044e4 <sensorsInit+0x1b4>)
1a0043dc:	687a      	ldr	r2, [r7, #4]
1a0043de:	4613      	mov	r3, r2
1a0043e0:	009b      	lsls	r3, r3, #2
1a0043e2:	4413      	add	r3, r2
1a0043e4:	009b      	lsls	r3, r3, #2
1a0043e6:	440b      	add	r3, r1
1a0043e8:	330c      	adds	r3, #12
1a0043ea:	2200      	movs	r2, #0
1a0043ec:	601a      	str	r2, [r3, #0]
		sensorsTimers[i].refresh = NULL;
1a0043ee:	493d      	ldr	r1, [pc, #244]	; (1a0044e4 <sensorsInit+0x1b4>)
1a0043f0:	687a      	ldr	r2, [r7, #4]
1a0043f2:	4613      	mov	r3, r2
1a0043f4:	009b      	lsls	r3, r3, #2
1a0043f6:	4413      	add	r3, r2
1a0043f8:	009b      	lsls	r3, r3, #2
1a0043fa:	440b      	add	r3, r1
1a0043fc:	3310      	adds	r3, #16
1a0043fe:	2200      	movs	r2, #0
1a004400:	601a      	str	r2, [r3, #0]
	Chip_ADC_Init(LPC_ADC1, &adcConfig);
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_NO_START, ADC_TRIGGERMODE_RISING);

	sensorRefreshRequested = 0;
	sensorsEnabledCounter = 0;
	for (int i = 0; i < MAX_SENSORS; ++i) {
1a004402:	687b      	ldr	r3, [r7, #4]
1a004404:	3301      	adds	r3, #1
1a004406:	607b      	str	r3, [r7, #4]
1a004408:	687b      	ldr	r3, [r7, #4]
1a00440a:	2b1f      	cmp	r3, #31
1a00440c:	ddae      	ble.n	1a00436c <sensorsInit+0x3c>
		sensorsTimers[i].position = -1;
		sensorsTimers[i].init = NULL;
		sensorsTimers[i].refresh = NULL;

	}
	sensorsTimers[BATTERY].init = batteryInit;
1a00440e:	4b35      	ldr	r3, [pc, #212]	; (1a0044e4 <sensorsInit+0x1b4>)
1a004410:	4a35      	ldr	r2, [pc, #212]	; (1a0044e8 <sensorsInit+0x1b8>)
1a004412:	60da      	str	r2, [r3, #12]
	sensorsTimers[BATTERY].refresh = batteryReport;
1a004414:	4b33      	ldr	r3, [pc, #204]	; (1a0044e4 <sensorsInit+0x1b4>)
1a004416:	4a35      	ldr	r2, [pc, #212]	; (1a0044ec <sensorsInit+0x1bc>)
1a004418:	611a      	str	r2, [r3, #16]
	sensorsTimers[ADC0].init = ADC0Init;
1a00441a:	4b32      	ldr	r3, [pc, #200]	; (1a0044e4 <sensorsInit+0x1b4>)
1a00441c:	4a34      	ldr	r2, [pc, #208]	; (1a0044f0 <sensorsInit+0x1c0>)
1a00441e:	621a      	str	r2, [r3, #32]
	sensorsTimers[ADC0].refresh = ADC0Report;
1a004420:	4b30      	ldr	r3, [pc, #192]	; (1a0044e4 <sensorsInit+0x1b4>)
1a004422:	4a34      	ldr	r2, [pc, #208]	; (1a0044f4 <sensorsInit+0x1c4>)
1a004424:	625a      	str	r2, [r3, #36]	; 0x24
	sensorsTimers[ADC1].init = ADC1Init;
1a004426:	4b2f      	ldr	r3, [pc, #188]	; (1a0044e4 <sensorsInit+0x1b4>)
1a004428:	4a33      	ldr	r2, [pc, #204]	; (1a0044f8 <sensorsInit+0x1c8>)
1a00442a:	635a      	str	r2, [r3, #52]	; 0x34
	sensorsTimers[ADC1].refresh = ADC1Report;
1a00442c:	4b2d      	ldr	r3, [pc, #180]	; (1a0044e4 <sensorsInit+0x1b4>)
1a00442e:	4a33      	ldr	r2, [pc, #204]	; (1a0044fc <sensorsInit+0x1cc>)
1a004430:	639a      	str	r2, [r3, #56]	; 0x38
	sensorsTimers[ADC2].init = ADC2Init;
1a004432:	4b2c      	ldr	r3, [pc, #176]	; (1a0044e4 <sensorsInit+0x1b4>)
1a004434:	4a32      	ldr	r2, [pc, #200]	; (1a004500 <sensorsInit+0x1d0>)
1a004436:	649a      	str	r2, [r3, #72]	; 0x48
	sensorsTimers[ADC2].refresh = ADC2Report;
1a004438:	4b2a      	ldr	r3, [pc, #168]	; (1a0044e4 <sensorsInit+0x1b4>)
1a00443a:	4a32      	ldr	r2, [pc, #200]	; (1a004504 <sensorsInit+0x1d4>)
1a00443c:	64da      	str	r2, [r3, #76]	; 0x4c
	sensorsTimers[ADC3].init = ADC3Init;
1a00443e:	4b29      	ldr	r3, [pc, #164]	; (1a0044e4 <sensorsInit+0x1b4>)
1a004440:	4a31      	ldr	r2, [pc, #196]	; (1a004508 <sensorsInit+0x1d8>)
1a004442:	65da      	str	r2, [r3, #92]	; 0x5c
	sensorsTimers[ADC3].refresh = ADC3Report;
1a004444:	4b27      	ldr	r3, [pc, #156]	; (1a0044e4 <sensorsInit+0x1b4>)
1a004446:	4a31      	ldr	r2, [pc, #196]	; (1a00450c <sensorsInit+0x1dc>)
1a004448:	661a      	str	r2, [r3, #96]	; 0x60
	sensorsTimers[ADC4].init = ADC4Init;
1a00444a:	4b26      	ldr	r3, [pc, #152]	; (1a0044e4 <sensorsInit+0x1b4>)
1a00444c:	4a30      	ldr	r2, [pc, #192]	; (1a004510 <sensorsInit+0x1e0>)
1a00444e:	671a      	str	r2, [r3, #112]	; 0x70
	sensorsTimers[ADC4].refresh = ADC4Report;
1a004450:	4b24      	ldr	r3, [pc, #144]	; (1a0044e4 <sensorsInit+0x1b4>)
1a004452:	4a30      	ldr	r2, [pc, #192]	; (1a004514 <sensorsInit+0x1e4>)
1a004454:	675a      	str	r2, [r3, #116]	; 0x74
	sensorsTimers[ADC5].init = ADC5Init;
1a004456:	4b23      	ldr	r3, [pc, #140]	; (1a0044e4 <sensorsInit+0x1b4>)
1a004458:	4a2f      	ldr	r2, [pc, #188]	; (1a004518 <sensorsInit+0x1e8>)
1a00445a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	sensorsTimers[ADC5].refresh = ADC5Report;
1a00445e:	4b21      	ldr	r3, [pc, #132]	; (1a0044e4 <sensorsInit+0x1b4>)
1a004460:	4a2e      	ldr	r2, [pc, #184]	; (1a00451c <sensorsInit+0x1ec>)
1a004462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	sensorsTimers[MOTOR_CURRENTS].init = MotorCurrentsInit;
1a004466:	4b1f      	ldr	r3, [pc, #124]	; (1a0044e4 <sensorsInit+0x1b4>)
1a004468:	4a2d      	ldr	r2, [pc, #180]	; (1a004520 <sensorsInit+0x1f0>)
1a00446a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	sensorsTimers[MOTOR_CURRENTS].refresh = MotorCurrentsReport;
1a00446e:	4b1d      	ldr	r3, [pc, #116]	; (1a0044e4 <sensorsInit+0x1b4>)
1a004470:	4a2c      	ldr	r2, [pc, #176]	; (1a004524 <sensorsInit+0x1f4>)
1a004472:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	sensorsTimers[PWM_SIGNALS].refresh = MotorPWMReport;
1a004476:	4b1b      	ldr	r3, [pc, #108]	; (1a0044e4 <sensorsInit+0x1b4>)
1a004478:	4a2b      	ldr	r2, [pc, #172]	; (1a004528 <sensorsInit+0x1f8>)
1a00447a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	sensorsTimers[EVENT_RATE].refresh = EventCountReport;
1a00447e:	4b19      	ldr	r3, [pc, #100]	; (1a0044e4 <sensorsInit+0x1b4>)
1a004480:	4a2a      	ldr	r2, [pc, #168]	; (1a00452c <sensorsInit+0x1fc>)
1a004482:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

	// initialize channel 4 and 5 for the microphone values
	ADC4Init();
1a004486:	f7ff fe41 	bl	1a00410c <ADC4Init>
	ADC5Init();
1a00448a:	f7ff fe5b 	bl	1a004144 <ADC5Init>

	//uint32_t load = Chip_Clock_GetRate(CLK_MX_MXCORE) / 1000 - 1;
	uint32_t load = Chip_Clock_GetRate(CLK_MX_MXCORE) / ADC_FREQ - 1;
1a00448e:	2069      	movs	r0, #105	; 0x69
1a004490:	f00e f826 	bl	1a0124e0 <Chip_Clock_GetRate>
1a004494:	4603      	mov	r3, r0
1a004496:	091b      	lsrs	r3, r3, #4
1a004498:	4a25      	ldr	r2, [pc, #148]	; (1a004530 <sensorsInit+0x200>)
1a00449a:	fba2 2303 	umull	r2, r3, r2, r3
1a00449e:	09db      	lsrs	r3, r3, #7
1a0044a0:	3b01      	subs	r3, #1
1a0044a2:	603b      	str	r3, [r7, #0]
	if (load > 0xFFFFFF) {
1a0044a4:	683b      	ldr	r3, [r7, #0]
1a0044a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1a0044aa:	d302      	bcc.n	1a0044b2 <sensorsInit+0x182>
		load = 0xFFFFFF;
1a0044ac:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
1a0044b0:	603b      	str	r3, [r7, #0]
	}
	SysTick->LOAD = load;
1a0044b2:	4a20      	ldr	r2, [pc, #128]	; (1a004534 <sensorsInit+0x204>)
1a0044b4:	683b      	ldr	r3, [r7, #0]
1a0044b6:	6053      	str	r3, [r2, #4]
	SysTick->CTRL |= 0x7;	// enable the Systick, bit 0 is enable, bit 1 is
1a0044b8:	4a1e      	ldr	r2, [pc, #120]	; (1a004534 <sensorsInit+0x204>)
1a0044ba:	4b1e      	ldr	r3, [pc, #120]	; (1a004534 <sensorsInit+0x204>)
1a0044bc:	681b      	ldr	r3, [r3, #0]
1a0044be:	f043 0307 	orr.w	r3, r3, #7
1a0044c2:	6013      	str	r3, [r2, #0]
							// interrupt/polling choice, bit 2 selects the core clock/external clock
							// thus 0x07 = 0b111 (enabled, interrupt mode, core clock)
}
1a0044c4:	bf00      	nop
1a0044c6:	3708      	adds	r7, #8
1a0044c8:	46bd      	mov	sp, r7
1a0044ca:	bd80      	pop	{r7, pc}
1a0044cc:	10086580 	.word	0x10086580
1a0044d0:	400e3000 	.word	0x400e3000
1a0044d4:	400e4000 	.word	0x400e4000
1a0044d8:	10087570 	.word	0x10087570
1a0044dc:	10088874 	.word	0x10088874
1a0044e0:	100887f4 	.word	0x100887f4
1a0044e4:	10088174 	.word	0x10088174
1a0044e8:	1a003fb9 	.word	0x1a003fb9
1a0044ec:	1a003fe1 	.word	0x1a003fe1
1a0044f0:	1a00402d 	.word	0x1a00402d
1a0044f4:	1a004055 	.word	0x1a004055
1a0044f8:	1a004065 	.word	0x1a004065
1a0044fc:	1a00408d 	.word	0x1a00408d
1a004500:	1a00409d 	.word	0x1a00409d
1a004504:	1a0040c5 	.word	0x1a0040c5
1a004508:	1a0040d5 	.word	0x1a0040d5
1a00450c:	1a0040fd 	.word	0x1a0040fd
1a004510:	1a00410d 	.word	0x1a00410d
1a004514:	1a004135 	.word	0x1a004135
1a004518:	1a004145 	.word	0x1a004145
1a00451c:	1a00416d 	.word	0x1a00416d
1a004520:	1a0041c1 	.word	0x1a0041c1
1a004524:	1a00421d 	.word	0x1a00421d
1a004528:	1a00417d 	.word	0x1a00417d
1a00452c:	1a004311 	.word	0x1a004311
1a004530:	0a7c5ac5 	.word	0x0a7c5ac5
1a004534:	e000e010 	.word	0xe000e010

1a004538 <enableSensors>:

void enableSensors(uint32_t mask, uint8_t flag, uint32_t period) {
1a004538:	b580      	push	{r7, lr}
1a00453a:	b086      	sub	sp, #24
1a00453c:	af00      	add	r7, sp, #0
1a00453e:	60f8      	str	r0, [r7, #12]
1a004540:	460b      	mov	r3, r1
1a004542:	607a      	str	r2, [r7, #4]
1a004544:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < MAX_SENSORS; ++i) {
1a004546:	2300      	movs	r3, #0
1a004548:	617b      	str	r3, [r7, #20]
1a00454a:	e012      	b.n	1a004572 <enableSensors+0x3a>
		if (mask & (1 << i)) {
1a00454c:	2201      	movs	r2, #1
1a00454e:	697b      	ldr	r3, [r7, #20]
1a004550:	fa02 f303 	lsl.w	r3, r2, r3
1a004554:	461a      	mov	r2, r3
1a004556:	68fb      	ldr	r3, [r7, #12]
1a004558:	4013      	ands	r3, r2
1a00455a:	2b00      	cmp	r3, #0
1a00455c:	d006      	beq.n	1a00456c <enableSensors+0x34>
			enableSensor(i, flag, period);
1a00455e:	697b      	ldr	r3, [r7, #20]
1a004560:	b2db      	uxtb	r3, r3
1a004562:	7af9      	ldrb	r1, [r7, #11]
1a004564:	687a      	ldr	r2, [r7, #4]
1a004566:	4618      	mov	r0, r3
1a004568:	f000 f80a 	bl	1a004580 <enableSensor>
							// interrupt/polling choice, bit 2 selects the core clock/external clock
							// thus 0x07 = 0b111 (enabled, interrupt mode, core clock)
}

void enableSensors(uint32_t mask, uint8_t flag, uint32_t period) {
	for (int i = 0; i < MAX_SENSORS; ++i) {
1a00456c:	697b      	ldr	r3, [r7, #20]
1a00456e:	3301      	adds	r3, #1
1a004570:	617b      	str	r3, [r7, #20]
1a004572:	697b      	ldr	r3, [r7, #20]
1a004574:	2b1f      	cmp	r3, #31
1a004576:	dde9      	ble.n	1a00454c <enableSensors+0x14>
		if (mask & (1 << i)) {
			enableSensor(i, flag, period);
		}
	}
}
1a004578:	bf00      	nop
1a00457a:	3718      	adds	r7, #24
1a00457c:	46bd      	mov	sp, r7
1a00457e:	bd80      	pop	{r7, pc}

1a004580 <enableSensor>:

void enableSensor(uint8_t sensorId, uint8_t flag, uint32_t period) {
1a004580:	b580      	push	{r7, lr}
1a004582:	b084      	sub	sp, #16
1a004584:	af00      	add	r7, sp, #0
1a004586:	4603      	mov	r3, r0
1a004588:	603a      	str	r2, [r7, #0]
1a00458a:	71fb      	strb	r3, [r7, #7]
1a00458c:	460b      	mov	r3, r1
1a00458e:	71bb      	strb	r3, [r7, #6]
	if (sensorId >= MAX_SENSORS) {
1a004590:	79fb      	ldrb	r3, [r7, #7]
1a004592:	2b1f      	cmp	r3, #31
1a004594:	f200 80e3 	bhi.w	1a00475e <enableSensor+0x1de>
		return;
	}
	if (sensorsTimers[sensorId].refresh == NULL) {
1a004598:	79fa      	ldrb	r2, [r7, #7]
1a00459a:	4974      	ldr	r1, [pc, #464]	; (1a00476c <enableSensor+0x1ec>)
1a00459c:	4613      	mov	r3, r2
1a00459e:	009b      	lsls	r3, r3, #2
1a0045a0:	4413      	add	r3, r2
1a0045a2:	009b      	lsls	r3, r3, #2
1a0045a4:	440b      	add	r3, r1
1a0045a6:	3310      	adds	r3, #16
1a0045a8:	681b      	ldr	r3, [r3, #0]
1a0045aa:	2b00      	cmp	r3, #0
1a0045ac:	f000 80d9 	beq.w	1a004762 <enableSensor+0x1e2>
		return;
	}
	SysTick->CTRL &= ~0x1;	//disable the Systick
1a0045b0:	4a6f      	ldr	r2, [pc, #444]	; (1a004770 <enableSensor+0x1f0>)
1a0045b2:	4b6f      	ldr	r3, [pc, #444]	; (1a004770 <enableSensor+0x1f0>)
1a0045b4:	681b      	ldr	r3, [r3, #0]
1a0045b6:	f023 0301 	bic.w	r3, r3, #1
1a0045ba:	6013      	str	r3, [r2, #0]
	if (flag) {
1a0045bc:	79bb      	ldrb	r3, [r7, #6]
1a0045be:	2b00      	cmp	r3, #0
1a0045c0:	d073      	beq.n	1a0046aa <enableSensor+0x12a>
		if (sensorsTimers[sensorId].position == -1) {
1a0045c2:	79fa      	ldrb	r2, [r7, #7]
1a0045c4:	4969      	ldr	r1, [pc, #420]	; (1a00476c <enableSensor+0x1ec>)
1a0045c6:	4613      	mov	r3, r2
1a0045c8:	009b      	lsls	r3, r3, #2
1a0045ca:	4413      	add	r3, r2
1a0045cc:	009b      	lsls	r3, r3, #2
1a0045ce:	440b      	add	r3, r1
1a0045d0:	3302      	adds	r3, #2
1a0045d2:	881b      	ldrh	r3, [r3, #0]
1a0045d4:	b21b      	sxth	r3, r3
1a0045d6:	f1b3 3fff 	cmp.w	r3, #4294967295
1a0045da:	d15b      	bne.n	1a004694 <enableSensor+0x114>
			sensorsTimers[sensorId].counter = period;
1a0045dc:	79fa      	ldrb	r2, [r7, #7]
1a0045de:	4963      	ldr	r1, [pc, #396]	; (1a00476c <enableSensor+0x1ec>)
1a0045e0:	4613      	mov	r3, r2
1a0045e2:	009b      	lsls	r3, r3, #2
1a0045e4:	4413      	add	r3, r2
1a0045e6:	009b      	lsls	r3, r3, #2
1a0045e8:	440b      	add	r3, r1
1a0045ea:	3308      	adds	r3, #8
1a0045ec:	683a      	ldr	r2, [r7, #0]
1a0045ee:	601a      	str	r2, [r3, #0]
			sensorsTimers[sensorId].reload = period;
1a0045f0:	79fa      	ldrb	r2, [r7, #7]
1a0045f2:	495e      	ldr	r1, [pc, #376]	; (1a00476c <enableSensor+0x1ec>)
1a0045f4:	4613      	mov	r3, r2
1a0045f6:	009b      	lsls	r3, r3, #2
1a0045f8:	4413      	add	r3, r2
1a0045fa:	009b      	lsls	r3, r3, #2
1a0045fc:	440b      	add	r3, r1
1a0045fe:	3304      	adds	r3, #4
1a004600:	683a      	ldr	r2, [r7, #0]
1a004602:	601a      	str	r2, [r3, #0]
			enabledSensors[sensorsEnabledCounter++] = &sensorsTimers[sensorId];
1a004604:	4b5b      	ldr	r3, [pc, #364]	; (1a004774 <enableSensor+0x1f4>)
1a004606:	681a      	ldr	r2, [r3, #0]
1a004608:	1c53      	adds	r3, r2, #1
1a00460a:	495a      	ldr	r1, [pc, #360]	; (1a004774 <enableSensor+0x1f4>)
1a00460c:	600b      	str	r3, [r1, #0]
1a00460e:	79f9      	ldrb	r1, [r7, #7]
1a004610:	460b      	mov	r3, r1
1a004612:	009b      	lsls	r3, r3, #2
1a004614:	440b      	add	r3, r1
1a004616:	009b      	lsls	r3, r3, #2
1a004618:	4954      	ldr	r1, [pc, #336]	; (1a00476c <enableSensor+0x1ec>)
1a00461a:	440b      	add	r3, r1
1a00461c:	4956      	ldr	r1, [pc, #344]	; (1a004778 <enableSensor+0x1f8>)
1a00461e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
			sensorsTimers[sensorId].position = sensorsEnabledCounter - 1;
1a004622:	79fa      	ldrb	r2, [r7, #7]
1a004624:	4b53      	ldr	r3, [pc, #332]	; (1a004774 <enableSensor+0x1f4>)
1a004626:	681b      	ldr	r3, [r3, #0]
1a004628:	b29b      	uxth	r3, r3
1a00462a:	3b01      	subs	r3, #1
1a00462c:	b29b      	uxth	r3, r3
1a00462e:	b298      	uxth	r0, r3
1a004630:	494e      	ldr	r1, [pc, #312]	; (1a00476c <enableSensor+0x1ec>)
1a004632:	4613      	mov	r3, r2
1a004634:	009b      	lsls	r3, r3, #2
1a004636:	4413      	add	r3, r2
1a004638:	009b      	lsls	r3, r3, #2
1a00463a:	440b      	add	r3, r1
1a00463c:	3302      	adds	r3, #2
1a00463e:	4602      	mov	r2, r0
1a004640:	801a      	strh	r2, [r3, #0]
			if (!sensorsTimers[sensorId].initialized) {
1a004642:	79fa      	ldrb	r2, [r7, #7]
1a004644:	4949      	ldr	r1, [pc, #292]	; (1a00476c <enableSensor+0x1ec>)
1a004646:	4613      	mov	r3, r2
1a004648:	009b      	lsls	r3, r3, #2
1a00464a:	4413      	add	r3, r2
1a00464c:	009b      	lsls	r3, r3, #2
1a00464e:	440b      	add	r3, r1
1a004650:	781b      	ldrb	r3, [r3, #0]
1a004652:	2b00      	cmp	r3, #0
1a004654:	d17c      	bne.n	1a004750 <enableSensor+0x1d0>
				sensorsTimers[sensorId].initialized = true;
1a004656:	79fa      	ldrb	r2, [r7, #7]
1a004658:	4944      	ldr	r1, [pc, #272]	; (1a00476c <enableSensor+0x1ec>)
1a00465a:	4613      	mov	r3, r2
1a00465c:	009b      	lsls	r3, r3, #2
1a00465e:	4413      	add	r3, r2
1a004660:	009b      	lsls	r3, r3, #2
1a004662:	440b      	add	r3, r1
1a004664:	2201      	movs	r2, #1
1a004666:	701a      	strb	r2, [r3, #0]
				if (sensorsTimers[sensorId].init != NULL) {
1a004668:	79fa      	ldrb	r2, [r7, #7]
1a00466a:	4940      	ldr	r1, [pc, #256]	; (1a00476c <enableSensor+0x1ec>)
1a00466c:	4613      	mov	r3, r2
1a00466e:	009b      	lsls	r3, r3, #2
1a004670:	4413      	add	r3, r2
1a004672:	009b      	lsls	r3, r3, #2
1a004674:	440b      	add	r3, r1
1a004676:	330c      	adds	r3, #12
1a004678:	681b      	ldr	r3, [r3, #0]
1a00467a:	2b00      	cmp	r3, #0
1a00467c:	d068      	beq.n	1a004750 <enableSensor+0x1d0>
					sensorsTimers[sensorId].init();
1a00467e:	79fa      	ldrb	r2, [r7, #7]
1a004680:	493a      	ldr	r1, [pc, #232]	; (1a00476c <enableSensor+0x1ec>)
1a004682:	4613      	mov	r3, r2
1a004684:	009b      	lsls	r3, r3, #2
1a004686:	4413      	add	r3, r2
1a004688:	009b      	lsls	r3, r3, #2
1a00468a:	440b      	add	r3, r1
1a00468c:	330c      	adds	r3, #12
1a00468e:	681b      	ldr	r3, [r3, #0]
1a004690:	4798      	blx	r3
1a004692:	e05d      	b.n	1a004750 <enableSensor+0x1d0>
				}
			}
		} else {
			sensorsTimers[sensorId].reload = period;	//Update the period
1a004694:	79fa      	ldrb	r2, [r7, #7]
1a004696:	4935      	ldr	r1, [pc, #212]	; (1a00476c <enableSensor+0x1ec>)
1a004698:	4613      	mov	r3, r2
1a00469a:	009b      	lsls	r3, r3, #2
1a00469c:	4413      	add	r3, r2
1a00469e:	009b      	lsls	r3, r3, #2
1a0046a0:	440b      	add	r3, r1
1a0046a2:	3304      	adds	r3, #4
1a0046a4:	683a      	ldr	r2, [r7, #0]
1a0046a6:	601a      	str	r2, [r3, #0]
1a0046a8:	e052      	b.n	1a004750 <enableSensor+0x1d0>
		}
	} else {
		if (sensorsTimers[sensorId].position != -1) {
1a0046aa:	79fa      	ldrb	r2, [r7, #7]
1a0046ac:	492f      	ldr	r1, [pc, #188]	; (1a00476c <enableSensor+0x1ec>)
1a0046ae:	4613      	mov	r3, r2
1a0046b0:	009b      	lsls	r3, r3, #2
1a0046b2:	4413      	add	r3, r2
1a0046b4:	009b      	lsls	r3, r3, #2
1a0046b6:	440b      	add	r3, r1
1a0046b8:	3302      	adds	r3, #2
1a0046ba:	881b      	ldrh	r3, [r3, #0]
1a0046bc:	b21b      	sxth	r3, r3
1a0046be:	f1b3 3fff 	cmp.w	r3, #4294967295
1a0046c2:	d045      	beq.n	1a004750 <enableSensor+0x1d0>
			//if removing the last one, no need to iterate or do anything besides reducing the counter
			if (sensorsTimers[sensorId].position != sensorsEnabledCounter - 1) {
1a0046c4:	79fa      	ldrb	r2, [r7, #7]
1a0046c6:	4929      	ldr	r1, [pc, #164]	; (1a00476c <enableSensor+0x1ec>)
1a0046c8:	4613      	mov	r3, r2
1a0046ca:	009b      	lsls	r3, r3, #2
1a0046cc:	4413      	add	r3, r2
1a0046ce:	009b      	lsls	r3, r3, #2
1a0046d0:	440b      	add	r3, r1
1a0046d2:	3302      	adds	r3, #2
1a0046d4:	881b      	ldrh	r3, [r3, #0]
1a0046d6:	b21a      	sxth	r2, r3
1a0046d8:	4b26      	ldr	r3, [pc, #152]	; (1a004774 <enableSensor+0x1f4>)
1a0046da:	681b      	ldr	r3, [r3, #0]
1a0046dc:	3b01      	subs	r3, #1
1a0046de:	429a      	cmp	r2, r3
1a0046e0:	d01c      	beq.n	1a00471c <enableSensor+0x19c>
				for (int i = sensorsTimers[sensorId].position; i < sensorsEnabledCounter; ++i) {
1a0046e2:	79fa      	ldrb	r2, [r7, #7]
1a0046e4:	4921      	ldr	r1, [pc, #132]	; (1a00476c <enableSensor+0x1ec>)
1a0046e6:	4613      	mov	r3, r2
1a0046e8:	009b      	lsls	r3, r3, #2
1a0046ea:	4413      	add	r3, r2
1a0046ec:	009b      	lsls	r3, r3, #2
1a0046ee:	440b      	add	r3, r1
1a0046f0:	3302      	adds	r3, #2
1a0046f2:	881b      	ldrh	r3, [r3, #0]
1a0046f4:	b21b      	sxth	r3, r3
1a0046f6:	60fb      	str	r3, [r7, #12]
1a0046f8:	e00b      	b.n	1a004712 <enableSensor+0x192>
					enabledSensors[i] = enabledSensors[i + 1];
1a0046fa:	68fb      	ldr	r3, [r7, #12]
1a0046fc:	3301      	adds	r3, #1
1a0046fe:	4a1e      	ldr	r2, [pc, #120]	; (1a004778 <enableSensor+0x1f8>)
1a004700:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a004704:	491c      	ldr	r1, [pc, #112]	; (1a004778 <enableSensor+0x1f8>)
1a004706:	68fb      	ldr	r3, [r7, #12]
1a004708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	} else {
		if (sensorsTimers[sensorId].position != -1) {
			//if removing the last one, no need to iterate or do anything besides reducing the counter
			if (sensorsTimers[sensorId].position != sensorsEnabledCounter - 1) {
				for (int i = sensorsTimers[sensorId].position; i < sensorsEnabledCounter; ++i) {
1a00470c:	68fb      	ldr	r3, [r7, #12]
1a00470e:	3301      	adds	r3, #1
1a004710:	60fb      	str	r3, [r7, #12]
1a004712:	68fa      	ldr	r2, [r7, #12]
1a004714:	4b17      	ldr	r3, [pc, #92]	; (1a004774 <enableSensor+0x1f4>)
1a004716:	681b      	ldr	r3, [r3, #0]
1a004718:	429a      	cmp	r2, r3
1a00471a:	d3ee      	bcc.n	1a0046fa <enableSensor+0x17a>
					enabledSensors[i] = enabledSensors[i + 1];
				}
			}
			sensorsTimers[sensorId].position = -1;
1a00471c:	79fa      	ldrb	r2, [r7, #7]
1a00471e:	4913      	ldr	r1, [pc, #76]	; (1a00476c <enableSensor+0x1ec>)
1a004720:	4613      	mov	r3, r2
1a004722:	009b      	lsls	r3, r3, #2
1a004724:	4413      	add	r3, r2
1a004726:	009b      	lsls	r3, r3, #2
1a004728:	440b      	add	r3, r1
1a00472a:	3302      	adds	r3, #2
1a00472c:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a004730:	801a      	strh	r2, [r3, #0]
			sensorsTimers[sensorId].triggered = 0;
1a004732:	79fa      	ldrb	r2, [r7, #7]
1a004734:	490d      	ldr	r1, [pc, #52]	; (1a00476c <enableSensor+0x1ec>)
1a004736:	4613      	mov	r3, r2
1a004738:	009b      	lsls	r3, r3, #2
1a00473a:	4413      	add	r3, r2
1a00473c:	009b      	lsls	r3, r3, #2
1a00473e:	440b      	add	r3, r1
1a004740:	3301      	adds	r3, #1
1a004742:	2200      	movs	r2, #0
1a004744:	701a      	strb	r2, [r3, #0]
			sensorsEnabledCounter--;
1a004746:	4b0b      	ldr	r3, [pc, #44]	; (1a004774 <enableSensor+0x1f4>)
1a004748:	681b      	ldr	r3, [r3, #0]
1a00474a:	3b01      	subs	r3, #1
1a00474c:	4a09      	ldr	r2, [pc, #36]	; (1a004774 <enableSensor+0x1f4>)
1a00474e:	6013      	str	r3, [r2, #0]
		}
	}
	SysTick->CTRL |= 0x1;	//enable the Systick
1a004750:	4a07      	ldr	r2, [pc, #28]	; (1a004770 <enableSensor+0x1f0>)
1a004752:	4b07      	ldr	r3, [pc, #28]	; (1a004770 <enableSensor+0x1f0>)
1a004754:	681b      	ldr	r3, [r3, #0]
1a004756:	f043 0301 	orr.w	r3, r3, #1
1a00475a:	6013      	str	r3, [r2, #0]
1a00475c:	e002      	b.n	1a004764 <enableSensor+0x1e4>
	}
}

void enableSensor(uint8_t sensorId, uint8_t flag, uint32_t period) {
	if (sensorId >= MAX_SENSORS) {
		return;
1a00475e:	bf00      	nop
1a004760:	e000      	b.n	1a004764 <enableSensor+0x1e4>
	}
	if (sensorsTimers[sensorId].refresh == NULL) {
		return;
1a004762:	bf00      	nop
			sensorsTimers[sensorId].triggered = 0;
			sensorsEnabledCounter--;
		}
	}
	SysTick->CTRL |= 0x1;	//enable the Systick
}
1a004764:	3710      	adds	r7, #16
1a004766:	46bd      	mov	sp, r7
1a004768:	bd80      	pop	{r7, pc}
1a00476a:	bf00      	nop
1a00476c:	10088174 	.word	0x10088174
1a004770:	e000e010 	.word	0xe000e010
1a004774:	10088874 	.word	0x10088874
1a004778:	100887f4 	.word	0x100887f4

1a00477c <getSensorsOutput>:

void getSensorsOutput(uint32_t mask) {
1a00477c:	b580      	push	{r7, lr}
1a00477e:	b084      	sub	sp, #16
1a004780:	af00      	add	r7, sp, #0
1a004782:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < MAX_SENSORS; ++i) {
1a004784:	2300      	movs	r3, #0
1a004786:	60fb      	str	r3, [r7, #12]
1a004788:	e04b      	b.n	1a004822 <getSensorsOutput+0xa6>
		if (mask & (1 << i)) {
1a00478a:	2201      	movs	r2, #1
1a00478c:	68fb      	ldr	r3, [r7, #12]
1a00478e:	fa02 f303 	lsl.w	r3, r2, r3
1a004792:	461a      	mov	r2, r3
1a004794:	687b      	ldr	r3, [r7, #4]
1a004796:	4013      	ands	r3, r2
1a004798:	2b00      	cmp	r3, #0
1a00479a:	d03f      	beq.n	1a00481c <getSensorsOutput+0xa0>
			if (!sensorsTimers[i].initialized) {
1a00479c:	4924      	ldr	r1, [pc, #144]	; (1a004830 <getSensorsOutput+0xb4>)
1a00479e:	68fa      	ldr	r2, [r7, #12]
1a0047a0:	4613      	mov	r3, r2
1a0047a2:	009b      	lsls	r3, r3, #2
1a0047a4:	4413      	add	r3, r2
1a0047a6:	009b      	lsls	r3, r3, #2
1a0047a8:	440b      	add	r3, r1
1a0047aa:	781b      	ldrb	r3, [r3, #0]
1a0047ac:	2b00      	cmp	r3, #0
1a0047ae:	d120      	bne.n	1a0047f2 <getSensorsOutput+0x76>
				sensorsTimers[i].initialized = true;
1a0047b0:	491f      	ldr	r1, [pc, #124]	; (1a004830 <getSensorsOutput+0xb4>)
1a0047b2:	68fa      	ldr	r2, [r7, #12]
1a0047b4:	4613      	mov	r3, r2
1a0047b6:	009b      	lsls	r3, r3, #2
1a0047b8:	4413      	add	r3, r2
1a0047ba:	009b      	lsls	r3, r3, #2
1a0047bc:	440b      	add	r3, r1
1a0047be:	2201      	movs	r2, #1
1a0047c0:	701a      	strb	r2, [r3, #0]
				if (sensorsTimers[i].init != NULL) {
1a0047c2:	491b      	ldr	r1, [pc, #108]	; (1a004830 <getSensorsOutput+0xb4>)
1a0047c4:	68fa      	ldr	r2, [r7, #12]
1a0047c6:	4613      	mov	r3, r2
1a0047c8:	009b      	lsls	r3, r3, #2
1a0047ca:	4413      	add	r3, r2
1a0047cc:	009b      	lsls	r3, r3, #2
1a0047ce:	440b      	add	r3, r1
1a0047d0:	330c      	adds	r3, #12
1a0047d2:	681b      	ldr	r3, [r3, #0]
1a0047d4:	2b00      	cmp	r3, #0
1a0047d6:	d009      	beq.n	1a0047ec <getSensorsOutput+0x70>
					sensorsTimers[i].init();
1a0047d8:	4915      	ldr	r1, [pc, #84]	; (1a004830 <getSensorsOutput+0xb4>)
1a0047da:	68fa      	ldr	r2, [r7, #12]
1a0047dc:	4613      	mov	r3, r2
1a0047de:	009b      	lsls	r3, r3, #2
1a0047e0:	4413      	add	r3, r2
1a0047e2:	009b      	lsls	r3, r3, #2
1a0047e4:	440b      	add	r3, r1
1a0047e6:	330c      	adds	r3, #12
1a0047e8:	681b      	ldr	r3, [r3, #0]
1a0047ea:	4798      	blx	r3
				}
				timerDelayUs(100);	//Wait for a read on just initialized hardware ( only applicable to ADC)
1a0047ec:	2064      	movs	r0, #100	; 0x64
1a0047ee:	f001 fec7 	bl	1a006580 <timerDelayUs>
			}
			if (sensorsTimers[i].refresh != NULL) {
1a0047f2:	490f      	ldr	r1, [pc, #60]	; (1a004830 <getSensorsOutput+0xb4>)
1a0047f4:	68fa      	ldr	r2, [r7, #12]
1a0047f6:	4613      	mov	r3, r2
1a0047f8:	009b      	lsls	r3, r3, #2
1a0047fa:	4413      	add	r3, r2
1a0047fc:	009b      	lsls	r3, r3, #2
1a0047fe:	440b      	add	r3, r1
1a004800:	3310      	adds	r3, #16
1a004802:	681b      	ldr	r3, [r3, #0]
1a004804:	2b00      	cmp	r3, #0
1a004806:	d009      	beq.n	1a00481c <getSensorsOutput+0xa0>
				sensorsTimers[i].refresh();
1a004808:	4909      	ldr	r1, [pc, #36]	; (1a004830 <getSensorsOutput+0xb4>)
1a00480a:	68fa      	ldr	r2, [r7, #12]
1a00480c:	4613      	mov	r3, r2
1a00480e:	009b      	lsls	r3, r3, #2
1a004810:	4413      	add	r3, r2
1a004812:	009b      	lsls	r3, r3, #2
1a004814:	440b      	add	r3, r1
1a004816:	3310      	adds	r3, #16
1a004818:	681b      	ldr	r3, [r3, #0]
1a00481a:	4798      	blx	r3
	}
	SysTick->CTRL |= 0x1;	//enable the Systick
}

void getSensorsOutput(uint32_t mask) {
	for (int i = 0; i < MAX_SENSORS; ++i) {
1a00481c:	68fb      	ldr	r3, [r7, #12]
1a00481e:	3301      	adds	r3, #1
1a004820:	60fb      	str	r3, [r7, #12]
1a004822:	68fb      	ldr	r3, [r7, #12]
1a004824:	2b1f      	cmp	r3, #31
1a004826:	ddb0      	ble.n	1a00478a <getSensorsOutput+0xe>
			if (sensorsTimers[i].refresh != NULL) {
				sensorsTimers[i].refresh();
			}
		}
	}
}
1a004828:	bf00      	nop
1a00482a:	3710      	adds	r7, #16
1a00482c:	46bd      	mov	sp, r7
1a00482e:	bd80      	pop	{r7, pc}
1a004830:	10088174 	.word	0x10088174

1a004834 <Chip_DAC_ConfigDAConverterControl>:
 *                  - DAC_DMA_ENA    :enable/disable DMA access
 * @return	Nothing
 * @note	Pass an Or'ed value of the DAC flags to enable those options.
 */
STATIC INLINE void Chip_DAC_ConfigDAConverterControl(LPC_DAC_T *pDAC, uint32_t dacFlags)
{
1a004834:	b480      	push	{r7}
1a004836:	b085      	sub	sp, #20
1a004838:	af00      	add	r7, sp, #0
1a00483a:	6078      	str	r0, [r7, #4]
1a00483c:	6039      	str	r1, [r7, #0]
	uint32_t temp;

	temp = pDAC->CTRL & ~DAC_DACCTRL_MASK;
1a00483e:	687b      	ldr	r3, [r7, #4]
1a004840:	685b      	ldr	r3, [r3, #4]
1a004842:	f023 030f 	bic.w	r3, r3, #15
1a004846:	60fb      	str	r3, [r7, #12]
	pDAC->CTRL = temp | dacFlags;
1a004848:	68fa      	ldr	r2, [r7, #12]
1a00484a:	683b      	ldr	r3, [r7, #0]
1a00484c:	431a      	orrs	r2, r3
1a00484e:	687b      	ldr	r3, [r7, #4]
1a004850:	605a      	str	r2, [r3, #4]
}
1a004852:	bf00      	nop
1a004854:	3714      	adds	r7, #20
1a004856:	46bd      	mov	sp, r7
1a004858:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00485c:	4770      	bx	lr
1a00485e:	bf00      	nop

1a004860 <DacInit>:
 * Input for the wakeup comparator
 * The DAC uses a 10 bit value and the V_DAC is 2.8V
 * 366 * 2.8 / 1024 ~= 1 V
 */
#define COMPARATOR_OUTPUT_VALUE  	(366)
void DacInit() {
1a004860:	b580      	push	{r7, lr}
1a004862:	af00      	add	r7, sp, #0
	Chip_DAC_Init(LPC_DAC);
1a004864:	4808      	ldr	r0, [pc, #32]	; (1a004888 <DacInit+0x28>)
1a004866:	f00d fe9b 	bl	1a0125a0 <Chip_DAC_Init>
	Chip_DAC_SetBias(LPC_DAC, DAC_MAX_UPDATE_RATE_400kHz);
1a00486a:	2101      	movs	r1, #1
1a00486c:	4806      	ldr	r0, [pc, #24]	; (1a004888 <DacInit+0x28>)
1a00486e:	f00d fec3 	bl	1a0125f8 <Chip_DAC_SetBias>
	Chip_DAC_ConfigDAConverterControl(LPC_DAC, DAC_DMA_ENA); //Needed for the DAC to work
1a004872:	2108      	movs	r1, #8
1a004874:	4804      	ldr	r0, [pc, #16]	; (1a004888 <DacInit+0x28>)
1a004876:	f7ff ffdd 	bl	1a004834 <Chip_DAC_ConfigDAConverterControl>
	Chip_DAC_UpdateValue(LPC_DAC, COMPARATOR_OUTPUT_VALUE);
1a00487a:	f44f 71b7 	mov.w	r1, #366	; 0x16e
1a00487e:	4802      	ldr	r0, [pc, #8]	; (1a004888 <DacInit+0x28>)
1a004880:	f00d fea0 	bl	1a0125c4 <Chip_DAC_UpdateValue>
}
1a004884:	bf00      	nop
1a004886:	bd80      	pop	{r7, pc}
1a004888:	400e1000 	.word	0x400e1000

1a00488c <SystemInit>:
const uint32_t RTCOscRateIn = 32768;
const uint32_t ExtRateIn = 0;
#define CLOCK_FREQ (192000000)

/* Set up and initialize hardware prior to call to main */
void SystemInit(void) {
1a00488c:	b580      	push	{r7, lr}
1a00488e:	b082      	sub	sp, #8
1a004890:	af00      	add	r7, sp, #0
#if defined(CORE_M3) || defined(CORE_M4)
	unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;
1a004892:	4b0a      	ldr	r3, [pc, #40]	; (1a0048bc <SystemInit+0x30>)
1a004894:	607b      	str	r3, [r7, #4]

	*pSCB_VTOR = (unsigned int) &__vector_table;
#elif defined(__CODE_RED)
	extern void (* const g_pfnVectors[])(void);

	*pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a004896:	4a0a      	ldr	r2, [pc, #40]	; (1a0048c0 <SystemInit+0x34>)
1a004898:	687b      	ldr	r3, [r7, #4]
1a00489a:	601a      	str	r2, [r3, #0]

	*pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
	fpuInit();
1a00489c:	f00d fec6 	bl	1a01262c <fpuInit>
#endif
	/* Chip specific SystemInit */
	Chip_SetupCoreClock(CLKIN_IRC, CLOCK_FREQ, true);
1a0048a0:	2201      	movs	r2, #1
1a0048a2:	4908      	ldr	r1, [pc, #32]	; (1a0048c4 <SystemInit+0x38>)
1a0048a4:	2001      	movs	r0, #1
1a0048a6:	f00e fc6f 	bl	1a013188 <Chip_SetupCoreClock>
	SystemCoreClockUpdate();
1a0048aa:	f00d f991 	bl	1a011bd0 <SystemCoreClockUpdate>
	Chip_OTP_Init();
1a0048ae:	f00e fae5 	bl	1a012e7c <Chip_OTP_Init>
#endif /* defined(CORE_M3) || defined(CORE_M4) */
}
1a0048b2:	bf00      	nop
1a0048b4:	3708      	adds	r7, #8
1a0048b6:	46bd      	mov	sp, r7
1a0048b8:	bd80      	pop	{r7, pc}
1a0048ba:	bf00      	nop
1a0048bc:	e000ed08 	.word	0xe000ed08
1a0048c0:	1a000000 	.word	0x1a000000
1a0048c4:	0b71b000 	.word	0x0b71b000

1a0048c8 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
1a0048c8:	b480      	push	{r7}
1a0048ca:	b083      	sub	sp, #12
1a0048cc:	af00      	add	r7, sp, #0
1a0048ce:	4603      	mov	r3, r0
1a0048d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1a0048d2:	4909      	ldr	r1, [pc, #36]	; (1a0048f8 <NVIC_DisableIRQ+0x30>)
1a0048d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a0048d8:	095b      	lsrs	r3, r3, #5
1a0048da:	79fa      	ldrb	r2, [r7, #7]
1a0048dc:	f002 021f 	and.w	r2, r2, #31
1a0048e0:	2001      	movs	r0, #1
1a0048e2:	fa00 f202 	lsl.w	r2, r0, r2
1a0048e6:	3320      	adds	r3, #32
1a0048e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
1a0048ec:	bf00      	nop
1a0048ee:	370c      	adds	r7, #12
1a0048f0:	46bd      	mov	sp, r7
1a0048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0048f6:	4770      	bx	lr
1a0048f8:	e000e100 	.word	0xe000e100

1a0048fc <Chip_SCU_PinMuxSet>:
 * @return	Nothing
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a0048fc:	b480      	push	{r7}
1a0048fe:	b083      	sub	sp, #12
1a004900:	af00      	add	r7, sp, #0
1a004902:	4603      	mov	r3, r0
1a004904:	71fb      	strb	r3, [r7, #7]
1a004906:	460b      	mov	r3, r1
1a004908:	71bb      	strb	r3, [r7, #6]
1a00490a:	4613      	mov	r3, r2
1a00490c:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00490e:	4807      	ldr	r0, [pc, #28]	; (1a00492c <Chip_SCU_PinMuxSet+0x30>)
1a004910:	79f9      	ldrb	r1, [r7, #7]
1a004912:	79bb      	ldrb	r3, [r7, #6]
1a004914:	88ba      	ldrh	r2, [r7, #4]
1a004916:	0149      	lsls	r1, r1, #5
1a004918:	440b      	add	r3, r1
1a00491a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a00491e:	bf00      	nop
1a004920:	370c      	adds	r7, #12
1a004922:	46bd      	mov	sp, r7
1a004924:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004928:	4770      	bx	lr
1a00492a:	bf00      	nop
1a00492c:	40086000 	.word	0x40086000

1a004930 <Chip_GPIO_SetPinDIROutput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a004930:	b480      	push	{r7}
1a004932:	b083      	sub	sp, #12
1a004934:	af00      	add	r7, sp, #0
1a004936:	6078      	str	r0, [r7, #4]
1a004938:	460b      	mov	r3, r1
1a00493a:	70fb      	strb	r3, [r7, #3]
1a00493c:	4613      	mov	r3, r2
1a00493e:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] |= 1UL << pin;
1a004940:	78fa      	ldrb	r2, [r7, #3]
1a004942:	78f9      	ldrb	r1, [r7, #3]
1a004944:	687b      	ldr	r3, [r7, #4]
1a004946:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a00494a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a00494e:	78bb      	ldrb	r3, [r7, #2]
1a004950:	2001      	movs	r0, #1
1a004952:	fa00 f303 	lsl.w	r3, r0, r3
1a004956:	4319      	orrs	r1, r3
1a004958:	687b      	ldr	r3, [r7, #4]
1a00495a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00495e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a004962:	bf00      	nop
1a004964:	370c      	adds	r7, #12
1a004966:	46bd      	mov	sp, r7
1a004968:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00496c:	4770      	bx	lr
1a00496e:	bf00      	nop

1a004970 <Chip_GPIO_SetPinDIRInput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a004970:	b480      	push	{r7}
1a004972:	b083      	sub	sp, #12
1a004974:	af00      	add	r7, sp, #0
1a004976:	6078      	str	r0, [r7, #4]
1a004978:	460b      	mov	r3, r1
1a00497a:	70fb      	strb	r3, [r7, #3]
1a00497c:	4613      	mov	r3, r2
1a00497e:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a004980:	78fa      	ldrb	r2, [r7, #3]
1a004982:	78f9      	ldrb	r1, [r7, #3]
1a004984:	687b      	ldr	r3, [r7, #4]
1a004986:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a00498a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a00498e:	78bb      	ldrb	r3, [r7, #2]
1a004990:	2001      	movs	r0, #1
1a004992:	fa00 f303 	lsl.w	r3, r0, r3
1a004996:	43db      	mvns	r3, r3
1a004998:	4019      	ands	r1, r3
1a00499a:	687b      	ldr	r3, [r7, #4]
1a00499c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0049a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a0049a4:	bf00      	nop
1a0049a6:	370c      	adds	r7, #12
1a0049a8:	46bd      	mov	sp, r7
1a0049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0049ae:	4770      	bx	lr

1a0049b0 <Chip_GPIO_SetPinOutHigh>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a0049b0:	b480      	push	{r7}
1a0049b2:	b083      	sub	sp, #12
1a0049b4:	af00      	add	r7, sp, #0
1a0049b6:	6078      	str	r0, [r7, #4]
1a0049b8:	460b      	mov	r3, r1
1a0049ba:	70fb      	strb	r3, [r7, #3]
1a0049bc:	4613      	mov	r3, r2
1a0049be:	70bb      	strb	r3, [r7, #2]
	pGPIO->SET[port] = (1 << pin);
1a0049c0:	78fa      	ldrb	r2, [r7, #3]
1a0049c2:	78bb      	ldrb	r3, [r7, #2]
1a0049c4:	2101      	movs	r1, #1
1a0049c6:	fa01 f303 	lsl.w	r3, r1, r3
1a0049ca:	4619      	mov	r1, r3
1a0049cc:	687b      	ldr	r3, [r7, #4]
1a0049ce:	f502 6208 	add.w	r2, r2, #2176	; 0x880
1a0049d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a0049d6:	bf00      	nop
1a0049d8:	370c      	adds	r7, #12
1a0049da:	46bd      	mov	sp, r7
1a0049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0049e0:	4770      	bx	lr
1a0049e2:	bf00      	nop

1a0049e4 <Chip_GPIO_SetPinOutLow>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a0049e4:	b480      	push	{r7}
1a0049e6:	b083      	sub	sp, #12
1a0049e8:	af00      	add	r7, sp, #0
1a0049ea:	6078      	str	r0, [r7, #4]
1a0049ec:	460b      	mov	r3, r1
1a0049ee:	70fb      	strb	r3, [r7, #3]
1a0049f0:	4613      	mov	r3, r2
1a0049f2:	70bb      	strb	r3, [r7, #2]
	pGPIO->CLR[port] = (1 << pin);
1a0049f4:	78fa      	ldrb	r2, [r7, #3]
1a0049f6:	78bb      	ldrb	r3, [r7, #2]
1a0049f8:	2101      	movs	r1, #1
1a0049fa:	fa01 f303 	lsl.w	r3, r1, r3
1a0049fe:	4619      	mov	r1, r3
1a004a00:	687b      	ldr	r3, [r7, #4]
1a004a02:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
1a004a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a004a0a:	bf00      	nop
1a004a0c:	370c      	adds	r7, #12
1a004a0e:	46bd      	mov	sp, r7
1a004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004a14:	4770      	bx	lr
1a004a16:	bf00      	nop

1a004a18 <Chip_RTC_GetTime>:
 * @param	pRTC		: RTC peripheral selected
 * @param	Timetype	: Time field index type to get
 * @return	Value of time field according to specified time type
 */
STATIC INLINE uint32_t Chip_RTC_GetTime(LPC_RTC_T *pRTC, RTC_TIMEINDEX_T Timetype)
{
1a004a18:	b480      	push	{r7}
1a004a1a:	b083      	sub	sp, #12
1a004a1c:	af00      	add	r7, sp, #0
1a004a1e:	6078      	str	r0, [r7, #4]
1a004a20:	460b      	mov	r3, r1
1a004a22:	70fb      	strb	r3, [r7, #3]
	return pRTC->TIME[Timetype];
1a004a24:	78fa      	ldrb	r2, [r7, #3]
1a004a26:	687b      	ldr	r3, [r7, #4]
1a004a28:	3208      	adds	r2, #8
1a004a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
1a004a2e:	4618      	mov	r0, r3
1a004a30:	370c      	adds	r7, #12
1a004a32:	46bd      	mov	sp, r7
1a004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004a38:	4770      	bx	lr
1a004a3a:	bf00      	nop

1a004a3c <Chip_TIMER_Enable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @return	Nothing
 * @note	Enables the timer to start counting.
 */
STATIC INLINE void Chip_TIMER_Enable(LPC_TIMER_T *pTMR)
{
1a004a3c:	b480      	push	{r7}
1a004a3e:	b083      	sub	sp, #12
1a004a40:	af00      	add	r7, sp, #0
1a004a42:	6078      	str	r0, [r7, #4]
	pTMR->TCR |= TIMER_ENABLE;
1a004a44:	687b      	ldr	r3, [r7, #4]
1a004a46:	685b      	ldr	r3, [r3, #4]
1a004a48:	f043 0201 	orr.w	r2, r3, #1
1a004a4c:	687b      	ldr	r3, [r7, #4]
1a004a4e:	605a      	str	r2, [r3, #4]
}
1a004a50:	bf00      	nop
1a004a52:	370c      	adds	r7, #12
1a004a54:	46bd      	mov	sp, r7
1a004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004a5a:	4770      	bx	lr

1a004a5c <Chip_TIMER_Disable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @return	Nothing
 * @note	Disables the timer to stop counting.
 */
STATIC INLINE void Chip_TIMER_Disable(LPC_TIMER_T *pTMR)
{
1a004a5c:	b480      	push	{r7}
1a004a5e:	b083      	sub	sp, #12
1a004a60:	af00      	add	r7, sp, #0
1a004a62:	6078      	str	r0, [r7, #4]
	pTMR->TCR &= ~TIMER_ENABLE;
1a004a64:	687b      	ldr	r3, [r7, #4]
1a004a66:	685b      	ldr	r3, [r3, #4]
1a004a68:	f023 0201 	bic.w	r2, r3, #1
1a004a6c:	687b      	ldr	r3, [r7, #4]
1a004a6e:	605a      	str	r2, [r3, #4]
}
1a004a70:	bf00      	nop
1a004a72:	370c      	adds	r7, #12
1a004a74:	46bd      	mov	sp, r7
1a004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004a7a:	4770      	bx	lr

1a004a7c <Chip_TIMER_PrescaleSet>:
 * @param	prescale	: Prescale value to set the prescale register to
 * @return	Nothing
 * @note	Sets the prescale count value.
 */
STATIC INLINE void Chip_TIMER_PrescaleSet(LPC_TIMER_T *pTMR, uint32_t prescale)
{
1a004a7c:	b480      	push	{r7}
1a004a7e:	b083      	sub	sp, #12
1a004a80:	af00      	add	r7, sp, #0
1a004a82:	6078      	str	r0, [r7, #4]
1a004a84:	6039      	str	r1, [r7, #0]
	pTMR->PR = prescale;
1a004a86:	687b      	ldr	r3, [r7, #4]
1a004a88:	683a      	ldr	r2, [r7, #0]
1a004a8a:	60da      	str	r2, [r3, #12]
}
1a004a8c:	bf00      	nop
1a004a8e:	370c      	adds	r7, #12
1a004a90:	46bd      	mov	sp, r7
1a004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004a96:	4770      	bx	lr

1a004a98 <Chip_TIMER_SetMatch>:
 * @param	matchval	: Match value for the selected match count
 * @return	Nothing
 * @note	Sets one of the timer match values.
 */
STATIC INLINE void Chip_TIMER_SetMatch(LPC_TIMER_T *pTMR, int8_t matchnum, uint32_t matchval)
{
1a004a98:	b480      	push	{r7}
1a004a9a:	b085      	sub	sp, #20
1a004a9c:	af00      	add	r7, sp, #0
1a004a9e:	60f8      	str	r0, [r7, #12]
1a004aa0:	460b      	mov	r3, r1
1a004aa2:	607a      	str	r2, [r7, #4]
1a004aa4:	72fb      	strb	r3, [r7, #11]
	pTMR->MR[matchnum] = matchval;
1a004aa6:	f997 200b 	ldrsb.w	r2, [r7, #11]
1a004aaa:	68fb      	ldr	r3, [r7, #12]
1a004aac:	3206      	adds	r2, #6
1a004aae:	6879      	ldr	r1, [r7, #4]
1a004ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a004ab4:	bf00      	nop
1a004ab6:	3714      	adds	r7, #20
1a004ab8:	46bd      	mov	sp, r7
1a004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004abe:	4770      	bx	lr

1a004ac0 <Chip_TIMER_MatchDisableInt>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchDisableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a004ac0:	b480      	push	{r7}
1a004ac2:	b083      	sub	sp, #12
1a004ac4:	af00      	add	r7, sp, #0
1a004ac6:	6078      	str	r0, [r7, #4]
1a004ac8:	460b      	mov	r3, r1
1a004aca:	70fb      	strb	r3, [r7, #3]
	pTMR->MCR &= ~TIMER_INT_ON_MATCH(matchnum);
1a004acc:	687b      	ldr	r3, [r7, #4]
1a004ace:	6959      	ldr	r1, [r3, #20]
1a004ad0:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a004ad4:	4613      	mov	r3, r2
1a004ad6:	005b      	lsls	r3, r3, #1
1a004ad8:	4413      	add	r3, r2
1a004ada:	2201      	movs	r2, #1
1a004adc:	fa02 f303 	lsl.w	r3, r2, r3
1a004ae0:	43db      	mvns	r3, r3
1a004ae2:	ea01 0203 	and.w	r2, r1, r3
1a004ae6:	687b      	ldr	r3, [r7, #4]
1a004ae8:	615a      	str	r2, [r3, #20]
}
1a004aea:	bf00      	nop
1a004aec:	370c      	adds	r7, #12
1a004aee:	46bd      	mov	sp, r7
1a004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004af4:	4770      	bx	lr
1a004af6:	bf00      	nop

1a004af8 <Chip_TIMER_ResetOnMatchEnable>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_ResetOnMatchEnable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a004af8:	b480      	push	{r7}
1a004afa:	b083      	sub	sp, #12
1a004afc:	af00      	add	r7, sp, #0
1a004afe:	6078      	str	r0, [r7, #4]
1a004b00:	460b      	mov	r3, r1
1a004b02:	70fb      	strb	r3, [r7, #3]
	pTMR->MCR |= TIMER_RESET_ON_MATCH(matchnum);
1a004b04:	687b      	ldr	r3, [r7, #4]
1a004b06:	6959      	ldr	r1, [r3, #20]
1a004b08:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a004b0c:	4613      	mov	r3, r2
1a004b0e:	005b      	lsls	r3, r3, #1
1a004b10:	4413      	add	r3, r2
1a004b12:	3301      	adds	r3, #1
1a004b14:	2201      	movs	r2, #1
1a004b16:	fa02 f303 	lsl.w	r3, r2, r3
1a004b1a:	ea41 0203 	orr.w	r2, r1, r3
1a004b1e:	687b      	ldr	r3, [r7, #4]
1a004b20:	615a      	str	r2, [r3, #20]
}
1a004b22:	bf00      	nop
1a004b24:	370c      	adds	r7, #12
1a004b26:	46bd      	mov	sp, r7
1a004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004b2c:	4770      	bx	lr
1a004b2e:	bf00      	nop

1a004b30 <Chip_TIMER_StopOnMatchDisable>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_StopOnMatchDisable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a004b30:	b480      	push	{r7}
1a004b32:	b083      	sub	sp, #12
1a004b34:	af00      	add	r7, sp, #0
1a004b36:	6078      	str	r0, [r7, #4]
1a004b38:	460b      	mov	r3, r1
1a004b3a:	70fb      	strb	r3, [r7, #3]
	pTMR->MCR &= ~TIMER_STOP_ON_MATCH(matchnum);
1a004b3c:	687b      	ldr	r3, [r7, #4]
1a004b3e:	6959      	ldr	r1, [r3, #20]
1a004b40:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a004b44:	4613      	mov	r3, r2
1a004b46:	005b      	lsls	r3, r3, #1
1a004b48:	4413      	add	r3, r2
1a004b4a:	3302      	adds	r3, #2
1a004b4c:	2201      	movs	r2, #1
1a004b4e:	fa02 f303 	lsl.w	r3, r2, r3
1a004b52:	43db      	mvns	r3, r3
1a004b54:	ea01 0203 	and.w	r2, r1, r3
1a004b58:	687b      	ldr	r3, [r7, #4]
1a004b5a:	615a      	str	r2, [r3, #20]
}
1a004b5c:	bf00      	nop
1a004b5e:	370c      	adds	r7, #12
1a004b60:	46bd      	mov	sp, r7
1a004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004b66:	4770      	bx	lr

1a004b68 <Chip_TIMER_CaptureRisingEdgeEnable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @param	capnum	: Capture signal/register to use
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_CaptureRisingEdgeEnable(LPC_TIMER_T *pTMR, int8_t capnum)
{
1a004b68:	b480      	push	{r7}
1a004b6a:	b083      	sub	sp, #12
1a004b6c:	af00      	add	r7, sp, #0
1a004b6e:	6078      	str	r0, [r7, #4]
1a004b70:	460b      	mov	r3, r1
1a004b72:	70fb      	strb	r3, [r7, #3]
	pTMR->CCR |= TIMER_CAP_RISING(capnum);
1a004b74:	687b      	ldr	r3, [r7, #4]
1a004b76:	6a99      	ldr	r1, [r3, #40]	; 0x28
1a004b78:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a004b7c:	4613      	mov	r3, r2
1a004b7e:	005b      	lsls	r3, r3, #1
1a004b80:	4413      	add	r3, r2
1a004b82:	2201      	movs	r2, #1
1a004b84:	fa02 f303 	lsl.w	r3, r2, r3
1a004b88:	ea41 0203 	orr.w	r2, r1, r3
1a004b8c:	687b      	ldr	r3, [r7, #4]
1a004b8e:	629a      	str	r2, [r3, #40]	; 0x28
}
1a004b90:	bf00      	nop
1a004b92:	370c      	adds	r7, #12
1a004b94:	46bd      	mov	sp, r7
1a004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004b9a:	4770      	bx	lr

1a004b9c <Chip_TIMER_CaptureFallingEdgeEnable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @param	capnum	: Capture signal/register to use
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_CaptureFallingEdgeEnable(LPC_TIMER_T *pTMR, int8_t capnum)
{
1a004b9c:	b480      	push	{r7}
1a004b9e:	b083      	sub	sp, #12
1a004ba0:	af00      	add	r7, sp, #0
1a004ba2:	6078      	str	r0, [r7, #4]
1a004ba4:	460b      	mov	r3, r1
1a004ba6:	70fb      	strb	r3, [r7, #3]
	pTMR->CCR |= TIMER_CAP_FALLING(capnum);
1a004ba8:	687b      	ldr	r3, [r7, #4]
1a004baa:	6a99      	ldr	r1, [r3, #40]	; 0x28
1a004bac:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a004bb0:	4613      	mov	r3, r2
1a004bb2:	005b      	lsls	r3, r3, #1
1a004bb4:	4413      	add	r3, r2
1a004bb6:	3301      	adds	r3, #1
1a004bb8:	2201      	movs	r2, #1
1a004bba:	fa02 f303 	lsl.w	r3, r2, r3
1a004bbe:	ea41 0203 	orr.w	r2, r1, r3
1a004bc2:	687b      	ldr	r3, [r7, #4]
1a004bc4:	629a      	str	r2, [r3, #40]	; 0x28
}
1a004bc6:	bf00      	nop
1a004bc8:	370c      	adds	r7, #12
1a004bca:	46bd      	mov	sp, r7
1a004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004bd0:	4770      	bx	lr
1a004bd2:	bf00      	nop

1a004bd4 <Chip_TIMER_CaptureDisableInt>:
 * @param	pTMR	: Pointer to timer IP register address
 * @param	capnum	: Capture signal/register to use
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_CaptureDisableInt(LPC_TIMER_T *pTMR, int8_t capnum)
{
1a004bd4:	b480      	push	{r7}
1a004bd6:	b083      	sub	sp, #12
1a004bd8:	af00      	add	r7, sp, #0
1a004bda:	6078      	str	r0, [r7, #4]
1a004bdc:	460b      	mov	r3, r1
1a004bde:	70fb      	strb	r3, [r7, #3]
	pTMR->CCR &= ~TIMER_INT_ON_CAP(capnum);
1a004be0:	687b      	ldr	r3, [r7, #4]
1a004be2:	6a99      	ldr	r1, [r3, #40]	; 0x28
1a004be4:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a004be8:	4613      	mov	r3, r2
1a004bea:	005b      	lsls	r3, r3, #1
1a004bec:	4413      	add	r3, r2
1a004bee:	3302      	adds	r3, #2
1a004bf0:	2201      	movs	r2, #1
1a004bf2:	fa02 f303 	lsl.w	r3, r2, r3
1a004bf6:	43db      	mvns	r3, r3
1a004bf8:	ea01 0203 	and.w	r2, r1, r3
1a004bfc:	687b      	ldr	r3, [r7, #4]
1a004bfe:	629a      	str	r2, [r3, #40]	; 0x28
}
1a004c00:	bf00      	nop
1a004c02:	370c      	adds	r7, #12
1a004c04:	46bd      	mov	sp, r7
1a004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004c0a:	4770      	bx	lr

1a004c0c <Chip_TIMER_TIMER_SetCountClockSrc>:
 * @note	If CapSrc selected a CAPn pin, select the specific CAPn pin with the capnum value.
 */
STATIC INLINE void Chip_TIMER_TIMER_SetCountClockSrc(LPC_TIMER_T *pTMR,
													 TIMER_CAP_SRC_STATE_T capSrc,
													 int8_t capnum)
{
1a004c0c:	b480      	push	{r7}
1a004c0e:	b083      	sub	sp, #12
1a004c10:	af00      	add	r7, sp, #0
1a004c12:	6078      	str	r0, [r7, #4]
1a004c14:	460b      	mov	r3, r1
1a004c16:	70fb      	strb	r3, [r7, #3]
1a004c18:	4613      	mov	r3, r2
1a004c1a:	70bb      	strb	r3, [r7, #2]
	pTMR->CTCR = (uint32_t) capSrc | ((uint32_t) capnum) << 2;
1a004c1c:	78fa      	ldrb	r2, [r7, #3]
1a004c1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
1a004c22:	009b      	lsls	r3, r3, #2
1a004c24:	431a      	orrs	r2, r3
1a004c26:	687b      	ldr	r3, [r7, #4]
1a004c28:	671a      	str	r2, [r3, #112]	; 0x70
}
1a004c2a:	bf00      	nop
1a004c2c:	370c      	adds	r7, #12
1a004c2e:	46bd      	mov	sp, r7
1a004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004c34:	4770      	bx	lr
1a004c36:	bf00      	nop

1a004c38 <Chip_UART_TXEnable>:
 * @brief	Enable transmission on UART TxD pin
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
1a004c38:	b480      	push	{r7}
1a004c3a:	b083      	sub	sp, #12
1a004c3c:	af00      	add	r7, sp, #0
1a004c3e:	6078      	str	r0, [r7, #4]
    pUART->TER2 = UART_TER2_TXEN;
1a004c40:	687b      	ldr	r3, [r7, #4]
1a004c42:	2201      	movs	r2, #1
1a004c44:	65da      	str	r2, [r3, #92]	; 0x5c
}
1a004c46:	bf00      	nop
1a004c48:	370c      	adds	r7, #12
1a004c4a:	46bd      	mov	sp, r7
1a004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004c50:	4770      	bx	lr
1a004c52:	bf00      	nop

1a004c54 <Chip_UART_SetModemControl>:
 * @return	Nothing
 * @note	Use an Or'ed value of UART_MCR_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetModemControl(LPC_USART_T *pUART, uint32_t mcr)
{
1a004c54:	b480      	push	{r7}
1a004c56:	b083      	sub	sp, #12
1a004c58:	af00      	add	r7, sp, #0
1a004c5a:	6078      	str	r0, [r7, #4]
1a004c5c:	6039      	str	r1, [r7, #0]
	pUART->MCR |= mcr;
1a004c5e:	687b      	ldr	r3, [r7, #4]
1a004c60:	691a      	ldr	r2, [r3, #16]
1a004c62:	683b      	ldr	r3, [r7, #0]
1a004c64:	431a      	orrs	r2, r3
1a004c66:	687b      	ldr	r3, [r7, #4]
1a004c68:	611a      	str	r2, [r3, #16]
}
1a004c6a:	bf00      	nop
1a004c6c:	370c      	adds	r7, #12
1a004c6e:	46bd      	mov	sp, r7
1a004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004c74:	4770      	bx	lr
1a004c76:	bf00      	nop

1a004c78 <LED0SetOff>:
void ExtraPinsInit();

/**
 * It disables the green LED
 */
static inline void LED0SetOff(void) {
1a004c78:	b580      	push	{r7, lr}
1a004c7a:	af00      	add	r7, sp, #0
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, LED0_PORT_GPIO, LED0_PIN_GPIO); //Turn on the LED
1a004c7c:	2200      	movs	r2, #0
1a004c7e:	2100      	movs	r1, #0
1a004c80:	4802      	ldr	r0, [pc, #8]	; (1a004c8c <LED0SetOff+0x14>)
1a004c82:	f7ff fe95 	bl	1a0049b0 <Chip_GPIO_SetPinOutHigh>
}
1a004c86:	bf00      	nop
1a004c88:	bd80      	pop	{r7, pc}
1a004c8a:	bf00      	nop
1a004c8c:	400f4000 	.word	0x400f4000

1a004c90 <LED0SetOn>:
/**
 * It enables the green LED
 */
static inline void LED0SetOn(void) {
1a004c90:	b580      	push	{r7, lr}
1a004c92:	af00      	add	r7, sp, #0
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, LED0_PORT_GPIO, LED0_PIN_GPIO); //Turn off the LED
1a004c94:	2200      	movs	r2, #0
1a004c96:	2100      	movs	r1, #0
1a004c98:	4802      	ldr	r0, [pc, #8]	; (1a004ca4 <LED0SetOn+0x14>)
1a004c9a:	f7ff fea3 	bl	1a0049e4 <Chip_GPIO_SetPinOutLow>
}
1a004c9e:	bf00      	nop
1a004ca0:	bd80      	pop	{r7, pc}
1a004ca2:	bf00      	nop
1a004ca4:	400f4000 	.word	0x400f4000

1a004ca8 <LED0SetBlinking>:
}
/**
 * It enables or disables the automatic 0.5Hz green LED blinking.
 * @param flag ENABLE or DISABLE
 */
static inline void LED0SetBlinking(uint8_t flag) {
1a004ca8:	b480      	push	{r7}
1a004caa:	b083      	sub	sp, #12
1a004cac:	af00      	add	r7, sp, #0
1a004cae:	4603      	mov	r3, r0
1a004cb0:	71fb      	strb	r3, [r7, #7]
	ledBlinking = flag ? 1 : 0;
1a004cb2:	79fb      	ldrb	r3, [r7, #7]
1a004cb4:	2b00      	cmp	r3, #0
1a004cb6:	bf14      	ite	ne
1a004cb8:	2301      	movne	r3, #1
1a004cba:	2300      	moveq	r3, #0
1a004cbc:	b2db      	uxtb	r3, r3
1a004cbe:	461a      	mov	r2, r3
1a004cc0:	4b03      	ldr	r3, [pc, #12]	; (1a004cd0 <LED0SetBlinking+0x28>)
1a004cc2:	701a      	strb	r2, [r3, #0]
}
1a004cc4:	bf00      	nop
1a004cc6:	370c      	adds	r7, #12
1a004cc8:	46bd      	mov	sp, r7
1a004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004cce:	4770      	bx	lr
1a004cd0:	10086524 	.word	0x10086524

1a004cd4 <pushByteToTransmission>:
};

//Transmit buffer that will be used on the rest of the system
extern volatile struct uart_hal  uart;

static inline void pushByteToTransmission(volatile struct uart_hal * uart, uint8_t byte) {
1a004cd4:	b480      	push	{r7}
1a004cd6:	b083      	sub	sp, #12
1a004cd8:	af00      	add	r7, sp, #0
1a004cda:	6078      	str	r0, [r7, #4]
1a004cdc:	460b      	mov	r3, r1
1a004cde:	70fb      	strb	r3, [r7, #3]
	uart->txBuffer[uart->txBufferWritePointer] = byte;
1a004ce0:	687b      	ldr	r3, [r7, #4]
1a004ce2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a004ce6:	681b      	ldr	r3, [r3, #0]
1a004ce8:	687a      	ldr	r2, [r7, #4]
1a004cea:	78f9      	ldrb	r1, [r7, #3]
1a004cec:	54d1      	strb	r1, [r2, r3]
	uart->txBufferWritePointer = (uart->txBufferWritePointer + 1) & TX_BUFFER_MASK;
1a004cee:	687b      	ldr	r3, [r7, #4]
1a004cf0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a004cf4:	681b      	ldr	r3, [r3, #0]
1a004cf6:	3301      	adds	r3, #1
1a004cf8:	f3c3 020b 	ubfx	r2, r3, #0, #12
1a004cfc:	687b      	ldr	r3, [r7, #4]
1a004cfe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a004d02:	601a      	str	r2, [r3, #0]
}
1a004d04:	bf00      	nop
1a004d06:	370c      	adds	r7, #12
1a004d08:	46bd      	mov	sp, r7
1a004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004d0e:	4770      	bx	lr

1a004d10 <freeSpaceForReception>:
	volatile uint8_t ret = uart->rxBuffer[uart->rxBufferReadPointer];
	uart->rxBufferReadPointer = (uart->rxBufferReadPointer + 1) & RX_BUFFER_MASK;
	return ret;
}

static inline uint32_t freeSpaceForReception(volatile struct uart_hal * uart) {
1a004d10:	b480      	push	{r7}
1a004d12:	b083      	sub	sp, #12
1a004d14:	af00      	add	r7, sp, #0
1a004d16:	6078      	str	r0, [r7, #4]
	return (uart->rxBufferReadPointer - uart->rxBufferWritePointer - 1) & RX_BUFFER_MASK;
1a004d18:	687b      	ldr	r3, [r7, #4]
1a004d1a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a004d1e:	330c      	adds	r3, #12
1a004d20:	681a      	ldr	r2, [r3, #0]
1a004d22:	687b      	ldr	r3, [r7, #4]
1a004d24:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a004d28:	3308      	adds	r3, #8
1a004d2a:	681b      	ldr	r3, [r3, #0]
1a004d2c:	1ad3      	subs	r3, r2, r3
1a004d2e:	3b01      	subs	r3, #1
1a004d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
1a004d34:	4618      	mov	r0, r3
1a004d36:	370c      	adds	r7, #12
1a004d38:	46bd      	mov	sp, r7
1a004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004d3e:	4770      	bx	lr

1a004d40 <freeSpaceForTranmission>:
static inline uint32_t freeSpaceForTranmission(volatile struct uart_hal * uart) {
1a004d40:	b480      	push	{r7}
1a004d42:	b083      	sub	sp, #12
1a004d44:	af00      	add	r7, sp, #0
1a004d46:	6078      	str	r0, [r7, #4]
	return (uart->txBufferReadPointer - uart->txBufferWritePointer - 1) & TX_BUFFER_MASK;
1a004d48:	687b      	ldr	r3, [r7, #4]
1a004d4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a004d4e:	3304      	adds	r3, #4
1a004d50:	681a      	ldr	r2, [r3, #0]
1a004d52:	687b      	ldr	r3, [r7, #4]
1a004d54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a004d58:	681b      	ldr	r3, [r3, #0]
1a004d5a:	1ad3      	subs	r3, r2, r3
1a004d5c:	3b01      	subs	r3, #1
1a004d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
1a004d62:	4618      	mov	r0, r3
1a004d64:	370c      	adds	r7, #12
1a004d66:	46bd      	mov	sp, r7
1a004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004d6c:	4770      	bx	lr
1a004d6e:	bf00      	nop

1a004d70 <Chip_RTC_Clock_Running>:

/**
 * @brief	Check if RTC clock is running
 * @return	zero if the RTC clock is not running.
 */
STATIC INLINE uint32_t Chip_RTC_Clock_Running(void) {
1a004d70:	b480      	push	{r7}
1a004d72:	af00      	add	r7, sp, #0
	return (LPC_CREG->CREG0 & 0x3) == 0x03;
1a004d74:	4b06      	ldr	r3, [pc, #24]	; (1a004d90 <Chip_RTC_Clock_Running+0x20>)
1a004d76:	685b      	ldr	r3, [r3, #4]
1a004d78:	f003 0303 	and.w	r3, r3, #3
1a004d7c:	2b03      	cmp	r3, #3
1a004d7e:	bf0c      	ite	eq
1a004d80:	2301      	moveq	r3, #1
1a004d82:	2300      	movne	r3, #0
1a004d84:	b2db      	uxtb	r3, r3
}
1a004d86:	4618      	mov	r0, r3
1a004d88:	46bd      	mov	sp, r7
1a004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004d8e:	4770      	bx	lr
1a004d90:	40043000 	.word	0x40043000

1a004d94 <DVS128FetchEventsEnable>:

/**
 * It enables or disables the streaming of retina events through the UART.
 * @param flag ENABLE or DISABLE
 */
static inline void DVS128FetchEventsEnable(uint8_t flag) {
1a004d94:	b480      	push	{r7}
1a004d96:	b083      	sub	sp, #12
1a004d98:	af00      	add	r7, sp, #0
1a004d9a:	4603      	mov	r3, r0
1a004d9c:	71fb      	strb	r3, [r7, #7]
	if (flag) {
1a004d9e:	79fb      	ldrb	r3, [r7, #7]
1a004da0:	2b00      	cmp	r3, #0
1a004da2:	d006      	beq.n	1a004db2 <DVS128FetchEventsEnable+0x1e>
		eDVSProcessingMode |= EDVS_STREAM_EVENTS;
1a004da4:	4b09      	ldr	r3, [pc, #36]	; (1a004dcc <DVS128FetchEventsEnable+0x38>)
1a004da6:	681b      	ldr	r3, [r3, #0]
1a004da8:	f043 0301 	orr.w	r3, r3, #1
1a004dac:	4a07      	ldr	r2, [pc, #28]	; (1a004dcc <DVS128FetchEventsEnable+0x38>)
1a004dae:	6013      	str	r3, [r2, #0]
	} else {
		eDVSProcessingMode &= ~EDVS_STREAM_EVENTS;
	}
}
1a004db0:	e005      	b.n	1a004dbe <DVS128FetchEventsEnable+0x2a>
 */
static inline void DVS128FetchEventsEnable(uint8_t flag) {
	if (flag) {
		eDVSProcessingMode |= EDVS_STREAM_EVENTS;
	} else {
		eDVSProcessingMode &= ~EDVS_STREAM_EVENTS;
1a004db2:	4b06      	ldr	r3, [pc, #24]	; (1a004dcc <DVS128FetchEventsEnable+0x38>)
1a004db4:	681b      	ldr	r3, [r3, #0]
1a004db6:	f023 0301 	bic.w	r3, r3, #1
1a004dba:	4a04      	ldr	r2, [pc, #16]	; (1a004dcc <DVS128FetchEventsEnable+0x38>)
1a004dbc:	6013      	str	r3, [r2, #0]
	}
}
1a004dbe:	bf00      	nop
1a004dc0:	370c      	adds	r7, #12
1a004dc2:	46bd      	mov	sp, r7
1a004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004dc8:	4770      	bx	lr
1a004dca:	bf00      	nop
1a004dcc:	10087444 	.word	0x10087444

1a004dd0 <UARTWriteChar>:
 ** parameters:			portNum, buffer pointer, and data length
 ** Returned value:		None
 **
 *****************************************************************************/

void UARTWriteChar(char pcBuffer) {
1a004dd0:	b580      	push	{r7, lr}
1a004dd2:	b082      	sub	sp, #8
1a004dd4:	af00      	add	r7, sp, #0
1a004dd6:	4603      	mov	r3, r0
1a004dd8:	71fb      	strb	r3, [r7, #7]
	while (freeSpaceForTranmission(&uart) == 0) {
1a004dda:	e000      	b.n	1a004dde <UARTWriteChar+0xe>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
1a004ddc:	bf00      	nop
1a004dde:	4807      	ldr	r0, [pc, #28]	; (1a004dfc <UARTWriteChar+0x2c>)
1a004de0:	f7ff ffae 	bl	1a004d40 <freeSpaceForTranmission>
1a004de4:	4603      	mov	r3, r0
1a004de6:	2b00      	cmp	r3, #0
1a004de8:	d0f8      	beq.n	1a004ddc <UARTWriteChar+0xc>
		__NOP(); //Wait for the M0 core to move some char out
	}
	pushByteToTransmission(&uart, pcBuffer);
1a004dea:	79fb      	ldrb	r3, [r7, #7]
1a004dec:	4619      	mov	r1, r3
1a004dee:	4803      	ldr	r0, [pc, #12]	; (1a004dfc <UARTWriteChar+0x2c>)
1a004df0:	f7ff ff70 	bl	1a004cd4 <pushByteToTransmission>
}
1a004df4:	bf00      	nop
1a004df6:	3708      	adds	r7, #8
1a004df8:	46bd      	mov	sp, r7
1a004dfa:	bd80      	pop	{r7, pc}
1a004dfc:	10000000 	.word	0x10000000

1a004e00 <UARTInit>:
 ** Returned value:		true or false, return false only if the
 **						interrupt handler can't be installed to the
 **						VIC table
 **
 *****************************************************************************/
void UARTInit(LPC_USART_T* UARTx, uint32_t baudrate) {
1a004e00:	b580      	push	{r7, lr}
1a004e02:	b082      	sub	sp, #8
1a004e04:	af00      	add	r7, sp, #0
1a004e06:	6078      	str	r0, [r7, #4]
1a004e08:	6039      	str	r1, [r7, #0]
	memset(commandLine, 0, UART_COMMAND_LINE_MAX_LENGTH);
1a004e0a:	2280      	movs	r2, #128	; 0x80
1a004e0c:	2100      	movs	r1, #0
1a004e0e:	4835      	ldr	r0, [pc, #212]	; (1a004ee4 <UARTInit+0xe4>)
1a004e10:	f00f ff62 	bl	1a014cd8 <memset>
	commandLinePointer = 0;
1a004e14:	4b34      	ldr	r3, [pc, #208]	; (1a004ee8 <UARTInit+0xe8>)
1a004e16:	2200      	movs	r2, #0
1a004e18:	601a      	str	r2, [r3, #0]
	enableUARTecho = 2;
1a004e1a:	4b34      	ldr	r3, [pc, #208]	; (1a004eec <UARTInit+0xec>)
1a004e1c:	2202      	movs	r2, #2
1a004e1e:	601a      	str	r2, [r3, #0]
	memset((void*) &uart, 0, sizeof(struct uart_hal));
1a004e20:	f242 0210 	movw	r2, #8208	; 0x2010
1a004e24:	2100      	movs	r1, #0
1a004e26:	4832      	ldr	r0, [pc, #200]	; (1a004ef0 <UARTInit+0xf0>)
1a004e28:	f00f ff56 	bl	1a014cd8 <memset>
	xdev_out(UARTWriteChar);
1a004e2c:	4b31      	ldr	r3, [pc, #196]	; (1a004ef4 <UARTInit+0xf4>)
1a004e2e:	4a32      	ldr	r2, [pc, #200]	; (1a004ef8 <UARTInit+0xf8>)
1a004e30:	601a      	str	r2, [r3, #0]
	if (UARTx == LPC_USART0) {
1a004e32:	687b      	ldr	r3, [r7, #4]
1a004e34:	4a31      	ldr	r2, [pc, #196]	; (1a004efc <UARTInit+0xfc>)
1a004e36:	4293      	cmp	r3, r2
1a004e38:	d126      	bne.n	1a004e88 <UARTInit+0x88>
		NVIC_DisableIRQ(USART0_IRQn);
1a004e3a:	2018      	movs	r0, #24
1a004e3c:	f7ff fd44 	bl	1a0048c8 <NVIC_DisableIRQ>
		/* RxD0 is P2.1 and TxD0 is P2.0 */
		Chip_SCU_PinMuxSet(2, 0, MD_PLN_FAST | FUNC1);
1a004e40:	22f1      	movs	r2, #241	; 0xf1
1a004e42:	2100      	movs	r1, #0
1a004e44:	2002      	movs	r0, #2
1a004e46:	f7ff fd59 	bl	1a0048fc <Chip_SCU_PinMuxSet>
		Chip_SCU_PinMuxSet(2, 1, MD_PLN_FAST | MD_EZI | FUNC1);
1a004e4a:	22f1      	movs	r2, #241	; 0xf1
1a004e4c:	2101      	movs	r1, #1
1a004e4e:	2002      	movs	r0, #2
1a004e50:	f7ff fd54 	bl	1a0048fc <Chip_SCU_PinMuxSet>
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, RTS0_GPIO_PORT, RTS0_GPIO_PIN); //Signal ready to the DTE
1a004e54:	220a      	movs	r2, #10
1a004e56:	2100      	movs	r1, #0
1a004e58:	4829      	ldr	r0, [pc, #164]	; (1a004f00 <UARTInit+0x100>)
1a004e5a:	f7ff fdc3 	bl	1a0049e4 <Chip_GPIO_SetPinOutLow>
		Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, RTS0_GPIO_PORT, RTS0_GPIO_PIN);
1a004e5e:	220a      	movs	r2, #10
1a004e60:	2100      	movs	r1, #0
1a004e62:	4827      	ldr	r0, [pc, #156]	; (1a004f00 <UARTInit+0x100>)
1a004e64:	f7ff fd64 	bl	1a004930 <Chip_GPIO_SetPinDIROutput>
		Chip_SCU_PinMuxSet(RTS0_PORT, RTS0_PIN, MD_PLN_FAST | FUNC0);
1a004e68:	22f0      	movs	r2, #240	; 0xf0
1a004e6a:	2103      	movs	r1, #3
1a004e6c:	2001      	movs	r0, #1
1a004e6e:	f7ff fd45 	bl	1a0048fc <Chip_SCU_PinMuxSet>
		Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CTS0_GPIO_PORT, CTS0_GPIO_PIN);
1a004e72:	2208      	movs	r2, #8
1a004e74:	2101      	movs	r1, #1
1a004e76:	4822      	ldr	r0, [pc, #136]	; (1a004f00 <UARTInit+0x100>)
1a004e78:	f7ff fd7a 	bl	1a004970 <Chip_GPIO_SetPinDIRInput>
		Chip_SCU_PinMuxSet( CTS0_PORT, CTS0_PIN, MD_BUK | MD_EZI | FUNC0);
1a004e7c:	2248      	movs	r2, #72	; 0x48
1a004e7e:	2105      	movs	r1, #5
1a004e80:	2001      	movs	r0, #1
1a004e82:	f7ff fd3b 	bl	1a0048fc <Chip_SCU_PinMuxSet>
1a004e86:	e01e      	b.n	1a004ec6 <UARTInit+0xc6>
	} else if (UARTx == LPC_UART1) {
1a004e88:	687b      	ldr	r3, [r7, #4]
1a004e8a:	4a1e      	ldr	r2, [pc, #120]	; (1a004f04 <UARTInit+0x104>)
1a004e8c:	4293      	cmp	r3, r2
1a004e8e:	d11a      	bne.n	1a004ec6 <UARTInit+0xc6>
		NVIC_DisableIRQ(UART1_IRQn);
1a004e90:	2019      	movs	r0, #25
1a004e92:	f7ff fd19 	bl	1a0048c8 <NVIC_DisableIRQ>
		/* Enable RTS1  P5.2, CTS1 P5.4, RxD1 P1.14, TxD1 P3.4*/
		Chip_SCU_PinMuxSet(3, 4, MD_PLN_FAST | FUNC4);
1a004e96:	22f4      	movs	r2, #244	; 0xf4
1a004e98:	2104      	movs	r1, #4
1a004e9a:	2003      	movs	r0, #3
1a004e9c:	f7ff fd2e 	bl	1a0048fc <Chip_SCU_PinMuxSet>
		Chip_SCU_PinMuxSet(1, 14, MD_BUK | MD_EZI | FUNC1);
1a004ea0:	2249      	movs	r2, #73	; 0x49
1a004ea2:	210e      	movs	r1, #14
1a004ea4:	2001      	movs	r0, #1
1a004ea6:	f7ff fd29 	bl	1a0048fc <Chip_SCU_PinMuxSet>
		Chip_SCU_PinMuxSet(5, 2, MD_PLN_FAST | FUNC4);
1a004eaa:	22f4      	movs	r2, #244	; 0xf4
1a004eac:	2102      	movs	r1, #2
1a004eae:	2005      	movs	r0, #5
1a004eb0:	f7ff fd24 	bl	1a0048fc <Chip_SCU_PinMuxSet>
		Chip_SCU_PinMuxSet(5, 4, MD_BUK | MD_EZI | FUNC4);
1a004eb4:	224c      	movs	r2, #76	; 0x4c
1a004eb6:	2104      	movs	r1, #4
1a004eb8:	2005      	movs	r0, #5
1a004eba:	f7ff fd1f 	bl	1a0048fc <Chip_SCU_PinMuxSet>
		Chip_UART_SetModemControl(LPC_UART1,
1a004ebe:	21c0      	movs	r1, #192	; 0xc0
1a004ec0:	4810      	ldr	r0, [pc, #64]	; (1a004f04 <UARTInit+0x104>)
1a004ec2:	f7ff fec7 	bl	1a004c54 <Chip_UART_SetModemControl>
		UART_MCR_AUTO_RTS_EN | UART_MCR_AUTO_CTS_EN);
	}
	Chip_UART_Init(UARTx);
1a004ec6:	6878      	ldr	r0, [r7, #4]
1a004ec8:	f00e fadc 	bl	1a013484 <Chip_UART_Init>
	Chip_UART_SetBaudFDR(UARTx, baudrate);
1a004ecc:	6839      	ldr	r1, [r7, #0]
1a004ece:	6878      	ldr	r0, [r7, #4]
1a004ed0:	f00e fb28 	bl	1a013524 <Chip_UART_SetBaudFDR>
	Chip_UART_TXEnable(UARTx);
1a004ed4:	6878      	ldr	r0, [r7, #4]
1a004ed6:	f7ff feaf 	bl	1a004c38 <Chip_UART_TXEnable>
}
1a004eda:	bf00      	nop
1a004edc:	3708      	adds	r7, #8
1a004ede:	46bd      	mov	sp, r7
1a004ee0:	bd80      	pop	{r7, pc}
1a004ee2:	bf00      	nop
1a004ee4:	1008887c 	.word	0x1008887c
1a004ee8:	100888fc 	.word	0x100888fc
1a004eec:	10088878 	.word	0x10088878
1a004ef0:	10000000 	.word	0x10000000
1a004ef4:	10088900 	.word	0x10088900
1a004ef8:	1a004dd1 	.word	0x1a004dd1
1a004efc:	40081000 	.word	0x40081000
1a004f00:	400f4000 	.word	0x400f4000
1a004f04:	40082000 	.word	0x40082000

1a004f08 <UARTShowVersion>:

// *****************************************************************************

// *****************************************************************************
void UARTShowVersion(void) {
1a004f08:	b580      	push	{r7, lr}
1a004f0a:	af00      	add	r7, sp, #0
	xputs("\nEDVS-4337,");
1a004f0c:	480e      	ldr	r0, [pc, #56]	; (1a004f48 <UARTShowVersion+0x40>)
1a004f0e:	f001 fca5 	bl	1a00685c <xputs>

#ifdef DEBUG
	xputs(" DEBUG");
1a004f12:	480e      	ldr	r0, [pc, #56]	; (1a004f4c <UARTShowVersion+0x44>)
1a004f14:	f001 fca2 	bl	1a00685c <xputs>
#else
	xputs(" RELEASE");
#endif
	xputs(" V"SOFTWARE_VERSION);
1a004f18:	480d      	ldr	r0, [pc, #52]	; (1a004f50 <UARTShowVersion+0x48>)
1a004f1a:	f001 fc9f 	bl	1a00685c <xputs>
#if USE_IMU_DATA
	xputs(" IMU");
1a004f1e:	480d      	ldr	r0, [pc, #52]	; (1a004f54 <UARTShowVersion+0x4c>)
1a004f20:	f001 fc9c 	bl	1a00685c <xputs>
#endif
#if USE_PUSHBOT
	xputs(" PBOT");
1a004f24:	480c      	ldr	r0, [pc, #48]	; (1a004f58 <UARTShowVersion+0x50>)
1a004f26:	f001 fc99 	bl	1a00685c <xputs>
	xputs(" SD");
#endif
#if LOW_POWER_MODE
	xputs(" LP");
#endif
	xputs(" " __DATE__ ", " __TIME__ "\n");
1a004f2a:	480c      	ldr	r0, [pc, #48]	; (1a004f5c <UARTShowVersion+0x54>)
1a004f2c:	f001 fc96 	bl	1a00685c <xputs>

	xprintf("System Clock: %3dMHz; 1us event time resolution\n", SystemCoreClock / MHZ);
1a004f30:	4b0b      	ldr	r3, [pc, #44]	; (1a004f60 <UARTShowVersion+0x58>)
1a004f32:	681b      	ldr	r3, [r3, #0]
1a004f34:	4a0b      	ldr	r2, [pc, #44]	; (1a004f64 <UARTShowVersion+0x5c>)
1a004f36:	fba2 2303 	umull	r2, r3, r2, r3
1a004f3a:	0c9b      	lsrs	r3, r3, #18
1a004f3c:	4619      	mov	r1, r3
1a004f3e:	480a      	ldr	r0, [pc, #40]	; (1a004f68 <UARTShowVersion+0x60>)
1a004f40:	f001 fe1c 	bl	1a006b7c <xprintf>
}
1a004f44:	bf00      	nop
1a004f46:	bd80      	pop	{r7, pc}
1a004f48:	1a018858 	.word	0x1a018858
1a004f4c:	1a018864 	.word	0x1a018864
1a004f50:	1a01886c 	.word	0x1a01886c
1a004f54:	1a018874 	.word	0x1a018874
1a004f58:	1a01887c 	.word	0x1a01887c
1a004f5c:	1a018884 	.word	0x1a018884
1a004f60:	10089100 	.word	0x10089100
1a004f64:	431bde83 	.word	0x431bde83
1a004f68:	1a01889c 	.word	0x1a01889c

1a004f6c <UARTShowUsage>:

// *****************************************************************************
static void UARTShowUsage(void) {
1a004f6c:	b580      	push	{r7, lr}
1a004f6e:	af00      	add	r7, sp, #0

	UARTShowVersion();
1a004f70:	f7ff ffca 	bl	1a004f08 <UARTShowVersion>

	UARTReturn();
1a004f74:	200a      	movs	r0, #10
1a004f76:	f001 fc4f 	bl	1a006818 <xputc>
	xputs("Supported Commands:\n");
1a004f7a:	4844      	ldr	r0, [pc, #272]	; (1a00508c <UARTShowUsage+0x120>)
1a004f7c:	f001 fc6e 	bl	1a00685c <xputs>
	UARTReturn();
1a004f80:	200a      	movs	r0, #10
1a004f82:	f001 fc49 	bl	1a006818 <xputc>

	xputs(" E+/-                  - enable/disable event sending\n");
1a004f86:	4842      	ldr	r0, [pc, #264]	; (1a005090 <UARTShowUsage+0x124>)
1a004f88:	f001 fc68 	bl	1a00685c <xputs>
#if USE_SDCARD
	xputs(" !ER+/-                - enable/disable event recording (SD card)\n");
#endif
	xputs(" !Ex                   - specify event data format, ??E to show options\n");
1a004f8c:	4841      	ldr	r0, [pc, #260]	; (1a005094 <UARTShowUsage+0x128>)
1a004f8e:	f001 fc65 	bl	1a00685c <xputs>
	xputs(" !ETx                  - set current timestamp to x (default: 0)\n");
1a004f92:	4841      	ldr	r0, [pc, #260]	; (1a005098 <UARTShowUsage+0x12c>)
1a004f94:	f001 fc62 	bl	1a00685c <xputs>
	xputs(" !ETM+                 - synch timestamp, master mode, output active\n");
1a004f98:	4840      	ldr	r0, [pc, #256]	; (1a00509c <UARTShowUsage+0x130>)
1a004f9a:	f001 fc5f 	bl	1a00685c <xputs>
	xputs(" !ETM0                 - synch timestamp, master mode, output stopped\n");
1a004f9e:	4840      	ldr	r0, [pc, #256]	; (1a0050a0 <UARTShowUsage+0x134>)
1a004fa0:	f001 fc5c 	bl	1a00685c <xputs>
	xputs(" !ETS                  - synch timestamp, slave mode\n");
1a004fa4:	483f      	ldr	r0, [pc, #252]	; (1a0050a4 <UARTShowUsage+0x138>)
1a004fa6:	f001 fc59 	bl	1a00685c <xputs>
	xputs(" !ETI                  - single retina, no external synch mode\n");
1a004faa:	483f      	ldr	r0, [pc, #252]	; (1a0050a8 <UARTShowUsage+0x13c>)
1a004fac:	f001 fc56 	bl	1a00685c <xputs>
	UARTReturn();
1a004fb0:	200a      	movs	r0, #10
1a004fb2:	f001 fc31 	bl	1a006818 <xputc>

	xputs(" !B[0-11]=x            - set bias register to value\n"); // please check, I have removed leading "0x" --- can we change this to decimal reception?
1a004fb6:	483d      	ldr	r0, [pc, #244]	; (1a0050ac <UARTShowUsage+0x140>)
1a004fb8:	f001 fc50 	bl	1a00685c <xputs>
	xputs(" !BF                   - send bias settings to DVS (flush)\n");
1a004fbc:	483c      	ldr	r0, [pc, #240]	; (1a0050b0 <UARTShowUsage+0x144>)
1a004fbe:	f001 fc4d 	bl	1a00685c <xputs>
	xputs(" !BDx                  - select and flush predefined bias set x\n");
1a004fc2:	483c      	ldr	r0, [pc, #240]	; (1a0050b4 <UARTShowUsage+0x148>)
1a004fc4:	f001 fc4a 	bl	1a00685c <xputs>
	xputs(" ?Bx                   - get bias register x current value\n");
1a004fc8:	483b      	ldr	r0, [pc, #236]	; (1a0050b8 <UARTShowUsage+0x14c>)
1a004fca:	f001 fc47 	bl	1a00685c <xputs>
	UARTReturn();
1a004fce:	200a      	movs	r0, #10
1a004fd0:	f001 fc22 	bl	1a006818 <xputc>
//     xputs(" ?Ax                   - get analog input");   // TODO
//     xputs(" !D=x                  - set digital output");  // TODO
//     xputs(" ?Dx                   - get digital input");// TODO
//     UARTReturn();

	xputs(" !L[0,1,2]             - LED off/on/blinking\n");
1a004fd4:	4839      	ldr	r0, [pc, #228]	; (1a0050bc <UARTShowUsage+0x150>)
1a004fd6:	f001 fc41 	bl	1a00685c <xputs>
	xputs(" !U=x                  - set baud rate to x\n");
1a004fda:	4839      	ldr	r0, [pc, #228]	; (1a0050c0 <UARTShowUsage+0x154>)
1a004fdc:	f001 fc3e 	bl	1a00685c <xputs>
	xputs(" !U[0,1,2]             - UART echo mode (none, cmd-reply, all)\n");
1a004fe0:	4838      	ldr	r0, [pc, #224]	; (1a0050c4 <UARTShowUsage+0x158>)
1a004fe2:	f001 fc3b 	bl	1a00685c <xputs>
	UARTReturn();
1a004fe6:	200a      	movs	r0, #10
1a004fe8:	f001 fc16 	bl	1a006818 <xputc>

	xputs(" !S+b,p                - enable sensors streaming, ??S to show options\n");
1a004fec:	4836      	ldr	r0, [pc, #216]	; (1a0050c8 <UARTShowUsage+0x15c>)
1a004fee:	f001 fc35 	bl	1a00685c <xputs>
	xputs(" !S-[b]                - disable sensors streaming, ??S to show options\n");
1a004ff2:	4836      	ldr	r0, [pc, #216]	; (1a0050cc <UARTShowUsage+0x160>)
1a004ff4:	f001 fc32 	bl	1a00685c <xputs>
	xputs(" ?Sb                   - get sensor readouts according to bitmap b\n");
1a004ff8:	4835      	ldr	r0, [pc, #212]	; (1a0050d0 <UARTShowUsage+0x164>)
1a004ffa:	f001 fc2f 	bl	1a00685c <xputs>
	xputs(" ??S                   - bitmap b options\n");
1a004ffe:	4835      	ldr	r0, [pc, #212]	; (1a0050d4 <UARTShowUsage+0x168>)
1a005000:	f001 fc2c 	bl	1a00685c <xputs>
	UARTReturn();
1a005004:	200a      	movs	r0, #10
1a005006:	f001 fc07 	bl	1a006818 <xputc>

//     xputs(" !A=[0-1023]           - set (internal) analog output");  // TODO (only useful with sleep mode) --- in fact not useful, please remove
//     xputs(" S[=x]                 - enter sleep mode (with wake-up threshold specified by x [0-1023]\n");    // TODO
	xputs(" R                     - reset board\n");
1a00500a:	4833      	ldr	r0, [pc, #204]	; (1a0050d8 <UARTShowUsage+0x16c>)
1a00500c:	f001 fc26 	bl	1a00685c <xputs>
	xputs(" P                     - enter reprogramming mode\n");
1a005010:	4832      	ldr	r0, [pc, #200]	; (1a0050dc <UARTShowUsage+0x170>)
1a005012:	f001 fc23 	bl	1a00685c <xputs>
	UARTReturn();
1a005016:	200a      	movs	r0, #10
1a005018:	f001 fbfe 	bl	1a006818 <xputc>

	xputs(" !M+/-                 - enable/disable motor driver\n");
1a00501c:	4830      	ldr	r0, [pc, #192]	; (1a0050e0 <UARTShowUsage+0x174>)
1a00501e:	f001 fc1d 	bl	1a00685c <xputs>
#if USE_PUSHBOT
	xputs(" ?MC[0,1]              - get motor PID controller gains\n");
1a005022:	4830      	ldr	r0, [pc, #192]	; (1a0050e4 <UARTShowUsage+0x178>)
1a005024:	f001 fc1a 	bl	1a00685c <xputs>
	xputs(" !MC[0,1]=p,i,d        - set motor PID controller gains\n");
1a005028:	482f      	ldr	r0, [pc, #188]	; (1a0050e8 <UARTShowUsage+0x17c>)
1a00502a:	f001 fc17 	bl	1a00685c <xputs>
#endif
	xputs(" !MP[0,1]=x            - set motor PWM period in microseconds\n");
1a00502e:	482f      	ldr	r0, [pc, #188]	; (1a0050ec <UARTShowUsage+0x180>)
1a005030:	f001 fc14 	bl	1a00685c <xputs>
	xputs(" !M[0,1]=[%]x          - set motor duty width in microseconds [% 0..100]\n");
1a005034:	482e      	ldr	r0, [pc, #184]	; (1a0050f0 <UARTShowUsage+0x184>)
1a005036:	f001 fc11 	bl	1a00685c <xputs>
#if USE_PUSHBOT
	xputs(" !MV[0,1]=[0-100]      - set motor velocity (internal P-controller for PushBot)\n");
1a00503a:	482e      	ldr	r0, [pc, #184]	; (1a0050f4 <UARTShowUsage+0x188>)
1a00503c:	f001 fc0e 	bl	1a00685c <xputs>
#endif
	xputs(" !MD[0,1]=[%]          - set motor duty width, slow decay [% 0..100]\n");
1a005040:	482d      	ldr	r0, [pc, #180]	; (1a0050f8 <UARTShowUsage+0x18c>)
1a005042:	f001 fc0b 	bl	1a00685c <xputs>
#if USE_PUSHBOT
	xputs(" !MVD[0,1]=x           - set motor duty velocity, slow decay\n");
1a005046:	482d      	ldr	r0, [pc, #180]	; (1a0050fc <UARTShowUsage+0x190>)
1a005048:	f001 fc08 	bl	1a00685c <xputs>
#endif
	UARTReturn();
1a00504c:	200a      	movs	r0, #10
1a00504e:	f001 fbe3 	bl	1a006818 <xputc>

	xputs(" !P[A,B,C]=x           - set timer base period in microseconds\n");
1a005052:	482b      	ldr	r0, [pc, #172]	; (1a005100 <UARTShowUsage+0x194>)
1a005054:	f001 fc02 	bl	1a00685c <xputs>
	xputs(" !P[A,B,C][0,1]=[%]x   - set timer channel width in microseconds [% 0..100]\n");
1a005058:	482a      	ldr	r0, [pc, #168]	; (1a005104 <UARTShowUsage+0x198>)
1a00505a:	f001 fbff 	bl	1a00685c <xputs>
	UARTReturn();
1a00505e:	200a      	movs	r0, #10
1a005060:	f001 fbda 	bl	1a006818 <xputc>

	xputs(" !T+/-                 - enable/disable Real Time Clock (RTC)\n");
1a005064:	4828      	ldr	r0, [pc, #160]	; (1a005108 <UARTShowUsage+0x19c>)
1a005066:	f001 fbf9 	bl	1a00685c <xputs>
	xputs(" !Tyyyy-mm-dd hh:mm:ss - set RTC time\n");
1a00506a:	4828      	ldr	r0, [pc, #160]	; (1a00510c <UARTShowUsage+0x1a0>)
1a00506c:	f001 fbf6 	bl	1a00685c <xputs>
	xputs(" ?T                    - get RTC time\n");
1a005070:	4827      	ldr	r0, [pc, #156]	; (1a005110 <UARTShowUsage+0x1a4>)
1a005072:	f001 fbf3 	bl	1a00685c <xputs>
	UARTReturn();
1a005076:	200a      	movs	r0, #10
1a005078:	f001 fbce 	bl	1a006818 <xputc>

	xputs(" ??                    - display (this) help menu\n");
1a00507c:	4825      	ldr	r0, [pc, #148]	; (1a005114 <UARTShowUsage+0x1a8>)
1a00507e:	f001 fbed 	bl	1a00685c <xputs>
	UARTReturn();
1a005082:	200a      	movs	r0, #10
1a005084:	f001 fbc8 	bl	1a006818 <xputc>
}
1a005088:	bf00      	nop
1a00508a:	bd80      	pop	{r7, pc}
1a00508c:	1a0188d0 	.word	0x1a0188d0
1a005090:	1a0188e8 	.word	0x1a0188e8
1a005094:	1a018920 	.word	0x1a018920
1a005098:	1a01896c 	.word	0x1a01896c
1a00509c:	1a0189b0 	.word	0x1a0189b0
1a0050a0:	1a0189f8 	.word	0x1a0189f8
1a0050a4:	1a018a40 	.word	0x1a018a40
1a0050a8:	1a018a78 	.word	0x1a018a78
1a0050ac:	1a018ab8 	.word	0x1a018ab8
1a0050b0:	1a018af0 	.word	0x1a018af0
1a0050b4:	1a018b2c 	.word	0x1a018b2c
1a0050b8:	1a018b70 	.word	0x1a018b70
1a0050bc:	1a018bac 	.word	0x1a018bac
1a0050c0:	1a018bdc 	.word	0x1a018bdc
1a0050c4:	1a018c0c 	.word	0x1a018c0c
1a0050c8:	1a018c4c 	.word	0x1a018c4c
1a0050cc:	1a018c94 	.word	0x1a018c94
1a0050d0:	1a018ce0 	.word	0x1a018ce0
1a0050d4:	1a018d24 	.word	0x1a018d24
1a0050d8:	1a018d50 	.word	0x1a018d50
1a0050dc:	1a018d78 	.word	0x1a018d78
1a0050e0:	1a018dac 	.word	0x1a018dac
1a0050e4:	1a018de4 	.word	0x1a018de4
1a0050e8:	1a018e20 	.word	0x1a018e20
1a0050ec:	1a018e5c 	.word	0x1a018e5c
1a0050f0:	1a018e9c 	.word	0x1a018e9c
1a0050f4:	1a018ee8 	.word	0x1a018ee8
1a0050f8:	1a018f3c 	.word	0x1a018f3c
1a0050fc:	1a018f84 	.word	0x1a018f84
1a005100:	1a018fc4 	.word	0x1a018fc4
1a005104:	1a019004 	.word	0x1a019004
1a005108:	1a019054 	.word	0x1a019054
1a00510c:	1a019094 	.word	0x1a019094
1a005110:	1a0190bc 	.word	0x1a0190bc
1a005114:	1a0190e4 	.word	0x1a0190e4

1a005118 <UARTShowEventDataOptions>:

static inline void UARTShowEventDataOptions(void) {
1a005118:	b580      	push	{r7, lr}
1a00511a:	af00      	add	r7, sp, #0
	xputs("List of available event data formats:\n");
1a00511c:	480e      	ldr	r0, [pc, #56]	; (1a005158 <UARTShowEventDataOptions+0x40>)
1a00511e:	f001 fb9d 	bl	1a00685c <xputs>
	xputs(" !E0   - 2 bytes per event, binary: 1yyyyyyy.pxxxxxxx (default)\n");
1a005122:	480e      	ldr	r0, [pc, #56]	; (1a00515c <UARTShowEventDataOptions+0x44>)
1a005124:	f001 fb9a 	bl	1a00685c <xputs>
	xputs(" !E1   - 3..6 bytes per event, 1..4 bytes delta-timestamp (7bits each)\n");
1a005128:	480d      	ldr	r0, [pc, #52]	; (1a005160 <UARTShowEventDataOptions+0x48>)
1a00512a:	f001 fb97 	bl	1a00685c <xputs>
	xputs(" !E2   - 4 bytes per event (as !E0 followed by 16bit timestamp)\n");
1a00512e:	480d      	ldr	r0, [pc, #52]	; (1a005164 <UARTShowEventDataOptions+0x4c>)
1a005130:	f001 fb94 	bl	1a00685c <xputs>
	xputs(" !E3   - 5 bytes per event (as !E0 followed by 24bit timestamp)\n");
1a005134:	480c      	ldr	r0, [pc, #48]	; (1a005168 <UARTShowEventDataOptions+0x50>)
1a005136:	f001 fb91 	bl	1a00685c <xputs>
	xputs(" !E4   - 6 bytes per event (as !E0 followed by 32bit timestamp)\n");
1a00513a:	480c      	ldr	r0, [pc, #48]	; (1a00516c <UARTShowEventDataOptions+0x54>)
1a00513c:	f001 fb8e 	bl	1a00685c <xputs>
	UARTReturn();
1a005140:	200a      	movs	r0, #10
1a005142:	f001 fb69 	bl	1a006818 <xputc>
	xputs(" Every timestamp has 1us resolution\n");
1a005146:	480a      	ldr	r0, [pc, #40]	; (1a005170 <UARTShowEventDataOptions+0x58>)
1a005148:	f001 fb88 	bl	1a00685c <xputs>
	UARTReturn();
1a00514c:	200a      	movs	r0, #10
1a00514e:	f001 fb63 	bl	1a006818 <xputc>
}
1a005152:	bf00      	nop
1a005154:	bd80      	pop	{r7, pc}
1a005156:	bf00      	nop
1a005158:	1a019118 	.word	0x1a019118
1a00515c:	1a019140 	.word	0x1a019140
1a005160:	1a019184 	.word	0x1a019184
1a005164:	1a0191cc 	.word	0x1a0191cc
1a005168:	1a019210 	.word	0x1a019210
1a00516c:	1a019254 	.word	0x1a019254
1a005170:	1a019298 	.word	0x1a019298

1a005174 <UARTShowSensorOptions>:

static inline void UARTShowSensorOptions(void) {
1a005174:	b580      	push	{r7, lr}
1a005176:	af00      	add	r7, sp, #0
	xputs("Bitlist for available sensors:\n");
1a005178:	4827      	ldr	r0, [pc, #156]	; (1a005218 <UARTShowSensorOptions+0xa4>)
1a00517a:	f001 fb6f 	bl	1a00685c <xputs>
	xputs(" Bit Dec-Value Name     # Values  Description\n");
1a00517e:	4827      	ldr	r0, [pc, #156]	; (1a00521c <UARTShowSensorOptions+0xa8>)
1a005180:	f001 fb6c 	bl	1a00685c <xputs>
	xputs(" 0   1         BATTERY         1  raw battery voltage level (0..9999)\n");
1a005184:	4826      	ldr	r0, [pc, #152]	; (1a005220 <UARTShowSensorOptions+0xac>)
1a005186:	f001 fb69 	bl	1a00685c <xputs>
	xputs(" 1   2         ADC CHANNEL0    1  raw ADC reading from pin 2 (0..1023)\n");
1a00518a:	4826      	ldr	r0, [pc, #152]	; (1a005224 <UARTShowSensorOptions+0xb0>)
1a00518c:	f001 fb66 	bl	1a00685c <xputs>
	xputs(" 2   4         ADC CHANNEL1    1  raw ADC reading from pin 3 (0..1023)\n");
1a005190:	4825      	ldr	r0, [pc, #148]	; (1a005228 <UARTShowSensorOptions+0xb4>)
1a005192:	f001 fb63 	bl	1a00685c <xputs>
	xputs(" 3   8         ADC CHANNEL2    1  raw ADC reading from pin 4 (0..1023)\n");
1a005196:	4825      	ldr	r0, [pc, #148]	; (1a00522c <UARTShowSensorOptions+0xb8>)
1a005198:	f001 fb60 	bl	1a00685c <xputs>
	xputs(" 4   16        ADC CHANNEL3    1  raw ADC reading from pin 5 (0..1023)\n");
1a00519c:	4824      	ldr	r0, [pc, #144]	; (1a005230 <UARTShowSensorOptions+0xbc>)
1a00519e:	f001 fb5d 	bl	1a00685c <xputs>
	xputs(" 5   32        ADC CHANNEL4    1  raw ADC reading from pin 6 (0..1023)\n");
1a0051a2:	4824      	ldr	r0, [pc, #144]	; (1a005234 <UARTShowSensorOptions+0xc0>)
1a0051a4:	f001 fb5a 	bl	1a00685c <xputs>
	xputs(" 6   64        ADC CHANNEL5    1  raw ADC reading from pin 7 (0..1023)\n");
1a0051a8:	4823      	ldr	r0, [pc, #140]	; (1a005238 <UARTShowSensorOptions+0xc4>)
1a0051aa:	f001 fb57 	bl	1a00685c <xputs>
#if USE_IMU_DATA
	xputs(" 7   128       RAW GYRO        3  raw gyroscope data for 3 axis (+/-32768)\n");
1a0051ae:	4823      	ldr	r0, [pc, #140]	; (1a00523c <UARTShowSensorOptions+0xc8>)
1a0051b0:	f001 fb54 	bl	1a00685c <xputs>
	xputs(" 8   256       RAW ACCEL       3  raw accelerometer data for 3 axis (+/-32768)\n");
1a0051b4:	4822      	ldr	r0, [pc, #136]	; (1a005240 <UARTShowSensorOptions+0xcc>)
1a0051b6:	f001 fb51 	bl	1a00685c <xputs>
	xputs(" 9   512       RAW COMPASS     3  raw magnetic values for 3 axis (+/-4096)\n");
1a0051ba:	4822      	ldr	r0, [pc, #136]	; (1a005244 <UARTShowSensorOptions+0xd0>)
1a0051bc:	f001 fb4e 	bl	1a00685c <xputs>
	xputs(" 10  1024      CAL GYRO        3  gyroscope data in dps Q16 in HEX\n");
1a0051c0:	4821      	ldr	r0, [pc, #132]	; (1a005248 <UARTShowSensorOptions+0xd4>)
1a0051c2:	f001 fb4b 	bl	1a00685c <xputs>
	xputs(" 11  2048      CAL ACCEL       3  accelerometer data in g's Q16 in HEX\n");
1a0051c6:	4821      	ldr	r0, [pc, #132]	; (1a00524c <UARTShowSensorOptions+0xd8>)
1a0051c8:	f001 fb48 	bl	1a00685c <xputs>
	xputs(" 12  4096      CAL COMPASS     3  magnetic values in microteslas Q16 in HEX\n");
1a0051cc:	4820      	ldr	r0, [pc, #128]	; (1a005250 <UARTShowSensorOptions+0xdc>)
1a0051ce:	f001 fb45 	bl	1a00685c <xputs>
	xputs(" 13  8192      QUARTERNION     4  9 axis quarternion Q30 in HEX\n");
1a0051d2:	4820      	ldr	r0, [pc, #128]	; (1a005254 <UARTShowSensorOptions+0xe0>)
1a0051d4:	f001 fb42 	bl	1a00685c <xputs>
	xputs(" 14  16384     EULER ANGLES    4  euler angles in degrees Q30 in HEX\n");
1a0051d8:	481f      	ldr	r0, [pc, #124]	; (1a005258 <UARTShowSensorOptions+0xe4>)
1a0051da:	f001 fb3f 	bl	1a00685c <xputs>
	xputs(" 15  32768     ROTATION MATRIX 9  rotation matrix Q30 in HEX\n");
1a0051de:	481f      	ldr	r0, [pc, #124]	; (1a00525c <UARTShowSensorOptions+0xe8>)
1a0051e0:	f001 fb3c 	bl	1a00685c <xputs>
	xputs(" 16  65536     HEADING         1  heading in degrees Q16 in HEX\n");
1a0051e4:	481e      	ldr	r0, [pc, #120]	; (1a005260 <UARTShowSensorOptions+0xec>)
1a0051e6:	f001 fb39 	bl	1a00685c <xputs>
	xputs(" 17  131072    LINEAR ACCEL    3  linear accel in m/s^2 Float in HEX\n");
1a0051ea:	481e      	ldr	r0, [pc, #120]	; (1a005264 <UARTShowSensorOptions+0xf0>)
1a0051ec:	f001 fb36 	bl	1a00685c <xputs>
	xputs(" 18  262144    IMU STATUS      2  IMU status (temperature and timestamp)\n");
1a0051f0:	481d      	ldr	r0, [pc, #116]	; (1a005268 <UARTShowSensorOptions+0xf4>)
1a0051f2:	f001 fb33 	bl	1a00685c <xputs>
#endif
	xputs(" 19  524288    PWM SIGNALS     4  currently set PWM duty cycle for all 2 motors\n");
1a0051f6:	481d      	ldr	r0, [pc, #116]	; (1a00526c <UARTShowSensorOptions+0xf8>)
1a0051f8:	f001 fb30 	bl	1a00685c <xputs>
	xputs(" 20  1048576   MOTOR CURRENTS  2  motor currents from the motor driver\n");
1a0051fc:	481c      	ldr	r0, [pc, #112]	; (1a005270 <UARTShowSensorOptions+0xfc>)
1a0051fe:	f001 fb2d 	bl	1a00685c <xputs>
#if USE_SDCARD
	xputs(" 21  2097152   EVENTS RATE     3  Event rate per second (0..1000000)\n");
#else
	xputs(" 21  2097152   EVENTS RATE     1  Event rate per second (0..1000000)\n");
1a005202:	481c      	ldr	r0, [pc, #112]	; (1a005274 <UARTShowSensorOptions+0x100>)
1a005204:	f001 fb2a 	bl	1a00685c <xputs>
#endif
#if USE_PUSHBOT
	xputs(" 28  268435456 MOTOR SENSORS   2  wheel tick counter\n");
1a005208:	481b      	ldr	r0, [pc, #108]	; (1a005278 <UARTShowSensorOptions+0x104>)
1a00520a:	f001 fb27 	bl	1a00685c <xputs>
#endif
	UARTReturn();
1a00520e:	200a      	movs	r0, #10
1a005210:	f001 fb02 	bl	1a006818 <xputc>
}
1a005214:	bf00      	nop
1a005216:	bd80      	pop	{r7, pc}
1a005218:	1a0192c0 	.word	0x1a0192c0
1a00521c:	1a0192e0 	.word	0x1a0192e0
1a005220:	1a019310 	.word	0x1a019310
1a005224:	1a019358 	.word	0x1a019358
1a005228:	1a0193a0 	.word	0x1a0193a0
1a00522c:	1a0193e8 	.word	0x1a0193e8
1a005230:	1a019430 	.word	0x1a019430
1a005234:	1a019478 	.word	0x1a019478
1a005238:	1a0194c0 	.word	0x1a0194c0
1a00523c:	1a019508 	.word	0x1a019508
1a005240:	1a019554 	.word	0x1a019554
1a005244:	1a0195a4 	.word	0x1a0195a4
1a005248:	1a0195f0 	.word	0x1a0195f0
1a00524c:	1a019634 	.word	0x1a019634
1a005250:	1a01967c 	.word	0x1a01967c
1a005254:	1a0196cc 	.word	0x1a0196cc
1a005258:	1a019710 	.word	0x1a019710
1a00525c:	1a019758 	.word	0x1a019758
1a005260:	1a019798 	.word	0x1a019798
1a005264:	1a0197dc 	.word	0x1a0197dc
1a005268:	1a019824 	.word	0x1a019824
1a00526c:	1a019870 	.word	0x1a019870
1a005270:	1a0198c4 	.word	0x1a0198c4
1a005274:	1a01990c 	.word	0x1a01990c
1a005278:	1a019954 	.word	0x1a019954

1a00527c <parseUInt32>:
// *****************************************************************************
static uint32_t parseUInt32(unsigned char **c) {
1a00527c:	b480      	push	{r7}
1a00527e:	b085      	sub	sp, #20
1a005280:	af00      	add	r7, sp, #0
1a005282:	6078      	str	r0, [r7, #4]
	uint32_t ul = 0;
1a005284:	2300      	movs	r3, #0
1a005286:	60fb      	str	r3, [r7, #12]
	while (((**c) >= '0') && ((**c) <= '9')) {
1a005288:	e012      	b.n	1a0052b0 <parseUInt32+0x34>
		ul = 10 * ul;
1a00528a:	68fa      	ldr	r2, [r7, #12]
1a00528c:	4613      	mov	r3, r2
1a00528e:	009b      	lsls	r3, r3, #2
1a005290:	4413      	add	r3, r2
1a005292:	005b      	lsls	r3, r3, #1
1a005294:	60fb      	str	r3, [r7, #12]
		ul += ((**c) - '0');
1a005296:	687b      	ldr	r3, [r7, #4]
1a005298:	681b      	ldr	r3, [r3, #0]
1a00529a:	781b      	ldrb	r3, [r3, #0]
1a00529c:	461a      	mov	r2, r3
1a00529e:	68fb      	ldr	r3, [r7, #12]
1a0052a0:	4413      	add	r3, r2
1a0052a2:	3b30      	subs	r3, #48	; 0x30
1a0052a4:	60fb      	str	r3, [r7, #12]
		(*(c))++;
1a0052a6:	687b      	ldr	r3, [r7, #4]
1a0052a8:	681b      	ldr	r3, [r3, #0]
1a0052aa:	1c5a      	adds	r2, r3, #1
1a0052ac:	687b      	ldr	r3, [r7, #4]
1a0052ae:	601a      	str	r2, [r3, #0]
	UARTReturn();
}
// *****************************************************************************
static uint32_t parseUInt32(unsigned char **c) {
	uint32_t ul = 0;
	while (((**c) >= '0') && ((**c) <= '9')) {
1a0052b0:	687b      	ldr	r3, [r7, #4]
1a0052b2:	681b      	ldr	r3, [r3, #0]
1a0052b4:	781b      	ldrb	r3, [r3, #0]
1a0052b6:	2b2f      	cmp	r3, #47	; 0x2f
1a0052b8:	d904      	bls.n	1a0052c4 <parseUInt32+0x48>
1a0052ba:	687b      	ldr	r3, [r7, #4]
1a0052bc:	681b      	ldr	r3, [r3, #0]
1a0052be:	781b      	ldrb	r3, [r3, #0]
1a0052c0:	2b39      	cmp	r3, #57	; 0x39
1a0052c2:	d9e2      	bls.n	1a00528a <parseUInt32+0xe>
		ul = 10 * ul;
		ul += ((**c) - '0');
		(*(c))++;
	}
	return (ul);
1a0052c4:	68fb      	ldr	r3, [r7, #12]
}
1a0052c6:	4618      	mov	r0, r3
1a0052c8:	3714      	adds	r7, #20
1a0052ca:	46bd      	mov	sp, r7
1a0052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0052d0:	4770      	bx	lr
1a0052d2:	bf00      	nop

1a0052d4 <parseInt32>:

static int32_t parseInt32(unsigned char **c) {
1a0052d4:	b580      	push	{r7, lr}
1a0052d6:	b082      	sub	sp, #8
1a0052d8:	af00      	add	r7, sp, #0
1a0052da:	6078      	str	r0, [r7, #4]
	if ((**c) == '-') {
1a0052dc:	687b      	ldr	r3, [r7, #4]
1a0052de:	681b      	ldr	r3, [r3, #0]
1a0052e0:	781b      	ldrb	r3, [r3, #0]
1a0052e2:	2b2d      	cmp	r3, #45	; 0x2d
1a0052e4:	d10a      	bne.n	1a0052fc <parseInt32+0x28>
		(*(c))++;
1a0052e6:	687b      	ldr	r3, [r7, #4]
1a0052e8:	681b      	ldr	r3, [r3, #0]
1a0052ea:	1c5a      	adds	r2, r3, #1
1a0052ec:	687b      	ldr	r3, [r7, #4]
1a0052ee:	601a      	str	r2, [r3, #0]
		return (-1 * ((int32_t) parseUInt32(c)));
1a0052f0:	6878      	ldr	r0, [r7, #4]
1a0052f2:	f7ff ffc3 	bl	1a00527c <parseUInt32>
1a0052f6:	4603      	mov	r3, r0
1a0052f8:	425b      	negs	r3, r3
1a0052fa:	e00d      	b.n	1a005318 <parseInt32+0x44>
	}
	if ((**c) == '+') {
1a0052fc:	687b      	ldr	r3, [r7, #4]
1a0052fe:	681b      	ldr	r3, [r3, #0]
1a005300:	781b      	ldrb	r3, [r3, #0]
1a005302:	2b2b      	cmp	r3, #43	; 0x2b
1a005304:	d104      	bne.n	1a005310 <parseInt32+0x3c>
		(*(c))++;
1a005306:	687b      	ldr	r3, [r7, #4]
1a005308:	681b      	ldr	r3, [r3, #0]
1a00530a:	1c5a      	adds	r2, r3, #1
1a00530c:	687b      	ldr	r3, [r7, #4]
1a00530e:	601a      	str	r2, [r3, #0]
	}
	return ((int32_t) parseUInt32(c));
1a005310:	6878      	ldr	r0, [r7, #4]
1a005312:	f7ff ffb3 	bl	1a00527c <parseUInt32>
1a005316:	4603      	mov	r3, r0
}
1a005318:	4618      	mov	r0, r3
1a00531a:	3708      	adds	r7, #8
1a00531c:	46bd      	mov	sp, r7
1a00531e:	bd80      	pop	{r7, pc}

1a005320 <UARTParseGetCommand>:

// *****************************************************************************
// * ** parseGetCommand ** */
// *****************************************************************************
static void UARTParseGetCommand(void) {
1a005320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a005324:	b08b      	sub	sp, #44	; 0x2c
1a005326:	af04      	add	r7, sp, #16

	switch (commandLine[1]) {
1a005328:	4b9b      	ldr	r3, [pc, #620]	; (1a005598 <UARTParseGetCommand+0x278>)
1a00532a:	785b      	ldrb	r3, [r3, #1]
1a00532c:	3b3f      	subs	r3, #63	; 0x3f
1a00532e:	2b35      	cmp	r3, #53	; 0x35
1a005330:	f200 8129 	bhi.w	1a005586 <UARTParseGetCommand+0x266>
1a005334:	a201      	add	r2, pc, #4	; (adr r2, 1a00533c <UARTParseGetCommand+0x1c>)
1a005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a00533a:	bf00      	nop
1a00533c:	1a005555 	.word	0x1a005555
1a005340:	1a005587 	.word	0x1a005587
1a005344:	1a005587 	.word	0x1a005587
1a005348:	1a005415 	.word	0x1a005415
1a00534c:	1a005587 	.word	0x1a005587
1a005350:	1a005587 	.word	0x1a005587
1a005354:	1a005477 	.word	0x1a005477
1a005358:	1a005587 	.word	0x1a005587
1a00535c:	1a005587 	.word	0x1a005587
1a005360:	1a005587 	.word	0x1a005587
1a005364:	1a005587 	.word	0x1a005587
1a005368:	1a005587 	.word	0x1a005587
1a00536c:	1a005587 	.word	0x1a005587
1a005370:	1a005587 	.word	0x1a005587
1a005374:	1a005485 	.word	0x1a005485
1a005378:	1a005587 	.word	0x1a005587
1a00537c:	1a005587 	.word	0x1a005587
1a005380:	1a005587 	.word	0x1a005587
1a005384:	1a005587 	.word	0x1a005587
1a005388:	1a005587 	.word	0x1a005587
1a00538c:	1a0054ed 	.word	0x1a0054ed
1a005390:	1a005505 	.word	0x1a005505
1a005394:	1a005587 	.word	0x1a005587
1a005398:	1a005587 	.word	0x1a005587
1a00539c:	1a005587 	.word	0x1a005587
1a0053a0:	1a005587 	.word	0x1a005587
1a0053a4:	1a005587 	.word	0x1a005587
1a0053a8:	1a005587 	.word	0x1a005587
1a0053ac:	1a005587 	.word	0x1a005587
1a0053b0:	1a005587 	.word	0x1a005587
1a0053b4:	1a005587 	.word	0x1a005587
1a0053b8:	1a005587 	.word	0x1a005587
1a0053bc:	1a005587 	.word	0x1a005587
1a0053c0:	1a005587 	.word	0x1a005587
1a0053c4:	1a005587 	.word	0x1a005587
1a0053c8:	1a005415 	.word	0x1a005415
1a0053cc:	1a005587 	.word	0x1a005587
1a0053d0:	1a005587 	.word	0x1a005587
1a0053d4:	1a005477 	.word	0x1a005477
1a0053d8:	1a005587 	.word	0x1a005587
1a0053dc:	1a005587 	.word	0x1a005587
1a0053e0:	1a005587 	.word	0x1a005587
1a0053e4:	1a005587 	.word	0x1a005587
1a0053e8:	1a005587 	.word	0x1a005587
1a0053ec:	1a005587 	.word	0x1a005587
1a0053f0:	1a005587 	.word	0x1a005587
1a0053f4:	1a005485 	.word	0x1a005485
1a0053f8:	1a005587 	.word	0x1a005587
1a0053fc:	1a005587 	.word	0x1a005587
1a005400:	1a005587 	.word	0x1a005587
1a005404:	1a005587 	.word	0x1a005587
1a005408:	1a005587 	.word	0x1a005587
1a00540c:	1a0054ed 	.word	0x1a0054ed
1a005410:	1a005505 	.word	0x1a005505
	case 'B':
	case 'b': {	   									// request bias value
		unsigned char *c;
		int32_t biasID;

		c = commandLine + 2;				// send bias value as decimal value
1a005414:	4b61      	ldr	r3, [pc, #388]	; (1a00559c <UARTParseGetCommand+0x27c>)
1a005416:	60fb      	str	r3, [r7, #12]
		if ((*c == 'A') || (*c == 'a')) {
1a005418:	68fb      	ldr	r3, [r7, #12]
1a00541a:	781b      	ldrb	r3, [r3, #0]
1a00541c:	2b41      	cmp	r3, #65	; 0x41
1a00541e:	d003      	beq.n	1a005428 <UARTParseGetCommand+0x108>
1a005420:	68fb      	ldr	r3, [r7, #12]
1a005422:	781b      	ldrb	r3, [r3, #0]
1a005424:	2b61      	cmp	r3, #97	; 0x61
1a005426:	d113      	bne.n	1a005450 <UARTParseGetCommand+0x130>
			for (biasID = 0; biasID < 12; biasID++) {
1a005428:	2300      	movs	r3, #0
1a00542a:	617b      	str	r3, [r7, #20]
1a00542c:	e00c      	b.n	1a005448 <UARTParseGetCommand+0x128>
				xprintf("-B%d=%d\n", biasID, DVS128BiasGet(biasID));
1a00542e:	697b      	ldr	r3, [r7, #20]
1a005430:	4618      	mov	r0, r3
1a005432:	f7fb f8c1 	bl	1a0005b8 <DVS128BiasGet>
1a005436:	4603      	mov	r3, r0
1a005438:	461a      	mov	r2, r3
1a00543a:	6979      	ldr	r1, [r7, #20]
1a00543c:	4858      	ldr	r0, [pc, #352]	; (1a0055a0 <UARTParseGetCommand+0x280>)
1a00543e:	f001 fb9d 	bl	1a006b7c <xprintf>
		unsigned char *c;
		int32_t biasID;

		c = commandLine + 2;				// send bias value as decimal value
		if ((*c == 'A') || (*c == 'a')) {
			for (biasID = 0; biasID < 12; biasID++) {
1a005442:	697b      	ldr	r3, [r7, #20]
1a005444:	3301      	adds	r3, #1
1a005446:	617b      	str	r3, [r7, #20]
1a005448:	697b      	ldr	r3, [r7, #20]
1a00544a:	2b0b      	cmp	r3, #11
1a00544c:	ddef      	ble.n	1a00542e <UARTParseGetCommand+0x10e>
				xprintf("-B%d=%d\n", biasID, DVS128BiasGet(biasID));
			}
			break;
1a00544e:	e09d      	b.n	1a00558c <UARTParseGetCommand+0x26c>
		}

		biasID = parseUInt32(&c);
1a005450:	f107 030c 	add.w	r3, r7, #12
1a005454:	4618      	mov	r0, r3
1a005456:	f7ff ff11 	bl	1a00527c <parseUInt32>
1a00545a:	4603      	mov	r3, r0
1a00545c:	617b      	str	r3, [r7, #20]
		xprintf("-B%d=%d\n", biasID, DVS128BiasGet(biasID));
1a00545e:	697b      	ldr	r3, [r7, #20]
1a005460:	4618      	mov	r0, r3
1a005462:	f7fb f8a9 	bl	1a0005b8 <DVS128BiasGet>
1a005466:	4603      	mov	r3, r0
1a005468:	461a      	mov	r2, r3
1a00546a:	6979      	ldr	r1, [r7, #20]
1a00546c:	484c      	ldr	r0, [pc, #304]	; (1a0055a0 <UARTParseGetCommand+0x280>)
1a00546e:	f001 fb85 	bl	1a006b7c <xprintf>
		break;
1a005472:	bf00      	nop
1a005474:	e08a      	b.n	1a00558c <UARTParseGetCommand+0x26c>
	}

	case 'E':
	case 'e':
		xprintf("-E%d\n", eDVSDataFormat);
1a005476:	4b4b      	ldr	r3, [pc, #300]	; (1a0055a4 <UARTParseGetCommand+0x284>)
1a005478:	681b      	ldr	r3, [r3, #0]
1a00547a:	4619      	mov	r1, r3
1a00547c:	484a      	ldr	r0, [pc, #296]	; (1a0055a8 <UARTParseGetCommand+0x288>)
1a00547e:	f001 fb7d 	bl	1a006b7c <xprintf>
		break;
1a005482:	e083      	b.n	1a00558c <UARTParseGetCommand+0x26c>

#if USE_PUSHBOT
	case 'M':
	case 'm': {
		unsigned char *c = commandLine + 2;
1a005484:	4b45      	ldr	r3, [pc, #276]	; (1a00559c <UARTParseGetCommand+0x27c>)
1a005486:	60bb      	str	r3, [r7, #8]
		if (*c == 'C' || *c == 'c') {
1a005488:	68bb      	ldr	r3, [r7, #8]
1a00548a:	781b      	ldrb	r3, [r3, #0]
1a00548c:	2b43      	cmp	r3, #67	; 0x43
1a00548e:	d003      	beq.n	1a005498 <UARTParseGetCommand+0x178>
1a005490:	68bb      	ldr	r3, [r7, #8]
1a005492:	781b      	ldrb	r3, [r3, #0]
1a005494:	2b63      	cmp	r3, #99	; 0x63
1a005496:	d122      	bne.n	1a0054de <UARTParseGetCommand+0x1be>
			c++;
1a005498:	68bb      	ldr	r3, [r7, #8]
1a00549a:	3301      	adds	r3, #1
1a00549c:	60bb      	str	r3, [r7, #8]
			uint32_t motorId = parseUInt32(&c);
1a00549e:	f107 0308 	add.w	r3, r7, #8
1a0054a2:	4618      	mov	r0, r3
1a0054a4:	f7ff feea 	bl	1a00527c <parseUInt32>
1a0054a8:	6138      	str	r0, [r7, #16]
			if (motorId == MOTOR0) {
1a0054aa:	693b      	ldr	r3, [r7, #16]
1a0054ac:	2b00      	cmp	r3, #0
1a0054ae:	d109      	bne.n	1a0054c4 <UARTParseGetCommand+0x1a4>
				xprintf("-MC0 %d,%d,%d\n", motor0.proportionalGain, motor0.integralGain, motor0.derivativeGain);
1a0054b0:	4b3e      	ldr	r3, [pc, #248]	; (1a0055ac <UARTParseGetCommand+0x28c>)
1a0054b2:	69d9      	ldr	r1, [r3, #28]
1a0054b4:	4b3d      	ldr	r3, [pc, #244]	; (1a0055ac <UARTParseGetCommand+0x28c>)
1a0054b6:	6a1a      	ldr	r2, [r3, #32]
1a0054b8:	4b3c      	ldr	r3, [pc, #240]	; (1a0055ac <UARTParseGetCommand+0x28c>)
1a0054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a0054bc:	483c      	ldr	r0, [pc, #240]	; (1a0055b0 <UARTParseGetCommand+0x290>)
1a0054be:	f001 fb5d 	bl	1a006b7c <xprintf>

#if USE_PUSHBOT
	case 'M':
	case 'm': {
		unsigned char *c = commandLine + 2;
		if (*c == 'C' || *c == 'c') {
1a0054c2:	e010      	b.n	1a0054e6 <UARTParseGetCommand+0x1c6>
			c++;
			uint32_t motorId = parseUInt32(&c);
			if (motorId == MOTOR0) {
				xprintf("-MC0 %d,%d,%d\n", motor0.proportionalGain, motor0.integralGain, motor0.derivativeGain);
			} else if (motorId == MOTOR1) {
1a0054c4:	693b      	ldr	r3, [r7, #16]
1a0054c6:	2b01      	cmp	r3, #1
1a0054c8:	d10d      	bne.n	1a0054e6 <UARTParseGetCommand+0x1c6>
				xprintf("-MC1 %d,%d,%d\n", motor1.proportionalGain, motor1.integralGain, motor1.derivativeGain);
1a0054ca:	4b3a      	ldr	r3, [pc, #232]	; (1a0055b4 <UARTParseGetCommand+0x294>)
1a0054cc:	69d9      	ldr	r1, [r3, #28]
1a0054ce:	4b39      	ldr	r3, [pc, #228]	; (1a0055b4 <UARTParseGetCommand+0x294>)
1a0054d0:	6a1a      	ldr	r2, [r3, #32]
1a0054d2:	4b38      	ldr	r3, [pc, #224]	; (1a0055b4 <UARTParseGetCommand+0x294>)
1a0054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a0054d6:	4838      	ldr	r0, [pc, #224]	; (1a0055b8 <UARTParseGetCommand+0x298>)
1a0054d8:	f001 fb50 	bl	1a006b7c <xprintf>

#if USE_PUSHBOT
	case 'M':
	case 'm': {
		unsigned char *c = commandLine + 2;
		if (*c == 'C' || *c == 'c') {
1a0054dc:	e003      	b.n	1a0054e6 <UARTParseGetCommand+0x1c6>
				xprintf("-MC0 %d,%d,%d\n", motor0.proportionalGain, motor0.integralGain, motor0.derivativeGain);
			} else if (motorId == MOTOR1) {
				xprintf("-MC1 %d,%d,%d\n", motor1.proportionalGain, motor1.integralGain, motor1.derivativeGain);
			}
		} else {
			xputs("Get: parsing error\n");
1a0054de:	4837      	ldr	r0, [pc, #220]	; (1a0055bc <UARTParseGetCommand+0x29c>)
1a0054e0:	f001 f9bc 	bl	1a00685c <xputs>
		}
		break;
1a0054e4:	e000      	b.n	1a0054e8 <UARTParseGetCommand+0x1c8>

#if USE_PUSHBOT
	case 'M':
	case 'm': {
		unsigned char *c = commandLine + 2;
		if (*c == 'C' || *c == 'c') {
1a0054e6:	bf00      	nop
				xprintf("-MC1 %d,%d,%d\n", motor1.proportionalGain, motor1.integralGain, motor1.derivativeGain);
			}
		} else {
			xputs("Get: parsing error\n");
		}
		break;
1a0054e8:	bf00      	nop
1a0054ea:	e04f      	b.n	1a00558c <UARTParseGetCommand+0x26c>
	}
#endif
	case 'S':
	case 's': {
		unsigned char *c = commandLine + 2;
1a0054ec:	4b2b      	ldr	r3, [pc, #172]	; (1a00559c <UARTParseGetCommand+0x27c>)
1a0054ee:	607b      	str	r3, [r7, #4]
		getSensorsOutput(parseUInt32(&c));
1a0054f0:	1d3b      	adds	r3, r7, #4
1a0054f2:	4618      	mov	r0, r3
1a0054f4:	f7ff fec2 	bl	1a00527c <parseUInt32>
1a0054f8:	4603      	mov	r3, r0
1a0054fa:	4618      	mov	r0, r3
1a0054fc:	f7ff f93e 	bl	1a00477c <getSensorsOutput>
		break;
1a005500:	bf00      	nop
1a005502:	e043      	b.n	1a00558c <UARTParseGetCommand+0x26c>
	}
	case 'T':
	case 't':
		xprintf("-T%04d-%02d-%02d %02d:%02d:%02d\n", Chip_RTC_GetTime(LPC_RTC, RTC_TIMETYPE_YEAR),
1a005504:	2107      	movs	r1, #7
1a005506:	482e      	ldr	r0, [pc, #184]	; (1a0055c0 <UARTParseGetCommand+0x2a0>)
1a005508:	f7ff fa86 	bl	1a004a18 <Chip_RTC_GetTime>
1a00550c:	4606      	mov	r6, r0
1a00550e:	2106      	movs	r1, #6
1a005510:	482b      	ldr	r0, [pc, #172]	; (1a0055c0 <UARTParseGetCommand+0x2a0>)
1a005512:	f7ff fa81 	bl	1a004a18 <Chip_RTC_GetTime>
1a005516:	4680      	mov	r8, r0
1a005518:	2103      	movs	r1, #3
1a00551a:	4829      	ldr	r0, [pc, #164]	; (1a0055c0 <UARTParseGetCommand+0x2a0>)
1a00551c:	f7ff fa7c 	bl	1a004a18 <Chip_RTC_GetTime>
1a005520:	4681      	mov	r9, r0
1a005522:	2102      	movs	r1, #2
1a005524:	4826      	ldr	r0, [pc, #152]	; (1a0055c0 <UARTParseGetCommand+0x2a0>)
1a005526:	f7ff fa77 	bl	1a004a18 <Chip_RTC_GetTime>
1a00552a:	4604      	mov	r4, r0
1a00552c:	2101      	movs	r1, #1
1a00552e:	4824      	ldr	r0, [pc, #144]	; (1a0055c0 <UARTParseGetCommand+0x2a0>)
1a005530:	f7ff fa72 	bl	1a004a18 <Chip_RTC_GetTime>
1a005534:	4605      	mov	r5, r0
1a005536:	2100      	movs	r1, #0
1a005538:	4821      	ldr	r0, [pc, #132]	; (1a0055c0 <UARTParseGetCommand+0x2a0>)
1a00553a:	f7ff fa6d 	bl	1a004a18 <Chip_RTC_GetTime>
1a00553e:	4603      	mov	r3, r0
1a005540:	9302      	str	r3, [sp, #8]
1a005542:	9501      	str	r5, [sp, #4]
1a005544:	9400      	str	r4, [sp, #0]
1a005546:	464b      	mov	r3, r9
1a005548:	4642      	mov	r2, r8
1a00554a:	4631      	mov	r1, r6
1a00554c:	481d      	ldr	r0, [pc, #116]	; (1a0055c4 <UARTParseGetCommand+0x2a4>)
1a00554e:	f001 fb15 	bl	1a006b7c <xprintf>
				Chip_RTC_GetTime(LPC_RTC, RTC_TIMETYPE_MONTH), Chip_RTC_GetTime(LPC_RTC, RTC_TIMETYPE_DAYOFMONTH),
				Chip_RTC_GetTime(LPC_RTC, RTC_TIMETYPE_HOUR), Chip_RTC_GetTime(LPC_RTC, RTC_TIMETYPE_MINUTE),
				Chip_RTC_GetTime(LPC_RTC, RTC_TIMETYPE_SECOND));
		break;
1a005552:	e01b      	b.n	1a00558c <UARTParseGetCommand+0x26c>
	case '?':
		if (((commandLine[2]) == 'e') || ((commandLine[2]) == 'E')) {
1a005554:	4b10      	ldr	r3, [pc, #64]	; (1a005598 <UARTParseGetCommand+0x278>)
1a005556:	789b      	ldrb	r3, [r3, #2]
1a005558:	2b65      	cmp	r3, #101	; 0x65
1a00555a:	d003      	beq.n	1a005564 <UARTParseGetCommand+0x244>
1a00555c:	4b0e      	ldr	r3, [pc, #56]	; (1a005598 <UARTParseGetCommand+0x278>)
1a00555e:	789b      	ldrb	r3, [r3, #2]
1a005560:	2b45      	cmp	r3, #69	; 0x45
1a005562:	d102      	bne.n	1a00556a <UARTParseGetCommand+0x24a>
			UARTShowEventDataOptions();
1a005564:	f7ff fdd8 	bl	1a005118 <UARTShowEventDataOptions>
			break;
1a005568:	e010      	b.n	1a00558c <UARTParseGetCommand+0x26c>
		}
		if (((commandLine[2]) == 's') || ((commandLine[2]) == 'S')) {
1a00556a:	4b0b      	ldr	r3, [pc, #44]	; (1a005598 <UARTParseGetCommand+0x278>)
1a00556c:	789b      	ldrb	r3, [r3, #2]
1a00556e:	2b73      	cmp	r3, #115	; 0x73
1a005570:	d003      	beq.n	1a00557a <UARTParseGetCommand+0x25a>
1a005572:	4b09      	ldr	r3, [pc, #36]	; (1a005598 <UARTParseGetCommand+0x278>)
1a005574:	789b      	ldrb	r3, [r3, #2]
1a005576:	2b53      	cmp	r3, #83	; 0x53
1a005578:	d102      	bne.n	1a005580 <UARTParseGetCommand+0x260>
			UARTShowSensorOptions();
1a00557a:	f7ff fdfb 	bl	1a005174 <UARTShowSensorOptions>
			break;
1a00557e:	e005      	b.n	1a00558c <UARTParseGetCommand+0x26c>
		}
		UARTShowUsage();
1a005580:	f7ff fcf4 	bl	1a004f6c <UARTShowUsage>
		break;
1a005584:	e002      	b.n	1a00558c <UARTParseGetCommand+0x26c>

	default:
		xputs("Get: parsing error\n");
1a005586:	480d      	ldr	r0, [pc, #52]	; (1a0055bc <UARTParseGetCommand+0x29c>)
1a005588:	f001 f968 	bl	1a00685c <xputs>
	}
	return;
1a00558c:	bf00      	nop
}
1a00558e:	371c      	adds	r7, #28
1a005590:	46bd      	mov	sp, r7
1a005592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a005596:	bf00      	nop
1a005598:	1008887c 	.word	0x1008887c
1a00559c:	1008887e 	.word	0x1008887e
1a0055a0:	1a01998c 	.word	0x1a01998c
1a0055a4:	1008651c 	.word	0x1008651c
1a0055a8:	1a019998 	.word	0x1a019998
1a0055ac:	100874a4 	.word	0x100874a4
1a0055b0:	1a0199a0 	.word	0x1a0199a0
1a0055b4:	10087468 	.word	0x10087468
1a0055b8:	1a0199b0 	.word	0x1a0199b0
1a0055bc:	1a0199c0 	.word	0x1a0199c0
1a0055c0:	40046000 	.word	0x40046000
1a0055c4:	1a0199d4 	.word	0x1a0199d4

1a0055c8 <UARTParseSetCommand>:

// *****************************************************************************
// * ** parseSetCommand ** */
// *****************************************************************************
static void UARTParseSetCommand(void) {
1a0055c8:	b590      	push	{r4, r7, lr}
1a0055ca:	b09f      	sub	sp, #124	; 0x7c
1a0055cc:	af00      	add	r7, sp, #0
	switch (commandLine[1]) {
1a0055ce:	4bac      	ldr	r3, [pc, #688]	; (1a005880 <UARTParseSetCommand+0x2b8>)
1a0055d0:	785b      	ldrb	r3, [r3, #1]
1a0055d2:	3b41      	subs	r3, #65	; 0x41
1a0055d4:	2b34      	cmp	r3, #52	; 0x34
1a0055d6:	f200 85f6 	bhi.w	1a0061c6 <UARTParseSetCommand+0xbfe>
1a0055da:	a201      	add	r2, pc, #4	; (adr r2, 1a0055e0 <UARTParseSetCommand+0x18>)
1a0055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0055e0:	1a0056b5 	.word	0x1a0056b5
1a0055e4:	1a0056f3 	.word	0x1a0056f3
1a0055e8:	1a0061c7 	.word	0x1a0061c7
1a0055ec:	1a0061c7 	.word	0x1a0061c7
1a0055f0:	1a0057df 	.word	0x1a0057df
1a0055f4:	1a0061c7 	.word	0x1a0061c7
1a0055f8:	1a0061c7 	.word	0x1a0061c7
1a0055fc:	1a0061c7 	.word	0x1a0061c7
1a005600:	1a0061c7 	.word	0x1a0061c7
1a005604:	1a0061c7 	.word	0x1a0061c7
1a005608:	1a0061c7 	.word	0x1a0061c7
1a00560c:	1a005a3f 	.word	0x1a005a3f
1a005610:	1a005a83 	.word	0x1a005a83
1a005614:	1a0061c7 	.word	0x1a0061c7
1a005618:	1a0061c7 	.word	0x1a0061c7
1a00561c:	1a005deb 	.word	0x1a005deb
1a005620:	1a0061c7 	.word	0x1a0061c7
1a005624:	1a0061c7 	.word	0x1a0061c7
1a005628:	1a005f07 	.word	0x1a005f07
1a00562c:	1a005fc3 	.word	0x1a005fc3
1a005630:	1a0060b5 	.word	0x1a0060b5
1a005634:	1a0061c7 	.word	0x1a0061c7
1a005638:	1a0061c7 	.word	0x1a0061c7
1a00563c:	1a0061c7 	.word	0x1a0061c7
1a005640:	1a0061c7 	.word	0x1a0061c7
1a005644:	1a0061c7 	.word	0x1a0061c7
1a005648:	1a0061c7 	.word	0x1a0061c7
1a00564c:	1a0061c7 	.word	0x1a0061c7
1a005650:	1a0061c7 	.word	0x1a0061c7
1a005654:	1a0061c7 	.word	0x1a0061c7
1a005658:	1a0061c7 	.word	0x1a0061c7
1a00565c:	1a0061c7 	.word	0x1a0061c7
1a005660:	1a0056b5 	.word	0x1a0056b5
1a005664:	1a0056f3 	.word	0x1a0056f3
1a005668:	1a0061c7 	.word	0x1a0061c7
1a00566c:	1a0061c7 	.word	0x1a0061c7
1a005670:	1a0057df 	.word	0x1a0057df
1a005674:	1a0061c7 	.word	0x1a0061c7
1a005678:	1a0061c7 	.word	0x1a0061c7
1a00567c:	1a0061c7 	.word	0x1a0061c7
1a005680:	1a0061c7 	.word	0x1a0061c7
1a005684:	1a0061c7 	.word	0x1a0061c7
1a005688:	1a0061c7 	.word	0x1a0061c7
1a00568c:	1a005a3f 	.word	0x1a005a3f
1a005690:	1a005a83 	.word	0x1a005a83
1a005694:	1a0061c7 	.word	0x1a0061c7
1a005698:	1a0061c7 	.word	0x1a0061c7
1a00569c:	1a005deb 	.word	0x1a005deb
1a0056a0:	1a0061c7 	.word	0x1a0061c7
1a0056a4:	1a0061c7 	.word	0x1a0061c7
1a0056a8:	1a005f07 	.word	0x1a005f07
1a0056ac:	1a005fc3 	.word	0x1a005fc3
1a0056b0:	1a0060b5 	.word	0x1a0060b5
	case 'A':
	case 'a': {
		unsigned char *c = commandLine + 2;
1a0056b4:	4b73      	ldr	r3, [pc, #460]	; (1a005884 <UARTParseSetCommand+0x2bc>)
1a0056b6:	643b      	str	r3, [r7, #64]	; 0x40
		if (*c == '=') {
1a0056b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a0056ba:	781b      	ldrb	r3, [r3, #0]
1a0056bc:	2b3d      	cmp	r3, #61	; 0x3d
1a0056be:	d102      	bne.n	1a0056c6 <UARTParseSetCommand+0xfe>
			c++;
1a0056c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a0056c2:	3301      	adds	r3, #1
1a0056c4:	643b      	str	r3, [r7, #64]	; 0x40
		}
		uint32_t newDacValue = parseUInt32(&c);
1a0056c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
1a0056ca:	4618      	mov	r0, r3
1a0056cc:	f7ff fdd6 	bl	1a00527c <parseUInt32>
1a0056d0:	66f8      	str	r0, [r7, #108]	; 0x6c
		if (newDacValue > 0x3FF) {
1a0056d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1a0056d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
1a0056d8:	d304      	bcc.n	1a0056e4 <UARTParseSetCommand+0x11c>
			xputs("Analog output should be between [0-1023]\n");
1a0056da:	486b      	ldr	r0, [pc, #428]	; (1a005888 <UARTParseSetCommand+0x2c0>)
1a0056dc:	f001 f8be 	bl	1a00685c <xputs>
			return;
1a0056e0:	f000 bd86 	b.w	1a0061f0 <UARTParseSetCommand+0xc28>
		}
		Chip_DAC_UpdateValue(LPC_DAC, newDacValue);
1a0056e4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
1a0056e6:	4869      	ldr	r0, [pc, #420]	; (1a00588c <UARTParseSetCommand+0x2c4>)
1a0056e8:	f00c ff6c 	bl	1a0125c4 <Chip_DAC_UpdateValue>
		return;
1a0056ec:	bf00      	nop
1a0056ee:	f000 bd7f 	b.w	1a0061f0 <UARTParseSetCommand+0xc28>
	case 'B':
	case 'b': {
		unsigned char *c;
		long biasID, biasValue;

		if ((commandLine[2] == 'F') || (commandLine[2] == 'f')) {				// flush bias values to DVS chip
1a0056f2:	4b63      	ldr	r3, [pc, #396]	; (1a005880 <UARTParseSetCommand+0x2b8>)
1a0056f4:	789b      	ldrb	r3, [r3, #2]
1a0056f6:	2b46      	cmp	r3, #70	; 0x46
1a0056f8:	d003      	beq.n	1a005702 <UARTParseSetCommand+0x13a>
1a0056fa:	4b61      	ldr	r3, [pc, #388]	; (1a005880 <UARTParseSetCommand+0x2b8>)
1a0056fc:	789b      	ldrb	r3, [r3, #2]
1a0056fe:	2b66      	cmp	r3, #102	; 0x66
1a005700:	d10f      	bne.n	1a005722 <UARTParseSetCommand+0x15a>
			if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
1a005702:	4b63      	ldr	r3, [pc, #396]	; (1a005890 <UARTParseSetCommand+0x2c8>)
1a005704:	681b      	ldr	r3, [r3, #0]
1a005706:	2b00      	cmp	r3, #0
1a005708:	d106      	bne.n	1a005718 <UARTParseSetCommand+0x150>
1a00570a:	4b62      	ldr	r3, [pc, #392]	; (1a005894 <UARTParseSetCommand+0x2cc>)
1a00570c:	681b      	ldr	r3, [r3, #0]
1a00570e:	2b01      	cmp	r3, #1
1a005710:	d902      	bls.n	1a005718 <UARTParseSetCommand+0x150>
				xputs("-BF\n");
1a005712:	4861      	ldr	r0, [pc, #388]	; (1a005898 <UARTParseSetCommand+0x2d0>)
1a005714:	f001 f8a2 	bl	1a00685c <xputs>
			}
			DVS128BiasFlush(1);
1a005718:	2001      	movs	r0, #1
1a00571a:	f7fb f8a1 	bl	1a000860 <DVS128BiasFlush>
			return;
1a00571e:	f000 bd67 	b.w	1a0061f0 <UARTParseSetCommand+0xc28>
		}

		if ((commandLine[2] == 'D') || (commandLine[2] == 'd')) {				// load and flush default bias set
1a005722:	4b57      	ldr	r3, [pc, #348]	; (1a005880 <UARTParseSetCommand+0x2b8>)
1a005724:	789b      	ldrb	r3, [r3, #2]
1a005726:	2b44      	cmp	r3, #68	; 0x44
1a005728:	d003      	beq.n	1a005732 <UARTParseSetCommand+0x16a>
1a00572a:	4b55      	ldr	r3, [pc, #340]	; (1a005880 <UARTParseSetCommand+0x2b8>)
1a00572c:	789b      	ldrb	r3, [r3, #2]
1a00572e:	2b64      	cmp	r3, #100	; 0x64
1a005730:	d125      	bne.n	1a00577e <UARTParseSetCommand+0x1b6>
			if ((commandLine[3] >= '0') && (commandLine[3] <= '5')) {
1a005732:	4b53      	ldr	r3, [pc, #332]	; (1a005880 <UARTParseSetCommand+0x2b8>)
1a005734:	78db      	ldrb	r3, [r3, #3]
1a005736:	2b2f      	cmp	r3, #47	; 0x2f
1a005738:	d91c      	bls.n	1a005774 <UARTParseSetCommand+0x1ac>
1a00573a:	4b51      	ldr	r3, [pc, #324]	; (1a005880 <UARTParseSetCommand+0x2b8>)
1a00573c:	78db      	ldrb	r3, [r3, #3]
1a00573e:	2b35      	cmp	r3, #53	; 0x35
1a005740:	d818      	bhi.n	1a005774 <UARTParseSetCommand+0x1ac>
				if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
1a005742:	4b53      	ldr	r3, [pc, #332]	; (1a005890 <UARTParseSetCommand+0x2c8>)
1a005744:	681b      	ldr	r3, [r3, #0]
1a005746:	2b00      	cmp	r3, #0
1a005748:	d109      	bne.n	1a00575e <UARTParseSetCommand+0x196>
1a00574a:	4b52      	ldr	r3, [pc, #328]	; (1a005894 <UARTParseSetCommand+0x2cc>)
1a00574c:	681b      	ldr	r3, [r3, #0]
1a00574e:	2b01      	cmp	r3, #1
1a005750:	d905      	bls.n	1a00575e <UARTParseSetCommand+0x196>
					xprintf("-BD%c\n", commandLine[3]);
1a005752:	4b4b      	ldr	r3, [pc, #300]	; (1a005880 <UARTParseSetCommand+0x2b8>)
1a005754:	78db      	ldrb	r3, [r3, #3]
1a005756:	4619      	mov	r1, r3
1a005758:	4850      	ldr	r0, [pc, #320]	; (1a00589c <UARTParseSetCommand+0x2d4>)
1a00575a:	f001 fa0f 	bl	1a006b7c <xprintf>
				}
				DVS128BiasLoadDefaultSet(commandLine[3] - '0');
1a00575e:	4b48      	ldr	r3, [pc, #288]	; (1a005880 <UARTParseSetCommand+0x2b8>)
1a005760:	78db      	ldrb	r3, [r3, #3]
1a005762:	3b30      	subs	r3, #48	; 0x30
1a005764:	4618      	mov	r0, r3
1a005766:	f7fa ff3d 	bl	1a0005e4 <DVS128BiasLoadDefaultSet>
				DVS128BiasFlush(1);
1a00576a:	2001      	movs	r0, #1
1a00576c:	f7fb f878 	bl	1a000860 <DVS128BiasFlush>
			} else {
				xputs("Select default bias set: parsing error\n");
			}
			return;
1a005770:	f000 bd3e 	b.w	1a0061f0 <UARTParseSetCommand+0xc28>
					xprintf("-BD%c\n", commandLine[3]);
				}
				DVS128BiasLoadDefaultSet(commandLine[3] - '0');
				DVS128BiasFlush(1);
			} else {
				xputs("Select default bias set: parsing error\n");
1a005774:	484a      	ldr	r0, [pc, #296]	; (1a0058a0 <UARTParseSetCommand+0x2d8>)
1a005776:	f001 f871 	bl	1a00685c <xputs>
			}
			return;
1a00577a:	f000 bd39 	b.w	1a0061f0 <UARTParseSetCommand+0xc28>
		}

		c = commandLine + 2;
1a00577e:	4b41      	ldr	r3, [pc, #260]	; (1a005884 <UARTParseSetCommand+0x2bc>)
1a005780:	63fb      	str	r3, [r7, #60]	; 0x3c
		biasID = parseUInt32(&c);
1a005782:	f107 033c 	add.w	r3, r7, #60	; 0x3c
1a005786:	4618      	mov	r0, r3
1a005788:	f7ff fd78 	bl	1a00527c <parseUInt32>
1a00578c:	4603      	mov	r3, r0
1a00578e:	66bb      	str	r3, [r7, #104]	; 0x68
		c++;
1a005790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1a005792:	3301      	adds	r3, #1
1a005794:	63fb      	str	r3, [r7, #60]	; 0x3c
		biasValue = parseUInt32(&c);
1a005796:	f107 033c 	add.w	r3, r7, #60	; 0x3c
1a00579a:	4618      	mov	r0, r3
1a00579c:	f7ff fd6e 	bl	1a00527c <parseUInt32>
1a0057a0:	4603      	mov	r3, r0
1a0057a2:	667b      	str	r3, [r7, #100]	; 0x64
		DVS128BiasSet(biasID, biasValue);
1a0057a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
1a0057a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
1a0057a8:	4611      	mov	r1, r2
1a0057aa:	4618      	mov	r0, r3
1a0057ac:	f7fa feee 	bl	1a00058c <DVS128BiasSet>
		if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
1a0057b0:	4b37      	ldr	r3, [pc, #220]	; (1a005890 <UARTParseSetCommand+0x2c8>)
1a0057b2:	681b      	ldr	r3, [r3, #0]
1a0057b4:	2b00      	cmp	r3, #0
1a0057b6:	f040 850a 	bne.w	1a0061ce <UARTParseSetCommand+0xc06>
1a0057ba:	4b36      	ldr	r3, [pc, #216]	; (1a005894 <UARTParseSetCommand+0x2cc>)
1a0057bc:	681b      	ldr	r3, [r3, #0]
1a0057be:	2b01      	cmp	r3, #1
1a0057c0:	f240 8505 	bls.w	1a0061ce <UARTParseSetCommand+0xc06>
			xprintf("-B%d=%d\n", biasID, DVS128BiasGet(biasID));
1a0057c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
1a0057c6:	4618      	mov	r0, r3
1a0057c8:	f7fa fef6 	bl	1a0005b8 <DVS128BiasGet>
1a0057cc:	4603      	mov	r3, r0
1a0057ce:	461a      	mov	r2, r3
1a0057d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
1a0057d2:	4834      	ldr	r0, [pc, #208]	; (1a0058a4 <UARTParseSetCommand+0x2dc>)
1a0057d4:	f001 f9d2 	bl	1a006b7c <xprintf>
		}
		return;
1a0057d8:	bf00      	nop
1a0057da:	f000 bcf8 	b.w	1a0061ce <UARTParseSetCommand+0xc06>
	}

	case 'E':
	case 'e': {
		unsigned char *c = commandLine + 2;
1a0057de:	4b29      	ldr	r3, [pc, #164]	; (1a005884 <UARTParseSetCommand+0x2bc>)
1a0057e0:	63bb      	str	r3, [r7, #56]	; 0x38
		if ((*c == 't') || (*c == 'T')) { // set new event time
1a0057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0057e4:	781b      	ldrb	r3, [r3, #0]
1a0057e6:	2b74      	cmp	r3, #116	; 0x74
1a0057e8:	d004      	beq.n	1a0057f4 <UARTParseSetCommand+0x22c>
1a0057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0057ec:	781b      	ldrb	r3, [r3, #0]
1a0057ee:	2b54      	cmp	r3, #84	; 0x54
1a0057f0:	f040 8105 	bne.w	1a0059fe <UARTParseSetCommand+0x436>
			c++;
1a0057f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0057f6:	3301      	adds	r3, #1
1a0057f8:	63bb      	str	r3, [r7, #56]	; 0x38
			if ((*c == 's') || (*c == 'S')) { // set to clk-slave (use external pin CAP1 instead of internal clock)
1a0057fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0057fc:	781b      	ldrb	r3, [r3, #0]
1a0057fe:	2b73      	cmp	r3, #115	; 0x73
1a005800:	d003      	beq.n	1a00580a <UARTParseSetCommand+0x242>
1a005802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a005804:	781b      	ldrb	r3, [r3, #0]
1a005806:	2b53      	cmp	r3, #83	; 0x53
1a005808:	d158      	bne.n	1a0058bc <UARTParseSetCommand+0x2f4>
				eDVSMode = EDVS_MODE_SLAVE;
1a00580a:	4b27      	ldr	r3, [pc, #156]	; (1a0058a8 <UARTParseSetCommand+0x2e0>)
1a00580c:	2203      	movs	r2, #3
1a00580e:	701a      	strb	r2, [r3, #0]
				Chip_TIMER_Disable(LPC_TIMER1); //   disable Timer/Counter 1
1a005810:	4826      	ldr	r0, [pc, #152]	; (1a0058ac <UARTParseSetCommand+0x2e4>)
1a005812:	f7ff f923 	bl	1a004a5c <Chip_TIMER_Disable>
				timerDelayUs(10); //Wait for any events that are being placed in the buffer
1a005816:	200a      	movs	r0, #10
1a005818:	f000 feb2 	bl	1a006580 <timerDelayUs>
				events.eventBufferReadPointer = events.eventBufferWritePointer; //clearing the buffer
1a00581c:	4b24      	ldr	r3, [pc, #144]	; (1a0058b0 <UARTParseSetCommand+0x2e8>)
1a00581e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
1a005822:	3304      	adds	r3, #4
1a005824:	681a      	ldr	r2, [r3, #0]
1a005826:	4b22      	ldr	r3, [pc, #136]	; (1a0058b0 <UARTParseSetCommand+0x2e8>)
1a005828:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
1a00582c:	3308      	adds	r3, #8
1a00582e:	601a      	str	r2, [r3, #0]
				Chip_TIMER_PrescaleSet(LPC_TIMER1, 0);	// prescaler: run at 192Mhz to check for input
1a005830:	2100      	movs	r1, #0
1a005832:	481e      	ldr	r0, [pc, #120]	; (1a0058ac <UARTParseSetCommand+0x2e4>)
1a005834:	f7ff f922 	bl	1a004a7c <Chip_TIMER_PrescaleSet>
				Chip_SCU_PinMuxSet(SYNCHRONIZATION_PORT, SYNCHRONIZATION_PIN, SCU_PINIO_FAST | FUNC3);
1a005838:	22f3      	movs	r2, #243	; 0xf3
1a00583a:	2104      	movs	r1, #4
1a00583c:	2002      	movs	r0, #2
1a00583e:	f7ff f85d 	bl	1a0048fc <Chip_SCU_PinMuxSet>
				//Select the capture input pin in the Global Input Multiplexer Array
				LPC_GIMA->CAP0_IN[1][0] = (uint32_t) (0x0 << 4);
1a005842:	4b1c      	ldr	r3, [pc, #112]	; (1a0058b4 <UARTParseSetCommand+0x2ec>)
1a005844:	2200      	movs	r2, #0
1a005846:	611a      	str	r2, [r3, #16]

				Chip_TIMER_CaptureRisingEdgeEnable(LPC_TIMER1, SYNCHRONIZATION_CHANNEL);
1a005848:	2100      	movs	r1, #0
1a00584a:	4818      	ldr	r0, [pc, #96]	; (1a0058ac <UARTParseSetCommand+0x2e4>)
1a00584c:	f7ff f98c 	bl	1a004b68 <Chip_TIMER_CaptureRisingEdgeEnable>
				Chip_TIMER_CaptureFallingEdgeEnable(LPC_TIMER1, SYNCHRONIZATION_CHANNEL);
1a005850:	2100      	movs	r1, #0
1a005852:	4816      	ldr	r0, [pc, #88]	; (1a0058ac <UARTParseSetCommand+0x2e4>)
1a005854:	f7ff f9a2 	bl	1a004b9c <Chip_TIMER_CaptureFallingEdgeEnable>
				Chip_TIMER_CaptureDisableInt(LPC_TIMER1, SYNCHRONIZATION_CHANNEL);
1a005858:	2100      	movs	r1, #0
1a00585a:	4814      	ldr	r0, [pc, #80]	; (1a0058ac <UARTParseSetCommand+0x2e4>)
1a00585c:	f7ff f9ba 	bl	1a004bd4 <Chip_TIMER_CaptureDisableInt>
				Chip_TIMER_TIMER_SetCountClockSrc(LPC_TIMER1, TIMER_CAPSRC_BOTH_CAPN, SYNCHRONIZATION_CHANNEL);
1a005860:	2200      	movs	r2, #0
1a005862:	2103      	movs	r1, #3
1a005864:	4811      	ldr	r0, [pc, #68]	; (1a0058ac <UARTParseSetCommand+0x2e4>)
1a005866:	f7ff f9d1 	bl	1a004c0c <Chip_TIMER_TIMER_SetCountClockSrc>
				Chip_TIMER_Reset(LPC_TIMER1);
1a00586a:	4810      	ldr	r0, [pc, #64]	; (1a0058ac <UARTParseSetCommand+0x2e4>)
1a00586c:	f00d fd2c 	bl	1a0132c8 <Chip_TIMER_Reset>
				Chip_TIMER_Enable(LPC_TIMER1);
1a005870:	480e      	ldr	r0, [pc, #56]	; (1a0058ac <UARTParseSetCommand+0x2e4>)
1a005872:	f7ff f8e3 	bl	1a004a3c <Chip_TIMER_Enable>
				xputs("-ETS\n");
1a005876:	4810      	ldr	r0, [pc, #64]	; (1a0058b8 <UARTParseSetCommand+0x2f0>)
1a005878:	f000 fff0 	bl	1a00685c <xputs>
				return;
1a00587c:	f000 bcb8 	b.w	1a0061f0 <UARTParseSetCommand+0xc28>
1a005880:	1008887c 	.word	0x1008887c
1a005884:	1008887e 	.word	0x1008887e
1a005888:	1a0199f8 	.word	0x1a0199f8
1a00588c:	400e1000 	.word	0x400e1000
1a005890:	10087444 	.word	0x10087444
1a005894:	10088878 	.word	0x10088878
1a005898:	1a019a24 	.word	0x1a019a24
1a00589c:	1a019a2c 	.word	0x1a019a2c
1a0058a0:	1a019a34 	.word	0x1a019a34
1a0058a4:	1a01998c 	.word	0x1a01998c
1a0058a8:	10086518 	.word	0x10086518
1a0058ac:	40085000 	.word	0x40085000
1a0058b0:	10080000 	.word	0x10080000
1a0058b4:	400c7000 	.word	0x400c7000
1a0058b8:	1a019a5c 	.word	0x1a019a5c
			} else if ((*c == 'm') || (*c == 'M')) { // enable PWM2 (P0.7) to serve as clock for others
1a0058bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0058be:	781b      	ldrb	r3, [r3, #0]
1a0058c0:	2b6d      	cmp	r3, #109	; 0x6d
1a0058c2:	d003      	beq.n	1a0058cc <UARTParseSetCommand+0x304>
1a0058c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0058c6:	781b      	ldrb	r3, [r3, #0]
1a0058c8:	2b4d      	cmp	r3, #77	; 0x4d
1a0058ca:	d166      	bne.n	1a00599a <UARTParseSetCommand+0x3d2>
				c++;
1a0058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0058ce:	3301      	adds	r3, #1
1a0058d0:	63bb      	str	r3, [r7, #56]	; 0x38
				if (*c == '0') {
1a0058d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0058d4:	781b      	ldrb	r3, [r3, #0]
1a0058d6:	2b30      	cmp	r3, #48	; 0x30
1a0058d8:	d130      	bne.n	1a00593c <UARTParseSetCommand+0x374>
					eDVSMode = EDVS_MODE_MASTER_ARMED;
1a0058da:	4b99      	ldr	r3, [pc, #612]	; (1a005b40 <UARTParseSetCommand+0x578>)
1a0058dc:	2201      	movs	r2, #1
1a0058de:	701a      	strb	r2, [r3, #0]
					Chip_TIMER_Init(LPC_TIMER3);
1a0058e0:	4898      	ldr	r0, [pc, #608]	; (1a005b44 <UARTParseSetCommand+0x57c>)
1a0058e2:	f00d fcd1 	bl	1a013288 <Chip_TIMER_Init>
					Chip_TIMER_PrescaleSet(LPC_TIMER3, 95); //192/(95+1)=2 Mhz
1a0058e6:	215f      	movs	r1, #95	; 0x5f
1a0058e8:	4896      	ldr	r0, [pc, #600]	; (1a005b44 <UARTParseSetCommand+0x57c>)
1a0058ea:	f7ff f8c7 	bl	1a004a7c <Chip_TIMER_PrescaleSet>
					Chip_TIMER_ResetOnMatchEnable(LPC_TIMER3, 1);
1a0058ee:	2101      	movs	r1, #1
1a0058f0:	4894      	ldr	r0, [pc, #592]	; (1a005b44 <UARTParseSetCommand+0x57c>)
1a0058f2:	f7ff f901 	bl	1a004af8 <Chip_TIMER_ResetOnMatchEnable>
					Chip_TIMER_StopOnMatchDisable(LPC_TIMER3, 1);
1a0058f6:	2101      	movs	r1, #1
1a0058f8:	4892      	ldr	r0, [pc, #584]	; (1a005b44 <UARTParseSetCommand+0x57c>)
1a0058fa:	f7ff f919 	bl	1a004b30 <Chip_TIMER_StopOnMatchDisable>
					Chip_TIMER_MatchDisableInt(LPC_TIMER3, 1);
1a0058fe:	2101      	movs	r1, #1
1a005900:	4890      	ldr	r0, [pc, #576]	; (1a005b44 <UARTParseSetCommand+0x57c>)
1a005902:	f7ff f8dd 	bl	1a004ac0 <Chip_TIMER_MatchDisableInt>
					Chip_TIMER_SetMatch(LPC_TIMER3, 1, 1); // enable this output channel
1a005906:	2201      	movs	r2, #1
1a005908:	2101      	movs	r1, #1
1a00590a:	488e      	ldr	r0, [pc, #568]	; (1a005b44 <UARTParseSetCommand+0x57c>)
1a00590c:	f7ff f8c4 	bl	1a004a98 <Chip_TIMER_SetMatch>
					Chip_TIMER_ExtMatchControlSet(LPC_TIMER3, 0, TIMER_EXTMATCH_CLEAR, 1);
1a005910:	2301      	movs	r3, #1
1a005912:	2201      	movs	r2, #1
1a005914:	2100      	movs	r1, #0
1a005916:	488b      	ldr	r0, [pc, #556]	; (1a005b44 <UARTParseSetCommand+0x57c>)
1a005918:	f00d fcf4 	bl	1a013304 <Chip_TIMER_ExtMatchControlSet>
					Chip_SCU_PinMuxSet(SYNCHRONIZATION_PORT, SYNCHRONIZATION_PIN, SCU_PINIO_FAST | FUNC6);
1a00591c:	22f6      	movs	r2, #246	; 0xf6
1a00591e:	2104      	movs	r1, #4
1a005920:	2002      	movs	r0, #2
1a005922:	f7fe ffeb 	bl	1a0048fc <Chip_SCU_PinMuxSet>
					Chip_TIMER_Enable(LPC_TIMER3);
1a005926:	4887      	ldr	r0, [pc, #540]	; (1a005b44 <UARTParseSetCommand+0x57c>)
1a005928:	f7ff f888 	bl	1a004a3c <Chip_TIMER_Enable>
					Chip_TIMER_Enable(LPC_TIMER1); // Restart capturing
1a00592c:	4886      	ldr	r0, [pc, #536]	; (1a005b48 <UARTParseSetCommand+0x580>)
1a00592e:	f7ff f885 	bl	1a004a3c <Chip_TIMER_Enable>
					xputs("-ETM0\n");
1a005932:	4886      	ldr	r0, [pc, #536]	; (1a005b4c <UARTParseSetCommand+0x584>)
1a005934:	f000 ff92 	bl	1a00685c <xputs>
					Chip_TIMER_Reset(LPC_TIMER1);
					Chip_TIMER_Enable(LPC_TIMER3); //Starts the clock out
					Chip_TIMER_Enable(LPC_TIMER1); // Restart capturing
					xputs("-ETM+\n");
				}
				return;
1a005938:	f000 bc5a 	b.w	1a0061f0 <UARTParseSetCommand+0xc28>
					Chip_SCU_PinMuxSet(SYNCHRONIZATION_PORT, SYNCHRONIZATION_PIN, SCU_PINIO_FAST | FUNC6);
					Chip_TIMER_Enable(LPC_TIMER3);
					Chip_TIMER_Enable(LPC_TIMER1); // Restart capturing
					xputs("-ETM0\n");
				} else {
					eDVSMode = EDVS_MODE_MASTER_RUNNING;
1a00593c:	4b80      	ldr	r3, [pc, #512]	; (1a005b40 <UARTParseSetCommand+0x578>)
1a00593e:	2202      	movs	r2, #2
1a005940:	701a      	strb	r2, [r3, #0]
					Chip_TIMER_Disable(LPC_TIMER3);
1a005942:	4880      	ldr	r0, [pc, #512]	; (1a005b44 <UARTParseSetCommand+0x57c>)
1a005944:	f7ff f88a 	bl	1a004a5c <Chip_TIMER_Disable>
					Chip_TIMER_ExtMatchControlSet(LPC_TIMER3, 0, TIMER_EXTMATCH_TOGGLE, 1);
1a005948:	2301      	movs	r3, #1
1a00594a:	2203      	movs	r2, #3
1a00594c:	2100      	movs	r1, #0
1a00594e:	487d      	ldr	r0, [pc, #500]	; (1a005b44 <UARTParseSetCommand+0x57c>)
1a005950:	f00d fcd8 	bl	1a013304 <Chip_TIMER_ExtMatchControlSet>
					Chip_SCU_PinMuxSet(SYNCHRONIZATION_PORT, SYNCHRONIZATION_PIN, SCU_PINIO_FAST | FUNC6);
1a005954:	22f6      	movs	r2, #246	; 0xf6
1a005956:	2104      	movs	r1, #4
1a005958:	2002      	movs	r0, #2
1a00595a:	f7fe ffcf 	bl	1a0048fc <Chip_SCU_PinMuxSet>
					Chip_TIMER_Disable(LPC_TIMER1); //   disable Timer/Counter 1
1a00595e:	487a      	ldr	r0, [pc, #488]	; (1a005b48 <UARTParseSetCommand+0x580>)
1a005960:	f7ff f87c 	bl	1a004a5c <Chip_TIMER_Disable>
					timerDelayUs(10); //Wait for any events that are being placed in the buffer
1a005964:	200a      	movs	r0, #10
1a005966:	f000 fe0b 	bl	1a006580 <timerDelayUs>
					events.eventBufferReadPointer = events.eventBufferWritePointer;
1a00596a:	4b79      	ldr	r3, [pc, #484]	; (1a005b50 <UARTParseSetCommand+0x588>)
1a00596c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
1a005970:	3304      	adds	r3, #4
1a005972:	681a      	ldr	r2, [r3, #0]
1a005974:	4b76      	ldr	r3, [pc, #472]	; (1a005b50 <UARTParseSetCommand+0x588>)
1a005976:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
1a00597a:	3308      	adds	r3, #8
1a00597c:	601a      	str	r2, [r3, #0]
					Chip_TIMER_Reset(LPC_TIMER1);
1a00597e:	4872      	ldr	r0, [pc, #456]	; (1a005b48 <UARTParseSetCommand+0x580>)
1a005980:	f00d fca2 	bl	1a0132c8 <Chip_TIMER_Reset>
					Chip_TIMER_Enable(LPC_TIMER3); //Starts the clock out
1a005984:	486f      	ldr	r0, [pc, #444]	; (1a005b44 <UARTParseSetCommand+0x57c>)
1a005986:	f7ff f859 	bl	1a004a3c <Chip_TIMER_Enable>
					Chip_TIMER_Enable(LPC_TIMER1); // Restart capturing
1a00598a:	486f      	ldr	r0, [pc, #444]	; (1a005b48 <UARTParseSetCommand+0x580>)
1a00598c:	f7ff f856 	bl	1a004a3c <Chip_TIMER_Enable>
					xputs("-ETM+\n");
1a005990:	4870      	ldr	r0, [pc, #448]	; (1a005b54 <UARTParseSetCommand+0x58c>)
1a005992:	f000 ff63 	bl	1a00685c <xputs>
				}
				return;
1a005996:	f000 bc2b 	b.w	1a0061f0 <UARTParseSetCommand+0xc28>
			} else if ((*c == 'i') || (*c == 'I')) {
1a00599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a00599c:	781b      	ldrb	r3, [r3, #0]
1a00599e:	2b69      	cmp	r3, #105	; 0x69
1a0059a0:	d003      	beq.n	1a0059aa <UARTParseSetCommand+0x3e2>
1a0059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0059a4:	781b      	ldrb	r3, [r3, #0]
1a0059a6:	2b49      	cmp	r3, #73	; 0x49
1a0059a8:	d11d      	bne.n	1a0059e6 <UARTParseSetCommand+0x41e>
				//Returning to retina mode.
				switch (eDVSMode) {
1a0059aa:	4b65      	ldr	r3, [pc, #404]	; (1a005b40 <UARTParseSetCommand+0x578>)
1a0059ac:	781b      	ldrb	r3, [r3, #0]
1a0059ae:	2b01      	cmp	r3, #1
1a0059b0:	db13      	blt.n	1a0059da <UARTParseSetCommand+0x412>
1a0059b2:	2b02      	cmp	r3, #2
1a0059b4:	dd0a      	ble.n	1a0059cc <UARTParseSetCommand+0x404>
1a0059b6:	2b03      	cmp	r3, #3
1a0059b8:	d000      	beq.n	1a0059bc <UARTParseSetCommand+0x3f4>
				case EDVS_MODE_MASTER_RUNNING:
					eDVSMode = EDVS_MODE_INTERNAL;
					PWMSetPeriod(0, 0); //calling this function will reset Timer3 normal operation
				case EDVS_MODE_INTERNAL: //do nothing
				default:
					break;
1a0059ba:	e00e      	b.n	1a0059da <UARTParseSetCommand+0x412>
				return;
			} else if ((*c == 'i') || (*c == 'I')) {
				//Returning to retina mode.
				switch (eDVSMode) {
				case EDVS_MODE_SLAVE:
					Chip_RGU_TriggerReset(RGU_TIMER1_RST); // reset timer 1
1a0059bc:	2021      	movs	r0, #33	; 0x21
1a0059be:	f00d fac5 	bl	1a012f4c <Chip_RGU_TriggerReset>
					Chip_TIMER_DeInit(LPC_TIMER1);
1a0059c2:	4861      	ldr	r0, [pc, #388]	; (1a005b48 <UARTParseSetCommand+0x580>)
1a0059c4:	f00d fc70 	bl	1a0132a8 <Chip_TIMER_DeInit>
					DVS128InitTimer();
1a0059c8:	f7fa fdae 	bl	1a000528 <DVS128InitTimer>
					/* Fall-through*/
				case EDVS_MODE_MASTER_ARMED:
				case EDVS_MODE_MASTER_RUNNING:
					eDVSMode = EDVS_MODE_INTERNAL;
1a0059cc:	4b5c      	ldr	r3, [pc, #368]	; (1a005b40 <UARTParseSetCommand+0x578>)
1a0059ce:	2200      	movs	r2, #0
1a0059d0:	701a      	strb	r2, [r3, #0]
					PWMSetPeriod(0, 0); //calling this function will reset Timer3 normal operation
1a0059d2:	2100      	movs	r1, #0
1a0059d4:	2000      	movs	r0, #0
1a0059d6:	f7fd fe77 	bl	1a0036c8 <PWMSetPeriod>
				case EDVS_MODE_INTERNAL: //do nothing
				default:
					break;
1a0059da:	bf00      	nop
				}
				xputs("-ETI\n");
1a0059dc:	485e      	ldr	r0, [pc, #376]	; (1a005b58 <UARTParseSetCommand+0x590>)
1a0059de:	f000 ff3d 	bl	1a00685c <xputs>
				return;
1a0059e2:	f000 bc05 	b.w	1a0061f0 <UARTParseSetCommand+0xc28>
			} else {
				c++;
1a0059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0059e8:	3301      	adds	r3, #1
1a0059ea:	63bb      	str	r3, [r7, #56]	; 0x38
				LPC_TIMER1->TC = parseUInt32(&c);
1a0059ec:	4c56      	ldr	r4, [pc, #344]	; (1a005b48 <UARTParseSetCommand+0x580>)
1a0059ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
1a0059f2:	4618      	mov	r0, r3
1a0059f4:	f7ff fc42 	bl	1a00527c <parseUInt32>
1a0059f8:	4603      	mov	r3, r0
1a0059fa:	60a3      	str	r3, [r4, #8]
				return;
1a0059fc:	e3f8      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
			} else {
				break;
			}
		}
#endif
		if ((*c >= '0') && (*c <= '4')) {
1a0059fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a005a00:	781b      	ldrb	r3, [r3, #0]
1a005a02:	2b2f      	cmp	r3, #47	; 0x2f
1a005a04:	d91b      	bls.n	1a005a3e <UARTParseSetCommand+0x476>
1a005a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a005a08:	781b      	ldrb	r3, [r3, #0]
1a005a0a:	2b34      	cmp	r3, #52	; 0x34
1a005a0c:	d817      	bhi.n	1a005a3e <UARTParseSetCommand+0x476>
			eDVSDataFormat = ((*c) - '0');
1a005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a005a10:	781b      	ldrb	r3, [r3, #0]
1a005a12:	3b30      	subs	r3, #48	; 0x30
1a005a14:	461a      	mov	r2, r3
1a005a16:	4b51      	ldr	r3, [pc, #324]	; (1a005b5c <UARTParseSetCommand+0x594>)
1a005a18:	601a      	str	r2, [r3, #0]
			if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
1a005a1a:	4b51      	ldr	r3, [pc, #324]	; (1a005b60 <UARTParseSetCommand+0x598>)
1a005a1c:	681b      	ldr	r3, [r3, #0]
1a005a1e:	2b00      	cmp	r3, #0
1a005a20:	f040 83d7 	bne.w	1a0061d2 <UARTParseSetCommand+0xc0a>
1a005a24:	4b4f      	ldr	r3, [pc, #316]	; (1a005b64 <UARTParseSetCommand+0x59c>)
1a005a26:	681b      	ldr	r3, [r3, #0]
1a005a28:	2b01      	cmp	r3, #1
1a005a2a:	f240 83d2 	bls.w	1a0061d2 <UARTParseSetCommand+0xc0a>
				xprintf("-E%d\n", eDVSDataFormat);
1a005a2e:	4b4b      	ldr	r3, [pc, #300]	; (1a005b5c <UARTParseSetCommand+0x594>)
1a005a30:	681b      	ldr	r3, [r3, #0]
1a005a32:	4619      	mov	r1, r3
1a005a34:	484c      	ldr	r0, [pc, #304]	; (1a005b68 <UARTParseSetCommand+0x5a0>)
1a005a36:	f001 f8a1 	bl	1a006b7c <xprintf>
			}
			return;
1a005a3a:	bf00      	nop
1a005a3c:	e3c9      	b.n	1a0061d2 <UARTParseSetCommand+0xc0a>
		}
	}

	case 'L':
	case 'l': {
		unsigned char *c = commandLine + 2;
1a005a3e:	4b4b      	ldr	r3, [pc, #300]	; (1a005b6c <UARTParseSetCommand+0x5a4>)
1a005a40:	663b      	str	r3, [r7, #96]	; 0x60
		if (*c == '0') {
1a005a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
1a005a44:	781b      	ldrb	r3, [r3, #0]
1a005a46:	2b30      	cmp	r3, #48	; 0x30
1a005a48:	d105      	bne.n	1a005a56 <UARTParseSetCommand+0x48e>
			LED0SetBlinking(DISABLE);
1a005a4a:	2000      	movs	r0, #0
1a005a4c:	f7ff f92c 	bl	1a004ca8 <LED0SetBlinking>
			LED0SetOff();
1a005a50:	f7ff f912 	bl	1a004c78 <LED0SetOff>
			return;
1a005a54:	e3cc      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
		} else if (*c == '1') {
1a005a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
1a005a58:	781b      	ldrb	r3, [r3, #0]
1a005a5a:	2b31      	cmp	r3, #49	; 0x31
1a005a5c:	d105      	bne.n	1a005a6a <UARTParseSetCommand+0x4a2>
			LED0SetBlinking(DISABLE);
1a005a5e:	2000      	movs	r0, #0
1a005a60:	f7ff f922 	bl	1a004ca8 <LED0SetBlinking>
			LED0SetOn();
1a005a64:	f7ff f914 	bl	1a004c90 <LED0SetOn>
			return;
1a005a68:	e3c2      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
		} else if (*c == '2') {
1a005a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
1a005a6c:	781b      	ldrb	r3, [r3, #0]
1a005a6e:	2b32      	cmp	r3, #50	; 0x32
1a005a70:	d103      	bne.n	1a005a7a <UARTParseSetCommand+0x4b2>
			LED0SetBlinking(ENABLE);
1a005a72:	2001      	movs	r0, #1
1a005a74:	f7ff f918 	bl	1a004ca8 <LED0SetBlinking>
			return;
1a005a78:	e3ba      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
		}
		xputs("Set: parsing error\n");
1a005a7a:	483d      	ldr	r0, [pc, #244]	; (1a005b70 <UARTParseSetCommand+0x5a8>)
1a005a7c:	f000 feee 	bl	1a00685c <xputs>
		return;
1a005a80:	e3b6      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
	}

	case 'M':
	case 'm': {
		unsigned char *c = commandLine + 2;
1a005a82:	4b3a      	ldr	r3, [pc, #232]	; (1a005b6c <UARTParseSetCommand+0x5a4>)
1a005a84:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t motorId = 0;
1a005a86:	2300      	movs	r3, #0
1a005a88:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (*c == '+') {
1a005a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005a8c:	781b      	ldrb	r3, [r3, #0]
1a005a8e:	2b2b      	cmp	r3, #43	; 0x2b
1a005a90:	d103      	bne.n	1a005a9a <UARTParseSetCommand+0x4d2>
			enableMotorDriver(TRUE);
1a005a92:	2001      	movs	r0, #1
1a005a94:	f7fc fb72 	bl	1a00217c <enableMotorDriver>
			return;
1a005a98:	e3aa      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
		} else if (*c == '-') {
1a005a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005a9c:	781b      	ldrb	r3, [r3, #0]
1a005a9e:	2b2d      	cmp	r3, #45	; 0x2d
1a005aa0:	d103      	bne.n	1a005aaa <UARTParseSetCommand+0x4e2>
			enableMotorDriver(FALSE);
1a005aa2:	2000      	movs	r0, #0
1a005aa4:	f7fc fb6a 	bl	1a00217c <enableMotorDriver>
			return;
1a005aa8:	e3a2      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
		}
		if ((*c == 'D') || (*c == 'd')) {
1a005aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005aac:	781b      	ldrb	r3, [r3, #0]
1a005aae:	2b44      	cmp	r3, #68	; 0x44
1a005ab0:	d003      	beq.n	1a005aba <UARTParseSetCommand+0x4f2>
1a005ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005ab4:	781b      	ldrb	r3, [r3, #0]
1a005ab6:	2b64      	cmp	r3, #100	; 0x64
1a005ab8:	d160      	bne.n	1a005b7c <UARTParseSetCommand+0x5b4>
			c++;
1a005aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005abc:	3301      	adds	r3, #1
1a005abe:	637b      	str	r3, [r7, #52]	; 0x34
			if (!isdigit(*c)) {
1a005ac0:	4b2c      	ldr	r3, [pc, #176]	; (1a005b74 <UARTParseSetCommand+0x5ac>)
1a005ac2:	681a      	ldr	r2, [r3, #0]
1a005ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005ac6:	781b      	ldrb	r3, [r3, #0]
1a005ac8:	3301      	adds	r3, #1
1a005aca:	4413      	add	r3, r2
1a005acc:	781b      	ldrb	r3, [r3, #0]
1a005ace:	f003 0304 	and.w	r3, r3, #4
1a005ad2:	2b00      	cmp	r3, #0
1a005ad4:	f000 8339 	beq.w	1a00614a <UARTParseSetCommand+0xb82>
				break;
			}
			motorId = parseUInt32(&c);
1a005ad8:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005adc:	4618      	mov	r0, r3
1a005ade:	f7ff fbcd 	bl	1a00527c <parseUInt32>
1a005ae2:	65f8      	str	r0, [r7, #92]	; 0x5c
			c++;
1a005ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005ae6:	3301      	adds	r3, #1
1a005ae8:	637b      	str	r3, [r7, #52]	; 0x34
			if (*c == '%') {
1a005aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005aec:	781b      	ldrb	r3, [r3, #0]
1a005aee:	2b25      	cmp	r3, #37	; 0x25
1a005af0:	d114      	bne.n	1a005b1c <UARTParseSetCommand+0x554>
				c++;
1a005af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005af4:	3301      	adds	r3, #1
1a005af6:	637b      	str	r3, [r7, #52]	; 0x34
				if (updateMotorDutyCycleDecay(motorId, parseInt32(&c))) {
1a005af8:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005afc:	4618      	mov	r0, r3
1a005afe:	f7ff fbe9 	bl	1a0052d4 <parseInt32>
1a005b02:	4603      	mov	r3, r0
1a005b04:	4619      	mov	r1, r3
1a005b06:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005b08:	f7fc f910 	bl	1a001d2c <updateMotorDutyCycleDecay>
1a005b0c:	4603      	mov	r3, r0
1a005b0e:	2b00      	cmp	r3, #0
1a005b10:	f000 8361 	beq.w	1a0061d6 <UARTParseSetCommand+0xc0e>
					xputs("Error setting motor speed\n");
1a005b14:	4818      	ldr	r0, [pc, #96]	; (1a005b78 <UARTParseSetCommand+0x5b0>)
1a005b16:	f000 fea1 	bl	1a00685c <xputs>
					return;
1a005b1a:	e369      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
				}
			} else {
				if (updateMotorWidthUsDecay(motorId, parseInt32(&c))) {
1a005b1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005b20:	4618      	mov	r0, r3
1a005b22:	f7ff fbd7 	bl	1a0052d4 <parseInt32>
1a005b26:	4603      	mov	r3, r0
1a005b28:	4619      	mov	r1, r3
1a005b2a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005b2c:	f7fc f946 	bl	1a001dbc <updateMotorWidthUsDecay>
1a005b30:	4603      	mov	r3, r0
1a005b32:	2b00      	cmp	r3, #0
1a005b34:	f000 834f 	beq.w	1a0061d6 <UARTParseSetCommand+0xc0e>
					xputs("Error setting motor speed\n");
1a005b38:	480f      	ldr	r0, [pc, #60]	; (1a005b78 <UARTParseSetCommand+0x5b0>)
1a005b3a:	f000 fe8f 	bl	1a00685c <xputs>
					return;
1a005b3e:	e357      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
1a005b40:	10086518 	.word	0x10086518
1a005b44:	400c4000 	.word	0x400c4000
1a005b48:	40085000 	.word	0x40085000
1a005b4c:	1a019a64 	.word	0x1a019a64
1a005b50:	10080000 	.word	0x10080000
1a005b54:	1a019a6c 	.word	0x1a019a6c
1a005b58:	1a019a74 	.word	0x1a019a74
1a005b5c:	1008651c 	.word	0x1008651c
1a005b60:	10087444 	.word	0x10087444
1a005b64:	10088878 	.word	0x10088878
1a005b68:	1a019998 	.word	0x1a019998
1a005b6c:	1008887e 	.word	0x1008887e
1a005b70:	1a019a7c 	.word	0x1a019a7c
1a005b74:	100860b0 	.word	0x100860b0
1a005b78:	1a019a90 	.word	0x1a019a90

			}
			return;
		}
#if USE_PUSHBOT
		if ((*c == 'C') || (*c == 'c')) {
1a005b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005b7e:	781b      	ldrb	r3, [r3, #0]
1a005b80:	2b43      	cmp	r3, #67	; 0x43
1a005b82:	d003      	beq.n	1a005b8c <UARTParseSetCommand+0x5c4>
1a005b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005b86:	781b      	ldrb	r3, [r3, #0]
1a005b88:	2b63      	cmp	r3, #99	; 0x63
1a005b8a:	d14c      	bne.n	1a005c26 <UARTParseSetCommand+0x65e>
			c++;
1a005b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005b8e:	3301      	adds	r3, #1
1a005b90:	637b      	str	r3, [r7, #52]	; 0x34
			if (!isdigit(*c)) {
1a005b92:	4ba3      	ldr	r3, [pc, #652]	; (1a005e20 <UARTParseSetCommand+0x858>)
1a005b94:	681a      	ldr	r2, [r3, #0]
1a005b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005b98:	781b      	ldrb	r3, [r3, #0]
1a005b9a:	3301      	adds	r3, #1
1a005b9c:	4413      	add	r3, r2
1a005b9e:	781b      	ldrb	r3, [r3, #0]
1a005ba0:	f003 0304 	and.w	r3, r3, #4
1a005ba4:	2b00      	cmp	r3, #0
1a005ba6:	f000 82d2 	beq.w	1a00614e <UARTParseSetCommand+0xb86>
				break;
			}
			motorId = parseUInt32(&c);
1a005baa:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005bae:	4618      	mov	r0, r3
1a005bb0:	f7ff fb64 	bl	1a00527c <parseUInt32>
1a005bb4:	65f8      	str	r0, [r7, #92]	; 0x5c
			if (*c == '=') {
1a005bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005bb8:	781b      	ldrb	r3, [r3, #0]
1a005bba:	2b3d      	cmp	r3, #61	; 0x3d
1a005bbc:	f040 82c9 	bne.w	1a006152 <UARTParseSetCommand+0xb8a>
				c++;
1a005bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005bc2:	3301      	adds	r3, #1
1a005bc4:	637b      	str	r3, [r7, #52]	; 0x34
			} else {
				break;
			}
			int32_t pGain = parseInt32(&c);
1a005bc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005bca:	4618      	mov	r0, r3
1a005bcc:	f7ff fb82 	bl	1a0052d4 <parseInt32>
1a005bd0:	65b8      	str	r0, [r7, #88]	; 0x58
			if (*c == ',') {
1a005bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005bd4:	781b      	ldrb	r3, [r3, #0]
1a005bd6:	2b2c      	cmp	r3, #44	; 0x2c
1a005bd8:	f040 82bd 	bne.w	1a006156 <UARTParseSetCommand+0xb8e>
				c++;
1a005bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005bde:	3301      	adds	r3, #1
1a005be0:	637b      	str	r3, [r7, #52]	; 0x34
			} else {
				break;
			}
			int32_t iGain = parseInt32(&c);
1a005be2:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005be6:	4618      	mov	r0, r3
1a005be8:	f7ff fb74 	bl	1a0052d4 <parseInt32>
1a005bec:	6578      	str	r0, [r7, #84]	; 0x54
			if (*c == ',') {
1a005bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005bf0:	781b      	ldrb	r3, [r3, #0]
1a005bf2:	2b2c      	cmp	r3, #44	; 0x2c
1a005bf4:	f040 82b1 	bne.w	1a00615a <UARTParseSetCommand+0xb92>
				c++;
1a005bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005bfa:	3301      	adds	r3, #1
1a005bfc:	637b      	str	r3, [r7, #52]	; 0x34
			} else {
				break;
			}
			int32_t dGain = parseInt32(&c);
1a005bfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005c02:	4618      	mov	r0, r3
1a005c04:	f7ff fb66 	bl	1a0052d4 <parseInt32>
1a005c08:	6538      	str	r0, [r7, #80]	; 0x50
			if (updateMotorPID(motorId, pGain, iGain, dGain)) {
1a005c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a005c0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
1a005c0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
1a005c10:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005c12:	f7fb fee5 	bl	1a0019e0 <updateMotorPID>
1a005c16:	4603      	mov	r3, r0
1a005c18:	2b00      	cmp	r3, #0
1a005c1a:	f000 82de 	beq.w	1a0061da <UARTParseSetCommand+0xc12>
				xputs("Error setting controller PID\n");
1a005c1e:	4881      	ldr	r0, [pc, #516]	; (1a005e24 <UARTParseSetCommand+0x85c>)
1a005c20:	f000 fe1c 	bl	1a00685c <xputs>
			}
			return;
1a005c24:	e2d9      	b.n	1a0061da <UARTParseSetCommand+0xc12>
		}
		if ((*c == 'V') || (*c == 'v')) {
1a005c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005c28:	781b      	ldrb	r3, [r3, #0]
1a005c2a:	2b56      	cmp	r3, #86	; 0x56
1a005c2c:	d003      	beq.n	1a005c36 <UARTParseSetCommand+0x66e>
1a005c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005c30:	781b      	ldrb	r3, [r3, #0]
1a005c32:	2b76      	cmp	r3, #118	; 0x76
1a005c34:	d15b      	bne.n	1a005cee <UARTParseSetCommand+0x726>
			c++;
1a005c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005c38:	3301      	adds	r3, #1
1a005c3a:	637b      	str	r3, [r7, #52]	; 0x34
			if ((*c == 'D') || (*c == 'd')) {
1a005c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005c3e:	781b      	ldrb	r3, [r3, #0]
1a005c40:	2b44      	cmp	r3, #68	; 0x44
1a005c42:	d003      	beq.n	1a005c4c <UARTParseSetCommand+0x684>
1a005c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005c46:	781b      	ldrb	r3, [r3, #0]
1a005c48:	2b64      	cmp	r3, #100	; 0x64
1a005c4a:	d129      	bne.n	1a005ca0 <UARTParseSetCommand+0x6d8>
				c++;
1a005c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005c4e:	3301      	adds	r3, #1
1a005c50:	637b      	str	r3, [r7, #52]	; 0x34
				if (!isdigit(*c)) {
1a005c52:	4b73      	ldr	r3, [pc, #460]	; (1a005e20 <UARTParseSetCommand+0x858>)
1a005c54:	681a      	ldr	r2, [r3, #0]
1a005c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005c58:	781b      	ldrb	r3, [r3, #0]
1a005c5a:	3301      	adds	r3, #1
1a005c5c:	4413      	add	r3, r2
1a005c5e:	781b      	ldrb	r3, [r3, #0]
1a005c60:	f003 0304 	and.w	r3, r3, #4
1a005c64:	2b00      	cmp	r3, #0
1a005c66:	f000 827a 	beq.w	1a00615e <UARTParseSetCommand+0xb96>
					break;
				}
				motorId = parseUInt32(&c);
1a005c6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005c6e:	4618      	mov	r0, r3
1a005c70:	f7ff fb04 	bl	1a00527c <parseUInt32>
1a005c74:	65f8      	str	r0, [r7, #92]	; 0x5c
				c++;
1a005c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005c78:	3301      	adds	r3, #1
1a005c7a:	637b      	str	r3, [r7, #52]	; 0x34
				if (updateMotorVelocityDecay(motorId, parseInt32(&c))) {
1a005c7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005c80:	4618      	mov	r0, r3
1a005c82:	f7ff fb27 	bl	1a0052d4 <parseInt32>
1a005c86:	4603      	mov	r3, r0
1a005c88:	4619      	mov	r1, r3
1a005c8a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005c8c:	f7fc f822 	bl	1a001cd4 <updateMotorVelocityDecay>
1a005c90:	4603      	mov	r3, r0
1a005c92:	2b00      	cmp	r3, #0
1a005c94:	f000 82a3 	beq.w	1a0061de <UARTParseSetCommand+0xc16>
					xputs("Error setting motor speed\n");
1a005c98:	4863      	ldr	r0, [pc, #396]	; (1a005e28 <UARTParseSetCommand+0x860>)
1a005c9a:	f000 fddf 	bl	1a00685c <xputs>
				}
				return;
1a005c9e:	e29e      	b.n	1a0061de <UARTParseSetCommand+0xc16>
			}
			if (!isdigit(*c)) {
1a005ca0:	4b5f      	ldr	r3, [pc, #380]	; (1a005e20 <UARTParseSetCommand+0x858>)
1a005ca2:	681a      	ldr	r2, [r3, #0]
1a005ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005ca6:	781b      	ldrb	r3, [r3, #0]
1a005ca8:	3301      	adds	r3, #1
1a005caa:	4413      	add	r3, r2
1a005cac:	781b      	ldrb	r3, [r3, #0]
1a005cae:	f003 0304 	and.w	r3, r3, #4
1a005cb2:	2b00      	cmp	r3, #0
1a005cb4:	f000 8255 	beq.w	1a006162 <UARTParseSetCommand+0xb9a>
				break;
			}
			motorId = parseUInt32(&c);
1a005cb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005cbc:	4618      	mov	r0, r3
1a005cbe:	f7ff fadd 	bl	1a00527c <parseUInt32>
1a005cc2:	65f8      	str	r0, [r7, #92]	; 0x5c
			c++;
1a005cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005cc6:	3301      	adds	r3, #1
1a005cc8:	637b      	str	r3, [r7, #52]	; 0x34
			if (updateMotorVelocity(motorId, parseInt32(&c))) {
1a005cca:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005cce:	4618      	mov	r0, r3
1a005cd0:	f7ff fb00 	bl	1a0052d4 <parseInt32>
1a005cd4:	4603      	mov	r3, r0
1a005cd6:	4619      	mov	r1, r3
1a005cd8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005cda:	f7fb feaf 	bl	1a001a3c <updateMotorVelocity>
1a005cde:	4603      	mov	r3, r0
1a005ce0:	2b00      	cmp	r3, #0
1a005ce2:	f000 827e 	beq.w	1a0061e2 <UARTParseSetCommand+0xc1a>
				xputs("Error setting motor speed\n");
1a005ce6:	4850      	ldr	r0, [pc, #320]	; (1a005e28 <UARTParseSetCommand+0x860>)
1a005ce8:	f000 fdb8 	bl	1a00685c <xputs>
			}
			return;
1a005cec:	e279      	b.n	1a0061e2 <UARTParseSetCommand+0xc1a>
		}
#endif
		if ((*c == 'P') || (*c == 'p')) {
1a005cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005cf0:	781b      	ldrb	r3, [r3, #0]
1a005cf2:	2b50      	cmp	r3, #80	; 0x50
1a005cf4:	d003      	beq.n	1a005cfe <UARTParseSetCommand+0x736>
1a005cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005cf8:	781b      	ldrb	r3, [r3, #0]
1a005cfa:	2b70      	cmp	r3, #112	; 0x70
1a005cfc:	d129      	bne.n	1a005d52 <UARTParseSetCommand+0x78a>
			c++;
1a005cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005d00:	3301      	adds	r3, #1
1a005d02:	637b      	str	r3, [r7, #52]	; 0x34
			if (!isdigit(*c)) {
1a005d04:	4b46      	ldr	r3, [pc, #280]	; (1a005e20 <UARTParseSetCommand+0x858>)
1a005d06:	681a      	ldr	r2, [r3, #0]
1a005d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005d0a:	781b      	ldrb	r3, [r3, #0]
1a005d0c:	3301      	adds	r3, #1
1a005d0e:	4413      	add	r3, r2
1a005d10:	781b      	ldrb	r3, [r3, #0]
1a005d12:	f003 0304 	and.w	r3, r3, #4
1a005d16:	2b00      	cmp	r3, #0
1a005d18:	f000 8225 	beq.w	1a006166 <UARTParseSetCommand+0xb9e>
				break;
			}
			motorId = parseUInt32(&c);
1a005d1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005d20:	4618      	mov	r0, r3
1a005d22:	f7ff faab 	bl	1a00527c <parseUInt32>
1a005d26:	65f8      	str	r0, [r7, #92]	; 0x5c
			c++;
1a005d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005d2a:	3301      	adds	r3, #1
1a005d2c:	637b      	str	r3, [r7, #52]	; 0x34
			if (updateMotorPWMPeriod(motorId, parseUInt32(&c))) {
1a005d2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005d32:	4618      	mov	r0, r3
1a005d34:	f7ff faa2 	bl	1a00527c <parseUInt32>
1a005d38:	4603      	mov	r3, r0
1a005d3a:	4619      	mov	r1, r3
1a005d3c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005d3e:	f7fb fd09 	bl	1a001754 <updateMotorPWMPeriod>
1a005d42:	4603      	mov	r3, r0
1a005d44:	2b00      	cmp	r3, #0
1a005d46:	f000 824e 	beq.w	1a0061e6 <UARTParseSetCommand+0xc1e>
				xputs("Error setting motor PWM\n");
1a005d4a:	4838      	ldr	r0, [pc, #224]	; (1a005e2c <UARTParseSetCommand+0x864>)
1a005d4c:	f000 fd86 	bl	1a00685c <xputs>
			}
			return;
1a005d50:	e249      	b.n	1a0061e6 <UARTParseSetCommand+0xc1e>
		}
		if (!isdigit(*c)) {
1a005d52:	4b33      	ldr	r3, [pc, #204]	; (1a005e20 <UARTParseSetCommand+0x858>)
1a005d54:	681a      	ldr	r2, [r3, #0]
1a005d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005d58:	781b      	ldrb	r3, [r3, #0]
1a005d5a:	3301      	adds	r3, #1
1a005d5c:	4413      	add	r3, r2
1a005d5e:	781b      	ldrb	r3, [r3, #0]
1a005d60:	f003 0304 	and.w	r3, r3, #4
1a005d64:	2b00      	cmp	r3, #0
1a005d66:	f000 8200 	beq.w	1a00616a <UARTParseSetCommand+0xba2>
			break;
		}
		motorId = parseUInt32(&c);
1a005d6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005d6e:	4618      	mov	r0, r3
1a005d70:	f7ff fa84 	bl	1a00527c <parseUInt32>
1a005d74:	65f8      	str	r0, [r7, #92]	; 0x5c
		c++;
1a005d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005d78:	3301      	adds	r3, #1
1a005d7a:	637b      	str	r3, [r7, #52]	; 0x34
		if (updateMotorMode(motorId, DIRECT_MODE)) {
1a005d7c:	2101      	movs	r1, #1
1a005d7e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005d80:	f7fb fd58 	bl	1a001834 <updateMotorMode>
1a005d84:	4603      	mov	r3, r0
1a005d86:	2b00      	cmp	r3, #0
1a005d88:	d003      	beq.n	1a005d92 <UARTParseSetCommand+0x7ca>
			xputs("Error setting motor mode\n");
1a005d8a:	4829      	ldr	r0, [pc, #164]	; (1a005e30 <UARTParseSetCommand+0x868>)
1a005d8c:	f000 fd66 	bl	1a00685c <xputs>
			return;
1a005d90:	e22e      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
		}
		if (*c == '%') {
1a005d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005d94:	781b      	ldrb	r3, [r3, #0]
1a005d96:	2b25      	cmp	r3, #37	; 0x25
1a005d98:	d114      	bne.n	1a005dc4 <UARTParseSetCommand+0x7fc>
			c++;
1a005d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005d9c:	3301      	adds	r3, #1
1a005d9e:	637b      	str	r3, [r7, #52]	; 0x34
			if (updateMotorDutyCycle(motorId, parseInt32(&c))) {
1a005da0:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005da4:	4618      	mov	r0, r3
1a005da6:	f7ff fa95 	bl	1a0052d4 <parseInt32>
1a005daa:	4603      	mov	r3, r0
1a005dac:	4619      	mov	r1, r3
1a005dae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005db0:	f7fc f88e 	bl	1a001ed0 <updateMotorDutyCycle>
1a005db4:	4603      	mov	r3, r0
1a005db6:	2b00      	cmp	r3, #0
1a005db8:	f000 8217 	beq.w	1a0061ea <UARTParseSetCommand+0xc22>
				xputs("Error setting motor speed\n");
1a005dbc:	481a      	ldr	r0, [pc, #104]	; (1a005e28 <UARTParseSetCommand+0x860>)
1a005dbe:	f000 fd4d 	bl	1a00685c <xputs>
			if (updateMotorWidthUs(motorId, parseInt32(&c))) {
				xputs("Error setting motor width\n");
			}
		}

		return;
1a005dc2:	e212      	b.n	1a0061ea <UARTParseSetCommand+0xc22>
			c++;
			if (updateMotorDutyCycle(motorId, parseInt32(&c))) {
				xputs("Error setting motor speed\n");
			}
		} else {
			if (updateMotorWidthUs(motorId, parseInt32(&c))) {
1a005dc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005dc8:	4618      	mov	r0, r3
1a005dca:	f7ff fa83 	bl	1a0052d4 <parseInt32>
1a005dce:	4603      	mov	r3, r0
1a005dd0:	4619      	mov	r1, r3
1a005dd2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005dd4:	f7fc f8c4 	bl	1a001f60 <updateMotorWidthUs>
1a005dd8:	4603      	mov	r3, r0
1a005dda:	2b00      	cmp	r3, #0
1a005ddc:	f000 8205 	beq.w	1a0061ea <UARTParseSetCommand+0xc22>
				xputs("Error setting motor width\n");
1a005de0:	4814      	ldr	r0, [pc, #80]	; (1a005e34 <UARTParseSetCommand+0x86c>)
1a005de2:	f000 fd3b 	bl	1a00685c <xputs>
			}
		}

		return;
1a005de6:	bf00      	nop
1a005de8:	e1ff      	b.n	1a0061ea <UARTParseSetCommand+0xc22>
	}

	case 'P':
	case 'p': {
		unsigned char *c = commandLine + 2;
1a005dea:	4b13      	ldr	r3, [pc, #76]	; (1a005e38 <UARTParseSetCommand+0x870>)
1a005dec:	633b      	str	r3, [r7, #48]	; 0x30
		if (((*c >= 'A') && (*c <= 'C')) || ((*c >= 'a') && (*c <= 'c'))) {
1a005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005df0:	781b      	ldrb	r3, [r3, #0]
1a005df2:	2b40      	cmp	r3, #64	; 0x40
1a005df4:	d903      	bls.n	1a005dfe <UARTParseSetCommand+0x836>
1a005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005df8:	781b      	ldrb	r3, [r3, #0]
1a005dfa:	2b43      	cmp	r3, #67	; 0x43
1a005dfc:	d907      	bls.n	1a005e0e <UARTParseSetCommand+0x846>
1a005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005e00:	781b      	ldrb	r3, [r3, #0]
1a005e02:	2b60      	cmp	r3, #96	; 0x60
1a005e04:	d978      	bls.n	1a005ef8 <UARTParseSetCommand+0x930>
1a005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005e08:	781b      	ldrb	r3, [r3, #0]
1a005e0a:	2b63      	cmp	r3, #99	; 0x63
1a005e0c:	d874      	bhi.n	1a005ef8 <UARTParseSetCommand+0x930>
			uint8_t channel = *c - (*c >= 'a' ? 'a' : 'A');
1a005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005e10:	781a      	ldrb	r2, [r3, #0]
1a005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005e14:	781b      	ldrb	r3, [r3, #0]
1a005e16:	2b60      	cmp	r3, #96	; 0x60
1a005e18:	d910      	bls.n	1a005e3c <UARTParseSetCommand+0x874>
1a005e1a:	2361      	movs	r3, #97	; 0x61
1a005e1c:	e00f      	b.n	1a005e3e <UARTParseSetCommand+0x876>
1a005e1e:	bf00      	nop
1a005e20:	100860b0 	.word	0x100860b0
1a005e24:	1a019aac 	.word	0x1a019aac
1a005e28:	1a019a90 	.word	0x1a019a90
1a005e2c:	1a019acc 	.word	0x1a019acc
1a005e30:	1a019ae8 	.word	0x1a019ae8
1a005e34:	1a019b04 	.word	0x1a019b04
1a005e38:	1008887e 	.word	0x1008887e
1a005e3c:	2341      	movs	r3, #65	; 0x41
1a005e3e:	1ad3      	subs	r3, r2, r3
1a005e40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			c++;
1a005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005e46:	3301      	adds	r3, #1
1a005e48:	633b      	str	r3, [r7, #48]	; 0x30
			if ((*c == '0') || (*c == '1')) {
1a005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005e4c:	781b      	ldrb	r3, [r3, #0]
1a005e4e:	2b30      	cmp	r3, #48	; 0x30
1a005e50:	d003      	beq.n	1a005e5a <UARTParseSetCommand+0x892>
1a005e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005e54:	781b      	ldrb	r3, [r3, #0]
1a005e56:	2b31      	cmp	r3, #49	; 0x31
1a005e58:	d136      	bne.n	1a005ec8 <UARTParseSetCommand+0x900>
				uint8_t output = *c - '0';
1a005e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005e5c:	781b      	ldrb	r3, [r3, #0]
1a005e5e:	3b30      	subs	r3, #48	; 0x30
1a005e60:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				c += 2;
1a005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005e66:	3302      	adds	r3, #2
1a005e68:	633b      	str	r3, [r7, #48]	; 0x30
				if (*c == '%') {
1a005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005e6c:	781b      	ldrb	r3, [r3, #0]
1a005e6e:	2b25      	cmp	r3, #37	; 0x25
1a005e70:	d116      	bne.n	1a005ea0 <UARTParseSetCommand+0x8d8>
					c++;
1a005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005e74:	3301      	adds	r3, #1
1a005e76:	633b      	str	r3, [r7, #48]	; 0x30
					if (PWMSetDutyCycle(channel, output, parseUInt32(&c))) {
1a005e78:	f107 0330 	add.w	r3, r7, #48	; 0x30
1a005e7c:	4618      	mov	r0, r3
1a005e7e:	f7ff f9fd 	bl	1a00527c <parseUInt32>
1a005e82:	4602      	mov	r2, r0
1a005e84:	f897 104e 	ldrb.w	r1, [r7, #78]	; 0x4e
1a005e88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
1a005e8c:	4618      	mov	r0, r3
1a005e8e:	f7fd fd65 	bl	1a00395c <PWMSetDutyCycle>
1a005e92:	4603      	mov	r3, r0
1a005e94:	2b00      	cmp	r3, #0
1a005e96:	d02d      	beq.n	1a005ef4 <UARTParseSetCommand+0x92c>
						xputs("Error setting PWM dutycycle\n");
1a005e98:	48b5      	ldr	r0, [pc, #724]	; (1a006170 <UARTParseSetCommand+0xba8>)
1a005e9a:	f000 fcdf 	bl	1a00685c <xputs>
	case 'p': {
		unsigned char *c = commandLine + 2;
		if (((*c >= 'A') && (*c <= 'C')) || ((*c >= 'a') && (*c <= 'c'))) {
			uint8_t channel = *c - (*c >= 'a' ? 'a' : 'A');
			c++;
			if ((*c == '0') || (*c == '1')) {
1a005e9e:	e029      	b.n	1a005ef4 <UARTParseSetCommand+0x92c>
				if (*c == '%') {
					c++;
					if (PWMSetDutyCycle(channel, output, parseUInt32(&c))) {
						xputs("Error setting PWM dutycycle\n");
					}
				} else if (PWMSetWidth(channel, output, parseUInt32(&c))) {
1a005ea0:	f107 0330 	add.w	r3, r7, #48	; 0x30
1a005ea4:	4618      	mov	r0, r3
1a005ea6:	f7ff f9e9 	bl	1a00527c <parseUInt32>
1a005eaa:	4602      	mov	r2, r0
1a005eac:	f897 104e 	ldrb.w	r1, [r7, #78]	; 0x4e
1a005eb0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
1a005eb4:	4618      	mov	r0, r3
1a005eb6:	f7fd fd8f 	bl	1a0039d8 <PWMSetWidth>
1a005eba:	4603      	mov	r3, r0
1a005ebc:	2b00      	cmp	r3, #0
1a005ebe:	d019      	beq.n	1a005ef4 <UARTParseSetCommand+0x92c>
					xputs("Error setting PWM width\n");
1a005ec0:	48ac      	ldr	r0, [pc, #688]	; (1a006174 <UARTParseSetCommand+0xbac>)
1a005ec2:	f000 fccb 	bl	1a00685c <xputs>
	case 'p': {
		unsigned char *c = commandLine + 2;
		if (((*c >= 'A') && (*c <= 'C')) || ((*c >= 'a') && (*c <= 'c'))) {
			uint8_t channel = *c - (*c >= 'a' ? 'a' : 'A');
			c++;
			if ((*c == '0') || (*c == '1')) {
1a005ec6:	e015      	b.n	1a005ef4 <UARTParseSetCommand+0x92c>
					}
				} else if (PWMSetWidth(channel, output, parseUInt32(&c))) {
					xputs("Error setting PWM width\n");
				}
			} else {
				c++;
1a005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005eca:	3301      	adds	r3, #1
1a005ecc:	633b      	str	r3, [r7, #48]	; 0x30
				if (PWMSetPeriod(channel, parseUInt32(&c))) {
1a005ece:	f107 0330 	add.w	r3, r7, #48	; 0x30
1a005ed2:	4618      	mov	r0, r3
1a005ed4:	f7ff f9d2 	bl	1a00527c <parseUInt32>
1a005ed8:	4602      	mov	r2, r0
1a005eda:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
1a005ede:	4611      	mov	r1, r2
1a005ee0:	4618      	mov	r0, r3
1a005ee2:	f7fd fbf1 	bl	1a0036c8 <PWMSetPeriod>
1a005ee6:	4603      	mov	r3, r0
1a005ee8:	2b00      	cmp	r3, #0
1a005eea:	d009      	beq.n	1a005f00 <UARTParseSetCommand+0x938>
					xputs("Error setting PWM frequency\n");
1a005eec:	48a2      	ldr	r0, [pc, #648]	; (1a006178 <UARTParseSetCommand+0xbb0>)
1a005eee:	f000 fcb5 	bl	1a00685c <xputs>
	}

	case 'P':
	case 'p': {
		unsigned char *c = commandLine + 2;
		if (((*c >= 'A') && (*c <= 'C')) || ((*c >= 'a') && (*c <= 'c'))) {
1a005ef2:	e005      	b.n	1a005f00 <UARTParseSetCommand+0x938>
			uint8_t channel = *c - (*c >= 'a' ? 'a' : 'A');
			c++;
			if ((*c == '0') || (*c == '1')) {
1a005ef4:	bf00      	nop
	}

	case 'P':
	case 'p': {
		unsigned char *c = commandLine + 2;
		if (((*c >= 'A') && (*c <= 'C')) || ((*c >= 'a') && (*c <= 'c'))) {
1a005ef6:	e003      	b.n	1a005f00 <UARTParseSetCommand+0x938>
				if (PWMSetPeriod(channel, parseUInt32(&c))) {
					xputs("Error setting PWM frequency\n");
				}
			}
		} else {
			xputs("Channel not recognized\n");
1a005ef8:	48a0      	ldr	r0, [pc, #640]	; (1a00617c <UARTParseSetCommand+0xbb4>)
1a005efa:	f000 fcaf 	bl	1a00685c <xputs>
		}
		return;
1a005efe:	e000      	b.n	1a005f02 <UARTParseSetCommand+0x93a>
	}

	case 'P':
	case 'p': {
		unsigned char *c = commandLine + 2;
		if (((*c >= 'A') && (*c <= 'C')) || ((*c >= 'a') && (*c <= 'c'))) {
1a005f00:	bf00      	nop
				}
			}
		} else {
			xputs("Channel not recognized\n");
		}
		return;
1a005f02:	bf00      	nop
1a005f04:	e174      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
	}

	case 'S':
	case 's': {
		unsigned char *c = commandLine + 2;
1a005f06:	4b9e      	ldr	r3, [pc, #632]	; (1a006180 <UARTParseSetCommand+0xbb8>)
1a005f08:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint8_t flag = 0;
1a005f0a:	2300      	movs	r3, #0
1a005f0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (*c == '+') {
1a005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a005f12:	781b      	ldrb	r3, [r3, #0]
1a005f14:	2b2b      	cmp	r3, #43	; 0x2b
1a005f16:	d103      	bne.n	1a005f20 <UARTParseSetCommand+0x958>
			flag = ENABLE;
1a005f18:	2301      	movs	r3, #1
1a005f1a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
1a005f1e:	e007      	b.n	1a005f30 <UARTParseSetCommand+0x968>
		} else if (*c == '-') {
1a005f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a005f22:	781b      	ldrb	r3, [r3, #0]
1a005f24:	2b2d      	cmp	r3, #45	; 0x2d
1a005f26:	f040 8147 	bne.w	1a0061b8 <UARTParseSetCommand+0xbf0>
			flag = DISABLE;
1a005f2a:	2300      	movs	r3, #0
1a005f2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		} else {
			break;
		}
		c++;
1a005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a005f32:	3301      	adds	r3, #1
1a005f34:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (!isdigit(*c)) {
1a005f36:	4b93      	ldr	r3, [pc, #588]	; (1a006184 <UARTParseSetCommand+0xbbc>)
1a005f38:	681a      	ldr	r2, [r3, #0]
1a005f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a005f3c:	781b      	ldrb	r3, [r3, #0]
1a005f3e:	3301      	adds	r3, #1
1a005f40:	4413      	add	r3, r2
1a005f42:	781b      	ldrb	r3, [r3, #0]
1a005f44:	f003 0304 	and.w	r3, r3, #4
1a005f48:	2b00      	cmp	r3, #0
1a005f4a:	d112      	bne.n	1a005f72 <UARTParseSetCommand+0x9aa>
			if (!flag && (commandLinePointer == 3)) {
1a005f4c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
1a005f50:	2b00      	cmp	r3, #0
1a005f52:	f040 8133 	bne.w	1a0061bc <UARTParseSetCommand+0xbf4>
1a005f56:	4b8c      	ldr	r3, [pc, #560]	; (1a006188 <UARTParseSetCommand+0xbc0>)
1a005f58:	681b      	ldr	r3, [r3, #0]
1a005f5a:	2b03      	cmp	r3, #3
1a005f5c:	f040 812e 	bne.w	1a0061bc <UARTParseSetCommand+0xbf4>
				enableSensors(0xFFFFFFFF, flag, 0);
1a005f60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
1a005f64:	2200      	movs	r2, #0
1a005f66:	4619      	mov	r1, r3
1a005f68:	f04f 30ff 	mov.w	r0, #4294967295
1a005f6c:	f7fe fae4 	bl	1a004538 <enableSensors>
				return;
1a005f70:	e13e      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
			}
			break;
		}
		uint32_t mask = parseUInt32(&c);
1a005f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
1a005f76:	4618      	mov	r0, r3
1a005f78:	f7ff f980 	bl	1a00527c <parseUInt32>
1a005f7c:	64b8      	str	r0, [r7, #72]	; 0x48
		if (*c == ',') {
1a005f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a005f80:	781b      	ldrb	r3, [r3, #0]
1a005f82:	2b2c      	cmp	r3, #44	; 0x2c
1a005f84:	d103      	bne.n	1a005f8e <UARTParseSetCommand+0x9c6>
			c++;
1a005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a005f88:	3301      	adds	r3, #1
1a005f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
1a005f8c:	e004      	b.n	1a005f98 <UARTParseSetCommand+0x9d0>
		} else {
			if (flag) {
1a005f8e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
1a005f92:	2b00      	cmp	r3, #0
1a005f94:	f040 8114 	bne.w	1a0061c0 <UARTParseSetCommand+0xbf8>
				break; //second argument only mandatory when enabling.
			}
		}
		uint32_t period = 1;
1a005f98:	2301      	movs	r3, #1
1a005f9a:	673b      	str	r3, [r7, #112]	; 0x70
		if (flag) {
1a005f9c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
1a005fa0:	2b00      	cmp	r3, #0
1a005fa2:	d005      	beq.n	1a005fb0 <UARTParseSetCommand+0x9e8>
			period = parseUInt32(&c);
1a005fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
1a005fa8:	4618      	mov	r0, r3
1a005faa:	f7ff f967 	bl	1a00527c <parseUInt32>
1a005fae:	6738      	str	r0, [r7, #112]	; 0x70
		}
		enableSensors(mask, flag, period);
1a005fb0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
1a005fb4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
1a005fb6:	4619      	mov	r1, r3
1a005fb8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
1a005fba:	f7fe fabd 	bl	1a004538 <enableSensors>
		return;
1a005fbe:	bf00      	nop
1a005fc0:	e116      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
	}
	case 'T':
	case 't': {

		unsigned char *c = commandLine + 2;
1a005fc2:	4b6f      	ldr	r3, [pc, #444]	; (1a006180 <UARTParseSetCommand+0xbb8>)
1a005fc4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (*c == '+') {
1a005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a005fc8:	781b      	ldrb	r3, [r3, #0]
1a005fca:	2b2b      	cmp	r3, #43	; 0x2b
1a005fcc:	d10e      	bne.n	1a005fec <UARTParseSetCommand+0xa24>
			Chip_RTC_Init(LPC_RTC);
1a005fce:	486f      	ldr	r0, [pc, #444]	; (1a00618c <UARTParseSetCommand+0xbc4>)
1a005fd0:	f00d f812 	bl	1a012ff8 <Chip_RTC_Init>
			Chip_RTC_Enable(LPC_RTC, ENABLE);
1a005fd4:	2101      	movs	r1, #1
1a005fd6:	486d      	ldr	r0, [pc, #436]	; (1a00618c <UARTParseSetCommand+0xbc4>)
1a005fd8:	f00d f864 	bl	1a0130a4 <Chip_RTC_Enable>
			Chip_RTC_SetFullTime(LPC_RTC, &buildTime);
1a005fdc:	496c      	ldr	r1, [pc, #432]	; (1a006190 <UARTParseSetCommand+0xbc8>)
1a005fde:	486b      	ldr	r0, [pc, #428]	; (1a00618c <UARTParseSetCommand+0xbc4>)
1a005fe0:	f00d f882 	bl	1a0130e8 <Chip_RTC_SetFullTime>
			xputs("-T+\n");
1a005fe4:	486b      	ldr	r0, [pc, #428]	; (1a006194 <UARTParseSetCommand+0xbcc>)
1a005fe6:	f000 fc39 	bl	1a00685c <xputs>
			return;
1a005fea:	e101      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
		} else if (*c == '-') {
1a005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a005fee:	781b      	ldrb	r3, [r3, #0]
1a005ff0:	2b2d      	cmp	r3, #45	; 0x2d
1a005ff2:	d10a      	bne.n	1a00600a <UARTParseSetCommand+0xa42>
			Chip_RTC_Enable(LPC_RTC, DISABLE);
1a005ff4:	2100      	movs	r1, #0
1a005ff6:	4865      	ldr	r0, [pc, #404]	; (1a00618c <UARTParseSetCommand+0xbc4>)
1a005ff8:	f00d f854 	bl	1a0130a4 <Chip_RTC_Enable>
			Chip_RTC_DeInit(LPC_RTC);
1a005ffc:	4863      	ldr	r0, [pc, #396]	; (1a00618c <UARTParseSetCommand+0xbc4>)
1a005ffe:	f00d f821 	bl	1a013044 <Chip_RTC_DeInit>
			xputs("-T-\n");
1a006002:	4865      	ldr	r0, [pc, #404]	; (1a006198 <UARTParseSetCommand+0xbd0>)
1a006004:	f000 fc2a 	bl	1a00685c <xputs>
			return;
1a006008:	e0f2      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
		}
		if (commandLinePointer < TIME_DATE_COM_SIZE + 2) {
1a00600a:	4b5f      	ldr	r3, [pc, #380]	; (1a006188 <UARTParseSetCommand+0xbc0>)
1a00600c:	681b      	ldr	r3, [r3, #0]
1a00600e:	2b15      	cmp	r3, #21
1a006010:	d803      	bhi.n	1a00601a <UARTParseSetCommand+0xa52>
			xputs("Wrong format\n");
1a006012:	4862      	ldr	r0, [pc, #392]	; (1a00619c <UARTParseSetCommand+0xbd4>)
1a006014:	f000 fc22 	bl	1a00685c <xputs>
			return;
1a006018:	e0ea      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
		}
		if (!Chip_RTC_Clock_Running()) {
1a00601a:	f7fe fea9 	bl	1a004d70 <Chip_RTC_Clock_Running>
1a00601e:	4603      	mov	r3, r0
1a006020:	2b00      	cmp	r3, #0
1a006022:	d103      	bne.n	1a00602c <UARTParseSetCommand+0xa64>
			xputs("RTC not enabled\n");
1a006024:	485e      	ldr	r0, [pc, #376]	; (1a0061a0 <UARTParseSetCommand+0xbd8>)
1a006026:	f000 fc19 	bl	1a00685c <xputs>
			return;
1a00602a:	e0e1      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
		}
		RTC_TIME_T time;
		time.time[RTC_TIMETYPE_DAYOFWEEK] = 0;
1a00602c:	2300      	movs	r3, #0
1a00602e:	617b      	str	r3, [r7, #20]
		time.time[RTC_TIMETYPE_DAYOFYEAR] = 1;
1a006030:	2301      	movs	r3, #1
1a006032:	61bb      	str	r3, [r7, #24]
		time.time[RTC_TIMETYPE_YEAR] = parseUInt32(&c);
1a006034:	f107 0328 	add.w	r3, r7, #40	; 0x28
1a006038:	4618      	mov	r0, r3
1a00603a:	f7ff f91f 	bl	1a00527c <parseUInt32>
1a00603e:	4603      	mov	r3, r0
1a006040:	623b      	str	r3, [r7, #32]
		c++;
1a006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a006044:	3301      	adds	r3, #1
1a006046:	62bb      	str	r3, [r7, #40]	; 0x28
		time.time[RTC_TIMETYPE_MONTH] = parseUInt32(&c);
1a006048:	f107 0328 	add.w	r3, r7, #40	; 0x28
1a00604c:	4618      	mov	r0, r3
1a00604e:	f7ff f915 	bl	1a00527c <parseUInt32>
1a006052:	4603      	mov	r3, r0
1a006054:	61fb      	str	r3, [r7, #28]
		c++;
1a006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a006058:	3301      	adds	r3, #1
1a00605a:	62bb      	str	r3, [r7, #40]	; 0x28
		time.time[RTC_TIMETYPE_DAYOFMONTH] = parseUInt32(&c);
1a00605c:	f107 0328 	add.w	r3, r7, #40	; 0x28
1a006060:	4618      	mov	r0, r3
1a006062:	f7ff f90b 	bl	1a00527c <parseUInt32>
1a006066:	4603      	mov	r3, r0
1a006068:	613b      	str	r3, [r7, #16]
		c++;
1a00606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a00606c:	3301      	adds	r3, #1
1a00606e:	62bb      	str	r3, [r7, #40]	; 0x28
		time.time[RTC_TIMETYPE_HOUR] = parseUInt32(&c);
1a006070:	f107 0328 	add.w	r3, r7, #40	; 0x28
1a006074:	4618      	mov	r0, r3
1a006076:	f7ff f901 	bl	1a00527c <parseUInt32>
1a00607a:	4603      	mov	r3, r0
1a00607c:	60fb      	str	r3, [r7, #12]
		c++;
1a00607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a006080:	3301      	adds	r3, #1
1a006082:	62bb      	str	r3, [r7, #40]	; 0x28
		time.time[RTC_TIMETYPE_MINUTE] = parseUInt32(&c);
1a006084:	f107 0328 	add.w	r3, r7, #40	; 0x28
1a006088:	4618      	mov	r0, r3
1a00608a:	f7ff f8f7 	bl	1a00527c <parseUInt32>
1a00608e:	4603      	mov	r3, r0
1a006090:	60bb      	str	r3, [r7, #8]
		c++;
1a006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a006094:	3301      	adds	r3, #1
1a006096:	62bb      	str	r3, [r7, #40]	; 0x28
		time.time[RTC_TIMETYPE_SECOND] = parseUInt32(&c);
1a006098:	f107 0328 	add.w	r3, r7, #40	; 0x28
1a00609c:	4618      	mov	r0, r3
1a00609e:	f7ff f8ed 	bl	1a00527c <parseUInt32>
1a0060a2:	4603      	mov	r3, r0
1a0060a4:	607b      	str	r3, [r7, #4]
		Chip_RTC_SetFullTime(LPC_RTC, &time);
1a0060a6:	1d3b      	adds	r3, r7, #4
1a0060a8:	4619      	mov	r1, r3
1a0060aa:	4838      	ldr	r0, [pc, #224]	; (1a00618c <UARTParseSetCommand+0xbc4>)
1a0060ac:	f00d f81c 	bl	1a0130e8 <Chip_RTC_SetFullTime>
		return;
1a0060b0:	bf00      	nop
1a0060b2:	e09d      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>

	case 'U':
	case 'u': {
		unsigned char *c;
		long baudRate;
		c = commandLine + 2;
1a0060b4:	4b32      	ldr	r3, [pc, #200]	; (1a006180 <UARTParseSetCommand+0xbb8>)
1a0060b6:	627b      	str	r3, [r7, #36]	; 0x24
		if (((*c) >= '0') && ((*c) <= '2')) {
1a0060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0060ba:	781b      	ldrb	r3, [r3, #0]
1a0060bc:	2b2f      	cmp	r3, #47	; 0x2f
1a0060be:	d90a      	bls.n	1a0060d6 <UARTParseSetCommand+0xb0e>
1a0060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0060c2:	781b      	ldrb	r3, [r3, #0]
1a0060c4:	2b32      	cmp	r3, #50	; 0x32
1a0060c6:	d806      	bhi.n	1a0060d6 <UARTParseSetCommand+0xb0e>
			enableUARTecho = ((*c) - '0');
1a0060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0060ca:	781b      	ldrb	r3, [r3, #0]
1a0060cc:	3b30      	subs	r3, #48	; 0x30
1a0060ce:	461a      	mov	r2, r3
1a0060d0:	4b34      	ldr	r3, [pc, #208]	; (1a0061a4 <UARTParseSetCommand+0xbdc>)
1a0060d2:	601a      	str	r2, [r3, #0]
			return;
1a0060d4:	e08c      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
		}
		if (*c == '=') {
1a0060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0060d8:	781b      	ldrb	r3, [r3, #0]
1a0060da:	2b3d      	cmp	r3, #61	; 0x3d
1a0060dc:	d172      	bne.n	1a0061c4 <UARTParseSetCommand+0xbfc>
			c++;
1a0060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0060e0:	3301      	adds	r3, #1
1a0060e2:	627b      	str	r3, [r7, #36]	; 0x24
		} else {
			break;
		}
		baudRate = parseUInt32(&c);
1a0060e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
1a0060e8:	4618      	mov	r0, r3
1a0060ea:	f7ff f8c7 	bl	1a00527c <parseUInt32>
1a0060ee:	4603      	mov	r3, r0
1a0060f0:	647b      	str	r3, [r7, #68]	; 0x44
		while ((LPC_UART->LSR & UART_LSR_TEMT) == 0) {
1a0060f2:	bf00      	nop
1a0060f4:	4b2c      	ldr	r3, [pc, #176]	; (1a0061a8 <UARTParseSetCommand+0xbe0>)
1a0060f6:	695b      	ldr	r3, [r3, #20]
1a0060f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0060fc:	2b00      	cmp	r3, #0
1a0060fe:	d0f9      	beq.n	1a0060f4 <UARTParseSetCommand+0xb2c>
		};		   // wait for UART to finish data transfer
		if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
1a006100:	4b2a      	ldr	r3, [pc, #168]	; (1a0061ac <UARTParseSetCommand+0xbe4>)
1a006102:	681b      	ldr	r3, [r3, #0]
1a006104:	2b00      	cmp	r3, #0
1a006106:	d10a      	bne.n	1a00611e <UARTParseSetCommand+0xb56>
1a006108:	4b26      	ldr	r3, [pc, #152]	; (1a0061a4 <UARTParseSetCommand+0xbdc>)
1a00610a:	681b      	ldr	r3, [r3, #0]
1a00610c:	2b01      	cmp	r3, #1
1a00610e:	d906      	bls.n	1a00611e <UARTParseSetCommand+0xb56>
			xprintf("Switching Baud Rate to %d Baud!\n", baudRate);
1a006110:	6c79      	ldr	r1, [r7, #68]	; 0x44
1a006112:	4827      	ldr	r0, [pc, #156]	; (1a0061b0 <UARTParseSetCommand+0xbe8>)
1a006114:	f000 fd32 	bl	1a006b7c <xprintf>
			timerDelayMs(100);
1a006118:	2064      	movs	r0, #100	; 0x64
1a00611a:	f000 fa6d 	bl	1a0065f8 <timerDelayMs>
		}
		if (Chip_UART_SetBaudFDR(LPC_UART, baudRate) == 0) {
1a00611e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a006120:	4619      	mov	r1, r3
1a006122:	4821      	ldr	r0, [pc, #132]	; (1a0061a8 <UARTParseSetCommand+0xbe0>)
1a006124:	f00d f9fe 	bl	1a013524 <Chip_UART_SetBaudFDR>
1a006128:	4603      	mov	r3, r0
1a00612a:	2b00      	cmp	r3, #0
1a00612c:	d15f      	bne.n	1a0061ee <UARTParseSetCommand+0xc26>
			if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
1a00612e:	4b1f      	ldr	r3, [pc, #124]	; (1a0061ac <UARTParseSetCommand+0xbe4>)
1a006130:	681b      	ldr	r3, [r3, #0]
1a006132:	2b00      	cmp	r3, #0
1a006134:	d15b      	bne.n	1a0061ee <UARTParseSetCommand+0xc26>
1a006136:	4b1b      	ldr	r3, [pc, #108]	; (1a0061a4 <UARTParseSetCommand+0xbdc>)
1a006138:	681b      	ldr	r3, [r3, #0]
1a00613a:	2b01      	cmp	r3, #1
1a00613c:	d957      	bls.n	1a0061ee <UARTParseSetCommand+0xc26>
				xprintf("Failed to switch Baud Rate to %d Baud!\n", baudRate);
1a00613e:	6c79      	ldr	r1, [r7, #68]	; 0x44
1a006140:	481c      	ldr	r0, [pc, #112]	; (1a0061b4 <UARTParseSetCommand+0xbec>)
1a006142:	f000 fd1b 	bl	1a006b7c <xprintf>
			}
		}
		return;
1a006146:	bf00      	nop
1a006148:	e051      	b.n	1a0061ee <UARTParseSetCommand+0xc26>
			return;
		}
		if ((*c == 'D') || (*c == 'd')) {
			c++;
			if (!isdigit(*c)) {
				break;
1a00614a:	bf00      	nop
1a00614c:	e03b      	b.n	1a0061c6 <UARTParseSetCommand+0xbfe>
		}
#if USE_PUSHBOT
		if ((*c == 'C') || (*c == 'c')) {
			c++;
			if (!isdigit(*c)) {
				break;
1a00614e:	bf00      	nop
1a006150:	e039      	b.n	1a0061c6 <UARTParseSetCommand+0xbfe>
			}
			motorId = parseUInt32(&c);
			if (*c == '=') {
				c++;
			} else {
				break;
1a006152:	bf00      	nop
1a006154:	e037      	b.n	1a0061c6 <UARTParseSetCommand+0xbfe>
			}
			int32_t pGain = parseInt32(&c);
			if (*c == ',') {
				c++;
			} else {
				break;
1a006156:	bf00      	nop
1a006158:	e035      	b.n	1a0061c6 <UARTParseSetCommand+0xbfe>
			}
			int32_t iGain = parseInt32(&c);
			if (*c == ',') {
				c++;
			} else {
				break;
1a00615a:	bf00      	nop
1a00615c:	e033      	b.n	1a0061c6 <UARTParseSetCommand+0xbfe>
		if ((*c == 'V') || (*c == 'v')) {
			c++;
			if ((*c == 'D') || (*c == 'd')) {
				c++;
				if (!isdigit(*c)) {
					break;
1a00615e:	bf00      	nop
1a006160:	e031      	b.n	1a0061c6 <UARTParseSetCommand+0xbfe>
					xputs("Error setting motor speed\n");
				}
				return;
			}
			if (!isdigit(*c)) {
				break;
1a006162:	bf00      	nop
1a006164:	e02f      	b.n	1a0061c6 <UARTParseSetCommand+0xbfe>
		}
#endif
		if ((*c == 'P') || (*c == 'p')) {
			c++;
			if (!isdigit(*c)) {
				break;
1a006166:	bf00      	nop
1a006168:	e02d      	b.n	1a0061c6 <UARTParseSetCommand+0xbfe>
				xputs("Error setting motor PWM\n");
			}
			return;
		}
		if (!isdigit(*c)) {
			break;
1a00616a:	bf00      	nop
1a00616c:	e02b      	b.n	1a0061c6 <UARTParseSetCommand+0xbfe>
1a00616e:	bf00      	nop
1a006170:	1a019b20 	.word	0x1a019b20
1a006174:	1a019b40 	.word	0x1a019b40
1a006178:	1a019b5c 	.word	0x1a019b5c
1a00617c:	1a019b7c 	.word	0x1a019b7c
1a006180:	1008887e 	.word	0x1008887e
1a006184:	100860b0 	.word	0x100860b0
1a006188:	100888fc 	.word	0x100888fc
1a00618c:	40046000 	.word	0x40046000
1a006190:	10087448 	.word	0x10087448
1a006194:	1a019b94 	.word	0x1a019b94
1a006198:	1a019b9c 	.word	0x1a019b9c
1a00619c:	1a019ba4 	.word	0x1a019ba4
1a0061a0:	1a019bb4 	.word	0x1a019bb4
1a0061a4:	10088878 	.word	0x10088878
1a0061a8:	40081000 	.word	0x40081000
1a0061ac:	10087444 	.word	0x10087444
1a0061b0:	1a019bc8 	.word	0x1a019bc8
1a0061b4:	1a019bec 	.word	0x1a019bec
		if (*c == '+') {
			flag = ENABLE;
		} else if (*c == '-') {
			flag = DISABLE;
		} else {
			break;
1a0061b8:	bf00      	nop
1a0061ba:	e004      	b.n	1a0061c6 <UARTParseSetCommand+0xbfe>
		if (!isdigit(*c)) {
			if (!flag && (commandLinePointer == 3)) {
				enableSensors(0xFFFFFFFF, flag, 0);
				return;
			}
			break;
1a0061bc:	bf00      	nop
1a0061be:	e002      	b.n	1a0061c6 <UARTParseSetCommand+0xbfe>
		uint32_t mask = parseUInt32(&c);
		if (*c == ',') {
			c++;
		} else {
			if (flag) {
				break; //second argument only mandatory when enabling.
1a0061c0:	bf00      	nop
1a0061c2:	e000      	b.n	1a0061c6 <UARTParseSetCommand+0xbfe>
			return;
		}
		if (*c == '=') {
			c++;
		} else {
			break;
1a0061c4:	bf00      	nop
			}
		}
		return;
	}
	}
	xputs("Set: parsing error\n");
1a0061c6:	480c      	ldr	r0, [pc, #48]	; (1a0061f8 <UARTParseSetCommand+0xc30>)
1a0061c8:	f000 fb48 	bl	1a00685c <xputs>
1a0061cc:	e010      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
		biasValue = parseUInt32(&c);
		DVS128BiasSet(biasID, biasValue);
		if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
			xprintf("-B%d=%d\n", biasID, DVS128BiasGet(biasID));
		}
		return;
1a0061ce:	bf00      	nop
1a0061d0:	e00e      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
		if ((*c >= '0') && (*c <= '4')) {
			eDVSDataFormat = ((*c) - '0');
			if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
				xprintf("-E%d\n", eDVSDataFormat);
			}
			return;
1a0061d2:	bf00      	nop
1a0061d4:	e00c      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
					xputs("Error setting motor speed\n");
					return;
				}

			}
			return;
1a0061d6:	bf00      	nop
1a0061d8:	e00a      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
			}
			int32_t dGain = parseInt32(&c);
			if (updateMotorPID(motorId, pGain, iGain, dGain)) {
				xputs("Error setting controller PID\n");
			}
			return;
1a0061da:	bf00      	nop
1a0061dc:	e008      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
				motorId = parseUInt32(&c);
				c++;
				if (updateMotorVelocityDecay(motorId, parseInt32(&c))) {
					xputs("Error setting motor speed\n");
				}
				return;
1a0061de:	bf00      	nop
1a0061e0:	e006      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
			motorId = parseUInt32(&c);
			c++;
			if (updateMotorVelocity(motorId, parseInt32(&c))) {
				xputs("Error setting motor speed\n");
			}
			return;
1a0061e2:	bf00      	nop
1a0061e4:	e004      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
			motorId = parseUInt32(&c);
			c++;
			if (updateMotorPWMPeriod(motorId, parseUInt32(&c))) {
				xputs("Error setting motor PWM\n");
			}
			return;
1a0061e6:	bf00      	nop
1a0061e8:	e002      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
			if (updateMotorWidthUs(motorId, parseInt32(&c))) {
				xputs("Error setting motor width\n");
			}
		}

		return;
1a0061ea:	bf00      	nop
1a0061ec:	e000      	b.n	1a0061f0 <UARTParseSetCommand+0xc28>
		if (Chip_UART_SetBaudFDR(LPC_UART, baudRate) == 0) {
			if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
				xprintf("Failed to switch Baud Rate to %d Baud!\n", baudRate);
			}
		}
		return;
1a0061ee:	bf00      	nop
	}
	}
	xputs("Set: parsing error\n");
}
1a0061f0:	377c      	adds	r7, #124	; 0x7c
1a0061f2:	46bd      	mov	sp, r7
1a0061f4:	bd90      	pop	{r4, r7, pc}
1a0061f6:	bf00      	nop
1a0061f8:	1a019a7c 	.word	0x1a019a7c

1a0061fc <parseRS232CommandLine>:

// *****************************************************************************
// * ** parseRS232CommandLine ** */
// *****************************************************************************
static void parseRS232CommandLine(void) {
1a0061fc:	b580      	push	{r7, lr}
1a0061fe:	b082      	sub	sp, #8
1a006200:	af00      	add	r7, sp, #0

	switch (commandLine[0]) {
1a006202:	4b8d      	ldr	r3, [pc, #564]	; (1a006438 <parseRS232CommandLine+0x23c>)
1a006204:	781b      	ldrb	r3, [r3, #0]
1a006206:	3b21      	subs	r3, #33	; 0x21
1a006208:	2b56      	cmp	r3, #86	; 0x56
1a00620a:	f200 810c 	bhi.w	1a006426 <parseRS232CommandLine+0x22a>
1a00620e:	a201      	add	r2, pc, #4	; (adr r2, 1a006214 <parseRS232CommandLine+0x18>)
1a006210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a006214:	1a006377 	.word	0x1a006377
1a006218:	1a006427 	.word	0x1a006427
1a00621c:	1a006427 	.word	0x1a006427
1a006220:	1a006427 	.word	0x1a006427
1a006224:	1a006427 	.word	0x1a006427
1a006228:	1a006427 	.word	0x1a006427
1a00622c:	1a006427 	.word	0x1a006427
1a006230:	1a006427 	.word	0x1a006427
1a006234:	1a006427 	.word	0x1a006427
1a006238:	1a006427 	.word	0x1a006427
1a00623c:	1a006427 	.word	0x1a006427
1a006240:	1a006427 	.word	0x1a006427
1a006244:	1a006427 	.word	0x1a006427
1a006248:	1a006427 	.word	0x1a006427
1a00624c:	1a006427 	.word	0x1a006427
1a006250:	1a006427 	.word	0x1a006427
1a006254:	1a006427 	.word	0x1a006427
1a006258:	1a006427 	.word	0x1a006427
1a00625c:	1a006427 	.word	0x1a006427
1a006260:	1a006427 	.word	0x1a006427
1a006264:	1a006427 	.word	0x1a006427
1a006268:	1a006427 	.word	0x1a006427
1a00626c:	1a006427 	.word	0x1a006427
1a006270:	1a006427 	.word	0x1a006427
1a006274:	1a006427 	.word	0x1a006427
1a006278:	1a006427 	.word	0x1a006427
1a00627c:	1a006427 	.word	0x1a006427
1a006280:	1a006427 	.word	0x1a006427
1a006284:	1a006427 	.word	0x1a006427
1a006288:	1a006427 	.word	0x1a006427
1a00628c:	1a006371 	.word	0x1a006371
1a006290:	1a006427 	.word	0x1a006427
1a006294:	1a006427 	.word	0x1a006427
1a006298:	1a006427 	.word	0x1a006427
1a00629c:	1a006427 	.word	0x1a006427
1a0062a0:	1a006427 	.word	0x1a006427
1a0062a4:	1a006393 	.word	0x1a006393
1a0062a8:	1a006427 	.word	0x1a006427
1a0062ac:	1a006427 	.word	0x1a006427
1a0062b0:	1a006427 	.word	0x1a006427
1a0062b4:	1a006427 	.word	0x1a006427
1a0062b8:	1a006427 	.word	0x1a006427
1a0062bc:	1a006427 	.word	0x1a006427
1a0062c0:	1a006427 	.word	0x1a006427
1a0062c4:	1a006427 	.word	0x1a006427
1a0062c8:	1a006427 	.word	0x1a006427
1a0062cc:	1a006427 	.word	0x1a006427
1a0062d0:	1a00637d 	.word	0x1a00637d
1a0062d4:	1a006427 	.word	0x1a006427
1a0062d8:	1a00638d 	.word	0x1a00638d
1a0062dc:	1a00642f 	.word	0x1a00642f
1a0062e0:	1a006427 	.word	0x1a006427
1a0062e4:	1a006427 	.word	0x1a006427
1a0062e8:	1a006427 	.word	0x1a006427
1a0062ec:	1a0063ab 	.word	0x1a0063ab
1a0062f0:	1a006427 	.word	0x1a006427
1a0062f4:	1a006427 	.word	0x1a006427
1a0062f8:	1a006427 	.word	0x1a006427
1a0062fc:	1a006427 	.word	0x1a006427
1a006300:	1a006427 	.word	0x1a006427
1a006304:	1a006427 	.word	0x1a006427
1a006308:	1a006427 	.word	0x1a006427
1a00630c:	1a006427 	.word	0x1a006427
1a006310:	1a006427 	.word	0x1a006427
1a006314:	1a006427 	.word	0x1a006427
1a006318:	1a006427 	.word	0x1a006427
1a00631c:	1a006427 	.word	0x1a006427
1a006320:	1a006427 	.word	0x1a006427
1a006324:	1a006393 	.word	0x1a006393
1a006328:	1a006427 	.word	0x1a006427
1a00632c:	1a006427 	.word	0x1a006427
1a006330:	1a006427 	.word	0x1a006427
1a006334:	1a006427 	.word	0x1a006427
1a006338:	1a006427 	.word	0x1a006427
1a00633c:	1a006427 	.word	0x1a006427
1a006340:	1a006427 	.word	0x1a006427
1a006344:	1a006427 	.word	0x1a006427
1a006348:	1a006427 	.word	0x1a006427
1a00634c:	1a006427 	.word	0x1a006427
1a006350:	1a00637d 	.word	0x1a00637d
1a006354:	1a006427 	.word	0x1a006427
1a006358:	1a00638d 	.word	0x1a00638d
1a00635c:	1a00642f 	.word	0x1a00642f
1a006360:	1a006427 	.word	0x1a006427
1a006364:	1a006427 	.word	0x1a006427
1a006368:	1a006427 	.word	0x1a006427
1a00636c:	1a0063ab 	.word	0x1a0063ab
	case '?':
		UARTParseGetCommand();
1a006370:	f7fe ffd6 	bl	1a005320 <UARTParseGetCommand>
		break;
1a006374:	e05c      	b.n	1a006430 <parseRS232CommandLine+0x234>
	case '!':
		UARTParseSetCommand();
1a006376:	f7ff f927 	bl	1a0055c8 <UARTParseSetCommand>
		break;
1a00637a:	e059      	b.n	1a006430 <parseRS232CommandLine+0x234>

	case 'P':
	case 'p':
		UARTInit(LPC_USART0, 9600);
1a00637c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
1a006380:	482e      	ldr	r0, [pc, #184]	; (1a00643c <parseRS232CommandLine+0x240>)
1a006382:	f7fe fd3d 	bl	1a004e00 <UARTInit>
		enterReprogrammingMode();
1a006386:	f000 f995 	bl	1a0066b4 <enterReprogrammingMode>
		break;
1a00638a:	e051      	b.n	1a006430 <parseRS232CommandLine+0x234>
	case 'R':
	case 'r':
		resetDevice();
1a00638c:	f000 f988 	bl	1a0066a0 <resetDevice>
		break;
1a006390:	e04e      	b.n	1a006430 <parseRS232CommandLine+0x234>
	case 'E':
	case 'e':
		if (commandLine[1] == '+') {
1a006392:	4b29      	ldr	r3, [pc, #164]	; (1a006438 <parseRS232CommandLine+0x23c>)
1a006394:	785b      	ldrb	r3, [r3, #1]
1a006396:	2b2b      	cmp	r3, #43	; 0x2b
1a006398:	d103      	bne.n	1a0063a2 <parseRS232CommandLine+0x1a6>
			DVS128FetchEventsEnable(TRUE);
1a00639a:	2001      	movs	r0, #1
1a00639c:	f7fe fcfa 	bl	1a004d94 <DVS128FetchEventsEnable>
		} else {
			DVS128FetchEventsEnable(FALSE);
		}
		break;
1a0063a0:	e046      	b.n	1a006430 <parseRS232CommandLine+0x234>
	case 'E':
	case 'e':
		if (commandLine[1] == '+') {
			DVS128FetchEventsEnable(TRUE);
		} else {
			DVS128FetchEventsEnable(FALSE);
1a0063a2:	2000      	movs	r0, #0
1a0063a4:	f7fe fcf6 	bl	1a004d94 <DVS128FetchEventsEnable>
		}
		break;
1a0063a8:	e042      	b.n	1a006430 <parseRS232CommandLine+0x234>
		//
		break;
	}
	case 'W':
	case 'w':
		for (int i = 0; i < 20000000; ++i) {
1a0063aa:	2300      	movs	r3, #0
1a0063ac:	607b      	str	r3, [r7, #4]
1a0063ae:	e035      	b.n	1a00641c <parseRS232CommandLine+0x220>
1a0063b0:	bf00      	nop
			while (freeSpaceForTranmission(&uart) < 6) {	// wait for TX to finish sending!
1a0063b2:	4823      	ldr	r0, [pc, #140]	; (1a006440 <parseRS232CommandLine+0x244>)
1a0063b4:	f7fe fcc4 	bl	1a004d40 <freeSpaceForTranmission>
1a0063b8:	4603      	mov	r3, r0
1a0063ba:	2b05      	cmp	r3, #5
1a0063bc:	d9f8      	bls.n	1a0063b0 <parseRS232CommandLine+0x1b4>
				__NOP();
			}
			pushByteToTransmission(&uart, (i >> 8) | 0x80);      // 1st byte to send (Y-address)
1a0063be:	687b      	ldr	r3, [r7, #4]
1a0063c0:	121b      	asrs	r3, r3, #8
1a0063c2:	b2db      	uxtb	r3, r3
1a0063c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a0063c8:	b2db      	uxtb	r3, r3
1a0063ca:	b2db      	uxtb	r3, r3
1a0063cc:	4619      	mov	r1, r3
1a0063ce:	481c      	ldr	r0, [pc, #112]	; (1a006440 <parseRS232CommandLine+0x244>)
1a0063d0:	f7fe fc80 	bl	1a004cd4 <pushByteToTransmission>
			pushByteToTransmission(&uart, i & 0xFF);                  // 2nd byte to send (X-address)
1a0063d4:	687b      	ldr	r3, [r7, #4]
1a0063d6:	b2db      	uxtb	r3, r3
1a0063d8:	4619      	mov	r1, r3
1a0063da:	4819      	ldr	r0, [pc, #100]	; (1a006440 <parseRS232CommandLine+0x244>)
1a0063dc:	f7fe fc7a 	bl	1a004cd4 <pushByteToTransmission>
			pushByteToTransmission(&uart, (i >> 8) & 0xFF); // 3rd byte to send (time stamp high byte)
1a0063e0:	687b      	ldr	r3, [r7, #4]
1a0063e2:	121b      	asrs	r3, r3, #8
1a0063e4:	b2db      	uxtb	r3, r3
1a0063e6:	4619      	mov	r1, r3
1a0063e8:	4815      	ldr	r0, [pc, #84]	; (1a006440 <parseRS232CommandLine+0x244>)
1a0063ea:	f7fe fc73 	bl	1a004cd4 <pushByteToTransmission>
			pushByteToTransmission(&uart, i & 0xFF);	// 4th byte to send (time stamp low byte)
1a0063ee:	687b      	ldr	r3, [r7, #4]
1a0063f0:	b2db      	uxtb	r3, r3
1a0063f2:	4619      	mov	r1, r3
1a0063f4:	4812      	ldr	r0, [pc, #72]	; (1a006440 <parseRS232CommandLine+0x244>)
1a0063f6:	f7fe fc6d 	bl	1a004cd4 <pushByteToTransmission>
			pushByteToTransmission(&uart, (i >> 24) & 0xFF);	// 3rd byte to send (time stamp high byte)
1a0063fa:	687b      	ldr	r3, [r7, #4]
1a0063fc:	0e1b      	lsrs	r3, r3, #24
1a0063fe:	b2db      	uxtb	r3, r3
1a006400:	4619      	mov	r1, r3
1a006402:	480f      	ldr	r0, [pc, #60]	; (1a006440 <parseRS232CommandLine+0x244>)
1a006404:	f7fe fc66 	bl	1a004cd4 <pushByteToTransmission>
			pushByteToTransmission(&uart, (i >> 16) & 0xFF);	// 4th byte to send (time stamp high byte)
1a006408:	687b      	ldr	r3, [r7, #4]
1a00640a:	141b      	asrs	r3, r3, #16
1a00640c:	b2db      	uxtb	r3, r3
1a00640e:	4619      	mov	r1, r3
1a006410:	480b      	ldr	r0, [pc, #44]	; (1a006440 <parseRS232CommandLine+0x244>)
1a006412:	f7fe fc5f 	bl	1a004cd4 <pushByteToTransmission>
		//
		break;
	}
	case 'W':
	case 'w':
		for (int i = 0; i < 20000000; ++i) {
1a006416:	687b      	ldr	r3, [r7, #4]
1a006418:	3301      	adds	r3, #1
1a00641a:	607b      	str	r3, [r7, #4]
1a00641c:	687b      	ldr	r3, [r7, #4]
1a00641e:	4a09      	ldr	r2, [pc, #36]	; (1a006444 <parseRS232CommandLine+0x248>)
1a006420:	4293      	cmp	r3, r2
1a006422:	ddc6      	ble.n	1a0063b2 <parseRS232CommandLine+0x1b6>
			pushByteToTransmission(&uart, i & 0xFF);	// 4th byte to send (time stamp low byte)
			pushByteToTransmission(&uart, (i >> 24) & 0xFF);	// 3rd byte to send (time stamp high byte)
			pushByteToTransmission(&uart, (i >> 16) & 0xFF);	// 4th byte to send (time stamp high byte)

		}
		break;
1a006424:	e004      	b.n	1a006430 <parseRS232CommandLine+0x234>

	default:
		xputs("?\n");
1a006426:	4808      	ldr	r0, [pc, #32]	; (1a006448 <parseRS232CommandLine+0x24c>)
1a006428:	f000 fa18 	bl	1a00685c <xputs>
	}
	return;
1a00642c:	e000      	b.n	1a006430 <parseRS232CommandLine+0x234>
		break;

	case 'S':
	case 's': {
		//
		break;
1a00642e:	bf00      	nop
		break;

	default:
		xputs("?\n");
	}
	return;
1a006430:	bf00      	nop
}
1a006432:	3708      	adds	r7, #8
1a006434:	46bd      	mov	sp, r7
1a006436:	bd80      	pop	{r7, pc}
1a006438:	1008887c 	.word	0x1008887c
1a00643c:	40081000 	.word	0x40081000
1a006440:	10000000 	.word	0x10000000
1a006444:	01312cff 	.word	0x01312cff
1a006448:	1a019c14 	.word	0x1a019c14

1a00644c <UART0ParseNewChar>:

// *****************************************************************************
// * ** RS232ParseNewChar ** */
// *****************************************************************************
void UART0ParseNewChar(unsigned char newChar) {
1a00644c:	b580      	push	{r7, lr}
1a00644e:	b082      	sub	sp, #8
1a006450:	af00      	add	r7, sp, #0
1a006452:	4603      	mov	r3, r0
1a006454:	71fb      	strb	r3, [r7, #7]

	if (freeSpaceForReception(&uart) < 16) {
1a006456:	483d      	ldr	r0, [pc, #244]	; (1a00654c <UART0ParseNewChar+0x100>)
1a006458:	f7fe fc5a 	bl	1a004d10 <freeSpaceForReception>
1a00645c:	4603      	mov	r3, r0
1a00645e:	2b0f      	cmp	r3, #15
1a006460:	d805      	bhi.n	1a00646e <UART0ParseNewChar+0x22>
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, RTS0_GPIO_PORT,
1a006462:	220a      	movs	r2, #10
1a006464:	2100      	movs	r1, #0
1a006466:	483a      	ldr	r0, [pc, #232]	; (1a006550 <UART0ParseNewChar+0x104>)
1a006468:	f7fe faa2 	bl	1a0049b0 <Chip_GPIO_SetPinOutHigh>
1a00646c:	e004      	b.n	1a006478 <UART0ParseNewChar+0x2c>
		RTS0_GPIO_PIN); //Signal busy to the DTE
	} else {
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, RTS0_GPIO_PORT,
1a00646e:	220a      	movs	r2, #10
1a006470:	2100      	movs	r1, #0
1a006472:	4837      	ldr	r0, [pc, #220]	; (1a006550 <UART0ParseNewChar+0x104>)
1a006474:	f7fe fab6 	bl	1a0049e4 <Chip_GPIO_SetPinOutLow>
		RTS0_GPIO_PIN); //Signal ready to the DTE
	}

	switch (newChar) {
1a006478:	79fb      	ldrb	r3, [r7, #7]
1a00647a:	2b0a      	cmp	r3, #10
1a00647c:	d01a      	beq.n	1a0064b4 <UART0ParseNewChar+0x68>
1a00647e:	2b0d      	cmp	r3, #13
1a006480:	d018      	beq.n	1a0064b4 <UART0ParseNewChar+0x68>
1a006482:	2b08      	cmp	r3, #8
1a006484:	d130      	bne.n	1a0064e8 <UART0ParseNewChar+0x9c>
	case 8:			// backspace
		if (commandLinePointer > 0) {
1a006486:	4b33      	ldr	r3, [pc, #204]	; (1a006554 <UART0ParseNewChar+0x108>)
1a006488:	681b      	ldr	r3, [r3, #0]
1a00648a:	2b00      	cmp	r3, #0
1a00648c:	d055      	beq.n	1a00653a <UART0ParseNewChar+0xee>
			commandLinePointer--;
1a00648e:	4b31      	ldr	r3, [pc, #196]	; (1a006554 <UART0ParseNewChar+0x108>)
1a006490:	681b      	ldr	r3, [r3, #0]
1a006492:	3b01      	subs	r3, #1
1a006494:	4a2f      	ldr	r2, [pc, #188]	; (1a006554 <UART0ParseNewChar+0x108>)
1a006496:	6013      	str	r3, [r2, #0]
			if ((eDVSProcessingMode == 0) && (enableUARTecho)) {
1a006498:	4b2f      	ldr	r3, [pc, #188]	; (1a006558 <UART0ParseNewChar+0x10c>)
1a00649a:	681b      	ldr	r3, [r3, #0]
1a00649c:	2b00      	cmp	r3, #0
1a00649e:	d14c      	bne.n	1a00653a <UART0ParseNewChar+0xee>
1a0064a0:	4b2e      	ldr	r3, [pc, #184]	; (1a00655c <UART0ParseNewChar+0x110>)
1a0064a2:	681b      	ldr	r3, [r3, #0]
1a0064a4:	2b00      	cmp	r3, #0
1a0064a6:	d048      	beq.n	1a00653a <UART0ParseNewChar+0xee>
				xprintf("%c %c", 8, 8);
1a0064a8:	2208      	movs	r2, #8
1a0064aa:	2108      	movs	r1, #8
1a0064ac:	482c      	ldr	r0, [pc, #176]	; (1a006560 <UART0ParseNewChar+0x114>)
1a0064ae:	f000 fb65 	bl	1a006b7c <xprintf>
			}
		}
		break;
1a0064b2:	e042      	b.n	1a00653a <UART0ParseNewChar+0xee>

	case 10:
	case 13:
		if ((eDVSProcessingMode == 0) && (enableUARTecho)) {
1a0064b4:	4b28      	ldr	r3, [pc, #160]	; (1a006558 <UART0ParseNewChar+0x10c>)
1a0064b6:	681b      	ldr	r3, [r3, #0]
1a0064b8:	2b00      	cmp	r3, #0
1a0064ba:	d106      	bne.n	1a0064ca <UART0ParseNewChar+0x7e>
1a0064bc:	4b27      	ldr	r3, [pc, #156]	; (1a00655c <UART0ParseNewChar+0x110>)
1a0064be:	681b      	ldr	r3, [r3, #0]
1a0064c0:	2b00      	cmp	r3, #0
1a0064c2:	d002      	beq.n	1a0064ca <UART0ParseNewChar+0x7e>
			UARTReturn();
1a0064c4:	200a      	movs	r0, #10
1a0064c6:	f000 f9a7 	bl	1a006818 <xputc>
		}
		if (commandLinePointer > 0) {
1a0064ca:	4b22      	ldr	r3, [pc, #136]	; (1a006554 <UART0ParseNewChar+0x108>)
1a0064cc:	681b      	ldr	r3, [r3, #0]
1a0064ce:	2b00      	cmp	r3, #0
1a0064d0:	d035      	beq.n	1a00653e <UART0ParseNewChar+0xf2>
			commandLine[commandLinePointer] = 0;
1a0064d2:	4b20      	ldr	r3, [pc, #128]	; (1a006554 <UART0ParseNewChar+0x108>)
1a0064d4:	681b      	ldr	r3, [r3, #0]
1a0064d6:	4a23      	ldr	r2, [pc, #140]	; (1a006564 <UART0ParseNewChar+0x118>)
1a0064d8:	2100      	movs	r1, #0
1a0064da:	54d1      	strb	r1, [r2, r3]
			parseRS232CommandLine();
1a0064dc:	f7ff fe8e 	bl	1a0061fc <parseRS232CommandLine>
			commandLinePointer = 0;
1a0064e0:	4b1c      	ldr	r3, [pc, #112]	; (1a006554 <UART0ParseNewChar+0x108>)
1a0064e2:	2200      	movs	r2, #0
1a0064e4:	601a      	str	r2, [r3, #0]
		}
		break;
1a0064e6:	e02a      	b.n	1a00653e <UART0ParseNewChar+0xf2>

	default:
		if (newChar & 0x80) {
1a0064e8:	79fb      	ldrb	r3, [r7, #7]
1a0064ea:	b25b      	sxtb	r3, r3
1a0064ec:	2b00      	cmp	r3, #0
1a0064ee:	db28      	blt.n	1a006542 <UART0ParseNewChar+0xf6>
			return; //only accept ASCII
		}
		if (commandLinePointer < UART_COMMAND_LINE_MAX_LENGTH - 1) {
1a0064f0:	4b18      	ldr	r3, [pc, #96]	; (1a006554 <UART0ParseNewChar+0x108>)
1a0064f2:	681b      	ldr	r3, [r3, #0]
1a0064f4:	2b7e      	cmp	r3, #126	; 0x7e
1a0064f6:	d814      	bhi.n	1a006522 <UART0ParseNewChar+0xd6>
			if ((eDVSProcessingMode == 0) && (enableUARTecho)) {
1a0064f8:	4b17      	ldr	r3, [pc, #92]	; (1a006558 <UART0ParseNewChar+0x10c>)
1a0064fa:	681b      	ldr	r3, [r3, #0]
1a0064fc:	2b00      	cmp	r3, #0
1a0064fe:	d107      	bne.n	1a006510 <UART0ParseNewChar+0xc4>
1a006500:	4b16      	ldr	r3, [pc, #88]	; (1a00655c <UART0ParseNewChar+0x110>)
1a006502:	681b      	ldr	r3, [r3, #0]
1a006504:	2b00      	cmp	r3, #0
1a006506:	d003      	beq.n	1a006510 <UART0ParseNewChar+0xc4>
				xputc(newChar);	  		   	// echo to indicate char arrived
1a006508:	79fb      	ldrb	r3, [r7, #7]
1a00650a:	4618      	mov	r0, r3
1a00650c:	f000 f984 	bl	1a006818 <xputc>
			}
			commandLine[commandLinePointer++] = newChar;
1a006510:	4b10      	ldr	r3, [pc, #64]	; (1a006554 <UART0ParseNewChar+0x108>)
1a006512:	681b      	ldr	r3, [r3, #0]
1a006514:	1c5a      	adds	r2, r3, #1
1a006516:	490f      	ldr	r1, [pc, #60]	; (1a006554 <UART0ParseNewChar+0x108>)
1a006518:	600a      	str	r2, [r1, #0]
1a00651a:	4912      	ldr	r1, [pc, #72]	; (1a006564 <UART0ParseNewChar+0x118>)
1a00651c:	79fa      	ldrb	r2, [r7, #7]
1a00651e:	54ca      	strb	r2, [r1, r3]
1a006520:	e010      	b.n	1a006544 <UART0ParseNewChar+0xf8>
		} else {
			commandLinePointer = 0;
1a006522:	4b0c      	ldr	r3, [pc, #48]	; (1a006554 <UART0ParseNewChar+0x108>)
1a006524:	2200      	movs	r2, #0
1a006526:	601a      	str	r2, [r3, #0]
			commandLine[commandLinePointer++] = newChar;
1a006528:	4b0a      	ldr	r3, [pc, #40]	; (1a006554 <UART0ParseNewChar+0x108>)
1a00652a:	681b      	ldr	r3, [r3, #0]
1a00652c:	1c5a      	adds	r2, r3, #1
1a00652e:	4909      	ldr	r1, [pc, #36]	; (1a006554 <UART0ParseNewChar+0x108>)
1a006530:	600a      	str	r2, [r1, #0]
1a006532:	490c      	ldr	r1, [pc, #48]	; (1a006564 <UART0ParseNewChar+0x118>)
1a006534:	79fa      	ldrb	r2, [r7, #7]
1a006536:	54ca      	strb	r2, [r1, r3]
1a006538:	e004      	b.n	1a006544 <UART0ParseNewChar+0xf8>
			commandLinePointer--;
			if ((eDVSProcessingMode == 0) && (enableUARTecho)) {
				xprintf("%c %c", 8, 8);
			}
		}
		break;
1a00653a:	bf00      	nop
1a00653c:	e002      	b.n	1a006544 <UART0ParseNewChar+0xf8>
		if (commandLinePointer > 0) {
			commandLine[commandLinePointer] = 0;
			parseRS232CommandLine();
			commandLinePointer = 0;
		}
		break;
1a00653e:	bf00      	nop
1a006540:	e000      	b.n	1a006544 <UART0ParseNewChar+0xf8>

	default:
		if (newChar & 0x80) {
			return; //only accept ASCII
1a006542:	bf00      	nop
			commandLinePointer = 0;
			commandLine[commandLinePointer++] = newChar;
		}
	}  // end of switch

}  // end of rs232ParseNewChar
1a006544:	3708      	adds	r7, #8
1a006546:	46bd      	mov	sp, r7
1a006548:	bd80      	pop	{r7, pc}
1a00654a:	bf00      	nop
1a00654c:	10000000 	.word	0x10000000
1a006550:	400f4000 	.word	0x400f4000
1a006554:	100888fc 	.word	0x100888fc
1a006558:	10087444 	.word	0x10087444
1a00655c:	10088878 	.word	0x10088878
1a006560:	1a019c18 	.word	0x1a019c18
1a006564:	1008887c 	.word	0x1008887c

1a006568 <Chip_RIT_GetCounter>:
 * @brief	Returns the current RIT Counter value
 * @param	pRITimer	: RITimer peripheral selected
 * @return	the current timer counter value
 */
STATIC INLINE uint32_t Chip_RIT_GetCounter(LPC_RITIMER_T *pRITimer)
{
1a006568:	b480      	push	{r7}
1a00656a:	b083      	sub	sp, #12
1a00656c:	af00      	add	r7, sp, #0
1a00656e:	6078      	str	r0, [r7, #4]
	return pRITimer->COUNTER;
1a006570:	687b      	ldr	r3, [r7, #4]
1a006572:	68db      	ldr	r3, [r3, #12]
}
1a006574:	4618      	mov	r0, r3
1a006576:	370c      	adds	r7, #12
1a006578:	46bd      	mov	sp, r7
1a00657a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00657e:	4770      	bx	lr

1a006580 <timerDelayUs>:
#include "utils.h"
#include "uart.h"
#include "cr_start_m0.h"
#include "build_defs.h"

void timerDelayUs(uint32_t timeUs) {
1a006580:	b580      	push	{r7, lr}
1a006582:	b084      	sub	sp, #16
1a006584:	af00      	add	r7, sp, #0
1a006586:	6078      	str	r0, [r7, #4]
	/* In an RTOS, the thread would sleep allowing other threads to run.
	 For standalone operation, we just spin on RI timer */
	int32_t curr = (int32_t) Chip_RIT_GetCounter(LPC_RITIMER);
1a006588:	4818      	ldr	r0, [pc, #96]	; (1a0065ec <timerDelayUs+0x6c>)
1a00658a:	f7ff ffed 	bl	1a006568 <Chip_RIT_GetCounter>
1a00658e:	4603      	mov	r3, r0
1a006590:	60fb      	str	r3, [r7, #12]
	int32_t final = curr + ((SystemCoreClock / 1000000) * timeUs);
1a006592:	4b17      	ldr	r3, [pc, #92]	; (1a0065f0 <timerDelayUs+0x70>)
1a006594:	681b      	ldr	r3, [r3, #0]
1a006596:	4a17      	ldr	r2, [pc, #92]	; (1a0065f4 <timerDelayUs+0x74>)
1a006598:	fba2 2303 	umull	r2, r3, r2, r3
1a00659c:	0c9b      	lsrs	r3, r3, #18
1a00659e:	687a      	ldr	r2, [r7, #4]
1a0065a0:	fb02 f203 	mul.w	r2, r2, r3
1a0065a4:	68fb      	ldr	r3, [r7, #12]
1a0065a6:	4413      	add	r3, r2
1a0065a8:	60bb      	str	r3, [r7, #8]

	if (final == curr)
1a0065aa:	68ba      	ldr	r2, [r7, #8]
1a0065ac:	68fb      	ldr	r3, [r7, #12]
1a0065ae:	429a      	cmp	r2, r3
1a0065b0:	d018      	beq.n	1a0065e4 <timerDelayUs+0x64>
		return;

	if ((final < 0) && (curr > 0)) {
1a0065b2:	68bb      	ldr	r3, [r7, #8]
1a0065b4:	2b00      	cmp	r3, #0
1a0065b6:	da0b      	bge.n	1a0065d0 <timerDelayUs+0x50>
1a0065b8:	68fb      	ldr	r3, [r7, #12]
1a0065ba:	2b00      	cmp	r3, #0
1a0065bc:	dd08      	ble.n	1a0065d0 <timerDelayUs+0x50>
		while (Chip_RIT_GetCounter(LPC_RITIMER) < (uint32_t) final) {
1a0065be:	bf00      	nop
1a0065c0:	480a      	ldr	r0, [pc, #40]	; (1a0065ec <timerDelayUs+0x6c>)
1a0065c2:	f7ff ffd1 	bl	1a006568 <Chip_RIT_GetCounter>
1a0065c6:	4602      	mov	r2, r0
1a0065c8:	68bb      	ldr	r3, [r7, #8]
1a0065ca:	429a      	cmp	r2, r3
1a0065cc:	d3f8      	bcc.n	1a0065c0 <timerDelayUs+0x40>
	int32_t final = curr + ((SystemCoreClock / 1000000) * timeUs);

	if (final == curr)
		return;

	if ((final < 0) && (curr > 0)) {
1a0065ce:	e00a      	b.n	1a0065e6 <timerDelayUs+0x66>
		while (Chip_RIT_GetCounter(LPC_RITIMER) < (uint32_t) final) {
		}
	} else {
		while ((int32_t) Chip_RIT_GetCounter(LPC_RITIMER) < final) {
1a0065d0:	bf00      	nop
1a0065d2:	4806      	ldr	r0, [pc, #24]	; (1a0065ec <timerDelayUs+0x6c>)
1a0065d4:	f7ff ffc8 	bl	1a006568 <Chip_RIT_GetCounter>
1a0065d8:	4603      	mov	r3, r0
1a0065da:	461a      	mov	r2, r3
1a0065dc:	68bb      	ldr	r3, [r7, #8]
1a0065de:	429a      	cmp	r2, r3
1a0065e0:	dbf7      	blt.n	1a0065d2 <timerDelayUs+0x52>
1a0065e2:	e000      	b.n	1a0065e6 <timerDelayUs+0x66>
	 For standalone operation, we just spin on RI timer */
	int32_t curr = (int32_t) Chip_RIT_GetCounter(LPC_RITIMER);
	int32_t final = curr + ((SystemCoreClock / 1000000) * timeUs);

	if (final == curr)
		return;
1a0065e4:	bf00      	nop
		}
	} else {
		while ((int32_t) Chip_RIT_GetCounter(LPC_RITIMER) < final) {
		}
	}
}
1a0065e6:	3710      	adds	r7, #16
1a0065e8:	46bd      	mov	sp, r7
1a0065ea:	bd80      	pop	{r7, pc}
1a0065ec:	400c0000 	.word	0x400c0000
1a0065f0:	10089100 	.word	0x10089100
1a0065f4:	431bde83 	.word	0x431bde83

1a0065f8 <timerDelayMs>:
void timerDelayMs(uint32_t timems) {
1a0065f8:	b580      	push	{r7, lr}
1a0065fa:	b084      	sub	sp, #16
1a0065fc:	af00      	add	r7, sp, #0
1a0065fe:	6078      	str	r0, [r7, #4]
	/* In an RTOS, the thread would sleep allowing other threads to run.
	 For standalone operation, we just spin on RI timer */
	int32_t curr = (int32_t) Chip_RIT_GetCounter(LPC_RITIMER);
1a006600:	4819      	ldr	r0, [pc, #100]	; (1a006668 <timerDelayMs+0x70>)
1a006602:	f7ff ffb1 	bl	1a006568 <Chip_RIT_GetCounter>
1a006606:	4603      	mov	r3, r0
1a006608:	60fb      	str	r3, [r7, #12]
	int32_t final = curr + ((SystemCoreClock / 1000) * timems);
1a00660a:	4b18      	ldr	r3, [pc, #96]	; (1a00666c <timerDelayMs+0x74>)
1a00660c:	681b      	ldr	r3, [r3, #0]
1a00660e:	4a18      	ldr	r2, [pc, #96]	; (1a006670 <timerDelayMs+0x78>)
1a006610:	fba2 2303 	umull	r2, r3, r2, r3
1a006614:	099b      	lsrs	r3, r3, #6
1a006616:	687a      	ldr	r2, [r7, #4]
1a006618:	fb02 f203 	mul.w	r2, r2, r3
1a00661c:	68fb      	ldr	r3, [r7, #12]
1a00661e:	4413      	add	r3, r2
1a006620:	60bb      	str	r3, [r7, #8]

	if (final == curr)
1a006622:	68ba      	ldr	r2, [r7, #8]
1a006624:	68fb      	ldr	r3, [r7, #12]
1a006626:	429a      	cmp	r2, r3
1a006628:	d019      	beq.n	1a00665e <timerDelayMs+0x66>
		return;

	if ((final < 0) && (curr > 0)) {
1a00662a:	68bb      	ldr	r3, [r7, #8]
1a00662c:	2b00      	cmp	r3, #0
1a00662e:	da0b      	bge.n	1a006648 <timerDelayMs+0x50>
1a006630:	68fb      	ldr	r3, [r7, #12]
1a006632:	2b00      	cmp	r3, #0
1a006634:	dd08      	ble.n	1a006648 <timerDelayMs+0x50>
		while (Chip_RIT_GetCounter(LPC_RITIMER) < (uint32_t) final) {
1a006636:	bf00      	nop
1a006638:	480b      	ldr	r0, [pc, #44]	; (1a006668 <timerDelayMs+0x70>)
1a00663a:	f7ff ff95 	bl	1a006568 <Chip_RIT_GetCounter>
1a00663e:	4602      	mov	r2, r0
1a006640:	68bb      	ldr	r3, [r7, #8]
1a006642:	429a      	cmp	r2, r3
1a006644:	d3f8      	bcc.n	1a006638 <timerDelayMs+0x40>
	int32_t final = curr + ((SystemCoreClock / 1000) * timems);

	if (final == curr)
		return;

	if ((final < 0) && (curr > 0)) {
1a006646:	e008      	b.n	1a00665a <timerDelayMs+0x62>
		while (Chip_RIT_GetCounter(LPC_RITIMER) < (uint32_t) final) {
		}
	} else {
		while ((int32_t) Chip_RIT_GetCounter(LPC_RITIMER) < final) {
1a006648:	bf00      	nop
1a00664a:	4807      	ldr	r0, [pc, #28]	; (1a006668 <timerDelayMs+0x70>)
1a00664c:	f7ff ff8c 	bl	1a006568 <Chip_RIT_GetCounter>
1a006650:	4603      	mov	r3, r0
1a006652:	461a      	mov	r2, r3
1a006654:	68bb      	ldr	r3, [r7, #8]
1a006656:	429a      	cmp	r2, r3
1a006658:	dbf7      	blt.n	1a00664a <timerDelayMs+0x52>
		}
	}

	return;
1a00665a:	bf00      	nop
1a00665c:	e000      	b.n	1a006660 <timerDelayMs+0x68>
	 For standalone operation, we just spin on RI timer */
	int32_t curr = (int32_t) Chip_RIT_GetCounter(LPC_RITIMER);
	int32_t final = curr + ((SystemCoreClock / 1000) * timems);

	if (final == curr)
		return;
1a00665e:	bf00      	nop
		while ((int32_t) Chip_RIT_GetCounter(LPC_RITIMER) < final) {
		}
	}

	return;
}
1a006660:	3710      	adds	r7, #16
1a006662:	46bd      	mov	sp, r7
1a006664:	bd80      	pop	{r7, pc}
1a006666:	bf00      	nop
1a006668:	400c0000 	.word	0x400c0000
1a00666c:	10089100 	.word	0x10089100
1a006670:	10624dd3 	.word	0x10624dd3

1a006674 <getTimerMs>:

void getTimerMs(uint32_t * ms) {
1a006674:	b480      	push	{r7}
1a006676:	b083      	sub	sp, #12
1a006678:	af00      	add	r7, sp, #0
1a00667a:	6078      	str	r0, [r7, #4]
	*ms = LPC_TIMER1->TC / 1000; //1Mhz /1000 =  1 ms
1a00667c:	4b06      	ldr	r3, [pc, #24]	; (1a006698 <getTimerMs+0x24>)
1a00667e:	689b      	ldr	r3, [r3, #8]
1a006680:	4a06      	ldr	r2, [pc, #24]	; (1a00669c <getTimerMs+0x28>)
1a006682:	fba2 2303 	umull	r2, r3, r2, r3
1a006686:	099a      	lsrs	r2, r3, #6
1a006688:	687b      	ldr	r3, [r7, #4]
1a00668a:	601a      	str	r2, [r3, #0]
}
1a00668c:	bf00      	nop
1a00668e:	370c      	adds	r7, #12
1a006690:	46bd      	mov	sp, r7
1a006692:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006696:	4770      	bx	lr
1a006698:	40085000 	.word	0x40085000
1a00669c:	10624dd3 	.word	0x10624dd3

1a0066a0 <resetDevice>:

void resetDevice() {
1a0066a0:	b580      	push	{r7, lr}
1a0066a2:	af00      	add	r7, sp, #0
	/**
	 * Using the Reset generation unit, activate the signal that the reset button does
	 * which means the consequences of physical and software reset should be the same.
	 */
	Chip_RGU_TriggerReset(RGU_CORE_RST);
1a0066a4:	2000      	movs	r0, #0
1a0066a6:	f00c fc51 	bl	1a012f4c <Chip_RGU_TriggerReset>
	Chip_RGU_ClearReset(RGU_CORE_RST);
1a0066aa:	2000      	movs	r0, #0
1a0066ac:	f00c fc6e 	bl	1a012f8c <Chip_RGU_ClearReset>
}
1a0066b0:	bf00      	nop
1a0066b2:	bd80      	pop	{r7, pc}

1a0066b4 <enterReprogrammingMode>:
#define REPROGRAMMING_UART_BAUD		115200
/* Internal oscillator frequency */
#define CGU_IRC_FREQ 				(12000000)
#define ISP_CLOCK_FREQ 				(96000000)

void enterReprogrammingMode() {
1a0066b4:	b580      	push	{r7, lr}
1a0066b6:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1a0066b8:	b672      	cpsid	i
	//Disable interrupts
	__disable_irq();
	//Stop the M0 core
	haltSlave();
1a0066ba:	f7fa fc2f 	bl	1a000f1c <haltSlave>

	LPC_RGU->RESET_CTRL0 = 0x10DF1200;
1a0066be:	4b10      	ldr	r3, [pc, #64]	; (1a006700 <enterReprogrammingMode+0x4c>)
1a0066c0:	4a10      	ldr	r2, [pc, #64]	; (1a006704 <enterReprogrammingMode+0x50>)
1a0066c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	// GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
	// USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST|SCU_RST

	LPC_RGU->RESET_CTRL1 = 0x01DFF7FF;
1a0066c6:	4b0e      	ldr	r3, [pc, #56]	; (1a006700 <enterReprogrammingMode+0x4c>)
1a0066c8:	4a0f      	ldr	r2, [pc, #60]	; (1a006708 <enterReprogrammingMode+0x54>)
1a0066ca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// I2C1_RST|I2C0_RST|UART3_RST|UART1_RST|UART1_RST|UART0_RST|
	// DAC_RST|ADC1_RST|ADC0_RST|QEI_RST|MOTOCONPWM_RST|SCT_RST|
	// RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

	/* Switch UART clock to IRC */
	Chip_Clock_SetBaseClock(CLK_BASE_UART0, CLKIN_IRC, true, false);
1a0066ce:	2300      	movs	r3, #0
1a0066d0:	2201      	movs	r2, #1
1a0066d2:	2101      	movs	r1, #1
1a0066d4:	2010      	movs	r0, #16
1a0066d6:	f00b fdbb 	bl	1a012250 <Chip_Clock_SetBaseClock>
	/* Setup PLL for ISP clock */
	Chip_Clock_SetupMainPLLHz(CLKIN_IRC, CGU_IRC_FREQ, ISP_CLOCK_FREQ, ISP_CLOCK_FREQ);
1a0066da:	4b0c      	ldr	r3, [pc, #48]	; (1a00670c <enterReprogrammingMode+0x58>)
1a0066dc:	4a0b      	ldr	r2, [pc, #44]	; (1a00670c <enterReprogrammingMode+0x58>)
1a0066de:	490c      	ldr	r1, [pc, #48]	; (1a006710 <enterReprogrammingMode+0x5c>)
1a0066e0:	2001      	movs	r0, #1
1a0066e2:	f00b fb45 	bl	1a011d70 <Chip_Clock_SetupMainPLLHz>
	Chip_UART_DeInit(LPC_USART0);
1a0066e6:	480b      	ldr	r0, [pc, #44]	; (1a006714 <enterReprogrammingMode+0x60>)
1a0066e8:	f00c ff0a 	bl	1a013500 <Chip_UART_DeInit>
	//Make sure UART0 is configured correctly
	UARTInit(LPC_USART0, REPROGRAMMING_UART_BAUD);
1a0066ec:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0066f0:	4808      	ldr	r0, [pc, #32]	; (1a006714 <enterReprogrammingMode+0x60>)
1a0066f2:	f7fe fb85 	bl	1a004e00 <UARTInit>
	Chip_IAP_ReinvokeISP();
1a0066f6:	f00c fbaf 	bl	1a012e58 <Chip_IAP_ReinvokeISP>
}
1a0066fa:	bf00      	nop
1a0066fc:	bd80      	pop	{r7, pc}
1a0066fe:	bf00      	nop
1a006700:	40053000 	.word	0x40053000
1a006704:	10df1200 	.word	0x10df1200
1a006708:	01dff7ff 	.word	0x01dff7ff
1a00670c:	05b8d800 	.word	0x05b8d800
1a006710:	00b71b00 	.word	0x00b71b00
1a006714:	40081000 	.word	0x40081000

1a006718 <disablePeripherals>:

void disablePeripherals() {
1a006718:	b580      	push	{r7, lr}
1a00671a:	af00      	add	r7, sp, #0
	 * The order is relevant.
	 * The peripherals' clocks is disabled first, then the base clocks and
	 * finally the PLLs.
	 * Inversion of this order may lead to lockup.
	 */
	Chip_Clock_Disable(CLK_APB3_CAN0);
1a00671c:	2005      	movs	r0, #5
1a00671e:	f00b feaf 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_APB1_I2S);
1a006722:	2023      	movs	r0, #35	; 0x23
1a006724:	f00b feac 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_APB1_CAN1);
1a006728:	2024      	movs	r0, #36	; 0x24
1a00672a:	f00b fea9 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_SPIFI);
1a00672e:	2061      	movs	r0, #97	; 0x61
1a006730:	f00b fea6 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_LCD);
1a006734:	2063      	movs	r0, #99	; 0x63
1a006736:	f00b fea3 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_ETHERNET);
1a00673a:	2064      	movs	r0, #100	; 0x64
1a00673c:	f00b fea0 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_USB0);
1a006740:	2065      	movs	r0, #101	; 0x65
1a006742:	f00b fe9d 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_EMC);
1a006746:	2066      	movs	r0, #102	; 0x66
1a006748:	f00b fe9a 	bl	1a012480 <Chip_Clock_Disable>
#if !USE_SDCARD
	Chip_Clock_Disable(CLK_MX_SDIO);
1a00674c:	2067      	movs	r0, #103	; 0x67
1a00674e:	f00b fe97 	bl	1a012480 <Chip_Clock_Disable>
#endif
	Chip_Clock_Disable(CLK_MX_DMA);
1a006752:	2068      	movs	r0, #104	; 0x68
1a006754:	f00b fe94 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_SCT);
1a006758:	206d      	movs	r0, #109	; 0x6d
1a00675a:	f00b fe91 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_USB1);
1a00675e:	206e      	movs	r0, #110	; 0x6e
1a006760:	f00b fe8e 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_EMC_DIV);
1a006764:	206f      	movs	r0, #111	; 0x6f
1a006766:	f00b fe8b 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_FLASHB);
1a00676a:	2071      	movs	r0, #113	; 0x71
1a00676c:	f00b fe88 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_ADCHS);
1a006770:	2073      	movs	r0, #115	; 0x73
1a006772:	f00b fe85 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_EEPROM);
1a006776:	2074      	movs	r0, #116	; 0x74
1a006778:	f00b fe82 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_WWDT);
1a00677c:	2080      	movs	r0, #128	; 0x80
1a00677e:	f00b fe7f 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_SSP0);
1a006782:	2083      	movs	r0, #131	; 0x83
1a006784:	f00b fe7c 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_TIMER0);
1a006788:	2084      	movs	r0, #132	; 0x84
1a00678a:	f00b fe79 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_UART2);
1a00678e:	20a1      	movs	r0, #161	; 0xa1
1a006790:	f00b fe76 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_UART3);
1a006794:	20a2      	movs	r0, #162	; 0xa2
1a006796:	f00b fe73 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_TIMER2);
1a00679a:	20a3      	movs	r0, #163	; 0xa3
1a00679c:	f00b fe70 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_TIMER3);
1a0067a0:	20a4      	movs	r0, #164	; 0xa4
1a0067a2:	f00b fe6d 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_SSP1);
1a0067a6:	20a5      	movs	r0, #165	; 0xa5
1a0067a8:	f00b fe6a 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_QEI);
1a0067ac:	20a6      	movs	r0, #166	; 0xa6
1a0067ae:	f00b fe67 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_PERIPH_SGPIO);
1a0067b2:	20c3      	movs	r0, #195	; 0xc3
1a0067b4:	f00b fe64 	bl	1a012480 <Chip_Clock_Disable>
	Chip_Clock_DisableBaseClock(CLK_BASE_USB0);
1a0067b8:	2001      	movs	r0, #1
1a0067ba:	f00b fd97 	bl	1a0122ec <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_USB1);
1a0067be:	2003      	movs	r0, #3
1a0067c0:	f00b fd94 	bl	1a0122ec <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_SPIFI);
1a0067c4:	2005      	movs	r0, #5
1a0067c6:	f00b fd91 	bl	1a0122ec <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_PHY_RX);
1a0067ca:	2007      	movs	r0, #7
1a0067cc:	f00b fd8e 	bl	1a0122ec <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_LCD);
1a0067d0:	200b      	movs	r0, #11
1a0067d2:	f00b fd8b 	bl	1a0122ec <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_ADCHS);
1a0067d6:	200c      	movs	r0, #12
1a0067d8:	f00b fd88 	bl	1a0122ec <Chip_Clock_DisableBaseClock>
#if !USE_SDCARD
	Chip_Clock_DisableBaseClock(CLK_BASE_SDIO);
1a0067dc:	200d      	movs	r0, #13
1a0067de:	f00b fd85 	bl	1a0122ec <Chip_Clock_DisableBaseClock>
#endif
	Chip_Clock_DisableBaseClock(CLK_BASE_UART2);
1a0067e2:	2012      	movs	r0, #18
1a0067e4:	f00b fd82 	bl	1a0122ec <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_UART3);
1a0067e8:	2013      	movs	r0, #19
1a0067ea:	f00b fd7f 	bl	1a0122ec <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_OUT);
1a0067ee:	2014      	movs	r0, #20
1a0067f0:	f00b fd7c 	bl	1a0122ec <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_APLL);
1a0067f4:	2019      	movs	r0, #25
1a0067f6:	f00b fd79 	bl	1a0122ec <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_CGU_OUT0);
1a0067fa:	201a      	movs	r0, #26
1a0067fc:	f00b fd76 	bl	1a0122ec <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_CGU_OUT1);
1a006800:	201b      	movs	r0, #27
1a006802:	f00b fd73 	bl	1a0122ec <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisablePLL(CGU_USB_PLL);
1a006806:	2000      	movs	r0, #0
1a006808:	f00b feae 	bl	1a012568 <Chip_Clock_DisablePLL>
	Chip_Clock_DisablePLL(CGU_AUDIO_PLL);
1a00680c:	2001      	movs	r0, #1
1a00680e:	f00b feab 	bl	1a012568 <Chip_Clock_DisablePLL>
}
1a006812:	bf00      	nop
1a006814:	bd80      	pop	{r7, pc}
1a006816:	bf00      	nop

1a006818 <xputc>:

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc(char c) {
1a006818:	b580      	push	{r7, lr}
1a00681a:	b082      	sub	sp, #8
1a00681c:	af00      	add	r7, sp, #0
1a00681e:	4603      	mov	r3, r0
1a006820:	71fb      	strb	r3, [r7, #7]
	if (outptr) {
1a006822:	4b0c      	ldr	r3, [pc, #48]	; (1a006854 <xputc+0x3c>)
1a006824:	681b      	ldr	r3, [r3, #0]
1a006826:	2b00      	cmp	r3, #0
1a006828:	d007      	beq.n	1a00683a <xputc+0x22>
		*outptr++ = (unsigned char) c;
1a00682a:	4b0a      	ldr	r3, [pc, #40]	; (1a006854 <xputc+0x3c>)
1a00682c:	681b      	ldr	r3, [r3, #0]
1a00682e:	1c5a      	adds	r2, r3, #1
1a006830:	4908      	ldr	r1, [pc, #32]	; (1a006854 <xputc+0x3c>)
1a006832:	600a      	str	r2, [r1, #0]
1a006834:	79fa      	ldrb	r2, [r7, #7]
1a006836:	701a      	strb	r2, [r3, #0]
		return;
1a006838:	e008      	b.n	1a00684c <xputc+0x34>
	}

	if (xfunc_out)
1a00683a:	4b07      	ldr	r3, [pc, #28]	; (1a006858 <xputc+0x40>)
1a00683c:	681b      	ldr	r3, [r3, #0]
1a00683e:	2b00      	cmp	r3, #0
1a006840:	d004      	beq.n	1a00684c <xputc+0x34>
		xfunc_out((unsigned char) c);
1a006842:	4b05      	ldr	r3, [pc, #20]	; (1a006858 <xputc+0x40>)
1a006844:	681b      	ldr	r3, [r3, #0]
1a006846:	79fa      	ldrb	r2, [r7, #7]
1a006848:	4610      	mov	r0, r2
1a00684a:	4798      	blx	r3
}
1a00684c:	3708      	adds	r7, #8
1a00684e:	46bd      	mov	sp, r7
1a006850:	bd80      	pop	{r7, pc}
1a006852:	bf00      	nop
1a006854:	10086594 	.word	0x10086594
1a006858:	10088900 	.word	0x10088900

1a00685c <xputs>:
/* Put a null-terminated string                 */
/*----------------------------------------------*/

void xputs( /* Put a string to the default device */
const char* str /* Pointer to the string */
) {
1a00685c:	b580      	push	{r7, lr}
1a00685e:	b082      	sub	sp, #8
1a006860:	af00      	add	r7, sp, #0
1a006862:	6078      	str	r0, [r7, #4]
	while (*str)
1a006864:	e006      	b.n	1a006874 <xputs+0x18>
		xputc(*str++);
1a006866:	687b      	ldr	r3, [r7, #4]
1a006868:	1c5a      	adds	r2, r3, #1
1a00686a:	607a      	str	r2, [r7, #4]
1a00686c:	781b      	ldrb	r3, [r3, #0]
1a00686e:	4618      	mov	r0, r3
1a006870:	f7ff ffd2 	bl	1a006818 <xputc>
/*----------------------------------------------*/

void xputs( /* Put a string to the default device */
const char* str /* Pointer to the string */
) {
	while (*str)
1a006874:	687b      	ldr	r3, [r7, #4]
1a006876:	781b      	ldrb	r3, [r3, #0]
1a006878:	2b00      	cmp	r3, #0
1a00687a:	d1f4      	bne.n	1a006866 <xputs+0xa>
		xputc(*str++);
}
1a00687c:	bf00      	nop
1a00687e:	3708      	adds	r7, #8
1a006880:	46bd      	mov	sp, r7
1a006882:	bd80      	pop	{r7, pc}

1a006884 <xvprintf>:
 */

static
void xvprintf(const char* fmt, /* Pointer to the format string */
va_list arp /* Pointer to arguments */
) {
1a006884:	b580      	push	{r7, lr}
1a006886:	b08e      	sub	sp, #56	; 0x38
1a006888:	af00      	add	r7, sp, #0
1a00688a:	6078      	str	r0, [r7, #4]
1a00688c:	6039      	str	r1, [r7, #0]
	unsigned int r, i, j, w, f;
	unsigned long v;
	char s[16], c, d, *p;

	for (;;) {
		c = *fmt++; /* Get a char */
1a00688e:	687b      	ldr	r3, [r7, #4]
1a006890:	1c5a      	adds	r2, r3, #1
1a006892:	607a      	str	r2, [r7, #4]
1a006894:	781b      	ldrb	r3, [r3, #0]
1a006896:	77fb      	strb	r3, [r7, #31]
		if (!c)
1a006898:	7ffb      	ldrb	r3, [r7, #31]
1a00689a:	2b00      	cmp	r3, #0
1a00689c:	f000 8167 	beq.w	1a006b6e <xvprintf+0x2ea>
			break; /* End of format? */
		if (c != '%') { /* Pass through it if not a % sequense */
1a0068a0:	7ffb      	ldrb	r3, [r7, #31]
1a0068a2:	2b25      	cmp	r3, #37	; 0x25
1a0068a4:	d004      	beq.n	1a0068b0 <xvprintf+0x2c>
			xputc(c);
1a0068a6:	7ffb      	ldrb	r3, [r7, #31]
1a0068a8:	4618      	mov	r0, r3
1a0068aa:	f7ff ffb5 	bl	1a006818 <xputc>
			continue;
1a0068ae:	e15d      	b.n	1a006b6c <xvprintf+0x2e8>
		}
		f = 0;
1a0068b0:	2300      	movs	r3, #0
1a0068b2:	627b      	str	r3, [r7, #36]	; 0x24
		c = *fmt++; /* Get first char of the sequense */
1a0068b4:	687b      	ldr	r3, [r7, #4]
1a0068b6:	1c5a      	adds	r2, r3, #1
1a0068b8:	607a      	str	r2, [r7, #4]
1a0068ba:	781b      	ldrb	r3, [r3, #0]
1a0068bc:	77fb      	strb	r3, [r7, #31]
		if (c == '0') { /* Flag: '0' padded */
1a0068be:	7ffb      	ldrb	r3, [r7, #31]
1a0068c0:	2b30      	cmp	r3, #48	; 0x30
1a0068c2:	d107      	bne.n	1a0068d4 <xvprintf+0x50>
			f = 1;
1a0068c4:	2301      	movs	r3, #1
1a0068c6:	627b      	str	r3, [r7, #36]	; 0x24
			c = *fmt++;
1a0068c8:	687b      	ldr	r3, [r7, #4]
1a0068ca:	1c5a      	adds	r2, r3, #1
1a0068cc:	607a      	str	r2, [r7, #4]
1a0068ce:	781b      	ldrb	r3, [r3, #0]
1a0068d0:	77fb      	strb	r3, [r7, #31]
1a0068d2:	e009      	b.n	1a0068e8 <xvprintf+0x64>
		} else {
			if (c == '-') { /* Flag: left justified */
1a0068d4:	7ffb      	ldrb	r3, [r7, #31]
1a0068d6:	2b2d      	cmp	r3, #45	; 0x2d
1a0068d8:	d106      	bne.n	1a0068e8 <xvprintf+0x64>
				f = 2;
1a0068da:	2302      	movs	r3, #2
1a0068dc:	627b      	str	r3, [r7, #36]	; 0x24
				c = *fmt++;
1a0068de:	687b      	ldr	r3, [r7, #4]
1a0068e0:	1c5a      	adds	r2, r3, #1
1a0068e2:	607a      	str	r2, [r7, #4]
1a0068e4:	781b      	ldrb	r3, [r3, #0]
1a0068e6:	77fb      	strb	r3, [r7, #31]
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++) /* Minimum width */
1a0068e8:	2300      	movs	r3, #0
1a0068ea:	62bb      	str	r3, [r7, #40]	; 0x28
1a0068ec:	e00e      	b.n	1a00690c <xvprintf+0x88>
			w = w * 10 + c - '0';
1a0068ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a0068f0:	4613      	mov	r3, r2
1a0068f2:	009b      	lsls	r3, r3, #2
1a0068f4:	4413      	add	r3, r2
1a0068f6:	005b      	lsls	r3, r3, #1
1a0068f8:	461a      	mov	r2, r3
1a0068fa:	7ffb      	ldrb	r3, [r7, #31]
1a0068fc:	4413      	add	r3, r2
1a0068fe:	3b30      	subs	r3, #48	; 0x30
1a006900:	62bb      	str	r3, [r7, #40]	; 0x28
			if (c == '-') { /* Flag: left justified */
				f = 2;
				c = *fmt++;
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++) /* Minimum width */
1a006902:	687b      	ldr	r3, [r7, #4]
1a006904:	1c5a      	adds	r2, r3, #1
1a006906:	607a      	str	r2, [r7, #4]
1a006908:	781b      	ldrb	r3, [r3, #0]
1a00690a:	77fb      	strb	r3, [r7, #31]
1a00690c:	7ffb      	ldrb	r3, [r7, #31]
1a00690e:	2b2f      	cmp	r3, #47	; 0x2f
1a006910:	d902      	bls.n	1a006918 <xvprintf+0x94>
1a006912:	7ffb      	ldrb	r3, [r7, #31]
1a006914:	2b39      	cmp	r3, #57	; 0x39
1a006916:	d9ea      	bls.n	1a0068ee <xvprintf+0x6a>
			w = w * 10 + c - '0';
		if (c == 'l' || c == 'L') { /* Prefix: Size is long int */
1a006918:	7ffb      	ldrb	r3, [r7, #31]
1a00691a:	2b6c      	cmp	r3, #108	; 0x6c
1a00691c:	d002      	beq.n	1a006924 <xvprintf+0xa0>
1a00691e:	7ffb      	ldrb	r3, [r7, #31]
1a006920:	2b4c      	cmp	r3, #76	; 0x4c
1a006922:	d108      	bne.n	1a006936 <xvprintf+0xb2>
			f |= 4;
1a006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a006926:	f043 0304 	orr.w	r3, r3, #4
1a00692a:	627b      	str	r3, [r7, #36]	; 0x24
			c = *fmt++;
1a00692c:	687b      	ldr	r3, [r7, #4]
1a00692e:	1c5a      	adds	r2, r3, #1
1a006930:	607a      	str	r2, [r7, #4]
1a006932:	781b      	ldrb	r3, [r3, #0]
1a006934:	77fb      	strb	r3, [r7, #31]
		}
		if (!c)
1a006936:	7ffb      	ldrb	r3, [r7, #31]
1a006938:	2b00      	cmp	r3, #0
1a00693a:	f000 811a 	beq.w	1a006b72 <xvprintf+0x2ee>
			break; /* End of format? */
		d = c;
1a00693e:	7ffb      	ldrb	r3, [r7, #31]
1a006940:	77bb      	strb	r3, [r7, #30]
		if (d >= 'a')
1a006942:	7fbb      	ldrb	r3, [r7, #30]
1a006944:	2b60      	cmp	r3, #96	; 0x60
1a006946:	d902      	bls.n	1a00694e <xvprintf+0xca>
			d -= 0x20;
1a006948:	7fbb      	ldrb	r3, [r7, #30]
1a00694a:	3b20      	subs	r3, #32
1a00694c:	77bb      	strb	r3, [r7, #30]
		switch (d) { /* Type is... */
1a00694e:	7fbb      	ldrb	r3, [r7, #30]
1a006950:	3b42      	subs	r3, #66	; 0x42
1a006952:	2b16      	cmp	r3, #22
1a006954:	d873      	bhi.n	1a006a3e <xvprintf+0x1ba>
1a006956:	a201      	add	r2, pc, #4	; (adr r2, 1a00695c <xvprintf+0xd8>)
1a006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a00695c:	1a006a27 	.word	0x1a006a27
1a006960:	1a006a15 	.word	0x1a006a15
1a006964:	1a006a33 	.word	0x1a006a33
1a006968:	1a006a3f 	.word	0x1a006a3f
1a00696c:	1a006a3f 	.word	0x1a006a3f
1a006970:	1a006a3f 	.word	0x1a006a3f
1a006974:	1a006a3f 	.word	0x1a006a3f
1a006978:	1a006a3f 	.word	0x1a006a3f
1a00697c:	1a006a3f 	.word	0x1a006a3f
1a006980:	1a006a3f 	.word	0x1a006a3f
1a006984:	1a006a3f 	.word	0x1a006a3f
1a006988:	1a006a3f 	.word	0x1a006a3f
1a00698c:	1a006a3f 	.word	0x1a006a3f
1a006990:	1a006a2d 	.word	0x1a006a2d
1a006994:	1a006a3f 	.word	0x1a006a3f
1a006998:	1a006a3f 	.word	0x1a006a3f
1a00699c:	1a006a3f 	.word	0x1a006a3f
1a0069a0:	1a0069b9 	.word	0x1a0069b9
1a0069a4:	1a006a3f 	.word	0x1a006a3f
1a0069a8:	1a006a33 	.word	0x1a006a33
1a0069ac:	1a006a3f 	.word	0x1a006a3f
1a0069b0:	1a006a3f 	.word	0x1a006a3f
1a0069b4:	1a006a39 	.word	0x1a006a39
		case 'S': /* String */
			p = va_arg(arp, char*);
1a0069b8:	683b      	ldr	r3, [r7, #0]
1a0069ba:	1d1a      	adds	r2, r3, #4
1a0069bc:	603a      	str	r2, [r7, #0]
1a0069be:	681b      	ldr	r3, [r3, #0]
1a0069c0:	61bb      	str	r3, [r7, #24]
			for (j = 0; p[j]; j++)
1a0069c2:	2300      	movs	r3, #0
1a0069c4:	62fb      	str	r3, [r7, #44]	; 0x2c
1a0069c6:	e002      	b.n	1a0069ce <xvprintf+0x14a>
1a0069c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0069ca:	3301      	adds	r3, #1
1a0069cc:	62fb      	str	r3, [r7, #44]	; 0x2c
1a0069ce:	69ba      	ldr	r2, [r7, #24]
1a0069d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0069d2:	4413      	add	r3, r2
1a0069d4:	781b      	ldrb	r3, [r3, #0]
1a0069d6:	2b00      	cmp	r3, #0
1a0069d8:	d1f6      	bne.n	1a0069c8 <xvprintf+0x144>
				;
			while (!(f & 2) && j++ < w)
1a0069da:	e002      	b.n	1a0069e2 <xvprintf+0x15e>
				xputc(' ');
1a0069dc:	2020      	movs	r0, #32
1a0069de:	f7ff ff1b 	bl	1a006818 <xputc>
		switch (d) { /* Type is... */
		case 'S': /* String */
			p = va_arg(arp, char*);
			for (j = 0; p[j]; j++)
				;
			while (!(f & 2) && j++ < w)
1a0069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0069e4:	f003 0302 	and.w	r3, r3, #2
1a0069e8:	2b00      	cmp	r3, #0
1a0069ea:	d105      	bne.n	1a0069f8 <xvprintf+0x174>
1a0069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0069ee:	1c5a      	adds	r2, r3, #1
1a0069f0:	62fa      	str	r2, [r7, #44]	; 0x2c
1a0069f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a0069f4:	4293      	cmp	r3, r2
1a0069f6:	d3f1      	bcc.n	1a0069dc <xvprintf+0x158>
				xputc(' ');
			xputs(p);
1a0069f8:	69b8      	ldr	r0, [r7, #24]
1a0069fa:	f7ff ff2f 	bl	1a00685c <xputs>
			while (j++ < w)
1a0069fe:	e002      	b.n	1a006a06 <xvprintf+0x182>
				xputc(' ');
1a006a00:	2020      	movs	r0, #32
1a006a02:	f7ff ff09 	bl	1a006818 <xputc>
			for (j = 0; p[j]; j++)
				;
			while (!(f & 2) && j++ < w)
				xputc(' ');
			xputs(p);
			while (j++ < w)
1a006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a006a08:	1c5a      	adds	r2, r3, #1
1a006a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
1a006a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a006a0e:	4293      	cmp	r3, r2
1a006a10:	d3f6      	bcc.n	1a006a00 <xvprintf+0x17c>
				xputc(' ');
			continue;
1a006a12:	e0ab      	b.n	1a006b6c <xvprintf+0x2e8>
		case 'C': /* Character */
			xputc((char) va_arg(arp, int));
1a006a14:	683b      	ldr	r3, [r7, #0]
1a006a16:	1d1a      	adds	r2, r3, #4
1a006a18:	603a      	str	r2, [r7, #0]
1a006a1a:	681b      	ldr	r3, [r3, #0]
1a006a1c:	b2db      	uxtb	r3, r3
1a006a1e:	4618      	mov	r0, r3
1a006a20:	f7ff fefa 	bl	1a006818 <xputc>
			continue;
1a006a24:	e0a2      	b.n	1a006b6c <xvprintf+0x2e8>
		case 'B': /* Binary */
			r = 2;
1a006a26:	2302      	movs	r3, #2
1a006a28:	637b      	str	r3, [r7, #52]	; 0x34
			break;
1a006a2a:	e00d      	b.n	1a006a48 <xvprintf+0x1c4>
		case 'O': /* Octal */
			r = 8;
1a006a2c:	2308      	movs	r3, #8
1a006a2e:	637b      	str	r3, [r7, #52]	; 0x34
			break;
1a006a30:	e00a      	b.n	1a006a48 <xvprintf+0x1c4>
		case 'D': /* Signed decimal */
		case 'U': /* Unsigned decimal */
			r = 10;
1a006a32:	230a      	movs	r3, #10
1a006a34:	637b      	str	r3, [r7, #52]	; 0x34
			break;
1a006a36:	e007      	b.n	1a006a48 <xvprintf+0x1c4>
		case 'X': /* Hexdecimal */
			r = 16;
1a006a38:	2310      	movs	r3, #16
1a006a3a:	637b      	str	r3, [r7, #52]	; 0x34
			break;
1a006a3c:	e004      	b.n	1a006a48 <xvprintf+0x1c4>
		default: /* Unknown type (passthrough) */
			xputc(c);
1a006a3e:	7ffb      	ldrb	r3, [r7, #31]
1a006a40:	4618      	mov	r0, r3
1a006a42:	f7ff fee9 	bl	1a006818 <xputc>
			continue;
1a006a46:	e091      	b.n	1a006b6c <xvprintf+0x2e8>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long) va_arg(arp, int) : (long) va_arg(arp, unsigned int));
1a006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a006a4a:	f003 0304 	and.w	r3, r3, #4
1a006a4e:	2b00      	cmp	r3, #0
1a006a50:	d004      	beq.n	1a006a5c <xvprintf+0x1d8>
1a006a52:	683b      	ldr	r3, [r7, #0]
1a006a54:	1d1a      	adds	r2, r3, #4
1a006a56:	603a      	str	r2, [r7, #0]
1a006a58:	681b      	ldr	r3, [r3, #0]
1a006a5a:	e00b      	b.n	1a006a74 <xvprintf+0x1f0>
1a006a5c:	7fbb      	ldrb	r3, [r7, #30]
1a006a5e:	2b44      	cmp	r3, #68	; 0x44
1a006a60:	d104      	bne.n	1a006a6c <xvprintf+0x1e8>
1a006a62:	683b      	ldr	r3, [r7, #0]
1a006a64:	1d1a      	adds	r2, r3, #4
1a006a66:	603a      	str	r2, [r7, #0]
1a006a68:	681b      	ldr	r3, [r3, #0]
1a006a6a:	e003      	b.n	1a006a74 <xvprintf+0x1f0>
1a006a6c:	683b      	ldr	r3, [r7, #0]
1a006a6e:	1d1a      	adds	r2, r3, #4
1a006a70:	603a      	str	r2, [r7, #0]
1a006a72:	681b      	ldr	r3, [r3, #0]
1a006a74:	623b      	str	r3, [r7, #32]
		if (d == 'D' && (v & 0x80000000)) {
1a006a76:	7fbb      	ldrb	r3, [r7, #30]
1a006a78:	2b44      	cmp	r3, #68	; 0x44
1a006a7a:	d109      	bne.n	1a006a90 <xvprintf+0x20c>
1a006a7c:	6a3b      	ldr	r3, [r7, #32]
1a006a7e:	2b00      	cmp	r3, #0
1a006a80:	da06      	bge.n	1a006a90 <xvprintf+0x20c>
			v = 0 - v;
1a006a82:	6a3b      	ldr	r3, [r7, #32]
1a006a84:	425b      	negs	r3, r3
1a006a86:	623b      	str	r3, [r7, #32]
			f |= 8;
1a006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a006a8a:	f043 0308 	orr.w	r3, r3, #8
1a006a8e:	627b      	str	r3, [r7, #36]	; 0x24
		}
		i = 0;
1a006a90:	2300      	movs	r3, #0
1a006a92:	633b      	str	r3, [r7, #48]	; 0x30
		do {
			d = (char) (v % r);
1a006a94:	6a3b      	ldr	r3, [r7, #32]
1a006a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1a006a98:	fbb3 f2f2 	udiv	r2, r3, r2
1a006a9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
1a006a9e:	fb01 f202 	mul.w	r2, r1, r2
1a006aa2:	1a9b      	subs	r3, r3, r2
1a006aa4:	77bb      	strb	r3, [r7, #30]
			v /= r;
1a006aa6:	6a3a      	ldr	r2, [r7, #32]
1a006aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a006aaa:	fbb2 f3f3 	udiv	r3, r2, r3
1a006aae:	623b      	str	r3, [r7, #32]
			if (d > 9)
1a006ab0:	7fbb      	ldrb	r3, [r7, #30]
1a006ab2:	2b09      	cmp	r3, #9
1a006ab4:	d908      	bls.n	1a006ac8 <xvprintf+0x244>
				d += (c == 'x') ? 0x27 : 0x07;
1a006ab6:	7ffb      	ldrb	r3, [r7, #31]
1a006ab8:	2b78      	cmp	r3, #120	; 0x78
1a006aba:	d101      	bne.n	1a006ac0 <xvprintf+0x23c>
1a006abc:	2227      	movs	r2, #39	; 0x27
1a006abe:	e000      	b.n	1a006ac2 <xvprintf+0x23e>
1a006ac0:	2207      	movs	r2, #7
1a006ac2:	7fbb      	ldrb	r3, [r7, #30]
1a006ac4:	4413      	add	r3, r2
1a006ac6:	77bb      	strb	r3, [r7, #30]
			s[i++] = d + '0';
1a006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a006aca:	1c5a      	adds	r2, r3, #1
1a006acc:	633a      	str	r2, [r7, #48]	; 0x30
1a006ace:	7fba      	ldrb	r2, [r7, #30]
1a006ad0:	3230      	adds	r2, #48	; 0x30
1a006ad2:	b2d2      	uxtb	r2, r2
1a006ad4:	f107 0138 	add.w	r1, r7, #56	; 0x38
1a006ad8:	440b      	add	r3, r1
1a006ada:	f803 2c30 	strb.w	r2, [r3, #-48]
		} while (v && i < sizeof(s));
1a006ade:	6a3b      	ldr	r3, [r7, #32]
1a006ae0:	2b00      	cmp	r3, #0
1a006ae2:	d002      	beq.n	1a006aea <xvprintf+0x266>
1a006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a006ae6:	2b0f      	cmp	r3, #15
1a006ae8:	d9d4      	bls.n	1a006a94 <xvprintf+0x210>
		if (f & 8)
1a006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a006aec:	f003 0308 	and.w	r3, r3, #8
1a006af0:	2b00      	cmp	r3, #0
1a006af2:	d008      	beq.n	1a006b06 <xvprintf+0x282>
			s[i++] = '-';
1a006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a006af6:	1c5a      	adds	r2, r3, #1
1a006af8:	633a      	str	r2, [r7, #48]	; 0x30
1a006afa:	f107 0238 	add.w	r2, r7, #56	; 0x38
1a006afe:	4413      	add	r3, r2
1a006b00:	222d      	movs	r2, #45	; 0x2d
1a006b02:	f803 2c30 	strb.w	r2, [r3, #-48]
		j = i;
1a006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a006b08:	62fb      	str	r3, [r7, #44]	; 0x2c
		d = (f & 1) ? '0' : ' ';
1a006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a006b0c:	f003 0301 	and.w	r3, r3, #1
1a006b10:	2b00      	cmp	r3, #0
1a006b12:	d001      	beq.n	1a006b18 <xvprintf+0x294>
1a006b14:	2330      	movs	r3, #48	; 0x30
1a006b16:	e000      	b.n	1a006b1a <xvprintf+0x296>
1a006b18:	2320      	movs	r3, #32
1a006b1a:	77bb      	strb	r3, [r7, #30]
		while (!(f & 2) && j++ < w)
1a006b1c:	e003      	b.n	1a006b26 <xvprintf+0x2a2>
			xputc(d);
1a006b1e:	7fbb      	ldrb	r3, [r7, #30]
1a006b20:	4618      	mov	r0, r3
1a006b22:	f7ff fe79 	bl	1a006818 <xputc>
		} while (v && i < sizeof(s));
		if (f & 8)
			s[i++] = '-';
		j = i;
		d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w)
1a006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a006b28:	f003 0302 	and.w	r3, r3, #2
1a006b2c:	2b00      	cmp	r3, #0
1a006b2e:	d105      	bne.n	1a006b3c <xvprintf+0x2b8>
1a006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a006b32:	1c5a      	adds	r2, r3, #1
1a006b34:	62fa      	str	r2, [r7, #44]	; 0x2c
1a006b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a006b38:	4293      	cmp	r3, r2
1a006b3a:	d3f0      	bcc.n	1a006b1e <xvprintf+0x29a>
			xputc(d);
		do
			xputc(s[--i]);
1a006b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a006b3e:	3b01      	subs	r3, #1
1a006b40:	633b      	str	r3, [r7, #48]	; 0x30
1a006b42:	f107 0208 	add.w	r2, r7, #8
1a006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a006b48:	4413      	add	r3, r2
1a006b4a:	781b      	ldrb	r3, [r3, #0]
1a006b4c:	4618      	mov	r0, r3
1a006b4e:	f7ff fe63 	bl	1a006818 <xputc>
		while (i);
1a006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a006b54:	2b00      	cmp	r3, #0
1a006b56:	d1f1      	bne.n	1a006b3c <xvprintf+0x2b8>
		while (j++ < w)
1a006b58:	e002      	b.n	1a006b60 <xvprintf+0x2dc>
			xputc(' ');
1a006b5a:	2020      	movs	r0, #32
1a006b5c:	f7ff fe5c 	bl	1a006818 <xputc>
		while (!(f & 2) && j++ < w)
			xputc(d);
		do
			xputc(s[--i]);
		while (i);
		while (j++ < w)
1a006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a006b62:	1c5a      	adds	r2, r3, #1
1a006b64:	62fa      	str	r2, [r7, #44]	; 0x2c
1a006b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a006b68:	4293      	cmp	r3, r2
1a006b6a:	d3f6      	bcc.n	1a006b5a <xvprintf+0x2d6>
			xputc(' ');
	}
1a006b6c:	e68f      	b.n	1a00688e <xvprintf+0xa>
	char s[16], c, d, *p;

	for (;;) {
		c = *fmt++; /* Get a char */
		if (!c)
			break; /* End of format? */
1a006b6e:	bf00      	nop
1a006b70:	e000      	b.n	1a006b74 <xvprintf+0x2f0>
		if (c == 'l' || c == 'L') { /* Prefix: Size is long int */
			f |= 4;
			c = *fmt++;
		}
		if (!c)
			break; /* End of format? */
1a006b72:	bf00      	nop
			xputc(s[--i]);
		while (i);
		while (j++ < w)
			xputc(' ');
	}
}
1a006b74:	bf00      	nop
1a006b76:	3738      	adds	r7, #56	; 0x38
1a006b78:	46bd      	mov	sp, r7
1a006b7a:	bd80      	pop	{r7, pc}

1a006b7c <xprintf>:

void xprintf( /* Put a formatted string to the default device */
const char* fmt, /* Pointer to the format string */
... /* Optional arguments */
) {
1a006b7c:	b40f      	push	{r0, r1, r2, r3}
1a006b7e:	b580      	push	{r7, lr}
1a006b80:	b082      	sub	sp, #8
1a006b82:	af00      	add	r7, sp, #0
	va_list arp;

	va_start(arp, fmt);
1a006b84:	f107 0314 	add.w	r3, r7, #20
1a006b88:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
1a006b8a:	6879      	ldr	r1, [r7, #4]
1a006b8c:	6938      	ldr	r0, [r7, #16]
1a006b8e:	f7ff fe79 	bl	1a006884 <xvprintf>
	va_end(arp);
}
1a006b92:	bf00      	nop
1a006b94:	3708      	adds	r7, #8
1a006b96:	46bd      	mov	sp, r7
1a006b98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
1a006b9c:	b004      	add	sp, #16
1a006b9e:	4770      	bx	lr

1a006ba0 <inv_db_load_func>:
}
#endif

/** This function receives the data that was stored in non-volatile memory between power off */
static inv_error_t inv_db_load_func(const unsigned char *data)
{
1a006ba0:	b580      	push	{r7, lr}
1a006ba2:	b082      	sub	sp, #8
1a006ba4:	af00      	add	r7, sp, #0
1a006ba6:	6078      	str	r0, [r7, #4]
    memcpy(&inv_data_builder.save, data, sizeof(inv_data_builder.save));
1a006ba8:	2248      	movs	r2, #72	; 0x48
1a006baa:	6879      	ldr	r1, [r7, #4]
1a006bac:	480f      	ldr	r0, [pc, #60]	; (1a006bec <inv_db_load_func+0x4c>)
1a006bae:	f00d ff95 	bl	1a014adc <memcpy>
    // copy in the saved accuracy in the actual sensors accuracy
    sensors.gyro.accuracy = inv_data_builder.save.gyro_accuracy;
1a006bb2:	4b0f      	ldr	r3, [pc, #60]	; (1a006bf0 <inv_db_load_func+0x50>)
1a006bb4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
1a006bb8:	4a0e      	ldr	r2, [pc, #56]	; (1a006bf4 <inv_db_load_func+0x54>)
1a006bba:	6353      	str	r3, [r2, #52]	; 0x34
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
1a006bbc:	4b0c      	ldr	r3, [pc, #48]	; (1a006bf0 <inv_db_load_func+0x50>)
1a006bbe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
1a006bc2:	4a0c      	ldr	r2, [pc, #48]	; (1a006bf4 <inv_db_load_func+0x54>)
1a006bc4:	6793      	str	r3, [r2, #120]	; 0x78
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
1a006bc6:	4b0a      	ldr	r3, [pc, #40]	; (1a006bf0 <inv_db_load_func+0x50>)
1a006bc8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
1a006bcc:	4a09      	ldr	r2, [pc, #36]	; (1a006bf4 <inv_db_load_func+0x54>)
1a006bce:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
    // TODO
    if (sensors.compass.accuracy == 3) {
1a006bd2:	4b08      	ldr	r3, [pc, #32]	; (1a006bf4 <inv_db_load_func+0x54>)
1a006bd4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
1a006bd8:	2b03      	cmp	r3, #3
1a006bda:	d102      	bne.n	1a006be2 <inv_db_load_func+0x42>
        inv_set_compass_bias_found(1);
1a006bdc:	2001      	movs	r0, #1
1a006bde:	f002 f947 	bl	1a008e70 <inv_set_compass_bias_found>
    }
    return INV_SUCCESS;
1a006be2:	2300      	movs	r3, #0
}
1a006be4:	4618      	mov	r0, r3
1a006be6:	3708      	adds	r7, #8
1a006be8:	46bd      	mov	sp, r7
1a006bea:	bd80      	pop	{r7, pc}
1a006bec:	1008668c 	.word	0x1008668c
1a006bf0:	10086598 	.word	0x10086598
1a006bf4:	100866d8 	.word	0x100866d8

1a006bf8 <inv_db_save_func>:

/** This function returns the data to be stored in non-volatile memory between power off */
static inv_error_t inv_db_save_func(unsigned char *data)
{
1a006bf8:	b580      	push	{r7, lr}
1a006bfa:	b082      	sub	sp, #8
1a006bfc:	af00      	add	r7, sp, #0
1a006bfe:	6078      	str	r0, [r7, #4]
    memcpy(data, &inv_data_builder.save, sizeof(inv_data_builder.save));
1a006c00:	2248      	movs	r2, #72	; 0x48
1a006c02:	4904      	ldr	r1, [pc, #16]	; (1a006c14 <inv_db_save_func+0x1c>)
1a006c04:	6878      	ldr	r0, [r7, #4]
1a006c06:	f00d ff69 	bl	1a014adc <memcpy>
    return INV_SUCCESS;
1a006c0a:	2300      	movs	r3, #0
}
1a006c0c:	4618      	mov	r0, r3
1a006c0e:	3708      	adds	r7, #8
1a006c10:	46bd      	mov	sp, r7
1a006c12:	bd80      	pop	{r7, pc}
1a006c14:	1008668c 	.word	0x1008668c

1a006c18 <inv_init_data_builder>:

/** Initialize the data builder
*/
inv_error_t inv_init_data_builder(void)
{
1a006c18:	b580      	push	{r7, lr}
1a006c1a:	af00      	add	r7, sp, #0
    /* TODO: Hardcode temperature scale/offset here. */
    memset(&inv_data_builder, 0, sizeof(inv_data_builder));
1a006c1c:	f44f 72a0 	mov.w	r2, #320	; 0x140
1a006c20:	2100      	movs	r1, #0
1a006c22:	480a      	ldr	r0, [pc, #40]	; (1a006c4c <inv_init_data_builder+0x34>)
1a006c24:	f00e f858 	bl	1a014cd8 <memset>
    memset(&sensors, 0, sizeof(sensors));
1a006c28:	f44f 72cc 	mov.w	r2, #408	; 0x198
1a006c2c:	2100      	movs	r1, #0
1a006c2e:	4808      	ldr	r0, [pc, #32]	; (1a006c50 <inv_init_data_builder+0x38>)
1a006c30:	f00e f852 	bl	1a014cd8 <memset>

    // disable the soft iron transform process
    inv_reset_compass_soft_iron_matrix();
1a006c34:	f000 fed0 	bl	1a0079d8 <inv_reset_compass_soft_iron_matrix>

    return inv_register_load_store(inv_db_load_func, inv_db_save_func,
1a006c38:	f24d 0393 	movw	r3, #53395	; 0xd093
1a006c3c:	2248      	movs	r2, #72	; 0x48
1a006c3e:	4905      	ldr	r1, [pc, #20]	; (1a006c54 <inv_init_data_builder+0x3c>)
1a006c40:	4805      	ldr	r0, [pc, #20]	; (1a006c58 <inv_init_data_builder+0x40>)
1a006c42:	f002 fa2b 	bl	1a00909c <inv_register_load_store>
1a006c46:	4603      	mov	r3, r0
                                   sizeof(inv_data_builder.save),
                                   INV_DB_SAVE_KEY);
}
1a006c48:	4618      	mov	r0, r3
1a006c4a:	bd80      	pop	{r7, pc}
1a006c4c:	10086598 	.word	0x10086598
1a006c50:	100866d8 	.word	0x100866d8
1a006c54:	1a006bf9 	.word	0x1a006bf9
1a006c58:	1a006ba1 	.word	0x1a006ba1

1a006c5c <set_sensor_orientation_and_scale>:
* @param[in] sensitivity A Scale factor to convert from hardware units to
*            standard units (dps, uT, g).
*/
void set_sensor_orientation_and_scale(struct inv_single_sensor_t *sensor,
                                 int orientation, long sensitivity)
{
1a006c5c:	b480      	push	{r7}
1a006c5e:	b085      	sub	sp, #20
1a006c60:	af00      	add	r7, sp, #0
1a006c62:	60f8      	str	r0, [r7, #12]
1a006c64:	60b9      	str	r1, [r7, #8]
1a006c66:	607a      	str	r2, [r7, #4]
    sensor->sensitivity = sensitivity;
1a006c68:	68fb      	ldr	r3, [r7, #12]
1a006c6a:	687a      	ldr	r2, [r7, #4]
1a006c6c:	625a      	str	r2, [r3, #36]	; 0x24
    sensor->orientation = orientation;
1a006c6e:	68fb      	ldr	r3, [r7, #12]
1a006c70:	68ba      	ldr	r2, [r7, #8]
1a006c72:	601a      	str	r2, [r3, #0]
}
1a006c74:	bf00      	nop
1a006c76:	3714      	adds	r7, #20
1a006c78:	46bd      	mov	sp, r7
1a006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006c7e:	4770      	bx	lr

1a006c80 <inv_set_gyro_orientation_and_scale>:
* @param[in] sensitivity A scale factor to convert device units to degrees per second scaled by 2^16
*            such that degrees_per_second  = device_units * sensitivity / 2^30. Typically
*            it works out to be the maximum rate * 2^15.
*/
void inv_set_gyro_orientation_and_scale(int orientation, long sensitivity)
{
1a006c80:	b580      	push	{r7, lr}
1a006c82:	b082      	sub	sp, #8
1a006c84:	af00      	add	r7, sp, #0
1a006c86:	6078      	str	r0, [r7, #4]
1a006c88:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.gyro, orientation,
1a006c8a:	683a      	ldr	r2, [r7, #0]
1a006c8c:	6879      	ldr	r1, [r7, #4]
1a006c8e:	4803      	ldr	r0, [pc, #12]	; (1a006c9c <inv_set_gyro_orientation_and_scale+0x1c>)
1a006c90:	f7ff ffe4 	bl	1a006c5c <set_sensor_orientation_and_scale>
                                     sensitivity);
}
1a006c94:	bf00      	nop
1a006c96:	3708      	adds	r7, #8
1a006c98:	46bd      	mov	sp, r7
1a006c9a:	bd80      	pop	{r7, pc}
1a006c9c:	100866d8 	.word	0x100866d8

1a006ca0 <inv_set_gyro_sample_rate>:

/** Set Gyro Sample rate in micro seconds.
* @param[in] sample_rate_us Set Gyro Sample rate in us
*/
void inv_set_gyro_sample_rate(long sample_rate_us)
{
1a006ca0:	b480      	push	{r7}
1a006ca2:	b083      	sub	sp, #12
1a006ca4:	af00      	add	r7, sp, #0
1a006ca6:	6078      	str	r0, [r7, #4]
        int type = PLAYBACK_DBG_TYPE_G_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
1a006ca8:	4a0d      	ldr	r2, [pc, #52]	; (1a006ce0 <inv_set_gyro_sample_rate+0x40>)
1a006caa:	687b      	ldr	r3, [r7, #4]
1a006cac:	6293      	str	r3, [r2, #40]	; 0x28
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
1a006cae:	687b      	ldr	r3, [r7, #4]
1a006cb0:	4a0c      	ldr	r2, [pc, #48]	; (1a006ce4 <inv_set_gyro_sample_rate+0x44>)
1a006cb2:	fb82 1203 	smull	r1, r2, r2, r3
1a006cb6:	1192      	asrs	r2, r2, #6
1a006cb8:	17db      	asrs	r3, r3, #31
1a006cba:	1ad3      	subs	r3, r2, r3
1a006cbc:	4a08      	ldr	r2, [pc, #32]	; (1a006ce0 <inv_set_gyro_sample_rate+0x40>)
1a006cbe:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (sensors.gyro.bandwidth == 0) {
1a006cc0:	4b07      	ldr	r3, [pc, #28]	; (1a006ce0 <inv_set_gyro_sample_rate+0x40>)
1a006cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a006cc4:	2b00      	cmp	r3, #0
1a006cc6:	d105      	bne.n	1a006cd4 <inv_set_gyro_sample_rate+0x34>
        sensors.gyro.bandwidth = (int)(1000000L / sample_rate_us);
1a006cc8:	4a07      	ldr	r2, [pc, #28]	; (1a006ce8 <inv_set_gyro_sample_rate+0x48>)
1a006cca:	687b      	ldr	r3, [r7, #4]
1a006ccc:	fb92 f3f3 	sdiv	r3, r2, r3
1a006cd0:	4a03      	ldr	r2, [pc, #12]	; (1a006ce0 <inv_set_gyro_sample_rate+0x40>)
1a006cd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
}
1a006cd4:	bf00      	nop
1a006cd6:	370c      	adds	r7, #12
1a006cd8:	46bd      	mov	sp, r7
1a006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006cde:	4770      	bx	lr
1a006ce0:	100866d8 	.word	0x100866d8
1a006ce4:	10624dd3 	.word	0x10624dd3
1a006ce8:	000f4240 	.word	0x000f4240

1a006cec <inv_set_accel_sample_rate>:

/** Set Accel Sample rate in micro seconds.
* @param[in] sample_rate_us Set Accel Sample rate in us
*/
void inv_set_accel_sample_rate(long sample_rate_us)
{
1a006cec:	b480      	push	{r7}
1a006cee:	b083      	sub	sp, #12
1a006cf0:	af00      	add	r7, sp, #0
1a006cf2:	6078      	str	r0, [r7, #4]
        int type = PLAYBACK_DBG_TYPE_A_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
1a006cf4:	4a0e      	ldr	r2, [pc, #56]	; (1a006d30 <inv_set_accel_sample_rate+0x44>)
1a006cf6:	687b      	ldr	r3, [r7, #4]
1a006cf8:	66d3      	str	r3, [r2, #108]	; 0x6c
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
1a006cfa:	687b      	ldr	r3, [r7, #4]
1a006cfc:	4a0d      	ldr	r2, [pc, #52]	; (1a006d34 <inv_set_accel_sample_rate+0x48>)
1a006cfe:	fb82 1203 	smull	r1, r2, r2, r3
1a006d02:	1192      	asrs	r2, r2, #6
1a006d04:	17db      	asrs	r3, r3, #31
1a006d06:	1ad3      	subs	r3, r2, r3
1a006d08:	4a09      	ldr	r2, [pc, #36]	; (1a006d30 <inv_set_accel_sample_rate+0x44>)
1a006d0a:	6713      	str	r3, [r2, #112]	; 0x70
    if (sensors.accel.bandwidth == 0) {
1a006d0c:	4b08      	ldr	r3, [pc, #32]	; (1a006d30 <inv_set_accel_sample_rate+0x44>)
1a006d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1a006d12:	2b00      	cmp	r3, #0
1a006d14:	d106      	bne.n	1a006d24 <inv_set_accel_sample_rate+0x38>
        sensors.accel.bandwidth = (int)(1000000L / sample_rate_us);
1a006d16:	4a08      	ldr	r2, [pc, #32]	; (1a006d38 <inv_set_accel_sample_rate+0x4c>)
1a006d18:	687b      	ldr	r3, [r7, #4]
1a006d1a:	fb92 f3f3 	sdiv	r3, r2, r3
1a006d1e:	4a04      	ldr	r2, [pc, #16]	; (1a006d30 <inv_set_accel_sample_rate+0x44>)
1a006d20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }
}
1a006d24:	bf00      	nop
1a006d26:	370c      	adds	r7, #12
1a006d28:	46bd      	mov	sp, r7
1a006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006d2e:	4770      	bx	lr
1a006d30:	100866d8 	.word	0x100866d8
1a006d34:	10624dd3 	.word	0x10624dd3
1a006d38:	000f4240 	.word	0x000f4240

1a006d3c <inv_set_compass_sample_rate>:

/** Set Compass Sample rate in micro seconds.
* @param[in] sample_rate_us Set Gyro Sample rate in micro seconds.
*/
void inv_set_compass_sample_rate(long sample_rate_us)
{
1a006d3c:	b480      	push	{r7}
1a006d3e:	b083      	sub	sp, #12
1a006d40:	af00      	add	r7, sp, #0
1a006d42:	6078      	str	r0, [r7, #4]
        int type = PLAYBACK_DBG_TYPE_C_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.compass.sample_rate_us = sample_rate_us;
1a006d44:	4a0f      	ldr	r2, [pc, #60]	; (1a006d84 <inv_set_compass_sample_rate+0x48>)
1a006d46:	687b      	ldr	r3, [r7, #4]
1a006d48:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
    sensors.compass.sample_rate_ms = sample_rate_us / 1000;
1a006d4c:	687b      	ldr	r3, [r7, #4]
1a006d4e:	4a0e      	ldr	r2, [pc, #56]	; (1a006d88 <inv_set_compass_sample_rate+0x4c>)
1a006d50:	fb82 1203 	smull	r1, r2, r2, r3
1a006d54:	1192      	asrs	r2, r2, #6
1a006d56:	17db      	asrs	r3, r3, #31
1a006d58:	1ad3      	subs	r3, r2, r3
1a006d5a:	4a0a      	ldr	r2, [pc, #40]	; (1a006d84 <inv_set_compass_sample_rate+0x48>)
1a006d5c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    if (sensors.compass.bandwidth == 0) {
1a006d60:	4b08      	ldr	r3, [pc, #32]	; (1a006d84 <inv_set_compass_sample_rate+0x48>)
1a006d62:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
1a006d66:	2b00      	cmp	r3, #0
1a006d68:	d106      	bne.n	1a006d78 <inv_set_compass_sample_rate+0x3c>
        sensors.compass.bandwidth = (int)(1000000L / sample_rate_us);
1a006d6a:	4a08      	ldr	r2, [pc, #32]	; (1a006d8c <inv_set_compass_sample_rate+0x50>)
1a006d6c:	687b      	ldr	r3, [r7, #4]
1a006d6e:	fb92 f3f3 	sdiv	r3, r2, r3
1a006d72:	4a04      	ldr	r2, [pc, #16]	; (1a006d84 <inv_set_compass_sample_rate+0x48>)
1a006d74:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    }
}
1a006d78:	bf00      	nop
1a006d7a:	370c      	adds	r7, #12
1a006d7c:	46bd      	mov	sp, r7
1a006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006d82:	4770      	bx	lr
1a006d84:	100866d8 	.word	0x100866d8
1a006d88:	10624dd3 	.word	0x10624dd3
1a006d8c:	000f4240 	.word	0x000f4240

1a006d90 <inv_get_compass_on>:

/** Helper function stating whether the compass is on or off.
 * @return TRUE if compass if on, 0 if compass if off
*/
int inv_get_compass_on()
{
1a006d90:	b480      	push	{r7}
1a006d92:	af00      	add	r7, sp, #0
    return (sensors.compass.status & INV_SENSOR_ON) == INV_SENSOR_ON;
1a006d94:	4b07      	ldr	r3, [pc, #28]	; (1a006db4 <inv_get_compass_on+0x24>)
1a006d96:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a006d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a006d9e:	2b00      	cmp	r3, #0
1a006da0:	bf14      	ite	ne
1a006da2:	2301      	movne	r3, #1
1a006da4:	2300      	moveq	r3, #0
1a006da6:	b2db      	uxtb	r3, r3
}
1a006da8:	4618      	mov	r0, r3
1a006daa:	46bd      	mov	sp, r7
1a006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006db0:	4770      	bx	lr
1a006db2:	bf00      	nop
1a006db4:	100866d8 	.word	0x100866d8

1a006db8 <inv_get_gyro_on>:

/** Helper function stating whether the gyro is on or off.
 * @return TRUE if gyro if on, 0 if gyro if off
*/
int inv_get_gyro_on()
{
1a006db8:	b480      	push	{r7}
1a006dba:	af00      	add	r7, sp, #0
    return (sensors.gyro.status & INV_SENSOR_ON) == INV_SENSOR_ON;
1a006dbc:	4b06      	ldr	r3, [pc, #24]	; (1a006dd8 <inv_get_gyro_on+0x20>)
1a006dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a006dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a006dc4:	2b00      	cmp	r3, #0
1a006dc6:	bf14      	ite	ne
1a006dc8:	2301      	movne	r3, #1
1a006dca:	2300      	moveq	r3, #0
1a006dcc:	b2db      	uxtb	r3, r3
}
1a006dce:	4618      	mov	r0, r3
1a006dd0:	46bd      	mov	sp, r7
1a006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006dd6:	4770      	bx	lr
1a006dd8:	100866d8 	.word	0x100866d8

1a006ddc <inv_get_accel_on>:

/** Helper function stating whether the acceleromter is on or off.
 * @return TRUE if accel if on, 0 if accel if off
*/
int inv_get_accel_on()
{
1a006ddc:	b480      	push	{r7}
1a006dde:	af00      	add	r7, sp, #0
    return (sensors.accel.status & INV_SENSOR_ON) == INV_SENSOR_ON;
1a006de0:	4b06      	ldr	r3, [pc, #24]	; (1a006dfc <inv_get_accel_on+0x20>)
1a006de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a006de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a006de8:	2b00      	cmp	r3, #0
1a006dea:	bf14      	ite	ne
1a006dec:	2301      	movne	r3, #1
1a006dee:	2300      	moveq	r3, #0
1a006df0:	b2db      	uxtb	r3, r3
}
1a006df2:	4618      	mov	r0, r3
1a006df4:	46bd      	mov	sp, r7
1a006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006dfa:	4770      	bx	lr
1a006dfc:	100866d8 	.word	0x100866d8

1a006e00 <inv_get_last_timestamp>:
/** Get last timestamp across all 3 sensors that are on.
* This find out which timestamp has the largest value for sensors that are on.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_time_t inv_get_last_timestamp()
{
1a006e00:	b480      	push	{r7}
1a006e02:	b083      	sub	sp, #12
1a006e04:	af00      	add	r7, sp, #0
    inv_time_t timestamp = 0;
1a006e06:	2300      	movs	r3, #0
1a006e08:	607b      	str	r3, [r7, #4]
    if (sensors.accel.status & INV_SENSOR_ON) {
1a006e0a:	4b20      	ldr	r3, [pc, #128]	; (1a006e8c <inv_get_last_timestamp+0x8c>)
1a006e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a006e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a006e12:	2b00      	cmp	r3, #0
1a006e14:	d002      	beq.n	1a006e1c <inv_get_last_timestamp+0x1c>
        timestamp = sensors.accel.timestamp;
1a006e16:	4b1d      	ldr	r3, [pc, #116]	; (1a006e8c <inv_get_last_timestamp+0x8c>)
1a006e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1a006e1a:	607b      	str	r3, [r7, #4]
    }
    if (sensors.gyro.status & INV_SENSOR_ON) {
1a006e1c:	4b1b      	ldr	r3, [pc, #108]	; (1a006e8c <inv_get_last_timestamp+0x8c>)
1a006e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a006e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a006e24:	2b00      	cmp	r3, #0
1a006e26:	d007      	beq.n	1a006e38 <inv_get_last_timestamp+0x38>
        if (timestamp < sensors.gyro.timestamp) {
1a006e28:	4b18      	ldr	r3, [pc, #96]	; (1a006e8c <inv_get_last_timestamp+0x8c>)
1a006e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a006e2c:	687b      	ldr	r3, [r7, #4]
1a006e2e:	429a      	cmp	r2, r3
1a006e30:	d902      	bls.n	1a006e38 <inv_get_last_timestamp+0x38>
            timestamp = sensors.gyro.timestamp;
1a006e32:	4b16      	ldr	r3, [pc, #88]	; (1a006e8c <inv_get_last_timestamp+0x8c>)
1a006e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1a006e36:	607b      	str	r3, [r7, #4]
        }
    }
    if (sensors.compass.status & INV_SENSOR_ON) {
1a006e38:	4b14      	ldr	r3, [pc, #80]	; (1a006e8c <inv_get_last_timestamp+0x8c>)
1a006e3a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a006e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a006e42:	2b00      	cmp	r3, #0
1a006e44:	d009      	beq.n	1a006e5a <inv_get_last_timestamp+0x5a>
        if (timestamp < sensors.compass.timestamp) {
1a006e46:	4b11      	ldr	r3, [pc, #68]	; (1a006e8c <inv_get_last_timestamp+0x8c>)
1a006e48:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
1a006e4c:	687b      	ldr	r3, [r7, #4]
1a006e4e:	429a      	cmp	r2, r3
1a006e50:	d903      	bls.n	1a006e5a <inv_get_last_timestamp+0x5a>
            timestamp = sensors.compass.timestamp;
1a006e52:	4b0e      	ldr	r3, [pc, #56]	; (1a006e8c <inv_get_last_timestamp+0x8c>)
1a006e54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
1a006e58:	607b      	str	r3, [r7, #4]
        }
    }
    if (sensors.temp.status & INV_SENSOR_ON) {
1a006e5a:	4b0c      	ldr	r3, [pc, #48]	; (1a006e8c <inv_get_last_timestamp+0x8c>)
1a006e5c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
1a006e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a006e64:	2b00      	cmp	r3, #0
1a006e66:	d009      	beq.n	1a006e7c <inv_get_last_timestamp+0x7c>
        if (timestamp < sensors.temp.timestamp)
1a006e68:	4b08      	ldr	r3, [pc, #32]	; (1a006e8c <inv_get_last_timestamp+0x8c>)
1a006e6a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
1a006e6e:	687b      	ldr	r3, [r7, #4]
1a006e70:	429a      	cmp	r2, r3
1a006e72:	d903      	bls.n	1a006e7c <inv_get_last_timestamp+0x7c>
            timestamp = sensors.temp.timestamp;
1a006e74:	4b05      	ldr	r3, [pc, #20]	; (1a006e8c <inv_get_last_timestamp+0x8c>)
1a006e76:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
1a006e7a:	607b      	str	r3, [r7, #4]
    }
    return timestamp;
1a006e7c:	687b      	ldr	r3, [r7, #4]
}
1a006e7e:	4618      	mov	r0, r3
1a006e80:	370c      	adds	r7, #12
1a006e82:	46bd      	mov	sp, r7
1a006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006e88:	4770      	bx	lr
1a006e8a:	bf00      	nop
1a006e8c:	100866d8 	.word	0x100866d8

1a006e90 <inv_set_accel_orientation_and_scale>:
* @param[in] sensitivity A scale factor to convert device units to g's
*            such that g's = device_units * sensitivity / 2^30. Typically
*            it works out to be the maximum g_value * 2^15.
*/
void inv_set_accel_orientation_and_scale(int orientation, long sensitivity)
{
1a006e90:	b580      	push	{r7, lr}
1a006e92:	b082      	sub	sp, #8
1a006e94:	af00      	add	r7, sp, #0
1a006e96:	6078      	str	r0, [r7, #4]
1a006e98:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.accel, orientation,
1a006e9a:	683a      	ldr	r2, [r7, #0]
1a006e9c:	6879      	ldr	r1, [r7, #4]
1a006e9e:	4803      	ldr	r0, [pc, #12]	; (1a006eac <inv_set_accel_orientation_and_scale+0x1c>)
1a006ea0:	f7ff fedc 	bl	1a006c5c <set_sensor_orientation_and_scale>
                                     sensitivity);
}
1a006ea4:	bf00      	nop
1a006ea6:	3708      	adds	r7, #8
1a006ea8:	46bd      	mov	sp, r7
1a006eaa:	bd80      	pop	{r7, pc}
1a006eac:	1008671c 	.word	0x1008671c

1a006eb0 <inv_set_compass_orientation_and_scale>:
* @param[in] sensitivity A scale factor to convert device units to uT
*            such that uT = device_units * sensitivity / 2^30. Typically
*            it works out to be the maximum uT_value * 2^15.
*/
void inv_set_compass_orientation_and_scale(int orientation, long sensitivity)
{
1a006eb0:	b580      	push	{r7, lr}
1a006eb2:	b082      	sub	sp, #8
1a006eb4:	af00      	add	r7, sp, #0
1a006eb6:	6078      	str	r0, [r7, #4]
1a006eb8:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.compass, orientation, sensitivity);
1a006eba:	683a      	ldr	r2, [r7, #0]
1a006ebc:	6879      	ldr	r1, [r7, #4]
1a006ebe:	4803      	ldr	r0, [pc, #12]	; (1a006ecc <inv_set_compass_orientation_and_scale+0x1c>)
1a006ec0:	f7ff fecc 	bl	1a006c5c <set_sensor_orientation_and_scale>
}
1a006ec4:	bf00      	nop
1a006ec6:	3708      	adds	r7, #8
1a006ec8:	46bd      	mov	sp, r7
1a006eca:	bd80      	pop	{r7, pc}
1a006ecc:	10086760 	.word	0x10086760

1a006ed0 <inv_apply_calibration>:
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
1a006ed0:	b580      	push	{r7, lr}
1a006ed2:	b086      	sub	sp, #24
1a006ed4:	af00      	add	r7, sp, #0
1a006ed6:	6078      	str	r0, [r7, #4]
1a006ed8:	6039      	str	r1, [r7, #0]
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
1a006eda:	687b      	ldr	r3, [r7, #4]
1a006edc:	889b      	ldrh	r3, [r3, #4]
1a006ede:	b21b      	sxth	r3, r3
1a006ee0:	03db      	lsls	r3, r3, #15
1a006ee2:	60fb      	str	r3, [r7, #12]
    raw32[1] = (long)sensor->raw[1] << 15;
1a006ee4:	687b      	ldr	r3, [r7, #4]
1a006ee6:	88db      	ldrh	r3, [r3, #6]
1a006ee8:	b21b      	sxth	r3, r3
1a006eea:	03db      	lsls	r3, r3, #15
1a006eec:	613b      	str	r3, [r7, #16]
    raw32[2] = (long)sensor->raw[2] << 15;
1a006eee:	687b      	ldr	r3, [r7, #4]
1a006ef0:	891b      	ldrh	r3, [r3, #8]
1a006ef2:	b21b      	sxth	r3, r3
1a006ef4:	03db      	lsls	r3, r3, #15
1a006ef6:	617b      	str	r3, [r7, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->raw_scaled);
1a006ef8:	687b      	ldr	r3, [r7, #4]
1a006efa:	681b      	ldr	r3, [r3, #0]
1a006efc:	b298      	uxth	r0, r3
1a006efe:	687b      	ldr	r3, [r7, #4]
1a006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a006f02:	0059      	lsls	r1, r3, #1
1a006f04:	687b      	ldr	r3, [r7, #4]
1a006f06:	330c      	adds	r3, #12
1a006f08:	f107 020c 	add.w	r2, r7, #12
1a006f0c:	f001 fcb4 	bl	1a008878 <inv_convert_to_body_with_scale>

    raw32[0] -= bias[0] >> 1;
1a006f10:	68fa      	ldr	r2, [r7, #12]
1a006f12:	683b      	ldr	r3, [r7, #0]
1a006f14:	681b      	ldr	r3, [r3, #0]
1a006f16:	105b      	asrs	r3, r3, #1
1a006f18:	1ad3      	subs	r3, r2, r3
1a006f1a:	60fb      	str	r3, [r7, #12]
    raw32[1] -= bias[1] >> 1;
1a006f1c:	693a      	ldr	r2, [r7, #16]
1a006f1e:	683b      	ldr	r3, [r7, #0]
1a006f20:	3304      	adds	r3, #4
1a006f22:	681b      	ldr	r3, [r3, #0]
1a006f24:	105b      	asrs	r3, r3, #1
1a006f26:	1ad3      	subs	r3, r2, r3
1a006f28:	613b      	str	r3, [r7, #16]
    raw32[2] -= bias[2] >> 1;
1a006f2a:	697a      	ldr	r2, [r7, #20]
1a006f2c:	683b      	ldr	r3, [r7, #0]
1a006f2e:	3308      	adds	r3, #8
1a006f30:	681b      	ldr	r3, [r3, #0]
1a006f32:	105b      	asrs	r3, r3, #1
1a006f34:	1ad3      	subs	r3, r2, r3
1a006f36:	617b      	str	r3, [r7, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->calibrated);
1a006f38:	687b      	ldr	r3, [r7, #4]
1a006f3a:	681b      	ldr	r3, [r3, #0]
1a006f3c:	b298      	uxth	r0, r3
1a006f3e:	687b      	ldr	r3, [r7, #4]
1a006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a006f42:	0059      	lsls	r1, r3, #1
1a006f44:	687b      	ldr	r3, [r7, #4]
1a006f46:	3318      	adds	r3, #24
1a006f48:	f107 020c 	add.w	r2, r7, #12
1a006f4c:	f001 fc94 	bl	1a008878 <inv_convert_to_body_with_scale>

    sensor->status |= INV_CALIBRATED;
1a006f50:	687b      	ldr	r3, [r7, #4]
1a006f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a006f54:	f043 0220 	orr.w	r2, r3, #32
1a006f58:	687b      	ldr	r3, [r7, #4]
1a006f5a:	631a      	str	r2, [r3, #48]	; 0x30
}
1a006f5c:	bf00      	nop
1a006f5e:	3718      	adds	r7, #24
1a006f60:	46bd      	mov	sp, r7
1a006f62:	bd80      	pop	{r7, pc}

1a006f64 <inv_get_compass_bias>:
/** Returns the current bias for the compass
* @param[out] bias Compass bias in hardware units scaled by 2^16. In mounting frame.
*             Length 3.
*/
void inv_get_compass_bias(long *bias)
{
1a006f64:	b580      	push	{r7, lr}
1a006f66:	b082      	sub	sp, #8
1a006f68:	af00      	add	r7, sp, #0
1a006f6a:	6078      	str	r0, [r7, #4]
    if (bias != NULL) {
1a006f6c:	687b      	ldr	r3, [r7, #4]
1a006f6e:	2b00      	cmp	r3, #0
1a006f70:	d004      	beq.n	1a006f7c <inv_get_compass_bias+0x18>
        memcpy(bias, inv_data_builder.save.compass_bias, sizeof(inv_data_builder.save.compass_bias));
1a006f72:	220c      	movs	r2, #12
1a006f74:	4903      	ldr	r1, [pc, #12]	; (1a006f84 <inv_get_compass_bias+0x20>)
1a006f76:	6878      	ldr	r0, [r7, #4]
1a006f78:	f00d fdb0 	bl	1a014adc <memcpy>
    }
}
1a006f7c:	bf00      	nop
1a006f7e:	3708      	adds	r7, #8
1a006f80:	46bd      	mov	sp, r7
1a006f82:	bd80      	pop	{r7, pc}
1a006f84:	1008668c 	.word	0x1008668c

1a006f88 <inv_set_compass_bias>:

void inv_set_compass_bias(const long *bias, int accuracy)
{
1a006f88:	b580      	push	{r7, lr}
1a006f8a:	b082      	sub	sp, #8
1a006f8c:	af00      	add	r7, sp, #0
1a006f8e:	6078      	str	r0, [r7, #4]
1a006f90:	6039      	str	r1, [r7, #0]
    if (memcmp(inv_data_builder.save.compass_bias, bias, sizeof(inv_data_builder.save.compass_bias))) {
1a006f92:	220c      	movs	r2, #12
1a006f94:	6879      	ldr	r1, [r7, #4]
1a006f96:	4810      	ldr	r0, [pc, #64]	; (1a006fd8 <inv_set_compass_bias+0x50>)
1a006f98:	f00d fd6e 	bl	1a014a78 <memcmp>
1a006f9c:	4603      	mov	r3, r0
1a006f9e:	2b00      	cmp	r3, #0
1a006fa0:	d008      	beq.n	1a006fb4 <inv_set_compass_bias+0x2c>
        memcpy(inv_data_builder.save.compass_bias, bias, sizeof(inv_data_builder.save.compass_bias));
1a006fa2:	220c      	movs	r2, #12
1a006fa4:	6879      	ldr	r1, [r7, #4]
1a006fa6:	480c      	ldr	r0, [pc, #48]	; (1a006fd8 <inv_set_compass_bias+0x50>)
1a006fa8:	f00d fd98 	bl	1a014adc <memcpy>
        inv_apply_calibration(&sensors.compass, inv_data_builder.save.compass_bias);
1a006fac:	490a      	ldr	r1, [pc, #40]	; (1a006fd8 <inv_set_compass_bias+0x50>)
1a006fae:	480b      	ldr	r0, [pc, #44]	; (1a006fdc <inv_set_compass_bias+0x54>)
1a006fb0:	f7ff ff8e 	bl	1a006ed0 <inv_apply_calibration>
    }
    sensors.compass.accuracy = accuracy;
1a006fb4:	4a0a      	ldr	r2, [pc, #40]	; (1a006fe0 <inv_set_compass_bias+0x58>)
1a006fb6:	683b      	ldr	r3, [r7, #0]
1a006fb8:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
    inv_data_builder.save.compass_accuracy = accuracy;
1a006fbc:	4a09      	ldr	r2, [pc, #36]	; (1a006fe4 <inv_set_compass_bias+0x5c>)
1a006fbe:	683b      	ldr	r3, [r7, #0]
1a006fc0:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
    inv_set_message(INV_MSG_NEW_CB_EVENT, INV_MSG_NEW_CB_EVENT, 0);
1a006fc4:	2200      	movs	r2, #0
1a006fc6:	2108      	movs	r1, #8
1a006fc8:	2008      	movs	r0, #8
1a006fca:	f000 fda5 	bl	1a007b18 <inv_set_message>
}
1a006fce:	bf00      	nop
1a006fd0:	3708      	adds	r7, #8
1a006fd2:	46bd      	mov	sp, r7
1a006fd4:	bd80      	pop	{r7, pc}
1a006fd6:	bf00      	nop
1a006fd8:	1008668c 	.word	0x1008668c
1a006fdc:	10086760 	.word	0x10086760
1a006fe0:	100866d8 	.word	0x100866d8
1a006fe4:	10086598 	.word	0x10086598

1a006fe8 <inv_set_compass_disturbance>:

/** Set the state of a compass disturbance
* @param[in] dist 1=disturbance, 0=no disturbance
*/
void inv_set_compass_disturbance(int dist)
{
1a006fe8:	b480      	push	{r7}
1a006fea:	b083      	sub	sp, #12
1a006fec:	af00      	add	r7, sp, #0
1a006fee:	6078      	str	r0, [r7, #4]
    inv_data_builder.compass_disturbance = dist;
1a006ff0:	4a04      	ldr	r2, [pc, #16]	; (1a007004 <inv_set_compass_disturbance+0x1c>)
1a006ff2:	687b      	ldr	r3, [r7, #4]
1a006ff4:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
}
1a006ff8:	bf00      	nop
1a006ffa:	370c      	adds	r7, #12
1a006ffc:	46bd      	mov	sp, r7
1a006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
1a007002:	4770      	bx	lr
1a007004:	10086598 	.word	0x10086598

1a007008 <inv_set_accel_accuracy>:

/** Sets the accel accuracy.
* @param[in] accuracy Accuracy rating from 0 to 3, with 3 being most accurate.
*/
void inv_set_accel_accuracy(int accuracy)
{
1a007008:	b580      	push	{r7, lr}
1a00700a:	b082      	sub	sp, #8
1a00700c:	af00      	add	r7, sp, #0
1a00700e:	6078      	str	r0, [r7, #4]
    sensors.accel.accuracy = accuracy;
1a007010:	4a07      	ldr	r2, [pc, #28]	; (1a007030 <inv_set_accel_accuracy+0x28>)
1a007012:	687b      	ldr	r3, [r7, #4]
1a007014:	6793      	str	r3, [r2, #120]	; 0x78
    inv_data_builder.save.accel_accuracy = accuracy;
1a007016:	4a07      	ldr	r2, [pc, #28]	; (1a007034 <inv_set_accel_accuracy+0x2c>)
1a007018:	687b      	ldr	r3, [r7, #4]
1a00701a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    inv_set_message(INV_MSG_NEW_AB_EVENT, INV_MSG_NEW_AB_EVENT, 0);
1a00701e:	2200      	movs	r2, #0
1a007020:	2110      	movs	r1, #16
1a007022:	2010      	movs	r0, #16
1a007024:	f000 fd78 	bl	1a007b18 <inv_set_message>
}
1a007028:	bf00      	nop
1a00702a:	3708      	adds	r7, #8
1a00702c:	46bd      	mov	sp, r7
1a00702e:	bd80      	pop	{r7, pc}
1a007030:	100866d8 	.word	0x100866d8
1a007034:	10086598 	.word	0x10086598

1a007038 <inv_set_accel_bias_mask>:
* @param[in] bias Accel bias, length 3. In HW units scaled by 2^16 in body frame
* @param[in] accuracy Accuracy rating from 0 to 3, with 3 being most accurate.
* @param[in] mask Mask to select axis to apply bias set.
*/
void inv_set_accel_bias_mask(const long *bias, int accuracy, int mask)
{
1a007038:	b580      	push	{r7, lr}
1a00703a:	b084      	sub	sp, #16
1a00703c:	af00      	add	r7, sp, #0
1a00703e:	60f8      	str	r0, [r7, #12]
1a007040:	60b9      	str	r1, [r7, #8]
1a007042:	607a      	str	r2, [r7, #4]
    if (bias) {
1a007044:	68fb      	ldr	r3, [r7, #12]
1a007046:	2b00      	cmp	r3, #0
1a007048:	d021      	beq.n	1a00708e <inv_set_accel_bias_mask+0x56>
        if (mask & 1){
1a00704a:	687b      	ldr	r3, [r7, #4]
1a00704c:	f003 0301 	and.w	r3, r3, #1
1a007050:	2b00      	cmp	r3, #0
1a007052:	d004      	beq.n	1a00705e <inv_set_accel_bias_mask+0x26>
            inv_data_builder.save.accel_bias[0] = bias[0];
1a007054:	68fb      	ldr	r3, [r7, #12]
1a007056:	681b      	ldr	r3, [r3, #0]
1a007058:	4a15      	ldr	r2, [pc, #84]	; (1a0070b0 <inv_set_accel_bias_mask+0x78>)
1a00705a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
        }
        if (mask & 2){
1a00705e:	687b      	ldr	r3, [r7, #4]
1a007060:	f003 0302 	and.w	r3, r3, #2
1a007064:	2b00      	cmp	r3, #0
1a007066:	d004      	beq.n	1a007072 <inv_set_accel_bias_mask+0x3a>
            inv_data_builder.save.accel_bias[1] = bias[1];
1a007068:	68fb      	ldr	r3, [r7, #12]
1a00706a:	685b      	ldr	r3, [r3, #4]
1a00706c:	4a10      	ldr	r2, [pc, #64]	; (1a0070b0 <inv_set_accel_bias_mask+0x78>)
1a00706e:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
        }
        if (mask & 4){
1a007072:	687b      	ldr	r3, [r7, #4]
1a007074:	f003 0304 	and.w	r3, r3, #4
1a007078:	2b00      	cmp	r3, #0
1a00707a:	d004      	beq.n	1a007086 <inv_set_accel_bias_mask+0x4e>
            inv_data_builder.save.accel_bias[2] = bias[2];
1a00707c:	68fb      	ldr	r3, [r7, #12]
1a00707e:	689b      	ldr	r3, [r3, #8]
1a007080:	4a0b      	ldr	r2, [pc, #44]	; (1a0070b0 <inv_set_accel_bias_mask+0x78>)
1a007082:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
        }

        inv_apply_calibration(&sensors.accel, inv_data_builder.save.accel_bias);
1a007086:	490b      	ldr	r1, [pc, #44]	; (1a0070b4 <inv_set_accel_bias_mask+0x7c>)
1a007088:	480b      	ldr	r0, [pc, #44]	; (1a0070b8 <inv_set_accel_bias_mask+0x80>)
1a00708a:	f7ff ff21 	bl	1a006ed0 <inv_apply_calibration>
    }
    sensors.accel.accuracy = accuracy;
1a00708e:	4a0b      	ldr	r2, [pc, #44]	; (1a0070bc <inv_set_accel_bias_mask+0x84>)
1a007090:	68bb      	ldr	r3, [r7, #8]
1a007092:	6793      	str	r3, [r2, #120]	; 0x78
    inv_data_builder.save.accel_accuracy = accuracy;
1a007094:	4a06      	ldr	r2, [pc, #24]	; (1a0070b0 <inv_set_accel_bias_mask+0x78>)
1a007096:	68bb      	ldr	r3, [r7, #8]
1a007098:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    inv_set_message(INV_MSG_NEW_AB_EVENT, INV_MSG_NEW_AB_EVENT, 0);
1a00709c:	2200      	movs	r2, #0
1a00709e:	2110      	movs	r1, #16
1a0070a0:	2010      	movs	r0, #16
1a0070a2:	f000 fd39 	bl	1a007b18 <inv_set_message>
}
1a0070a6:	bf00      	nop
1a0070a8:	3710      	adds	r7, #16
1a0070aa:	46bd      	mov	sp, r7
1a0070ac:	bd80      	pop	{r7, pc}
1a0070ae:	bf00      	nop
1a0070b0:	10086598 	.word	0x10086598
1a0070b4:	100866ac 	.word	0x100866ac
1a0070b8:	1008671c 	.word	0x1008671c
1a0070bc:	100866d8 	.word	0x100866d8

1a0070c0 <inv_set_gyro_bias>:
* @param[in] bias Gyro bias in hardware units scaled by 2^16. In chip mounting frame.
*            Length 3.
* @param[in] accuracy Accuracy of bias. 0 = least accurate, 3 = most accurate.
*/
void inv_set_gyro_bias(const long *bias, int accuracy)
{
1a0070c0:	b580      	push	{r7, lr}
1a0070c2:	b082      	sub	sp, #8
1a0070c4:	af00      	add	r7, sp, #0
1a0070c6:	6078      	str	r0, [r7, #4]
1a0070c8:	6039      	str	r1, [r7, #0]
    if (bias != NULL) {
1a0070ca:	687b      	ldr	r3, [r7, #4]
1a0070cc:	2b00      	cmp	r3, #0
1a0070ce:	d010      	beq.n	1a0070f2 <inv_set_gyro_bias+0x32>
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
1a0070d0:	220c      	movs	r2, #12
1a0070d2:	6879      	ldr	r1, [r7, #4]
1a0070d4:	4819      	ldr	r0, [pc, #100]	; (1a00713c <inv_set_gyro_bias+0x7c>)
1a0070d6:	f00d fccf 	bl	1a014a78 <memcmp>
1a0070da:	4603      	mov	r3, r0
1a0070dc:	2b00      	cmp	r3, #0
1a0070de:	d008      	beq.n	1a0070f2 <inv_set_gyro_bias+0x32>
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
1a0070e0:	220c      	movs	r2, #12
1a0070e2:	6879      	ldr	r1, [r7, #4]
1a0070e4:	4815      	ldr	r0, [pc, #84]	; (1a00713c <inv_set_gyro_bias+0x7c>)
1a0070e6:	f00d fcf9 	bl	1a014adc <memcpy>
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
1a0070ea:	4914      	ldr	r1, [pc, #80]	; (1a00713c <inv_set_gyro_bias+0x7c>)
1a0070ec:	4814      	ldr	r0, [pc, #80]	; (1a007140 <inv_set_gyro_bias+0x80>)
1a0070ee:	f7ff feef 	bl	1a006ed0 <inv_apply_calibration>
        }
    }
    sensors.gyro.accuracy = accuracy;
1a0070f2:	4a13      	ldr	r2, [pc, #76]	; (1a007140 <inv_set_gyro_bias+0x80>)
1a0070f4:	683b      	ldr	r3, [r7, #0]
1a0070f6:	6353      	str	r3, [r2, #52]	; 0x34
    inv_data_builder.save.gyro_accuracy = accuracy;
1a0070f8:	4a12      	ldr	r2, [pc, #72]	; (1a007144 <inv_set_gyro_bias+0x84>)
1a0070fa:	683b      	ldr	r3, [r7, #0]
1a0070fc:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
1a007100:	4b0f      	ldr	r3, [pc, #60]	; (1a007140 <inv_set_gyro_bias+0x80>)
1a007102:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
1a007106:	2b00      	cmp	r3, #0
1a007108:	d006      	beq.n	1a007118 <inv_set_gyro_bias+0x58>
        inv_data_builder.save.gyro_temp = sensors.temp.calibrated[0];
1a00710a:	4b0d      	ldr	r3, [pc, #52]	; (1a007140 <inv_set_gyro_bias+0x80>)
1a00710c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
1a007110:	4a0c      	ldr	r2, [pc, #48]	; (1a007144 <inv_set_gyro_bias+0x84>)
1a007112:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
1a007116:	e004      	b.n	1a007122 <inv_set_gyro_bias+0x62>
    else
        /* Set to 27 deg C for now until we've got a better solution. */
        inv_data_builder.save.gyro_temp = 1769472L;
1a007118:	4b0a      	ldr	r3, [pc, #40]	; (1a007144 <inv_set_gyro_bias+0x84>)
1a00711a:	f44f 12d8 	mov.w	r2, #1769472	; 0x1b0000
1a00711e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    inv_set_message(INV_MSG_NEW_GB_EVENT, INV_MSG_NEW_GB_EVENT, 0);
1a007122:	2200      	movs	r2, #0
1a007124:	2104      	movs	r1, #4
1a007126:	2004      	movs	r0, #4
1a007128:	f000 fcf6 	bl	1a007b18 <inv_set_message>

    /* TODO: this flag works around the synchronization problem seen with using
       the user-exposed message layer to signal the temperature compensation
       module that gyro biases were set.
       A better, cleaner method is certainly needed. */
    inv_data_builder.save.gyro_bias_tc_set = true;
1a00712c:	4b05      	ldr	r3, [pc, #20]	; (1a007144 <inv_set_gyro_bias+0x84>)
1a00712e:	2201      	movs	r2, #1
1a007130:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
1a007134:	bf00      	nop
1a007136:	3708      	adds	r7, #8
1a007138:	46bd      	mov	sp, r7
1a00713a:	bd80      	pop	{r7, pc}
1a00713c:	10086698 	.word	0x10086698
1a007140:	100866d8 	.word	0x100866d8
1a007144:	10086598 	.word	0x10086598

1a007148 <inv_get_gyro_bias_tc_set>:
 *          The flag clear automatically after is read.
 *  @return true if the flag was set, indicating gyro biases were set.
 *          false if the flag was not set.
 */
int inv_get_gyro_bias_tc_set(void)
{
1a007148:	b480      	push	{r7}
1a00714a:	b083      	sub	sp, #12
1a00714c:	af00      	add	r7, sp, #0
    int flag = (inv_data_builder.save.gyro_bias_tc_set == true);
1a00714e:	4b0a      	ldr	r3, [pc, #40]	; (1a007178 <inv_get_gyro_bias_tc_set+0x30>)
1a007150:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
1a007154:	2b01      	cmp	r3, #1
1a007156:	bf0c      	ite	eq
1a007158:	2301      	moveq	r3, #1
1a00715a:	2300      	movne	r3, #0
1a00715c:	b2db      	uxtb	r3, r3
1a00715e:	607b      	str	r3, [r7, #4]
    inv_data_builder.save.gyro_bias_tc_set = false;
1a007160:	4b05      	ldr	r3, [pc, #20]	; (1a007178 <inv_get_gyro_bias_tc_set+0x30>)
1a007162:	2200      	movs	r2, #0
1a007164:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return flag;
1a007168:	687b      	ldr	r3, [r7, #4]
}
1a00716a:	4618      	mov	r0, r3
1a00716c:	370c      	adds	r7, #12
1a00716e:	46bd      	mov	sp, r7
1a007170:	f85d 7b04 	ldr.w	r7, [sp], #4
1a007174:	4770      	bx	lr
1a007176:	bf00      	nop
1a007178:	10086598 	.word	0x10086598

1a00717c <inv_get_gyro_bias>:
 *              Length 3.
 *  @param[in] temp
 *              Tempearature in degrees C.
 */
void inv_get_gyro_bias(long *bias, long *temp)
{
1a00717c:	b580      	push	{r7, lr}
1a00717e:	b082      	sub	sp, #8
1a007180:	af00      	add	r7, sp, #0
1a007182:	6078      	str	r0, [r7, #4]
1a007184:	6039      	str	r1, [r7, #0]
    if (bias != NULL)
1a007186:	687b      	ldr	r3, [r7, #4]
1a007188:	2b00      	cmp	r3, #0
1a00718a:	d004      	beq.n	1a007196 <inv_get_gyro_bias+0x1a>
        memcpy(bias, inv_data_builder.save.gyro_bias,
1a00718c:	220c      	movs	r2, #12
1a00718e:	4908      	ldr	r1, [pc, #32]	; (1a0071b0 <inv_get_gyro_bias+0x34>)
1a007190:	6878      	ldr	r0, [r7, #4]
1a007192:	f00d fca3 	bl	1a014adc <memcpy>
               sizeof(inv_data_builder.save.gyro_bias));
    if (temp != NULL)
1a007196:	683b      	ldr	r3, [r7, #0]
1a007198:	2b00      	cmp	r3, #0
1a00719a:	d004      	beq.n	1a0071a6 <inv_get_gyro_bias+0x2a>
        temp[0] = inv_data_builder.save.gyro_temp;
1a00719c:	4b05      	ldr	r3, [pc, #20]	; (1a0071b4 <inv_get_gyro_bias+0x38>)
1a00719e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
1a0071a2:	683b      	ldr	r3, [r7, #0]
1a0071a4:	601a      	str	r2, [r3, #0]
}
1a0071a6:	bf00      	nop
1a0071a8:	3708      	adds	r7, #8
1a0071aa:	46bd      	mov	sp, r7
1a0071ac:	bd80      	pop	{r7, pc}
1a0071ae:	bf00      	nop
1a0071b0:	10086698 	.word	0x10086698
1a0071b4:	10086598 	.word	0x10086598

1a0071b8 <inv_build_accel>:
 *  @param[in]  timestamp 
 *              Monotonic time stamp, for Android it's in nanoseconds.
 *  @return     Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_build_accel(const long *accel, int status, inv_time_t timestamp)
{
1a0071b8:	b580      	push	{r7, lr}
1a0071ba:	b084      	sub	sp, #16
1a0071bc:	af00      	add	r7, sp, #0
1a0071be:	60f8      	str	r0, [r7, #12]
1a0071c0:	60b9      	str	r1, [r7, #8]
1a0071c2:	607a      	str	r2, [r7, #4]
        fwrite(accel, sizeof(accel[0]), 3, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif

    if ((status & INV_CALIBRATED) == 0) {
1a0071c4:	68bb      	ldr	r3, [r7, #8]
1a0071c6:	f003 0320 	and.w	r3, r3, #32
1a0071ca:	2b00      	cmp	r3, #0
1a0071cc:	d11e      	bne.n	1a00720c <inv_build_accel+0x54>
        sensors.accel.raw[0] = (short)accel[0];
1a0071ce:	68fb      	ldr	r3, [r7, #12]
1a0071d0:	681b      	ldr	r3, [r3, #0]
1a0071d2:	b29a      	uxth	r2, r3
1a0071d4:	4b25      	ldr	r3, [pc, #148]	; (1a00726c <inv_build_accel+0xb4>)
1a0071d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        sensors.accel.raw[1] = (short)accel[1];
1a0071da:	68fb      	ldr	r3, [r7, #12]
1a0071dc:	3304      	adds	r3, #4
1a0071de:	681b      	ldr	r3, [r3, #0]
1a0071e0:	b29a      	uxth	r2, r3
1a0071e2:	4b22      	ldr	r3, [pc, #136]	; (1a00726c <inv_build_accel+0xb4>)
1a0071e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        sensors.accel.raw[2] = (short)accel[2];
1a0071e8:	68fb      	ldr	r3, [r7, #12]
1a0071ea:	3308      	adds	r3, #8
1a0071ec:	681b      	ldr	r3, [r3, #0]
1a0071ee:	b29a      	uxth	r2, r3
1a0071f0:	4b1e      	ldr	r3, [pc, #120]	; (1a00726c <inv_build_accel+0xb4>)
1a0071f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        sensors.accel.status |= INV_RAW_DATA;
1a0071f6:	4b1d      	ldr	r3, [pc, #116]	; (1a00726c <inv_build_accel+0xb4>)
1a0071f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a0071fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0071fe:	4a1b      	ldr	r2, [pc, #108]	; (1a00726c <inv_build_accel+0xb4>)
1a007200:	6753      	str	r3, [r2, #116]	; 0x74
        inv_apply_calibration(&sensors.accel, inv_data_builder.save.accel_bias);
1a007202:	491b      	ldr	r1, [pc, #108]	; (1a007270 <inv_build_accel+0xb8>)
1a007204:	481b      	ldr	r0, [pc, #108]	; (1a007274 <inv_build_accel+0xbc>)
1a007206:	f7ff fe63 	bl	1a006ed0 <inv_apply_calibration>
1a00720a:	e01c      	b.n	1a007246 <inv_build_accel+0x8e>
    } else {
        sensors.accel.calibrated[0] = accel[0];
1a00720c:	68fb      	ldr	r3, [r7, #12]
1a00720e:	681b      	ldr	r3, [r3, #0]
1a007210:	4a16      	ldr	r2, [pc, #88]	; (1a00726c <inv_build_accel+0xb4>)
1a007212:	65d3      	str	r3, [r2, #92]	; 0x5c
        sensors.accel.calibrated[1] = accel[1];
1a007214:	68fb      	ldr	r3, [r7, #12]
1a007216:	685b      	ldr	r3, [r3, #4]
1a007218:	4a14      	ldr	r2, [pc, #80]	; (1a00726c <inv_build_accel+0xb4>)
1a00721a:	6613      	str	r3, [r2, #96]	; 0x60
        sensors.accel.calibrated[2] = accel[2];
1a00721c:	68fb      	ldr	r3, [r7, #12]
1a00721e:	689b      	ldr	r3, [r3, #8]
1a007220:	4a12      	ldr	r2, [pc, #72]	; (1a00726c <inv_build_accel+0xb4>)
1a007222:	6653      	str	r3, [r2, #100]	; 0x64
        sensors.accel.status |= INV_CALIBRATED;
1a007224:	4b11      	ldr	r3, [pc, #68]	; (1a00726c <inv_build_accel+0xb4>)
1a007226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a007228:	f043 0320 	orr.w	r3, r3, #32
1a00722c:	4a0f      	ldr	r2, [pc, #60]	; (1a00726c <inv_build_accel+0xb4>)
1a00722e:	6753      	str	r3, [r2, #116]	; 0x74
        sensors.accel.accuracy = status & 3;
1a007230:	68bb      	ldr	r3, [r7, #8]
1a007232:	f003 0303 	and.w	r3, r3, #3
1a007236:	4a0d      	ldr	r2, [pc, #52]	; (1a00726c <inv_build_accel+0xb4>)
1a007238:	6793      	str	r3, [r2, #120]	; 0x78
        inv_data_builder.save.accel_accuracy = status & 3;
1a00723a:	68bb      	ldr	r3, [r7, #8]
1a00723c:	f003 0303 	and.w	r3, r3, #3
1a007240:	4a0d      	ldr	r2, [pc, #52]	; (1a007278 <inv_build_accel+0xc0>)
1a007242:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    }
    sensors.accel.status |= INV_NEW_DATA | INV_SENSOR_ON;
1a007246:	4b09      	ldr	r3, [pc, #36]	; (1a00726c <inv_build_accel+0xb4>)
1a007248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a00724a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
1a00724e:	4a07      	ldr	r2, [pc, #28]	; (1a00726c <inv_build_accel+0xb4>)
1a007250:	6753      	str	r3, [r2, #116]	; 0x74
    sensors.accel.timestamp_prev = sensors.accel.timestamp;
1a007252:	4b06      	ldr	r3, [pc, #24]	; (1a00726c <inv_build_accel+0xb4>)
1a007254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1a007256:	4a05      	ldr	r2, [pc, #20]	; (1a00726c <inv_build_accel+0xb4>)
1a007258:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    sensors.accel.timestamp = timestamp;
1a00725c:	4a03      	ldr	r2, [pc, #12]	; (1a00726c <inv_build_accel+0xb4>)
1a00725e:	687b      	ldr	r3, [r7, #4]
1a007260:	67d3      	str	r3, [r2, #124]	; 0x7c

    return INV_SUCCESS;
1a007262:	2300      	movs	r3, #0
}
1a007264:	4618      	mov	r0, r3
1a007266:	3710      	adds	r7, #16
1a007268:	46bd      	mov	sp, r7
1a00726a:	bd80      	pop	{r7, pc}
1a00726c:	100866d8 	.word	0x100866d8
1a007270:	100866ac 	.word	0x100866ac
1a007274:	1008671c 	.word	0x1008671c
1a007278:	10086598 	.word	0x10086598

1a00727c <inv_build_gyro>:
* @param[in] timestamp Monotonic time stamp, for Android it's in nanoseconds.
* @param[out] executed Set to 1 if data processing was done.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_build_gyro(const short *gyro, inv_time_t timestamp)
{
1a00727c:	b580      	push	{r7, lr}
1a00727e:	b082      	sub	sp, #8
1a007280:	af00      	add	r7, sp, #0
1a007282:	6078      	str	r0, [r7, #4]
1a007284:	6039      	str	r1, [r7, #0]
        fwrite(gyro, sizeof(gyro[0]), 3, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif

    memcpy(sensors.gyro.raw, gyro, 3 * sizeof(short));
1a007286:	2206      	movs	r2, #6
1a007288:	6879      	ldr	r1, [r7, #4]
1a00728a:	480c      	ldr	r0, [pc, #48]	; (1a0072bc <inv_build_gyro+0x40>)
1a00728c:	f00d fc26 	bl	1a014adc <memcpy>
    sensors.gyro.status |= INV_NEW_DATA | INV_RAW_DATA | INV_SENSOR_ON;
1a007290:	4b0b      	ldr	r3, [pc, #44]	; (1a0072c0 <inv_build_gyro+0x44>)
1a007292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a007294:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
1a007298:	4a09      	ldr	r2, [pc, #36]	; (1a0072c0 <inv_build_gyro+0x44>)
1a00729a:	6313      	str	r3, [r2, #48]	; 0x30
    sensors.gyro.timestamp_prev = sensors.gyro.timestamp;
1a00729c:	4b08      	ldr	r3, [pc, #32]	; (1a0072c0 <inv_build_gyro+0x44>)
1a00729e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1a0072a0:	4a07      	ldr	r2, [pc, #28]	; (1a0072c0 <inv_build_gyro+0x44>)
1a0072a2:	63d3      	str	r3, [r2, #60]	; 0x3c
    sensors.gyro.timestamp = timestamp;
1a0072a4:	4a06      	ldr	r2, [pc, #24]	; (1a0072c0 <inv_build_gyro+0x44>)
1a0072a6:	683b      	ldr	r3, [r7, #0]
1a0072a8:	6393      	str	r3, [r2, #56]	; 0x38
    inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
1a0072aa:	4906      	ldr	r1, [pc, #24]	; (1a0072c4 <inv_build_gyro+0x48>)
1a0072ac:	4804      	ldr	r0, [pc, #16]	; (1a0072c0 <inv_build_gyro+0x44>)
1a0072ae:	f7ff fe0f 	bl	1a006ed0 <inv_apply_calibration>

    return INV_SUCCESS;
1a0072b2:	2300      	movs	r3, #0
}
1a0072b4:	4618      	mov	r0, r3
1a0072b6:	3708      	adds	r7, #8
1a0072b8:	46bd      	mov	sp, r7
1a0072ba:	bd80      	pop	{r7, pc}
1a0072bc:	100866dc 	.word	0x100866dc
1a0072c0:	100866d8 	.word	0x100866d8
1a0072c4:	10086698 	.word	0x10086698

1a0072c8 <inv_build_compass>:
* @param[out] executed Set to 1 if data processing was done.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_build_compass(const long *compass, int status,
                              inv_time_t timestamp)
{
1a0072c8:	b580      	push	{r7, lr}
1a0072ca:	b088      	sub	sp, #32
1a0072cc:	af00      	add	r7, sp, #0
1a0072ce:	60f8      	str	r0, [r7, #12]
1a0072d0:	60b9      	str	r1, [r7, #8]
1a0072d2:	607a      	str	r2, [r7, #4]
        fwrite(compass, sizeof(compass[0]), 3, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif

    if ((status & INV_CALIBRATED) == 0) {
1a0072d4:	68bb      	ldr	r3, [r7, #8]
1a0072d6:	f003 0320 	and.w	r3, r3, #32
1a0072da:	2b00      	cmp	r3, #0
1a0072dc:	d123      	bne.n	1a007326 <inv_build_compass+0x5e>
        long data[3];
        inv_set_compass_soft_iron_input_data(compass);
1a0072de:	68f8      	ldr	r0, [r7, #12]
1a0072e0:	f000 fb3a 	bl	1a007958 <inv_set_compass_soft_iron_input_data>
        inv_get_compass_soft_iron_output_data(data);
1a0072e4:	f107 0314 	add.w	r3, r7, #20
1a0072e8:	4618      	mov	r0, r3
1a0072ea:	f000 fb15 	bl	1a007918 <inv_get_compass_soft_iron_output_data>
        sensors.compass.raw[0] = (short)data[0];
1a0072ee:	697b      	ldr	r3, [r7, #20]
1a0072f0:	b29a      	uxth	r2, r3
1a0072f2:	4b2a      	ldr	r3, [pc, #168]	; (1a00739c <inv_build_compass+0xd4>)
1a0072f4:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
        sensors.compass.raw[1] = (short)data[1];
1a0072f8:	69bb      	ldr	r3, [r7, #24]
1a0072fa:	b29a      	uxth	r2, r3
1a0072fc:	4b27      	ldr	r3, [pc, #156]	; (1a00739c <inv_build_compass+0xd4>)
1a0072fe:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        sensors.compass.raw[2] = (short)data[2];
1a007302:	69fb      	ldr	r3, [r7, #28]
1a007304:	b29a      	uxth	r2, r3
1a007306:	4b25      	ldr	r3, [pc, #148]	; (1a00739c <inv_build_compass+0xd4>)
1a007308:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
        inv_apply_calibration(&sensors.compass, inv_data_builder.save.compass_bias);
1a00730c:	4924      	ldr	r1, [pc, #144]	; (1a0073a0 <inv_build_compass+0xd8>)
1a00730e:	4825      	ldr	r0, [pc, #148]	; (1a0073a4 <inv_build_compass+0xdc>)
1a007310:	f7ff fdde 	bl	1a006ed0 <inv_apply_calibration>
        sensors.compass.status |= INV_RAW_DATA;
1a007314:	4b21      	ldr	r3, [pc, #132]	; (1a00739c <inv_build_compass+0xd4>)
1a007316:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a00731a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00731e:	4a1f      	ldr	r2, [pc, #124]	; (1a00739c <inv_build_compass+0xd4>)
1a007320:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
1a007324:	e022      	b.n	1a00736c <inv_build_compass+0xa4>
    } else {
        sensors.compass.calibrated[0] = compass[0];
1a007326:	68fb      	ldr	r3, [r7, #12]
1a007328:	681b      	ldr	r3, [r3, #0]
1a00732a:	4a1c      	ldr	r2, [pc, #112]	; (1a00739c <inv_build_compass+0xd4>)
1a00732c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        sensors.compass.calibrated[1] = compass[1];
1a007330:	68fb      	ldr	r3, [r7, #12]
1a007332:	685b      	ldr	r3, [r3, #4]
1a007334:	4a19      	ldr	r2, [pc, #100]	; (1a00739c <inv_build_compass+0xd4>)
1a007336:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
        sensors.compass.calibrated[2] = compass[2];
1a00733a:	68fb      	ldr	r3, [r7, #12]
1a00733c:	689b      	ldr	r3, [r3, #8]
1a00733e:	4a17      	ldr	r2, [pc, #92]	; (1a00739c <inv_build_compass+0xd4>)
1a007340:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
        sensors.compass.status |= INV_CALIBRATED;
1a007344:	4b15      	ldr	r3, [pc, #84]	; (1a00739c <inv_build_compass+0xd4>)
1a007346:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a00734a:	f043 0320 	orr.w	r3, r3, #32
1a00734e:	4a13      	ldr	r2, [pc, #76]	; (1a00739c <inv_build_compass+0xd4>)
1a007350:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
        sensors.compass.accuracy = status & 3;
1a007354:	68bb      	ldr	r3, [r7, #8]
1a007356:	f003 0303 	and.w	r3, r3, #3
1a00735a:	4a10      	ldr	r2, [pc, #64]	; (1a00739c <inv_build_compass+0xd4>)
1a00735c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
        inv_data_builder.save.compass_accuracy = status & 3;
1a007360:	68bb      	ldr	r3, [r7, #8]
1a007362:	f003 0303 	and.w	r3, r3, #3
1a007366:	4a10      	ldr	r2, [pc, #64]	; (1a0073a8 <inv_build_compass+0xe0>)
1a007368:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
    }
    sensors.compass.timestamp_prev = sensors.compass.timestamp;
1a00736c:	4b0b      	ldr	r3, [pc, #44]	; (1a00739c <inv_build_compass+0xd4>)
1a00736e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
1a007372:	4a0a      	ldr	r2, [pc, #40]	; (1a00739c <inv_build_compass+0xd4>)
1a007374:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
    sensors.compass.timestamp = timestamp;
1a007378:	4a08      	ldr	r2, [pc, #32]	; (1a00739c <inv_build_compass+0xd4>)
1a00737a:	687b      	ldr	r3, [r7, #4]
1a00737c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
    sensors.compass.status |= INV_NEW_DATA | INV_SENSOR_ON;
1a007380:	4b06      	ldr	r3, [pc, #24]	; (1a00739c <inv_build_compass+0xd4>)
1a007382:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a007386:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
1a00738a:	4a04      	ldr	r2, [pc, #16]	; (1a00739c <inv_build_compass+0xd4>)
1a00738c:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    return INV_SUCCESS;
1a007390:	2300      	movs	r3, #0
}
1a007392:	4618      	mov	r0, r3
1a007394:	3720      	adds	r7, #32
1a007396:	46bd      	mov	sp, r7
1a007398:	bd80      	pop	{r7, pc}
1a00739a:	bf00      	nop
1a00739c:	100866d8 	.word	0x100866d8
1a0073a0:	1008668c 	.word	0x1008668c
1a0073a4:	10086760 	.word	0x10086760
1a0073a8:	10086598 	.word	0x10086598

1a0073ac <inv_build_temp>:
 *  @param[in]  timestamp   Monotonic time stamp; for Android it's in
 *                          nanoseconds.
* @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_build_temp(const long temp, inv_time_t timestamp)
{
1a0073ac:	b480      	push	{r7}
1a0073ae:	b083      	sub	sp, #12
1a0073b0:	af00      	add	r7, sp, #0
1a0073b2:	6078      	str	r0, [r7, #4]
1a0073b4:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&temp, sizeof(temp), 1, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif
    sensors.temp.calibrated[0] = temp;
1a0073b6:	4a0e      	ldr	r2, [pc, #56]	; (1a0073f0 <inv_build_temp+0x44>)
1a0073b8:	687b      	ldr	r3, [r7, #4]
1a0073ba:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    sensors.temp.status |= INV_NEW_DATA | INV_RAW_DATA | INV_SENSOR_ON;
1a0073be:	4b0c      	ldr	r3, [pc, #48]	; (1a0073f0 <inv_build_temp+0x44>)
1a0073c0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
1a0073c4:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
1a0073c8:	4a09      	ldr	r2, [pc, #36]	; (1a0073f0 <inv_build_temp+0x44>)
1a0073ca:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    sensors.temp.timestamp_prev = sensors.temp.timestamp;
1a0073ce:	4b08      	ldr	r3, [pc, #32]	; (1a0073f0 <inv_build_temp+0x44>)
1a0073d0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
1a0073d4:	4a06      	ldr	r2, [pc, #24]	; (1a0073f0 <inv_build_temp+0x44>)
1a0073d6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    sensors.temp.timestamp = timestamp;
1a0073da:	4a05      	ldr	r2, [pc, #20]	; (1a0073f0 <inv_build_temp+0x44>)
1a0073dc:	683b      	ldr	r3, [r7, #0]
1a0073de:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    /* TODO: Apply scale, remove offset. */

    return INV_SUCCESS;
1a0073e2:	2300      	movs	r3, #0
}
1a0073e4:	4618      	mov	r0, r3
1a0073e6:	370c      	adds	r7, #12
1a0073e8:	46bd      	mov	sp, r7
1a0073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0073ee:	4770      	bx	lr
1a0073f0:	100866d8 	.word	0x100866d8

1a0073f4 <inv_build_quat>:
*                         nanoseconds.
* @param[out] executed Set to 1 if data processing was done.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_build_quat(const long *quat, int status, inv_time_t timestamp)
{
1a0073f4:	b580      	push	{r7, lr}
1a0073f6:	b084      	sub	sp, #16
1a0073f8:	af00      	add	r7, sp, #0
1a0073fa:	60f8      	str	r0, [r7, #12]
1a0073fc:	60b9      	str	r1, [r7, #8]
1a0073fe:	607a      	str	r2, [r7, #4]
        fwrite(quat, sizeof(quat[0]), 4, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif
    
    memcpy(sensors.quat.raw, quat, sizeof(sensors.quat.raw));
1a007400:	2210      	movs	r2, #16
1a007402:	68f9      	ldr	r1, [r7, #12]
1a007404:	480e      	ldr	r0, [pc, #56]	; (1a007440 <inv_build_quat+0x4c>)
1a007406:	f00d fb69 	bl	1a014adc <memcpy>
    sensors.quat.timestamp = timestamp;
1a00740a:	4a0e      	ldr	r2, [pc, #56]	; (1a007444 <inv_build_quat+0x50>)
1a00740c:	687b      	ldr	r3, [r7, #4]
1a00740e:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    sensors.quat.status |= INV_NEW_DATA | INV_RAW_DATA | INV_SENSOR_ON;
1a007412:	4b0c      	ldr	r3, [pc, #48]	; (1a007444 <inv_build_quat+0x50>)
1a007414:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a007418:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
1a00741c:	4a09      	ldr	r2, [pc, #36]	; (1a007444 <inv_build_quat+0x50>)
1a00741e:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    sensors.quat.status |= (INV_BIAS_APPLIED & status);
1a007422:	4b08      	ldr	r3, [pc, #32]	; (1a007444 <inv_build_quat+0x50>)
1a007424:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
1a007428:	68bb      	ldr	r3, [r7, #8]
1a00742a:	f403 7300 	and.w	r3, r3, #512	; 0x200
1a00742e:	4313      	orrs	r3, r2
1a007430:	4a04      	ldr	r2, [pc, #16]	; (1a007444 <inv_build_quat+0x50>)
1a007432:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return INV_SUCCESS;
1a007436:	2300      	movs	r3, #0
}
1a007438:	4618      	mov	r0, r3
1a00743a:	3710      	adds	r7, #16
1a00743c:	46bd      	mov	sp, r7
1a00743e:	bd80      	pop	{r7, pc}
1a007440:	100867e8 	.word	0x100867e8
1a007444:	100866d8 	.word	0x100866d8

1a007448 <inv_register_data_cb>:
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
1a007448:	b580      	push	{r7, lr}
1a00744a:	b088      	sub	sp, #32
1a00744c:	af00      	add	r7, sp, #0
1a00744e:	60f8      	str	r0, [r7, #12]
1a007450:	60b9      	str	r1, [r7, #8]
1a007452:	607a      	str	r2, [r7, #4]
    inv_error_t result = INV_SUCCESS;
1a007454:	2300      	movs	r3, #0
1a007456:	61fb      	str	r3, [r7, #28]
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1a007458:	2300      	movs	r3, #0
1a00745a:	61bb      	str	r3, [r7, #24]
1a00745c:	e01c      	b.n	1a007498 <inv_register_data_cb+0x50>
        if ((inv_data_builder.process[kk].func == func) ||
1a00745e:	494a      	ldr	r1, [pc, #296]	; (1a007588 <inv_register_data_cb+0x140>)
1a007460:	69ba      	ldr	r2, [r7, #24]
1a007462:	4613      	mov	r3, r2
1a007464:	005b      	lsls	r3, r3, #1
1a007466:	4413      	add	r3, r2
1a007468:	009b      	lsls	r3, r3, #2
1a00746a:	440b      	add	r3, r1
1a00746c:	3304      	adds	r3, #4
1a00746e:	681a      	ldr	r2, [r3, #0]
1a007470:	68fb      	ldr	r3, [r7, #12]
1a007472:	429a      	cmp	r2, r3
1a007474:	d00b      	beq.n	1a00748e <inv_register_data_cb+0x46>
                (inv_data_builder.process[kk].priority == priority)) {
1a007476:	4944      	ldr	r1, [pc, #272]	; (1a007588 <inv_register_data_cb+0x140>)
1a007478:	69ba      	ldr	r2, [r7, #24]
1a00747a:	4613      	mov	r3, r2
1a00747c:	005b      	lsls	r3, r3, #1
1a00747e:	4413      	add	r3, r2
1a007480:	009b      	lsls	r3, r3, #2
1a007482:	440b      	add	r3, r1
1a007484:	3308      	adds	r3, #8
1a007486:	681a      	ldr	r2, [r3, #0]
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if ((inv_data_builder.process[kk].func == func) ||
1a007488:	68bb      	ldr	r3, [r7, #8]
1a00748a:	429a      	cmp	r2, r3
1a00748c:	d101      	bne.n	1a007492 <inv_register_data_cb+0x4a>
                (inv_data_builder.process[kk].priority == priority)) {
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
1a00748e:	2316      	movs	r3, #22
1a007490:	e076      	b.n	1a007580 <inv_register_data_cb+0x138>
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1a007492:	69bb      	ldr	r3, [r7, #24]
1a007494:	3301      	adds	r3, #1
1a007496:	61bb      	str	r3, [r7, #24]
1a007498:	4b3b      	ldr	r3, [pc, #236]	; (1a007588 <inv_register_data_cb+0x140>)
1a00749a:	681a      	ldr	r2, [r3, #0]
1a00749c:	69bb      	ldr	r3, [r7, #24]
1a00749e:	429a      	cmp	r2, r3
1a0074a0:	dcdd      	bgt.n	1a00745e <inv_register_data_cb+0x16>
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
        }
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
1a0074a2:	4b39      	ldr	r3, [pc, #228]	; (1a007588 <inv_register_data_cb+0x140>)
1a0074a4:	681b      	ldr	r3, [r3, #0]
1a0074a6:	2b13      	cmp	r3, #19
1a0074a8:	dc62      	bgt.n	1a007570 <inv_register_data_cb+0x128>
        kk = 0;
1a0074aa:	2300      	movs	r3, #0
1a0074ac:	61bb      	str	r3, [r7, #24]
        if (inv_data_builder.num_cb != 0) {
1a0074ae:	4b36      	ldr	r3, [pc, #216]	; (1a007588 <inv_register_data_cb+0x140>)
1a0074b0:	681b      	ldr	r3, [r3, #0]
1a0074b2:	2b00      	cmp	r3, #0
1a0074b4:	d038      	beq.n	1a007528 <inv_register_data_cb+0xe0>
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
1a0074b6:	e002      	b.n	1a0074be <inv_register_data_cb+0x76>
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
1a0074b8:	69bb      	ldr	r3, [r7, #24]
1a0074ba:	3301      	adds	r3, #1
1a0074bc:	61bb      	str	r3, [r7, #24]
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
1a0074be:	4b32      	ldr	r3, [pc, #200]	; (1a007588 <inv_register_data_cb+0x140>)
1a0074c0:	681a      	ldr	r2, [r3, #0]
1a0074c2:	69bb      	ldr	r3, [r7, #24]
1a0074c4:	429a      	cmp	r2, r3
1a0074c6:	dd0b      	ble.n	1a0074e0 <inv_register_data_cb+0x98>
                    (inv_data_builder.process[kk].priority < priority)) {
1a0074c8:	492f      	ldr	r1, [pc, #188]	; (1a007588 <inv_register_data_cb+0x140>)
1a0074ca:	69ba      	ldr	r2, [r7, #24]
1a0074cc:	4613      	mov	r3, r2
1a0074ce:	005b      	lsls	r3, r3, #1
1a0074d0:	4413      	add	r3, r2
1a0074d2:	009b      	lsls	r3, r3, #2
1a0074d4:	440b      	add	r3, r1
1a0074d6:	3308      	adds	r3, #8
1a0074d8:	681a      	ldr	r2, [r3, #0]
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
1a0074da:	68bb      	ldr	r3, [r7, #8]
1a0074dc:	429a      	cmp	r2, r3
1a0074de:	dbeb      	blt.n	1a0074b8 <inv_register_data_cb+0x70>
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
            }
            if (kk != inv_data_builder.num_cb) {
1a0074e0:	4b29      	ldr	r3, [pc, #164]	; (1a007588 <inv_register_data_cb+0x140>)
1a0074e2:	681a      	ldr	r2, [r3, #0]
1a0074e4:	69bb      	ldr	r3, [r7, #24]
1a0074e6:	429a      	cmp	r2, r3
1a0074e8:	d01e      	beq.n	1a007528 <inv_register_data_cb+0xe0>
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
1a0074ea:	4b27      	ldr	r3, [pc, #156]	; (1a007588 <inv_register_data_cb+0x140>)
1a0074ec:	681b      	ldr	r3, [r3, #0]
1a0074ee:	617b      	str	r3, [r7, #20]
1a0074f0:	e016      	b.n	1a007520 <inv_register_data_cb+0xd8>
                    inv_data_builder.process[nn] =
                        inv_data_builder.process[nn - 1];
1a0074f2:	697b      	ldr	r3, [r7, #20]
1a0074f4:	1e5a      	subs	r2, r3, #1
                kk++;
            }
            if (kk != inv_data_builder.num_cb) {
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
                    inv_data_builder.process[nn] =
1a0074f6:	4824      	ldr	r0, [pc, #144]	; (1a007588 <inv_register_data_cb+0x140>)
1a0074f8:	6979      	ldr	r1, [r7, #20]
1a0074fa:	460b      	mov	r3, r1
1a0074fc:	005b      	lsls	r3, r3, #1
1a0074fe:	440b      	add	r3, r1
1a007500:	009b      	lsls	r3, r3, #2
1a007502:	18c1      	adds	r1, r0, r3
1a007504:	4820      	ldr	r0, [pc, #128]	; (1a007588 <inv_register_data_cb+0x140>)
1a007506:	4613      	mov	r3, r2
1a007508:	005b      	lsls	r3, r3, #1
1a00750a:	4413      	add	r3, r2
1a00750c:	009b      	lsls	r3, r3, #2
1a00750e:	18c2      	adds	r2, r0, r3
1a007510:	1d0b      	adds	r3, r1, #4
1a007512:	3204      	adds	r2, #4
1a007514:	ca07      	ldmia	r2, {r0, r1, r2}
1a007516:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
            }
            if (kk != inv_data_builder.num_cb) {
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
1a00751a:	697b      	ldr	r3, [r7, #20]
1a00751c:	3b01      	subs	r3, #1
1a00751e:	617b      	str	r3, [r7, #20]
1a007520:	697a      	ldr	r2, [r7, #20]
1a007522:	69bb      	ldr	r3, [r7, #24]
1a007524:	429a      	cmp	r2, r3
1a007526:	dce4      	bgt.n	1a0074f2 <inv_register_data_cb+0xaa>
                        inv_data_builder.process[nn - 1];
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
1a007528:	4917      	ldr	r1, [pc, #92]	; (1a007588 <inv_register_data_cb+0x140>)
1a00752a:	69ba      	ldr	r2, [r7, #24]
1a00752c:	4613      	mov	r3, r2
1a00752e:	005b      	lsls	r3, r3, #1
1a007530:	4413      	add	r3, r2
1a007532:	009b      	lsls	r3, r3, #2
1a007534:	440b      	add	r3, r1
1a007536:	3304      	adds	r3, #4
1a007538:	68fa      	ldr	r2, [r7, #12]
1a00753a:	601a      	str	r2, [r3, #0]
        inv_data_builder.process[kk].priority = priority;
1a00753c:	4912      	ldr	r1, [pc, #72]	; (1a007588 <inv_register_data_cb+0x140>)
1a00753e:	69ba      	ldr	r2, [r7, #24]
1a007540:	4613      	mov	r3, r2
1a007542:	005b      	lsls	r3, r3, #1
1a007544:	4413      	add	r3, r2
1a007546:	009b      	lsls	r3, r3, #2
1a007548:	440b      	add	r3, r1
1a00754a:	3308      	adds	r3, #8
1a00754c:	68ba      	ldr	r2, [r7, #8]
1a00754e:	601a      	str	r2, [r3, #0]
        inv_data_builder.process[kk].data_required = sensor_type;
1a007550:	490d      	ldr	r1, [pc, #52]	; (1a007588 <inv_register_data_cb+0x140>)
1a007552:	69ba      	ldr	r2, [r7, #24]
1a007554:	4613      	mov	r3, r2
1a007556:	005b      	lsls	r3, r3, #1
1a007558:	4413      	add	r3, r2
1a00755a:	009b      	lsls	r3, r3, #2
1a00755c:	440b      	add	r3, r1
1a00755e:	330c      	adds	r3, #12
1a007560:	687a      	ldr	r2, [r7, #4]
1a007562:	601a      	str	r2, [r3, #0]
        inv_data_builder.num_cb++;
1a007564:	4b08      	ldr	r3, [pc, #32]	; (1a007588 <inv_register_data_cb+0x140>)
1a007566:	681b      	ldr	r3, [r3, #0]
1a007568:	3301      	adds	r3, #1
1a00756a:	4a07      	ldr	r2, [pc, #28]	; (1a007588 <inv_register_data_cb+0x140>)
1a00756c:	6013      	str	r3, [r2, #0]
1a00756e:	e006      	b.n	1a00757e <inv_register_data_cb+0x136>
    } else {
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
1a007570:	4a06      	ldr	r2, [pc, #24]	; (1a00758c <inv_register_data_cb+0x144>)
1a007572:	4907      	ldr	r1, [pc, #28]	; (1a007590 <inv_register_data_cb+0x148>)
1a007574:	2006      	movs	r0, #6
1a007576:	f7fb fc0b 	bl	1a002d90 <_MLPrintLog>
        result = INV_ERROR_MEMORY_EXAUSTED;
1a00757a:	230c      	movs	r3, #12
1a00757c:	61fb      	str	r3, [r7, #28]
    }

    return result;
1a00757e:	69fb      	ldr	r3, [r7, #28]
}
1a007580:	4618      	mov	r0, r3
1a007582:	3720      	adds	r7, #32
1a007584:	46bd      	mov	sp, r7
1a007586:	bd80      	pop	{r7, pc}
1a007588:	10086598 	.word	0x10086598
1a00758c:	1a019c20 	.word	0x1a019c20
1a007590:	1a019c64 	.word	0x1a019c64

1a007594 <inv_execute_on_data>:
* It will process the data it has received and update all the internal states
* and features that have been turned on.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_execute_on_data(void)
{
1a007594:	b580      	push	{r7, lr}
1a007596:	b084      	sub	sp, #16
1a007598:	af00      	add	r7, sp, #0
        int type = PLAYBACK_DBG_TYPE_EXECUTE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
    }
#endif
    // Determine what new data we have
    mode = 0;
1a00759a:	2300      	movs	r3, #0
1a00759c:	607b      	str	r3, [r7, #4]
    if (sensors.gyro.status & INV_NEW_DATA)
1a00759e:	4b35      	ldr	r3, [pc, #212]	; (1a007674 <inv_execute_on_data+0xe0>)
1a0075a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0075a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0075a6:	2b00      	cmp	r3, #0
1a0075a8:	d003      	beq.n	1a0075b2 <inv_execute_on_data+0x1e>
        mode |= INV_GYRO_NEW;
1a0075aa:	687b      	ldr	r3, [r7, #4]
1a0075ac:	f043 0302 	orr.w	r3, r3, #2
1a0075b0:	607b      	str	r3, [r7, #4]
    if (sensors.accel.status & INV_NEW_DATA)
1a0075b2:	4b30      	ldr	r3, [pc, #192]	; (1a007674 <inv_execute_on_data+0xe0>)
1a0075b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a0075b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0075ba:	2b00      	cmp	r3, #0
1a0075bc:	d003      	beq.n	1a0075c6 <inv_execute_on_data+0x32>
        mode |= INV_ACCEL_NEW;
1a0075be:	687b      	ldr	r3, [r7, #4]
1a0075c0:	f043 0301 	orr.w	r3, r3, #1
1a0075c4:	607b      	str	r3, [r7, #4]
    if (sensors.compass.status & INV_NEW_DATA)
1a0075c6:	4b2b      	ldr	r3, [pc, #172]	; (1a007674 <inv_execute_on_data+0xe0>)
1a0075c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a0075cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0075d0:	2b00      	cmp	r3, #0
1a0075d2:	d003      	beq.n	1a0075dc <inv_execute_on_data+0x48>
        mode |= INV_MAG_NEW;
1a0075d4:	687b      	ldr	r3, [r7, #4]
1a0075d6:	f043 0304 	orr.w	r3, r3, #4
1a0075da:	607b      	str	r3, [r7, #4]
    if (sensors.temp.status & INV_NEW_DATA)
1a0075dc:	4b25      	ldr	r3, [pc, #148]	; (1a007674 <inv_execute_on_data+0xe0>)
1a0075de:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
1a0075e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0075e6:	2b00      	cmp	r3, #0
1a0075e8:	d003      	beq.n	1a0075f2 <inv_execute_on_data+0x5e>
        mode |= INV_TEMP_NEW;
1a0075ea:	687b      	ldr	r3, [r7, #4]
1a0075ec:	f043 0308 	orr.w	r3, r3, #8
1a0075f0:	607b      	str	r3, [r7, #4]
    if (sensors.quat.status & INV_QUAT_NEW)
1a0075f2:	4b20      	ldr	r3, [pc, #128]	; (1a007674 <inv_execute_on_data+0xe0>)
1a0075f4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a0075f8:	f003 0310 	and.w	r3, r3, #16
1a0075fc:	2b00      	cmp	r3, #0
1a0075fe:	d003      	beq.n	1a007608 <inv_execute_on_data+0x74>
        mode |= INV_QUAT_NEW;
1a007600:	687b      	ldr	r3, [r7, #4]
1a007602:	f043 0310 	orr.w	r3, r3, #16
1a007606:	607b      	str	r3, [r7, #4]

    first_error = INV_SUCCESS;
1a007608:	2300      	movs	r3, #0
1a00760a:	60fb      	str	r3, [r7, #12]

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1a00760c:	2300      	movs	r3, #0
1a00760e:	60bb      	str	r3, [r7, #8]
1a007610:	e023      	b.n	1a00765a <inv_execute_on_data+0xc6>
        if (mode & inv_data_builder.process[kk].data_required) {
1a007612:	4919      	ldr	r1, [pc, #100]	; (1a007678 <inv_execute_on_data+0xe4>)
1a007614:	68ba      	ldr	r2, [r7, #8]
1a007616:	4613      	mov	r3, r2
1a007618:	005b      	lsls	r3, r3, #1
1a00761a:	4413      	add	r3, r2
1a00761c:	009b      	lsls	r3, r3, #2
1a00761e:	440b      	add	r3, r1
1a007620:	330c      	adds	r3, #12
1a007622:	681a      	ldr	r2, [r3, #0]
1a007624:	687b      	ldr	r3, [r7, #4]
1a007626:	4013      	ands	r3, r2
1a007628:	2b00      	cmp	r3, #0
1a00762a:	d013      	beq.n	1a007654 <inv_execute_on_data+0xc0>
            result = inv_data_builder.process[kk].func(&sensors);
1a00762c:	4912      	ldr	r1, [pc, #72]	; (1a007678 <inv_execute_on_data+0xe4>)
1a00762e:	68ba      	ldr	r2, [r7, #8]
1a007630:	4613      	mov	r3, r2
1a007632:	005b      	lsls	r3, r3, #1
1a007634:	4413      	add	r3, r2
1a007636:	009b      	lsls	r3, r3, #2
1a007638:	440b      	add	r3, r1
1a00763a:	3304      	adds	r3, #4
1a00763c:	681b      	ldr	r3, [r3, #0]
1a00763e:	480d      	ldr	r0, [pc, #52]	; (1a007674 <inv_execute_on_data+0xe0>)
1a007640:	4798      	blx	r3
1a007642:	6038      	str	r0, [r7, #0]
            if (result && !first_error) {
1a007644:	683b      	ldr	r3, [r7, #0]
1a007646:	2b00      	cmp	r3, #0
1a007648:	d004      	beq.n	1a007654 <inv_execute_on_data+0xc0>
1a00764a:	68fb      	ldr	r3, [r7, #12]
1a00764c:	2b00      	cmp	r3, #0
1a00764e:	d101      	bne.n	1a007654 <inv_execute_on_data+0xc0>
                first_error = result;
1a007650:	683b      	ldr	r3, [r7, #0]
1a007652:	60fb      	str	r3, [r7, #12]
    if (sensors.quat.status & INV_QUAT_NEW)
        mode |= INV_QUAT_NEW;

    first_error = INV_SUCCESS;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1a007654:	68bb      	ldr	r3, [r7, #8]
1a007656:	3301      	adds	r3, #1
1a007658:	60bb      	str	r3, [r7, #8]
1a00765a:	4b07      	ldr	r3, [pc, #28]	; (1a007678 <inv_execute_on_data+0xe4>)
1a00765c:	681a      	ldr	r2, [r3, #0]
1a00765e:	68bb      	ldr	r3, [r7, #8]
1a007660:	429a      	cmp	r2, r3
1a007662:	dcd6      	bgt.n	1a007612 <inv_execute_on_data+0x7e>
                first_error = result;
            }
        }
    }

    inv_set_contiguous();
1a007664:	f000 f80a 	bl	1a00767c <inv_set_contiguous>

    return first_error;
1a007668:	68fb      	ldr	r3, [r7, #12]
}
1a00766a:	4618      	mov	r0, r3
1a00766c:	3710      	adds	r7, #16
1a00766e:	46bd      	mov	sp, r7
1a007670:	bd80      	pop	{r7, pc}
1a007672:	bf00      	nop
1a007674:	100866d8 	.word	0x100866d8
1a007678:	10086598 	.word	0x10086598

1a00767c <inv_set_contiguous>:

/** Cleans up status bits after running all the callbacks. It sets the contiguous flag.
*
*/
static void inv_set_contiguous(void)
{
1a00767c:	b480      	push	{r7}
1a00767e:	b083      	sub	sp, #12
1a007680:	af00      	add	r7, sp, #0
    inv_time_t current_time = 0;
1a007682:	2300      	movs	r3, #0
1a007684:	607b      	str	r3, [r7, #4]
    if (sensors.gyro.status & INV_NEW_DATA) {
1a007686:	4b48      	ldr	r3, [pc, #288]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a007688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a00768a:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a00768e:	2b00      	cmp	r3, #0
1a007690:	d008      	beq.n	1a0076a4 <inv_set_contiguous+0x28>
        sensors.gyro.status |= INV_CONTIGUOUS;
1a007692:	4b45      	ldr	r3, [pc, #276]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a007694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a007696:	f043 0310 	orr.w	r3, r3, #16
1a00769a:	4a43      	ldr	r2, [pc, #268]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a00769c:	6313      	str	r3, [r2, #48]	; 0x30
        current_time = sensors.gyro.timestamp;
1a00769e:	4b42      	ldr	r3, [pc, #264]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a0076a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1a0076a2:	607b      	str	r3, [r7, #4]
    }
    if (sensors.accel.status & INV_NEW_DATA) {
1a0076a4:	4b40      	ldr	r3, [pc, #256]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a0076a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a0076a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0076ac:	2b00      	cmp	r3, #0
1a0076ae:	d00c      	beq.n	1a0076ca <inv_set_contiguous+0x4e>
        sensors.accel.status |= INV_CONTIGUOUS;
1a0076b0:	4b3d      	ldr	r3, [pc, #244]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a0076b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a0076b4:	f043 0310 	orr.w	r3, r3, #16
1a0076b8:	4a3b      	ldr	r2, [pc, #236]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a0076ba:	6753      	str	r3, [r2, #116]	; 0x74
        current_time = MAX(current_time, sensors.accel.timestamp);
1a0076bc:	4b3a      	ldr	r3, [pc, #232]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a0076be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1a0076c0:	687a      	ldr	r2, [r7, #4]
1a0076c2:	4293      	cmp	r3, r2
1a0076c4:	bf38      	it	cc
1a0076c6:	4613      	movcc	r3, r2
1a0076c8:	607b      	str	r3, [r7, #4]
    }
    if (sensors.compass.status & INV_NEW_DATA) {
1a0076ca:	4b37      	ldr	r3, [pc, #220]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a0076cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a0076d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0076d4:	2b00      	cmp	r3, #0
1a0076d6:	d00f      	beq.n	1a0076f8 <inv_set_contiguous+0x7c>
        sensors.compass.status |= INV_CONTIGUOUS;
1a0076d8:	4b33      	ldr	r3, [pc, #204]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a0076da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a0076de:	f043 0310 	orr.w	r3, r3, #16
1a0076e2:	4a31      	ldr	r2, [pc, #196]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a0076e4:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
        current_time = MAX(current_time, sensors.compass.timestamp);
1a0076e8:	4b2f      	ldr	r3, [pc, #188]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a0076ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
1a0076ee:	687a      	ldr	r2, [r7, #4]
1a0076f0:	4293      	cmp	r3, r2
1a0076f2:	bf38      	it	cc
1a0076f4:	4613      	movcc	r3, r2
1a0076f6:	607b      	str	r3, [r7, #4]
    }
    if (sensors.temp.status & INV_NEW_DATA) {
1a0076f8:	4b2b      	ldr	r3, [pc, #172]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a0076fa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
1a0076fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a007702:	2b00      	cmp	r3, #0
1a007704:	d00f      	beq.n	1a007726 <inv_set_contiguous+0xaa>
        sensors.temp.status |= INV_CONTIGUOUS;
1a007706:	4b28      	ldr	r3, [pc, #160]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a007708:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
1a00770c:	f043 0310 	orr.w	r3, r3, #16
1a007710:	4a25      	ldr	r2, [pc, #148]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a007712:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
        current_time = MAX(current_time, sensors.temp.timestamp);
1a007716:	4b24      	ldr	r3, [pc, #144]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a007718:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
1a00771c:	687a      	ldr	r2, [r7, #4]
1a00771e:	4293      	cmp	r3, r2
1a007720:	bf38      	it	cc
1a007722:	4613      	movcc	r3, r2
1a007724:	607b      	str	r3, [r7, #4]
    }
    if (sensors.quat.status & INV_NEW_DATA) {
1a007726:	4b20      	ldr	r3, [pc, #128]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a007728:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a00772c:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a007730:	2b00      	cmp	r3, #0
1a007732:	d00f      	beq.n	1a007754 <inv_set_contiguous+0xd8>
        sensors.quat.status |= INV_CONTIGUOUS;
1a007734:	4b1c      	ldr	r3, [pc, #112]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a007736:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a00773a:	f043 0310 	orr.w	r3, r3, #16
1a00773e:	4a1a      	ldr	r2, [pc, #104]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a007740:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
        current_time = MAX(current_time, sensors.quat.timestamp);
1a007744:	4b18      	ldr	r3, [pc, #96]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a007746:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
1a00774a:	687a      	ldr	r2, [r7, #4]
1a00774c:	4293      	cmp	r3, r2
1a00774e:	bf38      	it	cc
1a007750:	4613      	movcc	r3, r2
1a007752:	607b      	str	r3, [r7, #4]
    if (inv_delta_time_ms(current_time, sensors.temp.timestamp) >= 2000)
        inv_temperature_was_turned_off();
#endif

    /* clear bits */
    sensors.gyro.status &= ~INV_NEW_DATA;
1a007754:	4b14      	ldr	r3, [pc, #80]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a007756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a007758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00775c:	4a12      	ldr	r2, [pc, #72]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a00775e:	6313      	str	r3, [r2, #48]	; 0x30
    sensors.accel.status &= ~INV_NEW_DATA;
1a007760:	4b11      	ldr	r3, [pc, #68]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a007762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a007764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a007768:	4a0f      	ldr	r2, [pc, #60]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a00776a:	6753      	str	r3, [r2, #116]	; 0x74
    sensors.compass.status &= ~INV_NEW_DATA;
1a00776c:	4b0e      	ldr	r3, [pc, #56]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a00776e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a007772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a007776:	4a0c      	ldr	r2, [pc, #48]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a007778:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    sensors.temp.status &= ~INV_NEW_DATA;
1a00777c:	4b0a      	ldr	r3, [pc, #40]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a00777e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
1a007782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a007786:	4a08      	ldr	r2, [pc, #32]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a007788:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    sensors.quat.status &= ~INV_NEW_DATA;
1a00778c:	4b06      	ldr	r3, [pc, #24]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a00778e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a007792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a007796:	4a04      	ldr	r2, [pc, #16]	; (1a0077a8 <inv_set_contiguous+0x12c>)
1a007798:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
}
1a00779c:	bf00      	nop
1a00779e:	370c      	adds	r7, #12
1a0077a0:	46bd      	mov	sp, r7
1a0077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0077a6:	4770      	bx	lr
1a0077a8:	100866d8 	.word	0x100866d8

1a0077ac <inv_get_accel_set>:
 * @param[out] data Accel Data where 1g = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
*/
void inv_get_accel_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a0077ac:	b580      	push	{r7, lr}
1a0077ae:	b084      	sub	sp, #16
1a0077b0:	af00      	add	r7, sp, #0
1a0077b2:	60f8      	str	r0, [r7, #12]
1a0077b4:	60b9      	str	r1, [r7, #8]
1a0077b6:	607a      	str	r2, [r7, #4]
    if (data != NULL) {
1a0077b8:	68fb      	ldr	r3, [r7, #12]
1a0077ba:	2b00      	cmp	r3, #0
1a0077bc:	d004      	beq.n	1a0077c8 <inv_get_accel_set+0x1c>
        memcpy(data, sensors.accel.calibrated, sizeof(sensors.accel.calibrated));
1a0077be:	220c      	movs	r2, #12
1a0077c0:	490b      	ldr	r1, [pc, #44]	; (1a0077f0 <inv_get_accel_set+0x44>)
1a0077c2:	68f8      	ldr	r0, [r7, #12]
1a0077c4:	f00d f98a 	bl	1a014adc <memcpy>
    }
    if (timestamp != NULL) {
1a0077c8:	687b      	ldr	r3, [r7, #4]
1a0077ca:	2b00      	cmp	r3, #0
1a0077cc:	d003      	beq.n	1a0077d6 <inv_get_accel_set+0x2a>
        *timestamp = sensors.accel.timestamp;
1a0077ce:	4b09      	ldr	r3, [pc, #36]	; (1a0077f4 <inv_get_accel_set+0x48>)
1a0077d0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
1a0077d2:	687b      	ldr	r3, [r7, #4]
1a0077d4:	601a      	str	r2, [r3, #0]
    }
    if (accuracy != NULL) {
1a0077d6:	68bb      	ldr	r3, [r7, #8]
1a0077d8:	2b00      	cmp	r3, #0
1a0077da:	d004      	beq.n	1a0077e6 <inv_get_accel_set+0x3a>
        *accuracy = sensors.accel.accuracy;
1a0077dc:	4b05      	ldr	r3, [pc, #20]	; (1a0077f4 <inv_get_accel_set+0x48>)
1a0077de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1a0077e0:	b2da      	uxtb	r2, r3
1a0077e2:	68bb      	ldr	r3, [r7, #8]
1a0077e4:	701a      	strb	r2, [r3, #0]
    }
}
1a0077e6:	bf00      	nop
1a0077e8:	3710      	adds	r7, #16
1a0077ea:	46bd      	mov	sp, r7
1a0077ec:	bd80      	pop	{r7, pc}
1a0077ee:	bf00      	nop
1a0077f0:	10086734 	.word	0x10086734
1a0077f4:	100866d8 	.word	0x100866d8

1a0077f8 <inv_get_gyro_set>:
 * @param[out] data Gyro Data where 1 dps = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
*/
void inv_get_gyro_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a0077f8:	b580      	push	{r7, lr}
1a0077fa:	b084      	sub	sp, #16
1a0077fc:	af00      	add	r7, sp, #0
1a0077fe:	60f8      	str	r0, [r7, #12]
1a007800:	60b9      	str	r1, [r7, #8]
1a007802:	607a      	str	r2, [r7, #4]
    memcpy(data, sensors.gyro.calibrated, sizeof(sensors.gyro.calibrated));
1a007804:	220c      	movs	r2, #12
1a007806:	490b      	ldr	r1, [pc, #44]	; (1a007834 <inv_get_gyro_set+0x3c>)
1a007808:	68f8      	ldr	r0, [r7, #12]
1a00780a:	f00d f967 	bl	1a014adc <memcpy>
    if (timestamp != NULL) {
1a00780e:	687b      	ldr	r3, [r7, #4]
1a007810:	2b00      	cmp	r3, #0
1a007812:	d003      	beq.n	1a00781c <inv_get_gyro_set+0x24>
        *timestamp = sensors.gyro.timestamp;
1a007814:	4b08      	ldr	r3, [pc, #32]	; (1a007838 <inv_get_gyro_set+0x40>)
1a007816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a007818:	687b      	ldr	r3, [r7, #4]
1a00781a:	601a      	str	r2, [r3, #0]
    }
    if (accuracy != NULL) {
1a00781c:	68bb      	ldr	r3, [r7, #8]
1a00781e:	2b00      	cmp	r3, #0
1a007820:	d004      	beq.n	1a00782c <inv_get_gyro_set+0x34>
        *accuracy = sensors.gyro.accuracy;
1a007822:	4b05      	ldr	r3, [pc, #20]	; (1a007838 <inv_get_gyro_set+0x40>)
1a007824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a007826:	b2da      	uxtb	r2, r3
1a007828:	68bb      	ldr	r3, [r7, #8]
1a00782a:	701a      	strb	r2, [r3, #0]
    }
}
1a00782c:	bf00      	nop
1a00782e:	3710      	adds	r7, #16
1a007830:	46bd      	mov	sp, r7
1a007832:	bd80      	pop	{r7, pc}
1a007834:	100866f0 	.word	0x100866f0
1a007838:	100866d8 	.word	0x100866d8

1a00783c <inv_get_gyro>:

/** Get's latest gyro data.
* @param[out] gyro Gyro Data, Length 3. 1 dps = 2^16.
*/
void inv_get_gyro(long *gyro)
{
1a00783c:	b580      	push	{r7, lr}
1a00783e:	b082      	sub	sp, #8
1a007840:	af00      	add	r7, sp, #0
1a007842:	6078      	str	r0, [r7, #4]
    memcpy(gyro, sensors.gyro.calibrated, sizeof(sensors.gyro.calibrated));
1a007844:	220c      	movs	r2, #12
1a007846:	4904      	ldr	r1, [pc, #16]	; (1a007858 <inv_get_gyro+0x1c>)
1a007848:	6878      	ldr	r0, [r7, #4]
1a00784a:	f00d f947 	bl	1a014adc <memcpy>
}
1a00784e:	bf00      	nop
1a007850:	3708      	adds	r7, #8
1a007852:	46bd      	mov	sp, r7
1a007854:	bd80      	pop	{r7, pc}
1a007856:	bf00      	nop
1a007858:	100866f0 	.word	0x100866f0

1a00785c <inv_get_compass_set>:
 * @param[out] data Compass Data where 1 uT = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
*/
void inv_get_compass_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a00785c:	b580      	push	{r7, lr}
1a00785e:	b084      	sub	sp, #16
1a007860:	af00      	add	r7, sp, #0
1a007862:	60f8      	str	r0, [r7, #12]
1a007864:	60b9      	str	r1, [r7, #8]
1a007866:	607a      	str	r2, [r7, #4]
    memcpy(data, sensors.compass.calibrated, sizeof(sensors.compass.calibrated));
1a007868:	220c      	movs	r2, #12
1a00786a:	4911      	ldr	r1, [pc, #68]	; (1a0078b0 <inv_get_compass_set+0x54>)
1a00786c:	68f8      	ldr	r0, [r7, #12]
1a00786e:	f00d f935 	bl	1a014adc <memcpy>
    if (timestamp != NULL) {
1a007872:	687b      	ldr	r3, [r7, #4]
1a007874:	2b00      	cmp	r3, #0
1a007876:	d004      	beq.n	1a007882 <inv_get_compass_set+0x26>
        *timestamp = sensors.compass.timestamp;
1a007878:	4b0e      	ldr	r3, [pc, #56]	; (1a0078b4 <inv_get_compass_set+0x58>)
1a00787a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
1a00787e:	687b      	ldr	r3, [r7, #4]
1a007880:	601a      	str	r2, [r3, #0]
    }
    if (accuracy != NULL) {
1a007882:	68bb      	ldr	r3, [r7, #8]
1a007884:	2b00      	cmp	r3, #0
1a007886:	d00e      	beq.n	1a0078a6 <inv_get_compass_set+0x4a>
        if (inv_data_builder.compass_disturbance)
1a007888:	4b0b      	ldr	r3, [pc, #44]	; (1a0078b8 <inv_get_compass_set+0x5c>)
1a00788a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
1a00788e:	2b00      	cmp	r3, #0
1a007890:	d003      	beq.n	1a00789a <inv_get_compass_set+0x3e>
            *accuracy = 0;
1a007892:	68bb      	ldr	r3, [r7, #8]
1a007894:	2200      	movs	r2, #0
1a007896:	701a      	strb	r2, [r3, #0]
        else
            *accuracy = sensors.compass.accuracy;
    }
}
1a007898:	e005      	b.n	1a0078a6 <inv_get_compass_set+0x4a>
    }
    if (accuracy != NULL) {
        if (inv_data_builder.compass_disturbance)
            *accuracy = 0;
        else
            *accuracy = sensors.compass.accuracy;
1a00789a:	4b06      	ldr	r3, [pc, #24]	; (1a0078b4 <inv_get_compass_set+0x58>)
1a00789c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
1a0078a0:	b2da      	uxtb	r2, r3
1a0078a2:	68bb      	ldr	r3, [r7, #8]
1a0078a4:	701a      	strb	r2, [r3, #0]
    }
}
1a0078a6:	bf00      	nop
1a0078a8:	3710      	adds	r7, #16
1a0078aa:	46bd      	mov	sp, r7
1a0078ac:	bd80      	pop	{r7, pc}
1a0078ae:	bf00      	nop
1a0078b0:	10086778 	.word	0x10086778
1a0078b4:	100866d8 	.word	0x100866d8
1a0078b8:	10086598 	.word	0x10086598

1a0078bc <inv_get_gyro_accuracy>:

/** Returns accuracy of gyro.
 * @return Accuracy of gyro with 0 being not accurate, and 3 being most accurate.
*/
int inv_get_gyro_accuracy(void)
{
1a0078bc:	b480      	push	{r7}
1a0078be:	af00      	add	r7, sp, #0
    return sensors.gyro.accuracy;
1a0078c0:	4b03      	ldr	r3, [pc, #12]	; (1a0078d0 <inv_get_gyro_accuracy+0x14>)
1a0078c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
1a0078c4:	4618      	mov	r0, r3
1a0078c6:	46bd      	mov	sp, r7
1a0078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0078cc:	4770      	bx	lr
1a0078ce:	bf00      	nop
1a0078d0:	100866d8 	.word	0x100866d8

1a0078d4 <inv_get_mag_accuracy>:

/** Returns accuracy of compass.
 * @return Accuracy of compass with 0 being not accurate, and 3 being most accurate.
*/
int inv_get_mag_accuracy(void)
{
1a0078d4:	b480      	push	{r7}
1a0078d6:	af00      	add	r7, sp, #0
    if (inv_data_builder.compass_disturbance)
1a0078d8:	4b07      	ldr	r3, [pc, #28]	; (1a0078f8 <inv_get_mag_accuracy+0x24>)
1a0078da:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
1a0078de:	2b00      	cmp	r3, #0
1a0078e0:	d001      	beq.n	1a0078e6 <inv_get_mag_accuracy+0x12>
        return 0;
1a0078e2:	2300      	movs	r3, #0
1a0078e4:	e002      	b.n	1a0078ec <inv_get_mag_accuracy+0x18>
    return sensors.compass.accuracy;
1a0078e6:	4b05      	ldr	r3, [pc, #20]	; (1a0078fc <inv_get_mag_accuracy+0x28>)
1a0078e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
}
1a0078ec:	4618      	mov	r0, r3
1a0078ee:	46bd      	mov	sp, r7
1a0078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0078f4:	4770      	bx	lr
1a0078f6:	bf00      	nop
1a0078f8:	10086598 	.word	0x10086598
1a0078fc:	100866d8 	.word	0x100866d8

1a007900 <inv_get_accel_accuracy>:

/** Returns accuracy of accel.
 * @return Accuracy of accel with 0 being not accurate, and 3 being most accurate.
*/
int inv_get_accel_accuracy(void)
{
1a007900:	b480      	push	{r7}
1a007902:	af00      	add	r7, sp, #0
    return sensors.accel.accuracy;
1a007904:	4b03      	ldr	r3, [pc, #12]	; (1a007914 <inv_get_accel_accuracy+0x14>)
1a007906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
1a007908:	4618      	mov	r0, r3
1a00790a:	46bd      	mov	sp, r7
1a00790c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a007910:	4770      	bx	lr
1a007912:	bf00      	nop
1a007914:	100866d8 	.word	0x100866d8

1a007918 <inv_get_compass_soft_iron_output_data>:
}

/** This subroutine gets the fixed point Q30 compass data after the soft iron transformation.
 * @param[out] the pointer of the 3x1 vector compass data in MPL format
*/
void inv_get_compass_soft_iron_output_data(long *data) {
1a007918:	b480      	push	{r7}
1a00791a:	b085      	sub	sp, #20
1a00791c:	af00      	add	r7, sp, #0
1a00791e:	6078      	str	r0, [r7, #4]
    int i;
    for (i=0; i<3; i++)  {
1a007920:	2300      	movs	r3, #0
1a007922:	60fb      	str	r3, [r7, #12]
1a007924:	e00d      	b.n	1a007942 <inv_get_compass_soft_iron_output_data+0x2a>
        data[i] = sensors.soft_iron.trans[i];
1a007926:	68fb      	ldr	r3, [r7, #12]
1a007928:	009b      	lsls	r3, r3, #2
1a00792a:	687a      	ldr	r2, [r7, #4]
1a00792c:	441a      	add	r2, r3
1a00792e:	4909      	ldr	r1, [pc, #36]	; (1a007954 <inv_get_compass_soft_iron_output_data+0x3c>)
1a007930:	68fb      	ldr	r3, [r7, #12]
1a007932:	334e      	adds	r3, #78	; 0x4e
1a007934:	009b      	lsls	r3, r3, #2
1a007936:	440b      	add	r3, r1
1a007938:	685b      	ldr	r3, [r3, #4]
1a00793a:	6013      	str	r3, [r2, #0]
/** This subroutine gets the fixed point Q30 compass data after the soft iron transformation.
 * @param[out] the pointer of the 3x1 vector compass data in MPL format
*/
void inv_get_compass_soft_iron_output_data(long *data) {
    int i;
    for (i=0; i<3; i++)  {
1a00793c:	68fb      	ldr	r3, [r7, #12]
1a00793e:	3301      	adds	r3, #1
1a007940:	60fb      	str	r3, [r7, #12]
1a007942:	68fb      	ldr	r3, [r7, #12]
1a007944:	2b02      	cmp	r3, #2
1a007946:	ddee      	ble.n	1a007926 <inv_get_compass_soft_iron_output_data+0xe>
        data[i] = sensors.soft_iron.trans[i];
    }
}
1a007948:	bf00      	nop
1a00794a:	3714      	adds	r7, #20
1a00794c:	46bd      	mov	sp, r7
1a00794e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a007952:	4770      	bx	lr
1a007954:	100866d8 	.word	0x100866d8

1a007958 <inv_set_compass_soft_iron_input_data>:
    }
}
/** This subroutine sets the compass raw data for the soft iron transformation.
 * @param[int] the pointer of the 3x1 vector compass raw data in MPL format
*/
void inv_set_compass_soft_iron_input_data(const long *data)  {
1a007958:	b580      	push	{r7, lr}
1a00795a:	b084      	sub	sp, #16
1a00795c:	af00      	add	r7, sp, #0
1a00795e:	6078      	str	r0, [r7, #4]
    int i;
    for (i=0; i<3; i++)  {
1a007960:	2300      	movs	r3, #0
1a007962:	60fb      	str	r3, [r7, #12]
1a007964:	e00c      	b.n	1a007980 <inv_set_compass_soft_iron_input_data+0x28>
        sensors.soft_iron.raw[i] = data[i];
1a007966:	68fb      	ldr	r3, [r7, #12]
1a007968:	009b      	lsls	r3, r3, #2
1a00796a:	687a      	ldr	r2, [r7, #4]
1a00796c:	4413      	add	r3, r2
1a00796e:	681a      	ldr	r2, [r3, #0]
1a007970:	4916      	ldr	r1, [pc, #88]	; (1a0079cc <inv_set_compass_soft_iron_input_data+0x74>)
1a007972:	68fb      	ldr	r3, [r7, #12]
1a007974:	334c      	adds	r3, #76	; 0x4c
1a007976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
/** This subroutine sets the compass raw data for the soft iron transformation.
 * @param[int] the pointer of the 3x1 vector compass raw data in MPL format
*/
void inv_set_compass_soft_iron_input_data(const long *data)  {
    int i;
    for (i=0; i<3; i++)  {
1a00797a:	68fb      	ldr	r3, [r7, #12]
1a00797c:	3301      	adds	r3, #1
1a00797e:	60fb      	str	r3, [r7, #12]
1a007980:	68fb      	ldr	r3, [r7, #12]
1a007982:	2b02      	cmp	r3, #2
1a007984:	ddef      	ble.n	1a007966 <inv_set_compass_soft_iron_input_data+0xe>
        sensors.soft_iron.raw[i] = data[i];
    }
    if (sensors.soft_iron.enable == 1)  {
1a007986:	4b11      	ldr	r3, [pc, #68]	; (1a0079cc <inv_set_compass_soft_iron_input_data+0x74>)
1a007988:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
1a00798c:	2b01      	cmp	r3, #1
1a00798e:	d105      	bne.n	1a00799c <inv_set_compass_soft_iron_input_data+0x44>
        mlMatrixVectorMult(sensors.soft_iron.matrix_d, data, sensors.soft_iron.trans);
1a007990:	4a0f      	ldr	r2, [pc, #60]	; (1a0079d0 <inv_set_compass_soft_iron_input_data+0x78>)
1a007992:	6879      	ldr	r1, [r7, #4]
1a007994:	480f      	ldr	r0, [pc, #60]	; (1a0079d4 <inv_set_compass_soft_iron_input_data+0x7c>)
1a007996:	f000 ffcd 	bl	1a008934 <mlMatrixVectorMult>
    } else {
        for (i=0; i<3; i++)  {
            sensors.soft_iron.trans[i] = data[i];
        }
    }
}
1a00799a:	e013      	b.n	1a0079c4 <inv_set_compass_soft_iron_input_data+0x6c>
        sensors.soft_iron.raw[i] = data[i];
    }
    if (sensors.soft_iron.enable == 1)  {
        mlMatrixVectorMult(sensors.soft_iron.matrix_d, data, sensors.soft_iron.trans);
    } else {
        for (i=0; i<3; i++)  {
1a00799c:	2300      	movs	r3, #0
1a00799e:	60fb      	str	r3, [r7, #12]
1a0079a0:	e00d      	b.n	1a0079be <inv_set_compass_soft_iron_input_data+0x66>
            sensors.soft_iron.trans[i] = data[i];
1a0079a2:	68fb      	ldr	r3, [r7, #12]
1a0079a4:	009b      	lsls	r3, r3, #2
1a0079a6:	687a      	ldr	r2, [r7, #4]
1a0079a8:	4413      	add	r3, r2
1a0079aa:	681a      	ldr	r2, [r3, #0]
1a0079ac:	4907      	ldr	r1, [pc, #28]	; (1a0079cc <inv_set_compass_soft_iron_input_data+0x74>)
1a0079ae:	68fb      	ldr	r3, [r7, #12]
1a0079b0:	334e      	adds	r3, #78	; 0x4e
1a0079b2:	009b      	lsls	r3, r3, #2
1a0079b4:	440b      	add	r3, r1
1a0079b6:	605a      	str	r2, [r3, #4]
        sensors.soft_iron.raw[i] = data[i];
    }
    if (sensors.soft_iron.enable == 1)  {
        mlMatrixVectorMult(sensors.soft_iron.matrix_d, data, sensors.soft_iron.trans);
    } else {
        for (i=0; i<3; i++)  {
1a0079b8:	68fb      	ldr	r3, [r7, #12]
1a0079ba:	3301      	adds	r3, #1
1a0079bc:	60fb      	str	r3, [r7, #12]
1a0079be:	68fb      	ldr	r3, [r7, #12]
1a0079c0:	2b02      	cmp	r3, #2
1a0079c2:	ddee      	ble.n	1a0079a2 <inv_set_compass_soft_iron_input_data+0x4a>
            sensors.soft_iron.trans[i] = data[i];
        }
    }
}
1a0079c4:	bf00      	nop
1a0079c6:	3710      	adds	r7, #16
1a0079c8:	46bd      	mov	sp, r7
1a0079ca:	bd80      	pop	{r7, pc}
1a0079cc:	100866d8 	.word	0x100866d8
1a0079d0:	10086814 	.word	0x10086814
1a0079d4:	10086820 	.word	0x10086820

1a0079d8 <inv_reset_compass_soft_iron_matrix>:

/** This subroutine resets the the soft iron transformation to unity matrix and
 * disable the soft iron transformation process by default.
*/
void inv_reset_compass_soft_iron_matrix(void)  {
1a0079d8:	b580      	push	{r7, lr}
1a0079da:	b082      	sub	sp, #8
1a0079dc:	af00      	add	r7, sp, #0
    int i;
    for (i=0; i<9; i++) {
1a0079de:	2300      	movs	r3, #0
1a0079e0:	607b      	str	r3, [r7, #4]
1a0079e2:	e00b      	b.n	1a0079fc <inv_reset_compass_soft_iron_matrix+0x24>
        sensors.soft_iron.matrix_f[i] = 0.0f;
1a0079e4:	4a1a      	ldr	r2, [pc, #104]	; (1a007a50 <inv_reset_compass_soft_iron_matrix+0x78>)
1a0079e6:	687b      	ldr	r3, [r7, #4]
1a0079e8:	335a      	adds	r3, #90	; 0x5a
1a0079ea:	009b      	lsls	r3, r3, #2
1a0079ec:	4413      	add	r3, r2
1a0079ee:	3304      	adds	r3, #4
1a0079f0:	f04f 0200 	mov.w	r2, #0
1a0079f4:	601a      	str	r2, [r3, #0]
/** This subroutine resets the the soft iron transformation to unity matrix and
 * disable the soft iron transformation process by default.
*/
void inv_reset_compass_soft_iron_matrix(void)  {
    int i;
    for (i=0; i<9; i++) {
1a0079f6:	687b      	ldr	r3, [r7, #4]
1a0079f8:	3301      	adds	r3, #1
1a0079fa:	607b      	str	r3, [r7, #4]
1a0079fc:	687b      	ldr	r3, [r7, #4]
1a0079fe:	2b08      	cmp	r3, #8
1a007a00:	ddf0      	ble.n	1a0079e4 <inv_reset_compass_soft_iron_matrix+0xc>
        sensors.soft_iron.matrix_f[i] = 0.0f;
    }

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));
1a007a02:	2224      	movs	r2, #36	; 0x24
1a007a04:	2100      	movs	r1, #0
1a007a06:	4813      	ldr	r0, [pc, #76]	; (1a007a54 <inv_reset_compass_soft_iron_matrix+0x7c>)
1a007a08:	f00d f966 	bl	1a014cd8 <memset>

    for (i=0; i<3; i++)  {
1a007a0c:	2300      	movs	r3, #0
1a007a0e:	607b      	str	r3, [r7, #4]
1a007a10:	e014      	b.n	1a007a3c <inv_reset_compass_soft_iron_matrix+0x64>
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i*4] = 1.0;
1a007a12:	687b      	ldr	r3, [r7, #4]
1a007a14:	009b      	lsls	r3, r3, #2
1a007a16:	4a0e      	ldr	r2, [pc, #56]	; (1a007a50 <inv_reset_compass_soft_iron_matrix+0x78>)
1a007a18:	335a      	adds	r3, #90	; 0x5a
1a007a1a:	009b      	lsls	r3, r3, #2
1a007a1c:	4413      	add	r3, r2
1a007a1e:	3304      	adds	r3, #4
1a007a20:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a007a24:	601a      	str	r2, [r3, #0]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
1a007a26:	687b      	ldr	r3, [r7, #4]
1a007a28:	009b      	lsls	r3, r3, #2
1a007a2a:	4a09      	ldr	r2, [pc, #36]	; (1a007a50 <inv_reset_compass_soft_iron_matrix+0x78>)
1a007a2c:	3352      	adds	r3, #82	; 0x52
1a007a2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
1a007a32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        sensors.soft_iron.matrix_f[i] = 0.0f;
    }

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));

    for (i=0; i<3; i++)  {
1a007a36:	687b      	ldr	r3, [r7, #4]
1a007a38:	3301      	adds	r3, #1
1a007a3a:	607b      	str	r3, [r7, #4]
1a007a3c:	687b      	ldr	r3, [r7, #4]
1a007a3e:	2b02      	cmp	r3, #2
1a007a40:	dde7      	ble.n	1a007a12 <inv_reset_compass_soft_iron_matrix+0x3a>
        sensors.soft_iron.matrix_f[i*4] = 1.0;
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
    }

    inv_disable_compass_soft_iron_matrix();
1a007a42:	f000 f809 	bl	1a007a58 <inv_disable_compass_soft_iron_matrix>
}
1a007a46:	bf00      	nop
1a007a48:	3708      	adds	r7, #8
1a007a4a:	46bd      	mov	sp, r7
1a007a4c:	bd80      	pop	{r7, pc}
1a007a4e:	bf00      	nop
1a007a50:	100866d8 	.word	0x100866d8
1a007a54:	10086820 	.word	0x10086820

1a007a58 <inv_disable_compass_soft_iron_matrix>:
    sensors.soft_iron.enable = 1;
}

/** This subroutine disables the the soft iron transformation process.
*/
void inv_disable_compass_soft_iron_matrix(void)   {
1a007a58:	b480      	push	{r7}
1a007a5a:	af00      	add	r7, sp, #0
    sensors.soft_iron.enable = 0;
1a007a5c:	4b04      	ldr	r3, [pc, #16]	; (1a007a70 <inv_disable_compass_soft_iron_matrix+0x18>)
1a007a5e:	2200      	movs	r2, #0
1a007a60:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
}
1a007a64:	bf00      	nop
1a007a66:	46bd      	mov	sp, r7
1a007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
1a007a6c:	4770      	bx	lr
1a007a6e:	bf00      	nop
1a007a70:	100866d8 	.word	0x100866d8

1a007a74 <inv_get_sensor_type_linear_acceleration>:
*             inv_build_accel().
* @return     Returns 1 if the data was updated or 0 if it was not updated.
*/
int inv_get_sensor_type_linear_acceleration(float *values, int8_t *accuracy,
        inv_time_t * timestamp)
{
1a007a74:	b580      	push	{r7, lr}
1a007a76:	b08a      	sub	sp, #40	; 0x28
1a007a78:	af00      	add	r7, sp, #0
1a007a7a:	60f8      	str	r0, [r7, #12]
1a007a7c:	60b9      	str	r1, [r7, #8]
1a007a7e:	607a      	str	r2, [r7, #4]
    long gravity[3], accel[3];

    inv_get_accel_set(accel, accuracy, timestamp);
1a007a80:	f107 0310 	add.w	r3, r7, #16
1a007a84:	687a      	ldr	r2, [r7, #4]
1a007a86:	68b9      	ldr	r1, [r7, #8]
1a007a88:	4618      	mov	r0, r3
1a007a8a:	f7ff fe8f 	bl	1a0077ac <inv_get_accel_set>
    inv_get_gravity(gravity);
1a007a8e:	f107 031c 	add.w	r3, r7, #28
1a007a92:	4618      	mov	r0, r3
1a007a94:	f001 f8b4 	bl	1a008c00 <inv_get_gravity>
    accel[0] -= gravity[0] >> 14;
1a007a98:	693a      	ldr	r2, [r7, #16]
1a007a9a:	69fb      	ldr	r3, [r7, #28]
1a007a9c:	139b      	asrs	r3, r3, #14
1a007a9e:	1ad3      	subs	r3, r2, r3
1a007aa0:	613b      	str	r3, [r7, #16]
    accel[1] -= gravity[1] >> 14;
1a007aa2:	697a      	ldr	r2, [r7, #20]
1a007aa4:	6a3b      	ldr	r3, [r7, #32]
1a007aa6:	139b      	asrs	r3, r3, #14
1a007aa8:	1ad3      	subs	r3, r2, r3
1a007aaa:	617b      	str	r3, [r7, #20]
    accel[2] -= gravity[2] >> 14;
1a007aac:	69ba      	ldr	r2, [r7, #24]
1a007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a007ab0:	139b      	asrs	r3, r3, #14
1a007ab2:	1ad3      	subs	r3, r2, r3
1a007ab4:	61bb      	str	r3, [r7, #24]
    values[0] = accel[0] * ACCEL_CONVERSION;
1a007ab6:	693b      	ldr	r3, [r7, #16]
1a007ab8:	ee07 3a90 	vmov	s15, r3
1a007abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a007ac0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 1a007b10 <inv_get_sensor_type_linear_acceleration+0x9c>
1a007ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
1a007ac8:	68fb      	ldr	r3, [r7, #12]
1a007aca:	edc3 7a00 	vstr	s15, [r3]
    values[1] = accel[1] * ACCEL_CONVERSION;
1a007ace:	68fb      	ldr	r3, [r7, #12]
1a007ad0:	3304      	adds	r3, #4
1a007ad2:	697a      	ldr	r2, [r7, #20]
1a007ad4:	ee07 2a90 	vmov	s15, r2
1a007ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a007adc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 1a007b10 <inv_get_sensor_type_linear_acceleration+0x9c>
1a007ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
1a007ae4:	edc3 7a00 	vstr	s15, [r3]
    values[2] = accel[2] * ACCEL_CONVERSION;
1a007ae8:	68fb      	ldr	r3, [r7, #12]
1a007aea:	3308      	adds	r3, #8
1a007aec:	69ba      	ldr	r2, [r7, #24]
1a007aee:	ee07 2a90 	vmov	s15, r2
1a007af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a007af6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 1a007b10 <inv_get_sensor_type_linear_acceleration+0x9c>
1a007afa:	ee67 7a87 	vmul.f32	s15, s15, s14
1a007afe:	edc3 7a00 	vstr	s15, [r3]

    return hal_out.nine_axis_status;
1a007b02:	4b04      	ldr	r3, [pc, #16]	; (1a007b14 <inv_get_sensor_type_linear_acceleration+0xa0>)
1a007b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
1a007b06:	4618      	mov	r0, r3
1a007b08:	3728      	adds	r7, #40	; 0x28
1a007b0a:	46bd      	mov	sp, r7
1a007b0c:	bd80      	pop	{r7, pc}
1a007b0e:	bf00      	nop
1a007b10:	391ce80a 	.word	0x391ce80a
1a007b14:	10086870 	.word	0x10086870

1a007b18 <inv_set_message>:
*                  a motion or no motion message.
* @param[in] level Level of the messages. It starts at 0, and may increase
*            in the future to allow more messages if the bit storage runs out.
*/
void inv_set_message(long set, long clear, int level)
{
1a007b18:	b480      	push	{r7}
1a007b1a:	b085      	sub	sp, #20
1a007b1c:	af00      	add	r7, sp, #0
1a007b1e:	60f8      	str	r0, [r7, #12]
1a007b20:	60b9      	str	r1, [r7, #8]
1a007b22:	607a      	str	r2, [r7, #4]
    if (level == 0) {
1a007b24:	687b      	ldr	r3, [r7, #4]
1a007b26:	2b00      	cmp	r3, #0
1a007b28:	d10c      	bne.n	1a007b44 <inv_set_message+0x2c>
        mh.message &= ~clear;
1a007b2a:	4b09      	ldr	r3, [pc, #36]	; (1a007b50 <inv_set_message+0x38>)
1a007b2c:	681a      	ldr	r2, [r3, #0]
1a007b2e:	68bb      	ldr	r3, [r7, #8]
1a007b30:	43db      	mvns	r3, r3
1a007b32:	4013      	ands	r3, r2
1a007b34:	4a06      	ldr	r2, [pc, #24]	; (1a007b50 <inv_set_message+0x38>)
1a007b36:	6013      	str	r3, [r2, #0]
        mh.message |= set;
1a007b38:	4b05      	ldr	r3, [pc, #20]	; (1a007b50 <inv_set_message+0x38>)
1a007b3a:	681a      	ldr	r2, [r3, #0]
1a007b3c:	68fb      	ldr	r3, [r7, #12]
1a007b3e:	4313      	orrs	r3, r2
1a007b40:	4a03      	ldr	r2, [pc, #12]	; (1a007b50 <inv_set_message+0x38>)
1a007b42:	6013      	str	r3, [r2, #0]
    }
}
1a007b44:	bf00      	nop
1a007b46:	3714      	adds	r7, #20
1a007b48:	46bd      	mov	sp, r7
1a007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a007b4e:	4770      	bx	lr
1a007b50:	10086934 	.word	0x10086934

1a007b54 <inv_q30_to_float>:
        float input;
        float output;
    }   inv_biquad_filter_t;

    static inline float inv_q30_to_float(long q30)
    {
1a007b54:	b480      	push	{r7}
1a007b56:	b083      	sub	sp, #12
1a007b58:	af00      	add	r7, sp, #0
1a007b5a:	6078      	str	r0, [r7, #4]
        return (float) q30 / ((float)(1L << 30));
1a007b5c:	687b      	ldr	r3, [r7, #4]
1a007b5e:	ee07 3a90 	vmov	s15, r3
1a007b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a007b66:	ed9f 7a06 	vldr	s14, [pc, #24]	; 1a007b80 <inv_q30_to_float+0x2c>
1a007b6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
1a007b6e:	eef0 7a66 	vmov.f32	s15, s13
    }
1a007b72:	eeb0 0a67 	vmov.f32	s0, s15
1a007b76:	370c      	adds	r7, #12
1a007b78:	46bd      	mov	sp, r7
1a007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a007b7e:	4770      	bx	lr
1a007b80:	4e800000 	.word	0x4e800000

1a007b84 <inv_compass_angle>:
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
1a007b84:	b590      	push	{r4, r7, lr}
1a007b86:	b097      	sub	sp, #92	; 0x5c
1a007b88:	af00      	add	r7, sp, #0
1a007b8a:	60f8      	str	r0, [r7, #12]
1a007b8c:	60b9      	str	r1, [r7, #8]
1a007b8e:	607a      	str	r2, [r7, #4]
    long cgcross[4], q1[4], q2[4], qi[4];
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
1a007b90:	2300      	movs	r3, #0
1a007b92:	647b      	str	r3, [r7, #68]	; 0x44
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
1a007b94:	68fb      	ldr	r3, [r7, #12]
1a007b96:	3304      	adds	r3, #4
1a007b98:	681a      	ldr	r2, [r3, #0]
1a007b9a:	68bb      	ldr	r3, [r7, #8]
1a007b9c:	3308      	adds	r3, #8
1a007b9e:	681b      	ldr	r3, [r3, #0]
1a007ba0:	4619      	mov	r1, r3
1a007ba2:	4610      	mov	r0, r2
1a007ba4:	f000 f8c2 	bl	1a007d2c <inv_q30_mult>
1a007ba8:	4604      	mov	r4, r0
1a007baa:	68fb      	ldr	r3, [r7, #12]
1a007bac:	3308      	adds	r3, #8
1a007bae:	681a      	ldr	r2, [r3, #0]
1a007bb0:	68bb      	ldr	r3, [r7, #8]
1a007bb2:	3304      	adds	r3, #4
1a007bb4:	681b      	ldr	r3, [r3, #0]
1a007bb6:	4619      	mov	r1, r3
1a007bb8:	4610      	mov	r0, r2
1a007bba:	f000 f8b7 	bl	1a007d2c <inv_q30_mult>
1a007bbe:	4603      	mov	r3, r0
1a007bc0:	1ae3      	subs	r3, r4, r3
1a007bc2:	64bb      	str	r3, [r7, #72]	; 0x48
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
1a007bc4:	68fb      	ldr	r3, [r7, #12]
1a007bc6:	3308      	adds	r3, #8
1a007bc8:	681a      	ldr	r2, [r3, #0]
1a007bca:	68bb      	ldr	r3, [r7, #8]
1a007bcc:	681b      	ldr	r3, [r3, #0]
1a007bce:	4619      	mov	r1, r3
1a007bd0:	4610      	mov	r0, r2
1a007bd2:	f000 f8ab 	bl	1a007d2c <inv_q30_mult>
1a007bd6:	4604      	mov	r4, r0
1a007bd8:	68fb      	ldr	r3, [r7, #12]
1a007bda:	681a      	ldr	r2, [r3, #0]
1a007bdc:	68bb      	ldr	r3, [r7, #8]
1a007bde:	3308      	adds	r3, #8
1a007be0:	681b      	ldr	r3, [r3, #0]
1a007be2:	4619      	mov	r1, r3
1a007be4:	4610      	mov	r0, r2
1a007be6:	f000 f8a1 	bl	1a007d2c <inv_q30_mult>
1a007bea:	4603      	mov	r3, r0
1a007bec:	1ae3      	subs	r3, r4, r3
1a007bee:	64fb      	str	r3, [r7, #76]	; 0x4c
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
1a007bf0:	68fb      	ldr	r3, [r7, #12]
1a007bf2:	681a      	ldr	r2, [r3, #0]
1a007bf4:	68bb      	ldr	r3, [r7, #8]
1a007bf6:	3304      	adds	r3, #4
1a007bf8:	681b      	ldr	r3, [r3, #0]
1a007bfa:	4619      	mov	r1, r3
1a007bfc:	4610      	mov	r0, r2
1a007bfe:	f000 f895 	bl	1a007d2c <inv_q30_mult>
1a007c02:	4604      	mov	r4, r0
1a007c04:	68fb      	ldr	r3, [r7, #12]
1a007c06:	3304      	adds	r3, #4
1a007c08:	681a      	ldr	r2, [r3, #0]
1a007c0a:	68bb      	ldr	r3, [r7, #8]
1a007c0c:	681b      	ldr	r3, [r3, #0]
1a007c0e:	4619      	mov	r1, r3
1a007c10:	4610      	mov	r0, r2
1a007c12:	f000 f88b 	bl	1a007d2c <inv_q30_mult>
1a007c16:	4603      	mov	r3, r0
1a007c18:	1ae3      	subs	r3, r4, r3
1a007c1a:	653b      	str	r3, [r7, #80]	; 0x50

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
1a007c1c:	f107 0234 	add.w	r2, r7, #52	; 0x34
1a007c20:	f107 0344 	add.w	r3, r7, #68	; 0x44
1a007c24:	4619      	mov	r1, r3
1a007c26:	6878      	ldr	r0, [r7, #4]
1a007c28:	f000 f8a6 	bl	1a007d78 <inv_q_mult>
    inv_q_invert(quat, qi);
1a007c2c:	f107 0314 	add.w	r3, r7, #20
1a007c30:	4619      	mov	r1, r3
1a007c32:	6878      	ldr	r0, [r7, #4]
1a007c34:	f000 f99e 	bl	1a007f74 <inv_q_invert>
    inv_q_mult(q1, qi, q2);
1a007c38:	f107 0224 	add.w	r2, r7, #36	; 0x24
1a007c3c:	f107 0114 	add.w	r1, r7, #20
1a007c40:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a007c44:	4618      	mov	r0, r3
1a007c46:	f000 f897 	bl	1a007d78 <inv_q_mult>

    // Protect against atan2 of 0,0
    if ((q2[2] == 0L) && (q2[1] == 0L))
1a007c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a007c4c:	2b00      	cmp	r3, #0
1a007c4e:	d105      	bne.n	1a007c5c <inv_compass_angle+0xd8>
1a007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a007c52:	2b00      	cmp	r3, #0
1a007c54:	d102      	bne.n	1a007c5c <inv_compass_angle+0xd8>
        return 0.f;
1a007c56:	f04f 0300 	mov.w	r3, #0
1a007c5a:	e017      	b.n	1a007c8c <inv_compass_angle+0x108>

    // This is the unfiltered heading correction
    angW = -atan2f(inv_q30_to_float(q2[2]), inv_q30_to_float(q2[1]));
1a007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a007c5e:	4618      	mov	r0, r3
1a007c60:	f7ff ff78 	bl	1a007b54 <inv_q30_to_float>
1a007c64:	ee10 4a10 	vmov	r4, s0
1a007c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a007c6a:	4618      	mov	r0, r3
1a007c6c:	f7ff ff72 	bl	1a007b54 <inv_q30_to_float>
1a007c70:	ee10 3a10 	vmov	r3, s0
1a007c74:	4619      	mov	r1, r3
1a007c76:	4620      	mov	r0, r4
1a007c78:	f00d fda4 	bl	1a0157c4 <atan2f>
1a007c7c:	4603      	mov	r3, r0
1a007c7e:	ee07 3a90 	vmov	s15, r3
1a007c82:	eef1 7a67 	vneg.f32	s15, s15
1a007c86:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    return angW;
1a007c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
1a007c8c:	4618      	mov	r0, r3
1a007c8e:	375c      	adds	r7, #92	; 0x5c
1a007c90:	46bd      	mov	sp, r7
1a007c92:	bd90      	pop	{r4, r7, pc}

1a007c94 <inv_get_gyro_sum_of_sqr>:
 *          (1 degree per second)^2 = 2^6 = 2^GYRO_MAG_SQR_SHIFT.
 * @param[in] gyro Gyro data scaled with 1 dps = 2^16
 *  @return the computed magnitude squared output of the gyroscope.
 */
unsigned long inv_get_gyro_sum_of_sqr(const long *gyro)
{
1a007c94:	b480      	push	{r7}
1a007c96:	b087      	sub	sp, #28
1a007c98:	af00      	add	r7, sp, #0
1a007c9a:	6078      	str	r0, [r7, #4]
    unsigned long gmag = 0;
1a007c9c:	2300      	movs	r3, #0
1a007c9e:	617b      	str	r3, [r7, #20]
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
1a007ca0:	2300      	movs	r3, #0
1a007ca2:	613b      	str	r3, [r7, #16]
1a007ca4:	e011      	b.n	1a007cca <inv_get_gyro_sum_of_sqr+0x36>
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
1a007ca6:	693b      	ldr	r3, [r7, #16]
1a007ca8:	009b      	lsls	r3, r3, #2
1a007caa:	687a      	ldr	r2, [r7, #4]
1a007cac:	4413      	add	r3, r2
1a007cae:	681b      	ldr	r3, [r3, #0]
1a007cb0:	135b      	asrs	r3, r3, #13
1a007cb2:	60fb      	str	r3, [r7, #12]
        gmag += temp * temp;
1a007cb4:	68fb      	ldr	r3, [r7, #12]
1a007cb6:	68fa      	ldr	r2, [r7, #12]
1a007cb8:	fb02 f303 	mul.w	r3, r2, r3
1a007cbc:	461a      	mov	r2, r3
1a007cbe:	697b      	ldr	r3, [r7, #20]
1a007cc0:	4413      	add	r3, r2
1a007cc2:	617b      	str	r3, [r7, #20]
{
    unsigned long gmag = 0;
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
1a007cc4:	693b      	ldr	r3, [r7, #16]
1a007cc6:	3301      	adds	r3, #1
1a007cc8:	613b      	str	r3, [r7, #16]
1a007cca:	693b      	ldr	r3, [r7, #16]
1a007ccc:	2b02      	cmp	r3, #2
1a007cce:	ddea      	ble.n	1a007ca6 <inv_get_gyro_sum_of_sqr+0x12>
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
        gmag += temp * temp;
    }

    return gmag;
1a007cd0:	697b      	ldr	r3, [r7, #20]
}
1a007cd2:	4618      	mov	r0, r3
1a007cd4:	371c      	adds	r7, #28
1a007cd6:	46bd      	mov	sp, r7
1a007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a007cdc:	4770      	bx	lr
1a007cde:	bf00      	nop

1a007ce0 <inv_q29_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>29
*/
long inv_q29_mult(long a, long b)
{
1a007ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a007ce2:	b087      	sub	sp, #28
1a007ce4:	af00      	add	r7, sp, #0
1a007ce6:	6078      	str	r0, [r7, #4]
1a007ce8:	6039      	str	r1, [r7, #0]
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1a007cea:	687a      	ldr	r2, [r7, #4]
1a007cec:	4615      	mov	r5, r2
1a007cee:	ea4f 76e5 	mov.w	r6, r5, asr #31
1a007cf2:	683a      	ldr	r2, [r7, #0]
1a007cf4:	4611      	mov	r1, r2
1a007cf6:	ea4f 72e1 	mov.w	r2, r1, asr #31
1a007cfa:	fb01 fe06 	mul.w	lr, r1, r6
1a007cfe:	fb05 f002 	mul.w	r0, r5, r2
1a007d02:	4470      	add	r0, lr
1a007d04:	fba5 1201 	umull	r1, r2, r5, r1
1a007d08:	4410      	add	r0, r2
1a007d0a:	4602      	mov	r2, r0
1a007d0c:	e9c7 1204 	strd	r1, r2, [r7, #16]
1a007d10:	e9c7 1204 	strd	r1, r2, [r7, #16]
    result = (long)(temp >> 29);
1a007d14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
1a007d18:	0f4b      	lsrs	r3, r1, #29
1a007d1a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
1a007d1e:	1754      	asrs	r4, r2, #29
1a007d20:	60fb      	str	r3, [r7, #12]
    return result;
1a007d22:	68fb      	ldr	r3, [r7, #12]
#endif
}
1a007d24:	4618      	mov	r0, r3
1a007d26:	371c      	adds	r7, #28
1a007d28:	46bd      	mov	sp, r7
1a007d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a007d2c <inv_q30_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>30
*/
long inv_q30_mult(long a, long b)
{
1a007d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a007d2e:	b087      	sub	sp, #28
1a007d30:	af00      	add	r7, sp, #0
1a007d32:	6078      	str	r0, [r7, #4]
1a007d34:	6039      	str	r1, [r7, #0]
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1a007d36:	687a      	ldr	r2, [r7, #4]
1a007d38:	4615      	mov	r5, r2
1a007d3a:	ea4f 76e5 	mov.w	r6, r5, asr #31
1a007d3e:	683a      	ldr	r2, [r7, #0]
1a007d40:	4611      	mov	r1, r2
1a007d42:	ea4f 72e1 	mov.w	r2, r1, asr #31
1a007d46:	fb01 fe06 	mul.w	lr, r1, r6
1a007d4a:	fb05 f002 	mul.w	r0, r5, r2
1a007d4e:	4470      	add	r0, lr
1a007d50:	fba5 1201 	umull	r1, r2, r5, r1
1a007d54:	4410      	add	r0, r2
1a007d56:	4602      	mov	r2, r0
1a007d58:	e9c7 1204 	strd	r1, r2, [r7, #16]
1a007d5c:	e9c7 1204 	strd	r1, r2, [r7, #16]
    result = (long)(temp >> 30);
1a007d60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
1a007d64:	0f8b      	lsrs	r3, r1, #30
1a007d66:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
1a007d6a:	1794      	asrs	r4, r2, #30
1a007d6c:	60fb      	str	r3, [r7, #12]
    return result;
1a007d6e:	68fb      	ldr	r3, [r7, #12]
#endif
}
1a007d70:	4618      	mov	r0, r3
1a007d72:	371c      	adds	r7, #28
1a007d74:	46bd      	mov	sp, r7
1a007d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a007d78 <inv_q_mult>:
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
1a007d78:	b5b0      	push	{r4, r5, r7, lr}
1a007d7a:	b084      	sub	sp, #16
1a007d7c:	af00      	add	r7, sp, #0
1a007d7e:	60f8      	str	r0, [r7, #12]
1a007d80:	60b9      	str	r1, [r7, #8]
1a007d82:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
1a007d84:	68fb      	ldr	r3, [r7, #12]
1a007d86:	681a      	ldr	r2, [r3, #0]
1a007d88:	68bb      	ldr	r3, [r7, #8]
1a007d8a:	681b      	ldr	r3, [r3, #0]
1a007d8c:	4619      	mov	r1, r3
1a007d8e:	4610      	mov	r0, r2
1a007d90:	f7ff ffcc 	bl	1a007d2c <inv_q30_mult>
1a007d94:	4604      	mov	r4, r0
1a007d96:	68fb      	ldr	r3, [r7, #12]
1a007d98:	3304      	adds	r3, #4
1a007d9a:	681a      	ldr	r2, [r3, #0]
1a007d9c:	68bb      	ldr	r3, [r7, #8]
1a007d9e:	3304      	adds	r3, #4
1a007da0:	681b      	ldr	r3, [r3, #0]
1a007da2:	4619      	mov	r1, r3
1a007da4:	4610      	mov	r0, r2
1a007da6:	f7ff ffc1 	bl	1a007d2c <inv_q30_mult>
1a007daa:	4603      	mov	r3, r0
1a007dac:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);
1a007dae:	68fb      	ldr	r3, [r7, #12]
1a007db0:	3308      	adds	r3, #8
1a007db2:	681a      	ldr	r2, [r3, #0]
1a007db4:	68bb      	ldr	r3, [r7, #8]
1a007db6:	3308      	adds	r3, #8
1a007db8:	681b      	ldr	r3, [r3, #0]
1a007dba:	4619      	mov	r1, r3
1a007dbc:	4610      	mov	r0, r2
1a007dbe:	f7ff ffb5 	bl	1a007d2c <inv_q30_mult>
1a007dc2:	4603      	mov	r3, r0
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
1a007dc4:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);
1a007dc6:	68fb      	ldr	r3, [r7, #12]
1a007dc8:	330c      	adds	r3, #12
1a007dca:	681a      	ldr	r2, [r3, #0]
1a007dcc:	68bb      	ldr	r3, [r7, #8]
1a007dce:	330c      	adds	r3, #12
1a007dd0:	681b      	ldr	r3, [r3, #0]
1a007dd2:	4619      	mov	r1, r3
1a007dd4:	4610      	mov	r0, r2
1a007dd6:	f7ff ffa9 	bl	1a007d2c <inv_q30_mult>
1a007dda:	4603      	mov	r3, r0
1a007ddc:	1ae2      	subs	r2, r4, r3
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
1a007dde:	687b      	ldr	r3, [r7, #4]
1a007de0:	601a      	str	r2, [r3, #0]
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
1a007de2:	687b      	ldr	r3, [r7, #4]
1a007de4:	1d1c      	adds	r4, r3, #4
1a007de6:	68fb      	ldr	r3, [r7, #12]
1a007de8:	681a      	ldr	r2, [r3, #0]
1a007dea:	68bb      	ldr	r3, [r7, #8]
1a007dec:	3304      	adds	r3, #4
1a007dee:	681b      	ldr	r3, [r3, #0]
1a007df0:	4619      	mov	r1, r3
1a007df2:	4610      	mov	r0, r2
1a007df4:	f7ff ff9a 	bl	1a007d2c <inv_q30_mult>
1a007df8:	4605      	mov	r5, r0
1a007dfa:	68fb      	ldr	r3, [r7, #12]
1a007dfc:	3304      	adds	r3, #4
1a007dfe:	681a      	ldr	r2, [r3, #0]
1a007e00:	68bb      	ldr	r3, [r7, #8]
1a007e02:	681b      	ldr	r3, [r3, #0]
1a007e04:	4619      	mov	r1, r3
1a007e06:	4610      	mov	r0, r2
1a007e08:	f7ff ff90 	bl	1a007d2c <inv_q30_mult>
1a007e0c:	4603      	mov	r3, r0
1a007e0e:	441d      	add	r5, r3
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);
1a007e10:	68fb      	ldr	r3, [r7, #12]
1a007e12:	3308      	adds	r3, #8
1a007e14:	681a      	ldr	r2, [r3, #0]
1a007e16:	68bb      	ldr	r3, [r7, #8]
1a007e18:	330c      	adds	r3, #12
1a007e1a:	681b      	ldr	r3, [r3, #0]
1a007e1c:	4619      	mov	r1, r3
1a007e1e:	4610      	mov	r0, r2
1a007e20:	f7ff ff84 	bl	1a007d2c <inv_q30_mult>
1a007e24:	4603      	mov	r3, r0
{
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
1a007e26:	441d      	add	r5, r3
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);
1a007e28:	68fb      	ldr	r3, [r7, #12]
1a007e2a:	330c      	adds	r3, #12
1a007e2c:	681a      	ldr	r2, [r3, #0]
1a007e2e:	68bb      	ldr	r3, [r7, #8]
1a007e30:	3308      	adds	r3, #8
1a007e32:	681b      	ldr	r3, [r3, #0]
1a007e34:	4619      	mov	r1, r3
1a007e36:	4610      	mov	r0, r2
1a007e38:	f7ff ff78 	bl	1a007d2c <inv_q30_mult>
1a007e3c:	4603      	mov	r3, r0
1a007e3e:	1aeb      	subs	r3, r5, r3
{
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
1a007e40:	6023      	str	r3, [r4, #0]
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
1a007e42:	687b      	ldr	r3, [r7, #4]
1a007e44:	f103 0408 	add.w	r4, r3, #8
1a007e48:	68fb      	ldr	r3, [r7, #12]
1a007e4a:	681a      	ldr	r2, [r3, #0]
1a007e4c:	68bb      	ldr	r3, [r7, #8]
1a007e4e:	3308      	adds	r3, #8
1a007e50:	681b      	ldr	r3, [r3, #0]
1a007e52:	4619      	mov	r1, r3
1a007e54:	4610      	mov	r0, r2
1a007e56:	f7ff ff69 	bl	1a007d2c <inv_q30_mult>
1a007e5a:	4605      	mov	r5, r0
1a007e5c:	68fb      	ldr	r3, [r7, #12]
1a007e5e:	3304      	adds	r3, #4
1a007e60:	681a      	ldr	r2, [r3, #0]
1a007e62:	68bb      	ldr	r3, [r7, #8]
1a007e64:	330c      	adds	r3, #12
1a007e66:	681b      	ldr	r3, [r3, #0]
1a007e68:	4619      	mov	r1, r3
1a007e6a:	4610      	mov	r0, r2
1a007e6c:	f7ff ff5e 	bl	1a007d2c <inv_q30_mult>
1a007e70:	4603      	mov	r3, r0
1a007e72:	1aed      	subs	r5, r5, r3
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);
1a007e74:	68fb      	ldr	r3, [r7, #12]
1a007e76:	3308      	adds	r3, #8
1a007e78:	681a      	ldr	r2, [r3, #0]
1a007e7a:	68bb      	ldr	r3, [r7, #8]
1a007e7c:	681b      	ldr	r3, [r3, #0]
1a007e7e:	4619      	mov	r1, r3
1a007e80:	4610      	mov	r0, r2
1a007e82:	f7ff ff53 	bl	1a007d2c <inv_q30_mult>
1a007e86:	4603      	mov	r3, r0
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
1a007e88:	441d      	add	r5, r3
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);
1a007e8a:	68fb      	ldr	r3, [r7, #12]
1a007e8c:	330c      	adds	r3, #12
1a007e8e:	681a      	ldr	r2, [r3, #0]
1a007e90:	68bb      	ldr	r3, [r7, #8]
1a007e92:	3304      	adds	r3, #4
1a007e94:	681b      	ldr	r3, [r3, #0]
1a007e96:	4619      	mov	r1, r3
1a007e98:	4610      	mov	r0, r2
1a007e9a:	f7ff ff47 	bl	1a007d2c <inv_q30_mult>
1a007e9e:	4603      	mov	r3, r0
1a007ea0:	442b      	add	r3, r5
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
1a007ea2:	6023      	str	r3, [r4, #0]
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);

    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
1a007ea4:	687b      	ldr	r3, [r7, #4]
1a007ea6:	f103 040c 	add.w	r4, r3, #12
1a007eaa:	68fb      	ldr	r3, [r7, #12]
1a007eac:	681a      	ldr	r2, [r3, #0]
1a007eae:	68bb      	ldr	r3, [r7, #8]
1a007eb0:	330c      	adds	r3, #12
1a007eb2:	681b      	ldr	r3, [r3, #0]
1a007eb4:	4619      	mov	r1, r3
1a007eb6:	4610      	mov	r0, r2
1a007eb8:	f7ff ff38 	bl	1a007d2c <inv_q30_mult>
1a007ebc:	4605      	mov	r5, r0
1a007ebe:	68fb      	ldr	r3, [r7, #12]
1a007ec0:	3304      	adds	r3, #4
1a007ec2:	681a      	ldr	r2, [r3, #0]
1a007ec4:	68bb      	ldr	r3, [r7, #8]
1a007ec6:	3308      	adds	r3, #8
1a007ec8:	681b      	ldr	r3, [r3, #0]
1a007eca:	4619      	mov	r1, r3
1a007ecc:	4610      	mov	r0, r2
1a007ece:	f7ff ff2d 	bl	1a007d2c <inv_q30_mult>
1a007ed2:	4603      	mov	r3, r0
1a007ed4:	441d      	add	r5, r3
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
1a007ed6:	68fb      	ldr	r3, [r7, #12]
1a007ed8:	3308      	adds	r3, #8
1a007eda:	681a      	ldr	r2, [r3, #0]
1a007edc:	68bb      	ldr	r3, [r7, #8]
1a007ede:	3304      	adds	r3, #4
1a007ee0:	681b      	ldr	r3, [r3, #0]
1a007ee2:	4619      	mov	r1, r3
1a007ee4:	4610      	mov	r0, r2
1a007ee6:	f7ff ff21 	bl	1a007d2c <inv_q30_mult>
1a007eea:	4603      	mov	r3, r0
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);

    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
1a007eec:	1aed      	subs	r5, r5, r3
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
1a007eee:	68fb      	ldr	r3, [r7, #12]
1a007ef0:	330c      	adds	r3, #12
1a007ef2:	681a      	ldr	r2, [r3, #0]
1a007ef4:	68bb      	ldr	r3, [r7, #8]
1a007ef6:	681b      	ldr	r3, [r3, #0]
1a007ef8:	4619      	mov	r1, r3
1a007efa:	4610      	mov	r0, r2
1a007efc:	f7ff ff16 	bl	1a007d2c <inv_q30_mult>
1a007f00:	4603      	mov	r3, r0
1a007f02:	442b      	add	r3, r5
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);

    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
1a007f04:	6023      	str	r3, [r4, #0]
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
}
1a007f06:	bf00      	nop
1a007f08:	3710      	adds	r7, #16
1a007f0a:	46bd      	mov	sp, r7
1a007f0c:	bdb0      	pop	{r4, r5, r7, pc}
1a007f0e:	bf00      	nop

1a007f10 <inv_q_add>:
*            to 2^30
* @param[out] qSum Sum after quaternion summation. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_add(long *q1, long *q2, long *qSum)
{
1a007f10:	b480      	push	{r7}
1a007f12:	b085      	sub	sp, #20
1a007f14:	af00      	add	r7, sp, #0
1a007f16:	60f8      	str	r0, [r7, #12]
1a007f18:	60b9      	str	r1, [r7, #8]
1a007f1a:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
1a007f1c:	68fb      	ldr	r3, [r7, #12]
1a007f1e:	681a      	ldr	r2, [r3, #0]
1a007f20:	68bb      	ldr	r3, [r7, #8]
1a007f22:	681b      	ldr	r3, [r3, #0]
1a007f24:	441a      	add	r2, r3
1a007f26:	687b      	ldr	r3, [r7, #4]
1a007f28:	601a      	str	r2, [r3, #0]
    qSum[1] = q1[1] + q2[1];
1a007f2a:	687b      	ldr	r3, [r7, #4]
1a007f2c:	3304      	adds	r3, #4
1a007f2e:	68fa      	ldr	r2, [r7, #12]
1a007f30:	3204      	adds	r2, #4
1a007f32:	6811      	ldr	r1, [r2, #0]
1a007f34:	68ba      	ldr	r2, [r7, #8]
1a007f36:	3204      	adds	r2, #4
1a007f38:	6812      	ldr	r2, [r2, #0]
1a007f3a:	440a      	add	r2, r1
1a007f3c:	601a      	str	r2, [r3, #0]
    qSum[2] = q1[2] + q2[2];
1a007f3e:	687b      	ldr	r3, [r7, #4]
1a007f40:	3308      	adds	r3, #8
1a007f42:	68fa      	ldr	r2, [r7, #12]
1a007f44:	3208      	adds	r2, #8
1a007f46:	6811      	ldr	r1, [r2, #0]
1a007f48:	68ba      	ldr	r2, [r7, #8]
1a007f4a:	3208      	adds	r2, #8
1a007f4c:	6812      	ldr	r2, [r2, #0]
1a007f4e:	440a      	add	r2, r1
1a007f50:	601a      	str	r2, [r3, #0]
    qSum[3] = q1[3] + q2[3];
1a007f52:	687b      	ldr	r3, [r7, #4]
1a007f54:	330c      	adds	r3, #12
1a007f56:	68fa      	ldr	r2, [r7, #12]
1a007f58:	320c      	adds	r2, #12
1a007f5a:	6811      	ldr	r1, [r2, #0]
1a007f5c:	68ba      	ldr	r2, [r7, #8]
1a007f5e:	320c      	adds	r2, #12
1a007f60:	6812      	ldr	r2, [r2, #0]
1a007f62:	440a      	add	r2, r1
1a007f64:	601a      	str	r2, [r3, #0]
}
1a007f66:	bf00      	nop
1a007f68:	3714      	adds	r7, #20
1a007f6a:	46bd      	mov	sp, r7
1a007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a007f70:	4770      	bx	lr
1a007f72:	bf00      	nop

1a007f74 <inv_q_invert>:
    INVENSENSE_FUNC_START;
    inv_vector_normalize(q, 4);
}

void inv_q_invert(const long *q, long *qInverted)
{
1a007f74:	b480      	push	{r7}
1a007f76:	b083      	sub	sp, #12
1a007f78:	af00      	add	r7, sp, #0
1a007f7a:	6078      	str	r0, [r7, #4]
1a007f7c:	6039      	str	r1, [r7, #0]
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1a007f7e:	687b      	ldr	r3, [r7, #4]
1a007f80:	681a      	ldr	r2, [r3, #0]
1a007f82:	683b      	ldr	r3, [r7, #0]
1a007f84:	601a      	str	r2, [r3, #0]
    qInverted[1] = -q[1];
1a007f86:	683b      	ldr	r3, [r7, #0]
1a007f88:	3304      	adds	r3, #4
1a007f8a:	687a      	ldr	r2, [r7, #4]
1a007f8c:	3204      	adds	r2, #4
1a007f8e:	6812      	ldr	r2, [r2, #0]
1a007f90:	4252      	negs	r2, r2
1a007f92:	601a      	str	r2, [r3, #0]
    qInverted[2] = -q[2];
1a007f94:	683b      	ldr	r3, [r7, #0]
1a007f96:	3308      	adds	r3, #8
1a007f98:	687a      	ldr	r2, [r7, #4]
1a007f9a:	3208      	adds	r2, #8
1a007f9c:	6812      	ldr	r2, [r2, #0]
1a007f9e:	4252      	negs	r2, r2
1a007fa0:	601a      	str	r2, [r3, #0]
    qInverted[3] = -q[3];
1a007fa2:	683b      	ldr	r3, [r7, #0]
1a007fa4:	330c      	adds	r3, #12
1a007fa6:	687a      	ldr	r2, [r7, #4]
1a007fa8:	320c      	adds	r2, #12
1a007faa:	6812      	ldr	r2, [r2, #0]
1a007fac:	4252      	negs	r2, r2
1a007fae:	601a      	str	r2, [r3, #0]
}
1a007fb0:	bf00      	nop
1a007fb2:	370c      	adds	r7, #12
1a007fb4:	46bd      	mov	sp, r7
1a007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a007fba:	4770      	bx	lr

1a007fbc <inv_q_rotate>:
}

/** Rotates a 3-element vector by Rotation defined by Q
*/
void inv_q_rotate(const long *q, const long *in, long *out)
{
1a007fbc:	b580      	push	{r7, lr}
1a007fbe:	b094      	sub	sp, #80	; 0x50
1a007fc0:	af00      	add	r7, sp, #0
1a007fc2:	60f8      	str	r0, [r7, #12]
1a007fc4:	60b9      	str	r1, [r7, #8]
1a007fc6:	607a      	str	r2, [r7, #4]
    long q_temp1[4], q_temp2[4];
    long in4[4], out4[4];

    // Fixme optimize
    in4[0] = 0;
1a007fc8:	2300      	movs	r3, #0
1a007fca:	623b      	str	r3, [r7, #32]
    memcpy(&in4[1], in, 3 * sizeof(long));
1a007fcc:	f107 0320 	add.w	r3, r7, #32
1a007fd0:	3304      	adds	r3, #4
1a007fd2:	220c      	movs	r2, #12
1a007fd4:	68b9      	ldr	r1, [r7, #8]
1a007fd6:	4618      	mov	r0, r3
1a007fd8:	f00c fd80 	bl	1a014adc <memcpy>
    inv_q_mult(q, in4, q_temp1);
1a007fdc:	f107 0240 	add.w	r2, r7, #64	; 0x40
1a007fe0:	f107 0320 	add.w	r3, r7, #32
1a007fe4:	4619      	mov	r1, r3
1a007fe6:	68f8      	ldr	r0, [r7, #12]
1a007fe8:	f7ff fec6 	bl	1a007d78 <inv_q_mult>
    inv_q_invert(q, q_temp2);
1a007fec:	f107 0330 	add.w	r3, r7, #48	; 0x30
1a007ff0:	4619      	mov	r1, r3
1a007ff2:	68f8      	ldr	r0, [r7, #12]
1a007ff4:	f7ff ffbe 	bl	1a007f74 <inv_q_invert>
    inv_q_mult(q_temp1, q_temp2, out4);
1a007ff8:	f107 0210 	add.w	r2, r7, #16
1a007ffc:	f107 0130 	add.w	r1, r7, #48	; 0x30
1a008000:	f107 0340 	add.w	r3, r7, #64	; 0x40
1a008004:	4618      	mov	r0, r3
1a008006:	f7ff feb7 	bl	1a007d78 <inv_q_mult>
    memcpy(out, &out4[1], 3 * sizeof(long));
1a00800a:	f107 0310 	add.w	r3, r7, #16
1a00800e:	3304      	adds	r3, #4
1a008010:	220c      	movs	r2, #12
1a008012:	4619      	mov	r1, r3
1a008014:	6878      	ldr	r0, [r7, #4]
1a008016:	f00c fd61 	bl	1a014adc <memcpy>
}
1a00801a:	bf00      	nop
1a00801c:	3750      	adds	r7, #80	; 0x50
1a00801e:	46bd      	mov	sp, r7
1a008020:	bd80      	pop	{r7, pc}
1a008022:	bf00      	nop

1a008024 <inv_q_multf>:

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
1a008024:	b480      	push	{r7}
1a008026:	b085      	sub	sp, #20
1a008028:	af00      	add	r7, sp, #0
1a00802a:	60f8      	str	r0, [r7, #12]
1a00802c:	60b9      	str	r1, [r7, #8]
1a00802e:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qProd[0] =
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
1a008030:	68fb      	ldr	r3, [r7, #12]
1a008032:	ed93 7a00 	vldr	s14, [r3]
1a008036:	68bb      	ldr	r3, [r7, #8]
1a008038:	edd3 7a00 	vldr	s15, [r3]
1a00803c:	ee27 7a27 	vmul.f32	s14, s14, s15
1a008040:	68fb      	ldr	r3, [r7, #12]
1a008042:	3304      	adds	r3, #4
1a008044:	edd3 6a00 	vldr	s13, [r3]
1a008048:	68bb      	ldr	r3, [r7, #8]
1a00804a:	3304      	adds	r3, #4
1a00804c:	edd3 7a00 	vldr	s15, [r3]
1a008050:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008054:	ee37 7a67 	vsub.f32	s14, s14, s15
1a008058:	68fb      	ldr	r3, [r7, #12]
1a00805a:	3308      	adds	r3, #8
1a00805c:	edd3 6a00 	vldr	s13, [r3]
1a008060:	68bb      	ldr	r3, [r7, #8]
1a008062:	3308      	adds	r3, #8
1a008064:	edd3 7a00 	vldr	s15, [r3]
1a008068:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a00806c:	ee37 7a67 	vsub.f32	s14, s14, s15
1a008070:	68fb      	ldr	r3, [r7, #12]
1a008072:	330c      	adds	r3, #12
1a008074:	edd3 6a00 	vldr	s13, [r3]
1a008078:	68bb      	ldr	r3, [r7, #8]
1a00807a:	330c      	adds	r3, #12
1a00807c:	edd3 7a00 	vldr	s15, [r3]
1a008080:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008084:	ee77 7a67 	vsub.f32	s15, s14, s15
}

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
    INVENSENSE_FUNC_START;
    qProd[0] =
1a008088:	687b      	ldr	r3, [r7, #4]
1a00808a:	edc3 7a00 	vstr	s15, [r3]
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
    qProd[1] =
1a00808e:	687b      	ldr	r3, [r7, #4]
1a008090:	3304      	adds	r3, #4
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
1a008092:	68fa      	ldr	r2, [r7, #12]
1a008094:	ed92 7a00 	vldr	s14, [r2]
1a008098:	68ba      	ldr	r2, [r7, #8]
1a00809a:	3204      	adds	r2, #4
1a00809c:	edd2 7a00 	vldr	s15, [r2]
1a0080a0:	ee27 7a27 	vmul.f32	s14, s14, s15
1a0080a4:	68fa      	ldr	r2, [r7, #12]
1a0080a6:	3204      	adds	r2, #4
1a0080a8:	edd2 6a00 	vldr	s13, [r2]
1a0080ac:	68ba      	ldr	r2, [r7, #8]
1a0080ae:	edd2 7a00 	vldr	s15, [r2]
1a0080b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a0080b6:	ee37 7a27 	vadd.f32	s14, s14, s15
1a0080ba:	68fa      	ldr	r2, [r7, #12]
1a0080bc:	3208      	adds	r2, #8
1a0080be:	edd2 6a00 	vldr	s13, [r2]
1a0080c2:	68ba      	ldr	r2, [r7, #8]
1a0080c4:	320c      	adds	r2, #12
1a0080c6:	edd2 7a00 	vldr	s15, [r2]
1a0080ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a0080ce:	ee37 7a27 	vadd.f32	s14, s14, s15
1a0080d2:	68fa      	ldr	r2, [r7, #12]
1a0080d4:	320c      	adds	r2, #12
1a0080d6:	edd2 6a00 	vldr	s13, [r2]
1a0080da:	68ba      	ldr	r2, [r7, #8]
1a0080dc:	3208      	adds	r2, #8
1a0080de:	edd2 7a00 	vldr	s15, [r2]
1a0080e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a0080e6:	ee77 7a67 	vsub.f32	s15, s14, s15
void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
    INVENSENSE_FUNC_START;
    qProd[0] =
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
    qProd[1] =
1a0080ea:	edc3 7a00 	vstr	s15, [r3]
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
    qProd[2] =
1a0080ee:	687b      	ldr	r3, [r7, #4]
1a0080f0:	3308      	adds	r3, #8
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
1a0080f2:	68fa      	ldr	r2, [r7, #12]
1a0080f4:	ed92 7a00 	vldr	s14, [r2]
1a0080f8:	68ba      	ldr	r2, [r7, #8]
1a0080fa:	3208      	adds	r2, #8
1a0080fc:	edd2 7a00 	vldr	s15, [r2]
1a008100:	ee27 7a27 	vmul.f32	s14, s14, s15
1a008104:	68fa      	ldr	r2, [r7, #12]
1a008106:	3204      	adds	r2, #4
1a008108:	edd2 6a00 	vldr	s13, [r2]
1a00810c:	68ba      	ldr	r2, [r7, #8]
1a00810e:	320c      	adds	r2, #12
1a008110:	edd2 7a00 	vldr	s15, [r2]
1a008114:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008118:	ee37 7a67 	vsub.f32	s14, s14, s15
1a00811c:	68fa      	ldr	r2, [r7, #12]
1a00811e:	3208      	adds	r2, #8
1a008120:	edd2 6a00 	vldr	s13, [r2]
1a008124:	68ba      	ldr	r2, [r7, #8]
1a008126:	edd2 7a00 	vldr	s15, [r2]
1a00812a:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a00812e:	ee37 7a27 	vadd.f32	s14, s14, s15
1a008132:	68fa      	ldr	r2, [r7, #12]
1a008134:	320c      	adds	r2, #12
1a008136:	edd2 6a00 	vldr	s13, [r2]
1a00813a:	68ba      	ldr	r2, [r7, #8]
1a00813c:	3204      	adds	r2, #4
1a00813e:	edd2 7a00 	vldr	s15, [r2]
1a008142:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008146:	ee77 7a27 	vadd.f32	s15, s14, s15
    INVENSENSE_FUNC_START;
    qProd[0] =
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
    qProd[1] =
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
    qProd[2] =
1a00814a:	edc3 7a00 	vstr	s15, [r3]
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
    qProd[3] =
1a00814e:	687b      	ldr	r3, [r7, #4]
1a008150:	330c      	adds	r3, #12
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
1a008152:	68fa      	ldr	r2, [r7, #12]
1a008154:	ed92 7a00 	vldr	s14, [r2]
1a008158:	68ba      	ldr	r2, [r7, #8]
1a00815a:	320c      	adds	r2, #12
1a00815c:	edd2 7a00 	vldr	s15, [r2]
1a008160:	ee27 7a27 	vmul.f32	s14, s14, s15
1a008164:	68fa      	ldr	r2, [r7, #12]
1a008166:	3204      	adds	r2, #4
1a008168:	edd2 6a00 	vldr	s13, [r2]
1a00816c:	68ba      	ldr	r2, [r7, #8]
1a00816e:	3208      	adds	r2, #8
1a008170:	edd2 7a00 	vldr	s15, [r2]
1a008174:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008178:	ee37 7a27 	vadd.f32	s14, s14, s15
1a00817c:	68fa      	ldr	r2, [r7, #12]
1a00817e:	3208      	adds	r2, #8
1a008180:	edd2 6a00 	vldr	s13, [r2]
1a008184:	68ba      	ldr	r2, [r7, #8]
1a008186:	3204      	adds	r2, #4
1a008188:	edd2 7a00 	vldr	s15, [r2]
1a00818c:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008190:	ee37 7a67 	vsub.f32	s14, s14, s15
1a008194:	68fa      	ldr	r2, [r7, #12]
1a008196:	320c      	adds	r2, #12
1a008198:	edd2 6a00 	vldr	s13, [r2]
1a00819c:	68ba      	ldr	r2, [r7, #8]
1a00819e:	edd2 7a00 	vldr	s15, [r2]
1a0081a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a0081a6:	ee77 7a27 	vadd.f32	s15, s14, s15
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
    qProd[1] =
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
    qProd[2] =
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
    qProd[3] =
1a0081aa:	edc3 7a00 	vstr	s15, [r3]
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
}
1a0081ae:	bf00      	nop
1a0081b0:	3714      	adds	r7, #20
1a0081b2:	46bd      	mov	sp, r7
1a0081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0081b8:	4770      	bx	lr
1a0081ba:	bf00      	nop

1a0081bc <inv_q_addf>:

void inv_q_addf(const float *q1, const float *q2, float *qSum)
{
1a0081bc:	b480      	push	{r7}
1a0081be:	b085      	sub	sp, #20
1a0081c0:	af00      	add	r7, sp, #0
1a0081c2:	60f8      	str	r0, [r7, #12]
1a0081c4:	60b9      	str	r1, [r7, #8]
1a0081c6:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
1a0081c8:	68fb      	ldr	r3, [r7, #12]
1a0081ca:	ed93 7a00 	vldr	s14, [r3]
1a0081ce:	68bb      	ldr	r3, [r7, #8]
1a0081d0:	edd3 7a00 	vldr	s15, [r3]
1a0081d4:	ee77 7a27 	vadd.f32	s15, s14, s15
1a0081d8:	687b      	ldr	r3, [r7, #4]
1a0081da:	edc3 7a00 	vstr	s15, [r3]
    qSum[1] = q1[1] + q2[1];
1a0081de:	687b      	ldr	r3, [r7, #4]
1a0081e0:	3304      	adds	r3, #4
1a0081e2:	68fa      	ldr	r2, [r7, #12]
1a0081e4:	3204      	adds	r2, #4
1a0081e6:	ed92 7a00 	vldr	s14, [r2]
1a0081ea:	68ba      	ldr	r2, [r7, #8]
1a0081ec:	3204      	adds	r2, #4
1a0081ee:	edd2 7a00 	vldr	s15, [r2]
1a0081f2:	ee77 7a27 	vadd.f32	s15, s14, s15
1a0081f6:	edc3 7a00 	vstr	s15, [r3]
    qSum[2] = q1[2] + q2[2];
1a0081fa:	687b      	ldr	r3, [r7, #4]
1a0081fc:	3308      	adds	r3, #8
1a0081fe:	68fa      	ldr	r2, [r7, #12]
1a008200:	3208      	adds	r2, #8
1a008202:	ed92 7a00 	vldr	s14, [r2]
1a008206:	68ba      	ldr	r2, [r7, #8]
1a008208:	3208      	adds	r2, #8
1a00820a:	edd2 7a00 	vldr	s15, [r2]
1a00820e:	ee77 7a27 	vadd.f32	s15, s14, s15
1a008212:	edc3 7a00 	vstr	s15, [r3]
    qSum[3] = q1[3] + q2[3];
1a008216:	687b      	ldr	r3, [r7, #4]
1a008218:	330c      	adds	r3, #12
1a00821a:	68fa      	ldr	r2, [r7, #12]
1a00821c:	320c      	adds	r2, #12
1a00821e:	ed92 7a00 	vldr	s14, [r2]
1a008222:	68ba      	ldr	r2, [r7, #8]
1a008224:	320c      	adds	r2, #12
1a008226:	edd2 7a00 	vldr	s15, [r2]
1a00822a:	ee77 7a27 	vadd.f32	s15, s14, s15
1a00822e:	edc3 7a00 	vstr	s15, [r3]
}
1a008232:	bf00      	nop
1a008234:	3714      	adds	r7, #20
1a008236:	46bd      	mov	sp, r7
1a008238:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00823c:	4770      	bx	lr
1a00823e:	bf00      	nop

1a008240 <inv_q_normalizef>:

void inv_q_normalizef(float *q)
{
1a008240:	b480      	push	{r7}
1a008242:	b085      	sub	sp, #20
1a008244:	af00      	add	r7, sp, #0
1a008246:	6078      	str	r0, [r7, #4]
    INVENSENSE_FUNC_START;
    float normSF = 0;
1a008248:	f04f 0300 	mov.w	r3, #0
1a00824c:	60fb      	str	r3, [r7, #12]
    float xHalf = 0;
1a00824e:	f04f 0300 	mov.w	r3, #0
1a008252:	60bb      	str	r3, [r7, #8]
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1a008254:	687b      	ldr	r3, [r7, #4]
1a008256:	ed93 7a00 	vldr	s14, [r3]
1a00825a:	687b      	ldr	r3, [r7, #4]
1a00825c:	edd3 7a00 	vldr	s15, [r3]
1a008260:	ee27 7a27 	vmul.f32	s14, s14, s15
1a008264:	687b      	ldr	r3, [r7, #4]
1a008266:	3304      	adds	r3, #4
1a008268:	edd3 6a00 	vldr	s13, [r3]
1a00826c:	687b      	ldr	r3, [r7, #4]
1a00826e:	3304      	adds	r3, #4
1a008270:	edd3 7a00 	vldr	s15, [r3]
1a008274:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008278:	ee37 7a27 	vadd.f32	s14, s14, s15
1a00827c:	687b      	ldr	r3, [r7, #4]
1a00827e:	3308      	adds	r3, #8
1a008280:	edd3 6a00 	vldr	s13, [r3]
1a008284:	687b      	ldr	r3, [r7, #4]
1a008286:	3308      	adds	r3, #8
1a008288:	edd3 7a00 	vldr	s15, [r3]
1a00828c:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008290:	ee37 7a27 	vadd.f32	s14, s14, s15
1a008294:	687b      	ldr	r3, [r7, #4]
1a008296:	330c      	adds	r3, #12
1a008298:	edd3 6a00 	vldr	s13, [r3]
1a00829c:	687b      	ldr	r3, [r7, #4]
1a00829e:	330c      	adds	r3, #12
1a0082a0:	edd3 7a00 	vldr	s15, [r3]
1a0082a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a0082a8:	ee77 7a27 	vadd.f32	s15, s14, s15
1a0082ac:	edc7 7a03 	vstr	s15, [r7, #12]
    if (normSF < 2) {
1a0082b0:	edd7 7a03 	vldr	s15, [r7, #12]
1a0082b4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
1a0082b8:	eef4 7ac7 	vcmpe.f32	s15, s14
1a0082bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0082c0:	f140 8087 	bpl.w	1a0083d2 <inv_q_normalizef+0x192>
        xHalf = 0.5f * normSF;
1a0082c4:	edd7 7a03 	vldr	s15, [r7, #12]
1a0082c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
1a0082cc:	ee67 7a87 	vmul.f32	s15, s15, s14
1a0082d0:	edc7 7a02 	vstr	s15, [r7, #8]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1a0082d4:	ed97 7a02 	vldr	s14, [r7, #8]
1a0082d8:	edd7 7a03 	vldr	s15, [r7, #12]
1a0082dc:	ee27 7a27 	vmul.f32	s14, s14, s15
1a0082e0:	edd7 7a03 	vldr	s15, [r7, #12]
1a0082e4:	ee67 7a27 	vmul.f32	s15, s14, s15
1a0082e8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
1a0082ec:	ee77 7a67 	vsub.f32	s15, s14, s15
1a0082f0:	ed97 7a03 	vldr	s14, [r7, #12]
1a0082f4:	ee67 7a27 	vmul.f32	s15, s14, s15
1a0082f8:	edc7 7a03 	vstr	s15, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1a0082fc:	ed97 7a02 	vldr	s14, [r7, #8]
1a008300:	edd7 7a03 	vldr	s15, [r7, #12]
1a008304:	ee27 7a27 	vmul.f32	s14, s14, s15
1a008308:	edd7 7a03 	vldr	s15, [r7, #12]
1a00830c:	ee67 7a27 	vmul.f32	s15, s14, s15
1a008310:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
1a008314:	ee77 7a67 	vsub.f32	s15, s14, s15
1a008318:	ed97 7a03 	vldr	s14, [r7, #12]
1a00831c:	ee67 7a27 	vmul.f32	s15, s14, s15
1a008320:	edc7 7a03 	vstr	s15, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1a008324:	ed97 7a02 	vldr	s14, [r7, #8]
1a008328:	edd7 7a03 	vldr	s15, [r7, #12]
1a00832c:	ee27 7a27 	vmul.f32	s14, s14, s15
1a008330:	edd7 7a03 	vldr	s15, [r7, #12]
1a008334:	ee67 7a27 	vmul.f32	s15, s14, s15
1a008338:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
1a00833c:	ee77 7a67 	vsub.f32	s15, s14, s15
1a008340:	ed97 7a03 	vldr	s14, [r7, #12]
1a008344:	ee67 7a27 	vmul.f32	s15, s14, s15
1a008348:	edc7 7a03 	vstr	s15, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1a00834c:	ed97 7a02 	vldr	s14, [r7, #8]
1a008350:	edd7 7a03 	vldr	s15, [r7, #12]
1a008354:	ee27 7a27 	vmul.f32	s14, s14, s15
1a008358:	edd7 7a03 	vldr	s15, [r7, #12]
1a00835c:	ee67 7a27 	vmul.f32	s15, s14, s15
1a008360:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
1a008364:	ee77 7a67 	vsub.f32	s15, s14, s15
1a008368:	ed97 7a03 	vldr	s14, [r7, #12]
1a00836c:	ee67 7a27 	vmul.f32	s15, s14, s15
1a008370:	edc7 7a03 	vstr	s15, [r7, #12]
        q[0] *= normSF;
1a008374:	687b      	ldr	r3, [r7, #4]
1a008376:	ed93 7a00 	vldr	s14, [r3]
1a00837a:	edd7 7a03 	vldr	s15, [r7, #12]
1a00837e:	ee67 7a27 	vmul.f32	s15, s14, s15
1a008382:	687b      	ldr	r3, [r7, #4]
1a008384:	edc3 7a00 	vstr	s15, [r3]
        q[1] *= normSF;
1a008388:	687b      	ldr	r3, [r7, #4]
1a00838a:	3304      	adds	r3, #4
1a00838c:	687a      	ldr	r2, [r7, #4]
1a00838e:	3204      	adds	r2, #4
1a008390:	ed92 7a00 	vldr	s14, [r2]
1a008394:	edd7 7a03 	vldr	s15, [r7, #12]
1a008398:	ee67 7a27 	vmul.f32	s15, s14, s15
1a00839c:	edc3 7a00 	vstr	s15, [r3]
        q[2] *= normSF;
1a0083a0:	687b      	ldr	r3, [r7, #4]
1a0083a2:	3308      	adds	r3, #8
1a0083a4:	687a      	ldr	r2, [r7, #4]
1a0083a6:	3208      	adds	r2, #8
1a0083a8:	ed92 7a00 	vldr	s14, [r2]
1a0083ac:	edd7 7a03 	vldr	s15, [r7, #12]
1a0083b0:	ee67 7a27 	vmul.f32	s15, s14, s15
1a0083b4:	edc3 7a00 	vstr	s15, [r3]
        q[3] *= normSF;
1a0083b8:	687b      	ldr	r3, [r7, #4]
1a0083ba:	330c      	adds	r3, #12
1a0083bc:	687a      	ldr	r2, [r7, #4]
1a0083be:	320c      	adds	r2, #12
1a0083c0:	ed92 7a00 	vldr	s14, [r2]
1a0083c4:	edd7 7a03 	vldr	s15, [r7, #12]
1a0083c8:	ee67 7a27 	vmul.f32	s15, s14, s15
1a0083cc:	edc3 7a00 	vstr	s15, [r3]
1a0083d0:	e012      	b.n	1a0083f8 <inv_q_normalizef+0x1b8>
    } else {
        q[0] = 1.0;
1a0083d2:	687b      	ldr	r3, [r7, #4]
1a0083d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a0083d8:	601a      	str	r2, [r3, #0]
        q[1] = 0.0;
1a0083da:	687b      	ldr	r3, [r7, #4]
1a0083dc:	3304      	adds	r3, #4
1a0083de:	f04f 0200 	mov.w	r2, #0
1a0083e2:	601a      	str	r2, [r3, #0]
        q[2] = 0.0;
1a0083e4:	687b      	ldr	r3, [r7, #4]
1a0083e6:	3308      	adds	r3, #8
1a0083e8:	f04f 0200 	mov.w	r2, #0
1a0083ec:	601a      	str	r2, [r3, #0]
        q[3] = 0.0;
1a0083ee:	687b      	ldr	r3, [r7, #4]
1a0083f0:	330c      	adds	r3, #12
1a0083f2:	f04f 0200 	mov.w	r2, #0
1a0083f6:	601a      	str	r2, [r3, #0]
    }
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1a0083f8:	687b      	ldr	r3, [r7, #4]
1a0083fa:	ed93 7a00 	vldr	s14, [r3]
1a0083fe:	687b      	ldr	r3, [r7, #4]
1a008400:	edd3 7a00 	vldr	s15, [r3]
1a008404:	ee27 7a27 	vmul.f32	s14, s14, s15
1a008408:	687b      	ldr	r3, [r7, #4]
1a00840a:	3304      	adds	r3, #4
1a00840c:	edd3 6a00 	vldr	s13, [r3]
1a008410:	687b      	ldr	r3, [r7, #4]
1a008412:	3304      	adds	r3, #4
1a008414:	edd3 7a00 	vldr	s15, [r3]
1a008418:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a00841c:	ee37 7a27 	vadd.f32	s14, s14, s15
1a008420:	687b      	ldr	r3, [r7, #4]
1a008422:	3308      	adds	r3, #8
1a008424:	edd3 6a00 	vldr	s13, [r3]
1a008428:	687b      	ldr	r3, [r7, #4]
1a00842a:	3308      	adds	r3, #8
1a00842c:	edd3 7a00 	vldr	s15, [r3]
1a008430:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008434:	ee37 7a27 	vadd.f32	s14, s14, s15
1a008438:	687b      	ldr	r3, [r7, #4]
1a00843a:	330c      	adds	r3, #12
1a00843c:	edd3 6a00 	vldr	s13, [r3]
1a008440:	687b      	ldr	r3, [r7, #4]
1a008442:	330c      	adds	r3, #12
1a008444:	edd3 7a00 	vldr	s15, [r3]
1a008448:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a00844c:	ee77 7a27 	vadd.f32	s15, s14, s15
1a008450:	edc7 7a03 	vstr	s15, [r7, #12]
}
1a008454:	bf00      	nop
1a008456:	3714      	adds	r7, #20
1a008458:	46bd      	mov	sp, r7
1a00845a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00845e:	4770      	bx	lr

1a008460 <inv_q_norm4>:

/** Performs a length 4 vector normalization with a square root.
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
1a008460:	b580      	push	{r7, lr}
1a008462:	b084      	sub	sp, #16
1a008464:	af00      	add	r7, sp, #0
1a008466:	6078      	str	r0, [r7, #4]
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1a008468:	687b      	ldr	r3, [r7, #4]
1a00846a:	ed93 7a00 	vldr	s14, [r3]
1a00846e:	687b      	ldr	r3, [r7, #4]
1a008470:	edd3 7a00 	vldr	s15, [r3]
1a008474:	ee27 7a27 	vmul.f32	s14, s14, s15
1a008478:	687b      	ldr	r3, [r7, #4]
1a00847a:	3304      	adds	r3, #4
1a00847c:	edd3 6a00 	vldr	s13, [r3]
1a008480:	687b      	ldr	r3, [r7, #4]
1a008482:	3304      	adds	r3, #4
1a008484:	edd3 7a00 	vldr	s15, [r3]
1a008488:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a00848c:	ee37 7a27 	vadd.f32	s14, s14, s15
1a008490:	687b      	ldr	r3, [r7, #4]
1a008492:	3308      	adds	r3, #8
1a008494:	edd3 6a00 	vldr	s13, [r3]
1a008498:	687b      	ldr	r3, [r7, #4]
1a00849a:	3308      	adds	r3, #8
1a00849c:	edd3 7a00 	vldr	s15, [r3]
1a0084a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a0084a4:	ee37 7a27 	vadd.f32	s14, s14, s15
1a0084a8:	687b      	ldr	r3, [r7, #4]
1a0084aa:	330c      	adds	r3, #12
1a0084ac:	edd3 6a00 	vldr	s13, [r3]
1a0084b0:	687b      	ldr	r3, [r7, #4]
1a0084b2:	330c      	adds	r3, #12
1a0084b4:	edd3 7a00 	vldr	s15, [r3]
1a0084b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a0084bc:	ee77 7a27 	vadd.f32	s15, s14, s15
1a0084c0:	ee17 0a90 	vmov	r0, s15
1a0084c4:	f00d f980 	bl	1a0157c8 <sqrtf>
1a0084c8:	60f8      	str	r0, [r7, #12]
    if (mag) {
1a0084ca:	edd7 7a03 	vldr	s15, [r7, #12]
1a0084ce:	eef5 7a40 	vcmp.f32	s15, #0.0
1a0084d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0084d6:	d02e      	beq.n	1a008536 <inv_q_norm4+0xd6>
        q[0] /= mag;
1a0084d8:	687b      	ldr	r3, [r7, #4]
1a0084da:	edd3 6a00 	vldr	s13, [r3]
1a0084de:	ed97 7a03 	vldr	s14, [r7, #12]
1a0084e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
1a0084e6:	687b      	ldr	r3, [r7, #4]
1a0084e8:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= mag;
1a0084ec:	687b      	ldr	r3, [r7, #4]
1a0084ee:	3304      	adds	r3, #4
1a0084f0:	687a      	ldr	r2, [r7, #4]
1a0084f2:	3204      	adds	r2, #4
1a0084f4:	edd2 6a00 	vldr	s13, [r2]
1a0084f8:	ed97 7a03 	vldr	s14, [r7, #12]
1a0084fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
1a008500:	edc3 7a00 	vstr	s15, [r3]
        q[2] /= mag;
1a008504:	687b      	ldr	r3, [r7, #4]
1a008506:	3308      	adds	r3, #8
1a008508:	687a      	ldr	r2, [r7, #4]
1a00850a:	3208      	adds	r2, #8
1a00850c:	edd2 6a00 	vldr	s13, [r2]
1a008510:	ed97 7a03 	vldr	s14, [r7, #12]
1a008514:	eec6 7a87 	vdiv.f32	s15, s13, s14
1a008518:	edc3 7a00 	vstr	s15, [r3]
        q[3] /= mag;
1a00851c:	687b      	ldr	r3, [r7, #4]
1a00851e:	330c      	adds	r3, #12
1a008520:	687a      	ldr	r2, [r7, #4]
1a008522:	320c      	adds	r2, #12
1a008524:	edd2 6a00 	vldr	s13, [r2]
1a008528:	ed97 7a03 	vldr	s14, [r7, #12]
1a00852c:	eec6 7a87 	vdiv.f32	s15, s13, s14
1a008530:	edc3 7a00 	vstr	s15, [r3]
        q[0] = 1.f;
        q[1] = 0.f;
        q[2] = 0.f;
        q[3] = 0.f;
    }
}
1a008534:	e012      	b.n	1a00855c <inv_q_norm4+0xfc>
        q[0] /= mag;
        q[1] /= mag;
        q[2] /= mag;
        q[3] /= mag;
    } else {
        q[0] = 1.f;
1a008536:	687b      	ldr	r3, [r7, #4]
1a008538:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a00853c:	601a      	str	r2, [r3, #0]
        q[1] = 0.f;
1a00853e:	687b      	ldr	r3, [r7, #4]
1a008540:	3304      	adds	r3, #4
1a008542:	f04f 0200 	mov.w	r2, #0
1a008546:	601a      	str	r2, [r3, #0]
        q[2] = 0.f;
1a008548:	687b      	ldr	r3, [r7, #4]
1a00854a:	3308      	adds	r3, #8
1a00854c:	f04f 0200 	mov.w	r2, #0
1a008550:	601a      	str	r2, [r3, #0]
        q[3] = 0.f;
1a008552:	687b      	ldr	r3, [r7, #4]
1a008554:	330c      	adds	r3, #12
1a008556:	f04f 0200 	mov.w	r2, #0
1a00855a:	601a      	str	r2, [r3, #0]
    }
}
1a00855c:	bf00      	nop
1a00855e:	3710      	adds	r7, #16
1a008560:	46bd      	mov	sp, r7
1a008562:	bd80      	pop	{r7, pc}

1a008564 <inv_q_invertf>:

void inv_q_invertf(const float *q, float *qInverted)
{
1a008564:	b480      	push	{r7}
1a008566:	b083      	sub	sp, #12
1a008568:	af00      	add	r7, sp, #0
1a00856a:	6078      	str	r0, [r7, #4]
1a00856c:	6039      	str	r1, [r7, #0]
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1a00856e:	687b      	ldr	r3, [r7, #4]
1a008570:	681a      	ldr	r2, [r3, #0]
1a008572:	683b      	ldr	r3, [r7, #0]
1a008574:	601a      	str	r2, [r3, #0]
    qInverted[1] = -q[1];
1a008576:	683b      	ldr	r3, [r7, #0]
1a008578:	3304      	adds	r3, #4
1a00857a:	687a      	ldr	r2, [r7, #4]
1a00857c:	3204      	adds	r2, #4
1a00857e:	edd2 7a00 	vldr	s15, [r2]
1a008582:	eef1 7a67 	vneg.f32	s15, s15
1a008586:	edc3 7a00 	vstr	s15, [r3]
    qInverted[2] = -q[2];
1a00858a:	683b      	ldr	r3, [r7, #0]
1a00858c:	3308      	adds	r3, #8
1a00858e:	687a      	ldr	r2, [r7, #4]
1a008590:	3208      	adds	r2, #8
1a008592:	edd2 7a00 	vldr	s15, [r2]
1a008596:	eef1 7a67 	vneg.f32	s15, s15
1a00859a:	edc3 7a00 	vstr	s15, [r3]
    qInverted[3] = -q[3];
1a00859e:	683b      	ldr	r3, [r7, #0]
1a0085a0:	330c      	adds	r3, #12
1a0085a2:	687a      	ldr	r2, [r7, #4]
1a0085a4:	320c      	adds	r2, #12
1a0085a6:	edd2 7a00 	vldr	s15, [r2]
1a0085aa:	eef1 7a67 	vneg.f32	s15, s15
1a0085ae:	edc3 7a00 	vstr	s15, [r3]
}
1a0085b2:	bf00      	nop
1a0085b4:	370c      	adds	r7, #12
1a0085b6:	46bd      	mov	sp, r7
1a0085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0085bc:	4770      	bx	lr
1a0085be:	bf00      	nop

1a0085c0 <inv_quaternion_to_rotation>:
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
1a0085c0:	b5b0      	push	{r4, r5, r7, lr}
1a0085c2:	b082      	sub	sp, #8
1a0085c4:	af00      	add	r7, sp, #0
1a0085c6:	6078      	str	r0, [r7, #4]
1a0085c8:	6039      	str	r1, [r7, #0]
    rot[0] =
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
1a0085ca:	687b      	ldr	r3, [r7, #4]
1a0085cc:	3304      	adds	r3, #4
1a0085ce:	681a      	ldr	r2, [r3, #0]
1a0085d0:	687b      	ldr	r3, [r7, #4]
1a0085d2:	3304      	adds	r3, #4
1a0085d4:	681b      	ldr	r3, [r3, #0]
1a0085d6:	4619      	mov	r1, r3
1a0085d8:	4610      	mov	r0, r2
1a0085da:	f7ff fb81 	bl	1a007ce0 <inv_q29_mult>
1a0085de:	4604      	mov	r4, r0
1a0085e0:	687b      	ldr	r3, [r7, #4]
1a0085e2:	681a      	ldr	r2, [r3, #0]
1a0085e4:	687b      	ldr	r3, [r7, #4]
1a0085e6:	681b      	ldr	r3, [r3, #0]
1a0085e8:	4619      	mov	r1, r3
1a0085ea:	4610      	mov	r0, r2
1a0085ec:	f7ff fb78 	bl	1a007ce0 <inv_q29_mult>
1a0085f0:	4603      	mov	r3, r0
1a0085f2:	4423      	add	r3, r4
                quat[0]) -
1a0085f4:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
    rot[0] =
1a0085f8:	683b      	ldr	r3, [r7, #0]
1a0085fa:	601a      	str	r2, [r3, #0]
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[1] =
1a0085fc:	683b      	ldr	r3, [r7, #0]
1a0085fe:	1d1c      	adds	r4, r3, #4
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
1a008600:	687b      	ldr	r3, [r7, #4]
1a008602:	3304      	adds	r3, #4
1a008604:	681a      	ldr	r2, [r3, #0]
1a008606:	687b      	ldr	r3, [r7, #4]
1a008608:	3308      	adds	r3, #8
1a00860a:	681b      	ldr	r3, [r3, #0]
1a00860c:	4619      	mov	r1, r3
1a00860e:	4610      	mov	r0, r2
1a008610:	f7ff fb66 	bl	1a007ce0 <inv_q29_mult>
1a008614:	4605      	mov	r5, r0
1a008616:	687b      	ldr	r3, [r7, #4]
1a008618:	330c      	adds	r3, #12
1a00861a:	681a      	ldr	r2, [r3, #0]
1a00861c:	687b      	ldr	r3, [r7, #4]
1a00861e:	681b      	ldr	r3, [r3, #0]
1a008620:	4619      	mov	r1, r3
1a008622:	4610      	mov	r0, r2
1a008624:	f7ff fb5c 	bl	1a007ce0 <inv_q29_mult>
1a008628:	4603      	mov	r3, r0
1a00862a:	1aeb      	subs	r3, r5, r3
{
    rot[0] =
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[1] =
1a00862c:	6023      	str	r3, [r4, #0]
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
1a00862e:	683b      	ldr	r3, [r7, #0]
1a008630:	f103 0408 	add.w	r4, r3, #8
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
1a008634:	687b      	ldr	r3, [r7, #4]
1a008636:	3304      	adds	r3, #4
1a008638:	681a      	ldr	r2, [r3, #0]
1a00863a:	687b      	ldr	r3, [r7, #4]
1a00863c:	330c      	adds	r3, #12
1a00863e:	681b      	ldr	r3, [r3, #0]
1a008640:	4619      	mov	r1, r3
1a008642:	4610      	mov	r0, r2
1a008644:	f7ff fb4c 	bl	1a007ce0 <inv_q29_mult>
1a008648:	4605      	mov	r5, r0
1a00864a:	687b      	ldr	r3, [r7, #4]
1a00864c:	3308      	adds	r3, #8
1a00864e:	681a      	ldr	r2, [r3, #0]
1a008650:	687b      	ldr	r3, [r7, #4]
1a008652:	681b      	ldr	r3, [r3, #0]
1a008654:	4619      	mov	r1, r3
1a008656:	4610      	mov	r0, r2
1a008658:	f7ff fb42 	bl	1a007ce0 <inv_q29_mult>
1a00865c:	4603      	mov	r3, r0
1a00865e:	442b      	add	r3, r5
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[1] =
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
1a008660:	6023      	str	r3, [r4, #0]
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
1a008662:	683b      	ldr	r3, [r7, #0]
1a008664:	f103 040c 	add.w	r4, r3, #12
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
1a008668:	687b      	ldr	r3, [r7, #4]
1a00866a:	3304      	adds	r3, #4
1a00866c:	681a      	ldr	r2, [r3, #0]
1a00866e:	687b      	ldr	r3, [r7, #4]
1a008670:	3308      	adds	r3, #8
1a008672:	681b      	ldr	r3, [r3, #0]
1a008674:	4619      	mov	r1, r3
1a008676:	4610      	mov	r0, r2
1a008678:	f7ff fb32 	bl	1a007ce0 <inv_q29_mult>
1a00867c:	4605      	mov	r5, r0
1a00867e:	687b      	ldr	r3, [r7, #4]
1a008680:	330c      	adds	r3, #12
1a008682:	681a      	ldr	r2, [r3, #0]
1a008684:	687b      	ldr	r3, [r7, #4]
1a008686:	681b      	ldr	r3, [r3, #0]
1a008688:	4619      	mov	r1, r3
1a00868a:	4610      	mov	r0, r2
1a00868c:	f7ff fb28 	bl	1a007ce0 <inv_q29_mult>
1a008690:	4603      	mov	r3, r0
1a008692:	442b      	add	r3, r5
        1073741824L;
    rot[1] =
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
1a008694:	6023      	str	r3, [r4, #0]
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
    rot[4] =
1a008696:	683b      	ldr	r3, [r7, #0]
1a008698:	f103 0410 	add.w	r4, r3, #16
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
1a00869c:	687b      	ldr	r3, [r7, #4]
1a00869e:	3308      	adds	r3, #8
1a0086a0:	681a      	ldr	r2, [r3, #0]
1a0086a2:	687b      	ldr	r3, [r7, #4]
1a0086a4:	3308      	adds	r3, #8
1a0086a6:	681b      	ldr	r3, [r3, #0]
1a0086a8:	4619      	mov	r1, r3
1a0086aa:	4610      	mov	r0, r2
1a0086ac:	f7ff fb18 	bl	1a007ce0 <inv_q29_mult>
1a0086b0:	4605      	mov	r5, r0
1a0086b2:	687b      	ldr	r3, [r7, #4]
1a0086b4:	681a      	ldr	r2, [r3, #0]
1a0086b6:	687b      	ldr	r3, [r7, #4]
1a0086b8:	681b      	ldr	r3, [r3, #0]
1a0086ba:	4619      	mov	r1, r3
1a0086bc:	4610      	mov	r0, r2
1a0086be:	f7ff fb0f 	bl	1a007ce0 <inv_q29_mult>
1a0086c2:	4603      	mov	r3, r0
1a0086c4:	442b      	add	r3, r5
                quat[0]) -
1a0086c6:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
    rot[4] =
1a0086ca:	6023      	str	r3, [r4, #0]
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[5] =
1a0086cc:	683b      	ldr	r3, [r7, #0]
1a0086ce:	f103 0414 	add.w	r4, r3, #20
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
1a0086d2:	687b      	ldr	r3, [r7, #4]
1a0086d4:	3308      	adds	r3, #8
1a0086d6:	681a      	ldr	r2, [r3, #0]
1a0086d8:	687b      	ldr	r3, [r7, #4]
1a0086da:	330c      	adds	r3, #12
1a0086dc:	681b      	ldr	r3, [r3, #0]
1a0086de:	4619      	mov	r1, r3
1a0086e0:	4610      	mov	r0, r2
1a0086e2:	f7ff fafd 	bl	1a007ce0 <inv_q29_mult>
1a0086e6:	4605      	mov	r5, r0
1a0086e8:	687b      	ldr	r3, [r7, #4]
1a0086ea:	3304      	adds	r3, #4
1a0086ec:	681a      	ldr	r2, [r3, #0]
1a0086ee:	687b      	ldr	r3, [r7, #4]
1a0086f0:	681b      	ldr	r3, [r3, #0]
1a0086f2:	4619      	mov	r1, r3
1a0086f4:	4610      	mov	r0, r2
1a0086f6:	f7ff faf3 	bl	1a007ce0 <inv_q29_mult>
1a0086fa:	4603      	mov	r3, r0
1a0086fc:	1aeb      	subs	r3, r5, r3
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
    rot[4] =
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[5] =
1a0086fe:	6023      	str	r3, [r4, #0]
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
1a008700:	683b      	ldr	r3, [r7, #0]
1a008702:	f103 0418 	add.w	r4, r3, #24
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
1a008706:	687b      	ldr	r3, [r7, #4]
1a008708:	3304      	adds	r3, #4
1a00870a:	681a      	ldr	r2, [r3, #0]
1a00870c:	687b      	ldr	r3, [r7, #4]
1a00870e:	330c      	adds	r3, #12
1a008710:	681b      	ldr	r3, [r3, #0]
1a008712:	4619      	mov	r1, r3
1a008714:	4610      	mov	r0, r2
1a008716:	f7ff fae3 	bl	1a007ce0 <inv_q29_mult>
1a00871a:	4605      	mov	r5, r0
1a00871c:	687b      	ldr	r3, [r7, #4]
1a00871e:	3308      	adds	r3, #8
1a008720:	681a      	ldr	r2, [r3, #0]
1a008722:	687b      	ldr	r3, [r7, #4]
1a008724:	681b      	ldr	r3, [r3, #0]
1a008726:	4619      	mov	r1, r3
1a008728:	4610      	mov	r0, r2
1a00872a:	f7ff fad9 	bl	1a007ce0 <inv_q29_mult>
1a00872e:	4603      	mov	r3, r0
1a008730:	1aeb      	subs	r3, r5, r3
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[5] =
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
1a008732:	6023      	str	r3, [r4, #0]
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
    rot[7] =
1a008734:	683b      	ldr	r3, [r7, #0]
1a008736:	f103 041c 	add.w	r4, r3, #28
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
1a00873a:	687b      	ldr	r3, [r7, #4]
1a00873c:	3308      	adds	r3, #8
1a00873e:	681a      	ldr	r2, [r3, #0]
1a008740:	687b      	ldr	r3, [r7, #4]
1a008742:	330c      	adds	r3, #12
1a008744:	681b      	ldr	r3, [r3, #0]
1a008746:	4619      	mov	r1, r3
1a008748:	4610      	mov	r0, r2
1a00874a:	f7ff fac9 	bl	1a007ce0 <inv_q29_mult>
1a00874e:	4605      	mov	r5, r0
1a008750:	687b      	ldr	r3, [r7, #4]
1a008752:	3304      	adds	r3, #4
1a008754:	681a      	ldr	r2, [r3, #0]
1a008756:	687b      	ldr	r3, [r7, #4]
1a008758:	681b      	ldr	r3, [r3, #0]
1a00875a:	4619      	mov	r1, r3
1a00875c:	4610      	mov	r0, r2
1a00875e:	f7ff fabf 	bl	1a007ce0 <inv_q29_mult>
1a008762:	4603      	mov	r3, r0
1a008764:	442b      	add	r3, r5
        1073741824L;
    rot[5] =
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
    rot[7] =
1a008766:	6023      	str	r3, [r4, #0]
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
    rot[8] =
1a008768:	683b      	ldr	r3, [r7, #0]
1a00876a:	f103 0420 	add.w	r4, r3, #32
        inv_q29_mult(quat[3], quat[3]) + inv_q29_mult(quat[0],
1a00876e:	687b      	ldr	r3, [r7, #4]
1a008770:	330c      	adds	r3, #12
1a008772:	681a      	ldr	r2, [r3, #0]
1a008774:	687b      	ldr	r3, [r7, #4]
1a008776:	330c      	adds	r3, #12
1a008778:	681b      	ldr	r3, [r3, #0]
1a00877a:	4619      	mov	r1, r3
1a00877c:	4610      	mov	r0, r2
1a00877e:	f7ff faaf 	bl	1a007ce0 <inv_q29_mult>
1a008782:	4605      	mov	r5, r0
1a008784:	687b      	ldr	r3, [r7, #4]
1a008786:	681a      	ldr	r2, [r3, #0]
1a008788:	687b      	ldr	r3, [r7, #4]
1a00878a:	681b      	ldr	r3, [r3, #0]
1a00878c:	4619      	mov	r1, r3
1a00878e:	4610      	mov	r0, r2
1a008790:	f7ff faa6 	bl	1a007ce0 <inv_q29_mult>
1a008794:	4603      	mov	r3, r0
1a008796:	442b      	add	r3, r5
                quat[0]) -
1a008798:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
    rot[7] =
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
    rot[8] =
1a00879c:	6023      	str	r3, [r4, #0]
        inv_q29_mult(quat[3], quat[3]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
}
1a00879e:	bf00      	nop
1a0087a0:	3708      	adds	r7, #8
1a0087a2:	46bd      	mov	sp, r7
1a0087a4:	bdb0      	pop	{r4, r5, r7, pc}
1a0087a6:	bf00      	nop

1a0087a8 <inv_row_2_scale>:

    return hash;
}

static unsigned short inv_row_2_scale(const signed char *row)
{
1a0087a8:	b480      	push	{r7}
1a0087aa:	b085      	sub	sp, #20
1a0087ac:	af00      	add	r7, sp, #0
1a0087ae:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
1a0087b0:	687b      	ldr	r3, [r7, #4]
1a0087b2:	781b      	ldrb	r3, [r3, #0]
1a0087b4:	b25b      	sxtb	r3, r3
1a0087b6:	2b00      	cmp	r3, #0
1a0087b8:	dd02      	ble.n	1a0087c0 <inv_row_2_scale+0x18>
        b = 0;
1a0087ba:	2300      	movs	r3, #0
1a0087bc:	81fb      	strh	r3, [r7, #14]
1a0087be:	e02d      	b.n	1a00881c <inv_row_2_scale+0x74>
    else if (row[0] < 0)
1a0087c0:	687b      	ldr	r3, [r7, #4]
1a0087c2:	781b      	ldrb	r3, [r3, #0]
1a0087c4:	b25b      	sxtb	r3, r3
1a0087c6:	2b00      	cmp	r3, #0
1a0087c8:	da02      	bge.n	1a0087d0 <inv_row_2_scale+0x28>
        b = 4;
1a0087ca:	2304      	movs	r3, #4
1a0087cc:	81fb      	strh	r3, [r7, #14]
1a0087ce:	e025      	b.n	1a00881c <inv_row_2_scale+0x74>
    else if (row[1] > 0)
1a0087d0:	687b      	ldr	r3, [r7, #4]
1a0087d2:	3301      	adds	r3, #1
1a0087d4:	781b      	ldrb	r3, [r3, #0]
1a0087d6:	b25b      	sxtb	r3, r3
1a0087d8:	2b00      	cmp	r3, #0
1a0087da:	dd02      	ble.n	1a0087e2 <inv_row_2_scale+0x3a>
        b = 1;
1a0087dc:	2301      	movs	r3, #1
1a0087de:	81fb      	strh	r3, [r7, #14]
1a0087e0:	e01c      	b.n	1a00881c <inv_row_2_scale+0x74>
    else if (row[1] < 0)
1a0087e2:	687b      	ldr	r3, [r7, #4]
1a0087e4:	3301      	adds	r3, #1
1a0087e6:	781b      	ldrb	r3, [r3, #0]
1a0087e8:	b25b      	sxtb	r3, r3
1a0087ea:	2b00      	cmp	r3, #0
1a0087ec:	da02      	bge.n	1a0087f4 <inv_row_2_scale+0x4c>
        b = 5;
1a0087ee:	2305      	movs	r3, #5
1a0087f0:	81fb      	strh	r3, [r7, #14]
1a0087f2:	e013      	b.n	1a00881c <inv_row_2_scale+0x74>
    else if (row[2] > 0)
1a0087f4:	687b      	ldr	r3, [r7, #4]
1a0087f6:	3302      	adds	r3, #2
1a0087f8:	781b      	ldrb	r3, [r3, #0]
1a0087fa:	b25b      	sxtb	r3, r3
1a0087fc:	2b00      	cmp	r3, #0
1a0087fe:	dd02      	ble.n	1a008806 <inv_row_2_scale+0x5e>
        b = 2;
1a008800:	2302      	movs	r3, #2
1a008802:	81fb      	strh	r3, [r7, #14]
1a008804:	e00a      	b.n	1a00881c <inv_row_2_scale+0x74>
    else if (row[2] < 0)
1a008806:	687b      	ldr	r3, [r7, #4]
1a008808:	3302      	adds	r3, #2
1a00880a:	781b      	ldrb	r3, [r3, #0]
1a00880c:	b25b      	sxtb	r3, r3
1a00880e:	2b00      	cmp	r3, #0
1a008810:	da02      	bge.n	1a008818 <inv_row_2_scale+0x70>
        b = 6;
1a008812:	2306      	movs	r3, #6
1a008814:	81fb      	strh	r3, [r7, #14]
1a008816:	e001      	b.n	1a00881c <inv_row_2_scale+0x74>
    else
        b = 7;		// error
1a008818:	2307      	movs	r3, #7
1a00881a:	81fb      	strh	r3, [r7, #14]
    return b;
1a00881c:	89fb      	ldrh	r3, [r7, #14]
}
1a00881e:	4618      	mov	r0, r3
1a008820:	3714      	adds	r7, #20
1a008822:	46bd      	mov	sp, r7
1a008824:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008828:	4770      	bx	lr
1a00882a:	bf00      	nop

1a00882c <inv_orientation_matrix_to_scalar>:
* The next 2 bits (6 and 7) represent the column the one is on for the third row with
* bit number 8 being the sign. In binary the identity matrix would therefor be:
* 010_001_000 or 0x88 in hex.
*/
unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
1a00882c:	b580      	push	{r7, lr}
1a00882e:	b084      	sub	sp, #16
1a008830:	af00      	add	r7, sp, #0
1a008832:	6078      	str	r0, [r7, #4]
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
1a008834:	6878      	ldr	r0, [r7, #4]
1a008836:	f7ff ffb7 	bl	1a0087a8 <inv_row_2_scale>
1a00883a:	4603      	mov	r3, r0
1a00883c:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
1a00883e:	687b      	ldr	r3, [r7, #4]
1a008840:	3303      	adds	r3, #3
1a008842:	4618      	mov	r0, r3
1a008844:	f7ff ffb0 	bl	1a0087a8 <inv_row_2_scale>
1a008848:	4603      	mov	r3, r0
1a00884a:	00db      	lsls	r3, r3, #3
1a00884c:	b29a      	uxth	r2, r3
1a00884e:	89fb      	ldrh	r3, [r7, #14]
1a008850:	4313      	orrs	r3, r2
1a008852:	b29b      	uxth	r3, r3
1a008854:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
1a008856:	687b      	ldr	r3, [r7, #4]
1a008858:	3306      	adds	r3, #6
1a00885a:	4618      	mov	r0, r3
1a00885c:	f7ff ffa4 	bl	1a0087a8 <inv_row_2_scale>
1a008860:	4603      	mov	r3, r0
1a008862:	019b      	lsls	r3, r3, #6
1a008864:	b29a      	uxth	r2, r3
1a008866:	89fb      	ldrh	r3, [r7, #14]
1a008868:	4313      	orrs	r3, r2
1a00886a:	b29b      	uxth	r3, r3
1a00886c:	81fb      	strh	r3, [r7, #14]


    return scalar;
1a00886e:	89fb      	ldrh	r3, [r7, #14]
}
1a008870:	4618      	mov	r0, r3
1a008872:	3710      	adds	r7, #16
1a008874:	46bd      	mov	sp, r7
1a008876:	bd80      	pop	{r7, pc}

1a008878 <inv_convert_to_body_with_scale>:
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
1a008878:	b590      	push	{r4, r7, lr}
1a00887a:	b085      	sub	sp, #20
1a00887c:	af00      	add	r7, sp, #0
1a00887e:	60b9      	str	r1, [r7, #8]
1a008880:	607a      	str	r2, [r7, #4]
1a008882:	603b      	str	r3, [r7, #0]
1a008884:	4603      	mov	r3, r0
1a008886:	81fb      	strh	r3, [r7, #14]
    output[0] = inv_q30_mult(input[orientation & 0x03] *
1a008888:	89fb      	ldrh	r3, [r7, #14]
1a00888a:	f003 0303 	and.w	r3, r3, #3
1a00888e:	009b      	lsls	r3, r3, #2
1a008890:	687a      	ldr	r2, [r7, #4]
1a008892:	4413      	add	r3, r2
1a008894:	681b      	ldr	r3, [r3, #0]
                             SIGNSET(orientation & 0x004), sensitivity);
1a008896:	89fa      	ldrh	r2, [r7, #14]
1a008898:	f002 0204 	and.w	r2, r2, #4
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
    output[0] = inv_q30_mult(input[orientation & 0x03] *
1a00889c:	2a00      	cmp	r2, #0
1a00889e:	d002      	beq.n	1a0088a6 <inv_convert_to_body_with_scale+0x2e>
1a0088a0:	f04f 32ff 	mov.w	r2, #4294967295
1a0088a4:	e000      	b.n	1a0088a8 <inv_convert_to_body_with_scale+0x30>
1a0088a6:	2201      	movs	r2, #1
1a0088a8:	fb02 f303 	mul.w	r3, r2, r3
1a0088ac:	68b9      	ldr	r1, [r7, #8]
1a0088ae:	4618      	mov	r0, r3
1a0088b0:	f7ff fa3c 	bl	1a007d2c <inv_q30_mult>
1a0088b4:	4602      	mov	r2, r0
1a0088b6:	683b      	ldr	r3, [r7, #0]
1a0088b8:	601a      	str	r2, [r3, #0]
                             SIGNSET(orientation & 0x004), sensitivity);
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
1a0088ba:	683b      	ldr	r3, [r7, #0]
1a0088bc:	1d1c      	adds	r4, r3, #4
1a0088be:	89fb      	ldrh	r3, [r7, #14]
1a0088c0:	08db      	lsrs	r3, r3, #3
1a0088c2:	b29b      	uxth	r3, r3
1a0088c4:	f003 0303 	and.w	r3, r3, #3
1a0088c8:	009b      	lsls	r3, r3, #2
1a0088ca:	687a      	ldr	r2, [r7, #4]
1a0088cc:	4413      	add	r3, r2
1a0088ce:	681b      	ldr	r3, [r3, #0]
                             SIGNSET(orientation & 0x020), sensitivity);
1a0088d0:	89fa      	ldrh	r2, [r7, #14]
1a0088d2:	f002 0220 	and.w	r2, r2, #32
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
    output[0] = inv_q30_mult(input[orientation & 0x03] *
                             SIGNSET(orientation & 0x004), sensitivity);
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
1a0088d6:	2a00      	cmp	r2, #0
1a0088d8:	d002      	beq.n	1a0088e0 <inv_convert_to_body_with_scale+0x68>
1a0088da:	f04f 32ff 	mov.w	r2, #4294967295
1a0088de:	e000      	b.n	1a0088e2 <inv_convert_to_body_with_scale+0x6a>
1a0088e0:	2201      	movs	r2, #1
1a0088e2:	fb02 f303 	mul.w	r3, r2, r3
1a0088e6:	68b9      	ldr	r1, [r7, #8]
1a0088e8:	4618      	mov	r0, r3
1a0088ea:	f7ff fa1f 	bl	1a007d2c <inv_q30_mult>
1a0088ee:	4603      	mov	r3, r0
1a0088f0:	6023      	str	r3, [r4, #0]
                             SIGNSET(orientation & 0x020), sensitivity);
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
1a0088f2:	683b      	ldr	r3, [r7, #0]
1a0088f4:	f103 0408 	add.w	r4, r3, #8
1a0088f8:	89fb      	ldrh	r3, [r7, #14]
1a0088fa:	099b      	lsrs	r3, r3, #6
1a0088fc:	b29b      	uxth	r3, r3
1a0088fe:	f003 0303 	and.w	r3, r3, #3
1a008902:	009b      	lsls	r3, r3, #2
1a008904:	687a      	ldr	r2, [r7, #4]
1a008906:	4413      	add	r3, r2
1a008908:	681b      	ldr	r3, [r3, #0]
                             SIGNSET(orientation & 0x100), sensitivity);
1a00890a:	89fa      	ldrh	r2, [r7, #14]
1a00890c:	f402 7280 	and.w	r2, r2, #256	; 0x100
{
    output[0] = inv_q30_mult(input[orientation & 0x03] *
                             SIGNSET(orientation & 0x004), sensitivity);
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
                             SIGNSET(orientation & 0x020), sensitivity);
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
1a008910:	2a00      	cmp	r2, #0
1a008912:	d002      	beq.n	1a00891a <inv_convert_to_body_with_scale+0xa2>
1a008914:	f04f 32ff 	mov.w	r2, #4294967295
1a008918:	e000      	b.n	1a00891c <inv_convert_to_body_with_scale+0xa4>
1a00891a:	2201      	movs	r2, #1
1a00891c:	fb02 f303 	mul.w	r3, r2, r3
1a008920:	68b9      	ldr	r1, [r7, #8]
1a008922:	4618      	mov	r0, r3
1a008924:	f7ff fa02 	bl	1a007d2c <inv_q30_mult>
1a008928:	4603      	mov	r3, r0
1a00892a:	6023      	str	r3, [r4, #0]
                             SIGNSET(orientation & 0x100), sensitivity);
}
1a00892c:	bf00      	nop
1a00892e:	3714      	adds	r7, #20
1a008930:	46bd      	mov	sp, r7
1a008932:	bd90      	pop	{r4, r7, pc}

1a008934 <mlMatrixVectorMult>:
    cgcross[0] = (float)compass[1] * grav[2] - (float)compass[2] * grav[1];
    cgcross[1] = (float)compass[2] * grav[0] - (float)compass[0] * grav[2];
    cgcross[2] = (float)compass[0] * grav[1] - (float)compass[1] * grav[0];
}

void mlMatrixVectorMult(long matrix[9], const long vecIn[3], long *vecOut)  {
1a008934:	b580      	push	{r7, lr}
1a008936:	b088      	sub	sp, #32
1a008938:	af00      	add	r7, sp, #0
1a00893a:	60f8      	str	r0, [r7, #12]
1a00893c:	60b9      	str	r1, [r7, #8]
1a00893e:	607a      	str	r2, [r7, #4]

        // vector format:  [0  1  2]^T;
        int i, j;
        long temp;

        for (i=0; i<3; i++)	{
1a008940:	2300      	movs	r3, #0
1a008942:	61fb      	str	r3, [r7, #28]
1a008944:	e029      	b.n	1a00899a <mlMatrixVectorMult+0x66>
                temp = 0;
1a008946:	2300      	movs	r3, #0
1a008948:	617b      	str	r3, [r7, #20]
                for (j=0; j<3; j++)  {
1a00894a:	2300      	movs	r3, #0
1a00894c:	61bb      	str	r3, [r7, #24]
1a00894e:	e018      	b.n	1a008982 <mlMatrixVectorMult+0x4e>
                        temp += inv_q30_mult(matrix[i+j*3], vecIn[j]);
1a008950:	69ba      	ldr	r2, [r7, #24]
1a008952:	4613      	mov	r3, r2
1a008954:	005b      	lsls	r3, r3, #1
1a008956:	441a      	add	r2, r3
1a008958:	69fb      	ldr	r3, [r7, #28]
1a00895a:	4413      	add	r3, r2
1a00895c:	009b      	lsls	r3, r3, #2
1a00895e:	68fa      	ldr	r2, [r7, #12]
1a008960:	4413      	add	r3, r2
1a008962:	6818      	ldr	r0, [r3, #0]
1a008964:	69bb      	ldr	r3, [r7, #24]
1a008966:	009b      	lsls	r3, r3, #2
1a008968:	68ba      	ldr	r2, [r7, #8]
1a00896a:	4413      	add	r3, r2
1a00896c:	681b      	ldr	r3, [r3, #0]
1a00896e:	4619      	mov	r1, r3
1a008970:	f7ff f9dc 	bl	1a007d2c <inv_q30_mult>
1a008974:	4602      	mov	r2, r0
1a008976:	697b      	ldr	r3, [r7, #20]
1a008978:	4413      	add	r3, r2
1a00897a:	617b      	str	r3, [r7, #20]
        int i, j;
        long temp;

        for (i=0; i<3; i++)	{
                temp = 0;
                for (j=0; j<3; j++)  {
1a00897c:	69bb      	ldr	r3, [r7, #24]
1a00897e:	3301      	adds	r3, #1
1a008980:	61bb      	str	r3, [r7, #24]
1a008982:	69bb      	ldr	r3, [r7, #24]
1a008984:	2b02      	cmp	r3, #2
1a008986:	dde3      	ble.n	1a008950 <mlMatrixVectorMult+0x1c>
                        temp += inv_q30_mult(matrix[i+j*3], vecIn[j]);
                }
                vecOut[i] = temp;
1a008988:	69fb      	ldr	r3, [r7, #28]
1a00898a:	009b      	lsls	r3, r3, #2
1a00898c:	687a      	ldr	r2, [r7, #4]
1a00898e:	4413      	add	r3, r2
1a008990:	697a      	ldr	r2, [r7, #20]
1a008992:	601a      	str	r2, [r3, #0]

        // vector format:  [0  1  2]^T;
        int i, j;
        long temp;

        for (i=0; i<3; i++)	{
1a008994:	69fb      	ldr	r3, [r7, #28]
1a008996:	3301      	adds	r3, #1
1a008998:	61fb      	str	r3, [r7, #28]
1a00899a:	69fb      	ldr	r3, [r7, #28]
1a00899c:	2b02      	cmp	r3, #2
1a00899e:	ddd2      	ble.n	1a008946 <mlMatrixVectorMult+0x12>
                for (j=0; j<3; j++)  {
                        temp += inv_q30_mult(matrix[i+j*3], vecIn[j]);
                }
                vecOut[i] = temp;
        }
}
1a0089a0:	bf00      	nop
1a0089a2:	3720      	adds	r7, #32
1a0089a4:	46bd      	mov	sp, r7
1a0089a6:	bd80      	pop	{r7, pc}

1a0089a8 <__print_result_location>:
#endif

static inline void __print_result_location(int result,
					   const char *file,
					   const char *func, int line)
{
1a0089a8:	b580      	push	{r7, lr}
1a0089aa:	b088      	sub	sp, #32
1a0089ac:	af04      	add	r7, sp, #16
1a0089ae:	60f8      	str	r0, [r7, #12]
1a0089b0:	60b9      	str	r1, [r7, #8]
1a0089b2:	607a      	str	r2, [r7, #4]
1a0089b4:	603b      	str	r3, [r7, #0]
	MPL_LOGE("%s|%s|%d returning %d\n", file, func, line, result);
1a0089b6:	68fb      	ldr	r3, [r7, #12]
1a0089b8:	9302      	str	r3, [sp, #8]
1a0089ba:	683b      	ldr	r3, [r7, #0]
1a0089bc:	9301      	str	r3, [sp, #4]
1a0089be:	687b      	ldr	r3, [r7, #4]
1a0089c0:	9300      	str	r3, [sp, #0]
1a0089c2:	68bb      	ldr	r3, [r7, #8]
1a0089c4:	4a04      	ldr	r2, [pc, #16]	; (1a0089d8 <__print_result_location+0x30>)
1a0089c6:	2100      	movs	r1, #0
1a0089c8:	2006      	movs	r0, #6
1a0089ca:	f7fa f9e1 	bl	1a002d90 <_MLPrintLog>
}
1a0089ce:	bf00      	nop
1a0089d0:	3710      	adds	r7, #16
1a0089d2:	46bd      	mov	sp, r7
1a0089d4:	bd80      	pop	{r7, pc}
1a0089d6:	bf00      	nop
1a0089d8:	1a019c68 	.word	0x1a019c68

1a0089dc <inv_init_mpl>:
/**
 * @brief  Initializes the MPL. Should be called first and once 
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_init_mpl(void)
{
1a0089dc:	b580      	push	{r7, lr}
1a0089de:	af00      	add	r7, sp, #0
    inv_init_storage_manager();
1a0089e0:	f000 fb4c 	bl	1a00907c <inv_init_storage_manager>

    /* initialize the start callback manager */
    INV_ERROR_CHECK(inv_init_start_manager());
1a0089e4:	f000 faf8 	bl	1a008fd8 <inv_init_start_manager>
1a0089e8:	4603      	mov	r3, r0
1a0089ea:	2b00      	cmp	r3, #0
1a0089ec:	d00a      	beq.n	1a008a04 <inv_init_mpl+0x28>
1a0089ee:	f000 faf3 	bl	1a008fd8 <inv_init_start_manager>
1a0089f2:	2322      	movs	r3, #34	; 0x22
1a0089f4:	4a15      	ldr	r2, [pc, #84]	; (1a008a4c <inv_init_mpl+0x70>)
1a0089f6:	4916      	ldr	r1, [pc, #88]	; (1a008a50 <inv_init_mpl+0x74>)
1a0089f8:	f7ff ffd6 	bl	1a0089a8 <__print_result_location>
1a0089fc:	f000 faec 	bl	1a008fd8 <inv_init_start_manager>
1a008a00:	4603      	mov	r3, r0
1a008a02:	e020      	b.n	1a008a46 <inv_init_mpl+0x6a>

    /* initialize the data builder */
    INV_ERROR_CHECK(inv_init_data_builder());
1a008a04:	f7fe f908 	bl	1a006c18 <inv_init_data_builder>
1a008a08:	4603      	mov	r3, r0
1a008a0a:	2b00      	cmp	r3, #0
1a008a0c:	d00a      	beq.n	1a008a24 <inv_init_mpl+0x48>
1a008a0e:	f7fe f903 	bl	1a006c18 <inv_init_data_builder>
1a008a12:	2325      	movs	r3, #37	; 0x25
1a008a14:	4a0d      	ldr	r2, [pc, #52]	; (1a008a4c <inv_init_mpl+0x70>)
1a008a16:	490e      	ldr	r1, [pc, #56]	; (1a008a50 <inv_init_mpl+0x74>)
1a008a18:	f7ff ffc6 	bl	1a0089a8 <__print_result_location>
1a008a1c:	f7fe f8fc 	bl	1a006c18 <inv_init_data_builder>
1a008a20:	4603      	mov	r3, r0
1a008a22:	e010      	b.n	1a008a46 <inv_init_mpl+0x6a>

    INV_ERROR_CHECK(inv_enable_results_holder());
1a008a24:	f000 f9f2 	bl	1a008e0c <inv_enable_results_holder>
1a008a28:	4603      	mov	r3, r0
1a008a2a:	2b00      	cmp	r3, #0
1a008a2c:	d00a      	beq.n	1a008a44 <inv_init_mpl+0x68>
1a008a2e:	f000 f9ed 	bl	1a008e0c <inv_enable_results_holder>
1a008a32:	2327      	movs	r3, #39	; 0x27
1a008a34:	4a05      	ldr	r2, [pc, #20]	; (1a008a4c <inv_init_mpl+0x70>)
1a008a36:	4906      	ldr	r1, [pc, #24]	; (1a008a50 <inv_init_mpl+0x74>)
1a008a38:	f7ff ffb6 	bl	1a0089a8 <__print_result_location>
1a008a3c:	f000 f9e6 	bl	1a008e0c <inv_enable_results_holder>
1a008a40:	4603      	mov	r3, r0
1a008a42:	e000      	b.n	1a008a46 <inv_init_mpl+0x6a>

    return INV_SUCCESS;
1a008a44:	2300      	movs	r3, #0
}
1a008a46:	4618      	mov	r0, r3
1a008a48:	bd80      	pop	{r7, pc}
1a008a4a:	bf00      	nop
1a008a4c:	1a019ca0 	.word	0x1a019ca0
1a008a50:	1a019c80 	.word	0x1a019c80

1a008a54 <inv_start_mpl>:
 *  @brief  Starts the MPL. Typically called after inv_init_mpl() or after a
 *          inv_stop_mpl() to start the MPL back up an running.
 *  @return INV_SUCCESS if successful or a non-zero error code otherwise.
 */
inv_error_t inv_start_mpl(void)
{
1a008a54:	b580      	push	{r7, lr}
1a008a56:	af00      	add	r7, sp, #0
    INV_ERROR_CHECK(inv_execute_mpl_start_notification());
1a008a58:	f000 faea 	bl	1a009030 <inv_execute_mpl_start_notification>
1a008a5c:	4603      	mov	r3, r0
1a008a5e:	2b00      	cmp	r3, #0
1a008a60:	d00a      	beq.n	1a008a78 <inv_start_mpl+0x24>
1a008a62:	f000 fae5 	bl	1a009030 <inv_execute_mpl_start_notification>
1a008a66:	2342      	movs	r3, #66	; 0x42
1a008a68:	4a05      	ldr	r2, [pc, #20]	; (1a008a80 <inv_start_mpl+0x2c>)
1a008a6a:	4906      	ldr	r1, [pc, #24]	; (1a008a84 <inv_start_mpl+0x30>)
1a008a6c:	f7ff ff9c 	bl	1a0089a8 <__print_result_location>
1a008a70:	f000 fade 	bl	1a009030 <inv_execute_mpl_start_notification>
1a008a74:	4603      	mov	r3, r0
1a008a76:	e000      	b.n	1a008a7a <inv_start_mpl+0x26>
    return INV_SUCCESS;
1a008a78:	2300      	movs	r3, #0
}
1a008a7a:	4618      	mov	r0, r3
1a008a7c:	bd80      	pop	{r7, pc}
1a008a7e:	bf00      	nop
1a008a80:	1a019cb0 	.word	0x1a019cb0
1a008a84:	1a019c80 	.word	0x1a019c80

1a008a88 <inv_store_gaming_quaternion>:
* Store a quaternion more suitable for gaming. This quaternion is often determined
* using only gyro and accel.
* @param[in] quat Length 4, Quaternion scaled by 2^30
*/
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
1a008a88:	b580      	push	{r7, lr}
1a008a8a:	b082      	sub	sp, #8
1a008a8c:	af00      	add	r7, sp, #0
1a008a8e:	6078      	str	r0, [r7, #4]
1a008a90:	6039      	str	r1, [r7, #0]
    rh.status |= INV_6_AXIS_QUAT_SET;
1a008a92:	4b09      	ldr	r3, [pc, #36]	; (1a008ab8 <inv_store_gaming_quaternion+0x30>)
1a008a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1a008a96:	f043 0302 	orr.w	r3, r3, #2
1a008a9a:	4a07      	ldr	r2, [pc, #28]	; (1a008ab8 <inv_store_gaming_quaternion+0x30>)
1a008a9c:	67d3      	str	r3, [r2, #124]	; 0x7c
    memcpy(&rh.gam_quat, quat, sizeof(rh.gam_quat));
1a008a9e:	2210      	movs	r2, #16
1a008aa0:	6879      	ldr	r1, [r7, #4]
1a008aa2:	4806      	ldr	r0, [pc, #24]	; (1a008abc <inv_store_gaming_quaternion+0x34>)
1a008aa4:	f00c f81a 	bl	1a014adc <memcpy>
    rh.gam_timestamp = timestamp;
1a008aa8:	4a03      	ldr	r2, [pc, #12]	; (1a008ab8 <inv_store_gaming_quaternion+0x30>)
1a008aaa:	683b      	ldr	r3, [r7, #0]
1a008aac:	6253      	str	r3, [r2, #36]	; 0x24
}
1a008aae:	bf00      	nop
1a008ab0:	3708      	adds	r7, #8
1a008ab2:	46bd      	mov	sp, r7
1a008ab4:	bd80      	pop	{r7, pc}
1a008ab6:	bf00      	nop
1a008ab8:	10086938 	.word	0x10086938
1a008abc:	10086948 	.word	0x10086948

1a008ac0 <inv_set_compass_correction>:
* Sets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
1a008ac0:	b580      	push	{r7, lr}
1a008ac2:	b082      	sub	sp, #8
1a008ac4:	af00      	add	r7, sp, #0
1a008ac6:	6078      	str	r0, [r7, #4]
1a008ac8:	6039      	str	r1, [r7, #0]
    rh.status |= INV_COMPASS_CORRECTION_SET;
1a008aca:	4b09      	ldr	r3, [pc, #36]	; (1a008af0 <inv_set_compass_correction+0x30>)
1a008acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1a008ace:	f043 0301 	orr.w	r3, r3, #1
1a008ad2:	4a07      	ldr	r2, [pc, #28]	; (1a008af0 <inv_set_compass_correction+0x30>)
1a008ad4:	67d3      	str	r3, [r2, #124]	; 0x7c
    memcpy(rh.compass_correction, data, sizeof(rh.compass_correction));
1a008ad6:	2210      	movs	r2, #16
1a008ad8:	6879      	ldr	r1, [r7, #4]
1a008ada:	4806      	ldr	r0, [pc, #24]	; (1a008af4 <inv_set_compass_correction+0x34>)
1a008adc:	f00b fffe 	bl	1a014adc <memcpy>
    rh.nav_timestamp = timestamp;
1a008ae0:	4a03      	ldr	r2, [pc, #12]	; (1a008af0 <inv_set_compass_correction+0x30>)
1a008ae2:	683b      	ldr	r3, [r7, #0]
1a008ae4:	6213      	str	r3, [r2, #32]
}
1a008ae6:	bf00      	nop
1a008ae8:	3708      	adds	r7, #8
1a008aea:	46bd      	mov	sp, r7
1a008aec:	bd80      	pop	{r7, pc}
1a008aee:	bf00      	nop
1a008af0:	10086938 	.word	0x10086938
1a008af4:	10086978 	.word	0x10086978

1a008af8 <inv_get_compass_correction>:
* Gets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[out] data Quaternion Adjustment
* @param[out] timestamp Timestamp of when this is valid
*/
void inv_get_compass_correction(long *data, inv_time_t *timestamp)
{
1a008af8:	b580      	push	{r7, lr}
1a008afa:	b082      	sub	sp, #8
1a008afc:	af00      	add	r7, sp, #0
1a008afe:	6078      	str	r0, [r7, #4]
1a008b00:	6039      	str	r1, [r7, #0]
    memcpy(data, rh.compass_correction, sizeof(rh.compass_correction));
1a008b02:	2210      	movs	r2, #16
1a008b04:	4905      	ldr	r1, [pc, #20]	; (1a008b1c <inv_get_compass_correction+0x24>)
1a008b06:	6878      	ldr	r0, [r7, #4]
1a008b08:	f00b ffe8 	bl	1a014adc <memcpy>
    *timestamp = rh.nav_timestamp;
1a008b0c:	4b04      	ldr	r3, [pc, #16]	; (1a008b20 <inv_get_compass_correction+0x28>)
1a008b0e:	6a1a      	ldr	r2, [r3, #32]
1a008b10:	683b      	ldr	r3, [r7, #0]
1a008b12:	601a      	str	r2, [r3, #0]
}
1a008b14:	bf00      	nop
1a008b16:	3708      	adds	r7, #8
1a008b18:	46bd      	mov	sp, r7
1a008b1a:	bd80      	pop	{r7, pc}
1a008b1c:	10086978 	.word	0x10086978
1a008b20:	10086938 	.word	0x10086938

1a008b24 <inv_get_large_mag_field>:

/** Returns non-zero if there is a large magnetic field. See inv_set_large_mag_field() for setting this variable.
 * @return Returns non-zero if there is a large magnetic field.
 */
int inv_get_large_mag_field()
{
1a008b24:	b480      	push	{r7}
1a008b26:	af00      	add	r7, sp, #0
    return rh.large_mag_field;
1a008b28:	4b03      	ldr	r3, [pc, #12]	; (1a008b38 <inv_get_large_mag_field+0x14>)
1a008b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
1a008b2c:	4618      	mov	r0, r3
1a008b2e:	46bd      	mov	sp, r7
1a008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008b34:	4770      	bx	lr
1a008b36:	bf00      	nop
1a008b38:	10086938 	.word	0x10086938

1a008b3c <inv_get_acc_state>:

/** Gets the accel state set by inv_set_acc_state()
 * @return accel state.
 */
int inv_get_acc_state()
{
1a008b3c:	b480      	push	{r7}
1a008b3e:	af00      	add	r7, sp, #0
    return rh.acc_state;
1a008b40:	4b03      	ldr	r3, [pc, #12]	; (1a008b50 <inv_get_acc_state+0x14>)
1a008b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
1a008b44:	4618      	mov	r0, r3
1a008b46:	46bd      	mov	sp, r7
1a008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008b4c:	4770      	bx	lr
1a008b4e:	bf00      	nop
1a008b50:	10086938 	.word	0x10086938

1a008b54 <inv_get_motion_state>:
/** Returns the motion state
* @param[out] cntr Number of previous times a no motion event has occured in a row.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
int inv_get_motion_state(unsigned int *cntr)
{
1a008b54:	b480      	push	{r7}
1a008b56:	b083      	sub	sp, #12
1a008b58:	af00      	add	r7, sp, #0
1a008b5a:	6078      	str	r0, [r7, #4]
    *cntr = rh.motion_state_counter;
1a008b5c:	4b06      	ldr	r3, [pc, #24]	; (1a008b78 <inv_get_motion_state+0x24>)
1a008b5e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
1a008b60:	687b      	ldr	r3, [r7, #4]
1a008b62:	601a      	str	r2, [r3, #0]
    return rh.motion_state;
1a008b64:	4b04      	ldr	r3, [pc, #16]	; (1a008b78 <inv_get_motion_state+0x24>)
1a008b66:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
}
1a008b6a:	4618      	mov	r0, r3
1a008b6c:	370c      	adds	r7, #12
1a008b6e:	46bd      	mov	sp, r7
1a008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008b74:	4770      	bx	lr
1a008b76:	bf00      	nop
1a008b78:	10086938 	.word	0x10086938

1a008b7c <inv_set_motion_state>:
/** Sets the motion state
 * @param[in] state motion state where INV_NO_MOTION is not moving
 *            and INV_MOTION is moving.
 */
void inv_set_motion_state(unsigned char state)
{
1a008b7c:	b580      	push	{r7, lr}
1a008b7e:	b084      	sub	sp, #16
1a008b80:	af00      	add	r7, sp, #0
1a008b82:	4603      	mov	r3, r0
1a008b84:	71fb      	strb	r3, [r7, #7]
    long set;
    if (state == rh.motion_state) {
1a008b86:	4b15      	ldr	r3, [pc, #84]	; (1a008bdc <inv_set_motion_state+0x60>)
1a008b88:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
1a008b8c:	79fa      	ldrb	r2, [r7, #7]
1a008b8e:	429a      	cmp	r2, r3
1a008b90:	d10c      	bne.n	1a008bac <inv_set_motion_state+0x30>
        if (state == INV_NO_MOTION) {
1a008b92:	79fb      	ldrb	r3, [r7, #7]
1a008b94:	2b02      	cmp	r3, #2
1a008b96:	d105      	bne.n	1a008ba4 <inv_set_motion_state+0x28>
            rh.motion_state_counter++;
1a008b98:	4b10      	ldr	r3, [pc, #64]	; (1a008bdc <inv_set_motion_state+0x60>)
1a008b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
1a008b9c:	3301      	adds	r3, #1
1a008b9e:	4a0f      	ldr	r2, [pc, #60]	; (1a008bdc <inv_set_motion_state+0x60>)
1a008ba0:	6693      	str	r3, [r2, #104]	; 0x68
        } else {
            rh.motion_state_counter = 0;
        }
        return;
1a008ba2:	e017      	b.n	1a008bd4 <inv_set_motion_state+0x58>
    long set;
    if (state == rh.motion_state) {
        if (state == INV_NO_MOTION) {
            rh.motion_state_counter++;
        } else {
            rh.motion_state_counter = 0;
1a008ba4:	4b0d      	ldr	r3, [pc, #52]	; (1a008bdc <inv_set_motion_state+0x60>)
1a008ba6:	2200      	movs	r2, #0
1a008ba8:	669a      	str	r2, [r3, #104]	; 0x68
        }
        return;
1a008baa:	e013      	b.n	1a008bd4 <inv_set_motion_state+0x58>
    }
    rh.motion_state_counter = 0;
1a008bac:	4b0b      	ldr	r3, [pc, #44]	; (1a008bdc <inv_set_motion_state+0x60>)
1a008bae:	2200      	movs	r2, #0
1a008bb0:	669a      	str	r2, [r3, #104]	; 0x68
    rh.motion_state = state;
1a008bb2:	4a0a      	ldr	r2, [pc, #40]	; (1a008bdc <inv_set_motion_state+0x60>)
1a008bb4:	79fb      	ldrb	r3, [r7, #7]
1a008bb6:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
    /* Equivalent to set = state, but #define's may change. */
    if (state == INV_MOTION)
1a008bba:	79fb      	ldrb	r3, [r7, #7]
1a008bbc:	2b01      	cmp	r3, #1
1a008bbe:	d102      	bne.n	1a008bc6 <inv_set_motion_state+0x4a>
        set = INV_MSG_MOTION_EVENT;
1a008bc0:	2301      	movs	r3, #1
1a008bc2:	60fb      	str	r3, [r7, #12]
1a008bc4:	e001      	b.n	1a008bca <inv_set_motion_state+0x4e>
    else
        set = INV_MSG_NO_MOTION_EVENT;
1a008bc6:	2302      	movs	r3, #2
1a008bc8:	60fb      	str	r3, [r7, #12]
    inv_set_message(set, (INV_MSG_MOTION_EVENT | INV_MSG_NO_MOTION_EVENT), 0);
1a008bca:	2200      	movs	r2, #0
1a008bcc:	2103      	movs	r1, #3
1a008bce:	68f8      	ldr	r0, [r7, #12]
1a008bd0:	f7fe ffa2 	bl	1a007b18 <inv_set_message>
}
1a008bd4:	3710      	adds	r7, #16
1a008bd6:	46bd      	mov	sp, r7
1a008bd8:	bd80      	pop	{r7, pc}
1a008bda:	bf00      	nop
1a008bdc:	10086938 	.word	0x10086938

1a008be0 <inv_get_local_field>:
* @param[out] data Local earth's magnetic field in uT scaled by 2^16.
*            Length = 3. Y typically points north, Z typically points down in
*                        northern hemisphere and up in southern hemisphere.
*/
void inv_get_local_field(long *data)
{
1a008be0:	b580      	push	{r7, lr}
1a008be2:	b082      	sub	sp, #8
1a008be4:	af00      	add	r7, sp, #0
1a008be6:	6078      	str	r0, [r7, #4]
    memcpy(data, rh.local_field, sizeof(rh.local_field));
1a008be8:	220c      	movs	r2, #12
1a008bea:	4904      	ldr	r1, [pc, #16]	; (1a008bfc <inv_get_local_field+0x1c>)
1a008bec:	6878      	ldr	r0, [r7, #4]
1a008bee:	f00b ff75 	bl	1a014adc <memcpy>
}
1a008bf2:	bf00      	nop
1a008bf4:	3708      	adds	r7, #8
1a008bf6:	46bd      	mov	sp, r7
1a008bf8:	bd80      	pop	{r7, pc}
1a008bfa:	bf00      	nop
1a008bfc:	10086960 	.word	0x10086960

1a008c00 <inv_get_gravity>:
/** Gets gravity vector
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
1a008c00:	b5b0      	push	{r4, r5, r7, lr}
1a008c02:	b082      	sub	sp, #8
1a008c04:	af00      	add	r7, sp, #0
1a008c06:	6078      	str	r0, [r7, #4]
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
1a008c08:	4b24      	ldr	r3, [pc, #144]	; (1a008c9c <inv_get_gravity+0x9c>)
1a008c0a:	685a      	ldr	r2, [r3, #4]
1a008c0c:	4b23      	ldr	r3, [pc, #140]	; (1a008c9c <inv_get_gravity+0x9c>)
1a008c0e:	68db      	ldr	r3, [r3, #12]
1a008c10:	4619      	mov	r1, r3
1a008c12:	4610      	mov	r0, r2
1a008c14:	f7ff f864 	bl	1a007ce0 <inv_q29_mult>
1a008c18:	4604      	mov	r4, r0
1a008c1a:	4b20      	ldr	r3, [pc, #128]	; (1a008c9c <inv_get_gravity+0x9c>)
1a008c1c:	689a      	ldr	r2, [r3, #8]
1a008c1e:	4b1f      	ldr	r3, [pc, #124]	; (1a008c9c <inv_get_gravity+0x9c>)
1a008c20:	681b      	ldr	r3, [r3, #0]
1a008c22:	4619      	mov	r1, r3
1a008c24:	4610      	mov	r0, r2
1a008c26:	f7ff f85b 	bl	1a007ce0 <inv_q29_mult>
1a008c2a:	4603      	mov	r3, r0
1a008c2c:	1ae2      	subs	r2, r4, r3
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
    data[0] =
1a008c2e:	687b      	ldr	r3, [r7, #4]
1a008c30:	601a      	str	r2, [r3, #0]
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
1a008c32:	687b      	ldr	r3, [r7, #4]
1a008c34:	1d1c      	adds	r4, r3, #4
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
1a008c36:	4b19      	ldr	r3, [pc, #100]	; (1a008c9c <inv_get_gravity+0x9c>)
1a008c38:	689a      	ldr	r2, [r3, #8]
1a008c3a:	4b18      	ldr	r3, [pc, #96]	; (1a008c9c <inv_get_gravity+0x9c>)
1a008c3c:	68db      	ldr	r3, [r3, #12]
1a008c3e:	4619      	mov	r1, r3
1a008c40:	4610      	mov	r0, r2
1a008c42:	f7ff f84d 	bl	1a007ce0 <inv_q29_mult>
1a008c46:	4605      	mov	r5, r0
1a008c48:	4b14      	ldr	r3, [pc, #80]	; (1a008c9c <inv_get_gravity+0x9c>)
1a008c4a:	685a      	ldr	r2, [r3, #4]
1a008c4c:	4b13      	ldr	r3, [pc, #76]	; (1a008c9c <inv_get_gravity+0x9c>)
1a008c4e:	681b      	ldr	r3, [r3, #0]
1a008c50:	4619      	mov	r1, r3
1a008c52:	4610      	mov	r0, r2
1a008c54:	f7ff f844 	bl	1a007ce0 <inv_q29_mult>
1a008c58:	4603      	mov	r3, r0
1a008c5a:	442b      	add	r3, r5
 */
inv_error_t inv_get_gravity(long *data)
{
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
1a008c5c:	6023      	str	r3, [r4, #0]
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
    data[2] =
1a008c5e:	687b      	ldr	r3, [r7, #4]
1a008c60:	f103 0408 	add.w	r4, r3, #8
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
1a008c64:	4b0d      	ldr	r3, [pc, #52]	; (1a008c9c <inv_get_gravity+0x9c>)
1a008c66:	68da      	ldr	r2, [r3, #12]
1a008c68:	4b0c      	ldr	r3, [pc, #48]	; (1a008c9c <inv_get_gravity+0x9c>)
1a008c6a:	68db      	ldr	r3, [r3, #12]
1a008c6c:	4619      	mov	r1, r3
1a008c6e:	4610      	mov	r0, r2
1a008c70:	f7ff f836 	bl	1a007ce0 <inv_q29_mult>
1a008c74:	4605      	mov	r5, r0
1a008c76:	4b09      	ldr	r3, [pc, #36]	; (1a008c9c <inv_get_gravity+0x9c>)
1a008c78:	681a      	ldr	r2, [r3, #0]
1a008c7a:	4b08      	ldr	r3, [pc, #32]	; (1a008c9c <inv_get_gravity+0x9c>)
1a008c7c:	681b      	ldr	r3, [r3, #0]
1a008c7e:	4619      	mov	r1, r3
1a008c80:	4610      	mov	r0, r2
1a008c82:	f7ff f82d 	bl	1a007ce0 <inv_q29_mult>
1a008c86:	4603      	mov	r3, r0
1a008c88:	442b      	add	r3, r5
1a008c8a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
{
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
    data[2] =
1a008c8e:	6023      	str	r3, [r4, #0]
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
        1073741824L;

    return INV_SUCCESS;
1a008c90:	2300      	movs	r3, #0
}
1a008c92:	4618      	mov	r0, r3
1a008c94:	3708      	adds	r7, #8
1a008c96:	46bd      	mov	sp, r7
1a008c98:	bdb0      	pop	{r4, r5, r7, pc}
1a008c9a:	bf00      	nop
1a008c9c:	10086938 	.word	0x10086938

1a008ca0 <inv_get_6axis_quaternion>:
/** Returns a quaternion based only on gyro and accel.
 * @param[out] data 6-axis  gyro and accel quaternion scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_6axis_quaternion(long *data)
{
1a008ca0:	b580      	push	{r7, lr}
1a008ca2:	b082      	sub	sp, #8
1a008ca4:	af00      	add	r7, sp, #0
1a008ca6:	6078      	str	r0, [r7, #4]
    memcpy(data, rh.gam_quat, sizeof(rh.gam_quat));
1a008ca8:	2210      	movs	r2, #16
1a008caa:	4904      	ldr	r1, [pc, #16]	; (1a008cbc <inv_get_6axis_quaternion+0x1c>)
1a008cac:	6878      	ldr	r0, [r7, #4]
1a008cae:	f00b ff15 	bl	1a014adc <memcpy>
    return INV_SUCCESS;
1a008cb2:	2300      	movs	r3, #0
}
1a008cb4:	4618      	mov	r0, r3
1a008cb6:	3708      	adds	r7, #8
1a008cb8:	46bd      	mov	sp, r7
1a008cba:	bd80      	pop	{r7, pc}
1a008cbc:	10086948 	.word	0x10086948

1a008cc0 <inv_get_quaternion>:
/** Returns a quaternion.
 * @param[out] data 9-axis quaternion scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_quaternion(long *data)
{
1a008cc0:	b580      	push	{r7, lr}
1a008cc2:	b082      	sub	sp, #8
1a008cc4:	af00      	add	r7, sp, #0
1a008cc6:	6078      	str	r0, [r7, #4]
    if (rh.status & (INV_COMPASS_CORRECTION_SET | INV_6_AXIS_QUAT_SET)) {
1a008cc8:	4b0d      	ldr	r3, [pc, #52]	; (1a008d00 <inv_get_quaternion+0x40>)
1a008cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1a008ccc:	f003 0303 	and.w	r3, r3, #3
1a008cd0:	2b00      	cmp	r3, #0
1a008cd2:	d00a      	beq.n	1a008cea <inv_get_quaternion+0x2a>
        inv_q_mult(rh.compass_correction, rh.gam_quat, rh.nav_quat);
1a008cd4:	4a0a      	ldr	r2, [pc, #40]	; (1a008d00 <inv_get_quaternion+0x40>)
1a008cd6:	490b      	ldr	r1, [pc, #44]	; (1a008d04 <inv_get_quaternion+0x44>)
1a008cd8:	480b      	ldr	r0, [pc, #44]	; (1a008d08 <inv_get_quaternion+0x48>)
1a008cda:	f7ff f84d 	bl	1a007d78 <inv_q_mult>
        rh.status &= ~(INV_COMPASS_CORRECTION_SET | INV_6_AXIS_QUAT_SET);
1a008cde:	4b08      	ldr	r3, [pc, #32]	; (1a008d00 <inv_get_quaternion+0x40>)
1a008ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1a008ce2:	f023 0303 	bic.w	r3, r3, #3
1a008ce6:	4a06      	ldr	r2, [pc, #24]	; (1a008d00 <inv_get_quaternion+0x40>)
1a008ce8:	67d3      	str	r3, [r2, #124]	; 0x7c
    }
    memcpy(data, rh.nav_quat, sizeof(rh.nav_quat));
1a008cea:	2210      	movs	r2, #16
1a008cec:	4904      	ldr	r1, [pc, #16]	; (1a008d00 <inv_get_quaternion+0x40>)
1a008cee:	6878      	ldr	r0, [r7, #4]
1a008cf0:	f00b fef4 	bl	1a014adc <memcpy>
    return INV_SUCCESS;
1a008cf4:	2300      	movs	r3, #0
}
1a008cf6:	4618      	mov	r0, r3
1a008cf8:	3708      	adds	r7, #8
1a008cfa:	46bd      	mov	sp, r7
1a008cfc:	bd80      	pop	{r7, pc}
1a008cfe:	bf00      	nop
1a008d00:	10086938 	.word	0x10086938
1a008d04:	10086948 	.word	0x10086948
1a008d08:	10086978 	.word	0x10086978

1a008d0c <inv_get_quaternion_set>:
 * @param[out] data 9-axis quaternion scaled such that 1.0 = 2^30.
 * @param[out] accuracy Accuracy of quaternion, 0-3, where 3 is most accurate.
 * @param[out] timestamp Timestamp of this quaternion in nanoseconds
 */
void inv_get_quaternion_set(long *data, int *accuracy, inv_time_t *timestamp)
{
1a008d0c:	b580      	push	{r7, lr}
1a008d0e:	b084      	sub	sp, #16
1a008d10:	af00      	add	r7, sp, #0
1a008d12:	60f8      	str	r0, [r7, #12]
1a008d14:	60b9      	str	r1, [r7, #8]
1a008d16:	607a      	str	r2, [r7, #4]
    inv_get_quaternion(data);
1a008d18:	68f8      	ldr	r0, [r7, #12]
1a008d1a:	f7ff ffd1 	bl	1a008cc0 <inv_get_quaternion>
    *timestamp = inv_get_last_timestamp();
1a008d1e:	f7fe f86f 	bl	1a006e00 <inv_get_last_timestamp>
1a008d22:	4602      	mov	r2, r0
1a008d24:	687b      	ldr	r3, [r7, #4]
1a008d26:	601a      	str	r2, [r3, #0]
    if (inv_get_compass_on()) {
1a008d28:	f7fe f832 	bl	1a006d90 <inv_get_compass_on>
1a008d2c:	4603      	mov	r3, r0
1a008d2e:	2b00      	cmp	r3, #0
1a008d30:	d005      	beq.n	1a008d3e <inv_get_quaternion_set+0x32>
        *accuracy = inv_get_mag_accuracy();
1a008d32:	f7fe fdcf 	bl	1a0078d4 <inv_get_mag_accuracy>
1a008d36:	4602      	mov	r2, r0
1a008d38:	68bb      	ldr	r3, [r7, #8]
1a008d3a:	601a      	str	r2, [r3, #0]
    }else if (inv_get_accel_on()) {
        *accuracy = inv_get_accel_accuracy();
    } else {
        *accuracy = 0;
    }
}
1a008d3c:	e018      	b.n	1a008d70 <inv_get_quaternion_set+0x64>
{
    inv_get_quaternion(data);
    *timestamp = inv_get_last_timestamp();
    if (inv_get_compass_on()) {
        *accuracy = inv_get_mag_accuracy();
    } else if (inv_get_gyro_on()) {
1a008d3e:	f7fe f83b 	bl	1a006db8 <inv_get_gyro_on>
1a008d42:	4603      	mov	r3, r0
1a008d44:	2b00      	cmp	r3, #0
1a008d46:	d005      	beq.n	1a008d54 <inv_get_quaternion_set+0x48>
        *accuracy = inv_get_gyro_accuracy();
1a008d48:	f7fe fdb8 	bl	1a0078bc <inv_get_gyro_accuracy>
1a008d4c:	4602      	mov	r2, r0
1a008d4e:	68bb      	ldr	r3, [r7, #8]
1a008d50:	601a      	str	r2, [r3, #0]
    }else if (inv_get_accel_on()) {
        *accuracy = inv_get_accel_accuracy();
    } else {
        *accuracy = 0;
    }
}
1a008d52:	e00d      	b.n	1a008d70 <inv_get_quaternion_set+0x64>
    *timestamp = inv_get_last_timestamp();
    if (inv_get_compass_on()) {
        *accuracy = inv_get_mag_accuracy();
    } else if (inv_get_gyro_on()) {
        *accuracy = inv_get_gyro_accuracy();
    }else if (inv_get_accel_on()) {
1a008d54:	f7fe f842 	bl	1a006ddc <inv_get_accel_on>
1a008d58:	4603      	mov	r3, r0
1a008d5a:	2b00      	cmp	r3, #0
1a008d5c:	d005      	beq.n	1a008d6a <inv_get_quaternion_set+0x5e>
        *accuracy = inv_get_accel_accuracy();
1a008d5e:	f7fe fdcf 	bl	1a007900 <inv_get_accel_accuracy>
1a008d62:	4602      	mov	r2, r0
1a008d64:	68bb      	ldr	r3, [r7, #8]
1a008d66:	601a      	str	r2, [r3, #0]
    } else {
        *accuracy = 0;
    }
}
1a008d68:	e002      	b.n	1a008d70 <inv_get_quaternion_set+0x64>
    } else if (inv_get_gyro_on()) {
        *accuracy = inv_get_gyro_accuracy();
    }else if (inv_get_accel_on()) {
        *accuracy = inv_get_accel_accuracy();
    } else {
        *accuracy = 0;
1a008d6a:	68bb      	ldr	r3, [r7, #8]
1a008d6c:	2200      	movs	r2, #0
1a008d6e:	601a      	str	r2, [r3, #0]
    }
}
1a008d70:	bf00      	nop
1a008d72:	3710      	adds	r7, #16
1a008d74:	46bd      	mov	sp, r7
1a008d76:	bd80      	pop	{r7, pc}

1a008d78 <inv_generate_results>:
 * registered by inv_start_results_holder().
 * @param[in] sensor_cal New sensor data to process.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_generate_results(struct inv_sensor_cal_t *sensor_cal)
{
1a008d78:	b480      	push	{r7}
1a008d7a:	b083      	sub	sp, #12
1a008d7c:	af00      	add	r7, sp, #0
1a008d7e:	6078      	str	r0, [r7, #4]
    rh.sensor = sensor_cal;
1a008d80:	4a05      	ldr	r2, [pc, #20]	; (1a008d98 <inv_generate_results+0x20>)
1a008d82:	687b      	ldr	r3, [r7, #4]
1a008d84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    return INV_SUCCESS;
1a008d88:	2300      	movs	r3, #0
}
1a008d8a:	4618      	mov	r0, r3
1a008d8c:	370c      	adds	r7, #12
1a008d8e:	46bd      	mov	sp, r7
1a008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008d94:	4770      	bx	lr
1a008d96:	bf00      	nop
1a008d98:	10086938 	.word	0x10086938

1a008d9c <inv_start_results_holder>:
/** Function to turn on this module. This is automatically called by
 *  inv_enable_results_holder(). Typically not called by users.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_start_results_holder(void)
{
1a008d9c:	b580      	push	{r7, lr}
1a008d9e:	af00      	add	r7, sp, #0
    inv_register_data_cb(inv_generate_results, INV_PRIORITY_RESULTS_HOLDER,
1a008da0:	2207      	movs	r2, #7
1a008da2:	f44f 7148 	mov.w	r1, #800	; 0x320
1a008da6:	4803      	ldr	r0, [pc, #12]	; (1a008db4 <inv_start_results_holder+0x18>)
1a008da8:	f7fe fb4e 	bl	1a007448 <inv_register_data_cb>
        INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
    return INV_SUCCESS;
1a008dac:	2300      	movs	r3, #0
}
1a008dae:	4618      	mov	r0, r3
1a008db0:	bd80      	pop	{r7, pc}
1a008db2:	bf00      	nop
1a008db4:	1a008d79 	.word	0x1a008d79

1a008db8 <inv_init_results_holder>:
* enable function inv_enable_results_holder(). It may be called any time the feature is enabled, but
* is typically not needed to be called by outside callers.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_results_holder(void)
{
1a008db8:	b580      	push	{r7, lr}
1a008dba:	af00      	add	r7, sp, #0
    memset(&rh, 0, sizeof(rh));
1a008dbc:	2288      	movs	r2, #136	; 0x88
1a008dbe:	2100      	movs	r1, #0
1a008dc0:	4810      	ldr	r0, [pc, #64]	; (1a008e04 <inv_init_results_holder+0x4c>)
1a008dc2:	f00b ff89 	bl	1a014cd8 <memset>
    rh.mag_scale[0] = 1L<<30;
1a008dc6:	4b0f      	ldr	r3, [pc, #60]	; (1a008e04 <inv_init_results_holder+0x4c>)
1a008dc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a008dcc:	635a      	str	r2, [r3, #52]	; 0x34
    rh.mag_scale[1] = 1L<<30;
1a008dce:	4b0d      	ldr	r3, [pc, #52]	; (1a008e04 <inv_init_results_holder+0x4c>)
1a008dd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a008dd4:	639a      	str	r2, [r3, #56]	; 0x38
    rh.mag_scale[2] = 1L<<30;
1a008dd6:	4b0b      	ldr	r3, [pc, #44]	; (1a008e04 <inv_init_results_holder+0x4c>)
1a008dd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a008ddc:	63da      	str	r2, [r3, #60]	; 0x3c
    rh.compass_correction[0] = 1L<<30;
1a008dde:	4b09      	ldr	r3, [pc, #36]	; (1a008e04 <inv_init_results_holder+0x4c>)
1a008de0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a008de4:	641a      	str	r2, [r3, #64]	; 0x40
    rh.gam_quat[0] = 1L<<30;
1a008de6:	4b07      	ldr	r3, [pc, #28]	; (1a008e04 <inv_init_results_holder+0x4c>)
1a008de8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a008dec:	611a      	str	r2, [r3, #16]
    rh.nav_quat[0] = 1L<<30;
1a008dee:	4b05      	ldr	r3, [pc, #20]	; (1a008e04 <inv_init_results_holder+0x4c>)
1a008df0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a008df4:	601a      	str	r2, [r3, #0]
    rh.quat_confidence_interval = (float)M_PI;
1a008df6:	4b03      	ldr	r3, [pc, #12]	; (1a008e04 <inv_init_results_holder+0x4c>)
1a008df8:	4a03      	ldr	r2, [pc, #12]	; (1a008e08 <inv_init_results_holder+0x50>)
1a008dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return INV_SUCCESS;
1a008dfe:	2300      	movs	r3, #0
}
1a008e00:	4618      	mov	r0, r3
1a008e02:	bd80      	pop	{r7, pc}
1a008e04:	10086938 	.word	0x10086938
1a008e08:	40490fdb 	.word	0x40490fdb

1a008e0c <inv_enable_results_holder>:

/** Turns on storage of results.
*/
inv_error_t inv_enable_results_holder()
{
1a008e0c:	b580      	push	{r7, lr}
1a008e0e:	b082      	sub	sp, #8
1a008e10:	af00      	add	r7, sp, #0
    inv_error_t result;
    result = inv_init_results_holder();
1a008e12:	f7ff ffd1 	bl	1a008db8 <inv_init_results_holder>
1a008e16:	6078      	str	r0, [r7, #4]
    if ( result ) {
1a008e18:	687b      	ldr	r3, [r7, #4]
1a008e1a:	2b00      	cmp	r3, #0
1a008e1c:	d001      	beq.n	1a008e22 <inv_enable_results_holder+0x16>
        return result;
1a008e1e:	687b      	ldr	r3, [r7, #4]
1a008e20:	e004      	b.n	1a008e2c <inv_enable_results_holder+0x20>
    }

    result = inv_register_mpl_start_notification(inv_start_results_holder);
1a008e22:	4804      	ldr	r0, [pc, #16]	; (1a008e34 <inv_enable_results_holder+0x28>)
1a008e24:	f000 f8e4 	bl	1a008ff0 <inv_register_mpl_start_notification>
1a008e28:	6078      	str	r0, [r7, #4]
    return result;
1a008e2a:	687b      	ldr	r3, [r7, #4]
}
1a008e2c:	4618      	mov	r0, r3
1a008e2e:	3708      	adds	r7, #8
1a008e30:	46bd      	mov	sp, r7
1a008e32:	bd80      	pop	{r7, pc}
1a008e34:	1a008d9d 	.word	0x1a008d9d

1a008e38 <inv_set_accel_bias_found>:
/** Sets whether we know the accel bias
 * @param[in] state Set to 1 if we know the accel bias. 
 *            Can be retrieved with inv_got_accel_bias()
 */
void inv_set_accel_bias_found(int state)
{
1a008e38:	b480      	push	{r7}
1a008e3a:	b083      	sub	sp, #12
1a008e3c:	af00      	add	r7, sp, #0
1a008e3e:	6078      	str	r0, [r7, #4]
    rh.got_accel_bias = state;
1a008e40:	4a04      	ldr	r2, [pc, #16]	; (1a008e54 <inv_set_accel_bias_found+0x1c>)
1a008e42:	687b      	ldr	r3, [r7, #4]
1a008e44:	6553      	str	r3, [r2, #84]	; 0x54
}
1a008e46:	bf00      	nop
1a008e48:	370c      	adds	r7, #12
1a008e4a:	46bd      	mov	sp, r7
1a008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008e50:	4770      	bx	lr
1a008e52:	bf00      	nop
1a008e54:	10086938 	.word	0x10086938

1a008e58 <inv_got_compass_bias>:
/** Sets state of if we know the compass bias.
 * @return return 1 if we know the compass bias, 0 if not.
 *            it is set with inv_set_compass_bias_found()
 */
int inv_got_compass_bias()
{
1a008e58:	b480      	push	{r7}
1a008e5a:	af00      	add	r7, sp, #0
    return rh.got_compass_bias;
1a008e5c:	4b03      	ldr	r3, [pc, #12]	; (1a008e6c <inv_got_compass_bias+0x14>)
1a008e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
1a008e60:	4618      	mov	r0, r3
1a008e62:	46bd      	mov	sp, r7
1a008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008e68:	4770      	bx	lr
1a008e6a:	bf00      	nop
1a008e6c:	10086938 	.word	0x10086938

1a008e70 <inv_set_compass_bias_found>:
/** Sets whether we know the compass bias
 * @param[in] state Set to 1 if we know the compass bias. 
 *            Can be retrieved with inv_got_compass_bias()
 */
void inv_set_compass_bias_found(int state)
{
1a008e70:	b480      	push	{r7}
1a008e72:	b083      	sub	sp, #12
1a008e74:	af00      	add	r7, sp, #0
1a008e76:	6078      	str	r0, [r7, #4]
    rh.got_compass_bias = state;
1a008e78:	4a04      	ldr	r2, [pc, #16]	; (1a008e8c <inv_set_compass_bias_found+0x1c>)
1a008e7a:	687b      	ldr	r3, [r7, #4]
1a008e7c:	6713      	str	r3, [r2, #112]	; 0x70
}
1a008e7e:	bf00      	nop
1a008e80:	370c      	adds	r7, #12
1a008e82:	46bd      	mov	sp, r7
1a008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008e88:	4770      	bx	lr
1a008e8a:	bf00      	nop
1a008e8c:	10086938 	.word	0x10086938

1a008e90 <inv_set_compass_state>:

/** Sets the compass state.
 * @param[in] state Compass state. It can be retrieved with inv_get_compass_state().
 */
void inv_set_compass_state(int state)
{
1a008e90:	b480      	push	{r7}
1a008e92:	b083      	sub	sp, #12
1a008e94:	af00      	add	r7, sp, #0
1a008e96:	6078      	str	r0, [r7, #4]
    rh.compass_state = state;
1a008e98:	4a04      	ldr	r2, [pc, #16]	; (1a008eac <inv_set_compass_state+0x1c>)
1a008e9a:	687b      	ldr	r3, [r7, #4]
1a008e9c:	6793      	str	r3, [r2, #120]	; 0x78
}
1a008e9e:	bf00      	nop
1a008ea0:	370c      	adds	r7, #12
1a008ea2:	46bd      	mov	sp, r7
1a008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008ea8:	4770      	bx	lr
1a008eaa:	bf00      	nop
1a008eac:	10086938 	.word	0x10086938

1a008eb0 <inv_get_compass_state>:

/** Get's the compass state
 * @return the compass state that was set with inv_set_compass_state()
 */
int inv_get_compass_state()
{
1a008eb0:	b480      	push	{r7}
1a008eb2:	af00      	add	r7, sp, #0
    return rh.compass_state;
1a008eb4:	4b03      	ldr	r3, [pc, #12]	; (1a008ec4 <inv_get_compass_state+0x14>)
1a008eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
1a008eb8:	4618      	mov	r0, r3
1a008eba:	46bd      	mov	sp, r7
1a008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008ec0:	4770      	bx	lr
1a008ec2:	bf00      	nop
1a008ec4:	10086938 	.word	0x10086938

1a008ec8 <inv_set_compass_bias_error>:
/** Set compass bias error. See inv_get_compass_bias_error()
 * @param[in] bias_error Set's how accurate we know the compass bias. It is the 
 * error squared.
 */
void inv_set_compass_bias_error(const long *bias_error)
{
1a008ec8:	b580      	push	{r7, lr}
1a008eca:	b082      	sub	sp, #8
1a008ecc:	af00      	add	r7, sp, #0
1a008ece:	6078      	str	r0, [r7, #4]
    memcpy(rh.compass_bias_error, bias_error, sizeof(rh.compass_bias_error));
1a008ed0:	220c      	movs	r2, #12
1a008ed2:	6879      	ldr	r1, [r7, #4]
1a008ed4:	4803      	ldr	r0, [pc, #12]	; (1a008ee4 <inv_set_compass_bias_error+0x1c>)
1a008ed6:	f00b fe01 	bl	1a014adc <memcpy>
}
1a008eda:	bf00      	nop
1a008edc:	3708      	adds	r7, #8
1a008ede:	46bd      	mov	sp, r7
1a008ee0:	bd80      	pop	{r7, pc}
1a008ee2:	bf00      	nop
1a008ee4:	10086990 	.word	0x10086990

1a008ee8 <inv_get_compass_bias_error>:

/** Get's compass bias error. See inv_set_compass_bias_error() for setting.
 * @param[out] bias_error Accuracy as to how well the compass bias is known. It is the error squared.
 */
void inv_get_compass_bias_error(long *bias_error)
{
1a008ee8:	b580      	push	{r7, lr}
1a008eea:	b082      	sub	sp, #8
1a008eec:	af00      	add	r7, sp, #0
1a008eee:	6078      	str	r0, [r7, #4]
    memcpy(bias_error, rh.compass_bias_error, sizeof(rh.compass_bias_error));
1a008ef0:	220c      	movs	r2, #12
1a008ef2:	4904      	ldr	r1, [pc, #16]	; (1a008f04 <inv_get_compass_bias_error+0x1c>)
1a008ef4:	6878      	ldr	r0, [r7, #4]
1a008ef6:	f00b fdf1 	bl	1a014adc <memcpy>
}
1a008efa:	bf00      	nop
1a008efc:	3708      	adds	r7, #8
1a008efe:	46bd      	mov	sp, r7
1a008f00:	bd80      	pop	{r7, pc}
1a008f02:	bf00      	nop
1a008f04:	10086990 	.word	0x10086990

1a008f08 <inv_get_linear_accel>:
 *                with gravity removed
 *  @return     INV_SUCCESS if successful
 *              INV_ERROR_INVALID_PARAMETER if invalid input pointer
 */
inv_error_t inv_get_linear_accel(long *data)
{
1a008f08:	b580      	push	{r7, lr}
1a008f0a:	b086      	sub	sp, #24
1a008f0c:	af00      	add	r7, sp, #0
1a008f0e:	6078      	str	r0, [r7, #4]
    long gravity[3];

    if (data != NULL)
1a008f10:	687b      	ldr	r3, [r7, #4]
1a008f12:	2b00      	cmp	r3, #0
1a008f14:	d024      	beq.n	1a008f60 <inv_get_linear_accel+0x58>
    {
        inv_get_accel_set(data, NULL, NULL);
1a008f16:	2200      	movs	r2, #0
1a008f18:	2100      	movs	r1, #0
1a008f1a:	6878      	ldr	r0, [r7, #4]
1a008f1c:	f7fe fc46 	bl	1a0077ac <inv_get_accel_set>
        inv_get_gravity(gravity);
1a008f20:	f107 030c 	add.w	r3, r7, #12
1a008f24:	4618      	mov	r0, r3
1a008f26:	f7ff fe6b 	bl	1a008c00 <inv_get_gravity>
        data[0] -= gravity[0] >> 14;
1a008f2a:	687b      	ldr	r3, [r7, #4]
1a008f2c:	681a      	ldr	r2, [r3, #0]
1a008f2e:	68fb      	ldr	r3, [r7, #12]
1a008f30:	139b      	asrs	r3, r3, #14
1a008f32:	1ad2      	subs	r2, r2, r3
1a008f34:	687b      	ldr	r3, [r7, #4]
1a008f36:	601a      	str	r2, [r3, #0]
        data[1] -= gravity[1] >> 14;
1a008f38:	687b      	ldr	r3, [r7, #4]
1a008f3a:	3304      	adds	r3, #4
1a008f3c:	687a      	ldr	r2, [r7, #4]
1a008f3e:	3204      	adds	r2, #4
1a008f40:	6811      	ldr	r1, [r2, #0]
1a008f42:	693a      	ldr	r2, [r7, #16]
1a008f44:	1392      	asrs	r2, r2, #14
1a008f46:	1a8a      	subs	r2, r1, r2
1a008f48:	601a      	str	r2, [r3, #0]
        data[2] -= gravity[2] >> 14;
1a008f4a:	687b      	ldr	r3, [r7, #4]
1a008f4c:	3308      	adds	r3, #8
1a008f4e:	687a      	ldr	r2, [r7, #4]
1a008f50:	3208      	adds	r2, #8
1a008f52:	6811      	ldr	r1, [r2, #0]
1a008f54:	697a      	ldr	r2, [r7, #20]
1a008f56:	1392      	asrs	r2, r2, #14
1a008f58:	1a8a      	subs	r2, r1, r2
1a008f5a:	601a      	str	r2, [r3, #0]
        return INV_SUCCESS;
1a008f5c:	2300      	movs	r3, #0
1a008f5e:	e000      	b.n	1a008f62 <inv_get_linear_accel+0x5a>
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
1a008f60:	2316      	movs	r3, #22
    }
}
1a008f62:	4618      	mov	r0, r3
1a008f64:	3718      	adds	r7, #24
1a008f66:	46bd      	mov	sp, r7
1a008f68:	bd80      	pop	{r7, pc}
1a008f6a:	bf00      	nop

1a008f6c <inv_get_linear_accel_float>:
 *  @param[out] data    3-element vector of linear aceel float data
 *  @return     INV_SUCCESS if successful
 *              INV_ERROR_INVALID_PARAMETER if invalid input pointer
 */
inv_error_t inv_get_linear_accel_float(float *data)
{
1a008f6c:	b580      	push	{r7, lr}
1a008f6e:	b086      	sub	sp, #24
1a008f70:	af00      	add	r7, sp, #0
1a008f72:	6078      	str	r0, [r7, #4]
    long tdata[3];
    unsigned char i;

    if (data != NULL && !inv_get_linear_accel(tdata)) {
1a008f74:	687b      	ldr	r3, [r7, #4]
1a008f76:	2b00      	cmp	r3, #0
1a008f78:	d027      	beq.n	1a008fca <inv_get_linear_accel_float+0x5e>
1a008f7a:	f107 0308 	add.w	r3, r7, #8
1a008f7e:	4618      	mov	r0, r3
1a008f80:	f7ff ffc2 	bl	1a008f08 <inv_get_linear_accel>
1a008f84:	4603      	mov	r3, r0
1a008f86:	2b00      	cmp	r3, #0
1a008f88:	d11f      	bne.n	1a008fca <inv_get_linear_accel_float+0x5e>
        for (i = 0; i < 3; ++i) {
1a008f8a:	2300      	movs	r3, #0
1a008f8c:	75fb      	strb	r3, [r7, #23]
1a008f8e:	e017      	b.n	1a008fc0 <inv_get_linear_accel_float+0x54>
            data[i] = ((float)tdata[i] / (1L << 16));
1a008f90:	7dfb      	ldrb	r3, [r7, #23]
1a008f92:	009b      	lsls	r3, r3, #2
1a008f94:	687a      	ldr	r2, [r7, #4]
1a008f96:	441a      	add	r2, r3
1a008f98:	7dfb      	ldrb	r3, [r7, #23]
1a008f9a:	009b      	lsls	r3, r3, #2
1a008f9c:	f107 0118 	add.w	r1, r7, #24
1a008fa0:	440b      	add	r3, r1
1a008fa2:	f853 3c10 	ldr.w	r3, [r3, #-16]
1a008fa6:	ee07 3a90 	vmov	s15, r3
1a008faa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
1a008fae:	eddf 6a09 	vldr	s13, [pc, #36]	; 1a008fd4 <inv_get_linear_accel_float+0x68>
1a008fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
1a008fb6:	edc2 7a00 	vstr	s15, [r2]
{
    long tdata[3];
    unsigned char i;

    if (data != NULL && !inv_get_linear_accel(tdata)) {
        for (i = 0; i < 3; ++i) {
1a008fba:	7dfb      	ldrb	r3, [r7, #23]
1a008fbc:	3301      	adds	r3, #1
1a008fbe:	75fb      	strb	r3, [r7, #23]
1a008fc0:	7dfb      	ldrb	r3, [r7, #23]
1a008fc2:	2b02      	cmp	r3, #2
1a008fc4:	d9e4      	bls.n	1a008f90 <inv_get_linear_accel_float+0x24>
            data[i] = ((float)tdata[i] / (1L << 16));
        }
        return INV_SUCCESS;
1a008fc6:	2300      	movs	r3, #0
1a008fc8:	e000      	b.n	1a008fcc <inv_get_linear_accel_float+0x60>
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
1a008fca:	2316      	movs	r3, #22
    }
}
1a008fcc:	4618      	mov	r0, r3
1a008fce:	3718      	adds	r7, #24
1a008fd0:	46bd      	mov	sp, r7
1a008fd2:	bd80      	pop	{r7, pc}
1a008fd4:	47800000 	.word	0x47800000

1a008fd8 <inv_init_start_manager>:

/** Initilize the start manager. Typically called by inv_start_mpl();
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_start_manager(void)
{
1a008fd8:	b580      	push	{r7, lr}
1a008fda:	af00      	add	r7, sp, #0
    memset(&inv_start_cb, 0, sizeof(inv_start_cb));
1a008fdc:	2254      	movs	r2, #84	; 0x54
1a008fde:	2100      	movs	r1, #0
1a008fe0:	4802      	ldr	r0, [pc, #8]	; (1a008fec <inv_init_start_manager+0x14>)
1a008fe2:	f00b fe79 	bl	1a014cd8 <memset>
    return INV_SUCCESS;
1a008fe6:	2300      	movs	r3, #0
}
1a008fe8:	4618      	mov	r0, r3
1a008fea:	bd80      	pop	{r7, pc}
1a008fec:	100869c0 	.word	0x100869c0

1a008ff0 <inv_register_mpl_start_notification>:
* @param[in] start_cb Function callback that will be called when inv_start_mpl() is
*            called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
1a008ff0:	b480      	push	{r7}
1a008ff2:	b083      	sub	sp, #12
1a008ff4:	af00      	add	r7, sp, #0
1a008ff6:	6078      	str	r0, [r7, #4]
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
1a008ff8:	4b0c      	ldr	r3, [pc, #48]	; (1a00902c <inv_register_mpl_start_notification+0x3c>)
1a008ffa:	681b      	ldr	r3, [r3, #0]
1a008ffc:	2b13      	cmp	r3, #19
1a008ffe:	dd01      	ble.n	1a009004 <inv_register_mpl_start_notification+0x14>
        return INV_ERROR_INVALID_PARAMETER;
1a009000:	2316      	movs	r3, #22
1a009002:	e00c      	b.n	1a00901e <inv_register_mpl_start_notification+0x2e>

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
1a009004:	4b09      	ldr	r3, [pc, #36]	; (1a00902c <inv_register_mpl_start_notification+0x3c>)
1a009006:	681b      	ldr	r3, [r3, #0]
1a009008:	4a08      	ldr	r2, [pc, #32]	; (1a00902c <inv_register_mpl_start_notification+0x3c>)
1a00900a:	009b      	lsls	r3, r3, #2
1a00900c:	4413      	add	r3, r2
1a00900e:	687a      	ldr	r2, [r7, #4]
1a009010:	605a      	str	r2, [r3, #4]
    inv_start_cb.num_cb++;
1a009012:	4b06      	ldr	r3, [pc, #24]	; (1a00902c <inv_register_mpl_start_notification+0x3c>)
1a009014:	681b      	ldr	r3, [r3, #0]
1a009016:	3301      	adds	r3, #1
1a009018:	4a04      	ldr	r2, [pc, #16]	; (1a00902c <inv_register_mpl_start_notification+0x3c>)
1a00901a:	6013      	str	r3, [r2, #0]
    return INV_SUCCESS;
1a00901c:	2300      	movs	r3, #0
}
1a00901e:	4618      	mov	r0, r3
1a009020:	370c      	adds	r7, #12
1a009022:	46bd      	mov	sp, r7
1a009024:	f85d 7b04 	ldr.w	r7, [sp], #4
1a009028:	4770      	bx	lr
1a00902a:	bf00      	nop
1a00902c:	100869c0 	.word	0x100869c0

1a009030 <inv_execute_mpl_start_notification>:
/** Callback all the functions that want to be notified when inv_start_mpl() was
* called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_execute_mpl_start_notification(void)
{
1a009030:	b580      	push	{r7, lr}
1a009032:	b084      	sub	sp, #16
1a009034:	af00      	add	r7, sp, #0
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;
1a009036:	2300      	movs	r3, #0
1a009038:	60fb      	str	r3, [r7, #12]

    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
1a00903a:	2300      	movs	r3, #0
1a00903c:	60bb      	str	r3, [r7, #8]
1a00903e:	e011      	b.n	1a009064 <inv_execute_mpl_start_notification+0x34>
        result = inv_start_cb.start_cb[kk]();
1a009040:	4a0d      	ldr	r2, [pc, #52]	; (1a009078 <inv_execute_mpl_start_notification+0x48>)
1a009042:	68bb      	ldr	r3, [r7, #8]
1a009044:	009b      	lsls	r3, r3, #2
1a009046:	4413      	add	r3, r2
1a009048:	685b      	ldr	r3, [r3, #4]
1a00904a:	4798      	blx	r3
1a00904c:	6078      	str	r0, [r7, #4]
        if (result && (first_error == INV_SUCCESS)) {
1a00904e:	687b      	ldr	r3, [r7, #4]
1a009050:	2b00      	cmp	r3, #0
1a009052:	d004      	beq.n	1a00905e <inv_execute_mpl_start_notification+0x2e>
1a009054:	68fb      	ldr	r3, [r7, #12]
1a009056:	2b00      	cmp	r3, #0
1a009058:	d101      	bne.n	1a00905e <inv_execute_mpl_start_notification+0x2e>
            first_error = result;
1a00905a:	687b      	ldr	r3, [r7, #4]
1a00905c:	60fb      	str	r3, [r7, #12]
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;

    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
1a00905e:	68bb      	ldr	r3, [r7, #8]
1a009060:	3301      	adds	r3, #1
1a009062:	60bb      	str	r3, [r7, #8]
1a009064:	4b04      	ldr	r3, [pc, #16]	; (1a009078 <inv_execute_mpl_start_notification+0x48>)
1a009066:	681a      	ldr	r2, [r3, #0]
1a009068:	68bb      	ldr	r3, [r7, #8]
1a00906a:	429a      	cmp	r2, r3
1a00906c:	dce8      	bgt.n	1a009040 <inv_execute_mpl_start_notification+0x10>
        result = inv_start_cb.start_cb[kk]();
        if (result && (first_error == INV_SUCCESS)) {
            first_error = result;
        }
    }
    return first_error;
1a00906e:	68fb      	ldr	r3, [r7, #12]
}
1a009070:	4618      	mov	r0, r3
1a009072:	3710      	adds	r7, #16
1a009074:	46bd      	mov	sp, r7
1a009076:	bd80      	pop	{r7, pc}
1a009078:	100869c0 	.word	0x100869c0

1a00907c <inv_init_storage_manager>:
static struct data_storage_t ds;

/** Should be called once before using any of the storage methods. Typically
* called first by inv_init_mpl().*/
void inv_init_storage_manager()
{
1a00907c:	b580      	push	{r7, lr}
1a00907e:	af00      	add	r7, sp, #0
    memset(&ds, 0, sizeof(ds));
1a009080:	f44f 72cc 	mov.w	r2, #408	; 0x198
1a009084:	2100      	movs	r1, #0
1a009086:	4804      	ldr	r0, [pc, #16]	; (1a009098 <inv_init_storage_manager+0x1c>)
1a009088:	f00b fe26 	bl	1a014cd8 <memset>
    ds.total_size = sizeof(struct data_header_t);
1a00908c:	4b02      	ldr	r3, [pc, #8]	; (1a009098 <inv_init_storage_manager+0x1c>)
1a00908e:	220c      	movs	r2, #12
1a009090:	605a      	str	r2, [r3, #4]
}
1a009092:	bf00      	nop
1a009094:	bd80      	pop	{r7, pc}
1a009096:	bf00      	nop
1a009098:	10086a14 	.word	0x10086a14

1a00909c <inv_register_load_store>:
*                    The key should change when your type of data for storage changes.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
1a00909c:	b480      	push	{r7}
1a00909e:	b087      	sub	sp, #28
1a0090a0:	af00      	add	r7, sp, #0
1a0090a2:	60f8      	str	r0, [r7, #12]
1a0090a4:	60b9      	str	r1, [r7, #8]
1a0090a6:	607a      	str	r2, [r7, #4]
1a0090a8:	603b      	str	r3, [r7, #0]
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
1a0090aa:	2300      	movs	r3, #0
1a0090ac:	617b      	str	r3, [r7, #20]
1a0090ae:	e010      	b.n	1a0090d2 <inv_register_load_store+0x36>
        if (key == ds.hd[kk].key) {
1a0090b0:	4929      	ldr	r1, [pc, #164]	; (1a009158 <inv_register_load_store+0xbc>)
1a0090b2:	697a      	ldr	r2, [r7, #20]
1a0090b4:	4613      	mov	r3, r2
1a0090b6:	005b      	lsls	r3, r3, #1
1a0090b8:	4413      	add	r3, r2
1a0090ba:	009b      	lsls	r3, r3, #2
1a0090bc:	440b      	add	r3, r1
1a0090be:	33b0      	adds	r3, #176	; 0xb0
1a0090c0:	681a      	ldr	r2, [r3, #0]
1a0090c2:	683b      	ldr	r3, [r7, #0]
1a0090c4:	429a      	cmp	r2, r3
1a0090c6:	d101      	bne.n	1a0090cc <inv_register_load_store+0x30>
            return INV_ERROR_INVALID_PARAMETER;
1a0090c8:	2316      	movs	r3, #22
1a0090ca:	e03e      	b.n	1a00914a <inv_register_load_store+0xae>
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
1a0090cc:	697b      	ldr	r3, [r7, #20]
1a0090ce:	3301      	adds	r3, #1
1a0090d0:	617b      	str	r3, [r7, #20]
1a0090d2:	4b21      	ldr	r3, [pc, #132]	; (1a009158 <inv_register_load_store+0xbc>)
1a0090d4:	681a      	ldr	r2, [r3, #0]
1a0090d6:	697b      	ldr	r3, [r7, #20]
1a0090d8:	429a      	cmp	r2, r3
1a0090da:	dce9      	bgt.n	1a0090b0 <inv_register_load_store+0x14>
        if (key == ds.hd[kk].key) {
            return INV_ERROR_INVALID_PARAMETER;
        }
    }
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
1a0090dc:	4b1e      	ldr	r3, [pc, #120]	; (1a009158 <inv_register_load_store+0xbc>)
1a0090de:	681b      	ldr	r3, [r3, #0]
1a0090e0:	2b13      	cmp	r3, #19
1a0090e2:	dd01      	ble.n	1a0090e8 <inv_register_load_store+0x4c>
        return INV_ERROR_INVALID_PARAMETER;
1a0090e4:	2316      	movs	r3, #22
1a0090e6:	e030      	b.n	1a00914a <inv_register_load_store+0xae>
    }
    // Add to list
    ds.hd[ds.num].key = key;
1a0090e8:	4b1b      	ldr	r3, [pc, #108]	; (1a009158 <inv_register_load_store+0xbc>)
1a0090ea:	681a      	ldr	r2, [r3, #0]
1a0090ec:	491a      	ldr	r1, [pc, #104]	; (1a009158 <inv_register_load_store+0xbc>)
1a0090ee:	4613      	mov	r3, r2
1a0090f0:	005b      	lsls	r3, r3, #1
1a0090f2:	4413      	add	r3, r2
1a0090f4:	009b      	lsls	r3, r3, #2
1a0090f6:	440b      	add	r3, r1
1a0090f8:	33b0      	adds	r3, #176	; 0xb0
1a0090fa:	683a      	ldr	r2, [r7, #0]
1a0090fc:	601a      	str	r2, [r3, #0]
    ds.hd[ds.num].size = size;
1a0090fe:	4b16      	ldr	r3, [pc, #88]	; (1a009158 <inv_register_load_store+0xbc>)
1a009100:	681a      	ldr	r2, [r3, #0]
1a009102:	6879      	ldr	r1, [r7, #4]
1a009104:	4814      	ldr	r0, [pc, #80]	; (1a009158 <inv_register_load_store+0xbc>)
1a009106:	4613      	mov	r3, r2
1a009108:	005b      	lsls	r3, r3, #1
1a00910a:	4413      	add	r3, r2
1a00910c:	009b      	lsls	r3, r3, #2
1a00910e:	4403      	add	r3, r0
1a009110:	33a8      	adds	r3, #168	; 0xa8
1a009112:	6019      	str	r1, [r3, #0]
    ds.load[ds.num] = load_func;
1a009114:	4b10      	ldr	r3, [pc, #64]	; (1a009158 <inv_register_load_store+0xbc>)
1a009116:	681b      	ldr	r3, [r3, #0]
1a009118:	490f      	ldr	r1, [pc, #60]	; (1a009158 <inv_register_load_store+0xbc>)
1a00911a:	3302      	adds	r3, #2
1a00911c:	68fa      	ldr	r2, [r7, #12]
1a00911e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ds.save[ds.num] = save_func;
1a009122:	4b0d      	ldr	r3, [pc, #52]	; (1a009158 <inv_register_load_store+0xbc>)
1a009124:	681b      	ldr	r3, [r3, #0]
1a009126:	490c      	ldr	r1, [pc, #48]	; (1a009158 <inv_register_load_store+0xbc>)
1a009128:	3316      	adds	r3, #22
1a00912a:	68ba      	ldr	r2, [r7, #8]
1a00912c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ds.total_size += size + sizeof(struct data_header_t);
1a009130:	4b09      	ldr	r3, [pc, #36]	; (1a009158 <inv_register_load_store+0xbc>)
1a009132:	685a      	ldr	r2, [r3, #4]
1a009134:	687b      	ldr	r3, [r7, #4]
1a009136:	4413      	add	r3, r2
1a009138:	330c      	adds	r3, #12
1a00913a:	4a07      	ldr	r2, [pc, #28]	; (1a009158 <inv_register_load_store+0xbc>)
1a00913c:	6053      	str	r3, [r2, #4]
    ds.num++;
1a00913e:	4b06      	ldr	r3, [pc, #24]	; (1a009158 <inv_register_load_store+0xbc>)
1a009140:	681b      	ldr	r3, [r3, #0]
1a009142:	3301      	adds	r3, #1
1a009144:	4a04      	ldr	r2, [pc, #16]	; (1a009158 <inv_register_load_store+0xbc>)
1a009146:	6013      	str	r3, [r2, #0]

    return INV_SUCCESS;
1a009148:	2300      	movs	r3, #0
}
1a00914a:	4618      	mov	r0, r3
1a00914c:	371c      	adds	r7, #28
1a00914e:	46bd      	mov	sp, r7
1a009150:	f85d 7b04 	ldr.w	r7, [sp], #4
1a009154:	4770      	bx	lr
1a009156:	bf00      	nop
1a009158:	10086a14 	.word	0x10086a14

1a00915c <inv_get_sensor_type_accel>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_accel(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a00915c:	b580      	push	{r7, lr}
1a00915e:	b084      	sub	sp, #16
1a009160:	af00      	add	r7, sp, #0
1a009162:	60f8      	str	r0, [r7, #12]
1a009164:	60b9      	str	r1, [r7, #8]
1a009166:	607a      	str	r2, [r7, #4]
    inv_get_accel_set(data, accuracy, timestamp);
1a009168:	687a      	ldr	r2, [r7, #4]
1a00916a:	68b9      	ldr	r1, [r7, #8]
1a00916c:	68f8      	ldr	r0, [r7, #12]
1a00916e:	f7fe fb1d 	bl	1a0077ac <inv_get_accel_set>
    if (eMPL_out.accel_status & INV_NEW_DATA)
1a009172:	4b06      	ldr	r3, [pc, #24]	; (1a00918c <inv_get_sensor_type_accel+0x30>)
1a009174:	699b      	ldr	r3, [r3, #24]
1a009176:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a00917a:	2b00      	cmp	r3, #0
1a00917c:	d001      	beq.n	1a009182 <inv_get_sensor_type_accel+0x26>
        return 1;
1a00917e:	2301      	movs	r3, #1
1a009180:	e000      	b.n	1a009184 <inv_get_sensor_type_accel+0x28>
    else
        return 0;
1a009182:	2300      	movs	r3, #0
}
1a009184:	4618      	mov	r0, r3
1a009186:	3710      	adds	r7, #16
1a009188:	46bd      	mov	sp, r7
1a00918a:	bd80      	pop	{r7, pc}
1a00918c:	10086bac 	.word	0x10086bac

1a009190 <inv_get_sensor_type_gyro>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated. 
 */
int inv_get_sensor_type_gyro(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a009190:	b580      	push	{r7, lr}
1a009192:	b084      	sub	sp, #16
1a009194:	af00      	add	r7, sp, #0
1a009196:	60f8      	str	r0, [r7, #12]
1a009198:	60b9      	str	r1, [r7, #8]
1a00919a:	607a      	str	r2, [r7, #4]
    inv_get_gyro_set(data, accuracy, timestamp);
1a00919c:	687a      	ldr	r2, [r7, #4]
1a00919e:	68b9      	ldr	r1, [r7, #8]
1a0091a0:	68f8      	ldr	r0, [r7, #12]
1a0091a2:	f7fe fb29 	bl	1a0077f8 <inv_get_gyro_set>
    if (eMPL_out.gyro_status & INV_NEW_DATA)
1a0091a6:	4b06      	ldr	r3, [pc, #24]	; (1a0091c0 <inv_get_sensor_type_gyro+0x30>)
1a0091a8:	695b      	ldr	r3, [r3, #20]
1a0091aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0091ae:	2b00      	cmp	r3, #0
1a0091b0:	d001      	beq.n	1a0091b6 <inv_get_sensor_type_gyro+0x26>
        return 1;
1a0091b2:	2301      	movs	r3, #1
1a0091b4:	e000      	b.n	1a0091b8 <inv_get_sensor_type_gyro+0x28>
    else
        return 0;
1a0091b6:	2300      	movs	r3, #0
}
1a0091b8:	4618      	mov	r0, r3
1a0091ba:	3710      	adds	r7, #16
1a0091bc:	46bd      	mov	sp, r7
1a0091be:	bd80      	pop	{r7, pc}
1a0091c0:	10086bac 	.word	0x10086bac

1a0091c4 <inv_get_sensor_type_compass>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated. 
 */
int inv_get_sensor_type_compass(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a0091c4:	b580      	push	{r7, lr}
1a0091c6:	b084      	sub	sp, #16
1a0091c8:	af00      	add	r7, sp, #0
1a0091ca:	60f8      	str	r0, [r7, #12]
1a0091cc:	60b9      	str	r1, [r7, #8]
1a0091ce:	607a      	str	r2, [r7, #4]
    inv_get_compass_set(data, accuracy, timestamp);
1a0091d0:	687a      	ldr	r2, [r7, #4]
1a0091d2:	68b9      	ldr	r1, [r7, #8]
1a0091d4:	68f8      	ldr	r0, [r7, #12]
1a0091d6:	f7fe fb41 	bl	1a00785c <inv_get_compass_set>
    if (eMPL_out.compass_status & INV_NEW_DATA)
1a0091da:	4b06      	ldr	r3, [pc, #24]	; (1a0091f4 <inv_get_sensor_type_compass+0x30>)
1a0091dc:	69db      	ldr	r3, [r3, #28]
1a0091de:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0091e2:	2b00      	cmp	r3, #0
1a0091e4:	d001      	beq.n	1a0091ea <inv_get_sensor_type_compass+0x26>
        return 1;
1a0091e6:	2301      	movs	r3, #1
1a0091e8:	e000      	b.n	1a0091ec <inv_get_sensor_type_compass+0x28>
    else
        return 0;
1a0091ea:	2300      	movs	r3, #0
}
1a0091ec:	4618      	mov	r0, r3
1a0091ee:	3710      	adds	r7, #16
1a0091f0:	46bd      	mov	sp, r7
1a0091f2:	bd80      	pop	{r7, pc}
1a0091f4:	10086bac 	.word	0x10086bac

1a0091f8 <inv_get_sensor_type_quat>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated. 
 */
int inv_get_sensor_type_quat(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a0091f8:	b580      	push	{r7, lr}
1a0091fa:	b084      	sub	sp, #16
1a0091fc:	af00      	add	r7, sp, #0
1a0091fe:	60f8      	str	r0, [r7, #12]
1a009200:	60b9      	str	r1, [r7, #8]
1a009202:	607a      	str	r2, [r7, #4]
    memcpy(data, eMPL_out.quat, sizeof(eMPL_out.quat));
1a009204:	2210      	movs	r2, #16
1a009206:	4909      	ldr	r1, [pc, #36]	; (1a00922c <inv_get_sensor_type_quat+0x34>)
1a009208:	68f8      	ldr	r0, [r7, #12]
1a00920a:	f00b fc67 	bl	1a014adc <memcpy>
    accuracy[0] = eMPL_out.quat_accuracy;
1a00920e:	4b07      	ldr	r3, [pc, #28]	; (1a00922c <inv_get_sensor_type_quat+0x34>)
1a009210:	691b      	ldr	r3, [r3, #16]
1a009212:	b2da      	uxtb	r2, r3
1a009214:	68bb      	ldr	r3, [r7, #8]
1a009216:	701a      	strb	r2, [r3, #0]
    timestamp[0] = eMPL_out.nine_axis_timestamp;
1a009218:	4b04      	ldr	r3, [pc, #16]	; (1a00922c <inv_get_sensor_type_quat+0x34>)
1a00921a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1a00921c:	687b      	ldr	r3, [r7, #4]
1a00921e:	601a      	str	r2, [r3, #0]
    return eMPL_out.nine_axis_status;
1a009220:	4b02      	ldr	r3, [pc, #8]	; (1a00922c <inv_get_sensor_type_quat+0x34>)
1a009222:	6a1b      	ldr	r3, [r3, #32]
}
1a009224:	4618      	mov	r0, r3
1a009226:	3710      	adds	r7, #16
1a009228:	46bd      	mov	sp, r7
1a00922a:	bd80      	pop	{r7, pc}
1a00922c:	10086bac 	.word	0x10086bac

1a009230 <inv_get_sensor_type_heading>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated. 
 */
int inv_get_sensor_type_heading(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a009230:	b580      	push	{r7, lr}
1a009232:	b08c      	sub	sp, #48	; 0x30
1a009234:	af00      	add	r7, sp, #0
1a009236:	60f8      	str	r0, [r7, #12]
1a009238:	60b9      	str	r1, [r7, #8]
1a00923a:	607a      	str	r2, [r7, #4]
    long t1, t2, q00, q03, q12, q22;
    float fdata;

    q00 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[0]);
1a00923c:	4b39      	ldr	r3, [pc, #228]	; (1a009324 <inv_get_sensor_type_heading+0xf4>)
1a00923e:	681a      	ldr	r2, [r3, #0]
1a009240:	4b38      	ldr	r3, [pc, #224]	; (1a009324 <inv_get_sensor_type_heading+0xf4>)
1a009242:	681b      	ldr	r3, [r3, #0]
1a009244:	4619      	mov	r1, r3
1a009246:	4610      	mov	r0, r2
1a009248:	f7fe fd4a 	bl	1a007ce0 <inv_q29_mult>
1a00924c:	62b8      	str	r0, [r7, #40]	; 0x28
    q03 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[3]);
1a00924e:	4b35      	ldr	r3, [pc, #212]	; (1a009324 <inv_get_sensor_type_heading+0xf4>)
1a009250:	681a      	ldr	r2, [r3, #0]
1a009252:	4b34      	ldr	r3, [pc, #208]	; (1a009324 <inv_get_sensor_type_heading+0xf4>)
1a009254:	68db      	ldr	r3, [r3, #12]
1a009256:	4619      	mov	r1, r3
1a009258:	4610      	mov	r0, r2
1a00925a:	f7fe fd41 	bl	1a007ce0 <inv_q29_mult>
1a00925e:	6278      	str	r0, [r7, #36]	; 0x24
    q12 = inv_q29_mult(eMPL_out.quat[1], eMPL_out.quat[2]);
1a009260:	4b30      	ldr	r3, [pc, #192]	; (1a009324 <inv_get_sensor_type_heading+0xf4>)
1a009262:	685a      	ldr	r2, [r3, #4]
1a009264:	4b2f      	ldr	r3, [pc, #188]	; (1a009324 <inv_get_sensor_type_heading+0xf4>)
1a009266:	689b      	ldr	r3, [r3, #8]
1a009268:	4619      	mov	r1, r3
1a00926a:	4610      	mov	r0, r2
1a00926c:	f7fe fd38 	bl	1a007ce0 <inv_q29_mult>
1a009270:	6238      	str	r0, [r7, #32]
    q22 = inv_q29_mult(eMPL_out.quat[2], eMPL_out.quat[2]);
1a009272:	4b2c      	ldr	r3, [pc, #176]	; (1a009324 <inv_get_sensor_type_heading+0xf4>)
1a009274:	689a      	ldr	r2, [r3, #8]
1a009276:	4b2b      	ldr	r3, [pc, #172]	; (1a009324 <inv_get_sensor_type_heading+0xf4>)
1a009278:	689b      	ldr	r3, [r3, #8]
1a00927a:	4619      	mov	r1, r3
1a00927c:	4610      	mov	r0, r2
1a00927e:	f7fe fd2f 	bl	1a007ce0 <inv_q29_mult>
1a009282:	61f8      	str	r0, [r7, #28]

    /* X component of the Ybody axis in World frame */
    t1 = q12 - q03;
1a009284:	6a3a      	ldr	r2, [r7, #32]
1a009286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a009288:	1ad3      	subs	r3, r2, r3
1a00928a:	61bb      	str	r3, [r7, #24]

    /* Y component of the Ybody axis in World frame */
    t2 = q22 + q00 - (1L << 30);
1a00928c:	69fa      	ldr	r2, [r7, #28]
1a00928e:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a009290:	4413      	add	r3, r2
1a009292:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
1a009296:	617b      	str	r3, [r7, #20]
    fdata = atan2f((float) t1, (float) t2) * 180.f / (float) M_PI;
1a009298:	69bb      	ldr	r3, [r7, #24]
1a00929a:	ee07 3a90 	vmov	s15, r3
1a00929e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a0092a2:	697b      	ldr	r3, [r7, #20]
1a0092a4:	ee07 3a10 	vmov	s14, r3
1a0092a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
1a0092ac:	ee17 1a10 	vmov	r1, s14
1a0092b0:	ee17 0a90 	vmov	r0, s15
1a0092b4:	f00c fa86 	bl	1a0157c4 <atan2f>
1a0092b8:	ee07 0a10 	vmov	s14, r0
1a0092bc:	eddf 7a1a 	vldr	s15, [pc, #104]	; 1a009328 <inv_get_sensor_type_heading+0xf8>
1a0092c0:	ee27 7a27 	vmul.f32	s14, s14, s15
1a0092c4:	eddf 6a19 	vldr	s13, [pc, #100]	; 1a00932c <inv_get_sensor_type_heading+0xfc>
1a0092c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
1a0092cc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    if (fdata < 0.f)
1a0092d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
1a0092d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
1a0092d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0092dc:	d507      	bpl.n	1a0092ee <inv_get_sensor_type_heading+0xbe>
        fdata += 360.f;
1a0092de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
1a0092e2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 1a009330 <inv_get_sensor_type_heading+0x100>
1a0092e6:	ee77 7a87 	vadd.f32	s15, s15, s14
1a0092ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    data[0] = (long)(fdata * 65536.f);
1a0092ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
1a0092f2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 1a009334 <inv_get_sensor_type_heading+0x104>
1a0092f6:	ee67 7a87 	vmul.f32	s15, s15, s14
1a0092fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a0092fe:	ee17 2a90 	vmov	r2, s15
1a009302:	68fb      	ldr	r3, [r7, #12]
1a009304:	601a      	str	r2, [r3, #0]

    accuracy[0] = eMPL_out.quat_accuracy;
1a009306:	4b07      	ldr	r3, [pc, #28]	; (1a009324 <inv_get_sensor_type_heading+0xf4>)
1a009308:	691b      	ldr	r3, [r3, #16]
1a00930a:	b2da      	uxtb	r2, r3
1a00930c:	68bb      	ldr	r3, [r7, #8]
1a00930e:	701a      	strb	r2, [r3, #0]
    timestamp[0] = eMPL_out.nine_axis_timestamp;
1a009310:	4b04      	ldr	r3, [pc, #16]	; (1a009324 <inv_get_sensor_type_heading+0xf4>)
1a009312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1a009314:	687b      	ldr	r3, [r7, #4]
1a009316:	601a      	str	r2, [r3, #0]
    return eMPL_out.nine_axis_status;
1a009318:	4b02      	ldr	r3, [pc, #8]	; (1a009324 <inv_get_sensor_type_heading+0xf4>)
1a00931a:	6a1b      	ldr	r3, [r3, #32]
}
1a00931c:	4618      	mov	r0, r3
1a00931e:	3730      	adds	r7, #48	; 0x30
1a009320:	46bd      	mov	sp, r7
1a009322:	bd80      	pop	{r7, pc}
1a009324:	10086bac 	.word	0x10086bac
1a009328:	43340000 	.word	0x43340000
1a00932c:	40490fdb 	.word	0x40490fdb
1a009330:	43b40000 	.word	0x43b40000
1a009334:	47800000 	.word	0x47800000

1a009338 <inv_get_sensor_type_euler>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_euler(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a009338:	b580      	push	{r7, lr}
1a00933a:	ed2d 8b02 	vpush	{d8}
1a00933e:	b094      	sub	sp, #80	; 0x50
1a009340:	af00      	add	r7, sp, #0
1a009342:	60f8      	str	r0, [r7, #12]
1a009344:	60b9      	str	r1, [r7, #8]
1a009346:	607a      	str	r2, [r7, #4]
    long t1, t2, t3;
    long q00, q01, q02, q03, q11, q12, q13, q22, q23, q33;
    float values[3];

    q00 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[0]);
1a009348:	4bb4      	ldr	r3, [pc, #720]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a00934a:	681a      	ldr	r2, [r3, #0]
1a00934c:	4bb3      	ldr	r3, [pc, #716]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a00934e:	681b      	ldr	r3, [r3, #0]
1a009350:	4619      	mov	r1, r3
1a009352:	4610      	mov	r0, r2
1a009354:	f7fe fcc4 	bl	1a007ce0 <inv_q29_mult>
1a009358:	64f8      	str	r0, [r7, #76]	; 0x4c
    q01 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[1]);
1a00935a:	4bb0      	ldr	r3, [pc, #704]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a00935c:	681a      	ldr	r2, [r3, #0]
1a00935e:	4baf      	ldr	r3, [pc, #700]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a009360:	685b      	ldr	r3, [r3, #4]
1a009362:	4619      	mov	r1, r3
1a009364:	4610      	mov	r0, r2
1a009366:	f7fe fcbb 	bl	1a007ce0 <inv_q29_mult>
1a00936a:	64b8      	str	r0, [r7, #72]	; 0x48
    q02 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[2]);
1a00936c:	4bab      	ldr	r3, [pc, #684]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a00936e:	681a      	ldr	r2, [r3, #0]
1a009370:	4baa      	ldr	r3, [pc, #680]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a009372:	689b      	ldr	r3, [r3, #8]
1a009374:	4619      	mov	r1, r3
1a009376:	4610      	mov	r0, r2
1a009378:	f7fe fcb2 	bl	1a007ce0 <inv_q29_mult>
1a00937c:	6478      	str	r0, [r7, #68]	; 0x44
    q03 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[3]);
1a00937e:	4ba7      	ldr	r3, [pc, #668]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a009380:	681a      	ldr	r2, [r3, #0]
1a009382:	4ba6      	ldr	r3, [pc, #664]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a009384:	68db      	ldr	r3, [r3, #12]
1a009386:	4619      	mov	r1, r3
1a009388:	4610      	mov	r0, r2
1a00938a:	f7fe fca9 	bl	1a007ce0 <inv_q29_mult>
1a00938e:	6438      	str	r0, [r7, #64]	; 0x40
    q11 = inv_q29_mult(eMPL_out.quat[1], eMPL_out.quat[1]);
1a009390:	4ba2      	ldr	r3, [pc, #648]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a009392:	685a      	ldr	r2, [r3, #4]
1a009394:	4ba1      	ldr	r3, [pc, #644]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a009396:	685b      	ldr	r3, [r3, #4]
1a009398:	4619      	mov	r1, r3
1a00939a:	4610      	mov	r0, r2
1a00939c:	f7fe fca0 	bl	1a007ce0 <inv_q29_mult>
1a0093a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    q12 = inv_q29_mult(eMPL_out.quat[1], eMPL_out.quat[2]);
1a0093a2:	4b9e      	ldr	r3, [pc, #632]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a0093a4:	685a      	ldr	r2, [r3, #4]
1a0093a6:	4b9d      	ldr	r3, [pc, #628]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a0093a8:	689b      	ldr	r3, [r3, #8]
1a0093aa:	4619      	mov	r1, r3
1a0093ac:	4610      	mov	r0, r2
1a0093ae:	f7fe fc97 	bl	1a007ce0 <inv_q29_mult>
1a0093b2:	63b8      	str	r0, [r7, #56]	; 0x38
    q13 = inv_q29_mult(eMPL_out.quat[1], eMPL_out.quat[3]);
1a0093b4:	4b99      	ldr	r3, [pc, #612]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a0093b6:	685a      	ldr	r2, [r3, #4]
1a0093b8:	4b98      	ldr	r3, [pc, #608]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a0093ba:	68db      	ldr	r3, [r3, #12]
1a0093bc:	4619      	mov	r1, r3
1a0093be:	4610      	mov	r0, r2
1a0093c0:	f7fe fc8e 	bl	1a007ce0 <inv_q29_mult>
1a0093c4:	6378      	str	r0, [r7, #52]	; 0x34
    q22 = inv_q29_mult(eMPL_out.quat[2], eMPL_out.quat[2]);
1a0093c6:	4b95      	ldr	r3, [pc, #596]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a0093c8:	689a      	ldr	r2, [r3, #8]
1a0093ca:	4b94      	ldr	r3, [pc, #592]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a0093cc:	689b      	ldr	r3, [r3, #8]
1a0093ce:	4619      	mov	r1, r3
1a0093d0:	4610      	mov	r0, r2
1a0093d2:	f7fe fc85 	bl	1a007ce0 <inv_q29_mult>
1a0093d6:	6338      	str	r0, [r7, #48]	; 0x30
    q23 = inv_q29_mult(eMPL_out.quat[2], eMPL_out.quat[3]);
1a0093d8:	4b90      	ldr	r3, [pc, #576]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a0093da:	689a      	ldr	r2, [r3, #8]
1a0093dc:	4b8f      	ldr	r3, [pc, #572]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a0093de:	68db      	ldr	r3, [r3, #12]
1a0093e0:	4619      	mov	r1, r3
1a0093e2:	4610      	mov	r0, r2
1a0093e4:	f7fe fc7c 	bl	1a007ce0 <inv_q29_mult>
1a0093e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    q33 = inv_q29_mult(eMPL_out.quat[3], eMPL_out.quat[3]);
1a0093ea:	4b8c      	ldr	r3, [pc, #560]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a0093ec:	68da      	ldr	r2, [r3, #12]
1a0093ee:	4b8b      	ldr	r3, [pc, #556]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a0093f0:	68db      	ldr	r3, [r3, #12]
1a0093f2:	4619      	mov	r1, r3
1a0093f4:	4610      	mov	r0, r2
1a0093f6:	f7fe fc73 	bl	1a007ce0 <inv_q29_mult>
1a0093fa:	62b8      	str	r0, [r7, #40]	; 0x28

    /* X component of the Ybody axis in World frame */
    t1 = q12 - q03;
1a0093fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
1a0093fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a009400:	1ad3      	subs	r3, r2, r3
1a009402:	627b      	str	r3, [r7, #36]	; 0x24

    /* Y component of the Ybody axis in World frame */
    t2 = q22 + q00 - (1L << 30);
1a009404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1a009406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a009408:	4413      	add	r3, r2
1a00940a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
1a00940e:	623b      	str	r3, [r7, #32]
    values[2] = -atan2f((float) t1, (float) t2) * 180.f / (float) M_PI;
1a009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a009412:	ee07 3a90 	vmov	s15, r3
1a009416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a00941a:	6a3b      	ldr	r3, [r7, #32]
1a00941c:	ee07 3a10 	vmov	s14, r3
1a009420:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
1a009424:	ee17 1a10 	vmov	r1, s14
1a009428:	ee17 0a90 	vmov	r0, s15
1a00942c:	f00c f9ca 	bl	1a0157c4 <atan2f>
1a009430:	4603      	mov	r3, r0
1a009432:	ee07 3a90 	vmov	s15, r3
1a009436:	eef1 7a67 	vneg.f32	s15, s15
1a00943a:	ed9f 7a79 	vldr	s14, [pc, #484]	; 1a009620 <inv_get_sensor_type_euler+0x2e8>
1a00943e:	ee27 7a87 	vmul.f32	s14, s15, s14
1a009442:	eddf 6a78 	vldr	s13, [pc, #480]	; 1a009624 <inv_get_sensor_type_euler+0x2ec>
1a009446:	eec7 7a26 	vdiv.f32	s15, s14, s13
1a00944a:	edc7 7a06 	vstr	s15, [r7, #24]

    /* Z component of the Ybody axis in World frame */
    t3 = q23 + q01;
1a00944e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1a009450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
1a009452:	4413      	add	r3, r2
1a009454:	61fb      	str	r3, [r7, #28]
    values[0] =
        atan2f((float) t3,
1a009456:	69fb      	ldr	r3, [r7, #28]
1a009458:	ee07 3a90 	vmov	s15, r3
1a00945c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
                sqrtf((float) t1 * t1 +
1a009460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a009462:	ee07 3a90 	vmov	s15, r3
1a009466:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
1a00946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a00946c:	ee07 3a90 	vmov	s15, r3
1a009470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a009474:	ee27 7a27 	vmul.f32	s14, s14, s15
                      (float) t2 * t2)) * 180.f / (float) M_PI;
1a009478:	6a3b      	ldr	r3, [r7, #32]
1a00947a:	ee07 3a90 	vmov	s15, r3
1a00947e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
1a009482:	6a3b      	ldr	r3, [r7, #32]
1a009484:	ee07 3a90 	vmov	s15, r3
1a009488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a00948c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    values[2] = -atan2f((float) t1, (float) t2) * 180.f / (float) M_PI;

    /* Z component of the Ybody axis in World frame */
    t3 = q23 + q01;
    values[0] =
        atan2f((float) t3,
1a009490:	ee77 7a27 	vadd.f32	s15, s14, s15
1a009494:	ee17 0a90 	vmov	r0, s15
1a009498:	f00c f996 	bl	1a0157c8 <sqrtf>
1a00949c:	4603      	mov	r3, r0
1a00949e:	4619      	mov	r1, r3
1a0094a0:	ee18 0a10 	vmov	r0, s16
1a0094a4:	f00c f98e 	bl	1a0157c4 <atan2f>
1a0094a8:	ee07 0a10 	vmov	s14, r0
                sqrtf((float) t1 * t1 +
                      (float) t2 * t2)) * 180.f / (float) M_PI;
1a0094ac:	eddf 7a5c 	vldr	s15, [pc, #368]	; 1a009620 <inv_get_sensor_type_euler+0x2e8>
1a0094b0:	ee27 7a27 	vmul.f32	s14, s14, s15
1a0094b4:	eddf 6a5b 	vldr	s13, [pc, #364]	; 1a009624 <inv_get_sensor_type_euler+0x2ec>
1a0094b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
    t2 = q22 + q00 - (1L << 30);
    values[2] = -atan2f((float) t1, (float) t2) * 180.f / (float) M_PI;

    /* Z component of the Ybody axis in World frame */
    t3 = q23 + q01;
    values[0] =
1a0094bc:	edc7 7a04 	vstr	s15, [r7, #16]
        atan2f((float) t3,
                sqrtf((float) t1 * t1 +
                      (float) t2 * t2)) * 180.f / (float) M_PI;
    /* Z component of the Zbody axis in World frame */
    t2 = q33 + q00 - (1L << 30);
1a0094c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a0094c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a0094c4:	4413      	add	r3, r2
1a0094c6:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
1a0094ca:	623b      	str	r3, [r7, #32]
    if (t2 < 0) {
1a0094cc:	6a3b      	ldr	r3, [r7, #32]
1a0094ce:	2b00      	cmp	r3, #0
1a0094d0:	da17      	bge.n	1a009502 <inv_get_sensor_type_euler+0x1ca>
        if (values[0] >= 0)
1a0094d2:	edd7 7a04 	vldr	s15, [r7, #16]
1a0094d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
1a0094da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0094de:	db08      	blt.n	1a0094f2 <inv_get_sensor_type_euler+0x1ba>
            values[0] = 180.f - values[0];
1a0094e0:	edd7 7a04 	vldr	s15, [r7, #16]
1a0094e4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 1a009620 <inv_get_sensor_type_euler+0x2e8>
1a0094e8:	ee77 7a67 	vsub.f32	s15, s14, s15
1a0094ec:	edc7 7a04 	vstr	s15, [r7, #16]
1a0094f0:	e007      	b.n	1a009502 <inv_get_sensor_type_euler+0x1ca>
        else
            values[0] = -180.f - values[0];
1a0094f2:	edd7 7a04 	vldr	s15, [r7, #16]
1a0094f6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 1a009628 <inv_get_sensor_type_euler+0x2f0>
1a0094fa:	ee77 7a67 	vsub.f32	s15, s14, s15
1a0094fe:	edc7 7a04 	vstr	s15, [r7, #16]
    }

    /* X component of the Xbody axis in World frame */
    t1 = q11 + q00 - (1L << 30);
1a009502:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
1a009504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a009506:	4413      	add	r3, r2
1a009508:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
1a00950c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Y component of the Xbody axis in World frame */
    t2 = q12 + q03;
1a00950e:	6bba      	ldr	r2, [r7, #56]	; 0x38
1a009510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a009512:	4413      	add	r3, r2
1a009514:	623b      	str	r3, [r7, #32]
    /* Z component of the Xbody axis in World frame */
    t3 = q13 - q02;
1a009516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1a009518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a00951a:	1ad3      	subs	r3, r2, r3
1a00951c:	61fb      	str	r3, [r7, #28]

    values[1] =
        (atan2f((float)(q33 + q00 - (1L << 30)), (float)(q13 - q02)) *
1a00951e:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a009520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a009522:	4413      	add	r3, r2
1a009524:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
1a009528:	ee07 3a90 	vmov	s15, r3
1a00952c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a009530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1a009532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a009534:	1ad3      	subs	r3, r2, r3
1a009536:	ee07 3a10 	vmov	s14, r3
1a00953a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
1a00953e:	ee17 1a10 	vmov	r1, s14
1a009542:	ee17 0a90 	vmov	r0, s15
1a009546:	f00c f93d 	bl	1a0157c4 <atan2f>
1a00954a:	ee07 0a10 	vmov	s14, r0
1a00954e:	eddf 7a34 	vldr	s15, [pc, #208]	; 1a009620 <inv_get_sensor_type_euler+0x2e8>
1a009552:	ee27 7a27 	vmul.f32	s14, s14, s15
          180.f / (float) M_PI - 90);
1a009556:	eddf 6a33 	vldr	s13, [pc, #204]	; 1a009624 <inv_get_sensor_type_euler+0x2ec>
1a00955a:	eec7 7a26 	vdiv.f32	s15, s14, s13
1a00955e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 1a00962c <inv_get_sensor_type_euler+0x2f4>
1a009562:	ee77 7ac7 	vsub.f32	s15, s15, s14
    /* Y component of the Xbody axis in World frame */
    t2 = q12 + q03;
    /* Z component of the Xbody axis in World frame */
    t3 = q13 - q02;

    values[1] =
1a009566:	edc7 7a05 	vstr	s15, [r7, #20]
        (atan2f((float)(q33 + q00 - (1L << 30)), (float)(q13 - q02)) *
          180.f / (float) M_PI - 90);
    if (values[1] >= 90)
1a00956a:	edd7 7a05 	vldr	s15, [r7, #20]
1a00956e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 1a00962c <inv_get_sensor_type_euler+0x2f4>
1a009572:	eef4 7ac7 	vcmpe.f32	s15, s14
1a009576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a00957a:	db07      	blt.n	1a00958c <inv_get_sensor_type_euler+0x254>
        values[1] = 180 - values[1];
1a00957c:	edd7 7a05 	vldr	s15, [r7, #20]
1a009580:	ed9f 7a27 	vldr	s14, [pc, #156]	; 1a009620 <inv_get_sensor_type_euler+0x2e8>
1a009584:	ee77 7a67 	vsub.f32	s15, s14, s15
1a009588:	edc7 7a05 	vstr	s15, [r7, #20]

    if (values[1] < -90)
1a00958c:	edd7 7a05 	vldr	s15, [r7, #20]
1a009590:	ed9f 7a27 	vldr	s14, [pc, #156]	; 1a009630 <inv_get_sensor_type_euler+0x2f8>
1a009594:	eef4 7ac7 	vcmpe.f32	s15, s14
1a009598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a00959c:	d507      	bpl.n	1a0095ae <inv_get_sensor_type_euler+0x276>
        values[1] = -180 - values[1];
1a00959e:	edd7 7a05 	vldr	s15, [r7, #20]
1a0095a2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 1a009628 <inv_get_sensor_type_euler+0x2f0>
1a0095a6:	ee77 7a67 	vsub.f32	s15, s14, s15
1a0095aa:	edc7 7a05 	vstr	s15, [r7, #20]
    data[0] = (long)(values[0] * 65536.f);
1a0095ae:	edd7 7a04 	vldr	s15, [r7, #16]
1a0095b2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 1a009634 <inv_get_sensor_type_euler+0x2fc>
1a0095b6:	ee67 7a87 	vmul.f32	s15, s15, s14
1a0095ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a0095be:	ee17 2a90 	vmov	r2, s15
1a0095c2:	68fb      	ldr	r3, [r7, #12]
1a0095c4:	601a      	str	r2, [r3, #0]
    data[1] = (long)(values[1] * 65536.f);
1a0095c6:	68fb      	ldr	r3, [r7, #12]
1a0095c8:	3304      	adds	r3, #4
1a0095ca:	edd7 7a05 	vldr	s15, [r7, #20]
1a0095ce:	ed9f 7a19 	vldr	s14, [pc, #100]	; 1a009634 <inv_get_sensor_type_euler+0x2fc>
1a0095d2:	ee67 7a87 	vmul.f32	s15, s15, s14
1a0095d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a0095da:	ee17 2a90 	vmov	r2, s15
1a0095de:	601a      	str	r2, [r3, #0]
    data[2] = (long)(values[2] * 65536.f);
1a0095e0:	68fb      	ldr	r3, [r7, #12]
1a0095e2:	3308      	adds	r3, #8
1a0095e4:	edd7 7a06 	vldr	s15, [r7, #24]
1a0095e8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 1a009634 <inv_get_sensor_type_euler+0x2fc>
1a0095ec:	ee67 7a87 	vmul.f32	s15, s15, s14
1a0095f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a0095f4:	ee17 2a90 	vmov	r2, s15
1a0095f8:	601a      	str	r2, [r3, #0]

    accuracy[0] = eMPL_out.quat_accuracy;
1a0095fa:	4b08      	ldr	r3, [pc, #32]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a0095fc:	691b      	ldr	r3, [r3, #16]
1a0095fe:	b2da      	uxtb	r2, r3
1a009600:	68bb      	ldr	r3, [r7, #8]
1a009602:	701a      	strb	r2, [r3, #0]
    timestamp[0] = eMPL_out.nine_axis_timestamp;
1a009604:	4b05      	ldr	r3, [pc, #20]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a009606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1a009608:	687b      	ldr	r3, [r7, #4]
1a00960a:	601a      	str	r2, [r3, #0]
    return eMPL_out.nine_axis_status;
1a00960c:	4b03      	ldr	r3, [pc, #12]	; (1a00961c <inv_get_sensor_type_euler+0x2e4>)
1a00960e:	6a1b      	ldr	r3, [r3, #32]
}
1a009610:	4618      	mov	r0, r3
1a009612:	3750      	adds	r7, #80	; 0x50
1a009614:	46bd      	mov	sp, r7
1a009616:	ecbd 8b02 	vpop	{d8}
1a00961a:	bd80      	pop	{r7, pc}
1a00961c:	10086bac 	.word	0x10086bac
1a009620:	43340000 	.word	0x43340000
1a009624:	40490fdb 	.word	0x40490fdb
1a009628:	c3340000 	.word	0xc3340000
1a00962c:	42b40000 	.word	0x42b40000
1a009630:	c2b40000 	.word	0xc2b40000
1a009634:	47800000 	.word	0x47800000

1a009638 <inv_get_sensor_type_rot_mat>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_rot_mat(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a009638:	b580      	push	{r7, lr}
1a00963a:	b084      	sub	sp, #16
1a00963c:	af00      	add	r7, sp, #0
1a00963e:	60f8      	str	r0, [r7, #12]
1a009640:	60b9      	str	r1, [r7, #8]
1a009642:	607a      	str	r2, [r7, #4]
    inv_quaternion_to_rotation(eMPL_out.quat, data);
1a009644:	68f9      	ldr	r1, [r7, #12]
1a009646:	4809      	ldr	r0, [pc, #36]	; (1a00966c <inv_get_sensor_type_rot_mat+0x34>)
1a009648:	f7fe ffba 	bl	1a0085c0 <inv_quaternion_to_rotation>
    accuracy[0] = eMPL_out.quat_accuracy;
1a00964c:	4b07      	ldr	r3, [pc, #28]	; (1a00966c <inv_get_sensor_type_rot_mat+0x34>)
1a00964e:	691b      	ldr	r3, [r3, #16]
1a009650:	b2da      	uxtb	r2, r3
1a009652:	68bb      	ldr	r3, [r7, #8]
1a009654:	701a      	strb	r2, [r3, #0]
    timestamp[0] = eMPL_out.nine_axis_timestamp;
1a009656:	4b05      	ldr	r3, [pc, #20]	; (1a00966c <inv_get_sensor_type_rot_mat+0x34>)
1a009658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1a00965a:	687b      	ldr	r3, [r7, #4]
1a00965c:	601a      	str	r2, [r3, #0]
    return eMPL_out.nine_axis_status;
1a00965e:	4b03      	ldr	r3, [pc, #12]	; (1a00966c <inv_get_sensor_type_rot_mat+0x34>)
1a009660:	6a1b      	ldr	r3, [r3, #32]
}
1a009662:	4618      	mov	r0, r3
1a009664:	3710      	adds	r7, #16
1a009666:	46bd      	mov	sp, r7
1a009668:	bd80      	pop	{r7, pc}
1a00966a:	bf00      	nop
1a00966c:	10086bac 	.word	0x10086bac

1a009670 <inv_generate_eMPL_outputs>:

static inv_error_t inv_generate_eMPL_outputs
    (struct inv_sensor_cal_t *sensor_cal)
{
1a009670:	b580      	push	{r7, lr}
1a009672:	b084      	sub	sp, #16
1a009674:	af00      	add	r7, sp, #0
1a009676:	6078      	str	r0, [r7, #4]
    int use_sensor;
    long sr = 1000;
1a009678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00967c:	60bb      	str	r3, [r7, #8]
    inv_get_quaternion_set(eMPL_out.quat, &eMPL_out.quat_accuracy, &eMPL_out.nine_axis_timestamp);
1a00967e:	4a53      	ldr	r2, [pc, #332]	; (1a0097cc <inv_generate_eMPL_outputs+0x15c>)
1a009680:	4953      	ldr	r1, [pc, #332]	; (1a0097d0 <inv_generate_eMPL_outputs+0x160>)
1a009682:	4854      	ldr	r0, [pc, #336]	; (1a0097d4 <inv_generate_eMPL_outputs+0x164>)
1a009684:	f7ff fb42 	bl	1a008d0c <inv_get_quaternion_set>
    eMPL_out.gyro_status = sensor_cal->gyro.status;
1a009688:	687b      	ldr	r3, [r7, #4]
1a00968a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a00968c:	4a51      	ldr	r2, [pc, #324]	; (1a0097d4 <inv_generate_eMPL_outputs+0x164>)
1a00968e:	6153      	str	r3, [r2, #20]
    eMPL_out.accel_status = sensor_cal->accel.status;
1a009690:	687b      	ldr	r3, [r7, #4]
1a009692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a009694:	4a4f      	ldr	r2, [pc, #316]	; (1a0097d4 <inv_generate_eMPL_outputs+0x164>)
1a009696:	6193      	str	r3, [r2, #24]
    eMPL_out.compass_status = sensor_cal->compass.status;
1a009698:	687b      	ldr	r3, [r7, #4]
1a00969a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a00969e:	4a4d      	ldr	r2, [pc, #308]	; (1a0097d4 <inv_generate_eMPL_outputs+0x164>)
1a0096a0:	61d3      	str	r3, [r2, #28]
    
    /* Find the highest sample rate and tie sensor fusion timestamps to that one. */
    if (sensor_cal->gyro.status & INV_SENSOR_ON) {
1a0096a2:	687b      	ldr	r3, [r7, #4]
1a0096a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0096a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a0096aa:	2b00      	cmp	r3, #0
1a0096ac:	d004      	beq.n	1a0096b8 <inv_generate_eMPL_outputs+0x48>
        sr = sensor_cal->gyro.sample_rate_ms;
1a0096ae:	687b      	ldr	r3, [r7, #4]
1a0096b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0096b2:	60bb      	str	r3, [r7, #8]
        use_sensor = 0;
1a0096b4:	2300      	movs	r3, #0
1a0096b6:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->accel.status & INV_SENSOR_ON) && (sr > sensor_cal->accel.sample_rate_ms)) {
1a0096b8:	687b      	ldr	r3, [r7, #4]
1a0096ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a0096bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a0096c0:	2b00      	cmp	r3, #0
1a0096c2:	d009      	beq.n	1a0096d8 <inv_generate_eMPL_outputs+0x68>
1a0096c4:	687b      	ldr	r3, [r7, #4]
1a0096c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
1a0096c8:	68bb      	ldr	r3, [r7, #8]
1a0096ca:	429a      	cmp	r2, r3
1a0096cc:	da04      	bge.n	1a0096d8 <inv_generate_eMPL_outputs+0x68>
        sr = sensor_cal->accel.sample_rate_ms;
1a0096ce:	687b      	ldr	r3, [r7, #4]
1a0096d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1a0096d2:	60bb      	str	r3, [r7, #8]
        use_sensor = 1;
1a0096d4:	2301      	movs	r3, #1
1a0096d6:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->compass.status & INV_SENSOR_ON) && (sr > sensor_cal->compass.sample_rate_ms)) {
1a0096d8:	687b      	ldr	r3, [r7, #4]
1a0096da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a0096de:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a0096e2:	2b00      	cmp	r3, #0
1a0096e4:	d00b      	beq.n	1a0096fe <inv_generate_eMPL_outputs+0x8e>
1a0096e6:	687b      	ldr	r3, [r7, #4]
1a0096e8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
1a0096ec:	68bb      	ldr	r3, [r7, #8]
1a0096ee:	429a      	cmp	r2, r3
1a0096f0:	da05      	bge.n	1a0096fe <inv_generate_eMPL_outputs+0x8e>
        sr = sensor_cal->compass.sample_rate_ms;
1a0096f2:	687b      	ldr	r3, [r7, #4]
1a0096f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
1a0096f8:	60bb      	str	r3, [r7, #8]
        use_sensor = 2;
1a0096fa:	2302      	movs	r3, #2
1a0096fc:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->quat.status & INV_SENSOR_ON) && (sr > sensor_cal->quat.sample_rate_ms)) {
1a0096fe:	687b      	ldr	r3, [r7, #4]
1a009700:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a009704:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a009708:	2b00      	cmp	r3, #0
1a00970a:	d00b      	beq.n	1a009724 <inv_generate_eMPL_outputs+0xb4>
1a00970c:	687b      	ldr	r3, [r7, #4]
1a00970e:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
1a009712:	68bb      	ldr	r3, [r7, #8]
1a009714:	429a      	cmp	r2, r3
1a009716:	da05      	bge.n	1a009724 <inv_generate_eMPL_outputs+0xb4>
        sr = sensor_cal->quat.sample_rate_ms;
1a009718:	687b      	ldr	r3, [r7, #4]
1a00971a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00971e:	60bb      	str	r3, [r7, #8]
        use_sensor = 3;
1a009720:	2303      	movs	r3, #3
1a009722:	60fb      	str	r3, [r7, #12]
    }

    switch (use_sensor) {
1a009724:	68fb      	ldr	r3, [r7, #12]
1a009726:	2b02      	cmp	r3, #2
1a009728:	d025      	beq.n	1a009776 <inv_generate_eMPL_outputs+0x106>
1a00972a:	2b03      	cmp	r3, #3
1a00972c:	d036      	beq.n	1a00979c <inv_generate_eMPL_outputs+0x12c>
1a00972e:	2b01      	cmp	r3, #1
1a009730:	d010      	beq.n	1a009754 <inv_generate_eMPL_outputs+0xe4>
    default:
    case 0:
        eMPL_out.nine_axis_status = (sensor_cal->gyro.status & INV_NEW_DATA) ? 1 : 0;
1a009732:	687b      	ldr	r3, [r7, #4]
1a009734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a009736:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a00973a:	2b00      	cmp	r3, #0
1a00973c:	bf14      	ite	ne
1a00973e:	2301      	movne	r3, #1
1a009740:	2300      	moveq	r3, #0
1a009742:	b2db      	uxtb	r3, r3
1a009744:	461a      	mov	r2, r3
1a009746:	4b23      	ldr	r3, [pc, #140]	; (1a0097d4 <inv_generate_eMPL_outputs+0x164>)
1a009748:	621a      	str	r2, [r3, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->gyro.timestamp;
1a00974a:	687b      	ldr	r3, [r7, #4]
1a00974c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1a00974e:	4a21      	ldr	r2, [pc, #132]	; (1a0097d4 <inv_generate_eMPL_outputs+0x164>)
1a009750:	6253      	str	r3, [r2, #36]	; 0x24
        break;
1a009752:	e036      	b.n	1a0097c2 <inv_generate_eMPL_outputs+0x152>
    case 1:
        eMPL_out.nine_axis_status = (sensor_cal->accel.status & INV_NEW_DATA) ? 1 : 0;
1a009754:	687b      	ldr	r3, [r7, #4]
1a009756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a009758:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a00975c:	2b00      	cmp	r3, #0
1a00975e:	bf14      	ite	ne
1a009760:	2301      	movne	r3, #1
1a009762:	2300      	moveq	r3, #0
1a009764:	b2db      	uxtb	r3, r3
1a009766:	461a      	mov	r2, r3
1a009768:	4b1a      	ldr	r3, [pc, #104]	; (1a0097d4 <inv_generate_eMPL_outputs+0x164>)
1a00976a:	621a      	str	r2, [r3, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->accel.timestamp;
1a00976c:	687b      	ldr	r3, [r7, #4]
1a00976e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1a009770:	4a18      	ldr	r2, [pc, #96]	; (1a0097d4 <inv_generate_eMPL_outputs+0x164>)
1a009772:	6253      	str	r3, [r2, #36]	; 0x24
        break;
1a009774:	e025      	b.n	1a0097c2 <inv_generate_eMPL_outputs+0x152>
    case 2:
        eMPL_out.nine_axis_status = (sensor_cal->compass.status & INV_NEW_DATA) ? 1 : 0;
1a009776:	687b      	ldr	r3, [r7, #4]
1a009778:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a00977c:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a009780:	2b00      	cmp	r3, #0
1a009782:	bf14      	ite	ne
1a009784:	2301      	movne	r3, #1
1a009786:	2300      	moveq	r3, #0
1a009788:	b2db      	uxtb	r3, r3
1a00978a:	461a      	mov	r2, r3
1a00978c:	4b11      	ldr	r3, [pc, #68]	; (1a0097d4 <inv_generate_eMPL_outputs+0x164>)
1a00978e:	621a      	str	r2, [r3, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->compass.timestamp;
1a009790:	687b      	ldr	r3, [r7, #4]
1a009792:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
1a009796:	4a0f      	ldr	r2, [pc, #60]	; (1a0097d4 <inv_generate_eMPL_outputs+0x164>)
1a009798:	6253      	str	r3, [r2, #36]	; 0x24
        break;
1a00979a:	e012      	b.n	1a0097c2 <inv_generate_eMPL_outputs+0x152>
    case 3:
        eMPL_out.nine_axis_status = (sensor_cal->quat.status & INV_NEW_DATA) ? 1 : 0;
1a00979c:	687b      	ldr	r3, [r7, #4]
1a00979e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a0097a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0097a6:	2b00      	cmp	r3, #0
1a0097a8:	bf14      	ite	ne
1a0097aa:	2301      	movne	r3, #1
1a0097ac:	2300      	moveq	r3, #0
1a0097ae:	b2db      	uxtb	r3, r3
1a0097b0:	461a      	mov	r2, r3
1a0097b2:	4b08      	ldr	r3, [pc, #32]	; (1a0097d4 <inv_generate_eMPL_outputs+0x164>)
1a0097b4:	621a      	str	r2, [r3, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->quat.timestamp;
1a0097b6:	687b      	ldr	r3, [r7, #4]
1a0097b8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
1a0097bc:	4a05      	ldr	r2, [pc, #20]	; (1a0097d4 <inv_generate_eMPL_outputs+0x164>)
1a0097be:	6253      	str	r3, [r2, #36]	; 0x24
        break;
1a0097c0:	bf00      	nop
    }
    
    
    return INV_SUCCESS;
1a0097c2:	2300      	movs	r3, #0
}
1a0097c4:	4618      	mov	r0, r3
1a0097c6:	3710      	adds	r7, #16
1a0097c8:	46bd      	mov	sp, r7
1a0097ca:	bd80      	pop	{r7, pc}
1a0097cc:	10086bd0 	.word	0x10086bd0
1a0097d0:	10086bbc 	.word	0x10086bbc
1a0097d4:	10086bac 	.word	0x10086bac

1a0097d8 <inv_start_eMPL_outputs>:

static inv_error_t inv_start_eMPL_outputs(void)
{
1a0097d8:	b580      	push	{r7, lr}
1a0097da:	af00      	add	r7, sp, #0
    return inv_register_data_cb(inv_generate_eMPL_outputs,
1a0097dc:	2207      	movs	r2, #7
1a0097de:	f44f 7161 	mov.w	r1, #900	; 0x384
1a0097e2:	4803      	ldr	r0, [pc, #12]	; (1a0097f0 <inv_start_eMPL_outputs+0x18>)
1a0097e4:	f7fd fe30 	bl	1a007448 <inv_register_data_cb>
1a0097e8:	4603      	mov	r3, r0
        INV_PRIORITY_HAL_OUTPUTS, INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
}
1a0097ea:	4618      	mov	r0, r3
1a0097ec:	bd80      	pop	{r7, pc}
1a0097ee:	bf00      	nop
1a0097f0:	1a009671 	.word	0x1a009671

1a0097f4 <inv_init_eMPL_outputs>:
{
    return inv_unregister_data_cb(inv_generate_eMPL_outputs);
}

static inv_error_t inv_init_eMPL_outputs(void)
{
1a0097f4:	b580      	push	{r7, lr}
1a0097f6:	af00      	add	r7, sp, #0
    memset(&eMPL_out, 0, sizeof(eMPL_out));
1a0097f8:	2228      	movs	r2, #40	; 0x28
1a0097fa:	2100      	movs	r1, #0
1a0097fc:	4802      	ldr	r0, [pc, #8]	; (1a009808 <inv_init_eMPL_outputs+0x14>)
1a0097fe:	f00b fa6b 	bl	1a014cd8 <memset>
    return INV_SUCCESS;
1a009802:	2300      	movs	r3, #0
}
1a009804:	4618      	mov	r0, r3
1a009806:	bd80      	pop	{r7, pc}
1a009808:	10086bac 	.word	0x10086bac

1a00980c <inv_enable_eMPL_outputs>:

/**
 *  @brief  Turns on creation and storage of HAL type results.
 */
inv_error_t inv_enable_eMPL_outputs(void)
{
1a00980c:	b580      	push	{r7, lr}
1a00980e:	b082      	sub	sp, #8
1a009810:	af00      	add	r7, sp, #0
    inv_error_t result;
    result = inv_init_eMPL_outputs();
1a009812:	f7ff ffef 	bl	1a0097f4 <inv_init_eMPL_outputs>
1a009816:	6078      	str	r0, [r7, #4]
    if (result)
1a009818:	687b      	ldr	r3, [r7, #4]
1a00981a:	2b00      	cmp	r3, #0
1a00981c:	d001      	beq.n	1a009822 <inv_enable_eMPL_outputs+0x16>
        return result;
1a00981e:	687b      	ldr	r3, [r7, #4]
1a009820:	e003      	b.n	1a00982a <inv_enable_eMPL_outputs+0x1e>
    return inv_register_mpl_start_notification(inv_start_eMPL_outputs);
1a009822:	4804      	ldr	r0, [pc, #16]	; (1a009834 <inv_enable_eMPL_outputs+0x28>)
1a009824:	f7ff fbe4 	bl	1a008ff0 <inv_register_mpl_start_notification>
1a009828:	4603      	mov	r3, r0
}
1a00982a:	4618      	mov	r0, r3
1a00982c:	3708      	adds	r7, #8
1a00982e:	46bd      	mov	sp, r7
1a009830:	bd80      	pop	{r7, pc}
1a009832:	bf00      	nop
1a009834:	1a0097d9 	.word	0x1a0097d9

1a009838 <reg_int_cb>:
#define get_ms      getTimerMs
#define log_i     xprintf
#define log_e     xprintf
extern int i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t length, uint8_t const *data);
extern int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t length, uint8_t *data);
static inline int reg_int_cb(struct int_param_s *int_param) {
1a009838:	b480      	push	{r7}
1a00983a:	b083      	sub	sp, #12
1a00983c:	af00      	add	r7, sp, #0
1a00983e:	6078      	str	r0, [r7, #4]
	return 0; //Not using interrupts
1a009840:	2300      	movs	r3, #0
}
1a009842:	4618      	mov	r0, r3
1a009844:	370c      	adds	r7, #12
1a009846:	46bd      	mov	sp, r7
1a009848:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00984c:	4770      	bx	lr
1a00984e:	bf00      	nop

1a009850 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
1a009850:	b580      	push	{r7, lr}
1a009852:	b084      	sub	sp, #16
1a009854:	af00      	add	r7, sp, #0
1a009856:	4603      	mov	r3, r0
1a009858:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
1a00985a:	4b29      	ldr	r3, [pc, #164]	; (1a009900 <set_int_enable+0xb0>)
1a00985c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a009860:	2b00      	cmp	r3, #0
1a009862:	d01c      	beq.n	1a00989e <set_int_enable+0x4e>
        if (enable)
1a009864:	79fb      	ldrb	r3, [r7, #7]
1a009866:	2b00      	cmp	r3, #0
1a009868:	d002      	beq.n	1a009870 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
1a00986a:	2302      	movs	r3, #2
1a00986c:	73fb      	strb	r3, [r7, #15]
1a00986e:	e001      	b.n	1a009874 <set_int_enable+0x24>
        else
            tmp = 0x00;
1a009870:	2300      	movs	r3, #0
1a009872:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
1a009874:	4b22      	ldr	r3, [pc, #136]	; (1a009900 <set_int_enable+0xb0>)
1a009876:	685b      	ldr	r3, [r3, #4]
1a009878:	7818      	ldrb	r0, [r3, #0]
1a00987a:	4b21      	ldr	r3, [pc, #132]	; (1a009900 <set_int_enable+0xb0>)
1a00987c:	681b      	ldr	r3, [r3, #0]
1a00987e:	7c59      	ldrb	r1, [r3, #17]
1a009880:	f107 030f 	add.w	r3, r7, #15
1a009884:	2201      	movs	r2, #1
1a009886:	f7f9 fa37 	bl	1a002cf8 <i2c_write>
1a00988a:	4603      	mov	r3, r0
1a00988c:	2b00      	cmp	r3, #0
1a00988e:	d002      	beq.n	1a009896 <set_int_enable+0x46>
            return -1;
1a009890:	f04f 33ff 	mov.w	r3, #4294967295
1a009894:	e030      	b.n	1a0098f8 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
1a009896:	7bfa      	ldrb	r2, [r7, #15]
1a009898:	4b19      	ldr	r3, [pc, #100]	; (1a009900 <set_int_enable+0xb0>)
1a00989a:	745a      	strb	r2, [r3, #17]
1a00989c:	e02b      	b.n	1a0098f6 <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
1a00989e:	4b18      	ldr	r3, [pc, #96]	; (1a009900 <set_int_enable+0xb0>)
1a0098a0:	7a9b      	ldrb	r3, [r3, #10]
1a0098a2:	2b00      	cmp	r3, #0
1a0098a4:	d102      	bne.n	1a0098ac <set_int_enable+0x5c>
            return -1;
1a0098a6:	f04f 33ff 	mov.w	r3, #4294967295
1a0098aa:	e025      	b.n	1a0098f8 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
1a0098ac:	79fb      	ldrb	r3, [r7, #7]
1a0098ae:	2b00      	cmp	r3, #0
1a0098b0:	d005      	beq.n	1a0098be <set_int_enable+0x6e>
1a0098b2:	4b13      	ldr	r3, [pc, #76]	; (1a009900 <set_int_enable+0xb0>)
1a0098b4:	7c5b      	ldrb	r3, [r3, #17]
1a0098b6:	2b00      	cmp	r3, #0
1a0098b8:	d001      	beq.n	1a0098be <set_int_enable+0x6e>
            return 0;
1a0098ba:	2300      	movs	r3, #0
1a0098bc:	e01c      	b.n	1a0098f8 <set_int_enable+0xa8>
        if (enable)
1a0098be:	79fb      	ldrb	r3, [r7, #7]
1a0098c0:	2b00      	cmp	r3, #0
1a0098c2:	d002      	beq.n	1a0098ca <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
1a0098c4:	2301      	movs	r3, #1
1a0098c6:	73fb      	strb	r3, [r7, #15]
1a0098c8:	e001      	b.n	1a0098ce <set_int_enable+0x7e>
        else
            tmp = 0x00;
1a0098ca:	2300      	movs	r3, #0
1a0098cc:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
1a0098ce:	4b0c      	ldr	r3, [pc, #48]	; (1a009900 <set_int_enable+0xb0>)
1a0098d0:	685b      	ldr	r3, [r3, #4]
1a0098d2:	7818      	ldrb	r0, [r3, #0]
1a0098d4:	4b0a      	ldr	r3, [pc, #40]	; (1a009900 <set_int_enable+0xb0>)
1a0098d6:	681b      	ldr	r3, [r3, #0]
1a0098d8:	7c59      	ldrb	r1, [r3, #17]
1a0098da:	f107 030f 	add.w	r3, r7, #15
1a0098de:	2201      	movs	r2, #1
1a0098e0:	f7f9 fa0a 	bl	1a002cf8 <i2c_write>
1a0098e4:	4603      	mov	r3, r0
1a0098e6:	2b00      	cmp	r3, #0
1a0098e8:	d002      	beq.n	1a0098f0 <set_int_enable+0xa0>
            return -1;
1a0098ea:	f04f 33ff 	mov.w	r3, #4294967295
1a0098ee:	e003      	b.n	1a0098f8 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
1a0098f0:	7bfa      	ldrb	r2, [r7, #15]
1a0098f2:	4b03      	ldr	r3, [pc, #12]	; (1a009900 <set_int_enable+0xb0>)
1a0098f4:	745a      	strb	r2, [r3, #17]
    }
    return 0;
1a0098f6:	2300      	movs	r3, #0
}
1a0098f8:	4618      	mov	r0, r3
1a0098fa:	3710      	adds	r7, #16
1a0098fc:	46bd      	mov	sp, r7
1a0098fe:	bd80      	pop	{r7, pc}
1a009900:	10086034 	.word	0x10086034

1a009904 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
1a009904:	b580      	push	{r7, lr}
1a009906:	b084      	sub	sp, #16
1a009908:	af00      	add	r7, sp, #0
1a00990a:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
1a00990c:	2380      	movs	r3, #128	; 0x80
1a00990e:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
1a009910:	4b55      	ldr	r3, [pc, #340]	; (1a009a68 <mpu_init+0x164>)
1a009912:	685b      	ldr	r3, [r3, #4]
1a009914:	7818      	ldrb	r0, [r3, #0]
1a009916:	4b54      	ldr	r3, [pc, #336]	; (1a009a68 <mpu_init+0x164>)
1a009918:	681b      	ldr	r3, [r3, #0]
1a00991a:	7d59      	ldrb	r1, [r3, #21]
1a00991c:	f107 0308 	add.w	r3, r7, #8
1a009920:	2201      	movs	r2, #1
1a009922:	f7f9 f9e9 	bl	1a002cf8 <i2c_write>
1a009926:	4603      	mov	r3, r0
1a009928:	2b00      	cmp	r3, #0
1a00992a:	d002      	beq.n	1a009932 <mpu_init+0x2e>
        return -1;
1a00992c:	f04f 33ff 	mov.w	r3, #4294967295
1a009930:	e096      	b.n	1a009a60 <mpu_init+0x15c>
    delay_ms(100);
1a009932:	2064      	movs	r0, #100	; 0x64
1a009934:	f7fc fe60 	bl	1a0065f8 <timerDelayMs>

    /* Wake up chip. */
    data[0] = 0x00;
1a009938:	2300      	movs	r3, #0
1a00993a:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
1a00993c:	4b4a      	ldr	r3, [pc, #296]	; (1a009a68 <mpu_init+0x164>)
1a00993e:	685b      	ldr	r3, [r3, #4]
1a009940:	7818      	ldrb	r0, [r3, #0]
1a009942:	4b49      	ldr	r3, [pc, #292]	; (1a009a68 <mpu_init+0x164>)
1a009944:	681b      	ldr	r3, [r3, #0]
1a009946:	7d59      	ldrb	r1, [r3, #21]
1a009948:	f107 0308 	add.w	r3, r7, #8
1a00994c:	2201      	movs	r2, #1
1a00994e:	f7f9 f9d3 	bl	1a002cf8 <i2c_write>
1a009952:	4603      	mov	r3, r0
1a009954:	2b00      	cmp	r3, #0
1a009956:	d002      	beq.n	1a00995e <mpu_init+0x5a>
        return -1;
1a009958:	f04f 33ff 	mov.w	r3, #4294967295
1a00995c:	e080      	b.n	1a009a60 <mpu_init+0x15c>

   st.chip_cfg.accel_half = 0;
1a00995e:	4b42      	ldr	r3, [pc, #264]	; (1a009a68 <mpu_init+0x164>)
1a009960:	2200      	movs	r2, #0
1a009962:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
1a009964:	4b40      	ldr	r3, [pc, #256]	; (1a009a68 <mpu_init+0x164>)
1a009966:	22ff      	movs	r2, #255	; 0xff
1a009968:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
1a00996a:	4b3f      	ldr	r3, [pc, #252]	; (1a009a68 <mpu_init+0x164>)
1a00996c:	22ff      	movs	r2, #255	; 0xff
1a00996e:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
1a009970:	4b3d      	ldr	r3, [pc, #244]	; (1a009a68 <mpu_init+0x164>)
1a009972:	22ff      	movs	r2, #255	; 0xff
1a009974:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
1a009976:	4b3c      	ldr	r3, [pc, #240]	; (1a009a68 <mpu_init+0x164>)
1a009978:	22ff      	movs	r2, #255	; 0xff
1a00997a:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
1a00997c:	4b3a      	ldr	r3, [pc, #232]	; (1a009a68 <mpu_init+0x164>)
1a00997e:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a009982:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
1a009984:	4b38      	ldr	r3, [pc, #224]	; (1a009a68 <mpu_init+0x164>)
1a009986:	22ff      	movs	r2, #255	; 0xff
1a009988:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
1a00998a:	4b37      	ldr	r3, [pc, #220]	; (1a009a68 <mpu_init+0x164>)
1a00998c:	22ff      	movs	r2, #255	; 0xff
1a00998e:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
1a009990:	4b35      	ldr	r3, [pc, #212]	; (1a009a68 <mpu_init+0x164>)
1a009992:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a009996:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
1a009998:	4b33      	ldr	r3, [pc, #204]	; (1a009a68 <mpu_init+0x164>)
1a00999a:	2201      	movs	r2, #1
1a00999c:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
1a00999e:	4b32      	ldr	r3, [pc, #200]	; (1a009a68 <mpu_init+0x164>)
1a0099a0:	2201      	movs	r2, #1
1a0099a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
1a0099a6:	4b30      	ldr	r3, [pc, #192]	; (1a009a68 <mpu_init+0x164>)
1a0099a8:	2200      	movs	r2, #0
1a0099aa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
1a0099ae:	4b2e      	ldr	r3, [pc, #184]	; (1a009a68 <mpu_init+0x164>)
1a0099b0:	2200      	movs	r2, #0
1a0099b2:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
1a0099b4:	4b2c      	ldr	r3, [pc, #176]	; (1a009a68 <mpu_init+0x164>)
1a0099b6:	2200      	movs	r2, #0
1a0099b8:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
1a0099ba:	220c      	movs	r2, #12
1a0099bc:	2100      	movs	r1, #0
1a0099be:	482b      	ldr	r0, [pc, #172]	; (1a009a6c <mpu_init+0x168>)
1a0099c0:	f00b f98a 	bl	1a014cd8 <memset>
    st.chip_cfg.dmp_on = 0;
1a0099c4:	4b28      	ldr	r3, [pc, #160]	; (1a009a68 <mpu_init+0x164>)
1a0099c6:	2200      	movs	r2, #0
1a0099c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
1a0099cc:	4b26      	ldr	r3, [pc, #152]	; (1a009a68 <mpu_init+0x164>)
1a0099ce:	2200      	movs	r2, #0
1a0099d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
1a0099d4:	4b24      	ldr	r3, [pc, #144]	; (1a009a68 <mpu_init+0x164>)
1a0099d6:	2200      	movs	r2, #0
1a0099d8:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
1a0099da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
1a0099de:	f000 fa57 	bl	1a009e90 <mpu_set_gyro_fsr>
1a0099e2:	4603      	mov	r3, r0
1a0099e4:	2b00      	cmp	r3, #0
1a0099e6:	d002      	beq.n	1a0099ee <mpu_init+0xea>
        return -1;
1a0099e8:	f04f 33ff 	mov.w	r3, #4294967295
1a0099ec:	e038      	b.n	1a009a60 <mpu_init+0x15c>
    if (mpu_set_accel_fsr(2))
1a0099ee:	2002      	movs	r0, #2
1a0099f0:	f000 fada 	bl	1a009fa8 <mpu_set_accel_fsr>
1a0099f4:	4603      	mov	r3, r0
1a0099f6:	2b00      	cmp	r3, #0
1a0099f8:	d002      	beq.n	1a009a00 <mpu_init+0xfc>
        return -1;
1a0099fa:	f04f 33ff 	mov.w	r3, #4294967295
1a0099fe:	e02f      	b.n	1a009a60 <mpu_init+0x15c>
    if (mpu_set_lpf(42))
1a009a00:	202a      	movs	r0, #42	; 0x2a
1a009a02:	f000 fb39 	bl	1a00a078 <mpu_set_lpf>
1a009a06:	4603      	mov	r3, r0
1a009a08:	2b00      	cmp	r3, #0
1a009a0a:	d002      	beq.n	1a009a12 <mpu_init+0x10e>
        return -1;
1a009a0c:	f04f 33ff 	mov.w	r3, #4294967295
1a009a10:	e026      	b.n	1a009a60 <mpu_init+0x15c>
    if (mpu_set_sample_rate(50))
1a009a12:	2032      	movs	r0, #50	; 0x32
1a009a14:	f000 fb98 	bl	1a00a148 <mpu_set_sample_rate>
1a009a18:	4603      	mov	r3, r0
1a009a1a:	2b00      	cmp	r3, #0
1a009a1c:	d002      	beq.n	1a009a24 <mpu_init+0x120>
        return -1;
1a009a1e:	f04f 33ff 	mov.w	r3, #4294967295
1a009a22:	e01d      	b.n	1a009a60 <mpu_init+0x15c>
    if (mpu_configure_fifo(0))
1a009a24:	2000      	movs	r0, #0
1a009a26:	f000 fc3d 	bl	1a00a2a4 <mpu_configure_fifo>
1a009a2a:	4603      	mov	r3, r0
1a009a2c:	2b00      	cmp	r3, #0
1a009a2e:	d002      	beq.n	1a009a36 <mpu_init+0x132>
        return -1;
1a009a30:	f04f 33ff 	mov.w	r3, #4294967295
1a009a34:	e014      	b.n	1a009a60 <mpu_init+0x15c>

#ifndef EMPL_TARGET_STM32L    
    if (int_param)
1a009a36:	687b      	ldr	r3, [r7, #4]
1a009a38:	2b00      	cmp	r3, #0
1a009a3a:	d002      	beq.n	1a009a42 <mpu_init+0x13e>
        reg_int_cb(int_param);
1a009a3c:	6878      	ldr	r0, [r7, #4]
1a009a3e:	f7ff fefb 	bl	1a009838 <reg_int_cb>
#endif

#ifdef AK89xx_SECONDARY
    setup_compass();
1a009a42:	f001 f86f 	bl	1a00ab24 <setup_compass>
    if (mpu_set_compass_sample_rate(10))
1a009a46:	200a      	movs	r0, #10
1a009a48:	f000 fbec 	bl	1a00a224 <mpu_set_compass_sample_rate>
1a009a4c:	4603      	mov	r3, r0
1a009a4e:	2b00      	cmp	r3, #0
1a009a50:	d002      	beq.n	1a009a58 <mpu_init+0x154>
        return -1;
1a009a52:	f04f 33ff 	mov.w	r3, #4294967295
1a009a56:	e003      	b.n	1a009a60 <mpu_init+0x15c>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
1a009a58:	2000      	movs	r0, #0
1a009a5a:	f000 fc75 	bl	1a00a348 <mpu_set_sensors>
    return 0;
1a009a5e:	2300      	movs	r3, #0
}
1a009a60:	4618      	mov	r0, r3
1a009a62:	3710      	adds	r7, #16
1a009a64:	46bd      	mov	sp, r7
1a009a66:	bd80      	pop	{r7, pc}
1a009a68:	10086034 	.word	0x10086034
1a009a6c:	1008604a 	.word	0x1008604a

1a009a70 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
1a009a70:	b580      	push	{r7, lr}
1a009a72:	b084      	sub	sp, #16
1a009a74:	af00      	add	r7, sp, #0
1a009a76:	4603      	mov	r3, r0
1a009a78:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    if (rate > 40)
1a009a7a:	88fb      	ldrh	r3, [r7, #6]
1a009a7c:	2b28      	cmp	r3, #40	; 0x28
1a009a7e:	d902      	bls.n	1a009a86 <mpu_lp_accel_mode+0x16>
        return -1;
1a009a80:	f04f 33ff 	mov.w	r3, #4294967295
1a009a84:	e06a      	b.n	1a009b5c <mpu_lp_accel_mode+0xec>

    if (!rate) {
1a009a86:	88fb      	ldrh	r3, [r7, #6]
1a009a88:	2b00      	cmp	r3, #0
1a009a8a:	d11c      	bne.n	1a009ac6 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
1a009a8c:	2000      	movs	r0, #0
1a009a8e:	f000 fe8f 	bl	1a00a7b0 <mpu_set_int_latched>
        tmp[0] = 0;
1a009a92:	2300      	movs	r3, #0
1a009a94:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
1a009a96:	2307      	movs	r3, #7
1a009a98:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
1a009a9a:	4b32      	ldr	r3, [pc, #200]	; (1a009b64 <mpu_lp_accel_mode+0xf4>)
1a009a9c:	685b      	ldr	r3, [r3, #4]
1a009a9e:	7818      	ldrb	r0, [r3, #0]
1a009aa0:	4b30      	ldr	r3, [pc, #192]	; (1a009b64 <mpu_lp_accel_mode+0xf4>)
1a009aa2:	681b      	ldr	r3, [r3, #0]
1a009aa4:	7d59      	ldrb	r1, [r3, #21]
1a009aa6:	f107 030c 	add.w	r3, r7, #12
1a009aaa:	2202      	movs	r2, #2
1a009aac:	f7f9 f924 	bl	1a002cf8 <i2c_write>
1a009ab0:	4603      	mov	r3, r0
1a009ab2:	2b00      	cmp	r3, #0
1a009ab4:	d002      	beq.n	1a009abc <mpu_lp_accel_mode+0x4c>
            return -1;
1a009ab6:	f04f 33ff 	mov.w	r3, #4294967295
1a009aba:	e04f      	b.n	1a009b5c <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
1a009abc:	4b29      	ldr	r3, [pc, #164]	; (1a009b64 <mpu_lp_accel_mode+0xf4>)
1a009abe:	2200      	movs	r2, #0
1a009ac0:	751a      	strb	r2, [r3, #20]
        return 0;
1a009ac2:	2300      	movs	r3, #0
1a009ac4:	e04a      	b.n	1a009b5c <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
1a009ac6:	2001      	movs	r0, #1
1a009ac8:	f000 fe72 	bl	1a00a7b0 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
1a009acc:	2320      	movs	r3, #32
1a009ace:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
1a009ad0:	88fb      	ldrh	r3, [r7, #6]
1a009ad2:	2b01      	cmp	r3, #1
1a009ad4:	d105      	bne.n	1a009ae2 <mpu_lp_accel_mode+0x72>
        tmp[1] = INV_LPA_1_25HZ;
1a009ad6:	2300      	movs	r3, #0
1a009ad8:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
1a009ada:	2005      	movs	r0, #5
1a009adc:	f000 facc 	bl	1a00a078 <mpu_set_lpf>
1a009ae0:	e016      	b.n	1a009b10 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 5) {
1a009ae2:	88fb      	ldrh	r3, [r7, #6]
1a009ae4:	2b05      	cmp	r3, #5
1a009ae6:	d805      	bhi.n	1a009af4 <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_5HZ;
1a009ae8:	2301      	movs	r3, #1
1a009aea:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
1a009aec:	2005      	movs	r0, #5
1a009aee:	f000 fac3 	bl	1a00a078 <mpu_set_lpf>
1a009af2:	e00d      	b.n	1a009b10 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 20) {
1a009af4:	88fb      	ldrh	r3, [r7, #6]
1a009af6:	2b14      	cmp	r3, #20
1a009af8:	d805      	bhi.n	1a009b06 <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_20HZ;
1a009afa:	2302      	movs	r3, #2
1a009afc:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
1a009afe:	200a      	movs	r0, #10
1a009b00:	f000 faba 	bl	1a00a078 <mpu_set_lpf>
1a009b04:	e004      	b.n	1a009b10 <mpu_lp_accel_mode+0xa0>
    } else {
        tmp[1] = INV_LPA_40HZ;
1a009b06:	2303      	movs	r3, #3
1a009b08:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
1a009b0a:	2014      	movs	r0, #20
1a009b0c:	f000 fab4 	bl	1a00a078 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
1a009b10:	7b7b      	ldrb	r3, [r7, #13]
1a009b12:	019b      	lsls	r3, r3, #6
1a009b14:	b2db      	uxtb	r3, r3
1a009b16:	f043 0307 	orr.w	r3, r3, #7
1a009b1a:	b2db      	uxtb	r3, r3
1a009b1c:	b2db      	uxtb	r3, r3
1a009b1e:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
1a009b20:	4b10      	ldr	r3, [pc, #64]	; (1a009b64 <mpu_lp_accel_mode+0xf4>)
1a009b22:	685b      	ldr	r3, [r3, #4]
1a009b24:	7818      	ldrb	r0, [r3, #0]
1a009b26:	4b0f      	ldr	r3, [pc, #60]	; (1a009b64 <mpu_lp_accel_mode+0xf4>)
1a009b28:	681b      	ldr	r3, [r3, #0]
1a009b2a:	7d59      	ldrb	r1, [r3, #21]
1a009b2c:	f107 030c 	add.w	r3, r7, #12
1a009b30:	2202      	movs	r2, #2
1a009b32:	f7f9 f8e1 	bl	1a002cf8 <i2c_write>
1a009b36:	4603      	mov	r3, r0
1a009b38:	2b00      	cmp	r3, #0
1a009b3a:	d002      	beq.n	1a009b42 <mpu_lp_accel_mode+0xd2>
        return -1;
1a009b3c:	f04f 33ff 	mov.w	r3, #4294967295
1a009b40:	e00c      	b.n	1a009b5c <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
1a009b42:	4b08      	ldr	r3, [pc, #32]	; (1a009b64 <mpu_lp_accel_mode+0xf4>)
1a009b44:	2208      	movs	r2, #8
1a009b46:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
1a009b48:	4b06      	ldr	r3, [pc, #24]	; (1a009b64 <mpu_lp_accel_mode+0xf4>)
1a009b4a:	2200      	movs	r2, #0
1a009b4c:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
1a009b4e:	4b05      	ldr	r3, [pc, #20]	; (1a009b64 <mpu_lp_accel_mode+0xf4>)
1a009b50:	2201      	movs	r2, #1
1a009b52:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
1a009b54:	2000      	movs	r0, #0
1a009b56:	f000 fba5 	bl	1a00a2a4 <mpu_configure_fifo>

    return 0;
1a009b5a:	2300      	movs	r3, #0
}
1a009b5c:	4618      	mov	r0, r3
1a009b5e:	3710      	adds	r7, #16
1a009b60:	46bd      	mov	sp, r7
1a009b62:	bd80      	pop	{r7, pc}
1a009b64:	10086034 	.word	0x10086034

1a009b68 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
1a009b68:	b580      	push	{r7, lr}
1a009b6a:	b084      	sub	sp, #16
1a009b6c:	af00      	add	r7, sp, #0
1a009b6e:	6078      	str	r0, [r7, #4]
1a009b70:	6039      	str	r1, [r7, #0]
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
1a009b72:	4b28      	ldr	r3, [pc, #160]	; (1a009c14 <mpu_get_temperature+0xac>)
1a009b74:	7a9b      	ldrb	r3, [r3, #10]
1a009b76:	2b00      	cmp	r3, #0
1a009b78:	d102      	bne.n	1a009b80 <mpu_get_temperature+0x18>
        return -1;
1a009b7a:	f04f 33ff 	mov.w	r3, #4294967295
1a009b7e:	e045      	b.n	1a009c0c <mpu_get_temperature+0xa4>

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
1a009b80:	4b24      	ldr	r3, [pc, #144]	; (1a009c14 <mpu_get_temperature+0xac>)
1a009b82:	685b      	ldr	r3, [r3, #4]
1a009b84:	7818      	ldrb	r0, [r3, #0]
1a009b86:	4b23      	ldr	r3, [pc, #140]	; (1a009c14 <mpu_get_temperature+0xac>)
1a009b88:	681b      	ldr	r3, [r3, #0]
1a009b8a:	7c19      	ldrb	r1, [r3, #16]
1a009b8c:	f107 030c 	add.w	r3, r7, #12
1a009b90:	2202      	movs	r2, #2
1a009b92:	f7f9 f8df 	bl	1a002d54 <i2c_read>
1a009b96:	4603      	mov	r3, r0
1a009b98:	2b00      	cmp	r3, #0
1a009b9a:	d002      	beq.n	1a009ba2 <mpu_get_temperature+0x3a>
        return -1;
1a009b9c:	f04f 33ff 	mov.w	r3, #4294967295
1a009ba0:	e034      	b.n	1a009c0c <mpu_get_temperature+0xa4>
    raw = (tmp[0] << 8) | tmp[1];
1a009ba2:	7b3b      	ldrb	r3, [r7, #12]
1a009ba4:	021b      	lsls	r3, r3, #8
1a009ba6:	b29a      	uxth	r2, r3
1a009ba8:	7b7b      	ldrb	r3, [r7, #13]
1a009baa:	b29b      	uxth	r3, r3
1a009bac:	4313      	orrs	r3, r2
1a009bae:	81fb      	strh	r3, [r7, #14]
    if (timestamp)
1a009bb0:	683b      	ldr	r3, [r7, #0]
1a009bb2:	2b00      	cmp	r3, #0
1a009bb4:	d002      	beq.n	1a009bbc <mpu_get_temperature+0x54>
        get_ms(timestamp);
1a009bb6:	6838      	ldr	r0, [r7, #0]
1a009bb8:	f7fc fd5c 	bl	1a006674 <getTimerMs>

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
1a009bbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
1a009bc0:	ee07 3a90 	vmov	s15, r3
1a009bc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
1a009bc8:	4b12      	ldr	r3, [pc, #72]	; (1a009c14 <mpu_get_temperature+0xac>)
1a009bca:	685b      	ldr	r3, [r3, #4]
1a009bcc:	891b      	ldrh	r3, [r3, #8]
1a009bce:	b21b      	sxth	r3, r3
1a009bd0:	ee07 3a90 	vmov	s15, r3
1a009bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a009bd8:	ee77 6a67 	vsub.f32	s13, s14, s15
1a009bdc:	4b0d      	ldr	r3, [pc, #52]	; (1a009c14 <mpu_get_temperature+0xac>)
1a009bde:	685b      	ldr	r3, [r3, #4]
1a009be0:	88db      	ldrh	r3, [r3, #6]
1a009be2:	ee07 3a90 	vmov	s15, r3
1a009be6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
1a009bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
1a009bee:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 1a009c18 <mpu_get_temperature+0xb0>
1a009bf2:	ee77 7a87 	vadd.f32	s15, s15, s14
1a009bf6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 1a009c1c <mpu_get_temperature+0xb4>
1a009bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
1a009bfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a009c02:	ee17 2a90 	vmov	r2, s15
1a009c06:	687b      	ldr	r3, [r7, #4]
1a009c08:	601a      	str	r2, [r3, #0]
    return 0;
1a009c0a:	2300      	movs	r3, #0
}
1a009c0c:	4618      	mov	r0, r3
1a009c0e:	3710      	adds	r7, #16
1a009c10:	46bd      	mov	sp, r7
1a009c12:	bd80      	pop	{r7, pc}
1a009c14:	10086034 	.word	0x10086034
1a009c18:	420c0000 	.word	0x420c0000
1a009c1c:	47800000 	.word	0x47800000

1a009c20 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
1a009c20:	b580      	push	{r7, lr}
1a009c22:	b082      	sub	sp, #8
1a009c24:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1a009c26:	4b7e      	ldr	r3, [pc, #504]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009c28:	7a9b      	ldrb	r3, [r3, #10]
1a009c2a:	2b00      	cmp	r3, #0
1a009c2c:	d102      	bne.n	1a009c34 <mpu_reset_fifo+0x14>
        return -1;
1a009c2e:	f04f 33ff 	mov.w	r3, #4294967295
1a009c32:	e0f1      	b.n	1a009e18 <mpu_reset_fifo+0x1f8>

    data = 0;
1a009c34:	2300      	movs	r3, #0
1a009c36:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1a009c38:	4b79      	ldr	r3, [pc, #484]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009c3a:	685b      	ldr	r3, [r3, #4]
1a009c3c:	7818      	ldrb	r0, [r3, #0]
1a009c3e:	4b78      	ldr	r3, [pc, #480]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009c40:	681b      	ldr	r3, [r3, #0]
1a009c42:	7c59      	ldrb	r1, [r3, #17]
1a009c44:	1dfb      	adds	r3, r7, #7
1a009c46:	2201      	movs	r2, #1
1a009c48:	f7f9 f856 	bl	1a002cf8 <i2c_write>
1a009c4c:	4603      	mov	r3, r0
1a009c4e:	2b00      	cmp	r3, #0
1a009c50:	d002      	beq.n	1a009c58 <mpu_reset_fifo+0x38>
        return -1;
1a009c52:	f04f 33ff 	mov.w	r3, #4294967295
1a009c56:	e0df      	b.n	1a009e18 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
1a009c58:	4b71      	ldr	r3, [pc, #452]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009c5a:	685b      	ldr	r3, [r3, #4]
1a009c5c:	7818      	ldrb	r0, [r3, #0]
1a009c5e:	4b70      	ldr	r3, [pc, #448]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009c60:	681b      	ldr	r3, [r3, #0]
1a009c62:	7959      	ldrb	r1, [r3, #5]
1a009c64:	1dfb      	adds	r3, r7, #7
1a009c66:	2201      	movs	r2, #1
1a009c68:	f7f9 f846 	bl	1a002cf8 <i2c_write>
1a009c6c:	4603      	mov	r3, r0
1a009c6e:	2b00      	cmp	r3, #0
1a009c70:	d002      	beq.n	1a009c78 <mpu_reset_fifo+0x58>
        return -1;
1a009c72:	f04f 33ff 	mov.w	r3, #4294967295
1a009c76:	e0cf      	b.n	1a009e18 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1a009c78:	4b69      	ldr	r3, [pc, #420]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009c7a:	685b      	ldr	r3, [r3, #4]
1a009c7c:	7818      	ldrb	r0, [r3, #0]
1a009c7e:	4b68      	ldr	r3, [pc, #416]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009c80:	681b      	ldr	r3, [r3, #0]
1a009c82:	7919      	ldrb	r1, [r3, #4]
1a009c84:	1dfb      	adds	r3, r7, #7
1a009c86:	2201      	movs	r2, #1
1a009c88:	f7f9 f836 	bl	1a002cf8 <i2c_write>
1a009c8c:	4603      	mov	r3, r0
1a009c8e:	2b00      	cmp	r3, #0
1a009c90:	d002      	beq.n	1a009c98 <mpu_reset_fifo+0x78>
        return -1;
1a009c92:	f04f 33ff 	mov.w	r3, #4294967295
1a009c96:	e0bf      	b.n	1a009e18 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
1a009c98:	4b61      	ldr	r3, [pc, #388]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009c9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a009c9e:	2b00      	cmp	r3, #0
1a009ca0:	d05c      	beq.n	1a009d5c <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
1a009ca2:	230c      	movs	r3, #12
1a009ca4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1a009ca6:	4b5e      	ldr	r3, [pc, #376]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009ca8:	685b      	ldr	r3, [r3, #4]
1a009caa:	7818      	ldrb	r0, [r3, #0]
1a009cac:	4b5c      	ldr	r3, [pc, #368]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009cae:	681b      	ldr	r3, [r3, #0]
1a009cb0:	7919      	ldrb	r1, [r3, #4]
1a009cb2:	1dfb      	adds	r3, r7, #7
1a009cb4:	2201      	movs	r2, #1
1a009cb6:	f7f9 f81f 	bl	1a002cf8 <i2c_write>
1a009cba:	4603      	mov	r3, r0
1a009cbc:	2b00      	cmp	r3, #0
1a009cbe:	d002      	beq.n	1a009cc6 <mpu_reset_fifo+0xa6>
            return -1;
1a009cc0:	f04f 33ff 	mov.w	r3, #4294967295
1a009cc4:	e0a8      	b.n	1a009e18 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
1a009cc6:	2032      	movs	r0, #50	; 0x32
1a009cc8:	f7fc fc96 	bl	1a0065f8 <timerDelayMs>
        data = BIT_DMP_EN | BIT_FIFO_EN;
1a009ccc:	23c0      	movs	r3, #192	; 0xc0
1a009cce:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
1a009cd0:	4b53      	ldr	r3, [pc, #332]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009cd2:	7a9b      	ldrb	r3, [r3, #10]
1a009cd4:	f003 0301 	and.w	r3, r3, #1
1a009cd8:	2b00      	cmp	r3, #0
1a009cda:	d004      	beq.n	1a009ce6 <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
1a009cdc:	79fb      	ldrb	r3, [r7, #7]
1a009cde:	f043 0320 	orr.w	r3, r3, #32
1a009ce2:	b2db      	uxtb	r3, r3
1a009ce4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1a009ce6:	4b4e      	ldr	r3, [pc, #312]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009ce8:	685b      	ldr	r3, [r3, #4]
1a009cea:	7818      	ldrb	r0, [r3, #0]
1a009cec:	4b4c      	ldr	r3, [pc, #304]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009cee:	681b      	ldr	r3, [r3, #0]
1a009cf0:	7919      	ldrb	r1, [r3, #4]
1a009cf2:	1dfb      	adds	r3, r7, #7
1a009cf4:	2201      	movs	r2, #1
1a009cf6:	f7f8 ffff 	bl	1a002cf8 <i2c_write>
1a009cfa:	4603      	mov	r3, r0
1a009cfc:	2b00      	cmp	r3, #0
1a009cfe:	d002      	beq.n	1a009d06 <mpu_reset_fifo+0xe6>
            return -1;
1a009d00:	f04f 33ff 	mov.w	r3, #4294967295
1a009d04:	e088      	b.n	1a009e18 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
1a009d06:	4b46      	ldr	r3, [pc, #280]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009d08:	7c5b      	ldrb	r3, [r3, #17]
1a009d0a:	2b00      	cmp	r3, #0
1a009d0c:	d002      	beq.n	1a009d14 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
1a009d0e:	2302      	movs	r3, #2
1a009d10:	71fb      	strb	r3, [r7, #7]
1a009d12:	e001      	b.n	1a009d18 <mpu_reset_fifo+0xf8>
        else
            data = 0;
1a009d14:	2300      	movs	r3, #0
1a009d16:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1a009d18:	4b41      	ldr	r3, [pc, #260]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009d1a:	685b      	ldr	r3, [r3, #4]
1a009d1c:	7818      	ldrb	r0, [r3, #0]
1a009d1e:	4b40      	ldr	r3, [pc, #256]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009d20:	681b      	ldr	r3, [r3, #0]
1a009d22:	7c59      	ldrb	r1, [r3, #17]
1a009d24:	1dfb      	adds	r3, r7, #7
1a009d26:	2201      	movs	r2, #1
1a009d28:	f7f8 ffe6 	bl	1a002cf8 <i2c_write>
1a009d2c:	4603      	mov	r3, r0
1a009d2e:	2b00      	cmp	r3, #0
1a009d30:	d002      	beq.n	1a009d38 <mpu_reset_fifo+0x118>
            return -1;
1a009d32:	f04f 33ff 	mov.w	r3, #4294967295
1a009d36:	e06f      	b.n	1a009e18 <mpu_reset_fifo+0x1f8>
        data = 0;
1a009d38:	2300      	movs	r3, #0
1a009d3a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
1a009d3c:	4b38      	ldr	r3, [pc, #224]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009d3e:	685b      	ldr	r3, [r3, #4]
1a009d40:	7818      	ldrb	r0, [r3, #0]
1a009d42:	4b37      	ldr	r3, [pc, #220]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009d44:	681b      	ldr	r3, [r3, #0]
1a009d46:	7959      	ldrb	r1, [r3, #5]
1a009d48:	1dfb      	adds	r3, r7, #7
1a009d4a:	2201      	movs	r2, #1
1a009d4c:	f7f8 ffd4 	bl	1a002cf8 <i2c_write>
1a009d50:	4603      	mov	r3, r0
1a009d52:	2b00      	cmp	r3, #0
1a009d54:	d05f      	beq.n	1a009e16 <mpu_reset_fifo+0x1f6>
            return -1;
1a009d56:	f04f 33ff 	mov.w	r3, #4294967295
1a009d5a:	e05d      	b.n	1a009e18 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
1a009d5c:	2304      	movs	r3, #4
1a009d5e:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1a009d60:	4b2f      	ldr	r3, [pc, #188]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009d62:	685b      	ldr	r3, [r3, #4]
1a009d64:	7818      	ldrb	r0, [r3, #0]
1a009d66:	4b2e      	ldr	r3, [pc, #184]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009d68:	681b      	ldr	r3, [r3, #0]
1a009d6a:	7919      	ldrb	r1, [r3, #4]
1a009d6c:	1dfb      	adds	r3, r7, #7
1a009d6e:	2201      	movs	r2, #1
1a009d70:	f7f8 ffc2 	bl	1a002cf8 <i2c_write>
1a009d74:	4603      	mov	r3, r0
1a009d76:	2b00      	cmp	r3, #0
1a009d78:	d002      	beq.n	1a009d80 <mpu_reset_fifo+0x160>
            return -1;
1a009d7a:	f04f 33ff 	mov.w	r3, #4294967295
1a009d7e:	e04b      	b.n	1a009e18 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1a009d80:	4b27      	ldr	r3, [pc, #156]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009d82:	7c9b      	ldrb	r3, [r3, #18]
1a009d84:	2b00      	cmp	r3, #0
1a009d86:	d105      	bne.n	1a009d94 <mpu_reset_fifo+0x174>
1a009d88:	4b25      	ldr	r3, [pc, #148]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009d8a:	7a9b      	ldrb	r3, [r3, #10]
1a009d8c:	f003 0301 	and.w	r3, r3, #1
1a009d90:	2b00      	cmp	r3, #0
1a009d92:	d102      	bne.n	1a009d9a <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
1a009d94:	2340      	movs	r3, #64	; 0x40
1a009d96:	71fb      	strb	r3, [r7, #7]
1a009d98:	e001      	b.n	1a009d9e <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
1a009d9a:	2360      	movs	r3, #96	; 0x60
1a009d9c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1a009d9e:	4b20      	ldr	r3, [pc, #128]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009da0:	685b      	ldr	r3, [r3, #4]
1a009da2:	7818      	ldrb	r0, [r3, #0]
1a009da4:	4b1e      	ldr	r3, [pc, #120]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009da6:	681b      	ldr	r3, [r3, #0]
1a009da8:	7919      	ldrb	r1, [r3, #4]
1a009daa:	1dfb      	adds	r3, r7, #7
1a009dac:	2201      	movs	r2, #1
1a009dae:	f7f8 ffa3 	bl	1a002cf8 <i2c_write>
1a009db2:	4603      	mov	r3, r0
1a009db4:	2b00      	cmp	r3, #0
1a009db6:	d002      	beq.n	1a009dbe <mpu_reset_fifo+0x19e>
            return -1;
1a009db8:	f04f 33ff 	mov.w	r3, #4294967295
1a009dbc:	e02c      	b.n	1a009e18 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
1a009dbe:	2032      	movs	r0, #50	; 0x32
1a009dc0:	f7fc fc1a 	bl	1a0065f8 <timerDelayMs>
        if (st.chip_cfg.int_enable)
1a009dc4:	4b16      	ldr	r3, [pc, #88]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009dc6:	7c5b      	ldrb	r3, [r3, #17]
1a009dc8:	2b00      	cmp	r3, #0
1a009dca:	d002      	beq.n	1a009dd2 <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
1a009dcc:	2301      	movs	r3, #1
1a009dce:	71fb      	strb	r3, [r7, #7]
1a009dd0:	e001      	b.n	1a009dd6 <mpu_reset_fifo+0x1b6>
        else
            data = 0;
1a009dd2:	2300      	movs	r3, #0
1a009dd4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1a009dd6:	4b12      	ldr	r3, [pc, #72]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009dd8:	685b      	ldr	r3, [r3, #4]
1a009dda:	7818      	ldrb	r0, [r3, #0]
1a009ddc:	4b10      	ldr	r3, [pc, #64]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009dde:	681b      	ldr	r3, [r3, #0]
1a009de0:	7c59      	ldrb	r1, [r3, #17]
1a009de2:	1dfb      	adds	r3, r7, #7
1a009de4:	2201      	movs	r2, #1
1a009de6:	f7f8 ff87 	bl	1a002cf8 <i2c_write>
1a009dea:	4603      	mov	r3, r0
1a009dec:	2b00      	cmp	r3, #0
1a009dee:	d002      	beq.n	1a009df6 <mpu_reset_fifo+0x1d6>
            return -1;
1a009df0:	f04f 33ff 	mov.w	r3, #4294967295
1a009df4:	e010      	b.n	1a009e18 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
1a009df6:	4b0a      	ldr	r3, [pc, #40]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009df8:	685b      	ldr	r3, [r3, #4]
1a009dfa:	7818      	ldrb	r0, [r3, #0]
1a009dfc:	4b08      	ldr	r3, [pc, #32]	; (1a009e20 <mpu_reset_fifo+0x200>)
1a009dfe:	681b      	ldr	r3, [r3, #0]
1a009e00:	7959      	ldrb	r1, [r3, #5]
1a009e02:	4b08      	ldr	r3, [pc, #32]	; (1a009e24 <mpu_reset_fifo+0x204>)
1a009e04:	2201      	movs	r2, #1
1a009e06:	f7f8 ff77 	bl	1a002cf8 <i2c_write>
1a009e0a:	4603      	mov	r3, r0
1a009e0c:	2b00      	cmp	r3, #0
1a009e0e:	d002      	beq.n	1a009e16 <mpu_reset_fifo+0x1f6>
            return -1;
1a009e10:	f04f 33ff 	mov.w	r3, #4294967295
1a009e14:	e000      	b.n	1a009e18 <mpu_reset_fifo+0x1f8>
    }
    return 0;
1a009e16:	2300      	movs	r3, #0
}
1a009e18:	4618      	mov	r0, r3
1a009e1a:	3708      	adds	r7, #8
1a009e1c:	46bd      	mov	sp, r7
1a009e1e:	bd80      	pop	{r7, pc}
1a009e20:	10086034 	.word	0x10086034
1a009e24:	10086044 	.word	0x10086044

1a009e28 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
1a009e28:	b480      	push	{r7}
1a009e2a:	b083      	sub	sp, #12
1a009e2c:	af00      	add	r7, sp, #0
1a009e2e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
1a009e30:	4b16      	ldr	r3, [pc, #88]	; (1a009e8c <mpu_get_gyro_fsr+0x64>)
1a009e32:	7a1b      	ldrb	r3, [r3, #8]
1a009e34:	2b03      	cmp	r3, #3
1a009e36:	d81e      	bhi.n	1a009e76 <mpu_get_gyro_fsr+0x4e>
1a009e38:	a201      	add	r2, pc, #4	; (adr r2, 1a009e40 <mpu_get_gyro_fsr+0x18>)
1a009e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a009e3e:	bf00      	nop
1a009e40:	1a009e51 	.word	0x1a009e51
1a009e44:	1a009e59 	.word	0x1a009e59
1a009e48:	1a009e63 	.word	0x1a009e63
1a009e4c:	1a009e6d 	.word	0x1a009e6d
    case INV_FSR_250DPS:
        fsr[0] = 250;
1a009e50:	687b      	ldr	r3, [r7, #4]
1a009e52:	22fa      	movs	r2, #250	; 0xfa
1a009e54:	801a      	strh	r2, [r3, #0]
        break;
1a009e56:	e012      	b.n	1a009e7e <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
1a009e58:	687b      	ldr	r3, [r7, #4]
1a009e5a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
1a009e5e:	801a      	strh	r2, [r3, #0]
        break;
1a009e60:	e00d      	b.n	1a009e7e <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
1a009e62:	687b      	ldr	r3, [r7, #4]
1a009e64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a009e68:	801a      	strh	r2, [r3, #0]
        break;
1a009e6a:	e008      	b.n	1a009e7e <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
1a009e6c:	687b      	ldr	r3, [r7, #4]
1a009e6e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
1a009e72:	801a      	strh	r2, [r3, #0]
        break;
1a009e74:	e003      	b.n	1a009e7e <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
1a009e76:	687b      	ldr	r3, [r7, #4]
1a009e78:	2200      	movs	r2, #0
1a009e7a:	801a      	strh	r2, [r3, #0]
        break;
1a009e7c:	bf00      	nop
    }
    return 0;
1a009e7e:	2300      	movs	r3, #0
}
1a009e80:	4618      	mov	r0, r3
1a009e82:	370c      	adds	r7, #12
1a009e84:	46bd      	mov	sp, r7
1a009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
1a009e8a:	4770      	bx	lr
1a009e8c:	10086034 	.word	0x10086034

1a009e90 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
1a009e90:	b580      	push	{r7, lr}
1a009e92:	b084      	sub	sp, #16
1a009e94:	af00      	add	r7, sp, #0
1a009e96:	4603      	mov	r3, r0
1a009e98:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1a009e9a:	4b25      	ldr	r3, [pc, #148]	; (1a009f30 <mpu_set_gyro_fsr+0xa0>)
1a009e9c:	7a9b      	ldrb	r3, [r3, #10]
1a009e9e:	2b00      	cmp	r3, #0
1a009ea0:	d102      	bne.n	1a009ea8 <mpu_set_gyro_fsr+0x18>
        return -1;
1a009ea2:	f04f 33ff 	mov.w	r3, #4294967295
1a009ea6:	e03f      	b.n	1a009f28 <mpu_set_gyro_fsr+0x98>

    switch (fsr) {
1a009ea8:	88fb      	ldrh	r3, [r7, #6]
1a009eaa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
1a009eae:	d00f      	beq.n	1a009ed0 <mpu_set_gyro_fsr+0x40>
1a009eb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
1a009eb4:	dc02      	bgt.n	1a009ebc <mpu_set_gyro_fsr+0x2c>
1a009eb6:	2bfa      	cmp	r3, #250	; 0xfa
1a009eb8:	d007      	beq.n	1a009eca <mpu_set_gyro_fsr+0x3a>
1a009eba:	e012      	b.n	1a009ee2 <mpu_set_gyro_fsr+0x52>
1a009ebc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1a009ec0:	d009      	beq.n	1a009ed6 <mpu_set_gyro_fsr+0x46>
1a009ec2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
1a009ec6:	d009      	beq.n	1a009edc <mpu_set_gyro_fsr+0x4c>
1a009ec8:	e00b      	b.n	1a009ee2 <mpu_set_gyro_fsr+0x52>
    case 250:
        data = INV_FSR_250DPS << 3;
1a009eca:	2300      	movs	r3, #0
1a009ecc:	73fb      	strb	r3, [r7, #15]
        break;
1a009ece:	e00b      	b.n	1a009ee8 <mpu_set_gyro_fsr+0x58>
    case 500:
        data = INV_FSR_500DPS << 3;
1a009ed0:	2308      	movs	r3, #8
1a009ed2:	73fb      	strb	r3, [r7, #15]
        break;
1a009ed4:	e008      	b.n	1a009ee8 <mpu_set_gyro_fsr+0x58>
    case 1000:
        data = INV_FSR_1000DPS << 3;
1a009ed6:	2310      	movs	r3, #16
1a009ed8:	73fb      	strb	r3, [r7, #15]
        break;
1a009eda:	e005      	b.n	1a009ee8 <mpu_set_gyro_fsr+0x58>
    case 2000:
        data = INV_FSR_2000DPS << 3;
1a009edc:	2318      	movs	r3, #24
1a009ede:	73fb      	strb	r3, [r7, #15]
        break;
1a009ee0:	e002      	b.n	1a009ee8 <mpu_set_gyro_fsr+0x58>
    default:
        return -1;
1a009ee2:	f04f 33ff 	mov.w	r3, #4294967295
1a009ee6:	e01f      	b.n	1a009f28 <mpu_set_gyro_fsr+0x98>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
1a009ee8:	4b11      	ldr	r3, [pc, #68]	; (1a009f30 <mpu_set_gyro_fsr+0xa0>)
1a009eea:	7a1a      	ldrb	r2, [r3, #8]
1a009eec:	7bfb      	ldrb	r3, [r7, #15]
1a009eee:	08db      	lsrs	r3, r3, #3
1a009ef0:	b2db      	uxtb	r3, r3
1a009ef2:	429a      	cmp	r2, r3
1a009ef4:	d101      	bne.n	1a009efa <mpu_set_gyro_fsr+0x6a>
        return 0;
1a009ef6:	2300      	movs	r3, #0
1a009ef8:	e016      	b.n	1a009f28 <mpu_set_gyro_fsr+0x98>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
1a009efa:	4b0d      	ldr	r3, [pc, #52]	; (1a009f30 <mpu_set_gyro_fsr+0xa0>)
1a009efc:	685b      	ldr	r3, [r3, #4]
1a009efe:	7818      	ldrb	r0, [r3, #0]
1a009f00:	4b0b      	ldr	r3, [pc, #44]	; (1a009f30 <mpu_set_gyro_fsr+0xa0>)
1a009f02:	681b      	ldr	r3, [r3, #0]
1a009f04:	7999      	ldrb	r1, [r3, #6]
1a009f06:	f107 030f 	add.w	r3, r7, #15
1a009f0a:	2201      	movs	r2, #1
1a009f0c:	f7f8 fef4 	bl	1a002cf8 <i2c_write>
1a009f10:	4603      	mov	r3, r0
1a009f12:	2b00      	cmp	r3, #0
1a009f14:	d002      	beq.n	1a009f1c <mpu_set_gyro_fsr+0x8c>
        return -1;
1a009f16:	f04f 33ff 	mov.w	r3, #4294967295
1a009f1a:	e005      	b.n	1a009f28 <mpu_set_gyro_fsr+0x98>
    st.chip_cfg.gyro_fsr = data >> 3;
1a009f1c:	7bfb      	ldrb	r3, [r7, #15]
1a009f1e:	08db      	lsrs	r3, r3, #3
1a009f20:	b2da      	uxtb	r2, r3
1a009f22:	4b03      	ldr	r3, [pc, #12]	; (1a009f30 <mpu_set_gyro_fsr+0xa0>)
1a009f24:	721a      	strb	r2, [r3, #8]
    return 0;
1a009f26:	2300      	movs	r3, #0
}
1a009f28:	4618      	mov	r0, r3
1a009f2a:	3710      	adds	r7, #16
1a009f2c:	46bd      	mov	sp, r7
1a009f2e:	bd80      	pop	{r7, pc}
1a009f30:	10086034 	.word	0x10086034

1a009f34 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
1a009f34:	b480      	push	{r7}
1a009f36:	b083      	sub	sp, #12
1a009f38:	af00      	add	r7, sp, #0
1a009f3a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
1a009f3c:	4b19      	ldr	r3, [pc, #100]	; (1a009fa4 <mpu_get_accel_fsr+0x70>)
1a009f3e:	7a5b      	ldrb	r3, [r3, #9]
1a009f40:	2b03      	cmp	r3, #3
1a009f42:	d81b      	bhi.n	1a009f7c <mpu_get_accel_fsr+0x48>
1a009f44:	a201      	add	r2, pc, #4	; (adr r2, 1a009f4c <mpu_get_accel_fsr+0x18>)
1a009f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a009f4a:	bf00      	nop
1a009f4c:	1a009f5d 	.word	0x1a009f5d
1a009f50:	1a009f65 	.word	0x1a009f65
1a009f54:	1a009f6d 	.word	0x1a009f6d
1a009f58:	1a009f75 	.word	0x1a009f75
    case INV_FSR_2G:
        fsr[0] = 2;
1a009f5c:	687b      	ldr	r3, [r7, #4]
1a009f5e:	2202      	movs	r2, #2
1a009f60:	701a      	strb	r2, [r3, #0]
        break;
1a009f62:	e00e      	b.n	1a009f82 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
1a009f64:	687b      	ldr	r3, [r7, #4]
1a009f66:	2204      	movs	r2, #4
1a009f68:	701a      	strb	r2, [r3, #0]
        break;
1a009f6a:	e00a      	b.n	1a009f82 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
1a009f6c:	687b      	ldr	r3, [r7, #4]
1a009f6e:	2208      	movs	r2, #8
1a009f70:	701a      	strb	r2, [r3, #0]
        break;
1a009f72:	e006      	b.n	1a009f82 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
1a009f74:	687b      	ldr	r3, [r7, #4]
1a009f76:	2210      	movs	r2, #16
1a009f78:	701a      	strb	r2, [r3, #0]
        break;
1a009f7a:	e002      	b.n	1a009f82 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
1a009f7c:	f04f 33ff 	mov.w	r3, #4294967295
1a009f80:	e00a      	b.n	1a009f98 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
1a009f82:	4b08      	ldr	r3, [pc, #32]	; (1a009fa4 <mpu_get_accel_fsr+0x70>)
1a009f84:	7cdb      	ldrb	r3, [r3, #19]
1a009f86:	2b00      	cmp	r3, #0
1a009f88:	d005      	beq.n	1a009f96 <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
1a009f8a:	687b      	ldr	r3, [r7, #4]
1a009f8c:	781b      	ldrb	r3, [r3, #0]
1a009f8e:	005b      	lsls	r3, r3, #1
1a009f90:	b2da      	uxtb	r2, r3
1a009f92:	687b      	ldr	r3, [r7, #4]
1a009f94:	701a      	strb	r2, [r3, #0]
    return 0;
1a009f96:	2300      	movs	r3, #0
}
1a009f98:	4618      	mov	r0, r3
1a009f9a:	370c      	adds	r7, #12
1a009f9c:	46bd      	mov	sp, r7
1a009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a009fa2:	4770      	bx	lr
1a009fa4:	10086034 	.word	0x10086034

1a009fa8 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
1a009fa8:	b580      	push	{r7, lr}
1a009faa:	b084      	sub	sp, #16
1a009fac:	af00      	add	r7, sp, #0
1a009fae:	4603      	mov	r3, r0
1a009fb0:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1a009fb2:	4b30      	ldr	r3, [pc, #192]	; (1a00a074 <mpu_set_accel_fsr+0xcc>)
1a009fb4:	7a9b      	ldrb	r3, [r3, #10]
1a009fb6:	2b00      	cmp	r3, #0
1a009fb8:	d102      	bne.n	1a009fc0 <mpu_set_accel_fsr+0x18>
        return -1;
1a009fba:	f04f 33ff 	mov.w	r3, #4294967295
1a009fbe:	e054      	b.n	1a00a06a <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
1a009fc0:	79fb      	ldrb	r3, [r7, #7]
1a009fc2:	3b02      	subs	r3, #2
1a009fc4:	2b0e      	cmp	r3, #14
1a009fc6:	d82d      	bhi.n	1a00a024 <mpu_set_accel_fsr+0x7c>
1a009fc8:	a201      	add	r2, pc, #4	; (adr r2, 1a009fd0 <mpu_set_accel_fsr+0x28>)
1a009fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a009fce:	bf00      	nop
1a009fd0:	1a00a00d 	.word	0x1a00a00d
1a009fd4:	1a00a025 	.word	0x1a00a025
1a009fd8:	1a00a013 	.word	0x1a00a013
1a009fdc:	1a00a025 	.word	0x1a00a025
1a009fe0:	1a00a025 	.word	0x1a00a025
1a009fe4:	1a00a025 	.word	0x1a00a025
1a009fe8:	1a00a019 	.word	0x1a00a019
1a009fec:	1a00a025 	.word	0x1a00a025
1a009ff0:	1a00a025 	.word	0x1a00a025
1a009ff4:	1a00a025 	.word	0x1a00a025
1a009ff8:	1a00a025 	.word	0x1a00a025
1a009ffc:	1a00a025 	.word	0x1a00a025
1a00a000:	1a00a025 	.word	0x1a00a025
1a00a004:	1a00a025 	.word	0x1a00a025
1a00a008:	1a00a01f 	.word	0x1a00a01f
    case 2:
        data = INV_FSR_2G << 3;
1a00a00c:	2300      	movs	r3, #0
1a00a00e:	73fb      	strb	r3, [r7, #15]
        break;
1a00a010:	e00b      	b.n	1a00a02a <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
1a00a012:	2308      	movs	r3, #8
1a00a014:	73fb      	strb	r3, [r7, #15]
        break;
1a00a016:	e008      	b.n	1a00a02a <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
1a00a018:	2310      	movs	r3, #16
1a00a01a:	73fb      	strb	r3, [r7, #15]
        break;
1a00a01c:	e005      	b.n	1a00a02a <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
1a00a01e:	2318      	movs	r3, #24
1a00a020:	73fb      	strb	r3, [r7, #15]
        break;
1a00a022:	e002      	b.n	1a00a02a <mpu_set_accel_fsr+0x82>
    default:
        return -1;
1a00a024:	f04f 33ff 	mov.w	r3, #4294967295
1a00a028:	e01f      	b.n	1a00a06a <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
1a00a02a:	4b12      	ldr	r3, [pc, #72]	; (1a00a074 <mpu_set_accel_fsr+0xcc>)
1a00a02c:	7a5a      	ldrb	r2, [r3, #9]
1a00a02e:	7bfb      	ldrb	r3, [r7, #15]
1a00a030:	08db      	lsrs	r3, r3, #3
1a00a032:	b2db      	uxtb	r3, r3
1a00a034:	429a      	cmp	r2, r3
1a00a036:	d101      	bne.n	1a00a03c <mpu_set_accel_fsr+0x94>
        return 0;
1a00a038:	2300      	movs	r3, #0
1a00a03a:	e016      	b.n	1a00a06a <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
1a00a03c:	4b0d      	ldr	r3, [pc, #52]	; (1a00a074 <mpu_set_accel_fsr+0xcc>)
1a00a03e:	685b      	ldr	r3, [r3, #4]
1a00a040:	7818      	ldrb	r0, [r3, #0]
1a00a042:	4b0c      	ldr	r3, [pc, #48]	; (1a00a074 <mpu_set_accel_fsr+0xcc>)
1a00a044:	681b      	ldr	r3, [r3, #0]
1a00a046:	79d9      	ldrb	r1, [r3, #7]
1a00a048:	f107 030f 	add.w	r3, r7, #15
1a00a04c:	2201      	movs	r2, #1
1a00a04e:	f7f8 fe53 	bl	1a002cf8 <i2c_write>
1a00a052:	4603      	mov	r3, r0
1a00a054:	2b00      	cmp	r3, #0
1a00a056:	d002      	beq.n	1a00a05e <mpu_set_accel_fsr+0xb6>
        return -1;
1a00a058:	f04f 33ff 	mov.w	r3, #4294967295
1a00a05c:	e005      	b.n	1a00a06a <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
1a00a05e:	7bfb      	ldrb	r3, [r7, #15]
1a00a060:	08db      	lsrs	r3, r3, #3
1a00a062:	b2da      	uxtb	r2, r3
1a00a064:	4b03      	ldr	r3, [pc, #12]	; (1a00a074 <mpu_set_accel_fsr+0xcc>)
1a00a066:	725a      	strb	r2, [r3, #9]
    return 0;
1a00a068:	2300      	movs	r3, #0
}
1a00a06a:	4618      	mov	r0, r3
1a00a06c:	3710      	adds	r7, #16
1a00a06e:	46bd      	mov	sp, r7
1a00a070:	bd80      	pop	{r7, pc}
1a00a072:	bf00      	nop
1a00a074:	10086034 	.word	0x10086034

1a00a078 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
1a00a078:	b580      	push	{r7, lr}
1a00a07a:	b084      	sub	sp, #16
1a00a07c:	af00      	add	r7, sp, #0
1a00a07e:	4603      	mov	r3, r0
1a00a080:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1a00a082:	4b23      	ldr	r3, [pc, #140]	; (1a00a110 <mpu_set_lpf+0x98>)
1a00a084:	7a9b      	ldrb	r3, [r3, #10]
1a00a086:	2b00      	cmp	r3, #0
1a00a088:	d102      	bne.n	1a00a090 <mpu_set_lpf+0x18>
        return -1;
1a00a08a:	f04f 33ff 	mov.w	r3, #4294967295
1a00a08e:	e03b      	b.n	1a00a108 <mpu_set_lpf+0x90>

    if (lpf >= 188)
1a00a090:	88fb      	ldrh	r3, [r7, #6]
1a00a092:	2bbb      	cmp	r3, #187	; 0xbb
1a00a094:	d902      	bls.n	1a00a09c <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
1a00a096:	2301      	movs	r3, #1
1a00a098:	73fb      	strb	r3, [r7, #15]
1a00a09a:	e019      	b.n	1a00a0d0 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
1a00a09c:	88fb      	ldrh	r3, [r7, #6]
1a00a09e:	2b61      	cmp	r3, #97	; 0x61
1a00a0a0:	d902      	bls.n	1a00a0a8 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
1a00a0a2:	2302      	movs	r3, #2
1a00a0a4:	73fb      	strb	r3, [r7, #15]
1a00a0a6:	e013      	b.n	1a00a0d0 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
1a00a0a8:	88fb      	ldrh	r3, [r7, #6]
1a00a0aa:	2b29      	cmp	r3, #41	; 0x29
1a00a0ac:	d902      	bls.n	1a00a0b4 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
1a00a0ae:	2303      	movs	r3, #3
1a00a0b0:	73fb      	strb	r3, [r7, #15]
1a00a0b2:	e00d      	b.n	1a00a0d0 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
1a00a0b4:	88fb      	ldrh	r3, [r7, #6]
1a00a0b6:	2b13      	cmp	r3, #19
1a00a0b8:	d902      	bls.n	1a00a0c0 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
1a00a0ba:	2304      	movs	r3, #4
1a00a0bc:	73fb      	strb	r3, [r7, #15]
1a00a0be:	e007      	b.n	1a00a0d0 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
1a00a0c0:	88fb      	ldrh	r3, [r7, #6]
1a00a0c2:	2b09      	cmp	r3, #9
1a00a0c4:	d902      	bls.n	1a00a0cc <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
1a00a0c6:	2305      	movs	r3, #5
1a00a0c8:	73fb      	strb	r3, [r7, #15]
1a00a0ca:	e001      	b.n	1a00a0d0 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
1a00a0cc:	2306      	movs	r3, #6
1a00a0ce:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
1a00a0d0:	4b0f      	ldr	r3, [pc, #60]	; (1a00a110 <mpu_set_lpf+0x98>)
1a00a0d2:	7ada      	ldrb	r2, [r3, #11]
1a00a0d4:	7bfb      	ldrb	r3, [r7, #15]
1a00a0d6:	429a      	cmp	r2, r3
1a00a0d8:	d101      	bne.n	1a00a0de <mpu_set_lpf+0x66>
        return 0;
1a00a0da:	2300      	movs	r3, #0
1a00a0dc:	e014      	b.n	1a00a108 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
1a00a0de:	4b0c      	ldr	r3, [pc, #48]	; (1a00a110 <mpu_set_lpf+0x98>)
1a00a0e0:	685b      	ldr	r3, [r3, #4]
1a00a0e2:	7818      	ldrb	r0, [r3, #0]
1a00a0e4:	4b0a      	ldr	r3, [pc, #40]	; (1a00a110 <mpu_set_lpf+0x98>)
1a00a0e6:	681b      	ldr	r3, [r3, #0]
1a00a0e8:	7899      	ldrb	r1, [r3, #2]
1a00a0ea:	f107 030f 	add.w	r3, r7, #15
1a00a0ee:	2201      	movs	r2, #1
1a00a0f0:	f7f8 fe02 	bl	1a002cf8 <i2c_write>
1a00a0f4:	4603      	mov	r3, r0
1a00a0f6:	2b00      	cmp	r3, #0
1a00a0f8:	d002      	beq.n	1a00a100 <mpu_set_lpf+0x88>
        return -1;
1a00a0fa:	f04f 33ff 	mov.w	r3, #4294967295
1a00a0fe:	e003      	b.n	1a00a108 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
1a00a100:	7bfa      	ldrb	r2, [r7, #15]
1a00a102:	4b03      	ldr	r3, [pc, #12]	; (1a00a110 <mpu_set_lpf+0x98>)
1a00a104:	72da      	strb	r2, [r3, #11]
    return 0;
1a00a106:	2300      	movs	r3, #0
}
1a00a108:	4618      	mov	r0, r3
1a00a10a:	3710      	adds	r7, #16
1a00a10c:	46bd      	mov	sp, r7
1a00a10e:	bd80      	pop	{r7, pc}
1a00a110:	10086034 	.word	0x10086034

1a00a114 <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
1a00a114:	b480      	push	{r7}
1a00a116:	b083      	sub	sp, #12
1a00a118:	af00      	add	r7, sp, #0
1a00a11a:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
1a00a11c:	4b09      	ldr	r3, [pc, #36]	; (1a00a144 <mpu_get_sample_rate+0x30>)
1a00a11e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a00a122:	2b00      	cmp	r3, #0
1a00a124:	d002      	beq.n	1a00a12c <mpu_get_sample_rate+0x18>
        return -1;
1a00a126:	f04f 33ff 	mov.w	r3, #4294967295
1a00a12a:	e004      	b.n	1a00a136 <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
1a00a12c:	4b05      	ldr	r3, [pc, #20]	; (1a00a144 <mpu_get_sample_rate+0x30>)
1a00a12e:	89da      	ldrh	r2, [r3, #14]
1a00a130:	687b      	ldr	r3, [r7, #4]
1a00a132:	801a      	strh	r2, [r3, #0]
    return 0;
1a00a134:	2300      	movs	r3, #0
}
1a00a136:	4618      	mov	r0, r3
1a00a138:	370c      	adds	r7, #12
1a00a13a:	46bd      	mov	sp, r7
1a00a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00a140:	4770      	bx	lr
1a00a142:	bf00      	nop
1a00a144:	10086034 	.word	0x10086034

1a00a148 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
1a00a148:	b580      	push	{r7, lr}
1a00a14a:	b084      	sub	sp, #16
1a00a14c:	af00      	add	r7, sp, #0
1a00a14e:	4603      	mov	r3, r0
1a00a150:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1a00a152:	4b33      	ldr	r3, [pc, #204]	; (1a00a220 <mpu_set_sample_rate+0xd8>)
1a00a154:	7a9b      	ldrb	r3, [r3, #10]
1a00a156:	2b00      	cmp	r3, #0
1a00a158:	d102      	bne.n	1a00a160 <mpu_set_sample_rate+0x18>
        return -1;
1a00a15a:	f04f 33ff 	mov.w	r3, #4294967295
1a00a15e:	e05b      	b.n	1a00a218 <mpu_set_sample_rate+0xd0>

    if (st.chip_cfg.dmp_on)
1a00a160:	4b2f      	ldr	r3, [pc, #188]	; (1a00a220 <mpu_set_sample_rate+0xd8>)
1a00a162:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a00a166:	2b00      	cmp	r3, #0
1a00a168:	d002      	beq.n	1a00a170 <mpu_set_sample_rate+0x28>
        return -1;
1a00a16a:	f04f 33ff 	mov.w	r3, #4294967295
1a00a16e:	e053      	b.n	1a00a218 <mpu_set_sample_rate+0xd0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
1a00a170:	4b2b      	ldr	r3, [pc, #172]	; (1a00a220 <mpu_set_sample_rate+0xd8>)
1a00a172:	7d1b      	ldrb	r3, [r3, #20]
1a00a174:	2b00      	cmp	r3, #0
1a00a176:	d00e      	beq.n	1a00a196 <mpu_set_sample_rate+0x4e>
            if (rate && (rate <= 40)) {
1a00a178:	88fb      	ldrh	r3, [r7, #6]
1a00a17a:	2b00      	cmp	r3, #0
1a00a17c:	d008      	beq.n	1a00a190 <mpu_set_sample_rate+0x48>
1a00a17e:	88fb      	ldrh	r3, [r7, #6]
1a00a180:	2b28      	cmp	r3, #40	; 0x28
1a00a182:	d805      	bhi.n	1a00a190 <mpu_set_sample_rate+0x48>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
1a00a184:	88fb      	ldrh	r3, [r7, #6]
1a00a186:	4618      	mov	r0, r3
1a00a188:	f7ff fc72 	bl	1a009a70 <mpu_lp_accel_mode>
                return 0;
1a00a18c:	2300      	movs	r3, #0
1a00a18e:	e043      	b.n	1a00a218 <mpu_set_sample_rate+0xd0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
1a00a190:	2000      	movs	r0, #0
1a00a192:	f7ff fc6d 	bl	1a009a70 <mpu_lp_accel_mode>
        }
        if (rate < 4)
1a00a196:	88fb      	ldrh	r3, [r7, #6]
1a00a198:	2b03      	cmp	r3, #3
1a00a19a:	d802      	bhi.n	1a00a1a2 <mpu_set_sample_rate+0x5a>
            rate = 4;
1a00a19c:	2304      	movs	r3, #4
1a00a19e:	80fb      	strh	r3, [r7, #6]
1a00a1a0:	e006      	b.n	1a00a1b0 <mpu_set_sample_rate+0x68>
        else if (rate > 1000)
1a00a1a2:	88fb      	ldrh	r3, [r7, #6]
1a00a1a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1a00a1a8:	d902      	bls.n	1a00a1b0 <mpu_set_sample_rate+0x68>
            rate = 1000;
1a00a1aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00a1ae:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
1a00a1b0:	88fb      	ldrh	r3, [r7, #6]
1a00a1b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00a1b6:	fb92 f3f3 	sdiv	r3, r2, r3
1a00a1ba:	b2db      	uxtb	r3, r3
1a00a1bc:	3b01      	subs	r3, #1
1a00a1be:	b2db      	uxtb	r3, r3
1a00a1c0:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
1a00a1c2:	4b17      	ldr	r3, [pc, #92]	; (1a00a220 <mpu_set_sample_rate+0xd8>)
1a00a1c4:	685b      	ldr	r3, [r3, #4]
1a00a1c6:	7818      	ldrb	r0, [r3, #0]
1a00a1c8:	4b15      	ldr	r3, [pc, #84]	; (1a00a220 <mpu_set_sample_rate+0xd8>)
1a00a1ca:	681b      	ldr	r3, [r3, #0]
1a00a1cc:	7859      	ldrb	r1, [r3, #1]
1a00a1ce:	f107 030f 	add.w	r3, r7, #15
1a00a1d2:	2201      	movs	r2, #1
1a00a1d4:	f7f8 fd90 	bl	1a002cf8 <i2c_write>
1a00a1d8:	4603      	mov	r3, r0
1a00a1da:	2b00      	cmp	r3, #0
1a00a1dc:	d002      	beq.n	1a00a1e4 <mpu_set_sample_rate+0x9c>
            return -1;
1a00a1de:	f04f 33ff 	mov.w	r3, #4294967295
1a00a1e2:	e019      	b.n	1a00a218 <mpu_set_sample_rate+0xd0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
1a00a1e4:	7bfb      	ldrb	r3, [r7, #15]
1a00a1e6:	3301      	adds	r3, #1
1a00a1e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00a1ec:	fb92 f3f3 	sdiv	r3, r2, r3
1a00a1f0:	b29a      	uxth	r2, r3
1a00a1f2:	4b0b      	ldr	r3, [pc, #44]	; (1a00a220 <mpu_set_sample_rate+0xd8>)
1a00a1f4:	81da      	strh	r2, [r3, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
1a00a1f6:	4b0a      	ldr	r3, [pc, #40]	; (1a00a220 <mpu_set_sample_rate+0xd8>)
1a00a1f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
1a00a1fa:	2b64      	cmp	r3, #100	; 0x64
1a00a1fc:	bf28      	it	cs
1a00a1fe:	2364      	movcs	r3, #100	; 0x64
1a00a200:	b29b      	uxth	r3, r3
1a00a202:	4618      	mov	r0, r3
1a00a204:	f000 f80e 	bl	1a00a224 <mpu_set_compass_sample_rate>
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
1a00a208:	4b05      	ldr	r3, [pc, #20]	; (1a00a220 <mpu_set_sample_rate+0xd8>)
1a00a20a:	89db      	ldrh	r3, [r3, #14]
1a00a20c:	085b      	lsrs	r3, r3, #1
1a00a20e:	b29b      	uxth	r3, r3
1a00a210:	4618      	mov	r0, r3
1a00a212:	f7ff ff31 	bl	1a00a078 <mpu_set_lpf>
        return 0;
1a00a216:	2300      	movs	r3, #0
    }
}
1a00a218:	4618      	mov	r0, r3
1a00a21a:	3710      	adds	r7, #16
1a00a21c:	46bd      	mov	sp, r7
1a00a21e:	bd80      	pop	{r7, pc}
1a00a220:	10086034 	.word	0x10086034

1a00a224 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
1a00a224:	b580      	push	{r7, lr}
1a00a226:	b084      	sub	sp, #16
1a00a228:	af00      	add	r7, sp, #0
1a00a22a:	4603      	mov	r3, r0
1a00a22c:	80fb      	strh	r3, [r7, #6]
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
1a00a22e:	88fb      	ldrh	r3, [r7, #6]
1a00a230:	2b00      	cmp	r3, #0
1a00a232:	d007      	beq.n	1a00a244 <mpu_set_compass_sample_rate+0x20>
1a00a234:	4b1a      	ldr	r3, [pc, #104]	; (1a00a2a0 <mpu_set_compass_sample_rate+0x7c>)
1a00a236:	89db      	ldrh	r3, [r3, #14]
1a00a238:	88fa      	ldrh	r2, [r7, #6]
1a00a23a:	429a      	cmp	r2, r3
1a00a23c:	d802      	bhi.n	1a00a244 <mpu_set_compass_sample_rate+0x20>
1a00a23e:	88fb      	ldrh	r3, [r7, #6]
1a00a240:	2b64      	cmp	r3, #100	; 0x64
1a00a242:	d902      	bls.n	1a00a24a <mpu_set_compass_sample_rate+0x26>
        return -1;
1a00a244:	f04f 33ff 	mov.w	r3, #4294967295
1a00a248:	e026      	b.n	1a00a298 <mpu_set_compass_sample_rate+0x74>

    div = st.chip_cfg.sample_rate / rate - 1;
1a00a24a:	4b15      	ldr	r3, [pc, #84]	; (1a00a2a0 <mpu_set_compass_sample_rate+0x7c>)
1a00a24c:	89da      	ldrh	r2, [r3, #14]
1a00a24e:	88fb      	ldrh	r3, [r7, #6]
1a00a250:	fbb2 f3f3 	udiv	r3, r2, r3
1a00a254:	b29b      	uxth	r3, r3
1a00a256:	b2db      	uxtb	r3, r3
1a00a258:	3b01      	subs	r3, #1
1a00a25a:	b2db      	uxtb	r3, r3
1a00a25c:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
1a00a25e:	4b10      	ldr	r3, [pc, #64]	; (1a00a2a0 <mpu_set_compass_sample_rate+0x7c>)
1a00a260:	685b      	ldr	r3, [r3, #4]
1a00a262:	7818      	ldrb	r0, [r3, #0]
1a00a264:	4b0e      	ldr	r3, [pc, #56]	; (1a00a2a0 <mpu_set_compass_sample_rate+0x7c>)
1a00a266:	681b      	ldr	r3, [r3, #0]
1a00a268:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
1a00a26c:	f107 030f 	add.w	r3, r7, #15
1a00a270:	2201      	movs	r2, #1
1a00a272:	f7f8 fd41 	bl	1a002cf8 <i2c_write>
1a00a276:	4603      	mov	r3, r0
1a00a278:	2b00      	cmp	r3, #0
1a00a27a:	d002      	beq.n	1a00a282 <mpu_set_compass_sample_rate+0x5e>
        return -1;
1a00a27c:	f04f 33ff 	mov.w	r3, #4294967295
1a00a280:	e00a      	b.n	1a00a298 <mpu_set_compass_sample_rate+0x74>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
1a00a282:	4b07      	ldr	r3, [pc, #28]	; (1a00a2a0 <mpu_set_compass_sample_rate+0x7c>)
1a00a284:	89db      	ldrh	r3, [r3, #14]
1a00a286:	461a      	mov	r2, r3
1a00a288:	7bfb      	ldrb	r3, [r7, #15]
1a00a28a:	3301      	adds	r3, #1
1a00a28c:	fb92 f3f3 	sdiv	r3, r2, r3
1a00a290:	b29a      	uxth	r2, r3
1a00a292:	4b03      	ldr	r3, [pc, #12]	; (1a00a2a0 <mpu_set_compass_sample_rate+0x7c>)
1a00a294:	851a      	strh	r2, [r3, #40]	; 0x28
    return 0;
1a00a296:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
1a00a298:	4618      	mov	r0, r3
1a00a29a:	3710      	adds	r7, #16
1a00a29c:	46bd      	mov	sp, r7
1a00a29e:	bd80      	pop	{r7, pc}
1a00a2a0:	10086034 	.word	0x10086034

1a00a2a4 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
1a00a2a4:	b580      	push	{r7, lr}
1a00a2a6:	b084      	sub	sp, #16
1a00a2a8:	af00      	add	r7, sp, #0
1a00a2aa:	4603      	mov	r3, r0
1a00a2ac:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
1a00a2ae:	2300      	movs	r3, #0
1a00a2b0:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
1a00a2b2:	79fb      	ldrb	r3, [r7, #7]
1a00a2b4:	f023 0301 	bic.w	r3, r3, #1
1a00a2b8:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
1a00a2ba:	4b22      	ldr	r3, [pc, #136]	; (1a00a344 <mpu_configure_fifo+0xa0>)
1a00a2bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a00a2c0:	2b00      	cmp	r3, #0
1a00a2c2:	d001      	beq.n	1a00a2c8 <mpu_configure_fifo+0x24>
        return 0;
1a00a2c4:	2300      	movs	r3, #0
1a00a2c6:	e038      	b.n	1a00a33a <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
1a00a2c8:	4b1e      	ldr	r3, [pc, #120]	; (1a00a344 <mpu_configure_fifo+0xa0>)
1a00a2ca:	7a9b      	ldrb	r3, [r3, #10]
1a00a2cc:	2b00      	cmp	r3, #0
1a00a2ce:	d102      	bne.n	1a00a2d6 <mpu_configure_fifo+0x32>
            return -1;
1a00a2d0:	f04f 33ff 	mov.w	r3, #4294967295
1a00a2d4:	e031      	b.n	1a00a33a <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
1a00a2d6:	4b1b      	ldr	r3, [pc, #108]	; (1a00a344 <mpu_configure_fifo+0xa0>)
1a00a2d8:	7c1b      	ldrb	r3, [r3, #16]
1a00a2da:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
1a00a2dc:	4b19      	ldr	r3, [pc, #100]	; (1a00a344 <mpu_configure_fifo+0xa0>)
1a00a2de:	7a9a      	ldrb	r2, [r3, #10]
1a00a2e0:	79fb      	ldrb	r3, [r7, #7]
1a00a2e2:	4013      	ands	r3, r2
1a00a2e4:	b2da      	uxtb	r2, r3
1a00a2e6:	4b17      	ldr	r3, [pc, #92]	; (1a00a344 <mpu_configure_fifo+0xa0>)
1a00a2e8:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
1a00a2ea:	4b16      	ldr	r3, [pc, #88]	; (1a00a344 <mpu_configure_fifo+0xa0>)
1a00a2ec:	7c1b      	ldrb	r3, [r3, #16]
1a00a2ee:	79fa      	ldrb	r2, [r7, #7]
1a00a2f0:	429a      	cmp	r2, r3
1a00a2f2:	d003      	beq.n	1a00a2fc <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
1a00a2f4:	f04f 33ff 	mov.w	r3, #4294967295
1a00a2f8:	60fb      	str	r3, [r7, #12]
1a00a2fa:	e001      	b.n	1a00a300 <mpu_configure_fifo+0x5c>
        else
            result = 0;
1a00a2fc:	2300      	movs	r3, #0
1a00a2fe:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
1a00a300:	79fb      	ldrb	r3, [r7, #7]
1a00a302:	2b00      	cmp	r3, #0
1a00a304:	d103      	bne.n	1a00a30e <mpu_configure_fifo+0x6a>
1a00a306:	4b0f      	ldr	r3, [pc, #60]	; (1a00a344 <mpu_configure_fifo+0xa0>)
1a00a308:	7d1b      	ldrb	r3, [r3, #20]
1a00a30a:	2b00      	cmp	r3, #0
1a00a30c:	d003      	beq.n	1a00a316 <mpu_configure_fifo+0x72>
            set_int_enable(1);
1a00a30e:	2001      	movs	r0, #1
1a00a310:	f7ff fa9e 	bl	1a009850 <set_int_enable>
1a00a314:	e002      	b.n	1a00a31c <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
1a00a316:	2000      	movs	r0, #0
1a00a318:	f7ff fa9a 	bl	1a009850 <set_int_enable>
        if (sensors) {
1a00a31c:	79fb      	ldrb	r3, [r7, #7]
1a00a31e:	2b00      	cmp	r3, #0
1a00a320:	d00a      	beq.n	1a00a338 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
1a00a322:	f7ff fc7d 	bl	1a009c20 <mpu_reset_fifo>
1a00a326:	4603      	mov	r3, r0
1a00a328:	2b00      	cmp	r3, #0
1a00a32a:	d005      	beq.n	1a00a338 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
1a00a32c:	4a05      	ldr	r2, [pc, #20]	; (1a00a344 <mpu_configure_fifo+0xa0>)
1a00a32e:	7afb      	ldrb	r3, [r7, #11]
1a00a330:	7413      	strb	r3, [r2, #16]
                return -1;
1a00a332:	f04f 33ff 	mov.w	r3, #4294967295
1a00a336:	e000      	b.n	1a00a33a <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
1a00a338:	68fb      	ldr	r3, [r7, #12]
}
1a00a33a:	4618      	mov	r0, r3
1a00a33c:	3710      	adds	r7, #16
1a00a33e:	46bd      	mov	sp, r7
1a00a340:	bd80      	pop	{r7, pc}
1a00a342:	bf00      	nop
1a00a344:	10086034 	.word	0x10086034

1a00a348 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
1a00a348:	b580      	push	{r7, lr}
1a00a34a:	b084      	sub	sp, #16
1a00a34c:	af00      	add	r7, sp, #0
1a00a34e:	4603      	mov	r3, r0
1a00a350:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
1a00a352:	79fb      	ldrb	r3, [r7, #7]
1a00a354:	f003 0370 	and.w	r3, r3, #112	; 0x70
1a00a358:	2b00      	cmp	r3, #0
1a00a35a:	d002      	beq.n	1a00a362 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
1a00a35c:	2301      	movs	r3, #1
1a00a35e:	73fb      	strb	r3, [r7, #15]
1a00a360:	e007      	b.n	1a00a372 <mpu_set_sensors+0x2a>
    else if (sensors)
1a00a362:	79fb      	ldrb	r3, [r7, #7]
1a00a364:	2b00      	cmp	r3, #0
1a00a366:	d002      	beq.n	1a00a36e <mpu_set_sensors+0x26>
        data = 0;
1a00a368:	2300      	movs	r3, #0
1a00a36a:	73fb      	strb	r3, [r7, #15]
1a00a36c:	e001      	b.n	1a00a372 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
1a00a36e:	2340      	movs	r3, #64	; 0x40
1a00a370:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
1a00a372:	4b63      	ldr	r3, [pc, #396]	; (1a00a500 <mpu_set_sensors+0x1b8>)
1a00a374:	685b      	ldr	r3, [r3, #4]
1a00a376:	7818      	ldrb	r0, [r3, #0]
1a00a378:	4b61      	ldr	r3, [pc, #388]	; (1a00a500 <mpu_set_sensors+0x1b8>)
1a00a37a:	681b      	ldr	r3, [r3, #0]
1a00a37c:	7d59      	ldrb	r1, [r3, #21]
1a00a37e:	f107 030f 	add.w	r3, r7, #15
1a00a382:	2201      	movs	r2, #1
1a00a384:	f7f8 fcb8 	bl	1a002cf8 <i2c_write>
1a00a388:	4603      	mov	r3, r0
1a00a38a:	2b00      	cmp	r3, #0
1a00a38c:	d005      	beq.n	1a00a39a <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
1a00a38e:	4b5c      	ldr	r3, [pc, #368]	; (1a00a500 <mpu_set_sensors+0x1b8>)
1a00a390:	2200      	movs	r2, #0
1a00a392:	729a      	strb	r2, [r3, #10]
        return -1;
1a00a394:	f04f 33ff 	mov.w	r3, #4294967295
1a00a398:	e0ae      	b.n	1a00a4f8 <mpu_set_sensors+0x1b0>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
1a00a39a:	7bfb      	ldrb	r3, [r7, #15]
1a00a39c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00a3a0:	b2da      	uxtb	r2, r3
1a00a3a2:	4b57      	ldr	r3, [pc, #348]	; (1a00a500 <mpu_set_sensors+0x1b8>)
1a00a3a4:	731a      	strb	r2, [r3, #12]

    data = 0;
1a00a3a6:	2300      	movs	r3, #0
1a00a3a8:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
1a00a3aa:	79fb      	ldrb	r3, [r7, #7]
1a00a3ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a00a3b0:	2b00      	cmp	r3, #0
1a00a3b2:	d104      	bne.n	1a00a3be <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
1a00a3b4:	7bfb      	ldrb	r3, [r7, #15]
1a00a3b6:	f043 0304 	orr.w	r3, r3, #4
1a00a3ba:	b2db      	uxtb	r3, r3
1a00a3bc:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
1a00a3be:	79fb      	ldrb	r3, [r7, #7]
1a00a3c0:	f003 0320 	and.w	r3, r3, #32
1a00a3c4:	2b00      	cmp	r3, #0
1a00a3c6:	d104      	bne.n	1a00a3d2 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
1a00a3c8:	7bfb      	ldrb	r3, [r7, #15]
1a00a3ca:	f043 0302 	orr.w	r3, r3, #2
1a00a3ce:	b2db      	uxtb	r3, r3
1a00a3d0:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
1a00a3d2:	79fb      	ldrb	r3, [r7, #7]
1a00a3d4:	f003 0310 	and.w	r3, r3, #16
1a00a3d8:	2b00      	cmp	r3, #0
1a00a3da:	d104      	bne.n	1a00a3e6 <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
1a00a3dc:	7bfb      	ldrb	r3, [r7, #15]
1a00a3de:	f043 0301 	orr.w	r3, r3, #1
1a00a3e2:	b2db      	uxtb	r3, r3
1a00a3e4:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
1a00a3e6:	79fb      	ldrb	r3, [r7, #7]
1a00a3e8:	f003 0308 	and.w	r3, r3, #8
1a00a3ec:	2b00      	cmp	r3, #0
1a00a3ee:	d104      	bne.n	1a00a3fa <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
1a00a3f0:	7bfb      	ldrb	r3, [r7, #15]
1a00a3f2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
1a00a3f6:	b2db      	uxtb	r3, r3
1a00a3f8:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
1a00a3fa:	4b41      	ldr	r3, [pc, #260]	; (1a00a500 <mpu_set_sensors+0x1b8>)
1a00a3fc:	685b      	ldr	r3, [r3, #4]
1a00a3fe:	7818      	ldrb	r0, [r3, #0]
1a00a400:	4b3f      	ldr	r3, [pc, #252]	; (1a00a500 <mpu_set_sensors+0x1b8>)
1a00a402:	681b      	ldr	r3, [r3, #0]
1a00a404:	7d99      	ldrb	r1, [r3, #22]
1a00a406:	f107 030f 	add.w	r3, r7, #15
1a00a40a:	2201      	movs	r2, #1
1a00a40c:	f7f8 fc74 	bl	1a002cf8 <i2c_write>
1a00a410:	4603      	mov	r3, r0
1a00a412:	2b00      	cmp	r3, #0
1a00a414:	d005      	beq.n	1a00a422 <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
1a00a416:	4b3a      	ldr	r3, [pc, #232]	; (1a00a500 <mpu_set_sensors+0x1b8>)
1a00a418:	2200      	movs	r2, #0
1a00a41a:	729a      	strb	r2, [r3, #10]
        return -1;
1a00a41c:	f04f 33ff 	mov.w	r3, #4294967295
1a00a420:	e06a      	b.n	1a00a4f8 <mpu_set_sensors+0x1b0>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
1a00a422:	79fb      	ldrb	r3, [r7, #7]
1a00a424:	2b00      	cmp	r3, #0
1a00a426:	d005      	beq.n	1a00a434 <mpu_set_sensors+0xec>
1a00a428:	79fb      	ldrb	r3, [r7, #7]
1a00a42a:	2b08      	cmp	r3, #8
1a00a42c:	d002      	beq.n	1a00a434 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
1a00a42e:	2000      	movs	r0, #0
1a00a430:	f000 f9be 	bl	1a00a7b0 <mpu_set_int_latched>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
1a00a434:	4b32      	ldr	r3, [pc, #200]	; (1a00a500 <mpu_set_sensors+0x1b8>)
1a00a436:	685b      	ldr	r3, [r3, #4]
1a00a438:	7818      	ldrb	r0, [r3, #0]
1a00a43a:	4b31      	ldr	r3, [pc, #196]	; (1a00a500 <mpu_set_sensors+0x1b8>)
1a00a43c:	681b      	ldr	r3, [r3, #0]
1a00a43e:	7919      	ldrb	r1, [r3, #4]
1a00a440:	f107 030e 	add.w	r3, r7, #14
1a00a444:	2201      	movs	r2, #1
1a00a446:	f7f8 fc85 	bl	1a002d54 <i2c_read>
1a00a44a:	4603      	mov	r3, r0
1a00a44c:	2b00      	cmp	r3, #0
1a00a44e:	d002      	beq.n	1a00a456 <mpu_set_sensors+0x10e>
        return -1;
1a00a450:	f04f 33ff 	mov.w	r3, #4294967295
1a00a454:	e050      	b.n	1a00a4f8 <mpu_set_sensors+0x1b0>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
1a00a456:	79fb      	ldrb	r3, [r7, #7]
1a00a458:	f003 0301 	and.w	r3, r3, #1
1a00a45c:	2b00      	cmp	r3, #0
1a00a45e:	d007      	beq.n	1a00a470 <mpu_set_sensors+0x128>
        data = AKM_SINGLE_MEASUREMENT;
1a00a460:	2301      	movs	r3, #1
1a00a462:	73fb      	strb	r3, [r7, #15]
        user_ctrl |= BIT_AUX_IF_EN;
1a00a464:	7bbb      	ldrb	r3, [r7, #14]
1a00a466:	f043 0320 	orr.w	r3, r3, #32
1a00a46a:	b2db      	uxtb	r3, r3
1a00a46c:	73bb      	strb	r3, [r7, #14]
1a00a46e:	e006      	b.n	1a00a47e <mpu_set_sensors+0x136>
    } else {
        data = AKM_POWER_DOWN;
1a00a470:	2300      	movs	r3, #0
1a00a472:	73fb      	strb	r3, [r7, #15]
        user_ctrl &= ~BIT_AUX_IF_EN;
1a00a474:	7bbb      	ldrb	r3, [r7, #14]
1a00a476:	f023 0320 	bic.w	r3, r3, #32
1a00a47a:	b2db      	uxtb	r3, r3
1a00a47c:	73bb      	strb	r3, [r7, #14]
    }
    if (st.chip_cfg.dmp_on)
1a00a47e:	4b20      	ldr	r3, [pc, #128]	; (1a00a500 <mpu_set_sensors+0x1b8>)
1a00a480:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a00a484:	2b00      	cmp	r3, #0
1a00a486:	d005      	beq.n	1a00a494 <mpu_set_sensors+0x14c>
        user_ctrl |= BIT_DMP_EN;
1a00a488:	7bbb      	ldrb	r3, [r7, #14]
1a00a48a:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a00a48e:	b2db      	uxtb	r3, r3
1a00a490:	73bb      	strb	r3, [r7, #14]
1a00a492:	e004      	b.n	1a00a49e <mpu_set_sensors+0x156>
    else
        user_ctrl &= ~BIT_DMP_EN;
1a00a494:	7bbb      	ldrb	r3, [r7, #14]
1a00a496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a00a49a:	b2db      	uxtb	r3, r3
1a00a49c:	73bb      	strb	r3, [r7, #14]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
1a00a49e:	4b18      	ldr	r3, [pc, #96]	; (1a00a500 <mpu_set_sensors+0x1b8>)
1a00a4a0:	685b      	ldr	r3, [r3, #4]
1a00a4a2:	7818      	ldrb	r0, [r3, #0]
1a00a4a4:	4b16      	ldr	r3, [pc, #88]	; (1a00a500 <mpu_set_sensors+0x1b8>)
1a00a4a6:	681b      	ldr	r3, [r3, #0]
1a00a4a8:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
1a00a4ac:	f107 030f 	add.w	r3, r7, #15
1a00a4b0:	2201      	movs	r2, #1
1a00a4b2:	f7f8 fc21 	bl	1a002cf8 <i2c_write>
1a00a4b6:	4603      	mov	r3, r0
1a00a4b8:	2b00      	cmp	r3, #0
1a00a4ba:	d002      	beq.n	1a00a4c2 <mpu_set_sensors+0x17a>
        return -1;
1a00a4bc:	f04f 33ff 	mov.w	r3, #4294967295
1a00a4c0:	e01a      	b.n	1a00a4f8 <mpu_set_sensors+0x1b0>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
1a00a4c2:	4b0f      	ldr	r3, [pc, #60]	; (1a00a500 <mpu_set_sensors+0x1b8>)
1a00a4c4:	685b      	ldr	r3, [r3, #4]
1a00a4c6:	7818      	ldrb	r0, [r3, #0]
1a00a4c8:	4b0d      	ldr	r3, [pc, #52]	; (1a00a500 <mpu_set_sensors+0x1b8>)
1a00a4ca:	681b      	ldr	r3, [r3, #0]
1a00a4cc:	7919      	ldrb	r1, [r3, #4]
1a00a4ce:	f107 030e 	add.w	r3, r7, #14
1a00a4d2:	2201      	movs	r2, #1
1a00a4d4:	f7f8 fc10 	bl	1a002cf8 <i2c_write>
1a00a4d8:	4603      	mov	r3, r0
1a00a4da:	2b00      	cmp	r3, #0
1a00a4dc:	d002      	beq.n	1a00a4e4 <mpu_set_sensors+0x19c>
        return -1;
1a00a4de:	f04f 33ff 	mov.w	r3, #4294967295
1a00a4e2:	e009      	b.n	1a00a4f8 <mpu_set_sensors+0x1b0>
#endif
#endif

    st.chip_cfg.sensors = sensors;
1a00a4e4:	4a06      	ldr	r2, [pc, #24]	; (1a00a500 <mpu_set_sensors+0x1b8>)
1a00a4e6:	79fb      	ldrb	r3, [r7, #7]
1a00a4e8:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
1a00a4ea:	4b05      	ldr	r3, [pc, #20]	; (1a00a500 <mpu_set_sensors+0x1b8>)
1a00a4ec:	2200      	movs	r2, #0
1a00a4ee:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
1a00a4f0:	2032      	movs	r0, #50	; 0x32
1a00a4f2:	f7fc f881 	bl	1a0065f8 <timerDelayMs>
    return 0;
1a00a4f6:	2300      	movs	r3, #0
}
1a00a4f8:	4618      	mov	r0, r3
1a00a4fa:	3710      	adds	r7, #16
1a00a4fc:	46bd      	mov	sp, r7
1a00a4fe:	bd80      	pop	{r7, pc}
1a00a500:	10086034 	.word	0x10086034

1a00a504 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
1a00a504:	b580      	push	{r7, lr}
1a00a506:	b086      	sub	sp, #24
1a00a508:	af00      	add	r7, sp, #0
1a00a50a:	4603      	mov	r3, r0
1a00a50c:	60b9      	str	r1, [r7, #8]
1a00a50e:	607a      	str	r2, [r7, #4]
1a00a510:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
1a00a512:	4b3a      	ldr	r3, [pc, #232]	; (1a00a5fc <mpu_read_fifo_stream+0xf8>)
1a00a514:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a00a518:	2b00      	cmp	r3, #0
1a00a51a:	d102      	bne.n	1a00a522 <mpu_read_fifo_stream+0x1e>
        return -1;
1a00a51c:	f04f 33ff 	mov.w	r3, #4294967295
1a00a520:	e068      	b.n	1a00a5f4 <mpu_read_fifo_stream+0xf0>
    if (!st.chip_cfg.sensors)
1a00a522:	4b36      	ldr	r3, [pc, #216]	; (1a00a5fc <mpu_read_fifo_stream+0xf8>)
1a00a524:	7a9b      	ldrb	r3, [r3, #10]
1a00a526:	2b00      	cmp	r3, #0
1a00a528:	d102      	bne.n	1a00a530 <mpu_read_fifo_stream+0x2c>
        return -1;
1a00a52a:	f04f 33ff 	mov.w	r3, #4294967295
1a00a52e:	e061      	b.n	1a00a5f4 <mpu_read_fifo_stream+0xf0>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
1a00a530:	4b32      	ldr	r3, [pc, #200]	; (1a00a5fc <mpu_read_fifo_stream+0xf8>)
1a00a532:	685b      	ldr	r3, [r3, #4]
1a00a534:	7818      	ldrb	r0, [r3, #0]
1a00a536:	4b31      	ldr	r3, [pc, #196]	; (1a00a5fc <mpu_read_fifo_stream+0xf8>)
1a00a538:	681b      	ldr	r3, [r3, #0]
1a00a53a:	7b19      	ldrb	r1, [r3, #12]
1a00a53c:	f107 0314 	add.w	r3, r7, #20
1a00a540:	2202      	movs	r2, #2
1a00a542:	f7f8 fc07 	bl	1a002d54 <i2c_read>
1a00a546:	4603      	mov	r3, r0
1a00a548:	2b00      	cmp	r3, #0
1a00a54a:	d002      	beq.n	1a00a552 <mpu_read_fifo_stream+0x4e>
        return -1;
1a00a54c:	f04f 33ff 	mov.w	r3, #4294967295
1a00a550:	e050      	b.n	1a00a5f4 <mpu_read_fifo_stream+0xf0>
    fifo_count = (tmp[0] << 8) | tmp[1];
1a00a552:	7d3b      	ldrb	r3, [r7, #20]
1a00a554:	021b      	lsls	r3, r3, #8
1a00a556:	b29a      	uxth	r2, r3
1a00a558:	7d7b      	ldrb	r3, [r7, #21]
1a00a55a:	b29b      	uxth	r3, r3
1a00a55c:	4313      	orrs	r3, r2
1a00a55e:	b29b      	uxth	r3, r3
1a00a560:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
1a00a562:	8afa      	ldrh	r2, [r7, #22]
1a00a564:	89fb      	ldrh	r3, [r7, #14]
1a00a566:	429a      	cmp	r2, r3
1a00a568:	d205      	bcs.n	1a00a576 <mpu_read_fifo_stream+0x72>
        more[0] = 0;
1a00a56a:	687b      	ldr	r3, [r7, #4]
1a00a56c:	2200      	movs	r2, #0
1a00a56e:	701a      	strb	r2, [r3, #0]
        return -1;
1a00a570:	f04f 33ff 	mov.w	r3, #4294967295
1a00a574:	e03e      	b.n	1a00a5f4 <mpu_read_fifo_stream+0xf0>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
1a00a576:	4b21      	ldr	r3, [pc, #132]	; (1a00a5fc <mpu_read_fifo_stream+0xf8>)
1a00a578:	685b      	ldr	r3, [r3, #4]
1a00a57a:	885b      	ldrh	r3, [r3, #2]
1a00a57c:	085b      	lsrs	r3, r3, #1
1a00a57e:	b29b      	uxth	r3, r3
1a00a580:	8afa      	ldrh	r2, [r7, #22]
1a00a582:	429a      	cmp	r2, r3
1a00a584:	d91a      	bls.n	1a00a5bc <mpu_read_fifo_stream+0xb8>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
1a00a586:	4b1d      	ldr	r3, [pc, #116]	; (1a00a5fc <mpu_read_fifo_stream+0xf8>)
1a00a588:	685b      	ldr	r3, [r3, #4]
1a00a58a:	7818      	ldrb	r0, [r3, #0]
1a00a58c:	4b1b      	ldr	r3, [pc, #108]	; (1a00a5fc <mpu_read_fifo_stream+0xf8>)
1a00a58e:	681b      	ldr	r3, [r3, #0]
1a00a590:	7cd9      	ldrb	r1, [r3, #19]
1a00a592:	f107 0314 	add.w	r3, r7, #20
1a00a596:	2201      	movs	r2, #1
1a00a598:	f7f8 fbdc 	bl	1a002d54 <i2c_read>
1a00a59c:	4603      	mov	r3, r0
1a00a59e:	2b00      	cmp	r3, #0
1a00a5a0:	d002      	beq.n	1a00a5a8 <mpu_read_fifo_stream+0xa4>
            return -1;
1a00a5a2:	f04f 33ff 	mov.w	r3, #4294967295
1a00a5a6:	e025      	b.n	1a00a5f4 <mpu_read_fifo_stream+0xf0>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
1a00a5a8:	7d3b      	ldrb	r3, [r7, #20]
1a00a5aa:	f003 0310 	and.w	r3, r3, #16
1a00a5ae:	2b00      	cmp	r3, #0
1a00a5b0:	d004      	beq.n	1a00a5bc <mpu_read_fifo_stream+0xb8>
            mpu_reset_fifo();
1a00a5b2:	f7ff fb35 	bl	1a009c20 <mpu_reset_fifo>
            return -2;
1a00a5b6:	f06f 0301 	mvn.w	r3, #1
1a00a5ba:	e01b      	b.n	1a00a5f4 <mpu_read_fifo_stream+0xf0>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
1a00a5bc:	4b0f      	ldr	r3, [pc, #60]	; (1a00a5fc <mpu_read_fifo_stream+0xf8>)
1a00a5be:	685b      	ldr	r3, [r3, #4]
1a00a5c0:	7818      	ldrb	r0, [r3, #0]
1a00a5c2:	4b0e      	ldr	r3, [pc, #56]	; (1a00a5fc <mpu_read_fifo_stream+0xf8>)
1a00a5c4:	681b      	ldr	r3, [r3, #0]
1a00a5c6:	7b59      	ldrb	r1, [r3, #13]
1a00a5c8:	89fb      	ldrh	r3, [r7, #14]
1a00a5ca:	b2da      	uxtb	r2, r3
1a00a5cc:	68bb      	ldr	r3, [r7, #8]
1a00a5ce:	f7f8 fbc1 	bl	1a002d54 <i2c_read>
1a00a5d2:	4603      	mov	r3, r0
1a00a5d4:	2b00      	cmp	r3, #0
1a00a5d6:	d002      	beq.n	1a00a5de <mpu_read_fifo_stream+0xda>
        return -1;
1a00a5d8:	f04f 33ff 	mov.w	r3, #4294967295
1a00a5dc:	e00a      	b.n	1a00a5f4 <mpu_read_fifo_stream+0xf0>
    more[0] = fifo_count / length - 1;
1a00a5de:	8afa      	ldrh	r2, [r7, #22]
1a00a5e0:	89fb      	ldrh	r3, [r7, #14]
1a00a5e2:	fbb2 f3f3 	udiv	r3, r2, r3
1a00a5e6:	b29b      	uxth	r3, r3
1a00a5e8:	b2db      	uxtb	r3, r3
1a00a5ea:	3b01      	subs	r3, #1
1a00a5ec:	b2da      	uxtb	r2, r3
1a00a5ee:	687b      	ldr	r3, [r7, #4]
1a00a5f0:	701a      	strb	r2, [r3, #0]
    return 0;
1a00a5f2:	2300      	movs	r3, #0
}
1a00a5f4:	4618      	mov	r0, r3
1a00a5f6:	3718      	adds	r7, #24
1a00a5f8:	46bd      	mov	sp, r7
1a00a5fa:	bd80      	pop	{r7, pc}
1a00a5fc:	10086034 	.word	0x10086034

1a00a600 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
1a00a600:	b580      	push	{r7, lr}
1a00a602:	b084      	sub	sp, #16
1a00a604:	af00      	add	r7, sp, #0
1a00a606:	4603      	mov	r3, r0
1a00a608:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
1a00a60a:	4b5f      	ldr	r3, [pc, #380]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a60c:	7c9b      	ldrb	r3, [r3, #18]
1a00a60e:	79fa      	ldrb	r2, [r7, #7]
1a00a610:	429a      	cmp	r2, r3
1a00a612:	d101      	bne.n	1a00a618 <mpu_set_bypass+0x18>
        return 0;
1a00a614:	2300      	movs	r3, #0
1a00a616:	e0b2      	b.n	1a00a77e <mpu_set_bypass+0x17e>

    if (bypass_on) {
1a00a618:	79fb      	ldrb	r3, [r7, #7]
1a00a61a:	2b00      	cmp	r3, #0
1a00a61c:	d050      	beq.n	1a00a6c0 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
1a00a61e:	4b5a      	ldr	r3, [pc, #360]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a620:	685b      	ldr	r3, [r3, #4]
1a00a622:	7818      	ldrb	r0, [r3, #0]
1a00a624:	4b58      	ldr	r3, [pc, #352]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a626:	681b      	ldr	r3, [r3, #0]
1a00a628:	7919      	ldrb	r1, [r3, #4]
1a00a62a:	f107 030f 	add.w	r3, r7, #15
1a00a62e:	2201      	movs	r2, #1
1a00a630:	f7f8 fb90 	bl	1a002d54 <i2c_read>
1a00a634:	4603      	mov	r3, r0
1a00a636:	2b00      	cmp	r3, #0
1a00a638:	d002      	beq.n	1a00a640 <mpu_set_bypass+0x40>
            return -1;
1a00a63a:	f04f 33ff 	mov.w	r3, #4294967295
1a00a63e:	e09e      	b.n	1a00a77e <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
1a00a640:	7bfb      	ldrb	r3, [r7, #15]
1a00a642:	f023 0320 	bic.w	r3, r3, #32
1a00a646:	b2db      	uxtb	r3, r3
1a00a648:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
1a00a64a:	4b4f      	ldr	r3, [pc, #316]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a64c:	685b      	ldr	r3, [r3, #4]
1a00a64e:	7818      	ldrb	r0, [r3, #0]
1a00a650:	4b4d      	ldr	r3, [pc, #308]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a652:	681b      	ldr	r3, [r3, #0]
1a00a654:	7919      	ldrb	r1, [r3, #4]
1a00a656:	f107 030f 	add.w	r3, r7, #15
1a00a65a:	2201      	movs	r2, #1
1a00a65c:	f7f8 fb4c 	bl	1a002cf8 <i2c_write>
1a00a660:	4603      	mov	r3, r0
1a00a662:	2b00      	cmp	r3, #0
1a00a664:	d002      	beq.n	1a00a66c <mpu_set_bypass+0x6c>
            return -1;
1a00a666:	f04f 33ff 	mov.w	r3, #4294967295
1a00a66a:	e088      	b.n	1a00a77e <mpu_set_bypass+0x17e>
        delay_ms(3);
1a00a66c:	2003      	movs	r0, #3
1a00a66e:	f7fb ffc3 	bl	1a0065f8 <timerDelayMs>
        tmp = BIT_BYPASS_EN;
1a00a672:	2302      	movs	r3, #2
1a00a674:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
1a00a676:	4b44      	ldr	r3, [pc, #272]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a678:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
1a00a67c:	2b00      	cmp	r3, #0
1a00a67e:	d004      	beq.n	1a00a68a <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
1a00a680:	7bfb      	ldrb	r3, [r7, #15]
1a00a682:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a00a686:	b2db      	uxtb	r3, r3
1a00a688:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
1a00a68a:	4b3f      	ldr	r3, [pc, #252]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a68c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
1a00a690:	2b00      	cmp	r3, #0
1a00a692:	d004      	beq.n	1a00a69e <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
1a00a694:	7bfb      	ldrb	r3, [r7, #15]
1a00a696:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00a69a:	b2db      	uxtb	r3, r3
1a00a69c:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
1a00a69e:	4b3a      	ldr	r3, [pc, #232]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a6a0:	685b      	ldr	r3, [r3, #4]
1a00a6a2:	7818      	ldrb	r0, [r3, #0]
1a00a6a4:	4b38      	ldr	r3, [pc, #224]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a6a6:	681b      	ldr	r3, [r3, #0]
1a00a6a8:	7dd9      	ldrb	r1, [r3, #23]
1a00a6aa:	f107 030f 	add.w	r3, r7, #15
1a00a6ae:	2201      	movs	r2, #1
1a00a6b0:	f7f8 fb22 	bl	1a002cf8 <i2c_write>
1a00a6b4:	4603      	mov	r3, r0
1a00a6b6:	2b00      	cmp	r3, #0
1a00a6b8:	d05d      	beq.n	1a00a776 <mpu_set_bypass+0x176>
            return -1;
1a00a6ba:	f04f 33ff 	mov.w	r3, #4294967295
1a00a6be:	e05e      	b.n	1a00a77e <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
1a00a6c0:	4b31      	ldr	r3, [pc, #196]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a6c2:	685b      	ldr	r3, [r3, #4]
1a00a6c4:	7818      	ldrb	r0, [r3, #0]
1a00a6c6:	4b30      	ldr	r3, [pc, #192]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a6c8:	681b      	ldr	r3, [r3, #0]
1a00a6ca:	7919      	ldrb	r1, [r3, #4]
1a00a6cc:	f107 030f 	add.w	r3, r7, #15
1a00a6d0:	2201      	movs	r2, #1
1a00a6d2:	f7f8 fb3f 	bl	1a002d54 <i2c_read>
1a00a6d6:	4603      	mov	r3, r0
1a00a6d8:	2b00      	cmp	r3, #0
1a00a6da:	d002      	beq.n	1a00a6e2 <mpu_set_bypass+0xe2>
            return -1;
1a00a6dc:	f04f 33ff 	mov.w	r3, #4294967295
1a00a6e0:	e04d      	b.n	1a00a77e <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
1a00a6e2:	4b29      	ldr	r3, [pc, #164]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a6e4:	7a9b      	ldrb	r3, [r3, #10]
1a00a6e6:	f003 0301 	and.w	r3, r3, #1
1a00a6ea:	2b00      	cmp	r3, #0
1a00a6ec:	d005      	beq.n	1a00a6fa <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
1a00a6ee:	7bfb      	ldrb	r3, [r7, #15]
1a00a6f0:	f043 0320 	orr.w	r3, r3, #32
1a00a6f4:	b2db      	uxtb	r3, r3
1a00a6f6:	73fb      	strb	r3, [r7, #15]
1a00a6f8:	e004      	b.n	1a00a704 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
1a00a6fa:	7bfb      	ldrb	r3, [r7, #15]
1a00a6fc:	f023 0320 	bic.w	r3, r3, #32
1a00a700:	b2db      	uxtb	r3, r3
1a00a702:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
1a00a704:	4b20      	ldr	r3, [pc, #128]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a706:	685b      	ldr	r3, [r3, #4]
1a00a708:	7818      	ldrb	r0, [r3, #0]
1a00a70a:	4b1f      	ldr	r3, [pc, #124]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a70c:	681b      	ldr	r3, [r3, #0]
1a00a70e:	7919      	ldrb	r1, [r3, #4]
1a00a710:	f107 030f 	add.w	r3, r7, #15
1a00a714:	2201      	movs	r2, #1
1a00a716:	f7f8 faef 	bl	1a002cf8 <i2c_write>
1a00a71a:	4603      	mov	r3, r0
1a00a71c:	2b00      	cmp	r3, #0
1a00a71e:	d002      	beq.n	1a00a726 <mpu_set_bypass+0x126>
            return -1;
1a00a720:	f04f 33ff 	mov.w	r3, #4294967295
1a00a724:	e02b      	b.n	1a00a77e <mpu_set_bypass+0x17e>
        delay_ms(3);
1a00a726:	2003      	movs	r0, #3
1a00a728:	f7fb ff66 	bl	1a0065f8 <timerDelayMs>
        if (st.chip_cfg.active_low_int)
1a00a72c:	4b16      	ldr	r3, [pc, #88]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a72e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
1a00a732:	2b00      	cmp	r3, #0
1a00a734:	d002      	beq.n	1a00a73c <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
1a00a736:	2380      	movs	r3, #128	; 0x80
1a00a738:	73fb      	strb	r3, [r7, #15]
1a00a73a:	e001      	b.n	1a00a740 <mpu_set_bypass+0x140>
        else
            tmp = 0;
1a00a73c:	2300      	movs	r3, #0
1a00a73e:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
1a00a740:	4b11      	ldr	r3, [pc, #68]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a742:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
1a00a746:	2b00      	cmp	r3, #0
1a00a748:	d004      	beq.n	1a00a754 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
1a00a74a:	7bfb      	ldrb	r3, [r7, #15]
1a00a74c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00a750:	b2db      	uxtb	r3, r3
1a00a752:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
1a00a754:	4b0c      	ldr	r3, [pc, #48]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a756:	685b      	ldr	r3, [r3, #4]
1a00a758:	7818      	ldrb	r0, [r3, #0]
1a00a75a:	4b0b      	ldr	r3, [pc, #44]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a75c:	681b      	ldr	r3, [r3, #0]
1a00a75e:	7dd9      	ldrb	r1, [r3, #23]
1a00a760:	f107 030f 	add.w	r3, r7, #15
1a00a764:	2201      	movs	r2, #1
1a00a766:	f7f8 fac7 	bl	1a002cf8 <i2c_write>
1a00a76a:	4603      	mov	r3, r0
1a00a76c:	2b00      	cmp	r3, #0
1a00a76e:	d002      	beq.n	1a00a776 <mpu_set_bypass+0x176>
            return -1;
1a00a770:	f04f 33ff 	mov.w	r3, #4294967295
1a00a774:	e003      	b.n	1a00a77e <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
1a00a776:	4a04      	ldr	r2, [pc, #16]	; (1a00a788 <mpu_set_bypass+0x188>)
1a00a778:	79fb      	ldrb	r3, [r7, #7]
1a00a77a:	7493      	strb	r3, [r2, #18]
    return 0;
1a00a77c:	2300      	movs	r3, #0
}
1a00a77e:	4618      	mov	r0, r3
1a00a780:	3710      	adds	r7, #16
1a00a782:	46bd      	mov	sp, r7
1a00a784:	bd80      	pop	{r7, pc}
1a00a786:	bf00      	nop
1a00a788:	10086034 	.word	0x10086034

1a00a78c <mpu_set_int_level>:
 *  @brief      Set interrupt level.
 *  @param[in]  active_low  1 for active low, 0 for active high.
 *  @return     0 if successful.
 */
int mpu_set_int_level(unsigned char active_low)
{
1a00a78c:	b480      	push	{r7}
1a00a78e:	b083      	sub	sp, #12
1a00a790:	af00      	add	r7, sp, #0
1a00a792:	4603      	mov	r3, r0
1a00a794:	71fb      	strb	r3, [r7, #7]
    st.chip_cfg.active_low_int = active_low;
1a00a796:	4a05      	ldr	r2, [pc, #20]	; (1a00a7ac <mpu_set_int_level+0x20>)
1a00a798:	79fb      	ldrb	r3, [r7, #7]
1a00a79a:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    return 0;
1a00a79e:	2300      	movs	r3, #0
}
1a00a7a0:	4618      	mov	r0, r3
1a00a7a2:	370c      	adds	r7, #12
1a00a7a4:	46bd      	mov	sp, r7
1a00a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00a7aa:	4770      	bx	lr
1a00a7ac:	10086034 	.word	0x10086034

1a00a7b0 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
1a00a7b0:	b580      	push	{r7, lr}
1a00a7b2:	b084      	sub	sp, #16
1a00a7b4:	af00      	add	r7, sp, #0
1a00a7b6:	4603      	mov	r3, r0
1a00a7b8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
1a00a7ba:	4b1e      	ldr	r3, [pc, #120]	; (1a00a834 <mpu_set_int_latched+0x84>)
1a00a7bc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
1a00a7c0:	79fa      	ldrb	r2, [r7, #7]
1a00a7c2:	429a      	cmp	r2, r3
1a00a7c4:	d101      	bne.n	1a00a7ca <mpu_set_int_latched+0x1a>
        return 0;
1a00a7c6:	2300      	movs	r3, #0
1a00a7c8:	e030      	b.n	1a00a82c <mpu_set_int_latched+0x7c>

    if (enable)
1a00a7ca:	79fb      	ldrb	r3, [r7, #7]
1a00a7cc:	2b00      	cmp	r3, #0
1a00a7ce:	d002      	beq.n	1a00a7d6 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
1a00a7d0:	2330      	movs	r3, #48	; 0x30
1a00a7d2:	73fb      	strb	r3, [r7, #15]
1a00a7d4:	e001      	b.n	1a00a7da <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
1a00a7d6:	2300      	movs	r3, #0
1a00a7d8:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
1a00a7da:	4b16      	ldr	r3, [pc, #88]	; (1a00a834 <mpu_set_int_latched+0x84>)
1a00a7dc:	7c9b      	ldrb	r3, [r3, #18]
1a00a7de:	2b00      	cmp	r3, #0
1a00a7e0:	d004      	beq.n	1a00a7ec <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
1a00a7e2:	7bfb      	ldrb	r3, [r7, #15]
1a00a7e4:	f043 0302 	orr.w	r3, r3, #2
1a00a7e8:	b2db      	uxtb	r3, r3
1a00a7ea:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
1a00a7ec:	4b11      	ldr	r3, [pc, #68]	; (1a00a834 <mpu_set_int_latched+0x84>)
1a00a7ee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
1a00a7f2:	2b00      	cmp	r3, #0
1a00a7f4:	d004      	beq.n	1a00a800 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
1a00a7f6:	7bfb      	ldrb	r3, [r7, #15]
1a00a7f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a00a7fc:	b2db      	uxtb	r3, r3
1a00a7fe:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
1a00a800:	4b0c      	ldr	r3, [pc, #48]	; (1a00a834 <mpu_set_int_latched+0x84>)
1a00a802:	685b      	ldr	r3, [r3, #4]
1a00a804:	7818      	ldrb	r0, [r3, #0]
1a00a806:	4b0b      	ldr	r3, [pc, #44]	; (1a00a834 <mpu_set_int_latched+0x84>)
1a00a808:	681b      	ldr	r3, [r3, #0]
1a00a80a:	7dd9      	ldrb	r1, [r3, #23]
1a00a80c:	f107 030f 	add.w	r3, r7, #15
1a00a810:	2201      	movs	r2, #1
1a00a812:	f7f8 fa71 	bl	1a002cf8 <i2c_write>
1a00a816:	4603      	mov	r3, r0
1a00a818:	2b00      	cmp	r3, #0
1a00a81a:	d002      	beq.n	1a00a822 <mpu_set_int_latched+0x72>
        return -1;
1a00a81c:	f04f 33ff 	mov.w	r3, #4294967295
1a00a820:	e004      	b.n	1a00a82c <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
1a00a822:	4a04      	ldr	r2, [pc, #16]	; (1a00a834 <mpu_set_int_latched+0x84>)
1a00a824:	79fb      	ldrb	r3, [r7, #7]
1a00a826:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
1a00a82a:	2300      	movs	r3, #0
}
1a00a82c:	4618      	mov	r0, r3
1a00a82e:	3710      	adds	r7, #16
1a00a830:	46bd      	mov	sp, r7
1a00a832:	bd80      	pop	{r7, pc}
1a00a834:	10086034 	.word	0x10086034

1a00a838 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
1a00a838:	b580      	push	{r7, lr}
1a00a83a:	b084      	sub	sp, #16
1a00a83c:	af00      	add	r7, sp, #0
1a00a83e:	4603      	mov	r3, r0
1a00a840:	603a      	str	r2, [r7, #0]
1a00a842:	80fb      	strh	r3, [r7, #6]
1a00a844:	460b      	mov	r3, r1
1a00a846:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
1a00a848:	683b      	ldr	r3, [r7, #0]
1a00a84a:	2b00      	cmp	r3, #0
1a00a84c:	d102      	bne.n	1a00a854 <mpu_write_mem+0x1c>
        return -1;
1a00a84e:	f04f 33ff 	mov.w	r3, #4294967295
1a00a852:	e03d      	b.n	1a00a8d0 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
1a00a854:	4b20      	ldr	r3, [pc, #128]	; (1a00a8d8 <mpu_write_mem+0xa0>)
1a00a856:	7a9b      	ldrb	r3, [r3, #10]
1a00a858:	2b00      	cmp	r3, #0
1a00a85a:	d102      	bne.n	1a00a862 <mpu_write_mem+0x2a>
        return -1;
1a00a85c:	f04f 33ff 	mov.w	r3, #4294967295
1a00a860:	e036      	b.n	1a00a8d0 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
1a00a862:	88fb      	ldrh	r3, [r7, #6]
1a00a864:	0a1b      	lsrs	r3, r3, #8
1a00a866:	b29b      	uxth	r3, r3
1a00a868:	b2db      	uxtb	r3, r3
1a00a86a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
1a00a86c:	88fb      	ldrh	r3, [r7, #6]
1a00a86e:	b2db      	uxtb	r3, r3
1a00a870:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
1a00a872:	7b7b      	ldrb	r3, [r7, #13]
1a00a874:	461a      	mov	r2, r3
1a00a876:	88bb      	ldrh	r3, [r7, #4]
1a00a878:	4413      	add	r3, r2
1a00a87a:	4a17      	ldr	r2, [pc, #92]	; (1a00a8d8 <mpu_write_mem+0xa0>)
1a00a87c:	6852      	ldr	r2, [r2, #4]
1a00a87e:	8952      	ldrh	r2, [r2, #10]
1a00a880:	4293      	cmp	r3, r2
1a00a882:	dd02      	ble.n	1a00a88a <mpu_write_mem+0x52>
        return -1;
1a00a884:	f04f 33ff 	mov.w	r3, #4294967295
1a00a888:	e022      	b.n	1a00a8d0 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
1a00a88a:	4b13      	ldr	r3, [pc, #76]	; (1a00a8d8 <mpu_write_mem+0xa0>)
1a00a88c:	685b      	ldr	r3, [r3, #4]
1a00a88e:	7818      	ldrb	r0, [r3, #0]
1a00a890:	4b11      	ldr	r3, [pc, #68]	; (1a00a8d8 <mpu_write_mem+0xa0>)
1a00a892:	681b      	ldr	r3, [r3, #0]
1a00a894:	7ed9      	ldrb	r1, [r3, #27]
1a00a896:	f107 030c 	add.w	r3, r7, #12
1a00a89a:	2202      	movs	r2, #2
1a00a89c:	f7f8 fa2c 	bl	1a002cf8 <i2c_write>
1a00a8a0:	4603      	mov	r3, r0
1a00a8a2:	2b00      	cmp	r3, #0
1a00a8a4:	d002      	beq.n	1a00a8ac <mpu_write_mem+0x74>
        return -1;
1a00a8a6:	f04f 33ff 	mov.w	r3, #4294967295
1a00a8aa:	e011      	b.n	1a00a8d0 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
1a00a8ac:	4b0a      	ldr	r3, [pc, #40]	; (1a00a8d8 <mpu_write_mem+0xa0>)
1a00a8ae:	685b      	ldr	r3, [r3, #4]
1a00a8b0:	7818      	ldrb	r0, [r3, #0]
1a00a8b2:	4b09      	ldr	r3, [pc, #36]	; (1a00a8d8 <mpu_write_mem+0xa0>)
1a00a8b4:	681b      	ldr	r3, [r3, #0]
1a00a8b6:	7e19      	ldrb	r1, [r3, #24]
1a00a8b8:	88bb      	ldrh	r3, [r7, #4]
1a00a8ba:	b2da      	uxtb	r2, r3
1a00a8bc:	683b      	ldr	r3, [r7, #0]
1a00a8be:	f7f8 fa1b 	bl	1a002cf8 <i2c_write>
1a00a8c2:	4603      	mov	r3, r0
1a00a8c4:	2b00      	cmp	r3, #0
1a00a8c6:	d002      	beq.n	1a00a8ce <mpu_write_mem+0x96>
        return -1;
1a00a8c8:	f04f 33ff 	mov.w	r3, #4294967295
1a00a8cc:	e000      	b.n	1a00a8d0 <mpu_write_mem+0x98>
    return 0;
1a00a8ce:	2300      	movs	r3, #0
}
1a00a8d0:	4618      	mov	r0, r3
1a00a8d2:	3710      	adds	r7, #16
1a00a8d4:	46bd      	mov	sp, r7
1a00a8d6:	bd80      	pop	{r7, pc}
1a00a8d8:	10086034 	.word	0x10086034

1a00a8dc <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
1a00a8dc:	b580      	push	{r7, lr}
1a00a8de:	b084      	sub	sp, #16
1a00a8e0:	af00      	add	r7, sp, #0
1a00a8e2:	4603      	mov	r3, r0
1a00a8e4:	603a      	str	r2, [r7, #0]
1a00a8e6:	80fb      	strh	r3, [r7, #6]
1a00a8e8:	460b      	mov	r3, r1
1a00a8ea:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
1a00a8ec:	683b      	ldr	r3, [r7, #0]
1a00a8ee:	2b00      	cmp	r3, #0
1a00a8f0:	d102      	bne.n	1a00a8f8 <mpu_read_mem+0x1c>
        return -1;
1a00a8f2:	f04f 33ff 	mov.w	r3, #4294967295
1a00a8f6:	e03d      	b.n	1a00a974 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
1a00a8f8:	4b20      	ldr	r3, [pc, #128]	; (1a00a97c <mpu_read_mem+0xa0>)
1a00a8fa:	7a9b      	ldrb	r3, [r3, #10]
1a00a8fc:	2b00      	cmp	r3, #0
1a00a8fe:	d102      	bne.n	1a00a906 <mpu_read_mem+0x2a>
        return -1;
1a00a900:	f04f 33ff 	mov.w	r3, #4294967295
1a00a904:	e036      	b.n	1a00a974 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
1a00a906:	88fb      	ldrh	r3, [r7, #6]
1a00a908:	0a1b      	lsrs	r3, r3, #8
1a00a90a:	b29b      	uxth	r3, r3
1a00a90c:	b2db      	uxtb	r3, r3
1a00a90e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
1a00a910:	88fb      	ldrh	r3, [r7, #6]
1a00a912:	b2db      	uxtb	r3, r3
1a00a914:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
1a00a916:	7b7b      	ldrb	r3, [r7, #13]
1a00a918:	461a      	mov	r2, r3
1a00a91a:	88bb      	ldrh	r3, [r7, #4]
1a00a91c:	4413      	add	r3, r2
1a00a91e:	4a17      	ldr	r2, [pc, #92]	; (1a00a97c <mpu_read_mem+0xa0>)
1a00a920:	6852      	ldr	r2, [r2, #4]
1a00a922:	8952      	ldrh	r2, [r2, #10]
1a00a924:	4293      	cmp	r3, r2
1a00a926:	dd02      	ble.n	1a00a92e <mpu_read_mem+0x52>
        return -1;
1a00a928:	f04f 33ff 	mov.w	r3, #4294967295
1a00a92c:	e022      	b.n	1a00a974 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
1a00a92e:	4b13      	ldr	r3, [pc, #76]	; (1a00a97c <mpu_read_mem+0xa0>)
1a00a930:	685b      	ldr	r3, [r3, #4]
1a00a932:	7818      	ldrb	r0, [r3, #0]
1a00a934:	4b11      	ldr	r3, [pc, #68]	; (1a00a97c <mpu_read_mem+0xa0>)
1a00a936:	681b      	ldr	r3, [r3, #0]
1a00a938:	7ed9      	ldrb	r1, [r3, #27]
1a00a93a:	f107 030c 	add.w	r3, r7, #12
1a00a93e:	2202      	movs	r2, #2
1a00a940:	f7f8 f9da 	bl	1a002cf8 <i2c_write>
1a00a944:	4603      	mov	r3, r0
1a00a946:	2b00      	cmp	r3, #0
1a00a948:	d002      	beq.n	1a00a950 <mpu_read_mem+0x74>
        return -1;
1a00a94a:	f04f 33ff 	mov.w	r3, #4294967295
1a00a94e:	e011      	b.n	1a00a974 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
1a00a950:	4b0a      	ldr	r3, [pc, #40]	; (1a00a97c <mpu_read_mem+0xa0>)
1a00a952:	685b      	ldr	r3, [r3, #4]
1a00a954:	7818      	ldrb	r0, [r3, #0]
1a00a956:	4b09      	ldr	r3, [pc, #36]	; (1a00a97c <mpu_read_mem+0xa0>)
1a00a958:	681b      	ldr	r3, [r3, #0]
1a00a95a:	7e19      	ldrb	r1, [r3, #24]
1a00a95c:	88bb      	ldrh	r3, [r7, #4]
1a00a95e:	b2da      	uxtb	r2, r3
1a00a960:	683b      	ldr	r3, [r7, #0]
1a00a962:	f7f8 f9f7 	bl	1a002d54 <i2c_read>
1a00a966:	4603      	mov	r3, r0
1a00a968:	2b00      	cmp	r3, #0
1a00a96a:	d002      	beq.n	1a00a972 <mpu_read_mem+0x96>
        return -1;
1a00a96c:	f04f 33ff 	mov.w	r3, #4294967295
1a00a970:	e000      	b.n	1a00a974 <mpu_read_mem+0x98>
    return 0;
1a00a972:	2300      	movs	r3, #0
}
1a00a974:	4618      	mov	r0, r3
1a00a976:	3710      	adds	r7, #16
1a00a978:	46bd      	mov	sp, r7
1a00a97a:	bd80      	pop	{r7, pc}
1a00a97c:	10086034 	.word	0x10086034

1a00a980 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
1a00a980:	b580      	push	{r7, lr}
1a00a982:	b08a      	sub	sp, #40	; 0x28
1a00a984:	af00      	add	r7, sp, #0
1a00a986:	60b9      	str	r1, [r7, #8]
1a00a988:	4611      	mov	r1, r2
1a00a98a:	461a      	mov	r2, r3
1a00a98c:	4603      	mov	r3, r0
1a00a98e:	81fb      	strh	r3, [r7, #14]
1a00a990:	460b      	mov	r3, r1
1a00a992:	81bb      	strh	r3, [r7, #12]
1a00a994:	4613      	mov	r3, r2
1a00a996:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
1a00a998:	4b37      	ldr	r3, [pc, #220]	; (1a00aa78 <mpu_load_firmware+0xf8>)
1a00a99a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
1a00a99e:	2b00      	cmp	r3, #0
1a00a9a0:	d002      	beq.n	1a00a9a8 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
1a00a9a2:	f04f 33ff 	mov.w	r3, #4294967295
1a00a9a6:	e062      	b.n	1a00aa6e <mpu_load_firmware+0xee>

    if (!firmware)
1a00a9a8:	68bb      	ldr	r3, [r7, #8]
1a00a9aa:	2b00      	cmp	r3, #0
1a00a9ac:	d102      	bne.n	1a00a9b4 <mpu_load_firmware+0x34>
        return -1;
1a00a9ae:	f04f 33ff 	mov.w	r3, #4294967295
1a00a9b2:	e05c      	b.n	1a00aa6e <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
1a00a9b4:	2300      	movs	r3, #0
1a00a9b6:	84fb      	strh	r3, [r7, #38]	; 0x26
1a00a9b8:	e034      	b.n	1a00aa24 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
1a00a9ba:	89fa      	ldrh	r2, [r7, #14]
1a00a9bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
1a00a9be:	1ad3      	subs	r3, r2, r3
1a00a9c0:	2b10      	cmp	r3, #16
1a00a9c2:	bfa8      	it	ge
1a00a9c4:	2310      	movge	r3, #16
1a00a9c6:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
1a00a9c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
1a00a9ca:	68ba      	ldr	r2, [r7, #8]
1a00a9cc:	441a      	add	r2, r3
1a00a9ce:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
1a00a9d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
1a00a9d2:	4618      	mov	r0, r3
1a00a9d4:	f7ff ff30 	bl	1a00a838 <mpu_write_mem>
1a00a9d8:	4603      	mov	r3, r0
1a00a9da:	2b00      	cmp	r3, #0
1a00a9dc:	d002      	beq.n	1a00a9e4 <mpu_load_firmware+0x64>
            return -1;
1a00a9de:	f04f 33ff 	mov.w	r3, #4294967295
1a00a9e2:	e044      	b.n	1a00aa6e <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
1a00a9e4:	f107 0214 	add.w	r2, r7, #20
1a00a9e8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
1a00a9ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
1a00a9ec:	4618      	mov	r0, r3
1a00a9ee:	f7ff ff75 	bl	1a00a8dc <mpu_read_mem>
1a00a9f2:	4603      	mov	r3, r0
1a00a9f4:	2b00      	cmp	r3, #0
1a00a9f6:	d002      	beq.n	1a00a9fe <mpu_load_firmware+0x7e>
            return -1;
1a00a9f8:	f04f 33ff 	mov.w	r3, #4294967295
1a00a9fc:	e037      	b.n	1a00aa6e <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
1a00a9fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
1a00aa00:	68ba      	ldr	r2, [r7, #8]
1a00aa02:	4413      	add	r3, r2
1a00aa04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
1a00aa06:	f107 0114 	add.w	r1, r7, #20
1a00aa0a:	4618      	mov	r0, r3
1a00aa0c:	f00a f834 	bl	1a014a78 <memcmp>
1a00aa10:	4603      	mov	r3, r0
1a00aa12:	2b00      	cmp	r3, #0
1a00aa14:	d002      	beq.n	1a00aa1c <mpu_load_firmware+0x9c>
            return -2;
1a00aa16:	f06f 0301 	mvn.w	r3, #1
1a00aa1a:	e028      	b.n	1a00aa6e <mpu_load_firmware+0xee>
        /* DMP should only be loaded once. */
        return -1;

    if (!firmware)
        return -1;
    for (ii = 0; ii < length; ii += this_write) {
1a00aa1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
1a00aa1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
1a00aa20:	4413      	add	r3, r2
1a00aa22:	84fb      	strh	r3, [r7, #38]	; 0x26
1a00aa24:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
1a00aa26:	89fb      	ldrh	r3, [r7, #14]
1a00aa28:	429a      	cmp	r2, r3
1a00aa2a:	d3c6      	bcc.n	1a00a9ba <mpu_load_firmware+0x3a>
        if (memcmp(firmware+ii, cur, this_write))
            return -2;
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
1a00aa2c:	89bb      	ldrh	r3, [r7, #12]
1a00aa2e:	0a1b      	lsrs	r3, r3, #8
1a00aa30:	b29b      	uxth	r3, r3
1a00aa32:	b2db      	uxtb	r3, r3
1a00aa34:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
1a00aa36:	89bb      	ldrh	r3, [r7, #12]
1a00aa38:	b2db      	uxtb	r3, r3
1a00aa3a:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
1a00aa3c:	4b0e      	ldr	r3, [pc, #56]	; (1a00aa78 <mpu_load_firmware+0xf8>)
1a00aa3e:	685b      	ldr	r3, [r3, #4]
1a00aa40:	7818      	ldrb	r0, [r3, #0]
1a00aa42:	4b0d      	ldr	r3, [pc, #52]	; (1a00aa78 <mpu_load_firmware+0xf8>)
1a00aa44:	681b      	ldr	r3, [r3, #0]
1a00aa46:	7f59      	ldrb	r1, [r3, #29]
1a00aa48:	f107 0310 	add.w	r3, r7, #16
1a00aa4c:	2202      	movs	r2, #2
1a00aa4e:	f7f8 f953 	bl	1a002cf8 <i2c_write>
1a00aa52:	4603      	mov	r3, r0
1a00aa54:	2b00      	cmp	r3, #0
1a00aa56:	d002      	beq.n	1a00aa5e <mpu_load_firmware+0xde>
        return -1;
1a00aa58:	f04f 33ff 	mov.w	r3, #4294967295
1a00aa5c:	e007      	b.n	1a00aa6e <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
1a00aa5e:	4b06      	ldr	r3, [pc, #24]	; (1a00aa78 <mpu_load_firmware+0xf8>)
1a00aa60:	2201      	movs	r2, #1
1a00aa62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
1a00aa66:	4a04      	ldr	r2, [pc, #16]	; (1a00aa78 <mpu_load_firmware+0xf8>)
1a00aa68:	88fb      	ldrh	r3, [r7, #6]
1a00aa6a:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
1a00aa6c:	2300      	movs	r3, #0
}
1a00aa6e:	4618      	mov	r0, r3
1a00aa70:	3728      	adds	r7, #40	; 0x28
1a00aa72:	46bd      	mov	sp, r7
1a00aa74:	bd80      	pop	{r7, pc}
1a00aa76:	bf00      	nop
1a00aa78:	10086034 	.word	0x10086034

1a00aa7c <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
1a00aa7c:	b580      	push	{r7, lr}
1a00aa7e:	b084      	sub	sp, #16
1a00aa80:	af00      	add	r7, sp, #0
1a00aa82:	4603      	mov	r3, r0
1a00aa84:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
1a00aa86:	4b26      	ldr	r3, [pc, #152]	; (1a00ab20 <mpu_set_dmp_state+0xa4>)
1a00aa88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a00aa8c:	79fa      	ldrb	r2, [r7, #7]
1a00aa8e:	429a      	cmp	r2, r3
1a00aa90:	d101      	bne.n	1a00aa96 <mpu_set_dmp_state+0x1a>
        return 0;
1a00aa92:	2300      	movs	r3, #0
1a00aa94:	e040      	b.n	1a00ab18 <mpu_set_dmp_state+0x9c>

    if (enable) {
1a00aa96:	79fb      	ldrb	r3, [r7, #7]
1a00aa98:	2b00      	cmp	r3, #0
1a00aa9a:	d027      	beq.n	1a00aaec <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
1a00aa9c:	4b20      	ldr	r3, [pc, #128]	; (1a00ab20 <mpu_set_dmp_state+0xa4>)
1a00aa9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
1a00aaa2:	2b00      	cmp	r3, #0
1a00aaa4:	d102      	bne.n	1a00aaac <mpu_set_dmp_state+0x30>
            return -1;
1a00aaa6:	f04f 33ff 	mov.w	r3, #4294967295
1a00aaaa:	e035      	b.n	1a00ab18 <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
1a00aaac:	2000      	movs	r0, #0
1a00aaae:	f7fe fecf 	bl	1a009850 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
1a00aab2:	2000      	movs	r0, #0
1a00aab4:	f7ff fda4 	bl	1a00a600 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
1a00aab8:	4b19      	ldr	r3, [pc, #100]	; (1a00ab20 <mpu_set_dmp_state+0xa4>)
1a00aaba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
1a00aabc:	4618      	mov	r0, r3
1a00aabe:	f7ff fb43 	bl	1a00a148 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
1a00aac2:	2300      	movs	r3, #0
1a00aac4:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
1a00aac6:	4b16      	ldr	r3, [pc, #88]	; (1a00ab20 <mpu_set_dmp_state+0xa4>)
1a00aac8:	685b      	ldr	r3, [r3, #4]
1a00aaca:	7818      	ldrb	r0, [r3, #0]
1a00aacc:	f107 030f 	add.w	r3, r7, #15
1a00aad0:	2201      	movs	r2, #1
1a00aad2:	2123      	movs	r1, #35	; 0x23
1a00aad4:	f7f8 f910 	bl	1a002cf8 <i2c_write>
        st.chip_cfg.dmp_on = 1;
1a00aad8:	4b11      	ldr	r3, [pc, #68]	; (1a00ab20 <mpu_set_dmp_state+0xa4>)
1a00aada:	2201      	movs	r2, #1
1a00aadc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
1a00aae0:	2001      	movs	r0, #1
1a00aae2:	f7fe feb5 	bl	1a009850 <set_int_enable>
        mpu_reset_fifo();
1a00aae6:	f7ff f89b 	bl	1a009c20 <mpu_reset_fifo>
1a00aaea:	e014      	b.n	1a00ab16 <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
1a00aaec:	2000      	movs	r0, #0
1a00aaee:	f7fe feaf 	bl	1a009850 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
1a00aaf2:	4b0b      	ldr	r3, [pc, #44]	; (1a00ab20 <mpu_set_dmp_state+0xa4>)
1a00aaf4:	7c1b      	ldrb	r3, [r3, #16]
1a00aaf6:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
1a00aaf8:	4b09      	ldr	r3, [pc, #36]	; (1a00ab20 <mpu_set_dmp_state+0xa4>)
1a00aafa:	685b      	ldr	r3, [r3, #4]
1a00aafc:	7818      	ldrb	r0, [r3, #0]
1a00aafe:	f107 030f 	add.w	r3, r7, #15
1a00ab02:	2201      	movs	r2, #1
1a00ab04:	2123      	movs	r1, #35	; 0x23
1a00ab06:	f7f8 f8f7 	bl	1a002cf8 <i2c_write>
        st.chip_cfg.dmp_on = 0;
1a00ab0a:	4b05      	ldr	r3, [pc, #20]	; (1a00ab20 <mpu_set_dmp_state+0xa4>)
1a00ab0c:	2200      	movs	r2, #0
1a00ab0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
1a00ab12:	f7ff f885 	bl	1a009c20 <mpu_reset_fifo>
    }
    return 0;
1a00ab16:	2300      	movs	r3, #0
}
1a00ab18:	4618      	mov	r0, r3
1a00ab1a:	3710      	adds	r7, #16
1a00ab1c:	46bd      	mov	sp, r7
1a00ab1e:	bd80      	pop	{r7, pc}
1a00ab20:	10086034 	.word	0x10086034

1a00ab24 <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
1a00ab24:	b580      	push	{r7, lr}
1a00ab26:	b084      	sub	sp, #16
1a00ab28:	af00      	add	r7, sp, #0
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
1a00ab2a:	2001      	movs	r0, #1
1a00ab2c:	f7ff fd68 	bl	1a00a600 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
1a00ab30:	230c      	movs	r3, #12
1a00ab32:	73fb      	strb	r3, [r7, #15]
1a00ab34:	e00f      	b.n	1a00ab56 <setup_compass+0x32>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
1a00ab36:	1d3b      	adds	r3, r7, #4
1a00ab38:	7bf8      	ldrb	r0, [r7, #15]
1a00ab3a:	2201      	movs	r2, #1
1a00ab3c:	2100      	movs	r1, #0
1a00ab3e:	f7f8 f909 	bl	1a002d54 <i2c_read>
1a00ab42:	60b8      	str	r0, [r7, #8]
        if (!result && (data[0] == AKM_WHOAMI))
1a00ab44:	68bb      	ldr	r3, [r7, #8]
1a00ab46:	2b00      	cmp	r3, #0
1a00ab48:	d102      	bne.n	1a00ab50 <setup_compass+0x2c>
1a00ab4a:	793b      	ldrb	r3, [r7, #4]
1a00ab4c:	2b48      	cmp	r3, #72	; 0x48
1a00ab4e:	d006      	beq.n	1a00ab5e <setup_compass+0x3a>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
1a00ab50:	7bfb      	ldrb	r3, [r7, #15]
1a00ab52:	3301      	adds	r3, #1
1a00ab54:	73fb      	strb	r3, [r7, #15]
1a00ab56:	7bfb      	ldrb	r3, [r7, #15]
1a00ab58:	2b0f      	cmp	r3, #15
1a00ab5a:	d9ec      	bls.n	1a00ab36 <setup_compass+0x12>
1a00ab5c:	e000      	b.n	1a00ab60 <setup_compass+0x3c>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
1a00ab5e:	bf00      	nop
    }

    if (akm_addr > 0x0F) {
1a00ab60:	7bfb      	ldrb	r3, [r7, #15]
1a00ab62:	2b0f      	cmp	r3, #15
1a00ab64:	d905      	bls.n	1a00ab72 <setup_compass+0x4e>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
1a00ab66:	4898      	ldr	r0, [pc, #608]	; (1a00adc8 <setup_compass+0x2a4>)
1a00ab68:	f7fc f808 	bl	1a006b7c <xprintf>
        return -1;
1a00ab6c:	f04f 33ff 	mov.w	r3, #4294967295
1a00ab70:	e125      	b.n	1a00adbe <setup_compass+0x29a>
    }

    st.chip_cfg.compass_addr = akm_addr;
1a00ab72:	4a96      	ldr	r2, [pc, #600]	; (1a00adcc <setup_compass+0x2a8>)
1a00ab74:	7bfb      	ldrb	r3, [r7, #15]
1a00ab76:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

    data[0] = AKM_POWER_DOWN;
1a00ab7a:	2300      	movs	r3, #0
1a00ab7c:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1a00ab7e:	4b93      	ldr	r3, [pc, #588]	; (1a00adcc <setup_compass+0x2a8>)
1a00ab80:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
1a00ab84:	1d3b      	adds	r3, r7, #4
1a00ab86:	2201      	movs	r2, #1
1a00ab88:	210a      	movs	r1, #10
1a00ab8a:	f7f8 f8b5 	bl	1a002cf8 <i2c_write>
1a00ab8e:	4603      	mov	r3, r0
1a00ab90:	2b00      	cmp	r3, #0
1a00ab92:	d002      	beq.n	1a00ab9a <setup_compass+0x76>
        return -1;
1a00ab94:	f04f 33ff 	mov.w	r3, #4294967295
1a00ab98:	e111      	b.n	1a00adbe <setup_compass+0x29a>
    delay_ms(1);
1a00ab9a:	2001      	movs	r0, #1
1a00ab9c:	f7fb fd2c 	bl	1a0065f8 <timerDelayMs>

    data[0] = AKM_FUSE_ROM_ACCESS;
1a00aba0:	230f      	movs	r3, #15
1a00aba2:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1a00aba4:	4b89      	ldr	r3, [pc, #548]	; (1a00adcc <setup_compass+0x2a8>)
1a00aba6:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
1a00abaa:	1d3b      	adds	r3, r7, #4
1a00abac:	2201      	movs	r2, #1
1a00abae:	210a      	movs	r1, #10
1a00abb0:	f7f8 f8a2 	bl	1a002cf8 <i2c_write>
1a00abb4:	4603      	mov	r3, r0
1a00abb6:	2b00      	cmp	r3, #0
1a00abb8:	d002      	beq.n	1a00abc0 <setup_compass+0x9c>
        return -1;
1a00abba:	f04f 33ff 	mov.w	r3, #4294967295
1a00abbe:	e0fe      	b.n	1a00adbe <setup_compass+0x29a>
    delay_ms(1);
1a00abc0:	2001      	movs	r0, #1
1a00abc2:	f7fb fd19 	bl	1a0065f8 <timerDelayMs>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
1a00abc6:	4b81      	ldr	r3, [pc, #516]	; (1a00adcc <setup_compass+0x2a8>)
1a00abc8:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
1a00abcc:	1d3b      	adds	r3, r7, #4
1a00abce:	2203      	movs	r2, #3
1a00abd0:	2110      	movs	r1, #16
1a00abd2:	f7f8 f8bf 	bl	1a002d54 <i2c_read>
1a00abd6:	4603      	mov	r3, r0
1a00abd8:	2b00      	cmp	r3, #0
1a00abda:	d002      	beq.n	1a00abe2 <setup_compass+0xbe>
        return -1;
1a00abdc:	f04f 33ff 	mov.w	r3, #4294967295
1a00abe0:	e0ed      	b.n	1a00adbe <setup_compass+0x29a>
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
1a00abe2:	793b      	ldrb	r3, [r7, #4]
1a00abe4:	b29b      	uxth	r3, r3
1a00abe6:	3380      	adds	r3, #128	; 0x80
1a00abe8:	b29b      	uxth	r3, r3
1a00abea:	b29a      	uxth	r2, r3
1a00abec:	4b77      	ldr	r3, [pc, #476]	; (1a00adcc <setup_compass+0x2a8>)
1a00abee:	859a      	strh	r2, [r3, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
1a00abf0:	797b      	ldrb	r3, [r7, #5]
1a00abf2:	b29b      	uxth	r3, r3
1a00abf4:	3380      	adds	r3, #128	; 0x80
1a00abf6:	b29b      	uxth	r3, r3
1a00abf8:	b29a      	uxth	r2, r3
1a00abfa:	4b74      	ldr	r3, [pc, #464]	; (1a00adcc <setup_compass+0x2a8>)
1a00abfc:	85da      	strh	r2, [r3, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
1a00abfe:	79bb      	ldrb	r3, [r7, #6]
1a00ac00:	b29b      	uxth	r3, r3
1a00ac02:	3380      	adds	r3, #128	; 0x80
1a00ac04:	b29b      	uxth	r3, r3
1a00ac06:	b29a      	uxth	r2, r3
1a00ac08:	4b70      	ldr	r3, [pc, #448]	; (1a00adcc <setup_compass+0x2a8>)
1a00ac0a:	861a      	strh	r2, [r3, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
1a00ac0c:	2300      	movs	r3, #0
1a00ac0e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1a00ac10:	4b6e      	ldr	r3, [pc, #440]	; (1a00adcc <setup_compass+0x2a8>)
1a00ac12:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
1a00ac16:	1d3b      	adds	r3, r7, #4
1a00ac18:	2201      	movs	r2, #1
1a00ac1a:	210a      	movs	r1, #10
1a00ac1c:	f7f8 f86c 	bl	1a002cf8 <i2c_write>
1a00ac20:	4603      	mov	r3, r0
1a00ac22:	2b00      	cmp	r3, #0
1a00ac24:	d002      	beq.n	1a00ac2c <setup_compass+0x108>
        return -1;
1a00ac26:	f04f 33ff 	mov.w	r3, #4294967295
1a00ac2a:	e0c8      	b.n	1a00adbe <setup_compass+0x29a>
    delay_ms(1);
1a00ac2c:	2001      	movs	r0, #1
1a00ac2e:	f7fb fce3 	bl	1a0065f8 <timerDelayMs>

    mpu_set_bypass(0);
1a00ac32:	2000      	movs	r0, #0
1a00ac34:	f7ff fce4 	bl	1a00a600 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
1a00ac38:	2340      	movs	r3, #64	; 0x40
1a00ac3a:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
1a00ac3c:	4b63      	ldr	r3, [pc, #396]	; (1a00adcc <setup_compass+0x2a8>)
1a00ac3e:	685b      	ldr	r3, [r3, #4]
1a00ac40:	7818      	ldrb	r0, [r3, #0]
1a00ac42:	4b62      	ldr	r3, [pc, #392]	; (1a00adcc <setup_compass+0x2a8>)
1a00ac44:	681b      	ldr	r3, [r3, #0]
1a00ac46:	7e99      	ldrb	r1, [r3, #26]
1a00ac48:	1d3b      	adds	r3, r7, #4
1a00ac4a:	2201      	movs	r2, #1
1a00ac4c:	f7f8 f854 	bl	1a002cf8 <i2c_write>
1a00ac50:	4603      	mov	r3, r0
1a00ac52:	2b00      	cmp	r3, #0
1a00ac54:	d002      	beq.n	1a00ac5c <setup_compass+0x138>
        return -1;
1a00ac56:	f04f 33ff 	mov.w	r3, #4294967295
1a00ac5a:	e0b0      	b.n	1a00adbe <setup_compass+0x29a>

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
1a00ac5c:	4b5b      	ldr	r3, [pc, #364]	; (1a00adcc <setup_compass+0x2a8>)
1a00ac5e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
1a00ac62:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a00ac66:	b2db      	uxtb	r3, r3
1a00ac68:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
1a00ac6a:	4b58      	ldr	r3, [pc, #352]	; (1a00adcc <setup_compass+0x2a8>)
1a00ac6c:	685b      	ldr	r3, [r3, #4]
1a00ac6e:	7818      	ldrb	r0, [r3, #0]
1a00ac70:	4b56      	ldr	r3, [pc, #344]	; (1a00adcc <setup_compass+0x2a8>)
1a00ac72:	681b      	ldr	r3, [r3, #0]
1a00ac74:	7f99      	ldrb	r1, [r3, #30]
1a00ac76:	1d3b      	adds	r3, r7, #4
1a00ac78:	2201      	movs	r2, #1
1a00ac7a:	f7f8 f83d 	bl	1a002cf8 <i2c_write>
1a00ac7e:	4603      	mov	r3, r0
1a00ac80:	2b00      	cmp	r3, #0
1a00ac82:	d002      	beq.n	1a00ac8a <setup_compass+0x166>
        return -1;
1a00ac84:	f04f 33ff 	mov.w	r3, #4294967295
1a00ac88:	e099      	b.n	1a00adbe <setup_compass+0x29a>

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
1a00ac8a:	2302      	movs	r3, #2
1a00ac8c:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
1a00ac8e:	4b4f      	ldr	r3, [pc, #316]	; (1a00adcc <setup_compass+0x2a8>)
1a00ac90:	685b      	ldr	r3, [r3, #4]
1a00ac92:	7818      	ldrb	r0, [r3, #0]
1a00ac94:	4b4d      	ldr	r3, [pc, #308]	; (1a00adcc <setup_compass+0x2a8>)
1a00ac96:	681b      	ldr	r3, [r3, #0]
1a00ac98:	7fd9      	ldrb	r1, [r3, #31]
1a00ac9a:	1d3b      	adds	r3, r7, #4
1a00ac9c:	2201      	movs	r2, #1
1a00ac9e:	f7f8 f82b 	bl	1a002cf8 <i2c_write>
1a00aca2:	4603      	mov	r3, r0
1a00aca4:	2b00      	cmp	r3, #0
1a00aca6:	d002      	beq.n	1a00acae <setup_compass+0x18a>
        return -1;
1a00aca8:	f04f 33ff 	mov.w	r3, #4294967295
1a00acac:	e087      	b.n	1a00adbe <setup_compass+0x29a>

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
1a00acae:	2388      	movs	r3, #136	; 0x88
1a00acb0:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
1a00acb2:	4b46      	ldr	r3, [pc, #280]	; (1a00adcc <setup_compass+0x2a8>)
1a00acb4:	685b      	ldr	r3, [r3, #4]
1a00acb6:	7818      	ldrb	r0, [r3, #0]
1a00acb8:	4b44      	ldr	r3, [pc, #272]	; (1a00adcc <setup_compass+0x2a8>)
1a00acba:	681b      	ldr	r3, [r3, #0]
1a00acbc:	f893 1020 	ldrb.w	r1, [r3, #32]
1a00acc0:	1d3b      	adds	r3, r7, #4
1a00acc2:	2201      	movs	r2, #1
1a00acc4:	f7f8 f818 	bl	1a002cf8 <i2c_write>
1a00acc8:	4603      	mov	r3, r0
1a00acca:	2b00      	cmp	r3, #0
1a00accc:	d002      	beq.n	1a00acd4 <setup_compass+0x1b0>
        return -1;
1a00acce:	f04f 33ff 	mov.w	r3, #4294967295
1a00acd2:	e074      	b.n	1a00adbe <setup_compass+0x29a>

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
1a00acd4:	4b3d      	ldr	r3, [pc, #244]	; (1a00adcc <setup_compass+0x2a8>)
1a00acd6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
1a00acda:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
1a00acdc:	4b3b      	ldr	r3, [pc, #236]	; (1a00adcc <setup_compass+0x2a8>)
1a00acde:	685b      	ldr	r3, [r3, #4]
1a00ace0:	7818      	ldrb	r0, [r3, #0]
1a00ace2:	4b3a      	ldr	r3, [pc, #232]	; (1a00adcc <setup_compass+0x2a8>)
1a00ace4:	681b      	ldr	r3, [r3, #0]
1a00ace6:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
1a00acea:	1d3b      	adds	r3, r7, #4
1a00acec:	2201      	movs	r2, #1
1a00acee:	f7f8 f803 	bl	1a002cf8 <i2c_write>
1a00acf2:	4603      	mov	r3, r0
1a00acf4:	2b00      	cmp	r3, #0
1a00acf6:	d002      	beq.n	1a00acfe <setup_compass+0x1da>
        return -1;
1a00acf8:	f04f 33ff 	mov.w	r3, #4294967295
1a00acfc:	e05f      	b.n	1a00adbe <setup_compass+0x29a>

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
1a00acfe:	230a      	movs	r3, #10
1a00ad00:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
1a00ad02:	4b32      	ldr	r3, [pc, #200]	; (1a00adcc <setup_compass+0x2a8>)
1a00ad04:	685b      	ldr	r3, [r3, #4]
1a00ad06:	7818      	ldrb	r0, [r3, #0]
1a00ad08:	4b30      	ldr	r3, [pc, #192]	; (1a00adcc <setup_compass+0x2a8>)
1a00ad0a:	681b      	ldr	r3, [r3, #0]
1a00ad0c:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
1a00ad10:	1d3b      	adds	r3, r7, #4
1a00ad12:	2201      	movs	r2, #1
1a00ad14:	f7f7 fff0 	bl	1a002cf8 <i2c_write>
1a00ad18:	4603      	mov	r3, r0
1a00ad1a:	2b00      	cmp	r3, #0
1a00ad1c:	d002      	beq.n	1a00ad24 <setup_compass+0x200>
        return -1;
1a00ad1e:	f04f 33ff 	mov.w	r3, #4294967295
1a00ad22:	e04c      	b.n	1a00adbe <setup_compass+0x29a>

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
1a00ad24:	2381      	movs	r3, #129	; 0x81
1a00ad26:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
1a00ad28:	4b28      	ldr	r3, [pc, #160]	; (1a00adcc <setup_compass+0x2a8>)
1a00ad2a:	685b      	ldr	r3, [r3, #4]
1a00ad2c:	7818      	ldrb	r0, [r3, #0]
1a00ad2e:	4b27      	ldr	r3, [pc, #156]	; (1a00adcc <setup_compass+0x2a8>)
1a00ad30:	681b      	ldr	r3, [r3, #0]
1a00ad32:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
1a00ad36:	1d3b      	adds	r3, r7, #4
1a00ad38:	2201      	movs	r2, #1
1a00ad3a:	f7f7 ffdd 	bl	1a002cf8 <i2c_write>
1a00ad3e:	4603      	mov	r3, r0
1a00ad40:	2b00      	cmp	r3, #0
1a00ad42:	d002      	beq.n	1a00ad4a <setup_compass+0x226>
        return -1;
1a00ad44:	f04f 33ff 	mov.w	r3, #4294967295
1a00ad48:	e039      	b.n	1a00adbe <setup_compass+0x29a>

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
1a00ad4a:	2301      	movs	r3, #1
1a00ad4c:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
1a00ad4e:	4b1f      	ldr	r3, [pc, #124]	; (1a00adcc <setup_compass+0x2a8>)
1a00ad50:	685b      	ldr	r3, [r3, #4]
1a00ad52:	7818      	ldrb	r0, [r3, #0]
1a00ad54:	4b1d      	ldr	r3, [pc, #116]	; (1a00adcc <setup_compass+0x2a8>)
1a00ad56:	681b      	ldr	r3, [r3, #0]
1a00ad58:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
1a00ad5c:	1d3b      	adds	r3, r7, #4
1a00ad5e:	2201      	movs	r2, #1
1a00ad60:	f7f7 ffca 	bl	1a002cf8 <i2c_write>
1a00ad64:	4603      	mov	r3, r0
1a00ad66:	2b00      	cmp	r3, #0
1a00ad68:	d002      	beq.n	1a00ad70 <setup_compass+0x24c>
        return -1;
1a00ad6a:	f04f 33ff 	mov.w	r3, #4294967295
1a00ad6e:	e026      	b.n	1a00adbe <setup_compass+0x29a>

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
1a00ad70:	2303      	movs	r3, #3
1a00ad72:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
1a00ad74:	4b15      	ldr	r3, [pc, #84]	; (1a00adcc <setup_compass+0x2a8>)
1a00ad76:	685b      	ldr	r3, [r3, #4]
1a00ad78:	7818      	ldrb	r0, [r3, #0]
1a00ad7a:	4b14      	ldr	r3, [pc, #80]	; (1a00adcc <setup_compass+0x2a8>)
1a00ad7c:	681b      	ldr	r3, [r3, #0]
1a00ad7e:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
1a00ad82:	1d3b      	adds	r3, r7, #4
1a00ad84:	2201      	movs	r2, #1
1a00ad86:	f7f7 ffb7 	bl	1a002cf8 <i2c_write>
1a00ad8a:	4603      	mov	r3, r0
1a00ad8c:	2b00      	cmp	r3, #0
1a00ad8e:	d002      	beq.n	1a00ad96 <setup_compass+0x272>
        return -1;
1a00ad90:	f04f 33ff 	mov.w	r3, #4294967295
1a00ad94:	e013      	b.n	1a00adbe <setup_compass+0x29a>

#ifdef MPU9150
    /* For the MPU9150, the auxiliary I2C bus needs to be set to VDD. */
    data[0] = BIT_I2C_MST_VDDIO;
1a00ad96:	2380      	movs	r3, #128	; 0x80
1a00ad98:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
1a00ad9a:	4b0c      	ldr	r3, [pc, #48]	; (1a00adcc <setup_compass+0x2a8>)
1a00ad9c:	685b      	ldr	r3, [r3, #4]
1a00ad9e:	7818      	ldrb	r0, [r3, #0]
1a00ada0:	4b0a      	ldr	r3, [pc, #40]	; (1a00adcc <setup_compass+0x2a8>)
1a00ada2:	681b      	ldr	r3, [r3, #0]
1a00ada4:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
1a00ada8:	1d3b      	adds	r3, r7, #4
1a00adaa:	2201      	movs	r2, #1
1a00adac:	f7f7 ffa4 	bl	1a002cf8 <i2c_write>
1a00adb0:	4603      	mov	r3, r0
1a00adb2:	2b00      	cmp	r3, #0
1a00adb4:	d002      	beq.n	1a00adbc <setup_compass+0x298>
        return -1;
1a00adb6:	f04f 33ff 	mov.w	r3, #4294967295
1a00adba:	e000      	b.n	1a00adbe <setup_compass+0x29a>
#endif

    return 0;
1a00adbc:	2300      	movs	r3, #0
}
1a00adbe:	4618      	mov	r0, r3
1a00adc0:	3710      	adds	r7, #16
1a00adc2:	46bd      	mov	sp, r7
1a00adc4:	bd80      	pop	{r7, pc}
1a00adc6:	bf00      	nop
1a00adc8:	1a019d34 	.word	0x1a019d34
1a00adcc:	10086034 	.word	0x10086034

1a00add0 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
1a00add0:	b580      	push	{r7, lr}
1a00add2:	b086      	sub	sp, #24
1a00add4:	af00      	add	r7, sp, #0
1a00add6:	6078      	str	r0, [r7, #4]
1a00add8:	6039      	str	r1, [r7, #0]
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1a00adda:	4b40      	ldr	r3, [pc, #256]	; (1a00aedc <mpu_get_compass_reg+0x10c>)
1a00addc:	7a9b      	ldrb	r3, [r3, #10]
1a00adde:	f003 0301 	and.w	r3, r3, #1
1a00ade2:	2b00      	cmp	r3, #0
1a00ade4:	d102      	bne.n	1a00adec <mpu_get_compass_reg+0x1c>
        return -1;
1a00ade6:	f04f 33ff 	mov.w	r3, #4294967295
1a00adea:	e072      	b.n	1a00aed2 <mpu_get_compass_reg+0x102>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
1a00adec:	4b3b      	ldr	r3, [pc, #236]	; (1a00aedc <mpu_get_compass_reg+0x10c>)
1a00adee:	685b      	ldr	r3, [r3, #4]
1a00adf0:	7818      	ldrb	r0, [r3, #0]
1a00adf2:	4b3a      	ldr	r3, [pc, #232]	; (1a00aedc <mpu_get_compass_reg+0x10c>)
1a00adf4:	681b      	ldr	r3, [r3, #0]
1a00adf6:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
1a00adfa:	f107 030c 	add.w	r3, r7, #12
1a00adfe:	2208      	movs	r2, #8
1a00ae00:	f7f7 ffa8 	bl	1a002d54 <i2c_read>
1a00ae04:	4603      	mov	r3, r0
1a00ae06:	2b00      	cmp	r3, #0
1a00ae08:	d002      	beq.n	1a00ae10 <mpu_get_compass_reg+0x40>
        return -1;
1a00ae0a:	f04f 33ff 	mov.w	r3, #4294967295
1a00ae0e:	e060      	b.n	1a00aed2 <mpu_get_compass_reg+0x102>
#endif

#if defined AK8975_SECONDARY
    /* AK8975 doesn't have the overrun error bit. */
    if (!(tmp[0] & AKM_DATA_READY))
1a00ae10:	7b3b      	ldrb	r3, [r7, #12]
1a00ae12:	f003 0301 	and.w	r3, r3, #1
1a00ae16:	2b00      	cmp	r3, #0
1a00ae18:	d102      	bne.n	1a00ae20 <mpu_get_compass_reg+0x50>
        return -2;
1a00ae1a:	f06f 0301 	mvn.w	r3, #1
1a00ae1e:	e058      	b.n	1a00aed2 <mpu_get_compass_reg+0x102>
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
1a00ae20:	7cfb      	ldrb	r3, [r7, #19]
1a00ae22:	b2db      	uxtb	r3, r3
1a00ae24:	b25b      	sxtb	r3, r3
1a00ae26:	2b00      	cmp	r3, #0
1a00ae28:	db04      	blt.n	1a00ae34 <mpu_get_compass_reg+0x64>
1a00ae2a:	7cfb      	ldrb	r3, [r7, #19]
1a00ae2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a00ae30:	2b00      	cmp	r3, #0
1a00ae32:	d002      	beq.n	1a00ae3a <mpu_get_compass_reg+0x6a>
        return -3;
1a00ae34:	f06f 0302 	mvn.w	r3, #2
1a00ae38:	e04b      	b.n	1a00aed2 <mpu_get_compass_reg+0x102>
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
1a00ae3a:	7bbb      	ldrb	r3, [r7, #14]
1a00ae3c:	021b      	lsls	r3, r3, #8
1a00ae3e:	b29a      	uxth	r2, r3
1a00ae40:	7b7b      	ldrb	r3, [r7, #13]
1a00ae42:	b29b      	uxth	r3, r3
1a00ae44:	4313      	orrs	r3, r2
1a00ae46:	b29a      	uxth	r2, r3
1a00ae48:	687b      	ldr	r3, [r7, #4]
1a00ae4a:	801a      	strh	r2, [r3, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
1a00ae4c:	687b      	ldr	r3, [r7, #4]
1a00ae4e:	3302      	adds	r3, #2
1a00ae50:	7c3a      	ldrb	r2, [r7, #16]
1a00ae52:	0212      	lsls	r2, r2, #8
1a00ae54:	b291      	uxth	r1, r2
1a00ae56:	7bfa      	ldrb	r2, [r7, #15]
1a00ae58:	b292      	uxth	r2, r2
1a00ae5a:	430a      	orrs	r2, r1
1a00ae5c:	b292      	uxth	r2, r2
1a00ae5e:	801a      	strh	r2, [r3, #0]
    data[2] = (tmp[6] << 8) | tmp[5];
1a00ae60:	687b      	ldr	r3, [r7, #4]
1a00ae62:	3304      	adds	r3, #4
1a00ae64:	7cba      	ldrb	r2, [r7, #18]
1a00ae66:	0212      	lsls	r2, r2, #8
1a00ae68:	b291      	uxth	r1, r2
1a00ae6a:	7c7a      	ldrb	r2, [r7, #17]
1a00ae6c:	b292      	uxth	r2, r2
1a00ae6e:	430a      	orrs	r2, r1
1a00ae70:	b292      	uxth	r2, r2
1a00ae72:	801a      	strh	r2, [r3, #0]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
1a00ae74:	687b      	ldr	r3, [r7, #4]
1a00ae76:	881b      	ldrh	r3, [r3, #0]
1a00ae78:	b21b      	sxth	r3, r3
1a00ae7a:	4a18      	ldr	r2, [pc, #96]	; (1a00aedc <mpu_get_compass_reg+0x10c>)
1a00ae7c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
1a00ae7e:	b212      	sxth	r2, r2
1a00ae80:	fb02 f303 	mul.w	r3, r2, r3
1a00ae84:	121b      	asrs	r3, r3, #8
1a00ae86:	b29a      	uxth	r2, r3
1a00ae88:	687b      	ldr	r3, [r7, #4]
1a00ae8a:	801a      	strh	r2, [r3, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
1a00ae8c:	687b      	ldr	r3, [r7, #4]
1a00ae8e:	3302      	adds	r3, #2
1a00ae90:	687a      	ldr	r2, [r7, #4]
1a00ae92:	3202      	adds	r2, #2
1a00ae94:	8812      	ldrh	r2, [r2, #0]
1a00ae96:	b212      	sxth	r2, r2
1a00ae98:	4910      	ldr	r1, [pc, #64]	; (1a00aedc <mpu_get_compass_reg+0x10c>)
1a00ae9a:	8dc9      	ldrh	r1, [r1, #46]	; 0x2e
1a00ae9c:	b209      	sxth	r1, r1
1a00ae9e:	fb01 f202 	mul.w	r2, r1, r2
1a00aea2:	1212      	asrs	r2, r2, #8
1a00aea4:	b292      	uxth	r2, r2
1a00aea6:	801a      	strh	r2, [r3, #0]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
1a00aea8:	687b      	ldr	r3, [r7, #4]
1a00aeaa:	3304      	adds	r3, #4
1a00aeac:	687a      	ldr	r2, [r7, #4]
1a00aeae:	3204      	adds	r2, #4
1a00aeb0:	8812      	ldrh	r2, [r2, #0]
1a00aeb2:	b212      	sxth	r2, r2
1a00aeb4:	4909      	ldr	r1, [pc, #36]	; (1a00aedc <mpu_get_compass_reg+0x10c>)
1a00aeb6:	8e09      	ldrh	r1, [r1, #48]	; 0x30
1a00aeb8:	b209      	sxth	r1, r1
1a00aeba:	fb01 f202 	mul.w	r2, r1, r2
1a00aebe:	1212      	asrs	r2, r2, #8
1a00aec0:	b292      	uxth	r2, r2
1a00aec2:	801a      	strh	r2, [r3, #0]

    if (timestamp)
1a00aec4:	683b      	ldr	r3, [r7, #0]
1a00aec6:	2b00      	cmp	r3, #0
1a00aec8:	d002      	beq.n	1a00aed0 <mpu_get_compass_reg+0x100>
        get_ms(timestamp);
1a00aeca:	6838      	ldr	r0, [r7, #0]
1a00aecc:	f7fb fbd2 	bl	1a006674 <getTimerMs>
    return 0;
1a00aed0:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
1a00aed2:	4618      	mov	r0, r3
1a00aed4:	3718      	adds	r7, #24
1a00aed6:	46bd      	mov	sp, r7
1a00aed8:	bd80      	pop	{r7, pc}
1a00aeda:	bf00      	nop
1a00aedc:	10086034 	.word	0x10086034

1a00aee0 <mpu_get_compass_fsr>:
 *  @brief      Get the compass full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
1a00aee0:	b480      	push	{r7}
1a00aee2:	b083      	sub	sp, #12
1a00aee4:	af00      	add	r7, sp, #0
1a00aee6:	6078      	str	r0, [r7, #4]
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
1a00aee8:	4b05      	ldr	r3, [pc, #20]	; (1a00af00 <mpu_get_compass_fsr+0x20>)
1a00aeea:	685b      	ldr	r3, [r3, #4]
1a00aeec:	899a      	ldrh	r2, [r3, #12]
1a00aeee:	687b      	ldr	r3, [r7, #4]
1a00aef0:	801a      	strh	r2, [r3, #0]
    return 0;
1a00aef2:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
1a00aef4:	4618      	mov	r0, r3
1a00aef6:	370c      	adds	r7, #12
1a00aef8:	46bd      	mov	sp, r7
1a00aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00aefe:	4770      	bx	lr
1a00af00:	10086034 	.word	0x10086034

1a00af04 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
1a00af04:	b580      	push	{r7, lr}
1a00af06:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
1a00af08:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a00af0c:	23c8      	movs	r3, #200	; 0xc8
1a00af0e:	4904      	ldr	r1, [pc, #16]	; (1a00af20 <dmp_load_motion_driver_firmware+0x1c>)
1a00af10:	f640 30f6 	movw	r0, #3062	; 0xbf6
1a00af14:	f7ff fd34 	bl	1a00a980 <mpu_load_firmware>
1a00af18:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
1a00af1a:	4618      	mov	r0, r3
1a00af1c:	bd80      	pop	{r7, pc}
1a00af1e:	bf00      	nop
1a00af20:	1a019d48 	.word	0x1a019d48

1a00af24 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
1a00af24:	b580      	push	{r7, lr}
1a00af26:	b088      	sub	sp, #32
1a00af28:	af00      	add	r7, sp, #0
1a00af2a:	4603      	mov	r3, r0
1a00af2c:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
1a00af2e:	4a6b      	ldr	r2, [pc, #428]	; (1a00b0dc <dmp_set_orientation+0x1b8>)
1a00af30:	f107 0314 	add.w	r3, r7, #20
1a00af34:	8811      	ldrh	r1, [r2, #0]
1a00af36:	7892      	ldrb	r2, [r2, #2]
1a00af38:	8019      	strh	r1, [r3, #0]
1a00af3a:	709a      	strb	r2, [r3, #2]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
1a00af3c:	4a68      	ldr	r2, [pc, #416]	; (1a00b0e0 <dmp_set_orientation+0x1bc>)
1a00af3e:	f107 0310 	add.w	r3, r7, #16
1a00af42:	8811      	ldrh	r1, [r2, #0]
1a00af44:	7892      	ldrb	r2, [r2, #2]
1a00af46:	8019      	strh	r1, [r3, #0]
1a00af48:	709a      	strb	r2, [r3, #2]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
1a00af4a:	4a66      	ldr	r2, [pc, #408]	; (1a00b0e4 <dmp_set_orientation+0x1c0>)
1a00af4c:	f107 030c 	add.w	r3, r7, #12
1a00af50:	8811      	ldrh	r1, [r2, #0]
1a00af52:	7892      	ldrb	r2, [r2, #2]
1a00af54:	8019      	strh	r1, [r3, #0]
1a00af56:	709a      	strb	r2, [r3, #2]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
1a00af58:	4a63      	ldr	r2, [pc, #396]	; (1a00b0e8 <dmp_set_orientation+0x1c4>)
1a00af5a:	f107 0308 	add.w	r3, r7, #8
1a00af5e:	8811      	ldrh	r1, [r2, #0]
1a00af60:	7892      	ldrb	r2, [r2, #2]
1a00af62:	8019      	strh	r1, [r3, #0]
1a00af64:	709a      	strb	r2, [r3, #2]

    gyro_regs[0] = gyro_axes[orient & 3];
1a00af66:	88fb      	ldrh	r3, [r7, #6]
1a00af68:	f003 0303 	and.w	r3, r3, #3
1a00af6c:	f107 0220 	add.w	r2, r7, #32
1a00af70:	4413      	add	r3, r2
1a00af72:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
1a00af76:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
1a00af78:	88fb      	ldrh	r3, [r7, #6]
1a00af7a:	08db      	lsrs	r3, r3, #3
1a00af7c:	b29b      	uxth	r3, r3
1a00af7e:	f003 0303 	and.w	r3, r3, #3
1a00af82:	f107 0220 	add.w	r2, r7, #32
1a00af86:	4413      	add	r3, r2
1a00af88:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
1a00af8c:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
1a00af8e:	88fb      	ldrh	r3, [r7, #6]
1a00af90:	099b      	lsrs	r3, r3, #6
1a00af92:	b29b      	uxth	r3, r3
1a00af94:	f003 0303 	and.w	r3, r3, #3
1a00af98:	f107 0220 	add.w	r2, r7, #32
1a00af9c:	4413      	add	r3, r2
1a00af9e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
1a00afa2:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
1a00afa4:	88fb      	ldrh	r3, [r7, #6]
1a00afa6:	f003 0303 	and.w	r3, r3, #3
1a00afaa:	f107 0220 	add.w	r2, r7, #32
1a00afae:	4413      	add	r3, r2
1a00afb0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
1a00afb4:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
1a00afb6:	88fb      	ldrh	r3, [r7, #6]
1a00afb8:	08db      	lsrs	r3, r3, #3
1a00afba:	b29b      	uxth	r3, r3
1a00afbc:	f003 0303 	and.w	r3, r3, #3
1a00afc0:	f107 0220 	add.w	r2, r7, #32
1a00afc4:	4413      	add	r3, r2
1a00afc6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
1a00afca:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
1a00afcc:	88fb      	ldrh	r3, [r7, #6]
1a00afce:	099b      	lsrs	r3, r3, #6
1a00afd0:	b29b      	uxth	r3, r3
1a00afd2:	f003 0303 	and.w	r3, r3, #3
1a00afd6:	f107 0220 	add.w	r2, r7, #32
1a00afda:	4413      	add	r3, r2
1a00afdc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
1a00afe0:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
1a00afe2:	f107 031c 	add.w	r3, r7, #28
1a00afe6:	461a      	mov	r2, r3
1a00afe8:	2103      	movs	r1, #3
1a00afea:	f240 4026 	movw	r0, #1062	; 0x426
1a00afee:	f7ff fc23 	bl	1a00a838 <mpu_write_mem>
1a00aff2:	4603      	mov	r3, r0
1a00aff4:	2b00      	cmp	r3, #0
1a00aff6:	d002      	beq.n	1a00affe <dmp_set_orientation+0xda>
        return -1;
1a00aff8:	f04f 33ff 	mov.w	r3, #4294967295
1a00affc:	e06a      	b.n	1a00b0d4 <dmp_set_orientation+0x1b0>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
1a00affe:	f107 0318 	add.w	r3, r7, #24
1a00b002:	461a      	mov	r2, r3
1a00b004:	2103      	movs	r1, #3
1a00b006:	f240 402a 	movw	r0, #1066	; 0x42a
1a00b00a:	f7ff fc15 	bl	1a00a838 <mpu_write_mem>
1a00b00e:	4603      	mov	r3, r0
1a00b010:	2b00      	cmp	r3, #0
1a00b012:	d002      	beq.n	1a00b01a <dmp_set_orientation+0xf6>
        return -1;
1a00b014:	f04f 33ff 	mov.w	r3, #4294967295
1a00b018:	e05c      	b.n	1a00b0d4 <dmp_set_orientation+0x1b0>

    memcpy(gyro_regs, gyro_sign, 3);
1a00b01a:	f107 010c 	add.w	r1, r7, #12
1a00b01e:	f107 031c 	add.w	r3, r7, #28
1a00b022:	2203      	movs	r2, #3
1a00b024:	4618      	mov	r0, r3
1a00b026:	f009 fd59 	bl	1a014adc <memcpy>
    memcpy(accel_regs, accel_sign, 3);
1a00b02a:	f107 0108 	add.w	r1, r7, #8
1a00b02e:	f107 0318 	add.w	r3, r7, #24
1a00b032:	2203      	movs	r2, #3
1a00b034:	4618      	mov	r0, r3
1a00b036:	f009 fd51 	bl	1a014adc <memcpy>
    if (orient & 4) {
1a00b03a:	88fb      	ldrh	r3, [r7, #6]
1a00b03c:	f003 0304 	and.w	r3, r3, #4
1a00b040:	2b00      	cmp	r3, #0
1a00b042:	d009      	beq.n	1a00b058 <dmp_set_orientation+0x134>
        gyro_regs[0] |= 1;
1a00b044:	7f3b      	ldrb	r3, [r7, #28]
1a00b046:	f043 0301 	orr.w	r3, r3, #1
1a00b04a:	b2db      	uxtb	r3, r3
1a00b04c:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
1a00b04e:	7e3b      	ldrb	r3, [r7, #24]
1a00b050:	f043 0301 	orr.w	r3, r3, #1
1a00b054:	b2db      	uxtb	r3, r3
1a00b056:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
1a00b058:	88fb      	ldrh	r3, [r7, #6]
1a00b05a:	f003 0320 	and.w	r3, r3, #32
1a00b05e:	2b00      	cmp	r3, #0
1a00b060:	d009      	beq.n	1a00b076 <dmp_set_orientation+0x152>
        gyro_regs[1] |= 1;
1a00b062:	7f7b      	ldrb	r3, [r7, #29]
1a00b064:	f043 0301 	orr.w	r3, r3, #1
1a00b068:	b2db      	uxtb	r3, r3
1a00b06a:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
1a00b06c:	7e7b      	ldrb	r3, [r7, #25]
1a00b06e:	f043 0301 	orr.w	r3, r3, #1
1a00b072:	b2db      	uxtb	r3, r3
1a00b074:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
1a00b076:	88fb      	ldrh	r3, [r7, #6]
1a00b078:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a00b07c:	2b00      	cmp	r3, #0
1a00b07e:	d009      	beq.n	1a00b094 <dmp_set_orientation+0x170>
        gyro_regs[2] |= 1;
1a00b080:	7fbb      	ldrb	r3, [r7, #30]
1a00b082:	f043 0301 	orr.w	r3, r3, #1
1a00b086:	b2db      	uxtb	r3, r3
1a00b088:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
1a00b08a:	7ebb      	ldrb	r3, [r7, #26]
1a00b08c:	f043 0301 	orr.w	r3, r3, #1
1a00b090:	b2db      	uxtb	r3, r3
1a00b092:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
1a00b094:	f107 031c 	add.w	r3, r7, #28
1a00b098:	461a      	mov	r2, r3
1a00b09a:	2103      	movs	r1, #3
1a00b09c:	f44f 6088 	mov.w	r0, #1088	; 0x440
1a00b0a0:	f7ff fbca 	bl	1a00a838 <mpu_write_mem>
1a00b0a4:	4603      	mov	r3, r0
1a00b0a6:	2b00      	cmp	r3, #0
1a00b0a8:	d002      	beq.n	1a00b0b0 <dmp_set_orientation+0x18c>
        return -1;
1a00b0aa:	f04f 33ff 	mov.w	r3, #4294967295
1a00b0ae:	e011      	b.n	1a00b0d4 <dmp_set_orientation+0x1b0>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
1a00b0b0:	f107 0318 	add.w	r3, r7, #24
1a00b0b4:	461a      	mov	r2, r3
1a00b0b6:	2103      	movs	r1, #3
1a00b0b8:	f240 4031 	movw	r0, #1073	; 0x431
1a00b0bc:	f7ff fbbc 	bl	1a00a838 <mpu_write_mem>
1a00b0c0:	4603      	mov	r3, r0
1a00b0c2:	2b00      	cmp	r3, #0
1a00b0c4:	d002      	beq.n	1a00b0cc <dmp_set_orientation+0x1a8>
        return -1;
1a00b0c6:	f04f 33ff 	mov.w	r3, #4294967295
1a00b0ca:	e003      	b.n	1a00b0d4 <dmp_set_orientation+0x1b0>
    dmp.orient = orient;
1a00b0cc:	4a07      	ldr	r2, [pc, #28]	; (1a00b0ec <dmp_set_orientation+0x1c8>)
1a00b0ce:	88fb      	ldrh	r3, [r7, #6]
1a00b0d0:	8113      	strh	r3, [r2, #8]
    return 0;
1a00b0d2:	2300      	movs	r3, #0
}
1a00b0d4:	4618      	mov	r0, r3
1a00b0d6:	3720      	adds	r7, #32
1a00b0d8:	46bd      	mov	sp, r7
1a00b0da:	bd80      	pop	{r7, pc}
1a00b0dc:	1a01a940 	.word	0x1a01a940
1a00b0e0:	1a01a944 	.word	0x1a01a944
1a00b0e4:	1a01a948 	.word	0x1a01a948
1a00b0e8:	1a01a94c 	.word	0x1a01a94c
1a00b0ec:	10086bd4 	.word	0x10086bd4

1a00b0f0 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
1a00b0f0:	b580      	push	{r7, lr}
1a00b0f2:	b088      	sub	sp, #32
1a00b0f4:	af00      	add	r7, sp, #0
1a00b0f6:	4603      	mov	r3, r0
1a00b0f8:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
1a00b0fa:	4a20      	ldr	r2, [pc, #128]	; (1a00b17c <dmp_set_fifo_rate+0x8c>)
1a00b0fc:	f107 0310 	add.w	r3, r7, #16
1a00b100:	6810      	ldr	r0, [r2, #0]
1a00b102:	6851      	ldr	r1, [r2, #4]
1a00b104:	6892      	ldr	r2, [r2, #8]
1a00b106:	c307      	stmia	r3!, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
1a00b108:	88fb      	ldrh	r3, [r7, #6]
1a00b10a:	2bc8      	cmp	r3, #200	; 0xc8
1a00b10c:	d902      	bls.n	1a00b114 <dmp_set_fifo_rate+0x24>
        return -1;
1a00b10e:	f04f 33ff 	mov.w	r3, #4294967295
1a00b112:	e02e      	b.n	1a00b172 <dmp_set_fifo_rate+0x82>
    div = DMP_SAMPLE_RATE / rate - 1;
1a00b114:	88fb      	ldrh	r3, [r7, #6]
1a00b116:	22c8      	movs	r2, #200	; 0xc8
1a00b118:	fb92 f3f3 	sdiv	r3, r2, r3
1a00b11c:	b29b      	uxth	r3, r3
1a00b11e:	3b01      	subs	r3, #1
1a00b120:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
1a00b122:	8bfb      	ldrh	r3, [r7, #30]
1a00b124:	0a1b      	lsrs	r3, r3, #8
1a00b126:	b29b      	uxth	r3, r3
1a00b128:	b2db      	uxtb	r3, r3
1a00b12a:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
1a00b12c:	8bfb      	ldrh	r3, [r7, #30]
1a00b12e:	b2db      	uxtb	r3, r3
1a00b130:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
1a00b132:	f107 0308 	add.w	r3, r7, #8
1a00b136:	461a      	mov	r2, r3
1a00b138:	2102      	movs	r1, #2
1a00b13a:	f240 2016 	movw	r0, #534	; 0x216
1a00b13e:	f7ff fb7b 	bl	1a00a838 <mpu_write_mem>
1a00b142:	4603      	mov	r3, r0
1a00b144:	2b00      	cmp	r3, #0
1a00b146:	d002      	beq.n	1a00b14e <dmp_set_fifo_rate+0x5e>
        return -1;
1a00b148:	f04f 33ff 	mov.w	r3, #4294967295
1a00b14c:	e011      	b.n	1a00b172 <dmp_set_fifo_rate+0x82>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
1a00b14e:	f107 0310 	add.w	r3, r7, #16
1a00b152:	461a      	mov	r2, r3
1a00b154:	210c      	movs	r1, #12
1a00b156:	f640 20c1 	movw	r0, #2753	; 0xac1
1a00b15a:	f7ff fb6d 	bl	1a00a838 <mpu_write_mem>
1a00b15e:	4603      	mov	r3, r0
1a00b160:	2b00      	cmp	r3, #0
1a00b162:	d002      	beq.n	1a00b16a <dmp_set_fifo_rate+0x7a>
        return -1;
1a00b164:	f04f 33ff 	mov.w	r3, #4294967295
1a00b168:	e003      	b.n	1a00b172 <dmp_set_fifo_rate+0x82>

    dmp.fifo_rate = rate;
1a00b16a:	4a05      	ldr	r2, [pc, #20]	; (1a00b180 <dmp_set_fifo_rate+0x90>)
1a00b16c:	88fb      	ldrh	r3, [r7, #6]
1a00b16e:	8193      	strh	r3, [r2, #12]
    return 0;
1a00b170:	2300      	movs	r3, #0
}
1a00b172:	4618      	mov	r0, r3
1a00b174:	3720      	adds	r7, #32
1a00b176:	46bd      	mov	sp, r7
1a00b178:	bd80      	pop	{r7, pc}
1a00b17a:	bf00      	nop
1a00b17c:	1a01a950 	.word	0x1a01a950
1a00b180:	10086bd4 	.word	0x10086bd4

1a00b184 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
1a00b184:	b580      	push	{r7, lr}
1a00b186:	b086      	sub	sp, #24
1a00b188:	af00      	add	r7, sp, #0
1a00b18a:	4603      	mov	r3, r0
1a00b18c:	460a      	mov	r2, r1
1a00b18e:	71fb      	strb	r3, [r7, #7]
1a00b190:	4613      	mov	r3, r2
1a00b192:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
1a00b194:	79fb      	ldrb	r3, [r7, #7]
1a00b196:	f003 0307 	and.w	r3, r3, #7
1a00b19a:	2b00      	cmp	r3, #0
1a00b19c:	d003      	beq.n	1a00b1a6 <dmp_set_tap_thresh+0x22>
1a00b19e:	88bb      	ldrh	r3, [r7, #4]
1a00b1a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
1a00b1a4:	d902      	bls.n	1a00b1ac <dmp_set_tap_thresh+0x28>
        return -1;
1a00b1a6:	f04f 33ff 	mov.w	r3, #4294967295
1a00b1aa:	e113      	b.n	1a00b3d4 <dmp_set_tap_thresh+0x250>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
1a00b1ac:	88bb      	ldrh	r3, [r7, #4]
1a00b1ae:	ee07 3a90 	vmov	s15, r3
1a00b1b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1a00b1b6:	eddf 6a89 	vldr	s13, [pc, #548]	; 1a00b3dc <dmp_set_tap_thresh+0x258>
1a00b1ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
1a00b1be:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
1a00b1c2:	f107 030b 	add.w	r3, r7, #11
1a00b1c6:	4618      	mov	r0, r3
1a00b1c8:	f7fe feb4 	bl	1a009f34 <mpu_get_accel_fsr>
    switch (accel_fsr) {
1a00b1cc:	7afb      	ldrb	r3, [r7, #11]
1a00b1ce:	3b02      	subs	r3, #2
1a00b1d0:	2b0e      	cmp	r3, #14
1a00b1d2:	f200 8085 	bhi.w	1a00b2e0 <dmp_set_tap_thresh+0x15c>
1a00b1d6:	a201      	add	r2, pc, #4	; (adr r2, 1a00b1dc <dmp_set_tap_thresh+0x58>)
1a00b1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a00b1dc:	1a00b219 	.word	0x1a00b219
1a00b1e0:	1a00b2e1 	.word	0x1a00b2e1
1a00b1e4:	1a00b24b 	.word	0x1a00b24b
1a00b1e8:	1a00b2e1 	.word	0x1a00b2e1
1a00b1ec:	1a00b2e1 	.word	0x1a00b2e1
1a00b1f0:	1a00b2e1 	.word	0x1a00b2e1
1a00b1f4:	1a00b27d 	.word	0x1a00b27d
1a00b1f8:	1a00b2e1 	.word	0x1a00b2e1
1a00b1fc:	1a00b2e1 	.word	0x1a00b2e1
1a00b200:	1a00b2e1 	.word	0x1a00b2e1
1a00b204:	1a00b2e1 	.word	0x1a00b2e1
1a00b208:	1a00b2e1 	.word	0x1a00b2e1
1a00b20c:	1a00b2e1 	.word	0x1a00b2e1
1a00b210:	1a00b2e1 	.word	0x1a00b2e1
1a00b214:	1a00b2af 	.word	0x1a00b2af
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
1a00b218:	edd7 7a04 	vldr	s15, [r7, #16]
1a00b21c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 1a00b3e0 <dmp_set_tap_thresh+0x25c>
1a00b220:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00b224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1a00b228:	edc7 7a00 	vstr	s15, [r7]
1a00b22c:	883b      	ldrh	r3, [r7, #0]
1a00b22e:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
1a00b230:	edd7 7a04 	vldr	s15, [r7, #16]
1a00b234:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 1a00b3e4 <dmp_set_tap_thresh+0x260>
1a00b238:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00b23c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1a00b240:	edc7 7a00 	vstr	s15, [r7]
1a00b244:	883b      	ldrh	r3, [r7, #0]
1a00b246:	82bb      	strh	r3, [r7, #20]
        break;
1a00b248:	e04d      	b.n	1a00b2e6 <dmp_set_tap_thresh+0x162>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
1a00b24a:	edd7 7a04 	vldr	s15, [r7, #16]
1a00b24e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 1a00b3e8 <dmp_set_tap_thresh+0x264>
1a00b252:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00b256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1a00b25a:	edc7 7a00 	vstr	s15, [r7]
1a00b25e:	883b      	ldrh	r3, [r7, #0]
1a00b260:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
1a00b262:	edd7 7a04 	vldr	s15, [r7, #16]
1a00b266:	ed9f 7a61 	vldr	s14, [pc, #388]	; 1a00b3ec <dmp_set_tap_thresh+0x268>
1a00b26a:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00b26e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1a00b272:	edc7 7a00 	vstr	s15, [r7]
1a00b276:	883b      	ldrh	r3, [r7, #0]
1a00b278:	82bb      	strh	r3, [r7, #20]
        break;
1a00b27a:	e034      	b.n	1a00b2e6 <dmp_set_tap_thresh+0x162>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
1a00b27c:	edd7 7a04 	vldr	s15, [r7, #16]
1a00b280:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 1a00b3f0 <dmp_set_tap_thresh+0x26c>
1a00b284:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00b288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1a00b28c:	edc7 7a00 	vstr	s15, [r7]
1a00b290:	883b      	ldrh	r3, [r7, #0]
1a00b292:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
1a00b294:	edd7 7a04 	vldr	s15, [r7, #16]
1a00b298:	ed9f 7a56 	vldr	s14, [pc, #344]	; 1a00b3f4 <dmp_set_tap_thresh+0x270>
1a00b29c:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00b2a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1a00b2a4:	edc7 7a00 	vstr	s15, [r7]
1a00b2a8:	883b      	ldrh	r3, [r7, #0]
1a00b2aa:	82bb      	strh	r3, [r7, #20]
        break;
1a00b2ac:	e01b      	b.n	1a00b2e6 <dmp_set_tap_thresh+0x162>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
1a00b2ae:	edd7 7a04 	vldr	s15, [r7, #16]
1a00b2b2:	ed9f 7a51 	vldr	s14, [pc, #324]	; 1a00b3f8 <dmp_set_tap_thresh+0x274>
1a00b2b6:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00b2ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1a00b2be:	edc7 7a00 	vstr	s15, [r7]
1a00b2c2:	883b      	ldrh	r3, [r7, #0]
1a00b2c4:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
1a00b2c6:	edd7 7a04 	vldr	s15, [r7, #16]
1a00b2ca:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 1a00b3fc <dmp_set_tap_thresh+0x278>
1a00b2ce:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00b2d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1a00b2d6:	edc7 7a00 	vstr	s15, [r7]
1a00b2da:	883b      	ldrh	r3, [r7, #0]
1a00b2dc:	82bb      	strh	r3, [r7, #20]
        break;
1a00b2de:	e002      	b.n	1a00b2e6 <dmp_set_tap_thresh+0x162>
    default:
        return -1;
1a00b2e0:	f04f 33ff 	mov.w	r3, #4294967295
1a00b2e4:	e076      	b.n	1a00b3d4 <dmp_set_tap_thresh+0x250>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
1a00b2e6:	8afb      	ldrh	r3, [r7, #22]
1a00b2e8:	0a1b      	lsrs	r3, r3, #8
1a00b2ea:	b29b      	uxth	r3, r3
1a00b2ec:	b2db      	uxtb	r3, r3
1a00b2ee:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
1a00b2f0:	8afb      	ldrh	r3, [r7, #22]
1a00b2f2:	b2db      	uxtb	r3, r3
1a00b2f4:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
1a00b2f6:	8abb      	ldrh	r3, [r7, #20]
1a00b2f8:	0a1b      	lsrs	r3, r3, #8
1a00b2fa:	b29b      	uxth	r3, r3
1a00b2fc:	b2db      	uxtb	r3, r3
1a00b2fe:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
1a00b300:	8abb      	ldrh	r3, [r7, #20]
1a00b302:	b2db      	uxtb	r3, r3
1a00b304:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
1a00b306:	79fb      	ldrb	r3, [r7, #7]
1a00b308:	f003 0301 	and.w	r3, r3, #1
1a00b30c:	2b00      	cmp	r3, #0
1a00b30e:	d01c      	beq.n	1a00b34a <dmp_set_tap_thresh+0x1c6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
1a00b310:	f107 030c 	add.w	r3, r7, #12
1a00b314:	461a      	mov	r2, r3
1a00b316:	2102      	movs	r1, #2
1a00b318:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
1a00b31c:	f7ff fa8c 	bl	1a00a838 <mpu_write_mem>
1a00b320:	4603      	mov	r3, r0
1a00b322:	2b00      	cmp	r3, #0
1a00b324:	d002      	beq.n	1a00b32c <dmp_set_tap_thresh+0x1a8>
            return -1;
1a00b326:	f04f 33ff 	mov.w	r3, #4294967295
1a00b32a:	e053      	b.n	1a00b3d4 <dmp_set_tap_thresh+0x250>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
1a00b32c:	f107 030c 	add.w	r3, r7, #12
1a00b330:	3302      	adds	r3, #2
1a00b332:	461a      	mov	r2, r3
1a00b334:	2102      	movs	r1, #2
1a00b336:	f44f 7092 	mov.w	r0, #292	; 0x124
1a00b33a:	f7ff fa7d 	bl	1a00a838 <mpu_write_mem>
1a00b33e:	4603      	mov	r3, r0
1a00b340:	2b00      	cmp	r3, #0
1a00b342:	d002      	beq.n	1a00b34a <dmp_set_tap_thresh+0x1c6>
            return -1;
1a00b344:	f04f 33ff 	mov.w	r3, #4294967295
1a00b348:	e044      	b.n	1a00b3d4 <dmp_set_tap_thresh+0x250>
    }
    if (axis & TAP_Y) {
1a00b34a:	79fb      	ldrb	r3, [r7, #7]
1a00b34c:	f003 0302 	and.w	r3, r3, #2
1a00b350:	2b00      	cmp	r3, #0
1a00b352:	d01c      	beq.n	1a00b38e <dmp_set_tap_thresh+0x20a>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
1a00b354:	f107 030c 	add.w	r3, r7, #12
1a00b358:	461a      	mov	r2, r3
1a00b35a:	2102      	movs	r1, #2
1a00b35c:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
1a00b360:	f7ff fa6a 	bl	1a00a838 <mpu_write_mem>
1a00b364:	4603      	mov	r3, r0
1a00b366:	2b00      	cmp	r3, #0
1a00b368:	d002      	beq.n	1a00b370 <dmp_set_tap_thresh+0x1ec>
            return -1;
1a00b36a:	f04f 33ff 	mov.w	r3, #4294967295
1a00b36e:	e031      	b.n	1a00b3d4 <dmp_set_tap_thresh+0x250>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
1a00b370:	f107 030c 	add.w	r3, r7, #12
1a00b374:	3302      	adds	r3, #2
1a00b376:	461a      	mov	r2, r3
1a00b378:	2102      	movs	r1, #2
1a00b37a:	f44f 7094 	mov.w	r0, #296	; 0x128
1a00b37e:	f7ff fa5b 	bl	1a00a838 <mpu_write_mem>
1a00b382:	4603      	mov	r3, r0
1a00b384:	2b00      	cmp	r3, #0
1a00b386:	d002      	beq.n	1a00b38e <dmp_set_tap_thresh+0x20a>
            return -1;
1a00b388:	f04f 33ff 	mov.w	r3, #4294967295
1a00b38c:	e022      	b.n	1a00b3d4 <dmp_set_tap_thresh+0x250>
    }
    if (axis & TAP_Z) {
1a00b38e:	79fb      	ldrb	r3, [r7, #7]
1a00b390:	f003 0304 	and.w	r3, r3, #4
1a00b394:	2b00      	cmp	r3, #0
1a00b396:	d01c      	beq.n	1a00b3d2 <dmp_set_tap_thresh+0x24e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
1a00b398:	f107 030c 	add.w	r3, r7, #12
1a00b39c:	461a      	mov	r2, r3
1a00b39e:	2102      	movs	r1, #2
1a00b3a0:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
1a00b3a4:	f7ff fa48 	bl	1a00a838 <mpu_write_mem>
1a00b3a8:	4603      	mov	r3, r0
1a00b3aa:	2b00      	cmp	r3, #0
1a00b3ac:	d002      	beq.n	1a00b3b4 <dmp_set_tap_thresh+0x230>
            return -1;
1a00b3ae:	f04f 33ff 	mov.w	r3, #4294967295
1a00b3b2:	e00f      	b.n	1a00b3d4 <dmp_set_tap_thresh+0x250>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
1a00b3b4:	f107 030c 	add.w	r3, r7, #12
1a00b3b8:	3302      	adds	r3, #2
1a00b3ba:	461a      	mov	r2, r3
1a00b3bc:	2102      	movs	r1, #2
1a00b3be:	f44f 7096 	mov.w	r0, #300	; 0x12c
1a00b3c2:	f7ff fa39 	bl	1a00a838 <mpu_write_mem>
1a00b3c6:	4603      	mov	r3, r0
1a00b3c8:	2b00      	cmp	r3, #0
1a00b3ca:	d002      	beq.n	1a00b3d2 <dmp_set_tap_thresh+0x24e>
            return -1;
1a00b3cc:	f04f 33ff 	mov.w	r3, #4294967295
1a00b3d0:	e000      	b.n	1a00b3d4 <dmp_set_tap_thresh+0x250>
    }
    return 0;
1a00b3d2:	2300      	movs	r3, #0
}
1a00b3d4:	4618      	mov	r0, r3
1a00b3d6:	3718      	adds	r7, #24
1a00b3d8:	46bd      	mov	sp, r7
1a00b3da:	bd80      	pop	{r7, pc}
1a00b3dc:	43480000 	.word	0x43480000
1a00b3e0:	46800000 	.word	0x46800000
1a00b3e4:	46400000 	.word	0x46400000
1a00b3e8:	46000000 	.word	0x46000000
1a00b3ec:	45c00000 	.word	0x45c00000
1a00b3f0:	45800000 	.word	0x45800000
1a00b3f4:	45400000 	.word	0x45400000
1a00b3f8:	45000000 	.word	0x45000000
1a00b3fc:	44c00000 	.word	0x44c00000

1a00b400 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
1a00b400:	b580      	push	{r7, lr}
1a00b402:	b084      	sub	sp, #16
1a00b404:	af00      	add	r7, sp, #0
1a00b406:	4603      	mov	r3, r0
1a00b408:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
1a00b40a:	2300      	movs	r3, #0
1a00b40c:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
1a00b40e:	79fb      	ldrb	r3, [r7, #7]
1a00b410:	f003 0301 	and.w	r3, r3, #1
1a00b414:	2b00      	cmp	r3, #0
1a00b416:	d004      	beq.n	1a00b422 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
1a00b418:	7bfb      	ldrb	r3, [r7, #15]
1a00b41a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00b41e:	b2db      	uxtb	r3, r3
1a00b420:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
1a00b422:	79fb      	ldrb	r3, [r7, #7]
1a00b424:	f003 0302 	and.w	r3, r3, #2
1a00b428:	2b00      	cmp	r3, #0
1a00b42a:	d004      	beq.n	1a00b436 <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
1a00b42c:	7bfb      	ldrb	r3, [r7, #15]
1a00b42e:	f043 030c 	orr.w	r3, r3, #12
1a00b432:	b2db      	uxtb	r3, r3
1a00b434:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
1a00b436:	79fb      	ldrb	r3, [r7, #7]
1a00b438:	f003 0304 	and.w	r3, r3, #4
1a00b43c:	2b00      	cmp	r3, #0
1a00b43e:	d004      	beq.n	1a00b44a <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
1a00b440:	7bfb      	ldrb	r3, [r7, #15]
1a00b442:	f043 0303 	orr.w	r3, r3, #3
1a00b446:	b2db      	uxtb	r3, r3
1a00b448:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
1a00b44a:	f107 030f 	add.w	r3, r7, #15
1a00b44e:	461a      	mov	r2, r3
1a00b450:	2101      	movs	r1, #1
1a00b452:	f44f 70a4 	mov.w	r0, #328	; 0x148
1a00b456:	f7ff f9ef 	bl	1a00a838 <mpu_write_mem>
1a00b45a:	4603      	mov	r3, r0
}
1a00b45c:	4618      	mov	r0, r3
1a00b45e:	3710      	adds	r7, #16
1a00b460:	46bd      	mov	sp, r7
1a00b462:	bd80      	pop	{r7, pc}

1a00b464 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
1a00b464:	b580      	push	{r7, lr}
1a00b466:	b084      	sub	sp, #16
1a00b468:	af00      	add	r7, sp, #0
1a00b46a:	4603      	mov	r3, r0
1a00b46c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
1a00b46e:	79fb      	ldrb	r3, [r7, #7]
1a00b470:	2b00      	cmp	r3, #0
1a00b472:	d102      	bne.n	1a00b47a <dmp_set_tap_count+0x16>
        min_taps = 1;
1a00b474:	2301      	movs	r3, #1
1a00b476:	71fb      	strb	r3, [r7, #7]
1a00b478:	e004      	b.n	1a00b484 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
1a00b47a:	79fb      	ldrb	r3, [r7, #7]
1a00b47c:	2b04      	cmp	r3, #4
1a00b47e:	d901      	bls.n	1a00b484 <dmp_set_tap_count+0x20>
        min_taps = 4;
1a00b480:	2304      	movs	r3, #4
1a00b482:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
1a00b484:	79fb      	ldrb	r3, [r7, #7]
1a00b486:	3b01      	subs	r3, #1
1a00b488:	b2db      	uxtb	r3, r3
1a00b48a:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
1a00b48c:	f107 030f 	add.w	r3, r7, #15
1a00b490:	461a      	mov	r2, r3
1a00b492:	2101      	movs	r1, #1
1a00b494:	f240 104f 	movw	r0, #335	; 0x14f
1a00b498:	f7ff f9ce 	bl	1a00a838 <mpu_write_mem>
1a00b49c:	4603      	mov	r3, r0
}
1a00b49e:	4618      	mov	r0, r3
1a00b4a0:	3710      	adds	r7, #16
1a00b4a2:	46bd      	mov	sp, r7
1a00b4a4:	bd80      	pop	{r7, pc}
1a00b4a6:	bf00      	nop

1a00b4a8 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
1a00b4a8:	b580      	push	{r7, lr}
1a00b4aa:	b084      	sub	sp, #16
1a00b4ac:	af00      	add	r7, sp, #0
1a00b4ae:	4603      	mov	r3, r0
1a00b4b0:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
1a00b4b2:	88fb      	ldrh	r3, [r7, #6]
1a00b4b4:	4a0c      	ldr	r2, [pc, #48]	; (1a00b4e8 <dmp_set_tap_time+0x40>)
1a00b4b6:	fba2 2303 	umull	r2, r3, r2, r3
1a00b4ba:	089b      	lsrs	r3, r3, #2
1a00b4bc:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
1a00b4be:	89fb      	ldrh	r3, [r7, #14]
1a00b4c0:	0a1b      	lsrs	r3, r3, #8
1a00b4c2:	b29b      	uxth	r3, r3
1a00b4c4:	b2db      	uxtb	r3, r3
1a00b4c6:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1a00b4c8:	89fb      	ldrh	r3, [r7, #14]
1a00b4ca:	b2db      	uxtb	r3, r3
1a00b4cc:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
1a00b4ce:	f107 030c 	add.w	r3, r7, #12
1a00b4d2:	461a      	mov	r2, r3
1a00b4d4:	2102      	movs	r1, #2
1a00b4d6:	f44f 70ef 	mov.w	r0, #478	; 0x1de
1a00b4da:	f7ff f9ad 	bl	1a00a838 <mpu_write_mem>
1a00b4de:	4603      	mov	r3, r0
}
1a00b4e0:	4618      	mov	r0, r3
1a00b4e2:	3710      	adds	r7, #16
1a00b4e4:	46bd      	mov	sp, r7
1a00b4e6:	bd80      	pop	{r7, pc}
1a00b4e8:	cccccccd 	.word	0xcccccccd

1a00b4ec <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
1a00b4ec:	b580      	push	{r7, lr}
1a00b4ee:	b084      	sub	sp, #16
1a00b4f0:	af00      	add	r7, sp, #0
1a00b4f2:	4603      	mov	r3, r0
1a00b4f4:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
1a00b4f6:	88fb      	ldrh	r3, [r7, #6]
1a00b4f8:	4a0c      	ldr	r2, [pc, #48]	; (1a00b52c <dmp_set_tap_time_multi+0x40>)
1a00b4fa:	fba2 2303 	umull	r2, r3, r2, r3
1a00b4fe:	089b      	lsrs	r3, r3, #2
1a00b500:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
1a00b502:	89fb      	ldrh	r3, [r7, #14]
1a00b504:	0a1b      	lsrs	r3, r3, #8
1a00b506:	b29b      	uxth	r3, r3
1a00b508:	b2db      	uxtb	r3, r3
1a00b50a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1a00b50c:	89fb      	ldrh	r3, [r7, #14]
1a00b50e:	b2db      	uxtb	r3, r3
1a00b510:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
1a00b512:	f107 030c 	add.w	r3, r7, #12
1a00b516:	461a      	mov	r2, r3
1a00b518:	2102      	movs	r1, #2
1a00b51a:	f44f 70ed 	mov.w	r0, #474	; 0x1da
1a00b51e:	f7ff f98b 	bl	1a00a838 <mpu_write_mem>
1a00b522:	4603      	mov	r3, r0
}
1a00b524:	4618      	mov	r0, r3
1a00b526:	3710      	adds	r7, #16
1a00b528:	46bd      	mov	sp, r7
1a00b52a:	bd80      	pop	{r7, pc}
1a00b52c:	cccccccd 	.word	0xcccccccd

1a00b530 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
1a00b530:	b580      	push	{r7, lr}
1a00b532:	b084      	sub	sp, #16
1a00b534:	af00      	add	r7, sp, #0
1a00b536:	6078      	str	r0, [r7, #4]
1a00b538:	460b      	mov	r3, r1
1a00b53a:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
1a00b53c:	687b      	ldr	r3, [r7, #4]
1a00b53e:	4a13      	ldr	r2, [pc, #76]	; (1a00b58c <dmp_set_shake_reject_thresh+0x5c>)
1a00b540:	fb82 1203 	smull	r1, r2, r2, r3
1a00b544:	1192      	asrs	r2, r2, #6
1a00b546:	17db      	asrs	r3, r3, #31
1a00b548:	1ad3      	subs	r3, r2, r3
1a00b54a:	887a      	ldrh	r2, [r7, #2]
1a00b54c:	fb02 f303 	mul.w	r3, r2, r3
1a00b550:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
1a00b552:	68fb      	ldr	r3, [r7, #12]
1a00b554:	161b      	asrs	r3, r3, #24
1a00b556:	b2db      	uxtb	r3, r3
1a00b558:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
1a00b55a:	68fb      	ldr	r3, [r7, #12]
1a00b55c:	141b      	asrs	r3, r3, #16
1a00b55e:	b2db      	uxtb	r3, r3
1a00b560:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
1a00b562:	68fb      	ldr	r3, [r7, #12]
1a00b564:	121b      	asrs	r3, r3, #8
1a00b566:	b2db      	uxtb	r3, r3
1a00b568:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
1a00b56a:	68fb      	ldr	r3, [r7, #12]
1a00b56c:	b2db      	uxtb	r3, r3
1a00b56e:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
1a00b570:	f107 0308 	add.w	r3, r7, #8
1a00b574:	461a      	mov	r2, r3
1a00b576:	2104      	movs	r1, #4
1a00b578:	f44f 70ae 	mov.w	r0, #348	; 0x15c
1a00b57c:	f7ff f95c 	bl	1a00a838 <mpu_write_mem>
1a00b580:	4603      	mov	r3, r0
}
1a00b582:	4618      	mov	r0, r3
1a00b584:	3710      	adds	r7, #16
1a00b586:	46bd      	mov	sp, r7
1a00b588:	bd80      	pop	{r7, pc}
1a00b58a:	bf00      	nop
1a00b58c:	10624dd3 	.word	0x10624dd3

1a00b590 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
1a00b590:	b580      	push	{r7, lr}
1a00b592:	b084      	sub	sp, #16
1a00b594:	af00      	add	r7, sp, #0
1a00b596:	4603      	mov	r3, r0
1a00b598:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
1a00b59a:	88fb      	ldrh	r3, [r7, #6]
1a00b59c:	4a0c      	ldr	r2, [pc, #48]	; (1a00b5d0 <dmp_set_shake_reject_time+0x40>)
1a00b59e:	fba2 2303 	umull	r2, r3, r2, r3
1a00b5a2:	089b      	lsrs	r3, r3, #2
1a00b5a4:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
1a00b5a6:	88fb      	ldrh	r3, [r7, #6]
1a00b5a8:	0a1b      	lsrs	r3, r3, #8
1a00b5aa:	b29b      	uxth	r3, r3
1a00b5ac:	b2db      	uxtb	r3, r3
1a00b5ae:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
1a00b5b0:	88fb      	ldrh	r3, [r7, #6]
1a00b5b2:	b2db      	uxtb	r3, r3
1a00b5b4:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
1a00b5b6:	f107 030c 	add.w	r3, r7, #12
1a00b5ba:	461a      	mov	r2, r3
1a00b5bc:	2102      	movs	r1, #2
1a00b5be:	f44f 70ad 	mov.w	r0, #346	; 0x15a
1a00b5c2:	f7ff f939 	bl	1a00a838 <mpu_write_mem>
1a00b5c6:	4603      	mov	r3, r0
}
1a00b5c8:	4618      	mov	r0, r3
1a00b5ca:	3710      	adds	r7, #16
1a00b5cc:	46bd      	mov	sp, r7
1a00b5ce:	bd80      	pop	{r7, pc}
1a00b5d0:	cccccccd 	.word	0xcccccccd

1a00b5d4 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
1a00b5d4:	b580      	push	{r7, lr}
1a00b5d6:	b084      	sub	sp, #16
1a00b5d8:	af00      	add	r7, sp, #0
1a00b5da:	4603      	mov	r3, r0
1a00b5dc:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
1a00b5de:	88fb      	ldrh	r3, [r7, #6]
1a00b5e0:	4a0c      	ldr	r2, [pc, #48]	; (1a00b614 <dmp_set_shake_reject_timeout+0x40>)
1a00b5e2:	fba2 2303 	umull	r2, r3, r2, r3
1a00b5e6:	089b      	lsrs	r3, r3, #2
1a00b5e8:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
1a00b5ea:	88fb      	ldrh	r3, [r7, #6]
1a00b5ec:	0a1b      	lsrs	r3, r3, #8
1a00b5ee:	b29b      	uxth	r3, r3
1a00b5f0:	b2db      	uxtb	r3, r3
1a00b5f2:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
1a00b5f4:	88fb      	ldrh	r3, [r7, #6]
1a00b5f6:	b2db      	uxtb	r3, r3
1a00b5f8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
1a00b5fa:	f107 030c 	add.w	r3, r7, #12
1a00b5fe:	461a      	mov	r2, r3
1a00b600:	2102      	movs	r1, #2
1a00b602:	f44f 70ac 	mov.w	r0, #344	; 0x158
1a00b606:	f7ff f917 	bl	1a00a838 <mpu_write_mem>
1a00b60a:	4603      	mov	r3, r0
}
1a00b60c:	4618      	mov	r0, r3
1a00b60e:	3710      	adds	r7, #16
1a00b610:	46bd      	mov	sp, r7
1a00b612:	bd80      	pop	{r7, pc}
1a00b614:	cccccccd 	.word	0xcccccccd

1a00b618 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
1a00b618:	b580      	push	{r7, lr}
1a00b61a:	b086      	sub	sp, #24
1a00b61c:	af00      	add	r7, sp, #0
1a00b61e:	4603      	mov	r3, r0
1a00b620:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
1a00b622:	2302      	movs	r3, #2
1a00b624:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
1a00b626:	23ca      	movs	r3, #202	; 0xca
1a00b628:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
1a00b62a:	23e3      	movs	r3, #227	; 0xe3
1a00b62c:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
1a00b62e:	2309      	movs	r3, #9
1a00b630:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
1a00b632:	f107 030c 	add.w	r3, r7, #12
1a00b636:	461a      	mov	r2, r3
1a00b638:	2104      	movs	r1, #4
1a00b63a:	2068      	movs	r0, #104	; 0x68
1a00b63c:	f7ff f8fc 	bl	1a00a838 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
1a00b640:	23a3      	movs	r3, #163	; 0xa3
1a00b642:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
1a00b644:	88fb      	ldrh	r3, [r7, #6]
1a00b646:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a00b64a:	2b00      	cmp	r3, #0
1a00b64c:	d006      	beq.n	1a00b65c <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
1a00b64e:	23c0      	movs	r3, #192	; 0xc0
1a00b650:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
1a00b652:	23c8      	movs	r3, #200	; 0xc8
1a00b654:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
1a00b656:	23c2      	movs	r3, #194	; 0xc2
1a00b658:	73fb      	strb	r3, [r7, #15]
1a00b65a:	e005      	b.n	1a00b668 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
1a00b65c:	23a3      	movs	r3, #163	; 0xa3
1a00b65e:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
1a00b660:	23a3      	movs	r3, #163	; 0xa3
1a00b662:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
1a00b664:	23a3      	movs	r3, #163	; 0xa3
1a00b666:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
1a00b668:	88fb      	ldrh	r3, [r7, #6]
1a00b66a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
1a00b66e:	2b00      	cmp	r3, #0
1a00b670:	d006      	beq.n	1a00b680 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
1a00b672:	23c4      	movs	r3, #196	; 0xc4
1a00b674:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
1a00b676:	23cc      	movs	r3, #204	; 0xcc
1a00b678:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
1a00b67a:	23c6      	movs	r3, #198	; 0xc6
1a00b67c:	74bb      	strb	r3, [r7, #18]
1a00b67e:	e005      	b.n	1a00b68c <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
1a00b680:	23a3      	movs	r3, #163	; 0xa3
1a00b682:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
1a00b684:	23a3      	movs	r3, #163	; 0xa3
1a00b686:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
1a00b688:	23a3      	movs	r3, #163	; 0xa3
1a00b68a:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
1a00b68c:	23a3      	movs	r3, #163	; 0xa3
1a00b68e:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
1a00b690:	23a3      	movs	r3, #163	; 0xa3
1a00b692:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
1a00b694:	23a3      	movs	r3, #163	; 0xa3
1a00b696:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
1a00b698:	f107 030c 	add.w	r3, r7, #12
1a00b69c:	461a      	mov	r2, r3
1a00b69e:	210a      	movs	r1, #10
1a00b6a0:	f640 20a7 	movw	r0, #2727	; 0xaa7
1a00b6a4:	f7ff f8c8 	bl	1a00a838 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1a00b6a8:	88fb      	ldrh	r3, [r7, #6]
1a00b6aa:	f003 0303 	and.w	r3, r3, #3
1a00b6ae:	2b00      	cmp	r3, #0
1a00b6b0:	d002      	beq.n	1a00b6b8 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
1a00b6b2:	2320      	movs	r3, #32
1a00b6b4:	733b      	strb	r3, [r7, #12]
1a00b6b6:	e001      	b.n	1a00b6bc <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
1a00b6b8:	23d8      	movs	r3, #216	; 0xd8
1a00b6ba:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
1a00b6bc:	f107 030c 	add.w	r3, r7, #12
1a00b6c0:	461a      	mov	r2, r3
1a00b6c2:	2101      	movs	r1, #1
1a00b6c4:	f640 20b6 	movw	r0, #2742	; 0xab6
1a00b6c8:	f7ff f8b6 	bl	1a00a838 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
1a00b6cc:	88fb      	ldrh	r3, [r7, #6]
1a00b6ce:	f003 0320 	and.w	r3, r3, #32
1a00b6d2:	2b00      	cmp	r3, #0
1a00b6d4:	d003      	beq.n	1a00b6de <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
1a00b6d6:	2001      	movs	r0, #1
1a00b6d8:	f000 f8c6 	bl	1a00b868 <dmp_enable_gyro_cal>
1a00b6dc:	e002      	b.n	1a00b6e4 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
1a00b6de:	2000      	movs	r0, #0
1a00b6e0:	f000 f8c2 	bl	1a00b868 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
1a00b6e4:	88fb      	ldrh	r3, [r7, #6]
1a00b6e6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
1a00b6ea:	2b00      	cmp	r3, #0
1a00b6ec:	d01d      	beq.n	1a00b72a <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
1a00b6ee:	88fb      	ldrh	r3, [r7, #6]
1a00b6f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a00b6f4:	2b00      	cmp	r3, #0
1a00b6f6:	d008      	beq.n	1a00b70a <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
1a00b6f8:	23b2      	movs	r3, #178	; 0xb2
1a00b6fa:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
1a00b6fc:	238b      	movs	r3, #139	; 0x8b
1a00b6fe:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
1a00b700:	23b6      	movs	r3, #182	; 0xb6
1a00b702:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
1a00b704:	239b      	movs	r3, #155	; 0x9b
1a00b706:	73fb      	strb	r3, [r7, #15]
1a00b708:	e007      	b.n	1a00b71a <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
1a00b70a:	23b0      	movs	r3, #176	; 0xb0
1a00b70c:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
1a00b70e:	2380      	movs	r3, #128	; 0x80
1a00b710:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
1a00b712:	23b4      	movs	r3, #180	; 0xb4
1a00b714:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
1a00b716:	2390      	movs	r3, #144	; 0x90
1a00b718:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
1a00b71a:	f107 030c 	add.w	r3, r7, #12
1a00b71e:	461a      	mov	r2, r3
1a00b720:	2104      	movs	r1, #4
1a00b722:	f640 20a2 	movw	r0, #2722	; 0xaa2
1a00b726:	f7ff f887 	bl	1a00a838 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
1a00b72a:	88fb      	ldrh	r3, [r7, #6]
1a00b72c:	f003 0301 	and.w	r3, r3, #1
1a00b730:	2b00      	cmp	r3, #0
1a00b732:	d025      	beq.n	1a00b780 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
1a00b734:	23f8      	movs	r3, #248	; 0xf8
1a00b736:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
1a00b738:	f107 030c 	add.w	r3, r7, #12
1a00b73c:	461a      	mov	r2, r3
1a00b73e:	2101      	movs	r1, #1
1a00b740:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
1a00b744:	f7ff f878 	bl	1a00a838 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
1a00b748:	21fa      	movs	r1, #250	; 0xfa
1a00b74a:	2007      	movs	r0, #7
1a00b74c:	f7ff fd1a 	bl	1a00b184 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
1a00b750:	2007      	movs	r0, #7
1a00b752:	f7ff fe55 	bl	1a00b400 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
1a00b756:	2001      	movs	r0, #1
1a00b758:	f7ff fe84 	bl	1a00b464 <dmp_set_tap_count>
        dmp_set_tap_time(100);
1a00b75c:	2064      	movs	r0, #100	; 0x64
1a00b75e:	f7ff fea3 	bl	1a00b4a8 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
1a00b762:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00b766:	f7ff fec1 	bl	1a00b4ec <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
1a00b76a:	21c8      	movs	r1, #200	; 0xc8
1a00b76c:	483c      	ldr	r0, [pc, #240]	; (1a00b860 <dmp_enable_feature+0x248>)
1a00b76e:	f7ff fedf 	bl	1a00b530 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
1a00b772:	2028      	movs	r0, #40	; 0x28
1a00b774:	f7ff ff0c 	bl	1a00b590 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
1a00b778:	200a      	movs	r0, #10
1a00b77a:	f7ff ff2b 	bl	1a00b5d4 <dmp_set_shake_reject_timeout>
1a00b77e:	e009      	b.n	1a00b794 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
1a00b780:	23d8      	movs	r3, #216	; 0xd8
1a00b782:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
1a00b784:	f107 030c 	add.w	r3, r7, #12
1a00b788:	461a      	mov	r2, r3
1a00b78a:	2101      	movs	r1, #1
1a00b78c:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
1a00b790:	f7ff f852 	bl	1a00a838 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
1a00b794:	88fb      	ldrh	r3, [r7, #6]
1a00b796:	f003 0302 	and.w	r3, r3, #2
1a00b79a:	2b00      	cmp	r3, #0
1a00b79c:	d002      	beq.n	1a00b7a4 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
1a00b79e:	23d9      	movs	r3, #217	; 0xd9
1a00b7a0:	733b      	strb	r3, [r7, #12]
1a00b7a2:	e001      	b.n	1a00b7a8 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
1a00b7a4:	23d8      	movs	r3, #216	; 0xd8
1a00b7a6:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
1a00b7a8:	f107 030c 	add.w	r3, r7, #12
1a00b7ac:	461a      	mov	r2, r3
1a00b7ae:	2101      	movs	r1, #1
1a00b7b0:	f240 703d 	movw	r0, #1853	; 0x73d
1a00b7b4:	f7ff f840 	bl	1a00a838 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
1a00b7b8:	88fb      	ldrh	r3, [r7, #6]
1a00b7ba:	f003 0304 	and.w	r3, r3, #4
1a00b7be:	2b00      	cmp	r3, #0
1a00b7c0:	d003      	beq.n	1a00b7ca <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
1a00b7c2:	2001      	movs	r0, #1
1a00b7c4:	f000 f884 	bl	1a00b8d0 <dmp_enable_lp_quat>
1a00b7c8:	e002      	b.n	1a00b7d0 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
1a00b7ca:	2000      	movs	r0, #0
1a00b7cc:	f000 f880 	bl	1a00b8d0 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
1a00b7d0:	88fb      	ldrh	r3, [r7, #6]
1a00b7d2:	f003 0310 	and.w	r3, r3, #16
1a00b7d6:	2b00      	cmp	r3, #0
1a00b7d8:	d003      	beq.n	1a00b7e2 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
1a00b7da:	2001      	movs	r0, #1
1a00b7dc:	f000 f8a0 	bl	1a00b920 <dmp_enable_6x_lp_quat>
1a00b7e0:	e002      	b.n	1a00b7e8 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
1a00b7e2:	2000      	movs	r0, #0
1a00b7e4:	f000 f89c 	bl	1a00b920 <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
1a00b7e8:	88fb      	ldrh	r3, [r7, #6]
1a00b7ea:	f043 0308 	orr.w	r3, r3, #8
1a00b7ee:	b29a      	uxth	r2, r3
1a00b7f0:	4b1c      	ldr	r3, [pc, #112]	; (1a00b864 <dmp_enable_feature+0x24c>)
1a00b7f2:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
1a00b7f4:	f7fe fa14 	bl	1a009c20 <mpu_reset_fifo>

    dmp.packet_length = 0;
1a00b7f8:	4b1a      	ldr	r3, [pc, #104]	; (1a00b864 <dmp_enable_feature+0x24c>)
1a00b7fa:	2200      	movs	r2, #0
1a00b7fc:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
1a00b7fe:	88fb      	ldrh	r3, [r7, #6]
1a00b800:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a00b804:	2b00      	cmp	r3, #0
1a00b806:	d005      	beq.n	1a00b814 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
1a00b808:	4b16      	ldr	r3, [pc, #88]	; (1a00b864 <dmp_enable_feature+0x24c>)
1a00b80a:	7b9b      	ldrb	r3, [r3, #14]
1a00b80c:	3306      	adds	r3, #6
1a00b80e:	b2da      	uxtb	r2, r3
1a00b810:	4b14      	ldr	r3, [pc, #80]	; (1a00b864 <dmp_enable_feature+0x24c>)
1a00b812:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
1a00b814:	88fb      	ldrh	r3, [r7, #6]
1a00b816:	f403 73c0 	and.w	r3, r3, #384	; 0x180
1a00b81a:	2b00      	cmp	r3, #0
1a00b81c:	d005      	beq.n	1a00b82a <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
1a00b81e:	4b11      	ldr	r3, [pc, #68]	; (1a00b864 <dmp_enable_feature+0x24c>)
1a00b820:	7b9b      	ldrb	r3, [r3, #14]
1a00b822:	3306      	adds	r3, #6
1a00b824:	b2da      	uxtb	r2, r3
1a00b826:	4b0f      	ldr	r3, [pc, #60]	; (1a00b864 <dmp_enable_feature+0x24c>)
1a00b828:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
1a00b82a:	88fb      	ldrh	r3, [r7, #6]
1a00b82c:	f003 0314 	and.w	r3, r3, #20
1a00b830:	2b00      	cmp	r3, #0
1a00b832:	d005      	beq.n	1a00b840 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
1a00b834:	4b0b      	ldr	r3, [pc, #44]	; (1a00b864 <dmp_enable_feature+0x24c>)
1a00b836:	7b9b      	ldrb	r3, [r3, #14]
1a00b838:	3310      	adds	r3, #16
1a00b83a:	b2da      	uxtb	r2, r3
1a00b83c:	4b09      	ldr	r3, [pc, #36]	; (1a00b864 <dmp_enable_feature+0x24c>)
1a00b83e:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1a00b840:	88fb      	ldrh	r3, [r7, #6]
1a00b842:	f003 0303 	and.w	r3, r3, #3
1a00b846:	2b00      	cmp	r3, #0
1a00b848:	d005      	beq.n	1a00b856 <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
1a00b84a:	4b06      	ldr	r3, [pc, #24]	; (1a00b864 <dmp_enable_feature+0x24c>)
1a00b84c:	7b9b      	ldrb	r3, [r3, #14]
1a00b84e:	3304      	adds	r3, #4
1a00b850:	b2da      	uxtb	r2, r3
1a00b852:	4b04      	ldr	r3, [pc, #16]	; (1a00b864 <dmp_enable_feature+0x24c>)
1a00b854:	739a      	strb	r2, [r3, #14]

    return 0;
1a00b856:	2300      	movs	r3, #0
}
1a00b858:	4618      	mov	r0, r3
1a00b85a:	3718      	adds	r7, #24
1a00b85c:	46bd      	mov	sp, r7
1a00b85e:	bd80      	pop	{r7, pc}
1a00b860:	02cae309 	.word	0x02cae309
1a00b864:	10086bd4 	.word	0x10086bd4

1a00b868 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
1a00b868:	b580      	push	{r7, lr}
1a00b86a:	b088      	sub	sp, #32
1a00b86c:	af00      	add	r7, sp, #0
1a00b86e:	4603      	mov	r3, r0
1a00b870:	71fb      	strb	r3, [r7, #7]
    if (enable) {
1a00b872:	79fb      	ldrb	r3, [r7, #7]
1a00b874:	2b00      	cmp	r3, #0
1a00b876:	d011      	beq.n	1a00b89c <dmp_enable_gyro_cal+0x34>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
1a00b878:	4a13      	ldr	r2, [pc, #76]	; (1a00b8c8 <dmp_enable_gyro_cal+0x60>)
1a00b87a:	f107 0314 	add.w	r3, r7, #20
1a00b87e:	6810      	ldr	r0, [r2, #0]
1a00b880:	6851      	ldr	r1, [r2, #4]
1a00b882:	c303      	stmia	r3!, {r0, r1}
1a00b884:	7a12      	ldrb	r2, [r2, #8]
1a00b886:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
1a00b888:	f107 0314 	add.w	r3, r7, #20
1a00b88c:	461a      	mov	r2, r3
1a00b88e:	2109      	movs	r1, #9
1a00b890:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
1a00b894:	f7fe ffd0 	bl	1a00a838 <mpu_write_mem>
1a00b898:	4603      	mov	r3, r0
1a00b89a:	e010      	b.n	1a00b8be <dmp_enable_gyro_cal+0x56>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
1a00b89c:	4a0b      	ldr	r2, [pc, #44]	; (1a00b8cc <dmp_enable_gyro_cal+0x64>)
1a00b89e:	f107 0308 	add.w	r3, r7, #8
1a00b8a2:	6810      	ldr	r0, [r2, #0]
1a00b8a4:	6851      	ldr	r1, [r2, #4]
1a00b8a6:	c303      	stmia	r3!, {r0, r1}
1a00b8a8:	7a12      	ldrb	r2, [r2, #8]
1a00b8aa:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
1a00b8ac:	f107 0308 	add.w	r3, r7, #8
1a00b8b0:	461a      	mov	r2, r3
1a00b8b2:	2109      	movs	r1, #9
1a00b8b4:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
1a00b8b8:	f7fe ffbe 	bl	1a00a838 <mpu_write_mem>
1a00b8bc:	4603      	mov	r3, r0
    }
}
1a00b8be:	4618      	mov	r0, r3
1a00b8c0:	3720      	adds	r7, #32
1a00b8c2:	46bd      	mov	sp, r7
1a00b8c4:	bd80      	pop	{r7, pc}
1a00b8c6:	bf00      	nop
1a00b8c8:	1a01a95c 	.word	0x1a01a95c
1a00b8cc:	1a01a968 	.word	0x1a01a968

1a00b8d0 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
1a00b8d0:	b580      	push	{r7, lr}
1a00b8d2:	b084      	sub	sp, #16
1a00b8d4:	af00      	add	r7, sp, #0
1a00b8d6:	4603      	mov	r3, r0
1a00b8d8:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
1a00b8da:	79fb      	ldrb	r3, [r7, #7]
1a00b8dc:	2b00      	cmp	r3, #0
1a00b8de:	d008      	beq.n	1a00b8f2 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
1a00b8e0:	23c0      	movs	r3, #192	; 0xc0
1a00b8e2:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
1a00b8e4:	23c2      	movs	r3, #194	; 0xc2
1a00b8e6:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
1a00b8e8:	23c4      	movs	r3, #196	; 0xc4
1a00b8ea:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
1a00b8ec:	23c6      	movs	r3, #198	; 0xc6
1a00b8ee:	73fb      	strb	r3, [r7, #15]
1a00b8f0:	e006      	b.n	1a00b900 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
1a00b8f2:	f107 030c 	add.w	r3, r7, #12
1a00b8f6:	2204      	movs	r2, #4
1a00b8f8:	218b      	movs	r1, #139	; 0x8b
1a00b8fa:	4618      	mov	r0, r3
1a00b8fc:	f009 f9ec 	bl	1a014cd8 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
1a00b900:	f107 030c 	add.w	r3, r7, #12
1a00b904:	461a      	mov	r2, r3
1a00b906:	2104      	movs	r1, #4
1a00b908:	f640 2098 	movw	r0, #2712	; 0xa98
1a00b90c:	f7fe ff94 	bl	1a00a838 <mpu_write_mem>

    return mpu_reset_fifo();
1a00b910:	f7fe f986 	bl	1a009c20 <mpu_reset_fifo>
1a00b914:	4603      	mov	r3, r0
}
1a00b916:	4618      	mov	r0, r3
1a00b918:	3710      	adds	r7, #16
1a00b91a:	46bd      	mov	sp, r7
1a00b91c:	bd80      	pop	{r7, pc}
1a00b91e:	bf00      	nop

1a00b920 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
1a00b920:	b580      	push	{r7, lr}
1a00b922:	b084      	sub	sp, #16
1a00b924:	af00      	add	r7, sp, #0
1a00b926:	4603      	mov	r3, r0
1a00b928:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
1a00b92a:	79fb      	ldrb	r3, [r7, #7]
1a00b92c:	2b00      	cmp	r3, #0
1a00b92e:	d008      	beq.n	1a00b942 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
1a00b930:	2320      	movs	r3, #32
1a00b932:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
1a00b934:	2328      	movs	r3, #40	; 0x28
1a00b936:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
1a00b938:	2330      	movs	r3, #48	; 0x30
1a00b93a:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
1a00b93c:	2338      	movs	r3, #56	; 0x38
1a00b93e:	73fb      	strb	r3, [r7, #15]
1a00b940:	e006      	b.n	1a00b950 <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
1a00b942:	f107 030c 	add.w	r3, r7, #12
1a00b946:	2204      	movs	r2, #4
1a00b948:	21a3      	movs	r1, #163	; 0xa3
1a00b94a:	4618      	mov	r0, r3
1a00b94c:	f009 f9c4 	bl	1a014cd8 <memset>

    mpu_write_mem(CFG_8, 4, regs);
1a00b950:	f107 030c 	add.w	r3, r7, #12
1a00b954:	461a      	mov	r2, r3
1a00b956:	2104      	movs	r1, #4
1a00b958:	f640 209e 	movw	r0, #2718	; 0xa9e
1a00b95c:	f7fe ff6c 	bl	1a00a838 <mpu_write_mem>

    return mpu_reset_fifo();
1a00b960:	f7fe f95e 	bl	1a009c20 <mpu_reset_fifo>
1a00b964:	4603      	mov	r3, r0
}
1a00b966:	4618      	mov	r0, r3
1a00b968:	3710      	adds	r7, #16
1a00b96a:	46bd      	mov	sp, r7
1a00b96c:	bd80      	pop	{r7, pc}
1a00b96e:	bf00      	nop

1a00b970 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
1a00b970:	b580      	push	{r7, lr}
1a00b972:	b084      	sub	sp, #16
1a00b974:	af00      	add	r7, sp, #0
1a00b976:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
1a00b978:	687b      	ldr	r3, [r7, #4]
1a00b97a:	3303      	adds	r3, #3
1a00b97c:	781b      	ldrb	r3, [r3, #0]
1a00b97e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
1a00b982:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
1a00b984:	687b      	ldr	r3, [r7, #4]
1a00b986:	3303      	adds	r3, #3
1a00b988:	781b      	ldrb	r3, [r3, #0]
1a00b98a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a00b98e:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
1a00b990:	687b      	ldr	r3, [r7, #4]
1a00b992:	3301      	adds	r3, #1
1a00b994:	781b      	ldrb	r3, [r3, #0]
1a00b996:	f003 0301 	and.w	r3, r3, #1
1a00b99a:	2b00      	cmp	r3, #0
1a00b99c:	d012      	beq.n	1a00b9c4 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
1a00b99e:	7bbb      	ldrb	r3, [r7, #14]
1a00b9a0:	08db      	lsrs	r3, r3, #3
1a00b9a2:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
1a00b9a4:	7bbb      	ldrb	r3, [r7, #14]
1a00b9a6:	f003 0307 	and.w	r3, r3, #7
1a00b9aa:	b2db      	uxtb	r3, r3
1a00b9ac:	3301      	adds	r3, #1
1a00b9ae:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
1a00b9b0:	4b10      	ldr	r3, [pc, #64]	; (1a00b9f4 <decode_gesture+0x84>)
1a00b9b2:	681b      	ldr	r3, [r3, #0]
1a00b9b4:	2b00      	cmp	r3, #0
1a00b9b6:	d005      	beq.n	1a00b9c4 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
1a00b9b8:	4b0e      	ldr	r3, [pc, #56]	; (1a00b9f4 <decode_gesture+0x84>)
1a00b9ba:	681b      	ldr	r3, [r3, #0]
1a00b9bc:	7b39      	ldrb	r1, [r7, #12]
1a00b9be:	7b7a      	ldrb	r2, [r7, #13]
1a00b9c0:	4610      	mov	r0, r2
1a00b9c2:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
1a00b9c4:	687b      	ldr	r3, [r7, #4]
1a00b9c6:	3301      	adds	r3, #1
1a00b9c8:	781b      	ldrb	r3, [r3, #0]
1a00b9ca:	f003 0308 	and.w	r3, r3, #8
1a00b9ce:	2b00      	cmp	r3, #0
1a00b9d0:	d00a      	beq.n	1a00b9e8 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
1a00b9d2:	4b08      	ldr	r3, [pc, #32]	; (1a00b9f4 <decode_gesture+0x84>)
1a00b9d4:	685b      	ldr	r3, [r3, #4]
1a00b9d6:	2b00      	cmp	r3, #0
1a00b9d8:	d006      	beq.n	1a00b9e8 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
1a00b9da:	4b06      	ldr	r3, [pc, #24]	; (1a00b9f4 <decode_gesture+0x84>)
1a00b9dc:	685b      	ldr	r3, [r3, #4]
1a00b9de:	7bfa      	ldrb	r2, [r7, #15]
1a00b9e0:	0992      	lsrs	r2, r2, #6
1a00b9e2:	b2d2      	uxtb	r2, r2
1a00b9e4:	4610      	mov	r0, r2
1a00b9e6:	4798      	blx	r3
    }

    return 0;
1a00b9e8:	2300      	movs	r3, #0
}
1a00b9ea:	4618      	mov	r0, r3
1a00b9ec:	3710      	adds	r7, #16
1a00b9ee:	46bd      	mov	sp, r7
1a00b9f0:	bd80      	pop	{r7, pc}
1a00b9f2:	bf00      	nop
1a00b9f4:	10086bd4 	.word	0x10086bd4

1a00b9f8 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
1a00b9f8:	b580      	push	{r7, lr}
1a00b9fa:	b092      	sub	sp, #72	; 0x48
1a00b9fc:	af00      	add	r7, sp, #0
1a00b9fe:	60f8      	str	r0, [r7, #12]
1a00ba00:	60b9      	str	r1, [r7, #8]
1a00ba02:	607a      	str	r2, [r7, #4]
1a00ba04:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
1a00ba06:	2300      	movs	r3, #0
1a00ba08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
1a00ba0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00ba0e:	2200      	movs	r2, #0
1a00ba10:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
1a00ba12:	4bb1      	ldr	r3, [pc, #708]	; (1a00bcd8 <dmp_read_fifo+0x2e0>)
1a00ba14:	7b9b      	ldrb	r3, [r3, #14]
1a00ba16:	b29b      	uxth	r3, r3
1a00ba18:	f107 0120 	add.w	r1, r7, #32
1a00ba1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
1a00ba1e:	4618      	mov	r0, r3
1a00ba20:	f7fe fd70 	bl	1a00a504 <mpu_read_fifo_stream>
1a00ba24:	4603      	mov	r3, r0
1a00ba26:	2b00      	cmp	r3, #0
1a00ba28:	d002      	beq.n	1a00ba30 <dmp_read_fifo+0x38>
        return -1;
1a00ba2a:	f04f 33ff 	mov.w	r3, #4294967295
1a00ba2e:	e14e      	b.n	1a00bcce <dmp_read_fifo+0x2d6>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
1a00ba30:	4ba9      	ldr	r3, [pc, #676]	; (1a00bcd8 <dmp_read_fifo+0x2e0>)
1a00ba32:	895b      	ldrh	r3, [r3, #10]
1a00ba34:	f003 0314 	and.w	r3, r3, #20
1a00ba38:	2b00      	cmp	r3, #0
1a00ba3a:	f000 8086 	beq.w	1a00bb4a <dmp_read_fifo+0x152>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
1a00ba3e:	f897 3020 	ldrb.w	r3, [r7, #32]
1a00ba42:	061a      	lsls	r2, r3, #24
1a00ba44:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
1a00ba48:	041b      	lsls	r3, r3, #16
1a00ba4a:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
1a00ba4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
1a00ba50:	021b      	lsls	r3, r3, #8
    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
1a00ba52:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
1a00ba54:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
1a00ba58:	431a      	orrs	r2, r3
    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
1a00ba5a:	687b      	ldr	r3, [r7, #4]
1a00ba5c:	601a      	str	r2, [r3, #0]
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
1a00ba5e:	687b      	ldr	r3, [r7, #4]
1a00ba60:	3304      	adds	r3, #4
1a00ba62:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
1a00ba66:	0611      	lsls	r1, r2, #24
1a00ba68:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
1a00ba6c:	0412      	lsls	r2, r2, #16
1a00ba6e:	4311      	orrs	r1, r2
            ((long)fifo_data[6] << 8) | fifo_data[7];
1a00ba70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
1a00ba74:	0212      	lsls	r2, r2, #8
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
1a00ba76:	430a      	orrs	r2, r1
            ((long)fifo_data[6] << 8) | fifo_data[7];
1a00ba78:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
1a00ba7c:	430a      	orrs	r2, r1
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
1a00ba7e:	601a      	str	r2, [r3, #0]
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
1a00ba80:	687b      	ldr	r3, [r7, #4]
1a00ba82:	3308      	adds	r3, #8
1a00ba84:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
1a00ba88:	0611      	lsls	r1, r2, #24
1a00ba8a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
1a00ba8e:	0412      	lsls	r2, r2, #16
1a00ba90:	4311      	orrs	r1, r2
            ((long)fifo_data[10] << 8) | fifo_data[11];
1a00ba92:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
1a00ba96:	0212      	lsls	r2, r2, #8
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
1a00ba98:	430a      	orrs	r2, r1
            ((long)fifo_data[10] << 8) | fifo_data[11];
1a00ba9a:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
1a00ba9e:	430a      	orrs	r2, r1
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
1a00baa0:	601a      	str	r2, [r3, #0]
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
1a00baa2:	687b      	ldr	r3, [r7, #4]
1a00baa4:	330c      	adds	r3, #12
1a00baa6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
1a00baaa:	0611      	lsls	r1, r2, #24
1a00baac:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
1a00bab0:	0412      	lsls	r2, r2, #16
1a00bab2:	4311      	orrs	r1, r2
            ((long)fifo_data[14] << 8) | fifo_data[15];
1a00bab4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
1a00bab8:	0212      	lsls	r2, r2, #8
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
1a00baba:	430a      	orrs	r2, r1
            ((long)fifo_data[14] << 8) | fifo_data[15];
1a00babc:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
1a00bac0:	430a      	orrs	r2, r1
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
1a00bac2:	601a      	str	r2, [r3, #0]
            ((long)fifo_data[14] << 8) | fifo_data[15];
        ii += 16;
1a00bac4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
1a00bac8:	3310      	adds	r3, #16
1a00baca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
1a00bace:	687b      	ldr	r3, [r7, #4]
1a00bad0:	681b      	ldr	r3, [r3, #0]
1a00bad2:	141b      	asrs	r3, r3, #16
1a00bad4:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
1a00bad6:	687b      	ldr	r3, [r7, #4]
1a00bad8:	3304      	adds	r3, #4
1a00bada:	681b      	ldr	r3, [r3, #0]
1a00badc:	141b      	asrs	r3, r3, #16
1a00bade:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
1a00bae0:	687b      	ldr	r3, [r7, #4]
1a00bae2:	3308      	adds	r3, #8
1a00bae4:	681b      	ldr	r3, [r3, #0]
1a00bae6:	141b      	asrs	r3, r3, #16
1a00bae8:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
1a00baea:	687b      	ldr	r3, [r7, #4]
1a00baec:	330c      	adds	r3, #12
1a00baee:	681b      	ldr	r3, [r3, #0]
1a00baf0:	141b      	asrs	r3, r3, #16
1a00baf2:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
1a00baf4:	693b      	ldr	r3, [r7, #16]
1a00baf6:	693a      	ldr	r2, [r7, #16]
1a00baf8:	fb02 f203 	mul.w	r2, r2, r3
1a00bafc:	697b      	ldr	r3, [r7, #20]
1a00bafe:	6979      	ldr	r1, [r7, #20]
1a00bb00:	fb01 f303 	mul.w	r3, r1, r3
1a00bb04:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
1a00bb06:	69bb      	ldr	r3, [r7, #24]
1a00bb08:	69b9      	ldr	r1, [r7, #24]
1a00bb0a:	fb01 f303 	mul.w	r3, r1, r3
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
1a00bb0e:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
1a00bb10:	69fb      	ldr	r3, [r7, #28]
1a00bb12:	69f9      	ldr	r1, [r7, #28]
1a00bb14:	fb01 f303 	mul.w	r3, r1, r3
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
1a00bb18:	4413      	add	r3, r2
1a00bb1a:	643b      	str	r3, [r7, #64]	; 0x40
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
1a00bb1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a00bb1e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
1a00bb22:	db03      	blt.n	1a00bb2c <dmp_read_fifo+0x134>
1a00bb24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a00bb26:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
1a00bb2a:	dd07      	ble.n	1a00bb3c <dmp_read_fifo+0x144>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
1a00bb2c:	f7fe f878 	bl	1a009c20 <mpu_reset_fifo>
            sensors[0] = 0;
1a00bb30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00bb32:	2200      	movs	r2, #0
1a00bb34:	801a      	strh	r2, [r3, #0]
            return -1;
1a00bb36:	f04f 33ff 	mov.w	r3, #4294967295
1a00bb3a:	e0c8      	b.n	1a00bcce <dmp_read_fifo+0x2d6>
        }
        sensors[0] |= INV_WXYZ_QUAT;
1a00bb3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00bb3e:	881b      	ldrh	r3, [r3, #0]
1a00bb40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a00bb44:	b29a      	uxth	r2, r3
1a00bb46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00bb48:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
1a00bb4a:	4b63      	ldr	r3, [pc, #396]	; (1a00bcd8 <dmp_read_fifo+0x2e0>)
1a00bb4c:	895b      	ldrh	r3, [r3, #10]
1a00bb4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a00bb52:	2b00      	cmp	r3, #0
1a00bb54:	d051      	beq.n	1a00bbfa <dmp_read_fifo+0x202>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
1a00bb56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
1a00bb5a:	f107 0248 	add.w	r2, r7, #72	; 0x48
1a00bb5e:	4413      	add	r3, r2
1a00bb60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
1a00bb64:	021b      	lsls	r3, r3, #8
1a00bb66:	b29a      	uxth	r2, r3
1a00bb68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
1a00bb6c:	3301      	adds	r3, #1
1a00bb6e:	f107 0148 	add.w	r1, r7, #72	; 0x48
1a00bb72:	440b      	add	r3, r1
1a00bb74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
1a00bb78:	b29b      	uxth	r3, r3
1a00bb7a:	4313      	orrs	r3, r2
1a00bb7c:	b29a      	uxth	r2, r3
1a00bb7e:	68bb      	ldr	r3, [r7, #8]
1a00bb80:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
1a00bb82:	68bb      	ldr	r3, [r7, #8]
1a00bb84:	3302      	adds	r3, #2
1a00bb86:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
1a00bb8a:	3202      	adds	r2, #2
1a00bb8c:	f107 0148 	add.w	r1, r7, #72	; 0x48
1a00bb90:	440a      	add	r2, r1
1a00bb92:	f812 2c28 	ldrb.w	r2, [r2, #-40]
1a00bb96:	0212      	lsls	r2, r2, #8
1a00bb98:	b291      	uxth	r1, r2
1a00bb9a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
1a00bb9e:	3203      	adds	r2, #3
1a00bba0:	f107 0048 	add.w	r0, r7, #72	; 0x48
1a00bba4:	4402      	add	r2, r0
1a00bba6:	f812 2c28 	ldrb.w	r2, [r2, #-40]
1a00bbaa:	b292      	uxth	r2, r2
1a00bbac:	430a      	orrs	r2, r1
1a00bbae:	b292      	uxth	r2, r2
1a00bbb0:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
1a00bbb2:	68bb      	ldr	r3, [r7, #8]
1a00bbb4:	3304      	adds	r3, #4
1a00bbb6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
1a00bbba:	3204      	adds	r2, #4
1a00bbbc:	f107 0148 	add.w	r1, r7, #72	; 0x48
1a00bbc0:	440a      	add	r2, r1
1a00bbc2:	f812 2c28 	ldrb.w	r2, [r2, #-40]
1a00bbc6:	0212      	lsls	r2, r2, #8
1a00bbc8:	b291      	uxth	r1, r2
1a00bbca:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
1a00bbce:	3205      	adds	r2, #5
1a00bbd0:	f107 0048 	add.w	r0, r7, #72	; 0x48
1a00bbd4:	4402      	add	r2, r0
1a00bbd6:	f812 2c28 	ldrb.w	r2, [r2, #-40]
1a00bbda:	b292      	uxth	r2, r2
1a00bbdc:	430a      	orrs	r2, r1
1a00bbde:	b292      	uxth	r2, r2
1a00bbe0:	801a      	strh	r2, [r3, #0]
        ii += 6;
1a00bbe2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
1a00bbe6:	3306      	adds	r3, #6
1a00bbe8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
1a00bbec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00bbee:	881b      	ldrh	r3, [r3, #0]
1a00bbf0:	f043 0308 	orr.w	r3, r3, #8
1a00bbf4:	b29a      	uxth	r2, r3
1a00bbf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00bbf8:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
1a00bbfa:	4b37      	ldr	r3, [pc, #220]	; (1a00bcd8 <dmp_read_fifo+0x2e0>)
1a00bbfc:	895b      	ldrh	r3, [r3, #10]
1a00bbfe:	f403 73c0 	and.w	r3, r3, #384	; 0x180
1a00bc02:	2b00      	cmp	r3, #0
1a00bc04:	d051      	beq.n	1a00bcaa <dmp_read_fifo+0x2b2>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
1a00bc06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
1a00bc0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
1a00bc0e:	4413      	add	r3, r2
1a00bc10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
1a00bc14:	021b      	lsls	r3, r3, #8
1a00bc16:	b29a      	uxth	r2, r3
1a00bc18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
1a00bc1c:	3301      	adds	r3, #1
1a00bc1e:	f107 0148 	add.w	r1, r7, #72	; 0x48
1a00bc22:	440b      	add	r3, r1
1a00bc24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
1a00bc28:	b29b      	uxth	r3, r3
1a00bc2a:	4313      	orrs	r3, r2
1a00bc2c:	b29a      	uxth	r2, r3
1a00bc2e:	68fb      	ldr	r3, [r7, #12]
1a00bc30:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
1a00bc32:	68fb      	ldr	r3, [r7, #12]
1a00bc34:	3302      	adds	r3, #2
1a00bc36:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
1a00bc3a:	3202      	adds	r2, #2
1a00bc3c:	f107 0148 	add.w	r1, r7, #72	; 0x48
1a00bc40:	440a      	add	r2, r1
1a00bc42:	f812 2c28 	ldrb.w	r2, [r2, #-40]
1a00bc46:	0212      	lsls	r2, r2, #8
1a00bc48:	b291      	uxth	r1, r2
1a00bc4a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
1a00bc4e:	3203      	adds	r2, #3
1a00bc50:	f107 0048 	add.w	r0, r7, #72	; 0x48
1a00bc54:	4402      	add	r2, r0
1a00bc56:	f812 2c28 	ldrb.w	r2, [r2, #-40]
1a00bc5a:	b292      	uxth	r2, r2
1a00bc5c:	430a      	orrs	r2, r1
1a00bc5e:	b292      	uxth	r2, r2
1a00bc60:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
1a00bc62:	68fb      	ldr	r3, [r7, #12]
1a00bc64:	3304      	adds	r3, #4
1a00bc66:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
1a00bc6a:	3204      	adds	r2, #4
1a00bc6c:	f107 0148 	add.w	r1, r7, #72	; 0x48
1a00bc70:	440a      	add	r2, r1
1a00bc72:	f812 2c28 	ldrb.w	r2, [r2, #-40]
1a00bc76:	0212      	lsls	r2, r2, #8
1a00bc78:	b291      	uxth	r1, r2
1a00bc7a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
1a00bc7e:	3205      	adds	r2, #5
1a00bc80:	f107 0048 	add.w	r0, r7, #72	; 0x48
1a00bc84:	4402      	add	r2, r0
1a00bc86:	f812 2c28 	ldrb.w	r2, [r2, #-40]
1a00bc8a:	b292      	uxth	r2, r2
1a00bc8c:	430a      	orrs	r2, r1
1a00bc8e:	b292      	uxth	r2, r2
1a00bc90:	801a      	strh	r2, [r3, #0]
        ii += 6;
1a00bc92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
1a00bc96:	3306      	adds	r3, #6
1a00bc98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
1a00bc9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00bc9e:	881b      	ldrh	r3, [r3, #0]
1a00bca0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1a00bca4:	b29a      	uxth	r2, r3
1a00bca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00bca8:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1a00bcaa:	4b0b      	ldr	r3, [pc, #44]	; (1a00bcd8 <dmp_read_fifo+0x2e0>)
1a00bcac:	895b      	ldrh	r3, [r3, #10]
1a00bcae:	f003 0303 	and.w	r3, r3, #3
1a00bcb2:	2b00      	cmp	r3, #0
1a00bcb4:	d007      	beq.n	1a00bcc6 <dmp_read_fifo+0x2ce>
        decode_gesture(fifo_data + ii);
1a00bcb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
1a00bcba:	f107 0220 	add.w	r2, r7, #32
1a00bcbe:	4413      	add	r3, r2
1a00bcc0:	4618      	mov	r0, r3
1a00bcc2:	f7ff fe55 	bl	1a00b970 <decode_gesture>

    get_ms(timestamp);
1a00bcc6:	6838      	ldr	r0, [r7, #0]
1a00bcc8:	f7fa fcd4 	bl	1a006674 <getTimerMs>
    return 0;
1a00bccc:	2300      	movs	r3, #0
}
1a00bcce:	4618      	mov	r0, r3
1a00bcd0:	3748      	adds	r7, #72	; 0x48
1a00bcd2:	46bd      	mov	sp, r7
1a00bcd4:	bd80      	pop	{r7, pc}
1a00bcd6:	bf00      	nop
1a00bcd8:	10086bd4 	.word	0x10086bd4

1a00bcdc <inv_start_in_use_auto_calibration>:
1a00bcdc:	4802      	ldr	r0, [pc, #8]	; (1a00bce8 <inv_start_in_use_auto_calibration+0xc>)
1a00bcde:	f240 3152 	movw	r1, #850	; 0x352
1a00bce2:	2201      	movs	r2, #1
1a00bce4:	f7fb bbb0 	b.w	1a007448 <inv_register_data_cb>
1a00bce8:	1a00c141 	.word	0x1a00c141

1a00bcec <set_sample_rate>:
1a00bcec:	b538      	push	{r3, r4, r5, lr}
1a00bcee:	4605      	mov	r5, r0
1a00bcf0:	f008 fa4e 	bl	1a014190 <__aeabi_i2f>
1a00bcf4:	490c      	ldr	r1, [pc, #48]	; (1a00bd28 <set_sample_rate+0x3c>)
1a00bcf6:	4c0d      	ldr	r4, [pc, #52]	; (1a00bd2c <set_sample_rate+0x40>)
1a00bcf8:	f008 fa9e 	bl	1a014238 <__aeabi_fmul>
1a00bcfc:	490c      	ldr	r1, [pc, #48]	; (1a00bd30 <set_sample_rate+0x44>)
1a00bcfe:	f008 fb4f 	bl	1a0143a0 <__aeabi_fdiv>
1a00bd02:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
1a00bd06:	f008 fa97 	bl	1a014238 <__aeabi_fmul>
1a00bd0a:	f007 fe21 	bl	1a013950 <__aeabi_f2d>
1a00bd0e:	f009 fa17 	bl	1a015140 <cos>
1a00bd12:	2200      	movs	r2, #0
1a00bd14:	4b07      	ldr	r3, [pc, #28]	; (1a00bd34 <set_sample_rate+0x48>)
1a00bd16:	f007 fe6f 	bl	1a0139f8 <__aeabi_dmul>
1a00bd1a:	f008 f907 	bl	1a013f2c <__aeabi_d2iz>
1a00bd1e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
1a00bd22:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
1a00bd26:	bd38      	pop	{r3, r4, r5, pc}
1a00bd28:	40278d36 	.word	0x40278d36
1a00bd2c:	10086be8 	.word	0x10086be8
1a00bd30:	49742400 	.word	0x49742400
1a00bd34:	41d00000 	.word	0x41d00000

1a00bd38 <inv_combine_data_calculate_bias.part.1>:
1a00bd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00bd3a:	4c2b      	ldr	r4, [pc, #172]	; (1a00bde8 <inv_combine_data_calculate_bias.part.1+0xb0>)
1a00bd3c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a00bd40:	4613      	mov	r3, r2
1a00bd42:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
1a00bd46:	f504 75d4 	add.w	r5, r4, #424	; 0x1a8
1a00bd4a:	4607      	mov	r7, r0
1a00bd4c:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
1a00bd50:	f000 ff4e 	bl	1a00cbf0 <inv_combine_compass_data>
1a00bd54:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
1a00bd58:	4629      	mov	r1, r5
1a00bd5a:	f104 0250 	add.w	r2, r4, #80	; 0x50
1a00bd5e:	f001 f977 	bl	1a00d050 <inv_compute_bias>
1a00bd62:	4606      	mov	r6, r0
1a00bd64:	b908      	cbnz	r0, 1a00bd6a <inv_combine_data_calculate_bias.part.1+0x32>
1a00bd66:	4630      	mov	r0, r6
1a00bd68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00bd6a:	6863      	ldr	r3, [r4, #4]
1a00bd6c:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
1a00bd70:	3301      	adds	r3, #1
1a00bd72:	6063      	str	r3, [r4, #4]
1a00bd74:	f008 f8da 	bl	1a013f2c <__aeabi_d2iz>
1a00bd78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
1a00bd7a:	f7fb ffd7 	bl	1a007d2c <inv_q30_mult>
1a00bd7e:	f008 fa07 	bl	1a014190 <__aeabi_i2f>
1a00bd82:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a00bd86:	f008 fa57 	bl	1a014238 <__aeabi_fmul>
1a00bd8a:	f007 fde1 	bl	1a013950 <__aeabi_f2d>
1a00bd8e:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
1a00bd92:	e9d5 0100 	ldrd	r0, r1, [r5]
1a00bd96:	f008 f8c9 	bl	1a013f2c <__aeabi_d2iz>
1a00bd9a:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
1a00bd9e:	65a0      	str	r0, [r4, #88]	; 0x58
1a00bda0:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00bda4:	f008 f8c2 	bl	1a013f2c <__aeabi_d2iz>
1a00bda8:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
1a00bdac:	65e0      	str	r0, [r4, #92]	; 0x5c
1a00bdae:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00bdb2:	f008 f8bb 	bl	1a013f2c <__aeabi_d2iz>
1a00bdb6:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
1a00bdba:	6620      	str	r0, [r4, #96]	; 0x60
1a00bdbc:	a308      	add	r3, pc, #32	; (adr r3, 1a00bde0 <inv_combine_data_calculate_bias.part.1+0xa8>)
1a00bdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00bdc2:	e9d1 0100 	ldrd	r0, r1, [r1]
1a00bdc6:	f008 f8a7 	bl	1a013f18 <__aeabi_dcmpgt>
1a00bdca:	2800      	cmp	r0, #0
1a00bdcc:	d0cb      	beq.n	1a00bd66 <inv_combine_data_calculate_bias.part.1+0x2e>
1a00bdce:	4a07      	ldr	r2, [pc, #28]	; (1a00bdec <inv_combine_data_calculate_bias.part.1+0xb4>)
1a00bdd0:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
1a00bdd4:	4601      	mov	r1, r0
1a00bdd6:	4613      	mov	r3, r2
1a00bdd8:	f000 ff0a 	bl	1a00cbf0 <inv_combine_compass_data>
1a00bddc:	4630      	mov	r0, r6
1a00bdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00bde0:	00000000 	.word	0x00000000
1a00bde4:	40a77000 	.word	0x40a77000
1a00bde8:	10086be8 	.word	0x10086be8
1a00bdec:	3ecccccd 	.word	0x3ecccccd

1a00bdf0 <inv_get_current_calibrated_accel>:
1a00bdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00bdf2:	4b0f      	ldr	r3, [pc, #60]	; (1a00be30 <inv_get_current_calibrated_accel+0x40>)
1a00bdf4:	f9b0 e04a 	ldrsh.w	lr, [r0, #74]	; 0x4a
1a00bdf8:	f9b0 704c 	ldrsh.w	r7, [r0, #76]	; 0x4c
1a00bdfc:	f9b0 c048 	ldrsh.w	ip, [r0, #72]	; 0x48
1a00be00:	6e5e      	ldr	r6, [r3, #100]	; 0x64
1a00be02:	6e9d      	ldr	r5, [r3, #104]	; 0x68
1a00be04:	6edc      	ldr	r4, [r3, #108]	; 0x6c
1a00be06:	4602      	mov	r2, r0
1a00be08:	b085      	sub	sp, #20
1a00be0a:	460b      	mov	r3, r1
1a00be0c:	ebc6 460c 	rsb	r6, r6, ip, lsl #16
1a00be10:	ebc5 450e 	rsb	r5, r5, lr, lsl #16
1a00be14:	ebc4 4407 	rsb	r4, r4, r7, lsl #16
1a00be18:	6e91      	ldr	r1, [r2, #104]	; 0x68
1a00be1a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
1a00be1e:	9601      	str	r6, [sp, #4]
1a00be20:	aa01      	add	r2, sp, #4
1a00be22:	9502      	str	r5, [sp, #8]
1a00be24:	9403      	str	r4, [sp, #12]
1a00be26:	f7fc fd27 	bl	1a008878 <inv_convert_to_body_with_scale>
1a00be2a:	b005      	add	sp, #20
1a00be2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00be2e:	bf00      	nop
1a00be30:	10086be8 	.word	0x10086be8

1a00be34 <inv_sort_order_4_T>:
1a00be34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00be36:	6906      	ldr	r6, [r0, #16]
1a00be38:	68c5      	ldr	r5, [r0, #12]
1a00be3a:	4604      	mov	r4, r0
1a00be3c:	4631      	mov	r1, r6
1a00be3e:	4628      	mov	r0, r5
1a00be40:	f008 fbb6 	bl	1a0145b0 <__aeabi_fcmpgt>
1a00be44:	b190      	cbz	r0, 1a00be6c <inv_sort_order_4_T+0x38>
1a00be46:	6967      	ldr	r7, [r4, #20]
1a00be48:	4628      	mov	r0, r5
1a00be4a:	4639      	mov	r1, r7
1a00be4c:	f008 fbb0 	bl	1a0145b0 <__aeabi_fcmpgt>
1a00be50:	b160      	cbz	r0, 1a00be6c <inv_sort_order_4_T+0x38>
1a00be52:	2300      	movs	r3, #0
1a00be54:	6423      	str	r3, [r4, #64]	; 0x40
1a00be56:	4630      	mov	r0, r6
1a00be58:	4639      	mov	r1, r7
1a00be5a:	f008 fb9f 	bl	1a01459c <__aeabi_fcmpge>
1a00be5e:	2800      	cmp	r0, #0
1a00be60:	d02b      	beq.n	1a00beba <inv_sort_order_4_T+0x86>
1a00be62:	2301      	movs	r3, #1
1a00be64:	6463      	str	r3, [r4, #68]	; 0x44
1a00be66:	2302      	movs	r3, #2
1a00be68:	64a3      	str	r3, [r4, #72]	; 0x48
1a00be6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00be6c:	4628      	mov	r0, r5
1a00be6e:	4631      	mov	r1, r6
1a00be70:	f008 fb80 	bl	1a014574 <__aeabi_fcmplt>
1a00be74:	b188      	cbz	r0, 1a00be9a <inv_sort_order_4_T+0x66>
1a00be76:	6967      	ldr	r7, [r4, #20]
1a00be78:	4630      	mov	r0, r6
1a00be7a:	4639      	mov	r1, r7
1a00be7c:	f008 fb98 	bl	1a0145b0 <__aeabi_fcmpgt>
1a00be80:	b158      	cbz	r0, 1a00be9a <inv_sort_order_4_T+0x66>
1a00be82:	2301      	movs	r3, #1
1a00be84:	6423      	str	r3, [r4, #64]	; 0x40
1a00be86:	4628      	mov	r0, r5
1a00be88:	4639      	mov	r1, r7
1a00be8a:	f008 fb87 	bl	1a01459c <__aeabi_fcmpge>
1a00be8e:	b1c8      	cbz	r0, 1a00bec4 <inv_sort_order_4_T+0x90>
1a00be90:	2300      	movs	r3, #0
1a00be92:	6463      	str	r3, [r4, #68]	; 0x44
1a00be94:	2302      	movs	r3, #2
1a00be96:	64a3      	str	r3, [r4, #72]	; 0x48
1a00be98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00be9a:	2302      	movs	r3, #2
1a00be9c:	6423      	str	r3, [r4, #64]	; 0x40
1a00be9e:	4628      	mov	r0, r5
1a00bea0:	4631      	mov	r1, r6
1a00bea2:	f008 fb7b 	bl	1a01459c <__aeabi_fcmpge>
1a00bea6:	b918      	cbnz	r0, 1a00beb0 <inv_sort_order_4_T+0x7c>
1a00bea8:	2301      	movs	r3, #1
1a00beaa:	6463      	str	r3, [r4, #68]	; 0x44
1a00beac:	64a0      	str	r0, [r4, #72]	; 0x48
1a00beae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00beb0:	2300      	movs	r3, #0
1a00beb2:	6463      	str	r3, [r4, #68]	; 0x44
1a00beb4:	2301      	movs	r3, #1
1a00beb6:	64a3      	str	r3, [r4, #72]	; 0x48
1a00beb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00beba:	2302      	movs	r3, #2
1a00bebc:	6463      	str	r3, [r4, #68]	; 0x44
1a00bebe:	2301      	movs	r3, #1
1a00bec0:	64a3      	str	r3, [r4, #72]	; 0x48
1a00bec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00bec4:	2302      	movs	r3, #2
1a00bec6:	6463      	str	r3, [r4, #68]	; 0x44
1a00bec8:	64a0      	str	r0, [r4, #72]	; 0x48
1a00beca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a00becc <inv_init_check_sample_balance_parameter>:
1a00becc:	2300      	movs	r3, #0
1a00bece:	2114      	movs	r1, #20
1a00bed0:	2200      	movs	r2, #0
1a00bed2:	6581      	str	r1, [r0, #88]	; 0x58
1a00bed4:	6003      	str	r3, [r0, #0]
1a00bed6:	210a      	movs	r1, #10
1a00bed8:	6243      	str	r3, [r0, #36]	; 0x24
1a00beda:	6043      	str	r3, [r0, #4]
1a00bedc:	6283      	str	r3, [r0, #40]	; 0x28
1a00bede:	6083      	str	r3, [r0, #8]
1a00bee0:	62c3      	str	r3, [r0, #44]	; 0x2c
1a00bee2:	2301      	movs	r3, #1
1a00bee4:	6601      	str	r1, [r0, #96]	; 0x60
1a00bee6:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
1a00beea:	64c2      	str	r2, [r0, #76]	; 0x4c
1a00beec:	6743      	str	r3, [r0, #116]	; 0x74
1a00beee:	6782      	str	r2, [r0, #120]	; 0x78
1a00bef0:	6542      	str	r2, [r0, #84]	; 0x54
1a00bef2:	4770      	bx	lr

1a00bef4 <inv_add_accel_block_data>:
1a00bef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00bef8:	b087      	sub	sp, #28
1a00befa:	4669      	mov	r1, sp
1a00befc:	f7ff ff78 	bl	1a00bdf0 <inv_get_current_calibrated_accel>
1a00bf00:	2600      	movs	r6, #0
1a00bf02:	2400      	movs	r4, #0
1a00bf04:	2500      	movs	r5, #0
1a00bf06:	af03      	add	r7, sp, #12
1a00bf08:	f85d 0006 	ldr.w	r0, [sp, r6]
1a00bf0c:	f008 f940 	bl	1a014190 <__aeabi_i2f>
1a00bf10:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a00bf14:	f008 f990 	bl	1a014238 <__aeabi_fmul>
1a00bf18:	4601      	mov	r1, r0
1a00bf1a:	51b8      	str	r0, [r7, r6]
1a00bf1c:	f008 f98c 	bl	1a014238 <__aeabi_fmul>
1a00bf20:	f007 fd16 	bl	1a013950 <__aeabi_f2d>
1a00bf24:	4602      	mov	r2, r0
1a00bf26:	460b      	mov	r3, r1
1a00bf28:	4620      	mov	r0, r4
1a00bf2a:	4629      	mov	r1, r5
1a00bf2c:	f007 fbb2 	bl	1a013694 <__adddf3>
1a00bf30:	3604      	adds	r6, #4
1a00bf32:	2e0c      	cmp	r6, #12
1a00bf34:	4604      	mov	r4, r0
1a00bf36:	460d      	mov	r5, r1
1a00bf38:	d1e6      	bne.n	1a00bf08 <inv_add_accel_block_data+0x14>
1a00bf3a:	f009 fb9b 	bl	1a015674 <sqrt>
1a00bf3e:	4f13      	ldr	r7, [pc, #76]	; (1a00bf8c <inv_add_accel_block_data+0x98>)
1a00bf40:	4604      	mov	r4, r0
1a00bf42:	460d      	mov	r5, r1
1a00bf44:	ae02      	add	r6, sp, #8
1a00bf46:	f10d 0914 	add.w	r9, sp, #20
1a00bf4a:	f856 0f04 	ldr.w	r0, [r6, #4]!
1a00bf4e:	f8d7 8000 	ldr.w	r8, [r7]
1a00bf52:	f007 fcfd 	bl	1a013950 <__aeabi_f2d>
1a00bf56:	4622      	mov	r2, r4
1a00bf58:	462b      	mov	r3, r5
1a00bf5a:	f007 fe77 	bl	1a013c4c <__aeabi_ddiv>
1a00bf5e:	f008 f80d 	bl	1a013f7c <__aeabi_d2f>
1a00bf62:	4601      	mov	r1, r0
1a00bf64:	4640      	mov	r0, r8
1a00bf66:	f008 f85f 	bl	1a014028 <__addsf3>
1a00bf6a:	454e      	cmp	r6, r9
1a00bf6c:	f847 0b04 	str.w	r0, [r7], #4
1a00bf70:	d1eb      	bne.n	1a00bf4a <inv_add_accel_block_data+0x56>
1a00bf72:	4b07      	ldr	r3, [pc, #28]	; (1a00bf90 <inv_add_accel_block_data+0x9c>)
1a00bf74:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
1a00bf78:	3201      	adds	r2, #1
1a00bf7a:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
1a00bf7e:	2201      	movs	r2, #1
1a00bf80:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
1a00bf84:	b007      	add	sp, #28
1a00bf86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00bf8a:	bf00      	nop
1a00bf8c:	10087018 	.word	0x10087018
1a00bf90:	10086be8 	.word	0x10086be8
1a00bf94:	ffffffff 	.word	0xffffffff

1a00bf98 <inv_check_sample_balance>:
1a00bf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00bf9c:	4605      	mov	r5, r0
1a00bf9e:	b083      	sub	sp, #12
1a00bfa0:	6d00      	ldr	r0, [r0, #80]	; 0x50
1a00bfa2:	f008 f8f5 	bl	1a014190 <__aeabi_i2f>
1a00bfa6:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
1a00bfaa:	4683      	mov	fp, r0
1a00bfac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
1a00bfb0:	4648      	mov	r0, r9
1a00bfb2:	f008 f837 	bl	1a014024 <__aeabi_fsub>
1a00bfb6:	462c      	mov	r4, r5
1a00bfb8:	9001      	str	r0, [sp, #4]
1a00bfba:	2600      	movs	r6, #0
1a00bfbc:	4659      	mov	r1, fp
1a00bfbe:	59a8      	ldr	r0, [r5, r6]
1a00bfc0:	f008 f9ee 	bl	1a0143a0 <__aeabi_fdiv>
1a00bfc4:	2100      	movs	r1, #0
1a00bfc6:	4607      	mov	r7, r0
1a00bfc8:	f008 fae8 	bl	1a01459c <__aeabi_fcmpge>
1a00bfcc:	2800      	cmp	r0, #0
1a00bfce:	d053      	beq.n	1a00c078 <inv_check_sample_balance+0xe0>
1a00bfd0:	46b8      	mov	r8, r7
1a00bfd2:	f8d4 a018 	ldr.w	sl, [r4, #24]
1a00bfd6:	2100      	movs	r1, #0
1a00bfd8:	4650      	mov	r0, sl
1a00bfda:	f008 fadf 	bl	1a01459c <__aeabi_fcmpge>
1a00bfde:	2800      	cmp	r0, #0
1a00bfe0:	d046      	beq.n	1a00c070 <inv_check_sample_balance+0xd8>
1a00bfe2:	4651      	mov	r1, sl
1a00bfe4:	4640      	mov	r0, r8
1a00bfe6:	f008 f81d 	bl	1a014024 <__aeabi_fsub>
1a00bfea:	6a61      	ldr	r1, [r4, #36]	; 0x24
1a00bfec:	6320      	str	r0, [r4, #48]	; 0x30
1a00bfee:	61a7      	str	r7, [r4, #24]
1a00bff0:	9801      	ldr	r0, [sp, #4]
1a00bff2:	f008 f921 	bl	1a014238 <__aeabi_fmul>
1a00bff6:	4601      	mov	r1, r0
1a00bff8:	4638      	mov	r0, r7
1a00bffa:	f008 f815 	bl	1a014028 <__addsf3>
1a00bffe:	4649      	mov	r1, r9
1a00c000:	f008 f9ce 	bl	1a0143a0 <__aeabi_fdiv>
1a00c004:	2100      	movs	r1, #0
1a00c006:	6260      	str	r0, [r4, #36]	; 0x24
1a00c008:	4607      	mov	r7, r0
1a00c00a:	f008 fac7 	bl	1a01459c <__aeabi_fcmpge>
1a00c00e:	2800      	cmp	r0, #0
1a00c010:	d02b      	beq.n	1a00c06a <inv_check_sample_balance+0xd2>
1a00c012:	2200      	movs	r2, #0
1a00c014:	60e7      	str	r7, [r4, #12]
1a00c016:	51aa      	str	r2, [r5, r6]
1a00c018:	3604      	adds	r6, #4
1a00c01a:	3404      	adds	r4, #4
1a00c01c:	2e0c      	cmp	r6, #12
1a00c01e:	d1cd      	bne.n	1a00bfbc <inv_check_sample_balance+0x24>
1a00c020:	4628      	mov	r0, r5
1a00c022:	f7ff ff07 	bl	1a00be34 <inv_sort_order_4_T>
1a00c026:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
1a00c028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1a00c02c:	da01      	bge.n	1a00c032 <inv_check_sample_balance+0x9a>
1a00c02e:	3301      	adds	r3, #1
1a00c030:	64eb      	str	r3, [r5, #76]	; 0x4c
1a00c032:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
1a00c036:	6c2c      	ldr	r4, [r5, #64]	; 0x40
1a00c038:	2b05      	cmp	r3, #5
1a00c03a:	d813      	bhi.n	1a00c064 <inv_check_sample_balance+0xcc>
1a00c03c:	e8df f003 	tbb	[pc, r3]
1a00c040:	644e453d 	.word	0x644e453d
1a00c044:	1f03      	.short	0x1f03
1a00c046:	eb05 0484 	add.w	r4, r5, r4, lsl #2
1a00c04a:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
1a00c04c:	68e0      	ldr	r0, [r4, #12]
1a00c04e:	f008 fa9b 	bl	1a014588 <__aeabi_fcmple>
1a00c052:	b138      	cbz	r0, 1a00c064 <inv_check_sample_balance+0xcc>
1a00c054:	2205      	movs	r2, #5
1a00c056:	2301      	movs	r3, #1
1a00c058:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
1a00c05c:	2200      	movs	r2, #0
1a00c05e:	64ea      	str	r2, [r5, #76]	; 0x4c
1a00c060:	676b      	str	r3, [r5, #116]	; 0x74
1a00c062:	67ab      	str	r3, [r5, #120]	; 0x78
1a00c064:	b003      	add	sp, #12
1a00c066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00c06a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
1a00c06e:	e7d0      	b.n	1a00c012 <inv_check_sample_balance+0x7a>
1a00c070:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
1a00c074:	469a      	mov	sl, r3
1a00c076:	e7b4      	b.n	1a00bfe2 <inv_check_sample_balance+0x4a>
1a00c078:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
1a00c07c:	e7a9      	b.n	1a00bfd2 <inv_check_sample_balance+0x3a>
1a00c07e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
1a00c082:	6ea9      	ldr	r1, [r5, #104]	; 0x68
1a00c084:	68d8      	ldr	r0, [r3, #12]
1a00c086:	f008 fa7f 	bl	1a014588 <__aeabi_fcmple>
1a00c08a:	b978      	cbnz	r0, 1a00c0ac <inv_check_sample_balance+0x114>
1a00c08c:	340c      	adds	r4, #12
1a00c08e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
1a00c092:	f007 fc5d 	bl	1a013950 <__aeabi_f2d>
1a00c096:	a328      	add	r3, pc, #160	; (adr r3, 1a00c138 <inv_check_sample_balance+0x1a0>)
1a00c098:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00c09c:	f007 ff28 	bl	1a013ef0 <__aeabi_dcmple>
1a00c0a0:	2800      	cmp	r0, #0
1a00c0a2:	d040      	beq.n	1a00c126 <inv_check_sample_balance+0x18e>
1a00c0a4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1a00c0a6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
1a00c0a8:	429a      	cmp	r2, r3
1a00c0aa:	dbdb      	blt.n	1a00c064 <inv_check_sample_balance+0xcc>
1a00c0ac:	2301      	movs	r3, #1
1a00c0ae:	2203      	movs	r2, #3
1a00c0b0:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
1a00c0b4:	676b      	str	r3, [r5, #116]	; 0x74
1a00c0b6:	67ab      	str	r3, [r5, #120]	; 0x78
1a00c0b8:	e7d4      	b.n	1a00c064 <inv_check_sample_balance+0xcc>
1a00c0ba:	2301      	movs	r3, #1
1a00c0bc:	2200      	movs	r2, #0
1a00c0be:	676b      	str	r3, [r5, #116]	; 0x74
1a00c0c0:	67ab      	str	r3, [r5, #120]	; 0x78
1a00c0c2:	64ea      	str	r2, [r5, #76]	; 0x4c
1a00c0c4:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
1a00c0c8:	e7cc      	b.n	1a00c064 <inv_check_sample_balance+0xcc>
1a00c0ca:	6feb      	ldr	r3, [r5, #124]	; 0x7c
1a00c0cc:	2b01      	cmp	r3, #1
1a00c0ce:	d1c9      	bne.n	1a00c064 <inv_check_sample_balance+0xcc>
1a00c0d0:	2302      	movs	r3, #2
1a00c0d2:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
1a00c0d6:	2300      	movs	r3, #0
1a00c0d8:	67ab      	str	r3, [r5, #120]	; 0x78
1a00c0da:	e7c3      	b.n	1a00c064 <inv_check_sample_balance+0xcc>
1a00c0dc:	eb05 0484 	add.w	r4, r5, r4, lsl #2
1a00c0e0:	6e69      	ldr	r1, [r5, #100]	; 0x64
1a00c0e2:	68e4      	ldr	r4, [r4, #12]
1a00c0e4:	4620      	mov	r0, r4
1a00c0e6:	f008 fa59 	bl	1a01459c <__aeabi_fcmpge>
1a00c0ea:	b9a8      	cbnz	r0, 1a00c118 <inv_check_sample_balance+0x180>
1a00c0ec:	4620      	mov	r0, r4
1a00c0ee:	6ea9      	ldr	r1, [r5, #104]	; 0x68
1a00c0f0:	f008 fa4a 	bl	1a014588 <__aeabi_fcmple>
1a00c0f4:	2301      	movs	r3, #1
1a00c0f6:	2800      	cmp	r0, #0
1a00c0f8:	d1d9      	bne.n	1a00c0ae <inv_check_sample_balance+0x116>
1a00c0fa:	2205      	movs	r2, #5
1a00c0fc:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
1a00c100:	64e8      	str	r0, [r5, #76]	; 0x4c
1a00c102:	676b      	str	r3, [r5, #116]	; 0x74
1a00c104:	67ab      	str	r3, [r5, #120]	; 0x78
1a00c106:	e7ad      	b.n	1a00c064 <inv_check_sample_balance+0xcc>
1a00c108:	eb05 0484 	add.w	r4, r5, r4, lsl #2
1a00c10c:	6e69      	ldr	r1, [r5, #100]	; 0x64
1a00c10e:	68e0      	ldr	r0, [r4, #12]
1a00c110:	f008 fa44 	bl	1a01459c <__aeabi_fcmpge>
1a00c114:	2800      	cmp	r0, #0
1a00c116:	d0a5      	beq.n	1a00c064 <inv_check_sample_balance+0xcc>
1a00c118:	2300      	movs	r3, #0
1a00c11a:	2204      	movs	r2, #4
1a00c11c:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
1a00c120:	676b      	str	r3, [r5, #116]	; 0x74
1a00c122:	67ab      	str	r3, [r5, #120]	; 0x78
1a00c124:	e79e      	b.n	1a00c064 <inv_check_sample_balance+0xcc>
1a00c126:	2304      	movs	r3, #4
1a00c128:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
1a00c12c:	64e8      	str	r0, [r5, #76]	; 0x4c
1a00c12e:	6768      	str	r0, [r5, #116]	; 0x74
1a00c130:	67a8      	str	r0, [r5, #120]	; 0x78
1a00c132:	e797      	b.n	1a00c064 <inv_check_sample_balance+0xcc>
1a00c134:	f3af 8000 	nop.w
1a00c138:	9999999a 	.word	0x9999999a
1a00c13c:	bfa99999 	.word	0xbfa99999

1a00c140 <inv_auto_calibrate>:
1a00c140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00c144:	4606      	mov	r6, r0
1a00c146:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
1a00c148:	f8df 9248 	ldr.w	r9, [pc, #584]	; 1a00c394 <inv_auto_calibrate+0x254>
1a00c14c:	b09f      	sub	sp, #124	; 0x7c
1a00c14e:	f644 631f 	movw	r3, #19999	; 0x4e1f
1a00c152:	2400      	movs	r4, #0
1a00c154:	4298      	cmp	r0, r3
1a00c156:	9411      	str	r4, [sp, #68]	; 0x44
1a00c158:	9412      	str	r4, [sp, #72]	; 0x48
1a00c15a:	9413      	str	r4, [sp, #76]	; 0x4c
1a00c15c:	dd21      	ble.n	1a00c1a2 <inv_auto_calibrate+0x62>
1a00c15e:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
1a00c162:	4298      	cmp	r0, r3
1a00c164:	d001      	beq.n	1a00c16a <inv_auto_calibrate+0x2a>
1a00c166:	f7ff fdc1 	bl	1a00bcec <set_sample_rate>
1a00c16a:	6b33      	ldr	r3, [r6, #48]	; 0x30
1a00c16c:	4c89      	ldr	r4, [pc, #548]	; (1a00c394 <inv_auto_calibrate+0x254>)
1a00c16e:	f8c9 34b0 	str.w	r3, [r9, #1200]	; 0x4b0
1a00c172:	4630      	mov	r0, r6
1a00c174:	f7ff febe 	bl	1a00bef4 <inv_add_accel_block_data>
1a00c178:	f8d9 2484 	ldr.w	r2, [r9, #1156]	; 0x484
1a00c17c:	f8d9 3480 	ldr.w	r3, [r9, #1152]	; 0x480
1a00c180:	429a      	cmp	r2, r3
1a00c182:	da1a      	bge.n	1a00c1ba <inv_auto_calibrate+0x7a>
1a00c184:	f8d9 34a8 	ldr.w	r3, [r9, #1192]	; 0x4a8
1a00c188:	4a82      	ldr	r2, [pc, #520]	; (1a00c394 <inv_auto_calibrate+0x254>)
1a00c18a:	2b01      	cmp	r3, #1
1a00c18c:	d021      	beq.n	1a00c1d2 <inv_auto_calibrate+0x92>
1a00c18e:	f8d9 34a4 	ldr.w	r3, [r9, #1188]	; 0x4a4
1a00c192:	4c80      	ldr	r4, [pc, #512]	; (1a00c394 <inv_auto_calibrate+0x254>)
1a00c194:	2b01      	cmp	r3, #1
1a00c196:	f000 8105 	beq.w	1a00c3a4 <inv_auto_calibrate+0x264>
1a00c19a:	2000      	movs	r0, #0
1a00c19c:	b01f      	add	sp, #124	; 0x7c
1a00c19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00c1a2:	f8d9 2348 	ldr.w	r2, [r9, #840]	; 0x348
1a00c1a6:	1880      	adds	r0, r0, r2
1a00c1a8:	4298      	cmp	r0, r3
1a00c1aa:	f8c9 0348 	str.w	r0, [r9, #840]	; 0x348
1a00c1ae:	ddf4      	ble.n	1a00c19a <inv_auto_calibrate+0x5a>
1a00c1b0:	f7ff fd9c 	bl	1a00bcec <set_sample_rate>
1a00c1b4:	f8c9 4348 	str.w	r4, [r9, #840]	; 0x348
1a00c1b8:	e7d7      	b.n	1a00c16a <inv_auto_calibrate+0x2a>
1a00c1ba:	f504 6086 	add.w	r0, r4, #1072	; 0x430
1a00c1be:	f7ff feeb 	bl	1a00bf98 <inv_check_sample_balance>
1a00c1c2:	2300      	movs	r3, #0
1a00c1c4:	f8c4 3484 	str.w	r3, [r4, #1156]	; 0x484
1a00c1c8:	f8d9 34a8 	ldr.w	r3, [r9, #1192]	; 0x4a8
1a00c1cc:	4a71      	ldr	r2, [pc, #452]	; (1a00c394 <inv_auto_calibrate+0x254>)
1a00c1ce:	2b01      	cmp	r3, #1
1a00c1d0:	d1dd      	bne.n	1a00c18e <inv_auto_calibrate+0x4e>
1a00c1d2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
1a00c1d6:	2b01      	cmp	r3, #1
1a00c1d8:	f000 823e 	beq.w	1a00c658 <inv_auto_calibrate+0x518>
1a00c1dc:	ad14      	add	r5, sp, #80	; 0x50
1a00c1de:	4629      	mov	r1, r5
1a00c1e0:	4630      	mov	r0, r6
1a00c1e2:	f7ff fe05 	bl	1a00bdf0 <inv_get_current_calibrated_accel>
1a00c1e6:	a817      	add	r0, sp, #92	; 0x5c
1a00c1e8:	f7fc fd0a 	bl	1a008c00 <inv_get_gravity>
1a00c1ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
1a00c1ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a00c1f0:	4869      	ldr	r0, [pc, #420]	; (1a00c398 <inv_auto_calibrate+0x258>)
1a00c1f2:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 1a00c3a0 <inv_auto_calibrate+0x260>
1a00c1f6:	eba2 3ea3 	sub.w	lr, r2, r3, asr #14
1a00c1fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a00c1fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a00c1fe:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
1a00c202:	eba2 37a3 	sub.w	r7, r2, r3, asr #14
1a00c206:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a00c208:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a00c20a:	9715      	str	r7, [sp, #84]	; 0x54
1a00c20c:	eba2 33a3 	sub.w	r3, r2, r3, asr #14
1a00c210:	1d01      	adds	r1, r0, #4
1a00c212:	2260      	movs	r2, #96	; 0x60
1a00c214:	f100 0418 	add.w	r4, r0, #24
1a00c218:	9316      	str	r3, [sp, #88]	; 0x58
1a00c21a:	f008 fcf9 	bl	1a014c10 <memmove>
1a00c21e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
1a00c222:	ad1a      	add	r5, sp, #104	; 0x68
1a00c224:	e884 0007 	stmia.w	r4, {r0, r1, r2}
1a00c228:	4628      	mov	r0, r5
1a00c22a:	f7fc fe6d 	bl	1a008f08 <inv_get_linear_accel>
1a00c22e:	f104 0158 	add.w	r1, r4, #88	; 0x58
1a00c232:	2260      	movs	r2, #96	; 0x60
1a00c234:	f104 0054 	add.w	r0, r4, #84	; 0x54
1a00c238:	f008 fcea 	bl	1a014c10 <memmove>
1a00c23c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
1a00c240:	f104 036c 	add.w	r3, r4, #108	; 0x6c
1a00c244:	e883 0007 	stmia.w	r3, {r0, r1, r2}
1a00c248:	f8d9 142c 	ldr.w	r1, [r9, #1068]	; 0x42c
1a00c24c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a00c24e:	910b      	str	r1, [sp, #44]	; 0x2c
1a00c250:	9a1a      	ldr	r2, [sp, #104]	; 0x68
1a00c252:	991c      	ldr	r1, [sp, #112]	; 0x70
1a00c254:	9308      	str	r3, [sp, #32]
1a00c256:	f04f 0c00 	mov.w	ip, #0
1a00c25a:	f5a4 7959 	sub.w	r9, r4, #868	; 0x364
1a00c25e:	960c      	str	r6, [sp, #48]	; 0x30
1a00c260:	9207      	str	r2, [sp, #28]
1a00c262:	9106      	str	r1, [sp, #24]
1a00c264:	464b      	mov	r3, r9
1a00c266:	f8cd c010 	str.w	ip, [sp, #16]
1a00c26a:	f8cd c00c 	str.w	ip, [sp, #12]
1a00c26e:	4666      	mov	r6, ip
1a00c270:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
1a00c274:	f8d3 434c 	ldr.w	r4, [r3, #844]	; 0x34c
1a00c278:	f8d3 1350 	ldr.w	r1, [r3, #848]	; 0x350
1a00c27c:	f8d3 53b8 	ldr.w	r5, [r3, #952]	; 0x3b8
1a00c280:	f8d3 a3c0 	ldr.w	sl, [r3, #960]	; 0x3c0
1a00c284:	f8d3 7354 	ldr.w	r7, [r3, #852]	; 0x354
1a00c288:	f8d3 03bc 	ldr.w	r0, [r3, #956]	; 0x3bc
1a00c28c:	fb8b 8204 	smull	r8, r2, fp, r4
1a00c290:	17e4      	asrs	r4, r4, #31
1a00c292:	fb8b c901 	smull	ip, r9, fp, r1
1a00c296:	9209      	str	r2, [sp, #36]	; 0x24
1a00c298:	9402      	str	r4, [sp, #8]
1a00c29a:	fb8b 4205 	smull	r4, r2, fp, r5
1a00c29e:	f8cd 9004 	str.w	r9, [sp, #4]
1a00c2a2:	ea4f 78e1 	mov.w	r8, r1, asr #31
1a00c2a6:	fb8b 9400 	smull	r9, r4, fp, r0
1a00c2aa:	fb8b 1c07 	smull	r1, ip, fp, r7
1a00c2ae:	920a      	str	r2, [sp, #40]	; 0x28
1a00c2b0:	f8dd 9008 	ldr.w	r9, [sp, #8]
1a00c2b4:	fb8b 210a 	smull	r2, r1, fp, sl
1a00c2b8:	ea4f 72ea 	mov.w	r2, sl, asr #31
1a00c2bc:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
1a00c2c0:	ebc9 096a 	rsb	r9, r9, sl, asr #1
1a00c2c4:	17ff      	asrs	r7, r7, #31
1a00c2c6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a00c2ca:	ebc2 0261 	rsb	r2, r2, r1, asr #1
1a00c2ce:	ebc7 076c 	rsb	r7, r7, ip, asr #1
1a00c2d2:	9909      	ldr	r1, [sp, #36]	; 0x24
1a00c2d4:	f8dd c00c 	ldr.w	ip, [sp, #12]
1a00c2d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
1a00c2dc:	f8dd 9004 	ldr.w	r9, [sp, #4]
1a00c2e0:	17ed      	asrs	r5, r5, #31
1a00c2e2:	448c      	add	ip, r1
1a00c2e4:	9907      	ldr	r1, [sp, #28]
1a00c2e6:	f8cd c00c 	str.w	ip, [sp, #12]
1a00c2ea:	17c0      	asrs	r0, r0, #31
1a00c2ec:	ebc5 056a 	rsb	r5, r5, sl, asr #1
1a00c2f0:	ebc0 0064 	rsb	r0, r0, r4, asr #1
1a00c2f4:	1949      	adds	r1, r1, r5
1a00c2f6:	9c04      	ldr	r4, [sp, #16]
1a00c2f8:	9107      	str	r1, [sp, #28]
1a00c2fa:	ebc8 0869 	rsb	r8, r8, r9, asr #1
1a00c2fe:	9906      	ldr	r1, [sp, #24]
1a00c300:	4444      	add	r4, r8
1a00c302:	1889      	adds	r1, r1, r2
1a00c304:	9404      	str	r4, [sp, #16]
1a00c306:	4a25      	ldr	r2, [pc, #148]	; (1a00c39c <inv_auto_calibrate+0x25c>)
1a00c308:	9c08      	ldr	r4, [sp, #32]
1a00c30a:	9106      	str	r1, [sp, #24]
1a00c30c:	330c      	adds	r3, #12
1a00c30e:	1824      	adds	r4, r4, r0
1a00c310:	4293      	cmp	r3, r2
1a00c312:	443e      	add	r6, r7
1a00c314:	9408      	str	r4, [sp, #32]
1a00c316:	d1ad      	bne.n	1a00c274 <inv_auto_calibrate+0x134>
1a00c318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00c31a:	9907      	ldr	r1, [sp, #28]
1a00c31c:	9f03      	ldr	r7, [sp, #12]
1a00c31e:	9d04      	ldr	r5, [sp, #16]
1a00c320:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
1a00c324:	f103 0009 	add.w	r0, r3, #9
1a00c328:	9b06      	ldr	r3, [sp, #24]
1a00c32a:	f8c9 042c 	str.w	r0, [r9, #1068]	; 0x42c
1a00c32e:	2900      	cmp	r1, #0
1a00c330:	bfb8      	it	lt
1a00c332:	4249      	neglt	r1, r1
1a00c334:	46b4      	mov	ip, r6
1a00c336:	4622      	mov	r2, r4
1a00c338:	2f00      	cmp	r7, #0
1a00c33a:	bfb8      	it	lt
1a00c33c:	427f      	neglt	r7, r7
1a00c33e:	2a00      	cmp	r2, #0
1a00c340:	bfb8      	it	lt
1a00c342:	4252      	neglt	r2, r2
1a00c344:	2b00      	cmp	r3, #0
1a00c346:	bfb8      	it	lt
1a00c348:	425b      	neglt	r3, r3
1a00c34a:	2d00      	cmp	r5, #0
1a00c34c:	bfb8      	it	lt
1a00c34e:	426d      	neglt	r5, r5
1a00c350:	ea8c 74ec 	eor.w	r4, ip, ip, asr #31
1a00c354:	eba4 74ec 	sub.w	r4, r4, ip, asr #31
1a00c358:	428f      	cmp	r7, r1
1a00c35a:	911a      	str	r1, [sp, #104]	; 0x68
1a00c35c:	bfac      	ite	ge
1a00c35e:	2100      	movge	r1, #0
1a00c360:	2101      	movlt	r1, #1
1a00c362:	4295      	cmp	r5, r2
1a00c364:	bfb8      	it	lt
1a00c366:	3101      	addlt	r1, #1
1a00c368:	429c      	cmp	r4, r3
1a00c36a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a00c36c:	921b      	str	r2, [sp, #108]	; 0x6c
1a00c36e:	931c      	str	r3, [sp, #112]	; 0x70
1a00c370:	f6bf af0d 	bge.w	1a00c18e <inv_auto_calibrate+0x4e>
1a00c374:	2808      	cmp	r0, #8
1a00c376:	f77f af0a 	ble.w	1a00c18e <inv_auto_calibrate+0x4e>
1a00c37a:	2902      	cmp	r1, #2
1a00c37c:	f47f af07 	bne.w	1a00c18e <inv_auto_calibrate+0x4e>
1a00c380:	f899 1424 	ldrb.w	r1, [r9, #1060]	; 0x424
1a00c384:	4b03      	ldr	r3, [pc, #12]	; (1a00c394 <inv_auto_calibrate+0x254>)
1a00c386:	2902      	cmp	r1, #2
1a00c388:	f200 816a 	bhi.w	1a00c660 <inv_auto_calibrate+0x520>
1a00c38c:	4608      	mov	r0, r1
1a00c38e:	f7fa fe3b 	bl	1a007008 <inv_set_accel_accuracy>
1a00c392:	e6fc      	b.n	1a00c18e <inv_auto_calibrate+0x4e>
1a00c394:	10086be8 	.word	0x10086be8
1a00c398:	10086f34 	.word	0x10086f34
1a00c39c:	10086c54 	.word	0x10086c54
1a00c3a0:	38e38e39 	.word	0x38e38e39
1a00c3a4:	a811      	add	r0, sp, #68	; 0x44
1a00c3a6:	f7fc fde1 	bl	1a008f6c <inv_get_linear_accel_float>
1a00c3aa:	9811      	ldr	r0, [sp, #68]	; 0x44
1a00c3ac:	9f12      	ldr	r7, [sp, #72]	; 0x48
1a00c3ae:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
1a00c3b2:	4601      	mov	r1, r0
1a00c3b4:	f007 ff40 	bl	1a014238 <__aeabi_fmul>
1a00c3b8:	4639      	mov	r1, r7
1a00c3ba:	4605      	mov	r5, r0
1a00c3bc:	4638      	mov	r0, r7
1a00c3be:	f007 ff3b 	bl	1a014238 <__aeabi_fmul>
1a00c3c2:	4601      	mov	r1, r0
1a00c3c4:	4628      	mov	r0, r5
1a00c3c6:	f007 fe2f 	bl	1a014028 <__addsf3>
1a00c3ca:	4641      	mov	r1, r8
1a00c3cc:	4605      	mov	r5, r0
1a00c3ce:	4640      	mov	r0, r8
1a00c3d0:	f007 ff32 	bl	1a014238 <__aeabi_fmul>
1a00c3d4:	4601      	mov	r1, r0
1a00c3d6:	4628      	mov	r0, r5
1a00c3d8:	f007 fe26 	bl	1a014028 <__addsf3>
1a00c3dc:	f009 f9f4 	bl	1a0157c8 <sqrtf>
1a00c3e0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
1a00c3e4:	60e0      	str	r0, [r4, #12]
1a00c3e6:	f007 ff27 	bl	1a014238 <__aeabi_fmul>
1a00c3ea:	f008 f8eb 	bl	1a0145c4 <__aeabi_f2iz>
1a00c3ee:	ad1a      	add	r5, sp, #104	; 0x68
1a00c3f0:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
1a00c3f4:	f04f 0a00 	mov.w	sl, #0
1a00c3f8:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
1a00c3fc:	a80f      	add	r0, sp, #60	; 0x3c
1a00c3fe:	f8ad a03e 	strh.w	sl, [sp, #62]	; 0x3e
1a00c402:	f8ad a040 	strh.w	sl, [sp, #64]	; 0x40
1a00c406:	f002 fe17 	bl	1a00f038 <inv_fast_nomot_store_data>
1a00c40a:	4628      	mov	r0, r5
1a00c40c:	f7fc fc58 	bl	1a008cc0 <inv_get_quaternion>
1a00c410:	6f21      	ldr	r1, [r4, #112]	; 0x70
1a00c412:	981a      	ldr	r0, [sp, #104]	; 0x68
1a00c414:	f7fb fc8a 	bl	1a007d2c <inv_q30_mult>
1a00c418:	6f61      	ldr	r1, [r4, #116]	; 0x74
1a00c41a:	9003      	str	r0, [sp, #12]
1a00c41c:	981b      	ldr	r0, [sp, #108]	; 0x6c
1a00c41e:	f7fb fc85 	bl	1a007d2c <inv_q30_mult>
1a00c422:	6fa1      	ldr	r1, [r4, #120]	; 0x78
1a00c424:	4680      	mov	r8, r0
1a00c426:	981c      	ldr	r0, [sp, #112]	; 0x70
1a00c428:	f7fb fc80 	bl	1a007d2c <inv_q30_mult>
1a00c42c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
1a00c42e:	4607      	mov	r7, r0
1a00c430:	981d      	ldr	r0, [sp, #116]	; 0x74
1a00c432:	f7fb fc7b 	bl	1a007d2c <inv_q30_mult>
1a00c436:	9006      	str	r0, [sp, #24]
1a00c438:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00c43c:	3470      	adds	r4, #112	; 0x70
1a00c43e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00c442:	46b3      	mov	fp, r6
1a00c444:	ad17      	add	r5, sp, #92	; 0x5c
1a00c446:	f9bb 0048 	ldrsh.w	r0, [fp, #72]	; 0x48
1a00c44a:	6eb1      	ldr	r1, [r6, #104]	; 0x68
1a00c44c:	4c8c      	ldr	r4, [pc, #560]	; (1a00c680 <inv_auto_calibrate+0x540>)
1a00c44e:	0400      	lsls	r0, r0, #16
1a00c450:	f7fb fc6c 	bl	1a007d2c <inv_q30_mult>
1a00c454:	f007 fe9c 	bl	1a014190 <__aeabi_i2f>
1a00c458:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a00c45c:	f007 feec 	bl	1a014238 <__aeabi_fmul>
1a00c460:	eb09 030a 	add.w	r3, r9, sl
1a00c464:	f10b 0b02 	add.w	fp, fp, #2
1a00c468:	6158      	str	r0, [r3, #20]
1a00c46a:	f9bb 3046 	ldrsh.w	r3, [fp, #70]	; 0x46
1a00c46e:	041b      	lsls	r3, r3, #16
1a00c470:	f845 300a 	str.w	r3, [r5, sl]
1a00c474:	f10a 0a04 	add.w	sl, sl, #4
1a00c478:	f1ba 0f0c 	cmp.w	sl, #12
1a00c47c:	d1e3      	bne.n	1a00c446 <inv_auto_calibrate+0x306>
1a00c47e:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
1a00c482:	4629      	mov	r1, r5
1a00c484:	f000 fc5e 	bl	1a00cd44 <inv_set_terms>
1a00c488:	f8d4 2328 	ldr.w	r2, [r4, #808]	; 0x328
1a00c48c:	6823      	ldr	r3, [r4, #0]
1a00c48e:	429a      	cmp	r2, r3
1a00c490:	f6ff ae83 	blt.w	1a00c19a <inv_auto_calibrate+0x5a>
1a00c494:	f8d6 00e4 	ldr.w	r0, [r6, #228]	; 0xe4
1a00c498:	f007 fe7a 	bl	1a014190 <__aeabi_i2f>
1a00c49c:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a00c4a0:	f007 feca 	bl	1a014238 <__aeabi_fmul>
1a00c4a4:	f8d4 a0d8 	ldr.w	sl, [r4, #216]	; 0xd8
1a00c4a8:	4605      	mov	r5, r0
1a00c4aa:	2100      	movs	r1, #0
1a00c4ac:	4650      	mov	r0, sl
1a00c4ae:	f008 f857 	bl	1a014560 <__aeabi_fcmpeq>
1a00c4b2:	b938      	cbnz	r0, 1a00c4c4 <inv_auto_calibrate+0x384>
1a00c4b4:	4628      	mov	r0, r5
1a00c4b6:	4651      	mov	r1, sl
1a00c4b8:	f007 fdb4 	bl	1a014024 <__aeabi_fsub>
1a00c4bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a00c4c0:	f8c4 00dc 	str.w	r0, [r4, #220]	; 0xdc
1a00c4c4:	f8d9 3008 	ldr.w	r3, [r9, #8]
1a00c4c8:	f8c9 50d8 	str.w	r5, [r9, #216]	; 0xd8
1a00c4cc:	2b05      	cmp	r3, #5
1a00c4ce:	d80e      	bhi.n	1a00c4ee <inv_auto_calibrate+0x3ae>
1a00c4d0:	e8df f003 	tbb	[pc, r3]
1a00c4d4:	03030303 	.word	0x03030303
1a00c4d8:	818b      	.short	0x818b
1a00c4da:	4b6a      	ldr	r3, [pc, #424]	; (1a00c684 <inv_auto_calibrate+0x544>)
1a00c4dc:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
1a00c4e0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
1a00c4e4:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
1a00c4e8:	23c8      	movs	r3, #200	; 0xc8
1a00c4ea:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
1a00c4ee:	6b33      	ldr	r3, [r6, #48]	; 0x30
1a00c4f0:	4865      	ldr	r0, [pc, #404]	; (1a00c688 <inv_auto_calibrate+0x548>)
1a00c4f2:	05db      	lsls	r3, r3, #23
1a00c4f4:	d565      	bpl.n	1a00c5c2 <inv_auto_calibrate+0x482>
1a00c4f6:	f002 fc15 	bl	1a00ed24 <inv_fast_nomot_parameter>
1a00c4fa:	f007 fe5f 	bl	1a0141bc <__aeabi_l2f>
1a00c4fe:	4963      	ldr	r1, [pc, #396]	; (1a00c68c <inv_auto_calibrate+0x54c>)
1a00c500:	f007 ff4e 	bl	1a0143a0 <__aeabi_fdiv>
1a00c504:	f8c9 0010 	str.w	r0, [r9, #16]
1a00c508:	4d5d      	ldr	r5, [pc, #372]	; (1a00c680 <inv_auto_calibrate+0x540>)
1a00c50a:	2298      	movs	r2, #152	; 0x98
1a00c50c:	2100      	movs	r1, #0
1a00c50e:	f505 702c 	add.w	r0, r5, #688	; 0x2b0
1a00c512:	f008 fbe1 	bl	1a014cd8 <memset>
1a00c516:	f8dd a00c 	ldr.w	sl, [sp, #12]
1a00c51a:	f8dd c018 	ldr.w	ip, [sp, #24]
1a00c51e:	f8d9 2084 	ldr.w	r2, [r9, #132]	; 0x84
1a00c522:	44d0      	add	r8, sl
1a00c524:	4447      	add	r7, r8
1a00c526:	eb07 030c 	add.w	r3, r7, ip
1a00c52a:	4293      	cmp	r3, r2
1a00c52c:	dd67      	ble.n	1a00c5fe <inv_auto_calibrate+0x4be>
1a00c52e:	692f      	ldr	r7, [r5, #16]
1a00c530:	2100      	movs	r1, #0
1a00c532:	4638      	mov	r0, r7
1a00c534:	f008 f83c 	bl	1a0145b0 <__aeabi_fcmpgt>
1a00c538:	2800      	cmp	r0, #0
1a00c53a:	d060      	beq.n	1a00c5fe <inv_auto_calibrate+0x4be>
1a00c53c:	4638      	mov	r0, r7
1a00c53e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
1a00c540:	f008 f818 	bl	1a014574 <__aeabi_fcmplt>
1a00c544:	2800      	cmp	r0, #0
1a00c546:	d05a      	beq.n	1a00c5fe <inv_auto_calibrate+0x4be>
1a00c548:	686a      	ldr	r2, [r5, #4]
1a00c54a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a00c54c:	429a      	cmp	r2, r3
1a00c54e:	f2c0 8178 	blt.w	1a00c842 <inv_auto_calibrate+0x702>
1a00c552:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
1a00c556:	f007 f9fb 	bl	1a013950 <__aeabi_f2d>
1a00c55a:	a347      	add	r3, pc, #284	; (adr r3, 1a00c678 <inv_auto_calibrate+0x538>)
1a00c55c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00c560:	f007 fcda 	bl	1a013f18 <__aeabi_dcmpgt>
1a00c564:	2800      	cmp	r0, #0
1a00c566:	f040 8179 	bne.w	1a00c85c <inv_auto_calibrate+0x71c>
1a00c56a:	f8d9 4014 	ldr.w	r4, [r9, #20]
1a00c56e:	f8d9 6018 	ldr.w	r6, [r9, #24]
1a00c572:	f8d9 501c 	ldr.w	r5, [r9, #28]
1a00c576:	f8c9 40b4 	str.w	r4, [r9, #180]	; 0xb4
1a00c57a:	f8c9 60b8 	str.w	r6, [r9, #184]	; 0xb8
1a00c57e:	f8c9 50bc 	str.w	r5, [r9, #188]	; 0xbc
1a00c582:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 1a00c680 <inv_auto_calibrate+0x540>
1a00c586:	46a2      	mov	sl, r4
1a00c588:	46c8      	mov	r8, r9
1a00c58a:	f04f 0b03 	mov.w	fp, #3
1a00c58e:	4651      	mov	r1, sl
1a00c590:	f8d8 0020 	ldr.w	r0, [r8, #32]
1a00c594:	f007 ffee 	bl	1a014574 <__aeabi_fcmplt>
1a00c598:	4651      	mov	r1, sl
1a00c59a:	b108      	cbz	r0, 1a00c5a0 <inv_auto_calibrate+0x460>
1a00c59c:	f8c8 a020 	str.w	sl, [r8, #32]
1a00c5a0:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
1a00c5a4:	f008 f804 	bl	1a0145b0 <__aeabi_fcmpgt>
1a00c5a8:	f10b 3bff 	add.w	fp, fp, #4294967295
1a00c5ac:	b108      	cbz	r0, 1a00c5b2 <inv_auto_calibrate+0x472>
1a00c5ae:	f8c8 a02c 	str.w	sl, [r8, #44]	; 0x2c
1a00c5b2:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
1a00c5b6:	f108 0804 	add.w	r8, r8, #4
1a00c5ba:	d075      	beq.n	1a00c6a8 <inv_auto_calibrate+0x568>
1a00c5bc:	f8d8 a0b4 	ldr.w	sl, [r8, #180]	; 0xb4
1a00c5c0:	e7e5      	b.n	1a00c58e <inv_auto_calibrate+0x44e>
1a00c5c2:	f002 fc67 	bl	1a00ee94 <inv_fast_nomot_parameter_3rd>
1a00c5c6:	f007 fdf9 	bl	1a0141bc <__aeabi_l2f>
1a00c5ca:	4931      	ldr	r1, [pc, #196]	; (1a00c690 <inv_auto_calibrate+0x550>)
1a00c5cc:	f007 fee8 	bl	1a0143a0 <__aeabi_fdiv>
1a00c5d0:	f8c9 0010 	str.w	r0, [r9, #16]
1a00c5d4:	e798      	b.n	1a00c508 <inv_auto_calibrate+0x3c8>
1a00c5d6:	4b2f      	ldr	r3, [pc, #188]	; (1a00c694 <inv_auto_calibrate+0x554>)
1a00c5d8:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
1a00c5dc:	4b2e      	ldr	r3, [pc, #184]	; (1a00c698 <inv_auto_calibrate+0x558>)
1a00c5de:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
1a00c5e2:	2332      	movs	r3, #50	; 0x32
1a00c5e4:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
1a00c5e8:	e781      	b.n	1a00c4ee <inv_auto_calibrate+0x3ae>
1a00c5ea:	4b2c      	ldr	r3, [pc, #176]	; (1a00c69c <inv_auto_calibrate+0x55c>)
1a00c5ec:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
1a00c5f0:	4b2b      	ldr	r3, [pc, #172]	; (1a00c6a0 <inv_auto_calibrate+0x560>)
1a00c5f2:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
1a00c5f6:	2364      	movs	r3, #100	; 0x64
1a00c5f8:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
1a00c5fc:	e777      	b.n	1a00c4ee <inv_auto_calibrate+0x3ae>
1a00c5fe:	696c      	ldr	r4, [r5, #20]
1a00c600:	69ae      	ldr	r6, [r5, #24]
1a00c602:	69ed      	ldr	r5, [r5, #28]
1a00c604:	4f1e      	ldr	r7, [pc, #120]	; (1a00c680 <inv_auto_calibrate+0x540>)
1a00c606:	f04f 0803 	mov.w	r8, #3
1a00c60a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
1a00c60e:	6979      	ldr	r1, [r7, #20]
1a00c610:	f007 fd08 	bl	1a014024 <__aeabi_fsub>
1a00c614:	f108 38ff 	add.w	r8, r8, #4294967295
1a00c618:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a00c61c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
1a00c620:	3704      	adds	r7, #4
1a00c622:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
1a00c626:	d1f0      	bne.n	1a00c60a <inv_auto_calibrate+0x4ca>
1a00c628:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
1a00c62c:	f8d9 00a4 	ldr.w	r0, [r9, #164]	; 0xa4
1a00c630:	f007 fcfa 	bl	1a014028 <__addsf3>
1a00c634:	f8d9 10ac 	ldr.w	r1, [r9, #172]	; 0xac
1a00c638:	f007 fcf6 	bl	1a014028 <__addsf3>
1a00c63c:	4641      	mov	r1, r8
1a00c63e:	f8c9 00b0 	str.w	r0, [r9, #176]	; 0xb0
1a00c642:	22e8      	movs	r2, #232	; 0xe8
1a00c644:	4817      	ldr	r0, [pc, #92]	; (1a00c6a4 <inv_auto_calibrate+0x564>)
1a00c646:	f8c9 4098 	str.w	r4, [r9, #152]	; 0x98
1a00c64a:	f8c9 609c 	str.w	r6, [r9, #156]	; 0x9c
1a00c64e:	f8c9 50a0 	str.w	r5, [r9, #160]	; 0xa0
1a00c652:	f008 fb41 	bl	1a014cd8 <memset>
1a00c656:	e5a0      	b.n	1a00c19a <inv_auto_calibrate+0x5a>
1a00c658:	2300      	movs	r3, #0
1a00c65a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
1a00c65e:	e5bd      	b.n	1a00c1dc <inv_auto_calibrate+0x9c>
1a00c660:	f103 0064 	add.w	r0, r3, #100	; 0x64
1a00c664:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
1a00c668:	f7fa fce6 	bl	1a007038 <inv_set_accel_bias_mask>
1a00c66c:	2001      	movs	r0, #1
1a00c66e:	f7fc fbe3 	bl	1a008e38 <inv_set_accel_bias_found>
1a00c672:	e58c      	b.n	1a00c18e <inv_auto_calibrate+0x4e>
1a00c674:	f3af 8000 	nop.w
1a00c678:	9999999a 	.word	0x9999999a
1a00c67c:	3fa99999 	.word	0x3fa99999
1a00c680:	10086be8 	.word	0x10086be8
1a00c684:	44bb8000 	.word	0x44bb8000
1a00c688:	10086e98 	.word	0x10086e98
1a00c68c:	47c35000 	.word	0x47c35000
1a00c690:	49742400 	.word	0x49742400
1a00c694:	42700000 	.word	0x42700000
1a00c698:	3fb33333 	.word	0x3fb33333
1a00c69c:	43960000 	.word	0x43960000
1a00c6a0:	3f99999a 	.word	0x3f99999a
1a00c6a4:	10086db0 	.word	0x10086db0
1a00c6a8:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
1a00c6ac:	f8d9 0020 	ldr.w	r0, [r9, #32]
1a00c6b0:	f007 fcb8 	bl	1a014024 <__aeabi_fsub>
1a00c6b4:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
1a00c6b8:	f8c9 00cc 	str.w	r0, [r9, #204]	; 0xcc
1a00c6bc:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
1a00c6c0:	f007 fcb0 	bl	1a014024 <__aeabi_fsub>
1a00c6c4:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
1a00c6c8:	f8c9 00d0 	str.w	r0, [r9, #208]	; 0xd0
1a00c6cc:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
1a00c6d0:	f007 fca8 	bl	1a014024 <__aeabi_fsub>
1a00c6d4:	e9d9 2314 	ldrd	r2, r3, [r9, #80]	; 0x50
1a00c6d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
1a00c6dc:	46d8      	mov	r8, fp
1a00c6de:	f8d9 a03c 	ldr.w	sl, [r9, #60]	; 0x3c
1a00c6e2:	f8c9 00d4 	str.w	r0, [r9, #212]	; 0xd4
1a00c6e6:	f889 b424 	strb.w	fp, [r9, #1060]	; 0x424
1a00c6ea:	f8c9 b428 	str.w	fp, [r9, #1064]	; 0x428
1a00c6ee:	f8cd 8018 	str.w	r8, [sp, #24]
1a00c6f2:	f8cd 800c 	str.w	r8, [sp, #12]
1a00c6f6:	eb09 038b 	add.w	r3, r9, fp, lsl #2
1a00c6fa:	4651      	mov	r1, sl
1a00c6fc:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
1a00c700:	f007 ff4c 	bl	1a01459c <__aeabi_fcmpge>
1a00c704:	2200      	movs	r2, #0
1a00c706:	4b66      	ldr	r3, [pc, #408]	; (1a00c8a0 <inv_auto_calibrate+0x760>)
1a00c708:	b1c0      	cbz	r0, 1a00c73c <inv_auto_calibrate+0x5fc>
1a00c70a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00c70e:	f006 ffbf 	bl	1a013690 <__aeabi_dsub>
1a00c712:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a00c716:	4619      	mov	r1, r3
1a00c718:	a359      	add	r3, pc, #356	; (adr r3, 1a00c880 <inv_auto_calibrate+0x740>)
1a00c71a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00c71e:	f007 fbdd 	bl	1a013edc <__aeabi_dcmplt>
1a00c722:	9b03      	ldr	r3, [sp, #12]
1a00c724:	f04f 0c01 	mov.w	ip, #1
1a00c728:	1c5a      	adds	r2, r3, #1
1a00c72a:	fa0c f30b 	lsl.w	r3, ip, fp
1a00c72e:	b128      	cbz	r0, 1a00c73c <inv_auto_calibrate+0x5fc>
1a00c730:	9906      	ldr	r1, [sp, #24]
1a00c732:	b2d2      	uxtb	r2, r2
1a00c734:	4319      	orrs	r1, r3
1a00c736:	9203      	str	r2, [sp, #12]
1a00c738:	9106      	str	r1, [sp, #24]
1a00c73a:	4690      	mov	r8, r2
1a00c73c:	f10b 0b01 	add.w	fp, fp, #1
1a00c740:	f1bb 0f03 	cmp.w	fp, #3
1a00c744:	d1d7      	bne.n	1a00c6f6 <inv_auto_calibrate+0x5b6>
1a00c746:	9a06      	ldr	r2, [sp, #24]
1a00c748:	9b03      	ldr	r3, [sp, #12]
1a00c74a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 1a00c8a8 <inv_auto_calibrate+0x768>
1a00c74e:	f889 8424 	strb.w	r8, [r9, #1060]	; 0x424
1a00c752:	f8c9 2428 	str.w	r2, [r9, #1064]	; 0x428
1a00c756:	2b00      	cmp	r3, #0
1a00c758:	d047      	beq.n	1a00c7ea <inv_auto_calibrate+0x6aa>
1a00c75a:	f50a 73d4 	add.w	r3, sl, #424	; 0x1a8
1a00c75e:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00c762:	f007 fbe3 	bl	1a013f2c <__aeabi_d2iz>
1a00c766:	f50a 73d8 	add.w	r3, sl, #432	; 0x1b0
1a00c76a:	f8ca 0064 	str.w	r0, [sl, #100]	; 0x64
1a00c76e:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00c772:	f007 fbdb 	bl	1a013f2c <__aeabi_d2iz>
1a00c776:	f50a 73dc 	add.w	r3, sl, #440	; 0x1b8
1a00c77a:	f8ca 0068 	str.w	r0, [sl, #104]	; 0x68
1a00c77e:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00c782:	f007 fbd3 	bl	1a013f2c <__aeabi_d2iz>
1a00c786:	f8da 3008 	ldr.w	r3, [sl, #8]
1a00c78a:	f8ca 006c 	str.w	r0, [sl, #108]	; 0x6c
1a00c78e:	2200      	movs	r2, #0
1a00c790:	2b03      	cmp	r3, #3
1a00c792:	bfd8      	it	le
1a00c794:	9903      	ldrle	r1, [sp, #12]
1a00c796:	f8ca 242c 	str.w	r2, [sl, #1068]	; 0x42c
1a00c79a:	9a03      	ldr	r2, [sp, #12]
1a00c79c:	bfd8      	it	le
1a00c79e:	f8ca 1008 	strle.w	r1, [sl, #8]
1a00c7a2:	2a03      	cmp	r2, #3
1a00c7a4:	d121      	bne.n	1a00c7ea <inv_auto_calibrate+0x6aa>
1a00c7a6:	f8d9 000c 	ldr.w	r0, [r9, #12]
1a00c7aa:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1a00c8a8 <inv_auto_calibrate+0x768>
1a00c7ae:	f007 f8cf 	bl	1a013950 <__aeabi_f2d>
1a00c7b2:	a335      	add	r3, pc, #212	; (adr r3, 1a00c888 <inv_auto_calibrate+0x748>)
1a00c7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00c7b8:	f007 fb90 	bl	1a013edc <__aeabi_dcmplt>
1a00c7bc:	b1a8      	cbz	r0, 1a00c7ea <inv_auto_calibrate+0x6aa>
1a00c7be:	2200      	movs	r2, #0
1a00c7c0:	4b37      	ldr	r3, [pc, #220]	; (1a00c8a0 <inv_auto_calibrate+0x760>)
1a00c7c2:	e9d8 0114 	ldrd	r0, r1, [r8, #80]	; 0x50
1a00c7c6:	f006 ff63 	bl	1a013690 <__aeabi_dsub>
1a00c7ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a00c7ce:	4619      	mov	r1, r3
1a00c7d0:	a32b      	add	r3, pc, #172	; (adr r3, 1a00c880 <inv_auto_calibrate+0x740>)
1a00c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00c7d6:	f007 fb81 	bl	1a013edc <__aeabi_dcmplt>
1a00c7da:	b130      	cbz	r0, 1a00c7ea <inv_auto_calibrate+0x6aa>
1a00c7dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00c7e0:	2b03      	cmp	r3, #3
1a00c7e2:	d102      	bne.n	1a00c7ea <inv_auto_calibrate+0x6aa>
1a00c7e4:	2304      	movs	r3, #4
1a00c7e6:	f8c8 3008 	str.w	r3, [r8, #8]
1a00c7ea:	4638      	mov	r0, r7
1a00c7ec:	492d      	ldr	r1, [pc, #180]	; (1a00c8a4 <inv_auto_calibrate+0x764>)
1a00c7ee:	f007 fec1 	bl	1a014574 <__aeabi_fcmplt>
1a00c7f2:	2800      	cmp	r0, #0
1a00c7f4:	f43f af06 	beq.w	1a00c604 <inv_auto_calibrate+0x4c4>
1a00c7f8:	f8d9 000c 	ldr.w	r0, [r9, #12]
1a00c7fc:	4f2a      	ldr	r7, [pc, #168]	; (1a00c8a8 <inv_auto_calibrate+0x768>)
1a00c7fe:	f007 f8a7 	bl	1a013950 <__aeabi_f2d>
1a00c802:	a323      	add	r3, pc, #140	; (adr r3, 1a00c890 <inv_auto_calibrate+0x750>)
1a00c804:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00c808:	f007 fb68 	bl	1a013edc <__aeabi_dcmplt>
1a00c80c:	2800      	cmp	r0, #0
1a00c80e:	f43f aef9 	beq.w	1a00c604 <inv_auto_calibrate+0x4c4>
1a00c812:	2200      	movs	r2, #0
1a00c814:	4b22      	ldr	r3, [pc, #136]	; (1a00c8a0 <inv_auto_calibrate+0x760>)
1a00c816:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
1a00c81a:	f006 ff39 	bl	1a013690 <__aeabi_dsub>
1a00c81e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a00c822:	4619      	mov	r1, r3
1a00c824:	a31c      	add	r3, pc, #112	; (adr r3, 1a00c898 <inv_auto_calibrate+0x758>)
1a00c826:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00c82a:	f007 fb57 	bl	1a013edc <__aeabi_dcmplt>
1a00c82e:	2800      	cmp	r0, #0
1a00c830:	f43f aee8 	beq.w	1a00c604 <inv_auto_calibrate+0x4c4>
1a00c834:	68bb      	ldr	r3, [r7, #8]
1a00c836:	2b04      	cmp	r3, #4
1a00c838:	f47f aee4 	bne.w	1a00c604 <inv_auto_calibrate+0x4c4>
1a00c83c:	2305      	movs	r3, #5
1a00c83e:	60bb      	str	r3, [r7, #8]
1a00c840:	e6e0      	b.n	1a00c604 <inv_auto_calibrate+0x4c4>
1a00c842:	f8d5 34a4 	ldr.w	r3, [r5, #1188]	; 0x4a4
1a00c846:	2b01      	cmp	r3, #1
1a00c848:	f47f aca7 	bne.w	1a00c19a <inv_auto_calibrate+0x5a>
1a00c84c:	4630      	mov	r0, r6
1a00c84e:	f7ff fa73 	bl	1a00bd38 <inv_combine_data_calculate_bias.part.1>
1a00c852:	2800      	cmp	r0, #0
1a00c854:	f43f aca1 	beq.w	1a00c19a <inv_auto_calibrate+0x5a>
1a00c858:	692f      	ldr	r7, [r5, #16]
1a00c85a:	e686      	b.n	1a00c56a <inv_auto_calibrate+0x42a>
1a00c85c:	f8d5 34a4 	ldr.w	r3, [r5, #1188]	; 0x4a4
1a00c860:	2b01      	cmp	r3, #1
1a00c862:	f47f ac9a 	bne.w	1a00c19a <inv_auto_calibrate+0x5a>
1a00c866:	4630      	mov	r0, r6
1a00c868:	f7ff fa66 	bl	1a00bd38 <inv_combine_data_calculate_bias.part.1>
1a00c86c:	2800      	cmp	r0, #0
1a00c86e:	f43f ac94 	beq.w	1a00c19a <inv_auto_calibrate+0x5a>
1a00c872:	2300      	movs	r3, #0
1a00c874:	692f      	ldr	r7, [r5, #16]
1a00c876:	606b      	str	r3, [r5, #4]
1a00c878:	e677      	b.n	1a00c56a <inv_auto_calibrate+0x42a>
1a00c87a:	bf00      	nop
1a00c87c:	f3af 8000 	nop.w
1a00c880:	9999999a 	.word	0x9999999a
1a00c884:	3fb99999 	.word	0x3fb99999
1a00c888:	c28f5c29 	.word	0xc28f5c29
1a00c88c:	3fbc28f5 	.word	0x3fbc28f5
1a00c890:	8d4fdf3b 	.word	0x8d4fdf3b
1a00c894:	3f926e97 	.word	0x3f926e97
1a00c898:	b020c49c 	.word	0xb020c49c
1a00c89c:	3f916872 	.word	0x3f916872
1a00c8a0:	3ff00000 	.word	0x3ff00000
1a00c8a4:	437a0000 	.word	0x437a0000
1a00c8a8:	10086be8 	.word	0x10086be8
1a00c8ac:	f3af 8000 	nop.w

1a00c8b0 <inv_init_in_use_auto_calibration>:
1a00c8b0:	b538      	push	{r3, r4, r5, lr}
1a00c8b2:	4c19      	ldr	r4, [pc, #100]	; (1a00c918 <inv_init_in_use_auto_calibration+0x68>)
1a00c8b4:	2100      	movs	r1, #0
1a00c8b6:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
1a00c8ba:	4620      	mov	r0, r4
1a00c8bc:	f008 fa0c 	bl	1a014cd8 <memset>
1a00c8c0:	230a      	movs	r3, #10
1a00c8c2:	6023      	str	r3, [r4, #0]
1a00c8c4:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
1a00c8c8:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
1a00c8cc:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
1a00c8d0:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
1a00c8d4:	231e      	movs	r3, #30
1a00c8d6:	f8c4 348c 	str.w	r3, [r4, #1164]	; 0x48c
1a00c8da:	4b10      	ldr	r3, [pc, #64]	; (1a00c91c <inv_init_in_use_auto_calibration+0x6c>)
1a00c8dc:	4a10      	ldr	r2, [pc, #64]	; (1a00c920 <inv_init_in_use_auto_calibration+0x70>)
1a00c8de:	f8c4 3498 	str.w	r3, [r4, #1176]	; 0x498
1a00c8e2:	4b10      	ldr	r3, [pc, #64]	; (1a00c924 <inv_init_in_use_auto_calibration+0x74>)
1a00c8e4:	4910      	ldr	r1, [pc, #64]	; (1a00c928 <inv_init_in_use_auto_calibration+0x78>)
1a00c8e6:	62e2      	str	r2, [r4, #44]	; 0x2c
1a00c8e8:	6322      	str	r2, [r4, #48]	; 0x30
1a00c8ea:	6362      	str	r2, [r4, #52]	; 0x34
1a00c8ec:	f8c4 3494 	str.w	r3, [r4, #1172]	; 0x494
1a00c8f0:	2214      	movs	r2, #20
1a00c8f2:	4b0e      	ldr	r3, [pc, #56]	; (1a00c92c <inv_init_in_use_auto_calibration+0x7c>)
1a00c8f4:	f8c4 2488 	str.w	r2, [r4, #1160]	; 0x488
1a00c8f8:	2019      	movs	r0, #25
1a00c8fa:	2201      	movs	r2, #1
1a00c8fc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
1a00c900:	6221      	str	r1, [r4, #32]
1a00c902:	6725      	str	r5, [r4, #112]	; 0x70
1a00c904:	6261      	str	r1, [r4, #36]	; 0x24
1a00c906:	62a1      	str	r1, [r4, #40]	; 0x28
1a00c908:	f8c4 24a4 	str.w	r2, [r4, #1188]	; 0x4a4
1a00c90c:	f8c4 349c 	str.w	r3, [r4, #1180]	; 0x49c
1a00c910:	f002 feb6 	bl	1a00f680 <inv_set_default_number_of_samples>
1a00c914:	2000      	movs	r0, #0
1a00c916:	bd38      	pop	{r3, r4, r5, pc}
1a00c918:	10086be8 	.word	0x10086be8
1a00c91c:	3ecccccd 	.word	0x3ecccccd
1a00c920:	461c4000 	.word	0x461c4000
1a00c924:	3f4ccccd 	.word	0x3f4ccccd
1a00c928:	c61c4000 	.word	0xc61c4000
1a00c92c:	3f333333 	.word	0x3f333333

1a00c930 <inv_enable_in_use_auto_calibration>:
1a00c930:	b508      	push	{r3, lr}
1a00c932:	f7ff ffbd 	bl	1a00c8b0 <inv_init_in_use_auto_calibration>
1a00c936:	b100      	cbz	r0, 1a00c93a <inv_enable_in_use_auto_calibration+0xa>
1a00c938:	bd08      	pop	{r3, pc}
1a00c93a:	4802      	ldr	r0, [pc, #8]	; (1a00c944 <inv_enable_in_use_auto_calibration+0x14>)
1a00c93c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a00c940:	f7fc bb56 	b.w	1a008ff0 <inv_register_mpl_start_notification>
1a00c944:	1a00bcdd 	.word	0x1a00bcdd

1a00c948 <inv_start_vector_compass_cal>:
1a00c948:	4802      	ldr	r0, [pc, #8]	; (1a00c954 <inv_start_vector_compass_cal+0xc>)
1a00c94a:	f44f 71c8 	mov.w	r1, #400	; 0x190
1a00c94e:	2204      	movs	r2, #4
1a00c950:	f7fa bd7a 	b.w	1a007448 <inv_register_data_cb>
1a00c954:	1a00eb21 	.word	0x1a00eb21

1a00c958 <inv_check_peaks.part.0.constprop.4>:
1a00c958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00c95c:	4e76      	ldr	r6, [pc, #472]	; (1a00cb38 <inv_check_peaks.part.0.constprop.4+0x1e0>)
1a00c95e:	f9b6 30c2 	ldrsh.w	r3, [r6, #194]	; 0xc2
1a00c962:	f9b6 a0bc 	ldrsh.w	sl, [r6, #188]	; 0xbc
1a00c966:	b087      	sub	sp, #28
1a00c968:	4604      	mov	r4, r0
1a00c96a:	ebc3 000a 	rsb	r0, r3, sl
1a00c96e:	460d      	mov	r5, r1
1a00c970:	f006 ffdc 	bl	1a01392c <__aeabi_i2d>
1a00c974:	4622      	mov	r2, r4
1a00c976:	462b      	mov	r3, r5
1a00c978:	e9cd 0100 	strd	r0, r1, [sp]
1a00c97c:	f007 faae 	bl	1a013edc <__aeabi_dcmplt>
1a00c980:	f9b6 20ca 	ldrsh.w	r2, [r6, #202]	; 0xca
1a00c984:	f9b6 30d0 	ldrsh.w	r3, [r6, #208]	; 0xd0
1a00c988:	f110 0b00 	adds.w	fp, r0, #0
1a00c98c:	ebc3 0002 	rsb	r0, r3, r2
1a00c990:	bf18      	it	ne
1a00c992:	f04f 0b01 	movne.w	fp, #1
1a00c996:	f006 ffc9 	bl	1a01392c <__aeabi_i2d>
1a00c99a:	4680      	mov	r8, r0
1a00c99c:	4689      	mov	r9, r1
1a00c99e:	4620      	mov	r0, r4
1a00c9a0:	4629      	mov	r1, r5
1a00c9a2:	4642      	mov	r2, r8
1a00c9a4:	464b      	mov	r3, r9
1a00c9a6:	f007 fab7 	bl	1a013f18 <__aeabi_dcmpgt>
1a00c9aa:	b108      	cbz	r0, 1a00c9b0 <inv_check_peaks.part.0.constprop.4+0x58>
1a00c9ac:	f10b 0b01 	add.w	fp, fp, #1
1a00c9b0:	f9b6 30de 	ldrsh.w	r3, [r6, #222]	; 0xde
1a00c9b4:	f9b6 00d8 	ldrsh.w	r0, [r6, #216]	; 0xd8
1a00c9b8:	1ac0      	subs	r0, r0, r3
1a00c9ba:	f006 ffb7 	bl	1a01392c <__aeabi_i2d>
1a00c9be:	4606      	mov	r6, r0
1a00c9c0:	460f      	mov	r7, r1
1a00c9c2:	4620      	mov	r0, r4
1a00c9c4:	4629      	mov	r1, r5
1a00c9c6:	4632      	mov	r2, r6
1a00c9c8:	463b      	mov	r3, r7
1a00c9ca:	f007 faa5 	bl	1a013f18 <__aeabi_dcmpgt>
1a00c9ce:	b108      	cbz	r0, 1a00c9d4 <inv_check_peaks.part.0.constprop.4+0x7c>
1a00c9d0:	f10b 0b01 	add.w	fp, fp, #1
1a00c9d4:	f1bb 0f01 	cmp.w	fp, #1
1a00c9d8:	dd03      	ble.n	1a00c9e2 <inv_check_peaks.part.0.constprop.4+0x8a>
1a00c9da:	2001      	movs	r0, #1
1a00c9dc:	b007      	add	sp, #28
1a00c9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00c9e2:	2200      	movs	r2, #0
1a00c9e4:	4620      	mov	r0, r4
1a00c9e6:	4629      	mov	r1, r5
1a00c9e8:	4b54      	ldr	r3, [pc, #336]	; (1a00cb3c <inv_check_peaks.part.0.constprop.4+0x1e4>)
1a00c9ea:	f007 f805 	bl	1a0139f8 <__aeabi_dmul>
1a00c9ee:	4604      	mov	r4, r0
1a00c9f0:	460d      	mov	r5, r1
1a00c9f2:	4622      	mov	r2, r4
1a00c9f4:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00c9f8:	462b      	mov	r3, r5
1a00c9fa:	f007 fa8d 	bl	1a013f18 <__aeabi_dcmpgt>
1a00c9fe:	4622      	mov	r2, r4
1a00ca00:	f110 0b00 	adds.w	fp, r0, #0
1a00ca04:	462b      	mov	r3, r5
1a00ca06:	4640      	mov	r0, r8
1a00ca08:	4649      	mov	r1, r9
1a00ca0a:	bf18      	it	ne
1a00ca0c:	f04f 0b01 	movne.w	fp, #1
1a00ca10:	f007 fa82 	bl	1a013f18 <__aeabi_dcmpgt>
1a00ca14:	b108      	cbz	r0, 1a00ca1a <inv_check_peaks.part.0.constprop.4+0xc2>
1a00ca16:	f10b 0b01 	add.w	fp, fp, #1
1a00ca1a:	4630      	mov	r0, r6
1a00ca1c:	4639      	mov	r1, r7
1a00ca1e:	4622      	mov	r2, r4
1a00ca20:	462b      	mov	r3, r5
1a00ca22:	f007 fa79 	bl	1a013f18 <__aeabi_dcmpgt>
1a00ca26:	2800      	cmp	r0, #0
1a00ca28:	d178      	bne.n	1a00cb1c <inv_check_peaks.part.0.constprop.4+0x1c4>
1a00ca2a:	f1bb 0f00 	cmp.w	fp, #0
1a00ca2e:	d175      	bne.n	1a00cb1c <inv_check_peaks.part.0.constprop.4+0x1c4>
1a00ca30:	4b43      	ldr	r3, [pc, #268]	; (1a00cb40 <inv_check_peaks.part.0.constprop.4+0x1e8>)
1a00ca32:	f8df 8104 	ldr.w	r8, [pc, #260]	; 1a00cb38 <inv_check_peaks.part.0.constprop.4+0x1e0>
1a00ca36:	f8cd b014 	str.w	fp, [sp, #20]
1a00ca3a:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	; 0xd0
1a00ca3e:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
1a00ca42:	e9cd 0100 	strd	r0, r1, [sp]
1a00ca46:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
1a00ca4a:	f108 0924 	add.w	r9, r8, #36	; 0x24
1a00ca4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a00ca52:	46ab      	mov	fp, r5
1a00ca54:	4650      	mov	r0, sl
1a00ca56:	46a2      	mov	sl, r4
1a00ca58:	f006 ff68 	bl	1a01392c <__aeabi_i2d>
1a00ca5c:	4652      	mov	r2, sl
1a00ca5e:	465b      	mov	r3, fp
1a00ca60:	f006 fe16 	bl	1a013690 <__aeabi_dsub>
1a00ca64:	4604      	mov	r4, r0
1a00ca66:	f9b8 00c2 	ldrsh.w	r0, [r8, #194]	; 0xc2
1a00ca6a:	460d      	mov	r5, r1
1a00ca6c:	f006 ff5e 	bl	1a01392c <__aeabi_i2d>
1a00ca70:	4652      	mov	r2, sl
1a00ca72:	465b      	mov	r3, fp
1a00ca74:	f006 fe0c 	bl	1a013690 <__aeabi_dsub>
1a00ca78:	4602      	mov	r2, r0
1a00ca7a:	460b      	mov	r3, r1
1a00ca7c:	4620      	mov	r0, r4
1a00ca7e:	4629      	mov	r1, r5
1a00ca80:	f006 ffba 	bl	1a0139f8 <__aeabi_dmul>
1a00ca84:	4606      	mov	r6, r0
1a00ca86:	f9b8 00be 	ldrsh.w	r0, [r8, #190]	; 0xbe
1a00ca8a:	460f      	mov	r7, r1
1a00ca8c:	f006 ff4e 	bl	1a01392c <__aeabi_i2d>
1a00ca90:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00ca94:	f006 fdfc 	bl	1a013690 <__aeabi_dsub>
1a00ca98:	4604      	mov	r4, r0
1a00ca9a:	f9b8 00c4 	ldrsh.w	r0, [r8, #196]	; 0xc4
1a00ca9e:	460d      	mov	r5, r1
1a00caa0:	f006 ff44 	bl	1a01392c <__aeabi_i2d>
1a00caa4:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00caa8:	f006 fdf2 	bl	1a013690 <__aeabi_dsub>
1a00caac:	4602      	mov	r2, r0
1a00caae:	460b      	mov	r3, r1
1a00cab0:	4620      	mov	r0, r4
1a00cab2:	4629      	mov	r1, r5
1a00cab4:	f006 ffa0 	bl	1a0139f8 <__aeabi_dmul>
1a00cab8:	4602      	mov	r2, r0
1a00caba:	460b      	mov	r3, r1
1a00cabc:	4630      	mov	r0, r6
1a00cabe:	4639      	mov	r1, r7
1a00cac0:	f006 fde8 	bl	1a013694 <__adddf3>
1a00cac4:	4606      	mov	r6, r0
1a00cac6:	f9b8 00c0 	ldrsh.w	r0, [r8, #192]	; 0xc0
1a00caca:	460f      	mov	r7, r1
1a00cacc:	f006 ff2e 	bl	1a01392c <__aeabi_i2d>
1a00cad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00cad4:	f006 fddc 	bl	1a013690 <__aeabi_dsub>
1a00cad8:	4604      	mov	r4, r0
1a00cada:	f9b8 00c6 	ldrsh.w	r0, [r8, #198]	; 0xc6
1a00cade:	460d      	mov	r5, r1
1a00cae0:	f006 ff24 	bl	1a01392c <__aeabi_i2d>
1a00cae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00cae8:	f006 fdd2 	bl	1a013690 <__aeabi_dsub>
1a00caec:	4602      	mov	r2, r0
1a00caee:	460b      	mov	r3, r1
1a00caf0:	4620      	mov	r0, r4
1a00caf2:	4629      	mov	r1, r5
1a00caf4:	f006 ff80 	bl	1a0139f8 <__aeabi_dmul>
1a00caf8:	4602      	mov	r2, r0
1a00cafa:	460b      	mov	r3, r1
1a00cafc:	4630      	mov	r0, r6
1a00cafe:	4639      	mov	r1, r7
1a00cb00:	f006 fdc8 	bl	1a013694 <__adddf3>
1a00cb04:	2200      	movs	r2, #0
1a00cb06:	2300      	movs	r3, #0
1a00cb08:	f108 080c 	add.w	r8, r8, #12
1a00cb0c:	f007 f9e6 	bl	1a013edc <__aeabi_dcmplt>
1a00cb10:	b970      	cbnz	r0, 1a00cb30 <inv_check_peaks.part.0.constprop.4+0x1d8>
1a00cb12:	45c8      	cmp	r8, r9
1a00cb14:	d004      	beq.n	1a00cb20 <inv_check_peaks.part.0.constprop.4+0x1c8>
1a00cb16:	f9b8 00bc 	ldrsh.w	r0, [r8, #188]	; 0xbc
1a00cb1a:	e79d      	b.n	1a00ca58 <inv_check_peaks.part.0.constprop.4+0x100>
1a00cb1c:	2002      	movs	r0, #2
1a00cb1e:	e75d      	b.n	1a00c9dc <inv_check_peaks.part.0.constprop.4+0x84>
1a00cb20:	f8dd b014 	ldr.w	fp, [sp, #20]
1a00cb24:	f1bb 0f01 	cmp.w	fp, #1
1a00cb28:	bfcc      	ite	gt
1a00cb2a:	2000      	movgt	r0, #0
1a00cb2c:	2001      	movle	r0, #1
1a00cb2e:	e755      	b.n	1a00c9dc <inv_check_peaks.part.0.constprop.4+0x84>
1a00cb30:	9905      	ldr	r1, [sp, #20]
1a00cb32:	3101      	adds	r1, #1
1a00cb34:	9105      	str	r1, [sp, #20]
1a00cb36:	e7ec      	b.n	1a00cb12 <inv_check_peaks.part.0.constprop.4+0x1ba>
1a00cb38:	10088ad8 	.word	0x10088ad8
1a00cb3c:	40040000 	.word	0x40040000
1a00cb40:	10088908 	.word	0x10088908

1a00cb44 <inv_cheap_rand>:
1a00cb44:	4a0c      	ldr	r2, [pc, #48]	; (1a00cb78 <inv_cheap_rand+0x34>)
1a00cb46:	490d      	ldr	r1, [pc, #52]	; (1a00cb7c <inv_cheap_rand+0x38>)
1a00cb48:	6810      	ldr	r0, [r2, #0]
1a00cb4a:	b470      	push	{r4, r5, r6}
1a00cb4c:	4d0c      	ldr	r5, [pc, #48]	; (1a00cb80 <inv_cheap_rand+0x3c>)
1a00cb4e:	680c      	ldr	r4, [r1, #0]
1a00cb50:	682e      	ldr	r6, [r5, #0]
1a00cb52:	01c3      	lsls	r3, r0, #7
1a00cb54:	ea83 03d0 	eor.w	r3, r3, r0, lsr #3
1a00cb58:	ea83 1306 	eor.w	r3, r3, r6, lsl #4
1a00cb5c:	ea83 04c4 	eor.w	r4, r3, r4, lsl #3
1a00cb60:	0340      	lsls	r0, r0, #13
1a00cb62:	ea80 1054 	eor.w	r0, r0, r4, lsr #5
1a00cb66:	0ade      	lsrs	r6, r3, #11
1a00cb68:	ea86 2040 	eor.w	r0, r6, r0, lsl #9
1a00cb6c:	602b      	str	r3, [r5, #0]
1a00cb6e:	600c      	str	r4, [r1, #0]
1a00cb70:	6010      	str	r0, [r2, #0]
1a00cb72:	bc70      	pop	{r4, r5, r6}
1a00cb74:	4770      	bx	lr
1a00cb76:	bf00      	nop
1a00cb78:	10086074 	.word	0x10086074
1a00cb7c:	1008606c 	.word	0x1008606c
1a00cb80:	10086070 	.word	0x10086070

1a00cb84 <inv_cheap_gaussian>:
1a00cb84:	b570      	push	{r4, r5, r6, lr}
1a00cb86:	4606      	mov	r6, r0
1a00cb88:	f7ff ffdc 	bl	1a00cb44 <inv_cheap_rand>
1a00cb8c:	f007 fafc 	bl	1a014188 <__aeabi_ui2f>
1a00cb90:	4916      	ldr	r1, [pc, #88]	; (1a00cbec <inv_cheap_gaussian+0x68>)
1a00cb92:	f007 fb51 	bl	1a014238 <__aeabi_fmul>
1a00cb96:	f04f 513e 	mov.w	r1, #796917760	; 0x2f800000
1a00cb9a:	f007 fb4d 	bl	1a014238 <__aeabi_fmul>
1a00cb9e:	f008 fba3 	bl	1a0152e8 <cosf>
1a00cba2:	4605      	mov	r5, r0
1a00cba4:	f7ff ffce 	bl	1a00cb44 <inv_cheap_rand>
1a00cba8:	f007 faee 	bl	1a014188 <__aeabi_ui2f>
1a00cbac:	f04f 513e 	mov.w	r1, #796917760	; 0x2f800000
1a00cbb0:	f007 fb42 	bl	1a014238 <__aeabi_fmul>
1a00cbb4:	2100      	movs	r1, #0
1a00cbb6:	4604      	mov	r4, r0
1a00cbb8:	f007 fcd2 	bl	1a014560 <__aeabi_fcmpeq>
1a00cbbc:	b108      	cbz	r0, 1a00cbc2 <inv_cheap_gaussian+0x3e>
1a00cbbe:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
1a00cbc2:	4620      	mov	r0, r4
1a00cbc4:	f006 fec4 	bl	1a013950 <__aeabi_f2d>
1a00cbc8:	f008 fcd6 	bl	1a015578 <log>
1a00cbcc:	2200      	movs	r2, #0
1a00cbce:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
1a00cbd2:	f006 ff11 	bl	1a0139f8 <__aeabi_dmul>
1a00cbd6:	f007 f9d1 	bl	1a013f7c <__aeabi_d2f>
1a00cbda:	f008 fdf5 	bl	1a0157c8 <sqrtf>
1a00cbde:	4631      	mov	r1, r6
1a00cbe0:	f007 fb2a 	bl	1a014238 <__aeabi_fmul>
1a00cbe4:	4629      	mov	r1, r5
1a00cbe6:	f007 fb27 	bl	1a014238 <__aeabi_fmul>
1a00cbea:	bd70      	pop	{r4, r5, r6, pc}
1a00cbec:	40c90fdb 	.word	0x40c90fdb

1a00cbf0 <inv_combine_compass_data>:
1a00cbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00cbf4:	b085      	sub	sp, #20
1a00cbf6:	461c      	mov	r4, r3
1a00cbf8:	9003      	str	r0, [sp, #12]
1a00cbfa:	4610      	mov	r0, r2
1a00cbfc:	468b      	mov	fp, r1
1a00cbfe:	f006 fea7 	bl	1a013950 <__aeabi_f2d>
1a00cc02:	e9cd 0100 	strd	r0, r1, [sp]
1a00cc06:	4620      	mov	r0, r4
1a00cc08:	f006 fea2 	bl	1a013950 <__aeabi_f2d>
1a00cc0c:	9e03      	ldr	r6, [sp, #12]
1a00cc0e:	4604      	mov	r4, r0
1a00cc10:	e9d6 2330 	ldrd	r2, r3, [r6, #192]	; 0xc0
1a00cc14:	460d      	mov	r5, r1
1a00cc16:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00cc1a:	f006 feed 	bl	1a0139f8 <__aeabi_dmul>
1a00cc1e:	e9db 2330 	ldrd	r2, r3, [fp, #192]	; 0xc0
1a00cc22:	4606      	mov	r6, r0
1a00cc24:	460f      	mov	r7, r1
1a00cc26:	4620      	mov	r0, r4
1a00cc28:	4629      	mov	r1, r5
1a00cc2a:	f006 fee5 	bl	1a0139f8 <__aeabi_dmul>
1a00cc2e:	4602      	mov	r2, r0
1a00cc30:	460b      	mov	r3, r1
1a00cc32:	4630      	mov	r0, r6
1a00cc34:	4639      	mov	r1, r7
1a00cc36:	f006 fd2d 	bl	1a013694 <__adddf3>
1a00cc3a:	9e03      	ldr	r6, [sp, #12]
1a00cc3c:	e9c6 0130 	strd	r0, r1, [r6, #192]	; 0xc0
1a00cc40:	46b0      	mov	r8, r6
1a00cc42:	46d9      	mov	r9, fp
1a00cc44:	f04f 0a00 	mov.w	sl, #0
1a00cc48:	e9d8 2300 	ldrd	r2, r3, [r8]
1a00cc4c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00cc50:	f006 fed2 	bl	1a0139f8 <__aeabi_dmul>
1a00cc54:	e9d9 2300 	ldrd	r2, r3, [r9]
1a00cc58:	4606      	mov	r6, r0
1a00cc5a:	460f      	mov	r7, r1
1a00cc5c:	4620      	mov	r0, r4
1a00cc5e:	4629      	mov	r1, r5
1a00cc60:	f006 feca 	bl	1a0139f8 <__aeabi_dmul>
1a00cc64:	4602      	mov	r2, r0
1a00cc66:	460b      	mov	r3, r1
1a00cc68:	4630      	mov	r0, r6
1a00cc6a:	4639      	mov	r1, r7
1a00cc6c:	f006 fd12 	bl	1a013694 <__adddf3>
1a00cc70:	e9d8 2324 	ldrd	r2, r3, [r8, #144]	; 0x90
1a00cc74:	e9c8 0100 	strd	r0, r1, [r8]
1a00cc78:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00cc7c:	f006 febc 	bl	1a0139f8 <__aeabi_dmul>
1a00cc80:	e9d9 2324 	ldrd	r2, r3, [r9, #144]	; 0x90
1a00cc84:	4606      	mov	r6, r0
1a00cc86:	460f      	mov	r7, r1
1a00cc88:	4620      	mov	r0, r4
1a00cc8a:	4629      	mov	r1, r5
1a00cc8c:	f006 feb4 	bl	1a0139f8 <__aeabi_dmul>
1a00cc90:	4602      	mov	r2, r0
1a00cc92:	460b      	mov	r3, r1
1a00cc94:	4630      	mov	r0, r6
1a00cc96:	4639      	mov	r1, r7
1a00cc98:	f006 fcfc 	bl	1a013694 <__adddf3>
1a00cc9c:	f10a 0a01 	add.w	sl, sl, #1
1a00cca0:	f1ba 0f06 	cmp.w	sl, #6
1a00cca4:	e9c8 0124 	strd	r0, r1, [r8, #144]	; 0x90
1a00cca8:	f109 0908 	add.w	r9, r9, #8
1a00ccac:	f108 0808 	add.w	r8, r8, #8
1a00ccb0:	d1ca      	bne.n	1a00cc48 <inv_combine_compass_data+0x58>
1a00ccb2:	9e03      	ldr	r6, [sp, #12]
1a00ccb4:	f10b 0940 	add.w	r9, fp, #64	; 0x40
1a00ccb8:	f106 0a48 	add.w	sl, r6, #72	; 0x48
1a00ccbc:	f04f 0800 	mov.w	r8, #0
1a00ccc0:	e9da 2300 	ldrd	r2, r3, [sl]
1a00ccc4:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00ccc8:	f006 fe96 	bl	1a0139f8 <__aeabi_dmul>
1a00cccc:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
1a00ccd0:	4606      	mov	r6, r0
1a00ccd2:	460f      	mov	r7, r1
1a00ccd4:	4620      	mov	r0, r4
1a00ccd6:	4629      	mov	r1, r5
1a00ccd8:	f006 fe8e 	bl	1a0139f8 <__aeabi_dmul>
1a00ccdc:	4602      	mov	r2, r0
1a00ccde:	460b      	mov	r3, r1
1a00cce0:	4630      	mov	r0, r6
1a00cce2:	4639      	mov	r1, r7
1a00cce4:	f006 fcd6 	bl	1a013694 <__adddf3>
1a00cce8:	f108 0801 	add.w	r8, r8, #1
1a00ccec:	f1b8 0f09 	cmp.w	r8, #9
1a00ccf0:	e8ea 0102 	strd	r0, r1, [sl], #8
1a00ccf4:	d1e4      	bne.n	1a00ccc0 <inv_combine_compass_data+0xd0>
1a00ccf6:	9e03      	ldr	r6, [sp, #12]
1a00ccf8:	f106 0930 	add.w	r9, r6, #48	; 0x30
1a00ccfc:	46ca      	mov	sl, r9
1a00ccfe:	f04f 0800 	mov.w	r8, #0
1a00cd02:	46d9      	mov	r9, fp
1a00cd04:	e9da 2300 	ldrd	r2, r3, [sl]
1a00cd08:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00cd0c:	f006 fe74 	bl	1a0139f8 <__aeabi_dmul>
1a00cd10:	eb09 0308 	add.w	r3, r9, r8
1a00cd14:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
1a00cd18:	4606      	mov	r6, r0
1a00cd1a:	460f      	mov	r7, r1
1a00cd1c:	4620      	mov	r0, r4
1a00cd1e:	4629      	mov	r1, r5
1a00cd20:	f006 fe6a 	bl	1a0139f8 <__aeabi_dmul>
1a00cd24:	4602      	mov	r2, r0
1a00cd26:	460b      	mov	r3, r1
1a00cd28:	4630      	mov	r0, r6
1a00cd2a:	4639      	mov	r1, r7
1a00cd2c:	f006 fcb2 	bl	1a013694 <__adddf3>
1a00cd30:	f108 0808 	add.w	r8, r8, #8
1a00cd34:	f1b8 0f18 	cmp.w	r8, #24
1a00cd38:	e8ea 0102 	strd	r0, r1, [sl], #8
1a00cd3c:	d1e2      	bne.n	1a00cd04 <inv_combine_compass_data+0x114>
1a00cd3e:	b005      	add	sp, #20
1a00cd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a00cd44 <inv_set_terms>:
1a00cd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00cd48:	4682      	mov	sl, r0
1a00cd4a:	b08e      	sub	sp, #56	; 0x38
1a00cd4c:	6808      	ldr	r0, [r1, #0]
1a00cd4e:	460c      	mov	r4, r1
1a00cd50:	f006 fdec 	bl	1a01392c <__aeabi_i2d>
1a00cd54:	4680      	mov	r8, r0
1a00cd56:	6860      	ldr	r0, [r4, #4]
1a00cd58:	4689      	mov	r9, r1
1a00cd5a:	f006 fde7 	bl	1a01392c <__aeabi_i2d>
1a00cd5e:	4606      	mov	r6, r0
1a00cd60:	68a0      	ldr	r0, [r4, #8]
1a00cd62:	460f      	mov	r7, r1
1a00cd64:	f006 fde2 	bl	1a01392c <__aeabi_i2d>
1a00cd68:	2200      	movs	r2, #0
1a00cd6a:	4604      	mov	r4, r0
1a00cd6c:	460d      	mov	r5, r1
1a00cd6e:	4b93      	ldr	r3, [pc, #588]	; (1a00cfbc <inv_set_terms+0x278>)
1a00cd70:	e9da 0130 	ldrd	r0, r1, [sl, #192]	; 0xc0
1a00cd74:	f006 fc8e 	bl	1a013694 <__adddf3>
1a00cd78:	4642      	mov	r2, r8
1a00cd7a:	464b      	mov	r3, r9
1a00cd7c:	e9ca 0130 	strd	r0, r1, [sl, #192]	; 0xc0
1a00cd80:	e9da 010c 	ldrd	r0, r1, [sl, #48]	; 0x30
1a00cd84:	f006 fc86 	bl	1a013694 <__adddf3>
1a00cd88:	4632      	mov	r2, r6
1a00cd8a:	463b      	mov	r3, r7
1a00cd8c:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
1a00cd90:	e9da 010e 	ldrd	r0, r1, [sl, #56]	; 0x38
1a00cd94:	f006 fc7e 	bl	1a013694 <__adddf3>
1a00cd98:	4622      	mov	r2, r4
1a00cd9a:	462b      	mov	r3, r5
1a00cd9c:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
1a00cda0:	e9da 0110 	ldrd	r0, r1, [sl, #64]	; 0x40
1a00cda4:	f006 fc76 	bl	1a013694 <__adddf3>
1a00cda8:	4642      	mov	r2, r8
1a00cdaa:	e9ca 0110 	strd	r0, r1, [sl, #64]	; 0x40
1a00cdae:	464b      	mov	r3, r9
1a00cdb0:	4640      	mov	r0, r8
1a00cdb2:	4649      	mov	r1, r9
1a00cdb4:	f006 fe20 	bl	1a0139f8 <__aeabi_dmul>
1a00cdb8:	4602      	mov	r2, r0
1a00cdba:	460b      	mov	r3, r1
1a00cdbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
1a00cdc0:	e9da 0100 	ldrd	r0, r1, [sl]
1a00cdc4:	f006 fc66 	bl	1a013694 <__adddf3>
1a00cdc8:	4632      	mov	r2, r6
1a00cdca:	e9ca 0100 	strd	r0, r1, [sl]
1a00cdce:	463b      	mov	r3, r7
1a00cdd0:	4640      	mov	r0, r8
1a00cdd2:	4649      	mov	r1, r9
1a00cdd4:	f006 fe10 	bl	1a0139f8 <__aeabi_dmul>
1a00cdd8:	4602      	mov	r2, r0
1a00cdda:	460b      	mov	r3, r1
1a00cddc:	e9cd 0100 	strd	r0, r1, [sp]
1a00cde0:	e9da 0102 	ldrd	r0, r1, [sl, #8]
1a00cde4:	f006 fc56 	bl	1a013694 <__adddf3>
1a00cde8:	4622      	mov	r2, r4
1a00cdea:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a00cdee:	462b      	mov	r3, r5
1a00cdf0:	4640      	mov	r0, r8
1a00cdf2:	4649      	mov	r1, r9
1a00cdf4:	f006 fe00 	bl	1a0139f8 <__aeabi_dmul>
1a00cdf8:	4602      	mov	r2, r0
1a00cdfa:	460b      	mov	r3, r1
1a00cdfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a00ce00:	e9da 0104 	ldrd	r0, r1, [sl, #16]
1a00ce04:	f006 fc46 	bl	1a013694 <__adddf3>
1a00ce08:	4632      	mov	r2, r6
1a00ce0a:	e9ca 0104 	strd	r0, r1, [sl, #16]
1a00ce0e:	463b      	mov	r3, r7
1a00ce10:	4630      	mov	r0, r6
1a00ce12:	4639      	mov	r1, r7
1a00ce14:	f006 fdf0 	bl	1a0139f8 <__aeabi_dmul>
1a00ce18:	4602      	mov	r2, r0
1a00ce1a:	460b      	mov	r3, r1
1a00ce1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a00ce20:	e9da 0106 	ldrd	r0, r1, [sl, #24]
1a00ce24:	f006 fc36 	bl	1a013694 <__adddf3>
1a00ce28:	4622      	mov	r2, r4
1a00ce2a:	e9ca 0106 	strd	r0, r1, [sl, #24]
1a00ce2e:	462b      	mov	r3, r5
1a00ce30:	4630      	mov	r0, r6
1a00ce32:	4639      	mov	r1, r7
1a00ce34:	f006 fde0 	bl	1a0139f8 <__aeabi_dmul>
1a00ce38:	4602      	mov	r2, r0
1a00ce3a:	460b      	mov	r3, r1
1a00ce3c:	e9cd 0108 	strd	r0, r1, [sp, #32]
1a00ce40:	e9da 0108 	ldrd	r0, r1, [sl, #32]
1a00ce44:	f006 fc26 	bl	1a013694 <__adddf3>
1a00ce48:	4622      	mov	r2, r4
1a00ce4a:	e9ca 0108 	strd	r0, r1, [sl, #32]
1a00ce4e:	462b      	mov	r3, r5
1a00ce50:	4620      	mov	r0, r4
1a00ce52:	4629      	mov	r1, r5
1a00ce54:	f006 fdd0 	bl	1a0139f8 <__aeabi_dmul>
1a00ce58:	4602      	mov	r2, r0
1a00ce5a:	460b      	mov	r3, r1
1a00ce5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00ce60:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
1a00ce64:	f006 fc16 	bl	1a013694 <__adddf3>
1a00ce68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00ce6c:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
1a00ce70:	4640      	mov	r0, r8
1a00ce72:	4649      	mov	r1, r9
1a00ce74:	f006 fdc0 	bl	1a0139f8 <__aeabi_dmul>
1a00ce78:	4602      	mov	r2, r0
1a00ce7a:	460b      	mov	r3, r1
1a00ce7c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00ce80:	e9da 0112 	ldrd	r0, r1, [sl, #72]	; 0x48
1a00ce84:	f006 fc06 	bl	1a013694 <__adddf3>
1a00ce88:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00ce8c:	e9ca 0112 	strd	r0, r1, [sl, #72]	; 0x48
1a00ce90:	4630      	mov	r0, r6
1a00ce92:	4639      	mov	r1, r7
1a00ce94:	f006 fdb0 	bl	1a0139f8 <__aeabi_dmul>
1a00ce98:	4602      	mov	r2, r0
1a00ce9a:	460b      	mov	r3, r1
1a00ce9c:	e9da 0114 	ldrd	r0, r1, [sl, #80]	; 0x50
1a00cea0:	f006 fbf8 	bl	1a013694 <__adddf3>
1a00cea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00cea8:	e9ca 0114 	strd	r0, r1, [sl, #80]	; 0x50
1a00ceac:	4620      	mov	r0, r4
1a00ceae:	4629      	mov	r1, r5
1a00ceb0:	f006 fda2 	bl	1a0139f8 <__aeabi_dmul>
1a00ceb4:	4602      	mov	r2, r0
1a00ceb6:	460b      	mov	r3, r1
1a00ceb8:	e9da 0116 	ldrd	r0, r1, [sl, #88]	; 0x58
1a00cebc:	f006 fbea 	bl	1a013694 <__adddf3>
1a00cec0:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00cec4:	e9ca 0116 	strd	r0, r1, [sl, #88]	; 0x58
1a00cec8:	4640      	mov	r0, r8
1a00ceca:	4649      	mov	r1, r9
1a00cecc:	f006 fd94 	bl	1a0139f8 <__aeabi_dmul>
1a00ced0:	4602      	mov	r2, r0
1a00ced2:	460b      	mov	r3, r1
1a00ced4:	e9da 0118 	ldrd	r0, r1, [sl, #96]	; 0x60
1a00ced8:	f006 fbdc 	bl	1a013694 <__adddf3>
1a00cedc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1a00cee0:	e9ca 0118 	strd	r0, r1, [sl, #96]	; 0x60
1a00cee4:	4630      	mov	r0, r6
1a00cee6:	4639      	mov	r1, r7
1a00cee8:	f006 fd86 	bl	1a0139f8 <__aeabi_dmul>
1a00ceec:	4602      	mov	r2, r0
1a00ceee:	460b      	mov	r3, r1
1a00cef0:	e9cd 0100 	strd	r0, r1, [sp]
1a00cef4:	e9da 011a 	ldrd	r0, r1, [sl, #104]	; 0x68
1a00cef8:	f006 fbcc 	bl	1a013694 <__adddf3>
1a00cefc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00cf00:	e9ca 011a 	strd	r0, r1, [sl, #104]	; 0x68
1a00cf04:	4620      	mov	r0, r4
1a00cf06:	4629      	mov	r1, r5
1a00cf08:	f006 fd76 	bl	1a0139f8 <__aeabi_dmul>
1a00cf0c:	4602      	mov	r2, r0
1a00cf0e:	460b      	mov	r3, r1
1a00cf10:	e9da 011c 	ldrd	r0, r1, [sl, #112]	; 0x70
1a00cf14:	f006 fbbe 	bl	1a013694 <__adddf3>
1a00cf18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00cf1c:	e9ca 011c 	strd	r0, r1, [sl, #112]	; 0x70
1a00cf20:	4640      	mov	r0, r8
1a00cf22:	4649      	mov	r1, r9
1a00cf24:	f006 fd68 	bl	1a0139f8 <__aeabi_dmul>
1a00cf28:	4602      	mov	r2, r0
1a00cf2a:	460b      	mov	r3, r1
1a00cf2c:	e9da 011e 	ldrd	r0, r1, [sl, #120]	; 0x78
1a00cf30:	f006 fbb0 	bl	1a013694 <__adddf3>
1a00cf34:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00cf38:	e9ca 011e 	strd	r0, r1, [sl, #120]	; 0x78
1a00cf3c:	4630      	mov	r0, r6
1a00cf3e:	4639      	mov	r1, r7
1a00cf40:	f006 fd5a 	bl	1a0139f8 <__aeabi_dmul>
1a00cf44:	4602      	mov	r2, r0
1a00cf46:	460b      	mov	r3, r1
1a00cf48:	e9da 0120 	ldrd	r0, r1, [sl, #128]	; 0x80
1a00cf4c:	f006 fba2 	bl	1a013694 <__adddf3>
1a00cf50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00cf54:	e9ca 0120 	strd	r0, r1, [sl, #128]	; 0x80
1a00cf58:	4620      	mov	r0, r4
1a00cf5a:	4629      	mov	r1, r5
1a00cf5c:	f006 fd4c 	bl	1a0139f8 <__aeabi_dmul>
1a00cf60:	4602      	mov	r2, r0
1a00cf62:	460b      	mov	r3, r1
1a00cf64:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a00cf68:	e9da 0122 	ldrd	r0, r1, [sl, #136]	; 0x88
1a00cf6c:	f006 fb92 	bl	1a013694 <__adddf3>
1a00cf70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
1a00cf74:	e9ca 0122 	strd	r0, r1, [sl, #136]	; 0x88
1a00cf78:	4640      	mov	r0, r8
1a00cf7a:	4649      	mov	r1, r9
1a00cf7c:	f006 fd3c 	bl	1a0139f8 <__aeabi_dmul>
1a00cf80:	4602      	mov	r2, r0
1a00cf82:	460b      	mov	r3, r1
1a00cf84:	e9da 0124 	ldrd	r0, r1, [sl, #144]	; 0x90
1a00cf88:	f006 fb84 	bl	1a013694 <__adddf3>
1a00cf8c:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00cf90:	e9ca 0124 	strd	r0, r1, [sl, #144]	; 0x90
1a00cf94:	4630      	mov	r0, r6
1a00cf96:	4639      	mov	r1, r7
1a00cf98:	f006 fd2e 	bl	1a0139f8 <__aeabi_dmul>
1a00cf9c:	4602      	mov	r2, r0
1a00cf9e:	460b      	mov	r3, r1
1a00cfa0:	e9da 0126 	ldrd	r0, r1, [sl, #152]	; 0x98
1a00cfa4:	f006 fb76 	bl	1a013694 <__adddf3>
1a00cfa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00cfac:	e9ca 0126 	strd	r0, r1, [sl, #152]	; 0x98
1a00cfb0:	4620      	mov	r0, r4
1a00cfb2:	4629      	mov	r1, r5
1a00cfb4:	f006 fd20 	bl	1a0139f8 <__aeabi_dmul>
1a00cfb8:	e002      	b.n	1a00cfc0 <inv_set_terms+0x27c>
1a00cfba:	bf00      	nop
1a00cfbc:	3ff00000 	.word	0x3ff00000
1a00cfc0:	4602      	mov	r2, r0
1a00cfc2:	460b      	mov	r3, r1
1a00cfc4:	e9da 0128 	ldrd	r0, r1, [sl, #160]	; 0xa0
1a00cfc8:	f006 fb64 	bl	1a013694 <__adddf3>
1a00cfcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00cfd0:	e9ca 0128 	strd	r0, r1, [sl, #160]	; 0xa0
1a00cfd4:	4630      	mov	r0, r6
1a00cfd6:	4639      	mov	r1, r7
1a00cfd8:	f006 fd0e 	bl	1a0139f8 <__aeabi_dmul>
1a00cfdc:	4602      	mov	r2, r0
1a00cfde:	460b      	mov	r3, r1
1a00cfe0:	4630      	mov	r0, r6
1a00cfe2:	4639      	mov	r1, r7
1a00cfe4:	f006 fd08 	bl	1a0139f8 <__aeabi_dmul>
1a00cfe8:	4602      	mov	r2, r0
1a00cfea:	460b      	mov	r3, r1
1a00cfec:	e9da 012a 	ldrd	r0, r1, [sl, #168]	; 0xa8
1a00cff0:	f006 fb50 	bl	1a013694 <__adddf3>
1a00cff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00cff8:	e9ca 012a 	strd	r0, r1, [sl, #168]	; 0xa8
1a00cffc:	4620      	mov	r0, r4
1a00cffe:	4629      	mov	r1, r5
1a00d000:	f006 fcfa 	bl	1a0139f8 <__aeabi_dmul>
1a00d004:	4602      	mov	r2, r0
1a00d006:	460b      	mov	r3, r1
1a00d008:	4620      	mov	r0, r4
1a00d00a:	4629      	mov	r1, r5
1a00d00c:	f006 fcf4 	bl	1a0139f8 <__aeabi_dmul>
1a00d010:	4602      	mov	r2, r0
1a00d012:	460b      	mov	r3, r1
1a00d014:	e9da 012c 	ldrd	r0, r1, [sl, #176]	; 0xb0
1a00d018:	f006 fb3c 	bl	1a013694 <__adddf3>
1a00d01c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1a00d020:	e9ca 012c 	strd	r0, r1, [sl, #176]	; 0xb0
1a00d024:	4620      	mov	r0, r4
1a00d026:	4629      	mov	r1, r5
1a00d028:	f006 fce6 	bl	1a0139f8 <__aeabi_dmul>
1a00d02c:	4602      	mov	r2, r0
1a00d02e:	460b      	mov	r3, r1
1a00d030:	4620      	mov	r0, r4
1a00d032:	4629      	mov	r1, r5
1a00d034:	f006 fce0 	bl	1a0139f8 <__aeabi_dmul>
1a00d038:	4602      	mov	r2, r0
1a00d03a:	460b      	mov	r3, r1
1a00d03c:	e9da 012e 	ldrd	r0, r1, [sl, #184]	; 0xb8
1a00d040:	f006 fb28 	bl	1a013694 <__adddf3>
1a00d044:	e9ca 012e 	strd	r0, r1, [sl, #184]	; 0xb8
1a00d048:	b00e      	add	sp, #56	; 0x38
1a00d04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00d04e:	bf00      	nop

1a00d050 <inv_compute_bias>:
1a00d050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00d054:	e9d0 8930 	ldrd	r8, r9, [r0, #192]	; 0xc0
1a00d058:	e9d0 4500 	ldrd	r4, r5, [r0]
1a00d05c:	b0b3      	sub	sp, #204	; 0xcc
1a00d05e:	4606      	mov	r6, r0
1a00d060:	e9d0 ab0c 	ldrd	sl, fp, [r0, #48]	; 0x30
1a00d064:	462b      	mov	r3, r5
1a00d066:	9231      	str	r2, [sp, #196]	; 0xc4
1a00d068:	460f      	mov	r7, r1
1a00d06a:	4622      	mov	r2, r4
1a00d06c:	4640      	mov	r0, r8
1a00d06e:	4649      	mov	r1, r9
1a00d070:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
1a00d074:	f006 fcc0 	bl	1a0139f8 <__aeabi_dmul>
1a00d078:	4652      	mov	r2, sl
1a00d07a:	4604      	mov	r4, r0
1a00d07c:	460d      	mov	r5, r1
1a00d07e:	465b      	mov	r3, fp
1a00d080:	4650      	mov	r0, sl
1a00d082:	4659      	mov	r1, fp
1a00d084:	f006 fcb8 	bl	1a0139f8 <__aeabi_dmul>
1a00d088:	4602      	mov	r2, r0
1a00d08a:	460b      	mov	r3, r1
1a00d08c:	4620      	mov	r0, r4
1a00d08e:	4629      	mov	r1, r5
1a00d090:	f006 fafe 	bl	1a013690 <__aeabi_dsub>
1a00d094:	e9d6 4506 	ldrd	r4, r5, [r6, #24]
1a00d098:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
1a00d09c:	e9d6 450e 	ldrd	r4, r5, [r6, #56]	; 0x38
1a00d0a0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
1a00d0a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a00d0a8:	4640      	mov	r0, r8
1a00d0aa:	4649      	mov	r1, r9
1a00d0ac:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a00d0b0:	f006 fca2 	bl	1a0139f8 <__aeabi_dmul>
1a00d0b4:	4604      	mov	r4, r0
1a00d0b6:	460d      	mov	r5, r1
1a00d0b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00d0bc:	4602      	mov	r2, r0
1a00d0be:	460b      	mov	r3, r1
1a00d0c0:	f006 fc9a 	bl	1a0139f8 <__aeabi_dmul>
1a00d0c4:	4602      	mov	r2, r0
1a00d0c6:	460b      	mov	r3, r1
1a00d0c8:	4620      	mov	r0, r4
1a00d0ca:	4629      	mov	r1, r5
1a00d0cc:	f006 fae0 	bl	1a013690 <__aeabi_dsub>
1a00d0d0:	e9d6 450a 	ldrd	r4, r5, [r6, #40]	; 0x28
1a00d0d4:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
1a00d0d8:	e9d6 4510 	ldrd	r4, r5, [r6, #64]	; 0x40
1a00d0dc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
1a00d0e0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a00d0e4:	4640      	mov	r0, r8
1a00d0e6:	4649      	mov	r1, r9
1a00d0e8:	e9cd 4504 	strd	r4, r5, [sp, #16]
1a00d0ec:	f006 fc84 	bl	1a0139f8 <__aeabi_dmul>
1a00d0f0:	4604      	mov	r4, r0
1a00d0f2:	460d      	mov	r5, r1
1a00d0f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00d0f8:	4602      	mov	r2, r0
1a00d0fa:	460b      	mov	r3, r1
1a00d0fc:	f006 fc7c 	bl	1a0139f8 <__aeabi_dmul>
1a00d100:	4602      	mov	r2, r0
1a00d102:	460b      	mov	r3, r1
1a00d104:	4620      	mov	r0, r4
1a00d106:	4629      	mov	r1, r5
1a00d108:	f006 fac2 	bl	1a013690 <__aeabi_dsub>
1a00d10c:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
1a00d110:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
1a00d114:	4640      	mov	r0, r8
1a00d116:	4649      	mov	r1, r9
1a00d118:	f006 fc6e 	bl	1a0139f8 <__aeabi_dmul>
1a00d11c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00d120:	4604      	mov	r4, r0
1a00d122:	460d      	mov	r5, r1
1a00d124:	4650      	mov	r0, sl
1a00d126:	4659      	mov	r1, fp
1a00d128:	f006 fc66 	bl	1a0139f8 <__aeabi_dmul>
1a00d12c:	4602      	mov	r2, r0
1a00d12e:	460b      	mov	r3, r1
1a00d130:	4620      	mov	r0, r4
1a00d132:	4629      	mov	r1, r5
1a00d134:	f006 faac 	bl	1a013690 <__aeabi_dsub>
1a00d138:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
1a00d13c:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a00d140:	4640      	mov	r0, r8
1a00d142:	4649      	mov	r1, r9
1a00d144:	f006 fc58 	bl	1a0139f8 <__aeabi_dmul>
1a00d148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00d14c:	4604      	mov	r4, r0
1a00d14e:	460d      	mov	r5, r1
1a00d150:	4650      	mov	r0, sl
1a00d152:	4659      	mov	r1, fp
1a00d154:	f006 fc50 	bl	1a0139f8 <__aeabi_dmul>
1a00d158:	4602      	mov	r2, r0
1a00d15a:	460b      	mov	r3, r1
1a00d15c:	4620      	mov	r0, r4
1a00d15e:	4629      	mov	r1, r5
1a00d160:	f006 fa96 	bl	1a013690 <__aeabi_dsub>
1a00d164:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
1a00d168:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00d16c:	4640      	mov	r0, r8
1a00d16e:	4649      	mov	r1, r9
1a00d170:	f006 fc42 	bl	1a0139f8 <__aeabi_dmul>
1a00d174:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00d178:	4604      	mov	r4, r0
1a00d17a:	460d      	mov	r5, r1
1a00d17c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00d180:	f006 fc3a 	bl	1a0139f8 <__aeabi_dmul>
1a00d184:	4602      	mov	r2, r0
1a00d186:	460b      	mov	r3, r1
1a00d188:	4620      	mov	r0, r4
1a00d18a:	4629      	mov	r1, r5
1a00d18c:	f006 fa80 	bl	1a013690 <__aeabi_dsub>
1a00d190:	e9cd 0108 	strd	r0, r1, [sp, #32]
1a00d194:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1a00d198:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
1a00d19c:	f006 fc2c 	bl	1a0139f8 <__aeabi_dmul>
1a00d1a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
1a00d1a4:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
1a00d1a8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a00d1ac:	f006 fc24 	bl	1a0139f8 <__aeabi_dmul>
1a00d1b0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
1a00d1b4:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
1a00d1b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00d1bc:	f006 fc1c 	bl	1a0139f8 <__aeabi_dmul>
1a00d1c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1a00d1c4:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
1a00d1c8:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a00d1cc:	f006 fc14 	bl	1a0139f8 <__aeabi_dmul>
1a00d1d0:	4604      	mov	r4, r0
1a00d1d2:	460d      	mov	r5, r1
1a00d1d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00d1d8:	4602      	mov	r2, r0
1a00d1da:	460b      	mov	r3, r1
1a00d1dc:	f006 fa5a 	bl	1a013694 <__adddf3>
1a00d1e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
1a00d1e4:	f006 fc08 	bl	1a0139f8 <__aeabi_dmul>
1a00d1e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00d1ec:	f006 fc04 	bl	1a0139f8 <__aeabi_dmul>
1a00d1f0:	4602      	mov	r2, r0
1a00d1f2:	460b      	mov	r3, r1
1a00d1f4:	4620      	mov	r0, r4
1a00d1f6:	4629      	mov	r1, r5
1a00d1f8:	f006 fa4a 	bl	1a013690 <__aeabi_dsub>
1a00d1fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
1a00d200:	4604      	mov	r4, r0
1a00d202:	460d      	mov	r5, r1
1a00d204:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a00d208:	f006 fbf6 	bl	1a0139f8 <__aeabi_dmul>
1a00d20c:	4602      	mov	r2, r0
1a00d20e:	460b      	mov	r3, r1
1a00d210:	4620      	mov	r0, r4
1a00d212:	4629      	mov	r1, r5
1a00d214:	f006 fa3e 	bl	1a013694 <__adddf3>
1a00d218:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00d21c:	4604      	mov	r4, r0
1a00d21e:	460d      	mov	r5, r1
1a00d220:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00d224:	f006 fbe8 	bl	1a0139f8 <__aeabi_dmul>
1a00d228:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00d22c:	f006 fbe4 	bl	1a0139f8 <__aeabi_dmul>
1a00d230:	4602      	mov	r2, r0
1a00d232:	460b      	mov	r3, r1
1a00d234:	4620      	mov	r0, r4
1a00d236:	4629      	mov	r1, r5
1a00d238:	f006 fa2c 	bl	1a013694 <__adddf3>
1a00d23c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
1a00d240:	4604      	mov	r4, r0
1a00d242:	460d      	mov	r5, r1
1a00d244:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
1a00d248:	f006 fbd6 	bl	1a0139f8 <__aeabi_dmul>
1a00d24c:	4602      	mov	r2, r0
1a00d24e:	460b      	mov	r3, r1
1a00d250:	4620      	mov	r0, r4
1a00d252:	4629      	mov	r1, r5
1a00d254:	f006 fa1c 	bl	1a013690 <__aeabi_dsub>
1a00d258:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
1a00d25c:	e9d6 4512 	ldrd	r4, r5, [r6, #72]	; 0x48
1a00d260:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
1a00d264:	e9d6 4514 	ldrd	r4, r5, [r6, #80]	; 0x50
1a00d268:	e9cd 4500 	strd	r4, r5, [sp]
1a00d26c:	e9d6 4516 	ldrd	r4, r5, [r6, #88]	; 0x58
1a00d270:	e9cd 4522 	strd	r4, r5, [sp, #136]	; 0x88
1a00d274:	e9d6 4518 	ldrd	r4, r5, [r6, #96]	; 0x60
1a00d278:	e9cd 4524 	strd	r4, r5, [sp, #144]	; 0x90
1a00d27c:	e9d6 451a 	ldrd	r4, r5, [r6, #104]	; 0x68
1a00d280:	e9cd 4526 	strd	r4, r5, [sp, #152]	; 0x98
1a00d284:	e9d6 451c 	ldrd	r4, r5, [r6, #112]	; 0x70
1a00d288:	e9cd 4528 	strd	r4, r5, [sp, #160]	; 0xa0
1a00d28c:	e9d6 451e 	ldrd	r4, r5, [r6, #120]	; 0x78
1a00d290:	e9cd 452a 	strd	r4, r5, [sp, #168]	; 0xa8
1a00d294:	e9d6 4520 	ldrd	r4, r5, [r6, #128]	; 0x80
1a00d298:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
1a00d29c:	e9d6 4522 	ldrd	r4, r5, [r6, #136]	; 0x88
1a00d2a0:	2200      	movs	r2, #0
1a00d2a2:	2300      	movs	r3, #0
1a00d2a4:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
1a00d2a8:	f006 fe0e 	bl	1a013ec8 <__aeabi_dcmpeq>
1a00d2ac:	b120      	cbz	r0, 1a00d2b8 <inv_compute_bias+0x268>
1a00d2ae:	2300      	movs	r3, #0
1a00d2b0:	4618      	mov	r0, r3
1a00d2b2:	b033      	add	sp, #204	; 0xcc
1a00d2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00d2b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00d2bc:	4640      	mov	r0, r8
1a00d2be:	4649      	mov	r1, r9
1a00d2c0:	f006 fb9a 	bl	1a0139f8 <__aeabi_dmul>
1a00d2c4:	4652      	mov	r2, sl
1a00d2c6:	4604      	mov	r4, r0
1a00d2c8:	460d      	mov	r5, r1
1a00d2ca:	465b      	mov	r3, fp
1a00d2cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00d2d0:	f006 fb92 	bl	1a0139f8 <__aeabi_dmul>
1a00d2d4:	4602      	mov	r2, r0
1a00d2d6:	460b      	mov	r3, r1
1a00d2d8:	4620      	mov	r0, r4
1a00d2da:	4629      	mov	r1, r5
1a00d2dc:	f006 f9d8 	bl	1a013690 <__aeabi_dsub>
1a00d2e0:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00d2e4:	4604      	mov	r4, r0
1a00d2e6:	460d      	mov	r5, r1
1a00d2e8:	4640      	mov	r0, r8
1a00d2ea:	4649      	mov	r1, r9
1a00d2ec:	f006 fb84 	bl	1a0139f8 <__aeabi_dmul>
1a00d2f0:	4602      	mov	r2, r0
1a00d2f2:	460b      	mov	r3, r1
1a00d2f4:	4620      	mov	r0, r4
1a00d2f6:	4629      	mov	r1, r5
1a00d2f8:	f006 f9cc 	bl	1a013694 <__adddf3>
1a00d2fc:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
1a00d300:	4604      	mov	r4, r0
1a00d302:	460d      	mov	r5, r1
1a00d304:	4650      	mov	r0, sl
1a00d306:	4659      	mov	r1, fp
1a00d308:	f006 fb76 	bl	1a0139f8 <__aeabi_dmul>
1a00d30c:	4602      	mov	r2, r0
1a00d30e:	460b      	mov	r3, r1
1a00d310:	4620      	mov	r0, r4
1a00d312:	4629      	mov	r1, r5
1a00d314:	f006 f9bc 	bl	1a013690 <__aeabi_dsub>
1a00d318:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
1a00d31c:	4604      	mov	r4, r0
1a00d31e:	460d      	mov	r5, r1
1a00d320:	4640      	mov	r0, r8
1a00d322:	4649      	mov	r1, r9
1a00d324:	f006 fb68 	bl	1a0139f8 <__aeabi_dmul>
1a00d328:	4602      	mov	r2, r0
1a00d32a:	460b      	mov	r3, r1
1a00d32c:	4620      	mov	r0, r4
1a00d32e:	4629      	mov	r1, r5
1a00d330:	f006 f9b0 	bl	1a013694 <__adddf3>
1a00d334:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
1a00d338:	4604      	mov	r4, r0
1a00d33a:	460d      	mov	r5, r1
1a00d33c:	4650      	mov	r0, sl
1a00d33e:	4659      	mov	r1, fp
1a00d340:	f006 fb5a 	bl	1a0139f8 <__aeabi_dmul>
1a00d344:	4602      	mov	r2, r0
1a00d346:	460b      	mov	r3, r1
1a00d348:	4620      	mov	r0, r4
1a00d34a:	4629      	mov	r1, r5
1a00d34c:	f006 f9a0 	bl	1a013690 <__aeabi_dsub>
1a00d350:	2200      	movs	r2, #0
1a00d352:	4b96      	ldr	r3, [pc, #600]	; (1a00d5ac <inv_compute_bias+0x55c>)
1a00d354:	f006 fb50 	bl	1a0139f8 <__aeabi_dmul>
1a00d358:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
1a00d35c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00d360:	4640      	mov	r0, r8
1a00d362:	4649      	mov	r1, r9
1a00d364:	f006 fb48 	bl	1a0139f8 <__aeabi_dmul>
1a00d368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00d36c:	4604      	mov	r4, r0
1a00d36e:	460d      	mov	r5, r1
1a00d370:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00d374:	f006 fb40 	bl	1a0139f8 <__aeabi_dmul>
1a00d378:	4602      	mov	r2, r0
1a00d37a:	460b      	mov	r3, r1
1a00d37c:	4620      	mov	r0, r4
1a00d37e:	4629      	mov	r1, r5
1a00d380:	f006 f986 	bl	1a013690 <__aeabi_dsub>
1a00d384:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
1a00d388:	4604      	mov	r4, r0
1a00d38a:	460d      	mov	r5, r1
1a00d38c:	4640      	mov	r0, r8
1a00d38e:	4649      	mov	r1, r9
1a00d390:	f006 fb32 	bl	1a0139f8 <__aeabi_dmul>
1a00d394:	4602      	mov	r2, r0
1a00d396:	460b      	mov	r3, r1
1a00d398:	4620      	mov	r0, r4
1a00d39a:	4629      	mov	r1, r5
1a00d39c:	f006 f97a 	bl	1a013694 <__adddf3>
1a00d3a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00d3a4:	4604      	mov	r4, r0
1a00d3a6:	460d      	mov	r5, r1
1a00d3a8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
1a00d3ac:	f006 fb24 	bl	1a0139f8 <__aeabi_dmul>
1a00d3b0:	4602      	mov	r2, r0
1a00d3b2:	460b      	mov	r3, r1
1a00d3b4:	4620      	mov	r0, r4
1a00d3b6:	4629      	mov	r1, r5
1a00d3b8:	f006 f96a 	bl	1a013690 <__aeabi_dsub>
1a00d3bc:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
1a00d3c0:	4604      	mov	r4, r0
1a00d3c2:	460d      	mov	r5, r1
1a00d3c4:	4640      	mov	r0, r8
1a00d3c6:	4649      	mov	r1, r9
1a00d3c8:	f006 fb16 	bl	1a0139f8 <__aeabi_dmul>
1a00d3cc:	4602      	mov	r2, r0
1a00d3ce:	460b      	mov	r3, r1
1a00d3d0:	4620      	mov	r0, r4
1a00d3d2:	4629      	mov	r1, r5
1a00d3d4:	f006 f95e 	bl	1a013694 <__adddf3>
1a00d3d8:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
1a00d3dc:	4604      	mov	r4, r0
1a00d3de:	460d      	mov	r5, r1
1a00d3e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00d3e4:	f006 fb08 	bl	1a0139f8 <__aeabi_dmul>
1a00d3e8:	4602      	mov	r2, r0
1a00d3ea:	460b      	mov	r3, r1
1a00d3ec:	4620      	mov	r0, r4
1a00d3ee:	4629      	mov	r1, r5
1a00d3f0:	f006 f94e 	bl	1a013690 <__aeabi_dsub>
1a00d3f4:	2200      	movs	r2, #0
1a00d3f6:	4b6d      	ldr	r3, [pc, #436]	; (1a00d5ac <inv_compute_bias+0x55c>)
1a00d3f8:	f006 fafe 	bl	1a0139f8 <__aeabi_dmul>
1a00d3fc:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
1a00d400:	4682      	mov	sl, r0
1a00d402:	468b      	mov	fp, r1
1a00d404:	4640      	mov	r0, r8
1a00d406:	4649      	mov	r1, r9
1a00d408:	f006 faf6 	bl	1a0139f8 <__aeabi_dmul>
1a00d40c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00d410:	4604      	mov	r4, r0
1a00d412:	460d      	mov	r5, r1
1a00d414:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00d418:	f006 faee 	bl	1a0139f8 <__aeabi_dmul>
1a00d41c:	4602      	mov	r2, r0
1a00d41e:	460b      	mov	r3, r1
1a00d420:	4620      	mov	r0, r4
1a00d422:	4629      	mov	r1, r5
1a00d424:	f006 f934 	bl	1a013690 <__aeabi_dsub>
1a00d428:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
1a00d42c:	4604      	mov	r4, r0
1a00d42e:	460d      	mov	r5, r1
1a00d430:	4640      	mov	r0, r8
1a00d432:	4649      	mov	r1, r9
1a00d434:	f006 fae0 	bl	1a0139f8 <__aeabi_dmul>
1a00d438:	4602      	mov	r2, r0
1a00d43a:	460b      	mov	r3, r1
1a00d43c:	4620      	mov	r0, r4
1a00d43e:	4629      	mov	r1, r5
1a00d440:	f006 f928 	bl	1a013694 <__adddf3>
1a00d444:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00d448:	4604      	mov	r4, r0
1a00d44a:	460d      	mov	r5, r1
1a00d44c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
1a00d450:	f006 fad2 	bl	1a0139f8 <__aeabi_dmul>
1a00d454:	4602      	mov	r2, r0
1a00d456:	460b      	mov	r3, r1
1a00d458:	4620      	mov	r0, r4
1a00d45a:	4629      	mov	r1, r5
1a00d45c:	f006 f918 	bl	1a013690 <__aeabi_dsub>
1a00d460:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
1a00d464:	4604      	mov	r4, r0
1a00d466:	460d      	mov	r5, r1
1a00d468:	4640      	mov	r0, r8
1a00d46a:	4649      	mov	r1, r9
1a00d46c:	f006 fac4 	bl	1a0139f8 <__aeabi_dmul>
1a00d470:	4602      	mov	r2, r0
1a00d472:	460b      	mov	r3, r1
1a00d474:	4620      	mov	r0, r4
1a00d476:	4629      	mov	r1, r5
1a00d478:	f006 f90c 	bl	1a013694 <__adddf3>
1a00d47c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00d480:	4604      	mov	r4, r0
1a00d482:	460d      	mov	r5, r1
1a00d484:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
1a00d488:	f006 fab6 	bl	1a0139f8 <__aeabi_dmul>
1a00d48c:	4602      	mov	r2, r0
1a00d48e:	460b      	mov	r3, r1
1a00d490:	4620      	mov	r0, r4
1a00d492:	4629      	mov	r1, r5
1a00d494:	f006 f8fc 	bl	1a013690 <__aeabi_dsub>
1a00d498:	2200      	movs	r2, #0
1a00d49a:	4b44      	ldr	r3, [pc, #272]	; (1a00d5ac <inv_compute_bias+0x55c>)
1a00d49c:	f006 faac 	bl	1a0139f8 <__aeabi_dmul>
1a00d4a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
1a00d4a4:	4680      	mov	r8, r0
1a00d4a6:	4689      	mov	r9, r1
1a00d4a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00d4ac:	f006 faa4 	bl	1a0139f8 <__aeabi_dmul>
1a00d4b0:	4642      	mov	r2, r8
1a00d4b2:	464b      	mov	r3, r9
1a00d4b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
1a00d4b8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a00d4bc:	f006 fa9c 	bl	1a0139f8 <__aeabi_dmul>
1a00d4c0:	4652      	mov	r2, sl
1a00d4c2:	4604      	mov	r4, r0
1a00d4c4:	460d      	mov	r5, r1
1a00d4c6:	465b      	mov	r3, fp
1a00d4c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00d4cc:	f006 fa94 	bl	1a0139f8 <__aeabi_dmul>
1a00d4d0:	4602      	mov	r2, r0
1a00d4d2:	460b      	mov	r3, r1
1a00d4d4:	4620      	mov	r0, r4
1a00d4d6:	4629      	mov	r1, r5
1a00d4d8:	f006 f8da 	bl	1a013690 <__aeabi_dsub>
1a00d4dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
1a00d4e0:	f006 fa8a 	bl	1a0139f8 <__aeabi_dmul>
1a00d4e4:	4604      	mov	r4, r0
1a00d4e6:	460d      	mov	r5, r1
1a00d4e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00d4ec:	4602      	mov	r2, r0
1a00d4ee:	460b      	mov	r3, r1
1a00d4f0:	f006 fa82 	bl	1a0139f8 <__aeabi_dmul>
1a00d4f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00d4f8:	f006 fa7e 	bl	1a0139f8 <__aeabi_dmul>
1a00d4fc:	4602      	mov	r2, r0
1a00d4fe:	460b      	mov	r3, r1
1a00d500:	4620      	mov	r0, r4
1a00d502:	4629      	mov	r1, r5
1a00d504:	f006 f8c6 	bl	1a013694 <__adddf3>
1a00d508:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
1a00d50c:	4604      	mov	r4, r0
1a00d50e:	460d      	mov	r5, r1
1a00d510:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a00d514:	f006 fa70 	bl	1a0139f8 <__aeabi_dmul>
1a00d518:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00d51c:	f006 fa6c 	bl	1a0139f8 <__aeabi_dmul>
1a00d520:	4602      	mov	r2, r0
1a00d522:	460b      	mov	r3, r1
1a00d524:	4620      	mov	r0, r4
1a00d526:	4629      	mov	r1, r5
1a00d528:	f006 f8b2 	bl	1a013690 <__aeabi_dsub>
1a00d52c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
1a00d530:	4604      	mov	r4, r0
1a00d532:	460d      	mov	r5, r1
1a00d534:	4650      	mov	r0, sl
1a00d536:	4659      	mov	r1, fp
1a00d538:	f006 fa5e 	bl	1a0139f8 <__aeabi_dmul>
1a00d53c:	4602      	mov	r2, r0
1a00d53e:	460b      	mov	r3, r1
1a00d540:	4620      	mov	r0, r4
1a00d542:	4629      	mov	r1, r5
1a00d544:	f006 f8a6 	bl	1a013694 <__adddf3>
1a00d548:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00d54c:	4604      	mov	r4, r0
1a00d54e:	460d      	mov	r5, r1
1a00d550:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00d554:	f006 fa50 	bl	1a0139f8 <__aeabi_dmul>
1a00d558:	4642      	mov	r2, r8
1a00d55a:	464b      	mov	r3, r9
1a00d55c:	f006 fa4c 	bl	1a0139f8 <__aeabi_dmul>
1a00d560:	4602      	mov	r2, r0
1a00d562:	460b      	mov	r3, r1
1a00d564:	4620      	mov	r0, r4
1a00d566:	4629      	mov	r1, r5
1a00d568:	f006 f892 	bl	1a013690 <__aeabi_dsub>
1a00d56c:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
1a00d570:	f006 fb6c 	bl	1a013c4c <__aeabi_ddiv>
1a00d574:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a00d578:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
1a00d57c:	4642      	mov	r2, r8
1a00d57e:	464b      	mov	r3, r9
1a00d580:	e9c7 4500 	strd	r4, r5, [r7]
1a00d584:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00d588:	f006 fa36 	bl	1a0139f8 <__aeabi_dmul>
1a00d58c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00d590:	4604      	mov	r4, r0
1a00d592:	460d      	mov	r5, r1
1a00d594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00d598:	f006 fa2e 	bl	1a0139f8 <__aeabi_dmul>
1a00d59c:	4602      	mov	r2, r0
1a00d59e:	460b      	mov	r3, r1
1a00d5a0:	4620      	mov	r0, r4
1a00d5a2:	4629      	mov	r1, r5
1a00d5a4:	f006 f874 	bl	1a013690 <__aeabi_dsub>
1a00d5a8:	e002      	b.n	1a00d5b0 <inv_compute_bias+0x560>
1a00d5aa:	bf00      	nop
1a00d5ac:	3fe00000 	.word	0x3fe00000
1a00d5b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00d5b4:	f006 fa20 	bl	1a0139f8 <__aeabi_dmul>
1a00d5b8:	4604      	mov	r4, r0
1a00d5ba:	460d      	mov	r5, r1
1a00d5bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00d5c0:	4602      	mov	r2, r0
1a00d5c2:	460b      	mov	r3, r1
1a00d5c4:	f006 fa18 	bl	1a0139f8 <__aeabi_dmul>
1a00d5c8:	4652      	mov	r2, sl
1a00d5ca:	465b      	mov	r3, fp
1a00d5cc:	f006 fa14 	bl	1a0139f8 <__aeabi_dmul>
1a00d5d0:	4602      	mov	r2, r0
1a00d5d2:	460b      	mov	r3, r1
1a00d5d4:	4620      	mov	r0, r4
1a00d5d6:	4629      	mov	r1, r5
1a00d5d8:	f006 f85c 	bl	1a013694 <__adddf3>
1a00d5dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
1a00d5e0:	4604      	mov	r4, r0
1a00d5e2:	460d      	mov	r5, r1
1a00d5e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00d5e8:	f006 fa06 	bl	1a0139f8 <__aeabi_dmul>
1a00d5ec:	4652      	mov	r2, sl
1a00d5ee:	465b      	mov	r3, fp
1a00d5f0:	f006 fa02 	bl	1a0139f8 <__aeabi_dmul>
1a00d5f4:	4602      	mov	r2, r0
1a00d5f6:	460b      	mov	r3, r1
1a00d5f8:	4620      	mov	r0, r4
1a00d5fa:	4629      	mov	r1, r5
1a00d5fc:	f006 f848 	bl	1a013690 <__aeabi_dsub>
1a00d600:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
1a00d604:	4604      	mov	r4, r0
1a00d606:	460d      	mov	r5, r1
1a00d608:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00d60c:	f006 f9f4 	bl	1a0139f8 <__aeabi_dmul>
1a00d610:	4602      	mov	r2, r0
1a00d612:	460b      	mov	r3, r1
1a00d614:	4620      	mov	r0, r4
1a00d616:	4629      	mov	r1, r5
1a00d618:	f006 f83c 	bl	1a013694 <__adddf3>
1a00d61c:	4642      	mov	r2, r8
1a00d61e:	4604      	mov	r4, r0
1a00d620:	460d      	mov	r5, r1
1a00d622:	464b      	mov	r3, r9
1a00d624:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00d628:	f006 f9e6 	bl	1a0139f8 <__aeabi_dmul>
1a00d62c:	4602      	mov	r2, r0
1a00d62e:	460b      	mov	r3, r1
1a00d630:	4620      	mov	r0, r4
1a00d632:	4629      	mov	r1, r5
1a00d634:	f006 f82c 	bl	1a013690 <__aeabi_dsub>
1a00d638:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
1a00d63c:	f006 fb06 	bl	1a013c4c <__aeabi_ddiv>
1a00d640:	4652      	mov	r2, sl
1a00d642:	e9cd 0104 	strd	r0, r1, [sp, #16]
1a00d646:	465b      	mov	r3, fp
1a00d648:	e9c7 0102 	strd	r0, r1, [r7, #8]
1a00d64c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00d650:	f006 f9d2 	bl	1a0139f8 <__aeabi_dmul>
1a00d654:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00d658:	4604      	mov	r4, r0
1a00d65a:	460d      	mov	r5, r1
1a00d65c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00d660:	f006 f9ca 	bl	1a0139f8 <__aeabi_dmul>
1a00d664:	4602      	mov	r2, r0
1a00d666:	460b      	mov	r3, r1
1a00d668:	4620      	mov	r0, r4
1a00d66a:	4629      	mov	r1, r5
1a00d66c:	f006 f810 	bl	1a013690 <__aeabi_dsub>
1a00d670:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00d674:	f006 f9c0 	bl	1a0139f8 <__aeabi_dmul>
1a00d678:	4604      	mov	r4, r0
1a00d67a:	460d      	mov	r5, r1
1a00d67c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00d680:	4602      	mov	r2, r0
1a00d682:	460b      	mov	r3, r1
1a00d684:	f006 f9b8 	bl	1a0139f8 <__aeabi_dmul>
1a00d688:	4642      	mov	r2, r8
1a00d68a:	464b      	mov	r3, r9
1a00d68c:	f006 f9b4 	bl	1a0139f8 <__aeabi_dmul>
1a00d690:	4602      	mov	r2, r0
1a00d692:	460b      	mov	r3, r1
1a00d694:	4620      	mov	r0, r4
1a00d696:	4629      	mov	r1, r5
1a00d698:	f005 fffc 	bl	1a013694 <__adddf3>
1a00d69c:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
1a00d6a0:	4604      	mov	r4, r0
1a00d6a2:	460d      	mov	r5, r1
1a00d6a4:	4640      	mov	r0, r8
1a00d6a6:	4649      	mov	r1, r9
1a00d6a8:	f006 f9a6 	bl	1a0139f8 <__aeabi_dmul>
1a00d6ac:	4602      	mov	r2, r0
1a00d6ae:	460b      	mov	r3, r1
1a00d6b0:	4620      	mov	r0, r4
1a00d6b2:	4629      	mov	r1, r5
1a00d6b4:	f005 ffec 	bl	1a013690 <__aeabi_dsub>
1a00d6b8:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
1a00d6bc:	4604      	mov	r4, r0
1a00d6be:	460d      	mov	r5, r1
1a00d6c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00d6c4:	f006 f998 	bl	1a0139f8 <__aeabi_dmul>
1a00d6c8:	4602      	mov	r2, r0
1a00d6ca:	460b      	mov	r3, r1
1a00d6cc:	4620      	mov	r0, r4
1a00d6ce:	4629      	mov	r1, r5
1a00d6d0:	f005 ffe0 	bl	1a013694 <__adddf3>
1a00d6d4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a00d6d8:	4604      	mov	r4, r0
1a00d6da:	460d      	mov	r5, r1
1a00d6dc:	4650      	mov	r0, sl
1a00d6de:	4659      	mov	r1, fp
1a00d6e0:	f006 f98a 	bl	1a0139f8 <__aeabi_dmul>
1a00d6e4:	4602      	mov	r2, r0
1a00d6e6:	460b      	mov	r3, r1
1a00d6e8:	4620      	mov	r0, r4
1a00d6ea:	4629      	mov	r1, r5
1a00d6ec:	f005 ffd0 	bl	1a013690 <__aeabi_dsub>
1a00d6f0:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
1a00d6f4:	f006 faaa 	bl	1a013c4c <__aeabi_ddiv>
1a00d6f8:	460d      	mov	r5, r1
1a00d6fa:	4604      	mov	r4, r0
1a00d6fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00d700:	e9c7 4504 	strd	r4, r5, [r7, #16]
1a00d704:	4602      	mov	r2, r0
1a00d706:	460b      	mov	r3, r1
1a00d708:	f006 f976 	bl	1a0139f8 <__aeabi_dmul>
1a00d70c:	4680      	mov	r8, r0
1a00d70e:	4689      	mov	r9, r1
1a00d710:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00d714:	4602      	mov	r2, r0
1a00d716:	460b      	mov	r3, r1
1a00d718:	f006 f96e 	bl	1a0139f8 <__aeabi_dmul>
1a00d71c:	4602      	mov	r2, r0
1a00d71e:	460b      	mov	r3, r1
1a00d720:	4640      	mov	r0, r8
1a00d722:	4649      	mov	r1, r9
1a00d724:	f005 ffb6 	bl	1a013694 <__adddf3>
1a00d728:	462b      	mov	r3, r5
1a00d72a:	4680      	mov	r8, r0
1a00d72c:	4689      	mov	r9, r1
1a00d72e:	4622      	mov	r2, r4
1a00d730:	4629      	mov	r1, r5
1a00d732:	4620      	mov	r0, r4
1a00d734:	f006 f960 	bl	1a0139f8 <__aeabi_dmul>
1a00d738:	4602      	mov	r2, r0
1a00d73a:	460b      	mov	r3, r1
1a00d73c:	4640      	mov	r0, r8
1a00d73e:	4649      	mov	r1, r9
1a00d740:	f005 ffa8 	bl	1a013694 <__adddf3>
1a00d744:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
1a00d748:	4682      	mov	sl, r0
1a00d74a:	468b      	mov	fp, r1
1a00d74c:	e9d6 0100 	ldrd	r0, r1, [r6]
1a00d750:	f005 ffa0 	bl	1a013694 <__adddf3>
1a00d754:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	; 0x28
1a00d758:	f005 ff9c 	bl	1a013694 <__adddf3>
1a00d75c:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a00d760:	e9d6 230c 	ldrd	r2, r3, [r6, #48]	; 0x30
1a00d764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00d768:	f006 f946 	bl	1a0139f8 <__aeabi_dmul>
1a00d76c:	e9d6 230e 	ldrd	r2, r3, [r6, #56]	; 0x38
1a00d770:	4680      	mov	r8, r0
1a00d772:	4689      	mov	r9, r1
1a00d774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00d778:	f006 f93e 	bl	1a0139f8 <__aeabi_dmul>
1a00d77c:	4602      	mov	r2, r0
1a00d77e:	460b      	mov	r3, r1
1a00d780:	4640      	mov	r0, r8
1a00d782:	4649      	mov	r1, r9
1a00d784:	f005 ff86 	bl	1a013694 <__adddf3>
1a00d788:	e9d6 2310 	ldrd	r2, r3, [r6, #64]	; 0x40
1a00d78c:	4680      	mov	r8, r0
1a00d78e:	4689      	mov	r9, r1
1a00d790:	4620      	mov	r0, r4
1a00d792:	4629      	mov	r1, r5
1a00d794:	f006 f930 	bl	1a0139f8 <__aeabi_dmul>
1a00d798:	4602      	mov	r2, r0
1a00d79a:	460b      	mov	r3, r1
1a00d79c:	4640      	mov	r0, r8
1a00d79e:	4649      	mov	r1, r9
1a00d7a0:	f005 ff78 	bl	1a013694 <__adddf3>
1a00d7a4:	4602      	mov	r2, r0
1a00d7a6:	460b      	mov	r3, r1
1a00d7a8:	f005 ff74 	bl	1a013694 <__adddf3>
1a00d7ac:	4602      	mov	r2, r0
1a00d7ae:	460b      	mov	r3, r1
1a00d7b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00d7b4:	f005 ff6c 	bl	1a013690 <__aeabi_dsub>
1a00d7b8:	e9d6 2330 	ldrd	r2, r3, [r6, #192]	; 0xc0
1a00d7bc:	f006 fa46 	bl	1a013c4c <__aeabi_ddiv>
1a00d7c0:	460b      	mov	r3, r1
1a00d7c2:	4602      	mov	r2, r0
1a00d7c4:	4659      	mov	r1, fp
1a00d7c6:	4650      	mov	r0, sl
1a00d7c8:	f005 ff64 	bl	1a013694 <__adddf3>
1a00d7cc:	f007 ff52 	bl	1a015674 <sqrt>
1a00d7d0:	9d31      	ldr	r5, [sp, #196]	; 0xc4
1a00d7d2:	2301      	movs	r3, #1
1a00d7d4:	e9c5 0100 	strd	r0, r1, [r5]
1a00d7d8:	e56a      	b.n	1a00d2b0 <inv_compute_bias+0x260>
1a00d7da:	bf00      	nop

1a00d7dc <inv_center_sum>:
1a00d7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00d7e0:	e9d1 8900 	ldrd	r8, r9, [r1]
1a00d7e4:	e9d0 4530 	ldrd	r4, r5, [r0, #192]	; 0xc0
1a00d7e8:	b099      	sub	sp, #100	; 0x64
1a00d7ea:	4606      	mov	r6, r0
1a00d7ec:	460f      	mov	r7, r1
1a00d7ee:	4642      	mov	r2, r8
1a00d7f0:	464b      	mov	r3, r9
1a00d7f2:	4620      	mov	r0, r4
1a00d7f4:	4629      	mov	r1, r5
1a00d7f6:	e9cd 4504 	strd	r4, r5, [sp, #16]
1a00d7fa:	f006 f8fd 	bl	1a0139f8 <__aeabi_dmul>
1a00d7fe:	e9d6 4500 	ldrd	r4, r5, [r6]
1a00d802:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00d806:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00d80a:	4640      	mov	r0, r8
1a00d80c:	4649      	mov	r1, r9
1a00d80e:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
1a00d812:	f006 f8f1 	bl	1a0139f8 <__aeabi_dmul>
1a00d816:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
1a00d81a:	f006 f8ed 	bl	1a0139f8 <__aeabi_dmul>
1a00d81e:	e9d6 ab0c 	ldrd	sl, fp, [r6, #48]	; 0x30
1a00d822:	4604      	mov	r4, r0
1a00d824:	460d      	mov	r5, r1
1a00d826:	4642      	mov	r2, r8
1a00d828:	464b      	mov	r3, r9
1a00d82a:	4640      	mov	r0, r8
1a00d82c:	4649      	mov	r1, r9
1a00d82e:	f006 f8e3 	bl	1a0139f8 <__aeabi_dmul>
1a00d832:	4652      	mov	r2, sl
1a00d834:	465b      	mov	r3, fp
1a00d836:	f006 f8df 	bl	1a0139f8 <__aeabi_dmul>
1a00d83a:	4602      	mov	r2, r0
1a00d83c:	460b      	mov	r3, r1
1a00d83e:	4650      	mov	r0, sl
1a00d840:	4659      	mov	r1, fp
1a00d842:	f006 f8d9 	bl	1a0139f8 <__aeabi_dmul>
1a00d846:	4602      	mov	r2, r0
1a00d848:	460b      	mov	r3, r1
1a00d84a:	4620      	mov	r0, r4
1a00d84c:	4629      	mov	r1, r5
1a00d84e:	f005 ff1f 	bl	1a013690 <__aeabi_dsub>
1a00d852:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	; 0x48
1a00d856:	4604      	mov	r4, r0
1a00d858:	460d      	mov	r5, r1
1a00d85a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00d85e:	f006 f8cb 	bl	1a0139f8 <__aeabi_dmul>
1a00d862:	4602      	mov	r2, r0
1a00d864:	460b      	mov	r3, r1
1a00d866:	4620      	mov	r0, r4
1a00d868:	4629      	mov	r1, r5
1a00d86a:	f005 ff11 	bl	1a013690 <__aeabi_dsub>
1a00d86e:	e9cd 0100 	strd	r0, r1, [sp]
1a00d872:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00d876:	4602      	mov	r2, r0
1a00d878:	460b      	mov	r3, r1
1a00d87a:	f005 ff0b 	bl	1a013694 <__adddf3>
1a00d87e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a00d882:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
1a00d886:	4640      	mov	r0, r8
1a00d888:	4649      	mov	r1, r9
1a00d88a:	f006 f8b5 	bl	1a0139f8 <__aeabi_dmul>
1a00d88e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
1a00d892:	4622      	mov	r2, r4
1a00d894:	462b      	mov	r3, r5
1a00d896:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a00d89a:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a00d89e:	f006 f8ab 	bl	1a0139f8 <__aeabi_dmul>
1a00d8a2:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
1a00d8a6:	f006 f8a7 	bl	1a0139f8 <__aeabi_dmul>
1a00d8aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
1a00d8ae:	4604      	mov	r4, r0
1a00d8b0:	460d      	mov	r5, r1
1a00d8b2:	4640      	mov	r0, r8
1a00d8b4:	4649      	mov	r1, r9
1a00d8b6:	f006 f89f 	bl	1a0139f8 <__aeabi_dmul>
1a00d8ba:	4602      	mov	r2, r0
1a00d8bc:	460b      	mov	r3, r1
1a00d8be:	4650      	mov	r0, sl
1a00d8c0:	4659      	mov	r1, fp
1a00d8c2:	f006 f899 	bl	1a0139f8 <__aeabi_dmul>
1a00d8c6:	4602      	mov	r2, r0
1a00d8c8:	460b      	mov	r3, r1
1a00d8ca:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00d8ce:	f005 fee1 	bl	1a013694 <__adddf3>
1a00d8d2:	4602      	mov	r2, r0
1a00d8d4:	460b      	mov	r3, r1
1a00d8d6:	4620      	mov	r0, r4
1a00d8d8:	4629      	mov	r1, r5
1a00d8da:	f005 fedb 	bl	1a013694 <__adddf3>
1a00d8de:	4642      	mov	r2, r8
1a00d8e0:	e9cd 0100 	strd	r0, r1, [sp]
1a00d8e4:	464b      	mov	r3, r9
1a00d8e6:	4640      	mov	r0, r8
1a00d8e8:	4649      	mov	r1, r9
1a00d8ea:	f005 fed3 	bl	1a013694 <__adddf3>
1a00d8ee:	e9d6 450e 	ldrd	r4, r5, [r6, #56]	; 0x38
1a00d8f2:	e9cd 0108 	strd	r0, r1, [sp, #32]
1a00d8f6:	4602      	mov	r2, r0
1a00d8f8:	460b      	mov	r3, r1
1a00d8fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00d8fe:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
1a00d902:	f006 f879 	bl	1a0139f8 <__aeabi_dmul>
1a00d906:	4602      	mov	r2, r0
1a00d908:	460b      	mov	r3, r1
1a00d90a:	4650      	mov	r0, sl
1a00d90c:	4659      	mov	r1, fp
1a00d90e:	f006 f873 	bl	1a0139f8 <__aeabi_dmul>
1a00d912:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a00d916:	f006 f86f 	bl	1a0139f8 <__aeabi_dmul>
1a00d91a:	4602      	mov	r2, r0
1a00d91c:	460b      	mov	r3, r1
1a00d91e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00d922:	f005 feb5 	bl	1a013690 <__aeabi_dsub>
1a00d926:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
1a00d92a:	4604      	mov	r4, r0
1a00d92c:	460d      	mov	r5, r1
1a00d92e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00d932:	f006 f861 	bl	1a0139f8 <__aeabi_dmul>
1a00d936:	4602      	mov	r2, r0
1a00d938:	460b      	mov	r3, r1
1a00d93a:	4620      	mov	r0, r4
1a00d93c:	4629      	mov	r1, r5
1a00d93e:	f005 fea7 	bl	1a013690 <__aeabi_dsub>
1a00d942:	4652      	mov	r2, sl
1a00d944:	4604      	mov	r4, r0
1a00d946:	460d      	mov	r5, r1
1a00d948:	465b      	mov	r3, fp
1a00d94a:	4640      	mov	r0, r8
1a00d94c:	4649      	mov	r1, r9
1a00d94e:	f006 f853 	bl	1a0139f8 <__aeabi_dmul>
1a00d952:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
1a00d956:	e9cd 8900 	strd	r8, r9, [sp]
1a00d95a:	4642      	mov	r2, r8
1a00d95c:	464b      	mov	r3, r9
1a00d95e:	e9d6 8906 	ldrd	r8, r9, [r6, #24]
1a00d962:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a00d966:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00d96a:	e9cd 8906 	strd	r8, r9, [sp, #24]
1a00d96e:	f006 f843 	bl	1a0139f8 <__aeabi_dmul>
1a00d972:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
1a00d976:	f006 f83f 	bl	1a0139f8 <__aeabi_dmul>
1a00d97a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1a00d97e:	4680      	mov	r8, r0
1a00d980:	4689      	mov	r9, r1
1a00d982:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00d986:	f006 f837 	bl	1a0139f8 <__aeabi_dmul>
1a00d98a:	4602      	mov	r2, r0
1a00d98c:	460b      	mov	r3, r1
1a00d98e:	4620      	mov	r0, r4
1a00d990:	4629      	mov	r1, r5
1a00d992:	f005 fe7f 	bl	1a013694 <__adddf3>
1a00d996:	4602      	mov	r2, r0
1a00d998:	460b      	mov	r3, r1
1a00d99a:	4640      	mov	r0, r8
1a00d99c:	4649      	mov	r1, r9
1a00d99e:	f005 fe79 	bl	1a013694 <__adddf3>
1a00d9a2:	e9d6 8910 	ldrd	r8, r9, [r6, #64]	; 0x40
1a00d9a6:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00d9aa:	4604      	mov	r4, r0
1a00d9ac:	460d      	mov	r5, r1
1a00d9ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00d9b2:	e9cd 8908 	strd	r8, r9, [sp, #32]
1a00d9b6:	f006 f81f 	bl	1a0139f8 <__aeabi_dmul>
1a00d9ba:	4602      	mov	r2, r0
1a00d9bc:	460b      	mov	r3, r1
1a00d9be:	4650      	mov	r0, sl
1a00d9c0:	4659      	mov	r1, fp
1a00d9c2:	f006 f819 	bl	1a0139f8 <__aeabi_dmul>
1a00d9c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00d9ca:	f006 f815 	bl	1a0139f8 <__aeabi_dmul>
1a00d9ce:	4602      	mov	r2, r0
1a00d9d0:	460b      	mov	r3, r1
1a00d9d2:	4620      	mov	r0, r4
1a00d9d4:	4629      	mov	r1, r5
1a00d9d6:	f005 fe5b 	bl	1a013690 <__aeabi_dsub>
1a00d9da:	e9d6 2316 	ldrd	r2, r3, [r6, #88]	; 0x58
1a00d9de:	4604      	mov	r4, r0
1a00d9e0:	460d      	mov	r5, r1
1a00d9e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00d9e6:	f006 f807 	bl	1a0139f8 <__aeabi_dmul>
1a00d9ea:	4602      	mov	r2, r0
1a00d9ec:	460b      	mov	r3, r1
1a00d9ee:	4620      	mov	r0, r4
1a00d9f0:	4629      	mov	r1, r5
1a00d9f2:	f005 fe4d 	bl	1a013690 <__aeabi_dsub>
1a00d9f6:	2200      	movs	r2, #0
1a00d9f8:	4680      	mov	r8, r0
1a00d9fa:	4689      	mov	r9, r1
1a00d9fc:	4b96      	ldr	r3, [pc, #600]	; (1a00dc58 <inv_center_sum+0x47c>)
1a00d9fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00da02:	f005 fff9 	bl	1a0139f8 <__aeabi_dmul>
1a00da06:	e9d6 ab0a 	ldrd	sl, fp, [r6, #40]	; 0x28
1a00da0a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
1a00da0e:	e9d6 2324 	ldrd	r2, r3, [r6, #144]	; 0x90
1a00da12:	f005 fff1 	bl	1a0139f8 <__aeabi_dmul>
1a00da16:	4652      	mov	r2, sl
1a00da18:	4604      	mov	r4, r0
1a00da1a:	460d      	mov	r5, r1
1a00da1c:	465b      	mov	r3, fp
1a00da1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00da22:	f005 ffe9 	bl	1a0139f8 <__aeabi_dmul>
1a00da26:	4602      	mov	r2, r0
1a00da28:	460b      	mov	r3, r1
1a00da2a:	4640      	mov	r0, r8
1a00da2c:	4649      	mov	r1, r9
1a00da2e:	f005 fe31 	bl	1a013694 <__adddf3>
1a00da32:	4602      	mov	r2, r0
1a00da34:	460b      	mov	r3, r1
1a00da36:	4620      	mov	r0, r4
1a00da38:	4629      	mov	r1, r5
1a00da3a:	f005 fe2b 	bl	1a013694 <__adddf3>
1a00da3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00da42:	4604      	mov	r4, r0
1a00da44:	460d      	mov	r5, r1
1a00da46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00da4a:	f005 ffd5 	bl	1a0139f8 <__aeabi_dmul>
1a00da4e:	2200      	movs	r2, #0
1a00da50:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00da54:	4b80      	ldr	r3, [pc, #512]	; (1a00dc58 <inv_center_sum+0x47c>)
1a00da56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00da5a:	f005 ffcd 	bl	1a0139f8 <__aeabi_dmul>
1a00da5e:	4602      	mov	r2, r0
1a00da60:	460b      	mov	r3, r1
1a00da62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00da66:	f005 ffc7 	bl	1a0139f8 <__aeabi_dmul>
1a00da6a:	4602      	mov	r2, r0
1a00da6c:	460b      	mov	r3, r1
1a00da6e:	4620      	mov	r0, r4
1a00da70:	4629      	mov	r1, r5
1a00da72:	f005 fe0d 	bl	1a013690 <__aeabi_dsub>
1a00da76:	e9d6 2318 	ldrd	r2, r3, [r6, #96]	; 0x60
1a00da7a:	4604      	mov	r4, r0
1a00da7c:	460d      	mov	r5, r1
1a00da7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00da82:	f005 ffb9 	bl	1a0139f8 <__aeabi_dmul>
1a00da86:	4602      	mov	r2, r0
1a00da88:	460b      	mov	r3, r1
1a00da8a:	4620      	mov	r0, r4
1a00da8c:	4629      	mov	r1, r5
1a00da8e:	f005 fdff 	bl	1a013690 <__aeabi_dsub>
1a00da92:	2200      	movs	r2, #0
1a00da94:	4680      	mov	r8, r0
1a00da96:	4689      	mov	r9, r1
1a00da98:	4b70      	ldr	r3, [pc, #448]	; (1a00dc5c <inv_center_sum+0x480>)
1a00da9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00da9e:	f005 ffab 	bl	1a0139f8 <__aeabi_dmul>
1a00daa2:	e9d6 232a 	ldrd	r2, r3, [r6, #168]	; 0xa8
1a00daa6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a00daaa:	f005 ffa5 	bl	1a0139f8 <__aeabi_dmul>
1a00daae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00dab2:	4604      	mov	r4, r0
1a00dab4:	460d      	mov	r5, r1
1a00dab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00daba:	f005 ff9d 	bl	1a0139f8 <__aeabi_dmul>
1a00dabe:	4602      	mov	r2, r0
1a00dac0:	460b      	mov	r3, r1
1a00dac2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00dac6:	f005 ff97 	bl	1a0139f8 <__aeabi_dmul>
1a00daca:	4602      	mov	r2, r0
1a00dacc:	460b      	mov	r3, r1
1a00dace:	4640      	mov	r0, r8
1a00dad0:	4649      	mov	r1, r9
1a00dad2:	f005 fddf 	bl	1a013694 <__adddf3>
1a00dad6:	4602      	mov	r2, r0
1a00dad8:	460b      	mov	r3, r1
1a00dada:	4620      	mov	r0, r4
1a00dadc:	4629      	mov	r1, r5
1a00dade:	f005 fdd9 	bl	1a013694 <__adddf3>
1a00dae2:	2200      	movs	r2, #0
1a00dae4:	4604      	mov	r4, r0
1a00dae6:	460d      	mov	r5, r1
1a00dae8:	4b5c      	ldr	r3, [pc, #368]	; (1a00dc5c <inv_center_sum+0x480>)
1a00daea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00daee:	f005 ff83 	bl	1a0139f8 <__aeabi_dmul>
1a00daf2:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00daf6:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
1a00dafa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00dafe:	f005 ff7b 	bl	1a0139f8 <__aeabi_dmul>
1a00db02:	e9cd 0104 	strd	r0, r1, [sp, #16]
1a00db06:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
1a00db0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00db0e:	f005 ff73 	bl	1a0139f8 <__aeabi_dmul>
1a00db12:	4602      	mov	r2, r0
1a00db14:	460b      	mov	r3, r1
1a00db16:	4620      	mov	r0, r4
1a00db18:	4629      	mov	r1, r5
1a00db1a:	f005 fdb9 	bl	1a013690 <__aeabi_dsub>
1a00db1e:	e9d6 231e 	ldrd	r2, r3, [r6, #120]	; 0x78
1a00db22:	4604      	mov	r4, r0
1a00db24:	460d      	mov	r5, r1
1a00db26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00db2a:	f005 ff65 	bl	1a0139f8 <__aeabi_dmul>
1a00db2e:	4602      	mov	r2, r0
1a00db30:	460b      	mov	r3, r1
1a00db32:	4620      	mov	r0, r4
1a00db34:	4629      	mov	r1, r5
1a00db36:	f005 fdab 	bl	1a013690 <__aeabi_dsub>
1a00db3a:	e9d6 232c 	ldrd	r2, r3, [r6, #176]	; 0xb0
1a00db3e:	4680      	mov	r8, r0
1a00db40:	4689      	mov	r9, r1
1a00db42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00db46:	f005 ff57 	bl	1a0139f8 <__aeabi_dmul>
1a00db4a:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00db4e:	4604      	mov	r4, r0
1a00db50:	460d      	mov	r5, r1
1a00db52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00db56:	f005 ff4f 	bl	1a0139f8 <__aeabi_dmul>
1a00db5a:	4602      	mov	r2, r0
1a00db5c:	460b      	mov	r3, r1
1a00db5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00db62:	f005 ff49 	bl	1a0139f8 <__aeabi_dmul>
1a00db66:	4602      	mov	r2, r0
1a00db68:	460b      	mov	r3, r1
1a00db6a:	4640      	mov	r0, r8
1a00db6c:	4649      	mov	r1, r9
1a00db6e:	f005 fd91 	bl	1a013694 <__adddf3>
1a00db72:	4602      	mov	r2, r0
1a00db74:	460b      	mov	r3, r1
1a00db76:	4620      	mov	r0, r4
1a00db78:	4629      	mov	r1, r5
1a00db7a:	f005 fd8b 	bl	1a013694 <__adddf3>
1a00db7e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00db82:	4680      	mov	r8, r0
1a00db84:	4689      	mov	r9, r1
1a00db86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00db8a:	f005 ff35 	bl	1a0139f8 <__aeabi_dmul>
1a00db8e:	4602      	mov	r2, r0
1a00db90:	460b      	mov	r3, r1
1a00db92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00db96:	f005 ff2f 	bl	1a0139f8 <__aeabi_dmul>
1a00db9a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
1a00db9e:	4604      	mov	r4, r0
1a00dba0:	460d      	mov	r5, r1
1a00dba2:	4650      	mov	r0, sl
1a00dba4:	4659      	mov	r1, fp
1a00dba6:	f005 ff27 	bl	1a0139f8 <__aeabi_dmul>
1a00dbaa:	4602      	mov	r2, r0
1a00dbac:	460b      	mov	r3, r1
1a00dbae:	4640      	mov	r0, r8
1a00dbb0:	4649      	mov	r1, r9
1a00dbb2:	f005 fd6d 	bl	1a013690 <__aeabi_dsub>
1a00dbb6:	4602      	mov	r2, r0
1a00dbb8:	460b      	mov	r3, r1
1a00dbba:	4620      	mov	r0, r4
1a00dbbc:	4629      	mov	r1, r5
1a00dbbe:	f005 fd69 	bl	1a013694 <__adddf3>
1a00dbc2:	4604      	mov	r4, r0
1a00dbc4:	460d      	mov	r5, r1
1a00dbc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00dbca:	4602      	mov	r2, r0
1a00dbcc:	460b      	mov	r3, r1
1a00dbce:	f005 ff13 	bl	1a0139f8 <__aeabi_dmul>
1a00dbd2:	4602      	mov	r2, r0
1a00dbd4:	460b      	mov	r3, r1
1a00dbd6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00dbda:	f005 ff0d 	bl	1a0139f8 <__aeabi_dmul>
1a00dbde:	4602      	mov	r2, r0
1a00dbe0:	460b      	mov	r3, r1
1a00dbe2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00dbe6:	f005 ff07 	bl	1a0139f8 <__aeabi_dmul>
1a00dbea:	4602      	mov	r2, r0
1a00dbec:	460b      	mov	r3, r1
1a00dbee:	4620      	mov	r0, r4
1a00dbf0:	4629      	mov	r1, r5
1a00dbf2:	f005 fd4d 	bl	1a013690 <__aeabi_dsub>
1a00dbf6:	e9d6 231a 	ldrd	r2, r3, [r6, #104]	; 0x68
1a00dbfa:	4604      	mov	r4, r0
1a00dbfc:	460d      	mov	r5, r1
1a00dbfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00dc02:	f005 fef9 	bl	1a0139f8 <__aeabi_dmul>
1a00dc06:	4602      	mov	r2, r0
1a00dc08:	460b      	mov	r3, r1
1a00dc0a:	4620      	mov	r0, r4
1a00dc0c:	4629      	mov	r1, r5
1a00dc0e:	f005 fd3f 	bl	1a013690 <__aeabi_dsub>
1a00dc12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00dc16:	4680      	mov	r8, r0
1a00dc18:	4689      	mov	r9, r1
1a00dc1a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a00dc1e:	f005 feeb 	bl	1a0139f8 <__aeabi_dmul>
1a00dc22:	4602      	mov	r2, r0
1a00dc24:	460b      	mov	r3, r1
1a00dc26:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00dc2a:	f005 fee5 	bl	1a0139f8 <__aeabi_dmul>
1a00dc2e:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
1a00dc32:	f005 fee1 	bl	1a0139f8 <__aeabi_dmul>
1a00dc36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1a00dc3a:	4604      	mov	r4, r0
1a00dc3c:	460d      	mov	r5, r1
1a00dc3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00dc42:	f005 fed9 	bl	1a0139f8 <__aeabi_dmul>
1a00dc46:	4602      	mov	r2, r0
1a00dc48:	460b      	mov	r3, r1
1a00dc4a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00dc4e:	f005 fed3 	bl	1a0139f8 <__aeabi_dmul>
1a00dc52:	4602      	mov	r2, r0
1a00dc54:	e004      	b.n	1a00dc60 <inv_center_sum+0x484>
1a00dc56:	bf00      	nop
1a00dc58:	3fd00000 	.word	0x3fd00000
1a00dc5c:	3fe00000 	.word	0x3fe00000
1a00dc60:	460b      	mov	r3, r1
1a00dc62:	4640      	mov	r0, r8
1a00dc64:	4649      	mov	r1, r9
1a00dc66:	f005 fd15 	bl	1a013694 <__adddf3>
1a00dc6a:	4602      	mov	r2, r0
1a00dc6c:	460b      	mov	r3, r1
1a00dc6e:	4620      	mov	r0, r4
1a00dc70:	4629      	mov	r1, r5
1a00dc72:	f005 fd0f 	bl	1a013694 <__adddf3>
1a00dc76:	4604      	mov	r4, r0
1a00dc78:	460d      	mov	r5, r1
1a00dc7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00dc7e:	4602      	mov	r2, r0
1a00dc80:	460b      	mov	r3, r1
1a00dc82:	f005 fd07 	bl	1a013694 <__adddf3>
1a00dc86:	4602      	mov	r2, r0
1a00dc88:	460b      	mov	r3, r1
1a00dc8a:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00dc8e:	f005 feb3 	bl	1a0139f8 <__aeabi_dmul>
1a00dc92:	4602      	mov	r2, r0
1a00dc94:	460b      	mov	r3, r1
1a00dc96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00dc9a:	f005 fead 	bl	1a0139f8 <__aeabi_dmul>
1a00dc9e:	4602      	mov	r2, r0
1a00dca0:	460b      	mov	r3, r1
1a00dca2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00dca6:	f005 fea7 	bl	1a0139f8 <__aeabi_dmul>
1a00dcaa:	4602      	mov	r2, r0
1a00dcac:	460b      	mov	r3, r1
1a00dcae:	4620      	mov	r0, r4
1a00dcb0:	4629      	mov	r1, r5
1a00dcb2:	f005 fced 	bl	1a013690 <__aeabi_dsub>
1a00dcb6:	e9d6 231c 	ldrd	r2, r3, [r6, #112]	; 0x70
1a00dcba:	4604      	mov	r4, r0
1a00dcbc:	460d      	mov	r5, r1
1a00dcbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00dcc2:	f005 fe99 	bl	1a0139f8 <__aeabi_dmul>
1a00dcc6:	4602      	mov	r2, r0
1a00dcc8:	460b      	mov	r3, r1
1a00dcca:	4620      	mov	r0, r4
1a00dccc:	4629      	mov	r1, r5
1a00dcce:	f005 fcdf 	bl	1a013690 <__aeabi_dsub>
1a00dcd2:	e9d6 2326 	ldrd	r2, r3, [r6, #152]	; 0x98
1a00dcd6:	4680      	mov	r8, r0
1a00dcd8:	4689      	mov	r9, r1
1a00dcda:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
1a00dcde:	f005 fe8b 	bl	1a0139f8 <__aeabi_dmul>
1a00dce2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a00dce6:	4604      	mov	r4, r0
1a00dce8:	460d      	mov	r5, r1
1a00dcea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00dcee:	f005 fe83 	bl	1a0139f8 <__aeabi_dmul>
1a00dcf2:	4602      	mov	r2, r0
1a00dcf4:	460b      	mov	r3, r1
1a00dcf6:	4650      	mov	r0, sl
1a00dcf8:	4659      	mov	r1, fp
1a00dcfa:	f005 fe7d 	bl	1a0139f8 <__aeabi_dmul>
1a00dcfe:	4602      	mov	r2, r0
1a00dd00:	460b      	mov	r3, r1
1a00dd02:	4640      	mov	r0, r8
1a00dd04:	4649      	mov	r1, r9
1a00dd06:	f005 fcc5 	bl	1a013694 <__adddf3>
1a00dd0a:	4602      	mov	r2, r0
1a00dd0c:	460b      	mov	r3, r1
1a00dd0e:	4620      	mov	r0, r4
1a00dd10:	4629      	mov	r1, r5
1a00dd12:	f005 fcbf 	bl	1a013694 <__adddf3>
1a00dd16:	2200      	movs	r2, #0
1a00dd18:	4604      	mov	r4, r0
1a00dd1a:	460d      	mov	r5, r1
1a00dd1c:	4b64      	ldr	r3, [pc, #400]	; (1a00deb0 <inv_center_sum+0x6d4>)
1a00dd1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00dd22:	f005 fe69 	bl	1a0139f8 <__aeabi_dmul>
1a00dd26:	4602      	mov	r2, r0
1a00dd28:	460b      	mov	r3, r1
1a00dd2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00dd2e:	f005 fe63 	bl	1a0139f8 <__aeabi_dmul>
1a00dd32:	4602      	mov	r2, r0
1a00dd34:	460b      	mov	r3, r1
1a00dd36:	4620      	mov	r0, r4
1a00dd38:	4629      	mov	r1, r5
1a00dd3a:	f005 fca9 	bl	1a013690 <__aeabi_dsub>
1a00dd3e:	e9d6 2320 	ldrd	r2, r3, [r6, #128]	; 0x80
1a00dd42:	4604      	mov	r4, r0
1a00dd44:	460d      	mov	r5, r1
1a00dd46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00dd4a:	f005 fe55 	bl	1a0139f8 <__aeabi_dmul>
1a00dd4e:	4602      	mov	r2, r0
1a00dd50:	460b      	mov	r3, r1
1a00dd52:	4620      	mov	r0, r4
1a00dd54:	4629      	mov	r1, r5
1a00dd56:	f005 fc9b 	bl	1a013690 <__aeabi_dsub>
1a00dd5a:	e9d6 232e 	ldrd	r2, r3, [r6, #184]	; 0xb8
1a00dd5e:	4680      	mov	r8, r0
1a00dd60:	4689      	mov	r9, r1
1a00dd62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00dd66:	f005 fe47 	bl	1a0139f8 <__aeabi_dmul>
1a00dd6a:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00dd6e:	4604      	mov	r4, r0
1a00dd70:	460d      	mov	r5, r1
1a00dd72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00dd76:	f005 fe3f 	bl	1a0139f8 <__aeabi_dmul>
1a00dd7a:	4602      	mov	r2, r0
1a00dd7c:	460b      	mov	r3, r1
1a00dd7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00dd82:	f005 fe39 	bl	1a0139f8 <__aeabi_dmul>
1a00dd86:	4602      	mov	r2, r0
1a00dd88:	460b      	mov	r3, r1
1a00dd8a:	4640      	mov	r0, r8
1a00dd8c:	4649      	mov	r1, r9
1a00dd8e:	f005 fc81 	bl	1a013694 <__adddf3>
1a00dd92:	4602      	mov	r2, r0
1a00dd94:	460b      	mov	r3, r1
1a00dd96:	4620      	mov	r0, r4
1a00dd98:	4629      	mov	r1, r5
1a00dd9a:	f005 fc7b 	bl	1a013694 <__adddf3>
1a00dd9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00dda2:	4680      	mov	r8, r0
1a00dda4:	4689      	mov	r9, r1
1a00dda6:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00ddaa:	f005 fe25 	bl	1a0139f8 <__aeabi_dmul>
1a00ddae:	4602      	mov	r2, r0
1a00ddb0:	460b      	mov	r3, r1
1a00ddb2:	4650      	mov	r0, sl
1a00ddb4:	4659      	mov	r1, fp
1a00ddb6:	f005 fe1f 	bl	1a0139f8 <__aeabi_dmul>
1a00ddba:	2200      	movs	r2, #0
1a00ddbc:	4604      	mov	r4, r0
1a00ddbe:	460d      	mov	r5, r1
1a00ddc0:	4b3c      	ldr	r3, [pc, #240]	; (1a00deb4 <inv_center_sum+0x6d8>)
1a00ddc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00ddc6:	f005 fe17 	bl	1a0139f8 <__aeabi_dmul>
1a00ddca:	4602      	mov	r2, r0
1a00ddcc:	460b      	mov	r3, r1
1a00ddce:	4650      	mov	r0, sl
1a00ddd0:	4659      	mov	r1, fp
1a00ddd2:	f005 fe11 	bl	1a0139f8 <__aeabi_dmul>
1a00ddd6:	4602      	mov	r2, r0
1a00ddd8:	460b      	mov	r3, r1
1a00ddda:	4640      	mov	r0, r8
1a00dddc:	4649      	mov	r1, r9
1a00ddde:	f005 fc57 	bl	1a013690 <__aeabi_dsub>
1a00dde2:	4602      	mov	r2, r0
1a00dde4:	460b      	mov	r3, r1
1a00dde6:	4620      	mov	r0, r4
1a00dde8:	4629      	mov	r1, r5
1a00ddea:	f005 fc53 	bl	1a013694 <__adddf3>
1a00ddee:	4604      	mov	r4, r0
1a00ddf0:	460d      	mov	r5, r1
1a00ddf2:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00ddf6:	4602      	mov	r2, r0
1a00ddf8:	460b      	mov	r3, r1
1a00ddfa:	f005 fdfd 	bl	1a0139f8 <__aeabi_dmul>
1a00ddfe:	4602      	mov	r2, r0
1a00de00:	460b      	mov	r3, r1
1a00de02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00de06:	f005 fdf7 	bl	1a0139f8 <__aeabi_dmul>
1a00de0a:	4602      	mov	r2, r0
1a00de0c:	460b      	mov	r3, r1
1a00de0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00de12:	f005 fdf1 	bl	1a0139f8 <__aeabi_dmul>
1a00de16:	4602      	mov	r2, r0
1a00de18:	460b      	mov	r3, r1
1a00de1a:	4620      	mov	r0, r4
1a00de1c:	4629      	mov	r1, r5
1a00de1e:	f005 fc37 	bl	1a013690 <__aeabi_dsub>
1a00de22:	e9d6 2322 	ldrd	r2, r3, [r6, #136]	; 0x88
1a00de26:	4604      	mov	r4, r0
1a00de28:	460d      	mov	r5, r1
1a00de2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00de2e:	f005 fde3 	bl	1a0139f8 <__aeabi_dmul>
1a00de32:	4602      	mov	r2, r0
1a00de34:	460b      	mov	r3, r1
1a00de36:	4620      	mov	r0, r4
1a00de38:	4629      	mov	r1, r5
1a00de3a:	f005 fc29 	bl	1a013690 <__aeabi_dsub>
1a00de3e:	e9d6 2328 	ldrd	r2, r3, [r6, #160]	; 0xa0
1a00de42:	4604      	mov	r4, r0
1a00de44:	460d      	mov	r5, r1
1a00de46:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
1a00de4a:	f005 fdd5 	bl	1a0139f8 <__aeabi_dmul>
1a00de4e:	4652      	mov	r2, sl
1a00de50:	4606      	mov	r6, r0
1a00de52:	460f      	mov	r7, r1
1a00de54:	465b      	mov	r3, fp
1a00de56:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00de5a:	f005 fdcd 	bl	1a0139f8 <__aeabi_dmul>
1a00de5e:	4602      	mov	r2, r0
1a00de60:	460b      	mov	r3, r1
1a00de62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00de66:	f005 fdc7 	bl	1a0139f8 <__aeabi_dmul>
1a00de6a:	4602      	mov	r2, r0
1a00de6c:	460b      	mov	r3, r1
1a00de6e:	4620      	mov	r0, r4
1a00de70:	4629      	mov	r1, r5
1a00de72:	f005 fc0f 	bl	1a013694 <__adddf3>
1a00de76:	4602      	mov	r2, r0
1a00de78:	460b      	mov	r3, r1
1a00de7a:	4630      	mov	r0, r6
1a00de7c:	4639      	mov	r1, r7
1a00de7e:	f005 fc09 	bl	1a013694 <__adddf3>
1a00de82:	2200      	movs	r2, #0
1a00de84:	4604      	mov	r4, r0
1a00de86:	460d      	mov	r5, r1
1a00de88:	4650      	mov	r0, sl
1a00de8a:	4659      	mov	r1, fp
1a00de8c:	4b08      	ldr	r3, [pc, #32]	; (1a00deb0 <inv_center_sum+0x6d4>)
1a00de8e:	f005 fdb3 	bl	1a0139f8 <__aeabi_dmul>
1a00de92:	4602      	mov	r2, r0
1a00de94:	460b      	mov	r3, r1
1a00de96:	4650      	mov	r0, sl
1a00de98:	4659      	mov	r1, fp
1a00de9a:	f005 fdad 	bl	1a0139f8 <__aeabi_dmul>
1a00de9e:	4602      	mov	r2, r0
1a00dea0:	460b      	mov	r3, r1
1a00dea2:	4620      	mov	r0, r4
1a00dea4:	4629      	mov	r1, r5
1a00dea6:	f005 fbf3 	bl	1a013690 <__aeabi_dsub>
1a00deaa:	b019      	add	sp, #100	; 0x64
1a00deac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00deb0:	3fd00000 	.word	0x3fd00000
1a00deb4:	3fe00000 	.word	0x3fe00000

1a00deb8 <inv_get_current_calibrated_compass>:
1a00deb8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00deba:	4604      	mov	r4, r0
1a00debc:	b087      	sub	sp, #28
1a00debe:	f9b4 508c 	ldrsh.w	r5, [r4, #140]	; 0x8c
1a00dec2:	f9b4 208e 	ldrsh.w	r2, [r4, #142]	; 0x8e
1a00dec6:	f9b4 3090 	ldrsh.w	r3, [r4, #144]	; 0x90
1a00deca:	0412      	lsls	r2, r2, #16
1a00decc:	041b      	lsls	r3, r3, #16
1a00dece:	a803      	add	r0, sp, #12
1a00ded0:	042d      	lsls	r5, r5, #16
1a00ded2:	460f      	mov	r7, r1
1a00ded4:	9500      	str	r5, [sp, #0]
1a00ded6:	9201      	str	r2, [sp, #4]
1a00ded8:	9302      	str	r3, [sp, #8]
1a00deda:	f7f9 f843 	bl	1a006f64 <inv_get_compass_bias>
1a00dede:	9a03      	ldr	r2, [sp, #12]
1a00dee0:	f8b4 0088 	ldrh.w	r0, [r4, #136]	; 0x88
1a00dee4:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
1a00dee8:	9c00      	ldr	r4, [sp, #0]
1a00deea:	9b01      	ldr	r3, [sp, #4]
1a00deec:	1aa4      	subs	r4, r4, r2
1a00deee:	9a04      	ldr	r2, [sp, #16]
1a00def0:	1a9e      	subs	r6, r3, r2
1a00def2:	9b02      	ldr	r3, [sp, #8]
1a00def4:	9a05      	ldr	r2, [sp, #20]
1a00def6:	1a9d      	subs	r5, r3, r2
1a00def8:	466a      	mov	r2, sp
1a00defa:	463b      	mov	r3, r7
1a00defc:	e88d 0050 	stmia.w	sp, {r4, r6}
1a00df00:	9502      	str	r5, [sp, #8]
1a00df02:	f7fa fcb9 	bl	1a008878 <inv_convert_to_body_with_scale>
1a00df06:	b007      	add	sp, #28
1a00df08:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00df0a:	bf00      	nop

1a00df0c <inv_add_compass_block_data>:
1a00df0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00df10:	b086      	sub	sp, #24
1a00df12:	460e      	mov	r6, r1
1a00df14:	4669      	mov	r1, sp
1a00df16:	f7ff ffcf 	bl	1a00deb8 <inv_get_current_calibrated_compass>
1a00df1a:	f04f 0800 	mov.w	r8, #0
1a00df1e:	2400      	movs	r4, #0
1a00df20:	2500      	movs	r5, #0
1a00df22:	af03      	add	r7, sp, #12
1a00df24:	f85d 0008 	ldr.w	r0, [sp, r8]
1a00df28:	f006 f932 	bl	1a014190 <__aeabi_i2f>
1a00df2c:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a00df30:	f006 f982 	bl	1a014238 <__aeabi_fmul>
1a00df34:	4601      	mov	r1, r0
1a00df36:	f847 0008 	str.w	r0, [r7, r8]
1a00df3a:	f006 f97d 	bl	1a014238 <__aeabi_fmul>
1a00df3e:	f005 fd07 	bl	1a013950 <__aeabi_f2d>
1a00df42:	4602      	mov	r2, r0
1a00df44:	460b      	mov	r3, r1
1a00df46:	4620      	mov	r0, r4
1a00df48:	4629      	mov	r1, r5
1a00df4a:	f005 fba3 	bl	1a013694 <__adddf3>
1a00df4e:	f108 0804 	add.w	r8, r8, #4
1a00df52:	f1b8 0f0c 	cmp.w	r8, #12
1a00df56:	4604      	mov	r4, r0
1a00df58:	460d      	mov	r5, r1
1a00df5a:	d1e3      	bne.n	1a00df24 <inv_add_compass_block_data+0x18>
1a00df5c:	f007 fb8a 	bl	1a015674 <sqrt>
1a00df60:	f04f 0800 	mov.w	r8, #0
1a00df64:	4604      	mov	r4, r0
1a00df66:	460d      	mov	r5, r1
1a00df68:	f857 0008 	ldr.w	r0, [r7, r8]
1a00df6c:	f005 fcf0 	bl	1a013950 <__aeabi_f2d>
1a00df70:	4622      	mov	r2, r4
1a00df72:	462b      	mov	r3, r5
1a00df74:	f005 fe6a 	bl	1a013c4c <__aeabi_ddiv>
1a00df78:	f006 f800 	bl	1a013f7c <__aeabi_d2f>
1a00df7c:	4601      	mov	r1, r0
1a00df7e:	f856 0008 	ldr.w	r0, [r6, r8]
1a00df82:	f006 f851 	bl	1a014028 <__addsf3>
1a00df86:	f846 0008 	str.w	r0, [r6, r8]
1a00df8a:	f108 0804 	add.w	r8, r8, #4
1a00df8e:	f1b8 0f0c 	cmp.w	r8, #12
1a00df92:	d1e9      	bne.n	1a00df68 <inv_add_compass_block_data+0x5c>
1a00df94:	6d73      	ldr	r3, [r6, #84]	; 0x54
1a00df96:	3301      	adds	r3, #1
1a00df98:	6573      	str	r3, [r6, #84]	; 0x54
1a00df9a:	f7fa ff5d 	bl	1a008e58 <inv_got_compass_bias>
1a00df9e:	67f0      	str	r0, [r6, #124]	; 0x7c
1a00dfa0:	b006      	add	sp, #24
1a00dfa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00dfa6:	bf00      	nop

1a00dfa8 <inv_check_sim>:
1a00dfa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00dfac:	b09d      	sub	sp, #116	; 0x74
1a00dfae:	2355      	movs	r3, #85	; 0x55
1a00dfb0:	2200      	movs	r2, #0
1a00dfb2:	4604      	mov	r4, r0
1a00dfb4:	a806      	add	r0, sp, #24
1a00dfb6:	9304      	str	r3, [sp, #16]
1a00dfb8:	9305      	str	r3, [sp, #20]
1a00dfba:	9202      	str	r2, [sp, #8]
1a00dfbc:	9203      	str	r2, [sp, #12]
1a00dfbe:	f7fa fe6f 	bl	1a008ca0 <inv_get_6axis_quaternion>
1a00dfc2:	a806      	add	r0, sp, #24
1a00dfc4:	a90a      	add	r1, sp, #40	; 0x28
1a00dfc6:	f7f9 ffd5 	bl	1a007f74 <inv_q_invert>
1a00dfca:	aa0e      	add	r2, sp, #56	; 0x38
1a00dfcc:	a80a      	add	r0, sp, #40	; 0x28
1a00dfce:	a902      	add	r1, sp, #8
1a00dfd0:	f7f9 fed2 	bl	1a007d78 <inv_q_mult>
1a00dfd4:	a906      	add	r1, sp, #24
1a00dfd6:	a80e      	add	r0, sp, #56	; 0x38
1a00dfd8:	aa12      	add	r2, sp, #72	; 0x48
1a00dfda:	f7f9 fecd 	bl	1a007d78 <inv_q_mult>
1a00dfde:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a00dfe0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
1a00dfe2:	4843      	ldr	r0, [pc, #268]	; (1a00e0f0 <inv_check_sim+0x148>)
1a00dfe4:	f503 7296 	add.w	r2, r3, #300	; 0x12c
1a00dfe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00dfea:	9214      	str	r2, [sp, #80]	; 0x50
1a00dfec:	f503 7396 	add.w	r3, r3, #300	; 0x12c
1a00dff0:	f505 7596 	add.w	r5, r5, #300	; 0x12c
1a00dff4:	9315      	str	r3, [sp, #84]	; 0x54
1a00dff6:	9513      	str	r5, [sp, #76]	; 0x4c
1a00dff8:	f7fe fdc4 	bl	1a00cb84 <inv_cheap_gaussian>
1a00dffc:	f006 fae2 	bl	1a0145c4 <__aeabi_f2iz>
1a00e000:	182d      	adds	r5, r5, r0
1a00e002:	483b      	ldr	r0, [pc, #236]	; (1a00e0f0 <inv_check_sim+0x148>)
1a00e004:	9e14      	ldr	r6, [sp, #80]	; 0x50
1a00e006:	9513      	str	r5, [sp, #76]	; 0x4c
1a00e008:	f7fe fdbc 	bl	1a00cb84 <inv_cheap_gaussian>
1a00e00c:	f006 fada 	bl	1a0145c4 <__aeabi_f2iz>
1a00e010:	1836      	adds	r6, r6, r0
1a00e012:	4837      	ldr	r0, [pc, #220]	; (1a00e0f0 <inv_check_sim+0x148>)
1a00e014:	9d15      	ldr	r5, [sp, #84]	; 0x54
1a00e016:	9614      	str	r6, [sp, #80]	; 0x50
1a00e018:	f7fe fdb4 	bl	1a00cb84 <inv_cheap_gaussian>
1a00e01c:	f006 fad2 	bl	1a0145c4 <__aeabi_f2iz>
1a00e020:	a913      	add	r1, sp, #76	; 0x4c
1a00e022:	182d      	adds	r5, r5, r0
1a00e024:	4620      	mov	r0, r4
1a00e026:	9515      	str	r5, [sp, #84]	; 0x54
1a00e028:	f7fe fe8c 	bl	1a00cd44 <inv_set_terms>
1a00e02c:	e9d4 0130 	ldrd	r0, r1, [r4, #192]	; 0xc0
1a00e030:	2200      	movs	r2, #0
1a00e032:	4b30      	ldr	r3, [pc, #192]	; (1a00e0f4 <inv_check_sim+0x14c>)
1a00e034:	f005 ff70 	bl	1a013f18 <__aeabi_dcmpgt>
1a00e038:	b928      	cbnz	r0, 1a00e046 <inv_check_sim+0x9e>
1a00e03a:	a129      	add	r1, pc, #164	; (adr r1, 1a00e0e0 <inv_check_sim+0x138>)
1a00e03c:	e9d1 0100 	ldrd	r0, r1, [r1]
1a00e040:	b01d      	add	sp, #116	; 0x74
1a00e042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00e046:	4620      	mov	r0, r4
1a00e048:	a916      	add	r1, sp, #88	; 0x58
1a00e04a:	466a      	mov	r2, sp
1a00e04c:	f7ff f800 	bl	1a00d050 <inv_compute_bias>
1a00e050:	2800      	cmp	r0, #0
1a00e052:	d0f2      	beq.n	1a00e03a <inv_check_sim+0x92>
1a00e054:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
1a00e058:	a323      	add	r3, pc, #140	; (adr r3, 1a00e0e8 <inv_check_sim+0x140>)
1a00e05a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00e05e:	f005 fb17 	bl	1a013690 <__aeabi_dsub>
1a00e062:	a321      	add	r3, pc, #132	; (adr r3, 1a00e0e8 <inv_check_sim+0x140>)
1a00e064:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00e068:	4604      	mov	r4, r0
1a00e06a:	460d      	mov	r5, r1
1a00e06c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
1a00e070:	f005 fb0e 	bl	1a013690 <__aeabi_dsub>
1a00e074:	a31c      	add	r3, pc, #112	; (adr r3, 1a00e0e8 <inv_check_sim+0x140>)
1a00e076:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00e07a:	4680      	mov	r8, r0
1a00e07c:	4689      	mov	r9, r1
1a00e07e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a00e082:	f005 fb05 	bl	1a013690 <__aeabi_dsub>
1a00e086:	4622      	mov	r2, r4
1a00e088:	4606      	mov	r6, r0
1a00e08a:	460f      	mov	r7, r1
1a00e08c:	462b      	mov	r3, r5
1a00e08e:	4620      	mov	r0, r4
1a00e090:	4629      	mov	r1, r5
1a00e092:	f005 fcb1 	bl	1a0139f8 <__aeabi_dmul>
1a00e096:	4642      	mov	r2, r8
1a00e098:	4604      	mov	r4, r0
1a00e09a:	460d      	mov	r5, r1
1a00e09c:	464b      	mov	r3, r9
1a00e09e:	4640      	mov	r0, r8
1a00e0a0:	4649      	mov	r1, r9
1a00e0a2:	f005 fca9 	bl	1a0139f8 <__aeabi_dmul>
1a00e0a6:	4602      	mov	r2, r0
1a00e0a8:	460b      	mov	r3, r1
1a00e0aa:	4620      	mov	r0, r4
1a00e0ac:	4629      	mov	r1, r5
1a00e0ae:	f005 faf1 	bl	1a013694 <__adddf3>
1a00e0b2:	4632      	mov	r2, r6
1a00e0b4:	4604      	mov	r4, r0
1a00e0b6:	460d      	mov	r5, r1
1a00e0b8:	463b      	mov	r3, r7
1a00e0ba:	4630      	mov	r0, r6
1a00e0bc:	4639      	mov	r1, r7
1a00e0be:	f005 fc9b 	bl	1a0139f8 <__aeabi_dmul>
1a00e0c2:	4602      	mov	r2, r0
1a00e0c4:	460b      	mov	r3, r1
1a00e0c6:	4620      	mov	r0, r4
1a00e0c8:	4629      	mov	r1, r5
1a00e0ca:	f005 fae3 	bl	1a013694 <__adddf3>
1a00e0ce:	f007 fad1 	bl	1a015674 <sqrt>
1a00e0d2:	2200      	movs	r2, #0
1a00e0d4:	4b08      	ldr	r3, [pc, #32]	; (1a00e0f8 <inv_check_sim+0x150>)
1a00e0d6:	f005 fdb9 	bl	1a013c4c <__aeabi_ddiv>
1a00e0da:	e7b1      	b.n	1a00e040 <inv_check_sim+0x98>
1a00e0dc:	f3af 8000 	nop.w
1a00e0e0:	55555555 	.word	0x55555555
1a00e0e4:	4074d555 	.word	0x4074d555
1a00e0e8:	00000000 	.word	0x00000000
1a00e0ec:	4072c000 	.word	0x4072c000
1a00e0f0:	41280000 	.word	0x41280000
1a00e0f4:	40340000 	.word	0x40340000
1a00e0f8:	40080000 	.word	0x40080000
1a00e0fc:	f3af 8000 	nop.w

1a00e100 <inv_reset_data_collection>:
1a00e100:	b570      	push	{r4, r5, r6, lr}
1a00e102:	26e8      	movs	r6, #232	; 0xe8
1a00e104:	4c0f      	ldr	r4, [pc, #60]	; (1a00e144 <inv_reset_data_collection+0x44>)
1a00e106:	4810      	ldr	r0, [pc, #64]	; (1a00e148 <inv_reset_data_collection+0x48>)
1a00e108:	2100      	movs	r1, #0
1a00e10a:	4632      	mov	r2, r6
1a00e10c:	f006 fde4 	bl	1a014cd8 <memset>
1a00e110:	f44f 4500 	mov.w	r5, #32768	; 0x8000
1a00e114:	f647 73ff 	movw	r3, #32767	; 0x7fff
1a00e118:	480c      	ldr	r0, [pc, #48]	; (1a00e14c <inv_reset_data_collection+0x4c>)
1a00e11a:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
1a00e11e:	2100      	movs	r1, #0
1a00e120:	4632      	mov	r2, r6
1a00e122:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
1a00e126:	f8a4 30de 	strh.w	r3, [r4, #222]	; 0xde
1a00e12a:	f8a4 50bc 	strh.w	r5, [r4, #188]	; 0xbc
1a00e12e:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
1a00e132:	f8a4 50d8 	strh.w	r5, [r4, #216]	; 0xd8
1a00e136:	f006 fdcf 	bl	1a014cd8 <memset>
1a00e13a:	2300      	movs	r3, #0
1a00e13c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
1a00e140:	bd70      	pop	{r4, r5, r6, pc}
1a00e142:	bf00      	nop
1a00e144:	10088ad8 	.word	0x10088ad8
1a00e148:	10088908 	.word	0x10088908
1a00e14c:	10088c80 	.word	0x10088c80

1a00e150 <inv_process_compass_only_cal>:
1a00e150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00e154:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00e156:	4f06      	ldr	r7, [pc, #24]	; (1a00e170 <inv_process_compass_only_cal+0x20>)
1a00e158:	b0e1      	sub	sp, #388	; 0x184
1a00e15a:	4680      	mov	r8, r0
1a00e15c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
1a00e160:	f7fa fce0 	bl	1a008b24 <inv_get_large_mag_field>
1a00e164:	4604      	mov	r4, r0
1a00e166:	b128      	cbz	r0, 1a00e174 <inv_process_compass_only_cal+0x24>
1a00e168:	2000      	movs	r0, #0
1a00e16a:	b061      	add	sp, #388	; 0x184
1a00e16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00e170:	10088ad8 	.word	0x10088ad8
1a00e174:	f7fa fe9c 	bl	1a008eb0 <inv_get_compass_state>
1a00e178:	2804      	cmp	r0, #4
1a00e17a:	d0f5      	beq.n	1a00e168 <inv_process_compass_only_cal+0x18>
1a00e17c:	4640      	mov	r0, r8
1a00e17e:	f507 7190 	add.w	r1, r7, #288	; 0x120
1a00e182:	f7ff fec3 	bl	1a00df0c <inv_add_compass_block_data>
1a00e186:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
1a00e18a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
1a00e18e:	429a      	cmp	r2, r3
1a00e190:	f280 8178 	bge.w	1a00e484 <inv_process_compass_only_cal+0x334>
1a00e194:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
1a00e198:	05d9      	lsls	r1, r3, #23
1a00e19a:	f100 8161 	bmi.w	1a00e460 <inv_process_compass_only_cal+0x310>
1a00e19e:	f8d8 10a0 	ldr.w	r1, [r8, #160]	; 0xa0
1a00e1a2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
1a00e1a6:	4ba6      	ldr	r3, [pc, #664]	; (1a00e440 <inv_process_compass_only_cal+0x2f0>)
1a00e1a8:	1a8a      	subs	r2, r1, r2
1a00e1aa:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
1a00e1ae:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
1a00e1b2:	f5b1 2fa0 	cmp.w	r1, #327680	; 0x50000
1a00e1b6:	f300 816f 	bgt.w	1a00e498 <inv_process_compass_only_cal+0x348>
1a00e1ba:	f8d8 00a4 	ldr.w	r0, [r8, #164]	; 0xa4
1a00e1be:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
1a00e1c2:	1a41      	subs	r1, r0, r1
1a00e1c4:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
1a00e1c8:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
1a00e1cc:	f5b0 2fa0 	cmp.w	r0, #327680	; 0x50000
1a00e1d0:	f300 8162 	bgt.w	1a00e498 <inv_process_compass_only_cal+0x348>
1a00e1d4:	f8d8 40a8 	ldr.w	r4, [r8, #168]	; 0xa8
1a00e1d8:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
1a00e1dc:	1a20      	subs	r0, r4, r0
1a00e1de:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
1a00e1e2:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
1a00e1e6:	f5b4 2fa0 	cmp.w	r4, #327680	; 0x50000
1a00e1ea:	dc13      	bgt.n	1a00e214 <inv_process_compass_only_cal+0xc4>
1a00e1ec:	1209      	asrs	r1, r1, #8
1a00e1ee:	1212      	asrs	r2, r2, #8
1a00e1f0:	fb01 f101 	mul.w	r1, r1, r1
1a00e1f4:	1200      	asrs	r0, r0, #8
1a00e1f6:	fb02 1202 	mla	r2, r2, r2, r1
1a00e1fa:	fb00 2000 	mla	r0, r0, r0, r2
1a00e1fe:	f5b0 3f40 	cmp.w	r0, #196608	; 0x30000
1a00e202:	f280 8146 	bge.w	1a00e492 <inv_process_compass_only_cal+0x342>
1a00e206:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
1a00e20a:	2a00      	cmp	r2, #0
1a00e20c:	ddac      	ble.n	1a00e168 <inv_process_compass_only_cal+0x18>
1a00e20e:	3a01      	subs	r2, #1
1a00e210:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
1a00e214:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
1a00e218:	4c89      	ldr	r4, [pc, #548]	; (1a00e440 <inv_process_compass_only_cal+0x2f0>)
1a00e21a:	2b01      	cmp	r3, #1
1a00e21c:	f000 81ac 	beq.w	1a00e578 <inv_process_compass_only_cal+0x428>
1a00e220:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
1a00e224:	2b00      	cmp	r3, #0
1a00e226:	dd03      	ble.n	1a00e230 <inv_process_compass_only_cal+0xe0>
1a00e228:	4a85      	ldr	r2, [pc, #532]	; (1a00e440 <inv_process_compass_only_cal+0x2f0>)
1a00e22a:	3b01      	subs	r3, #1
1a00e22c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
1a00e230:	f8df b228 	ldr.w	fp, [pc, #552]	; 1a00e45c <inv_process_compass_only_cal+0x30c>
1a00e234:	2200      	movs	r2, #0
1a00e236:	2300      	movs	r3, #0
1a00e238:	e9db 0130 	ldrd	r0, r1, [fp, #192]	; 0xc0
1a00e23c:	f005 fe6c 	bl	1a013f18 <__aeabi_dcmpgt>
1a00e240:	b1b0      	cbz	r0, 1a00e270 <inv_process_compass_only_cal+0x120>
1a00e242:	22e8      	movs	r2, #232	; 0xe8
1a00e244:	4659      	mov	r1, fp
1a00e246:	a826      	add	r0, sp, #152	; 0x98
1a00e248:	f006 fc48 	bl	1a014adc <memcpy>
1a00e24c:	4658      	mov	r0, fp
1a00e24e:	a914      	add	r1, sp, #80	; 0x50
1a00e250:	f7fe fd78 	bl	1a00cd44 <inv_set_terms>
1a00e254:	4658      	mov	r0, fp
1a00e256:	f10b 01c8 	add.w	r1, fp, #200	; 0xc8
1a00e25a:	aa0e      	add	r2, sp, #56	; 0x38
1a00e25c:	f7fe fef8 	bl	1a00d050 <inv_compute_bias>
1a00e260:	2800      	cmp	r0, #0
1a00e262:	f040 8121 	bne.w	1a00e4a8 <inv_process_compass_only_cal+0x358>
1a00e266:	4658      	mov	r0, fp
1a00e268:	a926      	add	r1, sp, #152	; 0x98
1a00e26a:	22e8      	movs	r2, #232	; 0xe8
1a00e26c:	f006 fc36 	bl	1a014adc <memcpy>
1a00e270:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
1a00e274:	05da      	lsls	r2, r3, #23
1a00e276:	d504      	bpl.n	1a00e282 <inv_process_compass_only_cal+0x132>
1a00e278:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
1a00e27c:	05db      	lsls	r3, r3, #23
1a00e27e:	f100 8175 	bmi.w	1a00e56c <inv_process_compass_only_cal+0x41c>
1a00e282:	4d70      	ldr	r5, [pc, #448]	; (1a00e444 <inv_process_compass_only_cal+0x2f4>)
1a00e284:	2400      	movs	r4, #0
1a00e286:	e9cd 4508 	strd	r4, r5, [sp, #32]
1a00e28a:	4d6f      	ldr	r5, [pc, #444]	; (1a00e448 <inv_process_compass_only_cal+0x2f8>)
1a00e28c:	4b6f      	ldr	r3, [pc, #444]	; (1a00e44c <inv_process_compass_only_cal+0x2fc>)
1a00e28e:	2200      	movs	r2, #0
1a00e290:	e9d5 0130 	ldrd	r0, r1, [r5, #192]	; 0xc0
1a00e294:	f005 fe22 	bl	1a013edc <__aeabi_dcmplt>
1a00e298:	2800      	cmp	r0, #0
1a00e29a:	f47f af65 	bne.w	1a00e168 <inv_process_compass_only_cal+0x18>
1a00e29e:	4628      	mov	r0, r5
1a00e2a0:	f105 01c8 	add.w	r1, r5, #200	; 0xc8
1a00e2a4:	aa0e      	add	r2, sp, #56	; 0x38
1a00e2a6:	f7fe fed3 	bl	1a00d050 <inv_compute_bias>
1a00e2aa:	2800      	cmp	r0, #0
1a00e2ac:	f43f af5c 	beq.w	1a00e168 <inv_process_compass_only_cal+0x18>
1a00e2b0:	f8d8 00ac 	ldr.w	r0, [r8, #172]	; 0xac
1a00e2b4:	4d62      	ldr	r5, [pc, #392]	; (1a00e440 <inv_process_compass_only_cal+0x2f0>)
1a00e2b6:	f005 fb39 	bl	1a01392c <__aeabi_i2d>
1a00e2ba:	4602      	mov	r2, r0
1a00e2bc:	460b      	mov	r3, r1
1a00e2be:	a15e      	add	r1, pc, #376	; (adr r1, 1a00e438 <inv_process_compass_only_cal+0x2e8>)
1a00e2c0:	e9d1 0100 	ldrd	r0, r1, [r1]
1a00e2c4:	f005 fcc2 	bl	1a013c4c <__aeabi_ddiv>
1a00e2c8:	4b5f      	ldr	r3, [pc, #380]	; (1a00e448 <inv_process_compass_only_cal+0x2f8>)
1a00e2ca:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
1a00e2ce:	e9cd 2300 	strd	r2, r3, [sp]
1a00e2d2:	4b5d      	ldr	r3, [pc, #372]	; (1a00e448 <inv_process_compass_only_cal+0x2f8>)
1a00e2d4:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
1a00e2d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
1a00e2dc:	4b5a      	ldr	r3, [pc, #360]	; (1a00e448 <inv_process_compass_only_cal+0x2f8>)
1a00e2de:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
1a00e2e2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00e2e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a00e2ea:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
1a00e2ee:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00e2f2:	eb07 04c1 	add.w	r4, r7, r1, lsl #3
1a00e2f6:	e9c4 2300 	strd	r2, r3, [r4]
1a00e2fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00e2fe:	e9c4 2302 	strd	r2, r3, [r4, #8]
1a00e302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00e306:	3103      	adds	r1, #3
1a00e308:	2914      	cmp	r1, #20
1a00e30a:	e9c4 2304 	strd	r2, r3, [r4, #16]
1a00e30e:	f300 81be 	bgt.w	1a00e68e <inv_process_compass_only_cal+0x53e>
1a00e312:	f8c5 10a8 	str.w	r1, [r5, #168]	; 0xa8
1a00e316:	4c4a      	ldr	r4, [pc, #296]	; (1a00e440 <inv_process_compass_only_cal+0x2f0>)
1a00e318:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
1a00e31c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a00e31e:	ad1a      	add	r5, sp, #104	; 0x68
1a00e320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a00e322:	e894 0003 	ldmia.w	r4, {r0, r1}
1a00e326:	f1a4 0710 	sub.w	r7, r4, #16
1a00e32a:	463e      	mov	r6, r7
1a00e32c:	e885 0003 	stmia.w	r5, {r0, r1}
1a00e330:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1a00e332:	ad20      	add	r5, sp, #128	; 0x80
1a00e334:	9507      	str	r5, [sp, #28]
1a00e336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a00e338:	e894 0003 	ldmia.w	r4, {r0, r1}
1a00e33c:	e885 0003 	stmia.w	r5, {r0, r1}
1a00e340:	f04f 0a02 	mov.w	sl, #2
1a00e344:	ae1a      	add	r6, sp, #104	; 0x68
1a00e346:	eb07 09ca 	add.w	r9, r7, sl, lsl #3
1a00e34a:	f10d 0880 	add.w	r8, sp, #128	; 0x80
1a00e34e:	e9f9 4502 	ldrd	r4, r5, [r9, #8]!
1a00e352:	e8f6 0102 	ldrd	r0, r1, [r6], #8
1a00e356:	4622      	mov	r2, r4
1a00e358:	462b      	mov	r3, r5
1a00e35a:	f005 fddd 	bl	1a013f18 <__aeabi_dcmpgt>
1a00e35e:	b108      	cbz	r0, 1a00e364 <inv_process_compass_only_cal+0x214>
1a00e360:	e946 4502 	strd	r4, r5, [r6, #-8]
1a00e364:	e8f8 2302 	ldrd	r2, r3, [r8], #8
1a00e368:	4620      	mov	r0, r4
1a00e36a:	4629      	mov	r1, r5
1a00e36c:	f005 fdd4 	bl	1a013f18 <__aeabi_dcmpgt>
1a00e370:	b108      	cbz	r0, 1a00e376 <inv_process_compass_only_cal+0x226>
1a00e372:	e948 4502 	strd	r4, r5, [r8, #-8]
1a00e376:	9c07      	ldr	r4, [sp, #28]
1a00e378:	42a6      	cmp	r6, r4
1a00e37a:	d1e8      	bne.n	1a00e34e <inv_process_compass_only_cal+0x1fe>
1a00e37c:	f10a 0a03 	add.w	sl, sl, #3
1a00e380:	f1ba 0f14 	cmp.w	sl, #20
1a00e384:	d1de      	bne.n	1a00e344 <inv_process_compass_only_cal+0x1f4>
1a00e386:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
1a00e38a:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
1a00e38e:	f005 f97f 	bl	1a013690 <__aeabi_dsub>
1a00e392:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
1a00e396:	4604      	mov	r4, r0
1a00e398:	460d      	mov	r5, r1
1a00e39a:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
1a00e39e:	f005 f977 	bl	1a013690 <__aeabi_dsub>
1a00e3a2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
1a00e3a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00e3aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00e3ae:	4620      	mov	r0, r4
1a00e3b0:	4629      	mov	r1, r5
1a00e3b2:	f005 fdb1 	bl	1a013f18 <__aeabi_dcmpgt>
1a00e3b6:	b108      	cbz	r0, 1a00e3bc <inv_process_compass_only_cal+0x26c>
1a00e3b8:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
1a00e3bc:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
1a00e3c0:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
1a00e3c4:	f005 f964 	bl	1a013690 <__aeabi_dsub>
1a00e3c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00e3cc:	4604      	mov	r4, r0
1a00e3ce:	460d      	mov	r5, r1
1a00e3d0:	f005 fd84 	bl	1a013edc <__aeabi_dcmplt>
1a00e3d4:	b108      	cbz	r0, 1a00e3da <inv_process_compass_only_cal+0x28a>
1a00e3d6:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
1a00e3da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00e3de:	4622      	mov	r2, r4
1a00e3e0:	462b      	mov	r3, r5
1a00e3e2:	f005 fd7b 	bl	1a013edc <__aeabi_dcmplt>
1a00e3e6:	b130      	cbz	r0, 1a00e3f6 <inv_process_compass_only_cal+0x2a6>
1a00e3e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00e3ec:	2200      	movs	r2, #0
1a00e3ee:	4b18      	ldr	r3, [pc, #96]	; (1a00e450 <inv_process_compass_only_cal+0x300>)
1a00e3f0:	f005 fd74 	bl	1a013edc <__aeabi_dcmplt>
1a00e3f4:	b9e8      	cbnz	r0, 1a00e432 <inv_process_compass_only_cal+0x2e2>
1a00e3f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00e3fa:	4622      	mov	r2, r4
1a00e3fc:	462b      	mov	r3, r5
1a00e3fe:	f005 fd8b 	bl	1a013f18 <__aeabi_dcmpgt>
1a00e402:	2800      	cmp	r0, #0
1a00e404:	f000 814b 	beq.w	1a00e69e <inv_process_compass_only_cal+0x54e>
1a00e408:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00e40c:	2200      	movs	r2, #0
1a00e40e:	4b11      	ldr	r3, [pc, #68]	; (1a00e454 <inv_process_compass_only_cal+0x304>)
1a00e410:	f005 fd64 	bl	1a013edc <__aeabi_dcmplt>
1a00e414:	2800      	cmp	r0, #0
1a00e416:	f040 8153 	bne.w	1a00e6c0 <inv_process_compass_only_cal+0x570>
1a00e41a:	4e0b      	ldr	r6, [pc, #44]	; (1a00e448 <inv_process_compass_only_cal+0x2f8>)
1a00e41c:	e9d6 4530 	ldrd	r4, r5, [r6, #192]	; 0xc0
1a00e420:	4620      	mov	r0, r4
1a00e422:	4629      	mov	r1, r5
1a00e424:	2200      	movs	r2, #0
1a00e426:	4b0c      	ldr	r3, [pc, #48]	; (1a00e458 <inv_process_compass_only_cal+0x308>)
1a00e428:	f005 fd76 	bl	1a013f18 <__aeabi_dcmpgt>
1a00e42c:	2800      	cmp	r0, #0
1a00e42e:	f43f ae9b 	beq.w	1a00e168 <inv_process_compass_only_cal+0x18>
1a00e432:	f7ff fe65 	bl	1a00e100 <inv_reset_data_collection>
1a00e436:	e697      	b.n	1a00e168 <inv_process_compass_only_cal+0x18>
1a00e438:	9999999a 	.word	0x9999999a
1a00e43c:	41a99999 	.word	0x41a99999
1a00e440:	10088ad8 	.word	0x10088ad8
1a00e444:	40080000 	.word	0x40080000
1a00e448:	10088908 	.word	0x10088908
1a00e44c:	40340000 	.word	0x40340000
1a00e450:	3ff80000 	.word	0x3ff80000
1a00e454:	40100000 	.word	0x40100000
1a00e458:	409f4000 	.word	0x409f4000
1a00e45c:	100889f0 	.word	0x100889f0
1a00e460:	f108 0018 	add.w	r0, r8, #24
1a00e464:	f7f9 fc16 	bl	1a007c94 <inv_get_gyro_sum_of_sqr>
1a00e468:	f5b0 4fc8 	cmp.w	r0, #25600	; 0x6400
1a00e46c:	f080 8113 	bcs.w	1a00e696 <inv_process_compass_only_cal+0x546>
1a00e470:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
1a00e474:	2b00      	cmp	r3, #0
1a00e476:	f77f ae77 	ble.w	1a00e168 <inv_process_compass_only_cal+0x18>
1a00e47a:	4a8b      	ldr	r2, [pc, #556]	; (1a00e6a8 <inv_process_compass_only_cal+0x558>)
1a00e47c:	3b01      	subs	r3, #1
1a00e47e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
1a00e482:	e6c7      	b.n	1a00e214 <inv_process_compass_only_cal+0xc4>
1a00e484:	f507 7090 	add.w	r0, r7, #288	; 0x120
1a00e488:	f7fd fd86 	bl	1a00bf98 <inv_check_sample_balance>
1a00e48c:	f8c7 4174 	str.w	r4, [r7, #372]	; 0x174
1a00e490:	e680      	b.n	1a00e194 <inv_process_compass_only_cal+0x44>
1a00e492:	2204      	movs	r2, #4
1a00e494:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
1a00e498:	f108 02a0 	add.w	r2, r8, #160	; 0xa0
1a00e49c:	ca07      	ldmia	r2, {r0, r1, r2}
1a00e49e:	f503 738a 	add.w	r3, r3, #276	; 0x114
1a00e4a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
1a00e4a6:	e6b5      	b.n	1a00e214 <inv_process_compass_only_cal+0xc4>
1a00e4a8:	4658      	mov	r0, fp
1a00e4aa:	f10b 01c8 	add.w	r1, fp, #200	; 0xc8
1a00e4ae:	f7ff f995 	bl	1a00d7dc <inv_center_sum>
1a00e4b2:	4e7e      	ldr	r6, [pc, #504]	; (1a00e6ac <inv_process_compass_only_cal+0x55c>)
1a00e4b4:	e9d6 2300 	ldrd	r2, r3, [r6]
1a00e4b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
1a00e4bc:	f005 f8e8 	bl	1a013690 <__aeabi_dsub>
1a00e4c0:	2200      	movs	r2, #0
1a00e4c2:	4604      	mov	r4, r0
1a00e4c4:	460d      	mov	r5, r1
1a00e4c6:	4b7a      	ldr	r3, [pc, #488]	; (1a00e6b0 <inv_process_compass_only_cal+0x560>)
1a00e4c8:	e9db 0130 	ldrd	r0, r1, [fp, #192]	; 0xc0
1a00e4cc:	f005 f8e0 	bl	1a013690 <__aeabi_dsub>
1a00e4d0:	4602      	mov	r2, r0
1a00e4d2:	460b      	mov	r3, r1
1a00e4d4:	4620      	mov	r0, r4
1a00e4d6:	4629      	mov	r1, r5
1a00e4d8:	f005 fbb8 	bl	1a013c4c <__aeabi_ddiv>
1a00e4dc:	f007 f8ca 	bl	1a015674 <sqrt>
1a00e4e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00e4e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00e4e8:	4610      	mov	r0, r2
1a00e4ea:	4619      	mov	r1, r3
1a00e4ec:	e9db 4530 	ldrd	r4, r5, [fp, #192]	; 0xc0
1a00e4f0:	f005 f8d0 	bl	1a013694 <__adddf3>
1a00e4f4:	2200      	movs	r2, #0
1a00e4f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00e4fa:	4b6d      	ldr	r3, [pc, #436]	; (1a00e6b0 <inv_process_compass_only_cal+0x560>)
1a00e4fc:	4620      	mov	r0, r4
1a00e4fe:	4629      	mov	r1, r5
1a00e500:	f005 f8c6 	bl	1a013690 <__aeabi_dsub>
1a00e504:	4602      	mov	r2, r0
1a00e506:	460b      	mov	r3, r1
1a00e508:	4620      	mov	r0, r4
1a00e50a:	4629      	mov	r1, r5
1a00e50c:	f005 fa74 	bl	1a0139f8 <__aeabi_dmul>
1a00e510:	4602      	mov	r2, r0
1a00e512:	460b      	mov	r3, r1
1a00e514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00e518:	f005 fb98 	bl	1a013c4c <__aeabi_ddiv>
1a00e51c:	2200      	movs	r2, #0
1a00e51e:	2300      	movs	r3, #0
1a00e520:	4604      	mov	r4, r0
1a00e522:	460d      	mov	r5, r1
1a00e524:	f005 fcda 	bl	1a013edc <__aeabi_dcmplt>
1a00e528:	b118      	cbz	r0, 1a00e532 <inv_process_compass_only_cal+0x3e2>
1a00e52a:	4620      	mov	r0, r4
1a00e52c:	4629      	mov	r1, r5
1a00e52e:	f007 f8a1 	bl	1a015674 <sqrt>
1a00e532:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
1a00e536:	4c5c      	ldr	r4, [pc, #368]	; (1a00e6a8 <inv_process_compass_only_cal+0x558>)
1a00e538:	f005 fa0a 	bl	1a013950 <__aeabi_f2d>
1a00e53c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
1a00e540:	f005 fa5a 	bl	1a0139f8 <__aeabi_dmul>
1a00e544:	4602      	mov	r2, r0
1a00e546:	460b      	mov	r3, r1
1a00e548:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00e54c:	f005 fce4 	bl	1a013f18 <__aeabi_dcmpgt>
1a00e550:	2800      	cmp	r0, #0
1a00e552:	f040 808f 	bne.w	1a00e674 <inv_process_compass_only_cal+0x524>
1a00e556:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
1a00e55a:	2b00      	cmp	r3, #0
1a00e55c:	f340 81f0 	ble.w	1a00e940 <inv_process_compass_only_cal+0x7f0>
1a00e560:	a926      	add	r1, sp, #152	; 0x98
1a00e562:	22e8      	movs	r2, #232	; 0xe8
1a00e564:	4853      	ldr	r0, [pc, #332]	; (1a00e6b4 <inv_process_compass_only_cal+0x564>)
1a00e566:	f006 fab9 	bl	1a014adc <memcpy>
1a00e56a:	e681      	b.n	1a00e270 <inv_process_compass_only_cal+0x120>
1a00e56c:	4852      	ldr	r0, [pc, #328]	; (1a00e6b8 <inv_process_compass_only_cal+0x568>)
1a00e56e:	f7ff fd1b 	bl	1a00dfa8 <inv_check_sim>
1a00e572:	e9cd 0108 	strd	r0, r1, [sp, #32]
1a00e576:	e688      	b.n	1a00e28a <inv_process_compass_only_cal+0x13a>
1a00e578:	f9b8 108c 	ldrsh.w	r1, [r8, #140]	; 0x8c
1a00e57c:	f9b8 208e 	ldrsh.w	r2, [r8, #142]	; 0x8e
1a00e580:	f9b8 3090 	ldrsh.w	r3, [r8, #144]	; 0x90
1a00e584:	9114      	str	r1, [sp, #80]	; 0x50
1a00e586:	484d      	ldr	r0, [pc, #308]	; (1a00e6bc <inv_process_compass_only_cal+0x56c>)
1a00e588:	9215      	str	r2, [sp, #84]	; 0x54
1a00e58a:	a914      	add	r1, sp, #80	; 0x50
1a00e58c:	9316      	str	r3, [sp, #88]	; 0x58
1a00e58e:	f7fe fbd9 	bl	1a00cd44 <inv_set_terms>
1a00e592:	f8b8 308c 	ldrh.w	r3, [r8, #140]	; 0x8c
1a00e596:	f9b4 10bc 	ldrsh.w	r1, [r4, #188]	; 0xbc
1a00e59a:	b21a      	sxth	r2, r3
1a00e59c:	4291      	cmp	r1, r2
1a00e59e:	da0c      	bge.n	1a00e5ba <inv_process_compass_only_cal+0x46a>
1a00e5a0:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
1a00e5a4:	f8b8 308e 	ldrh.w	r3, [r8, #142]	; 0x8e
1a00e5a8:	f8a4 30be 	strh.w	r3, [r4, #190]	; 0xbe
1a00e5ac:	f8b8 3090 	ldrh.w	r3, [r8, #144]	; 0x90
1a00e5b0:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
1a00e5b4:	f8b8 308c 	ldrh.w	r3, [r8, #140]	; 0x8c
1a00e5b8:	b21a      	sxth	r2, r3
1a00e5ba:	f9b7 00c2 	ldrsh.w	r0, [r7, #194]	; 0xc2
1a00e5be:	493a      	ldr	r1, [pc, #232]	; (1a00e6a8 <inv_process_compass_only_cal+0x558>)
1a00e5c0:	4290      	cmp	r0, r2
1a00e5c2:	dd09      	ble.n	1a00e5d8 <inv_process_compass_only_cal+0x488>
1a00e5c4:	f8a1 30c2 	strh.w	r3, [r1, #194]	; 0xc2
1a00e5c8:	f8b8 308e 	ldrh.w	r3, [r8, #142]	; 0x8e
1a00e5cc:	f8a1 30c4 	strh.w	r3, [r1, #196]	; 0xc4
1a00e5d0:	f8b8 3090 	ldrh.w	r3, [r8, #144]	; 0x90
1a00e5d4:	f8a1 30c6 	strh.w	r3, [r1, #198]	; 0xc6
1a00e5d8:	f9b7 10ca 	ldrsh.w	r1, [r7, #202]	; 0xca
1a00e5dc:	f9b8 308e 	ldrsh.w	r3, [r8, #142]	; 0x8e
1a00e5e0:	4a31      	ldr	r2, [pc, #196]	; (1a00e6a8 <inv_process_compass_only_cal+0x558>)
1a00e5e2:	4299      	cmp	r1, r3
1a00e5e4:	da0d      	bge.n	1a00e602 <inv_process_compass_only_cal+0x4b2>
1a00e5e6:	f8b8 308c 	ldrh.w	r3, [r8, #140]	; 0x8c
1a00e5ea:	f8a2 30c8 	strh.w	r3, [r2, #200]	; 0xc8
1a00e5ee:	f8b8 308e 	ldrh.w	r3, [r8, #142]	; 0x8e
1a00e5f2:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca
1a00e5f6:	f8b8 3090 	ldrh.w	r3, [r8, #144]	; 0x90
1a00e5fa:	f8a2 30cc 	strh.w	r3, [r2, #204]	; 0xcc
1a00e5fe:	f9b8 308e 	ldrsh.w	r3, [r8, #142]	; 0x8e
1a00e602:	f9b7 10d0 	ldrsh.w	r1, [r7, #208]	; 0xd0
1a00e606:	4a28      	ldr	r2, [pc, #160]	; (1a00e6a8 <inv_process_compass_only_cal+0x558>)
1a00e608:	4299      	cmp	r1, r3
1a00e60a:	dd0b      	ble.n	1a00e624 <inv_process_compass_only_cal+0x4d4>
1a00e60c:	f8b8 308c 	ldrh.w	r3, [r8, #140]	; 0x8c
1a00e610:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
1a00e614:	f8b8 308e 	ldrh.w	r3, [r8, #142]	; 0x8e
1a00e618:	f8a2 30d0 	strh.w	r3, [r2, #208]	; 0xd0
1a00e61c:	f8b8 3090 	ldrh.w	r3, [r8, #144]	; 0x90
1a00e620:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
1a00e624:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
1a00e628:	f9b8 3090 	ldrsh.w	r3, [r8, #144]	; 0x90
1a00e62c:	4a1e      	ldr	r2, [pc, #120]	; (1a00e6a8 <inv_process_compass_only_cal+0x558>)
1a00e62e:	4299      	cmp	r1, r3
1a00e630:	da0d      	bge.n	1a00e64e <inv_process_compass_only_cal+0x4fe>
1a00e632:	f8b8 308c 	ldrh.w	r3, [r8, #140]	; 0x8c
1a00e636:	f8a2 30d4 	strh.w	r3, [r2, #212]	; 0xd4
1a00e63a:	f8b8 308e 	ldrh.w	r3, [r8, #142]	; 0x8e
1a00e63e:	f8a2 30d6 	strh.w	r3, [r2, #214]	; 0xd6
1a00e642:	f8b8 3090 	ldrh.w	r3, [r8, #144]	; 0x90
1a00e646:	f8a2 30d8 	strh.w	r3, [r2, #216]	; 0xd8
1a00e64a:	f9b8 3090 	ldrsh.w	r3, [r8, #144]	; 0x90
1a00e64e:	f9b7 10de 	ldrsh.w	r1, [r7, #222]	; 0xde
1a00e652:	4a15      	ldr	r2, [pc, #84]	; (1a00e6a8 <inv_process_compass_only_cal+0x558>)
1a00e654:	4299      	cmp	r1, r3
1a00e656:	f77f ade3 	ble.w	1a00e220 <inv_process_compass_only_cal+0xd0>
1a00e65a:	f8b8 308c 	ldrh.w	r3, [r8, #140]	; 0x8c
1a00e65e:	f8a2 30da 	strh.w	r3, [r2, #218]	; 0xda
1a00e662:	f8b8 308e 	ldrh.w	r3, [r8, #142]	; 0x8e
1a00e666:	f8a2 30dc 	strh.w	r3, [r2, #220]	; 0xdc
1a00e66a:	f8b8 3090 	ldrh.w	r3, [r8, #144]	; 0x90
1a00e66e:	f8a2 30de 	strh.w	r3, [r2, #222]	; 0xde
1a00e672:	e5d5      	b.n	1a00e220 <inv_process_compass_only_cal+0xd0>
1a00e674:	a926      	add	r1, sp, #152	; 0x98
1a00e676:	22e8      	movs	r2, #232	; 0xe8
1a00e678:	480e      	ldr	r0, [pc, #56]	; (1a00e6b4 <inv_process_compass_only_cal+0x564>)
1a00e67a:	f006 fa2f 	bl	1a014adc <memcpy>
1a00e67e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00e682:	f002 f949 	bl	1a010918 <inv_set_magnetic_disturbance>
1a00e686:	230a      	movs	r3, #10
1a00e688:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
1a00e68c:	e5f0      	b.n	1a00e270 <inv_process_compass_only_cal+0x120>
1a00e68e:	2300      	movs	r3, #0
1a00e690:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
1a00e694:	e63f      	b.n	1a00e316 <inv_process_compass_only_cal+0x1c6>
1a00e696:	2304      	movs	r3, #4
1a00e698:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
1a00e69c:	e5ba      	b.n	1a00e214 <inv_process_compass_only_cal+0xc4>
1a00e69e:	4807      	ldr	r0, [pc, #28]	; (1a00e6bc <inv_process_compass_only_cal+0x56c>)
1a00e6a0:	e9d0 4530 	ldrd	r4, r5, [r0, #192]	; 0xc0
1a00e6a4:	e6bc      	b.n	1a00e420 <inv_process_compass_only_cal+0x2d0>
1a00e6a6:	bf00      	nop
1a00e6a8:	10088ad8 	.word	0x10088ad8
1a00e6ac:	10088bd8 	.word	0x10088bd8
1a00e6b0:	3ff00000 	.word	0x3ff00000
1a00e6b4:	100889f0 	.word	0x100889f0
1a00e6b8:	10088c80 	.word	0x10088c80
1a00e6bc:	10088908 	.word	0x10088908
1a00e6c0:	4895      	ldr	r0, [pc, #596]	; (1a00e918 <inv_process_compass_only_cal+0x7c8>)
1a00e6c2:	4b96      	ldr	r3, [pc, #600]	; (1a00e91c <inv_process_compass_only_cal+0x7cc>)
1a00e6c4:	4e94      	ldr	r6, [pc, #592]	; (1a00e918 <inv_process_compass_only_cal+0x7c8>)
1a00e6c6:	e9d0 4530 	ldrd	r4, r5, [r0, #192]	; 0xc0
1a00e6ca:	2200      	movs	r2, #0
1a00e6cc:	4620      	mov	r0, r4
1a00e6ce:	4629      	mov	r1, r5
1a00e6d0:	f005 fc22 	bl	1a013f18 <__aeabi_dcmpgt>
1a00e6d4:	2800      	cmp	r0, #0
1a00e6d6:	f43f aea3 	beq.w	1a00e420 <inv_process_compass_only_cal+0x2d0>
1a00e6da:	e9db 0130 	ldrd	r0, r1, [fp, #192]	; 0xc0
1a00e6de:	2200      	movs	r2, #0
1a00e6e0:	2300      	movs	r3, #0
1a00e6e2:	f8df a254 	ldr.w	sl, [pc, #596]	; 1a00e938 <inv_process_compass_only_cal+0x7e8>
1a00e6e6:	f005 fbef 	bl	1a013ec8 <__aeabi_dcmpeq>
1a00e6ea:	2800      	cmp	r0, #0
1a00e6ec:	f040 8162 	bne.w	1a00e9b4 <inv_process_compass_only_cal+0x864>
1a00e6f0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
1a00e6f4:	f8df 9244 	ldr.w	r9, [pc, #580]	; 1a00e93c <inv_process_compass_only_cal+0x7ec>
1a00e6f8:	f005 f918 	bl	1a01392c <__aeabi_i2d>
1a00e6fc:	4622      	mov	r2, r4
1a00e6fe:	462b      	mov	r3, r5
1a00e700:	f005 faa4 	bl	1a013c4c <__aeabi_ddiv>
1a00e704:	a380      	add	r3, pc, #512	; (adr r3, 1a00e908 <inv_process_compass_only_cal+0x7b8>)
1a00e706:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00e70a:	f005 fc05 	bl	1a013f18 <__aeabi_dcmpgt>
1a00e70e:	2800      	cmp	r0, #0
1a00e710:	f47f ae8f 	bne.w	1a00e432 <inv_process_compass_only_cal+0x2e2>
1a00e714:	4630      	mov	r0, r6
1a00e716:	f106 01c8 	add.w	r1, r6, #200	; 0xc8
1a00e71a:	f7ff f85f 	bl	1a00d7dc <inv_center_sum>
1a00e71e:	4602      	mov	r2, r0
1a00e720:	460b      	mov	r3, r1
1a00e722:	e9cd 0108 	strd	r0, r1, [sp, #32]
1a00e726:	f004 ffb5 	bl	1a013694 <__adddf3>
1a00e72a:	2200      	movs	r2, #0
1a00e72c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00e730:	4b7b      	ldr	r3, [pc, #492]	; (1a00e920 <inv_process_compass_only_cal+0x7d0>)
1a00e732:	4620      	mov	r0, r4
1a00e734:	4629      	mov	r1, r5
1a00e736:	f004 ffab 	bl	1a013690 <__aeabi_dsub>
1a00e73a:	4602      	mov	r2, r0
1a00e73c:	460b      	mov	r3, r1
1a00e73e:	4620      	mov	r0, r4
1a00e740:	4629      	mov	r1, r5
1a00e742:	f005 f959 	bl	1a0139f8 <__aeabi_dmul>
1a00e746:	4602      	mov	r2, r0
1a00e748:	460b      	mov	r3, r1
1a00e74a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00e74e:	f005 fa7d 	bl	1a013c4c <__aeabi_ddiv>
1a00e752:	f006 ff8f 	bl	1a015674 <sqrt>
1a00e756:	4604      	mov	r4, r0
1a00e758:	f8d9 00e8 	ldr.w	r0, [r9, #232]	; 0xe8
1a00e75c:	460d      	mov	r5, r1
1a00e75e:	f005 f8f7 	bl	1a013950 <__aeabi_f2d>
1a00e762:	e9d9 2338 	ldrd	r2, r3, [r9, #224]	; 0xe0
1a00e766:	f005 f947 	bl	1a0139f8 <__aeabi_dmul>
1a00e76a:	4602      	mov	r2, r0
1a00e76c:	460b      	mov	r3, r1
1a00e76e:	4620      	mov	r0, r4
1a00e770:	4629      	mov	r1, r5
1a00e772:	f005 fbd1 	bl	1a013f18 <__aeabi_dcmpgt>
1a00e776:	2800      	cmp	r0, #0
1a00e778:	f47f ae5b 	bne.w	1a00e432 <inv_process_compass_only_cal+0x2e2>
1a00e77c:	f8d9 00ac 	ldr.w	r0, [r9, #172]	; 0xac
1a00e780:	f005 f8d4 	bl	1a01392c <__aeabi_i2d>
1a00e784:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
1a00e788:	4602      	mov	r2, r0
1a00e78a:	460b      	mov	r3, r1
1a00e78c:	4620      	mov	r0, r4
1a00e78e:	4629      	mov	r1, r5
1a00e790:	f005 fbc2 	bl	1a013f18 <__aeabi_dcmpgt>
1a00e794:	2800      	cmp	r0, #0
1a00e796:	f47f ace7 	bne.w	1a00e168 <inv_process_compass_only_cal+0x18>
1a00e79a:	f8d9 00b0 	ldr.w	r0, [r9, #176]	; 0xb0
1a00e79e:	f005 f8c5 	bl	1a01392c <__aeabi_i2d>
1a00e7a2:	4602      	mov	r2, r0
1a00e7a4:	460b      	mov	r3, r1
1a00e7a6:	4620      	mov	r0, r4
1a00e7a8:	4629      	mov	r1, r5
1a00e7aa:	f005 fb97 	bl	1a013edc <__aeabi_dcmplt>
1a00e7ae:	2800      	cmp	r0, #0
1a00e7b0:	f47f acda 	bne.w	1a00e168 <inv_process_compass_only_cal+0x18>
1a00e7b4:	4620      	mov	r0, r4
1a00e7b6:	4629      	mov	r1, r5
1a00e7b8:	f7fe f8ce 	bl	1a00c958 <inv_check_peaks.part.0.constprop.4>
1a00e7bc:	2800      	cmp	r0, #0
1a00e7be:	f47f acd3 	bne.w	1a00e168 <inv_process_compass_only_cal+0x18>
1a00e7c2:	e9da 2332 	ldrd	r2, r3, [sl, #200]	; 0xc8
1a00e7c6:	e9d6 0132 	ldrd	r0, r1, [r6, #200]	; 0xc8
1a00e7ca:	f004 ff61 	bl	1a013690 <__aeabi_dsub>
1a00e7ce:	e9da 2334 	ldrd	r2, r3, [sl, #208]	; 0xd0
1a00e7d2:	4604      	mov	r4, r0
1a00e7d4:	460d      	mov	r5, r1
1a00e7d6:	e9d6 0134 	ldrd	r0, r1, [r6, #208]	; 0xd0
1a00e7da:	f004 ff59 	bl	1a013690 <__aeabi_dsub>
1a00e7de:	e9da 2336 	ldrd	r2, r3, [sl, #216]	; 0xd8
1a00e7e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00e7e6:	e9d6 0136 	ldrd	r0, r1, [r6, #216]	; 0xd8
1a00e7ea:	f004 ff51 	bl	1a013690 <__aeabi_dsub>
1a00e7ee:	4622      	mov	r2, r4
1a00e7f0:	4682      	mov	sl, r0
1a00e7f2:	468b      	mov	fp, r1
1a00e7f4:	462b      	mov	r3, r5
1a00e7f6:	4620      	mov	r0, r4
1a00e7f8:	4629      	mov	r1, r5
1a00e7fa:	f005 f8fd 	bl	1a0139f8 <__aeabi_dmul>
1a00e7fe:	4604      	mov	r4, r0
1a00e800:	460d      	mov	r5, r1
1a00e802:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00e806:	4602      	mov	r2, r0
1a00e808:	460b      	mov	r3, r1
1a00e80a:	f005 f8f5 	bl	1a0139f8 <__aeabi_dmul>
1a00e80e:	4602      	mov	r2, r0
1a00e810:	460b      	mov	r3, r1
1a00e812:	4620      	mov	r0, r4
1a00e814:	4629      	mov	r1, r5
1a00e816:	f004 ff3d 	bl	1a013694 <__adddf3>
1a00e81a:	4652      	mov	r2, sl
1a00e81c:	4604      	mov	r4, r0
1a00e81e:	460d      	mov	r5, r1
1a00e820:	465b      	mov	r3, fp
1a00e822:	4650      	mov	r0, sl
1a00e824:	4659      	mov	r1, fp
1a00e826:	f005 f8e7 	bl	1a0139f8 <__aeabi_dmul>
1a00e82a:	4602      	mov	r2, r0
1a00e82c:	460b      	mov	r3, r1
1a00e82e:	4620      	mov	r0, r4
1a00e830:	4629      	mov	r1, r5
1a00e832:	f004 ff2f 	bl	1a013694 <__adddf3>
1a00e836:	f006 ff1d 	bl	1a015674 <sqrt>
1a00e83a:	4604      	mov	r4, r0
1a00e83c:	460d      	mov	r5, r1
1a00e83e:	f8d8 00ac 	ldr.w	r0, [r8, #172]	; 0xac
1a00e842:	f005 f873 	bl	1a01392c <__aeabi_i2d>
1a00e846:	4622      	mov	r2, r4
1a00e848:	462b      	mov	r3, r5
1a00e84a:	f005 f8d5 	bl	1a0139f8 <__aeabi_dmul>
1a00e84e:	2200      	movs	r2, #0
1a00e850:	4b34      	ldr	r3, [pc, #208]	; (1a00e924 <inv_process_compass_only_cal+0x7d4>)
1a00e852:	f005 f8d1 	bl	1a0139f8 <__aeabi_dmul>
1a00e856:	2200      	movs	r2, #0
1a00e858:	4b33      	ldr	r3, [pc, #204]	; (1a00e928 <inv_process_compass_only_cal+0x7d8>)
1a00e85a:	4604      	mov	r4, r0
1a00e85c:	460d      	mov	r5, r1
1a00e85e:	f005 fb5b 	bl	1a013f18 <__aeabi_dcmpgt>
1a00e862:	b9c8      	cbnz	r0, 1a00e898 <inv_process_compass_only_cal+0x748>
1a00e864:	4620      	mov	r0, r4
1a00e866:	4629      	mov	r1, r5
1a00e868:	2200      	movs	r2, #0
1a00e86a:	4b30      	ldr	r3, [pc, #192]	; (1a00e92c <inv_process_compass_only_cal+0x7dc>)
1a00e86c:	f005 fb54 	bl	1a013f18 <__aeabi_dcmpgt>
1a00e870:	2800      	cmp	r0, #0
1a00e872:	f43f adde 	beq.w	1a00e432 <inv_process_compass_only_cal+0x2e2>
1a00e876:	4d28      	ldr	r5, [pc, #160]	; (1a00e918 <inv_process_compass_only_cal+0x7c8>)
1a00e878:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
1a00e87c:	f005 f856 	bl	1a01392c <__aeabi_i2d>
1a00e880:	e9d5 2330 	ldrd	r2, r3, [r5, #192]	; 0xc0
1a00e884:	f005 f9e2 	bl	1a013c4c <__aeabi_ddiv>
1a00e888:	a321      	add	r3, pc, #132	; (adr r3, 1a00e910 <inv_process_compass_only_cal+0x7c0>)
1a00e88a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00e88e:	f005 fb25 	bl	1a013edc <__aeabi_dcmplt>
1a00e892:	2800      	cmp	r0, #0
1a00e894:	f43f adcd 	beq.w	1a00e432 <inv_process_compass_only_cal+0x2e2>
1a00e898:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
1a00e89c:	2b01      	cmp	r3, #1
1a00e89e:	f47f adc8 	bne.w	1a00e432 <inv_process_compass_only_cal+0x2e2>
1a00e8a2:	4e1d      	ldr	r6, [pc, #116]	; (1a00e918 <inv_process_compass_only_cal+0x7c8>)
1a00e8a4:	4c22      	ldr	r4, [pc, #136]	; (1a00e930 <inv_process_compass_only_cal+0x7e0>)
1a00e8a6:	2000      	movs	r0, #0
1a00e8a8:	f7fa faf2 	bl	1a008e90 <inv_set_compass_state>
1a00e8ac:	e9d6 0132 	ldrd	r0, r1, [r6, #200]	; 0xc8
1a00e8b0:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
1a00e8b4:	2200      	movs	r2, #0
1a00e8b6:	4b1f      	ldr	r3, [pc, #124]	; (1a00e934 <inv_process_compass_only_cal+0x7e4>)
1a00e8b8:	e9c4 6700 	strd	r6, r7, [r4]
1a00e8bc:	f005 f89c 	bl	1a0139f8 <__aeabi_dmul>
1a00e8c0:	f005 fb34 	bl	1a013f2c <__aeabi_d2iz>
1a00e8c4:	4f14      	ldr	r7, [pc, #80]	; (1a00e918 <inv_process_compass_only_cal+0x7c8>)
1a00e8c6:	4b1b      	ldr	r3, [pc, #108]	; (1a00e934 <inv_process_compass_only_cal+0x7e4>)
1a00e8c8:	9011      	str	r0, [sp, #68]	; 0x44
1a00e8ca:	2200      	movs	r2, #0
1a00e8cc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
1a00e8d0:	f005 f892 	bl	1a0139f8 <__aeabi_dmul>
1a00e8d4:	f005 fb2a 	bl	1a013f2c <__aeabi_d2iz>
1a00e8d8:	2200      	movs	r2, #0
1a00e8da:	4b16      	ldr	r3, [pc, #88]	; (1a00e934 <inv_process_compass_only_cal+0x7e4>)
1a00e8dc:	9012      	str	r0, [sp, #72]	; 0x48
1a00e8de:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
1a00e8e2:	f005 f889 	bl	1a0139f8 <__aeabi_dmul>
1a00e8e6:	f005 fb21 	bl	1a013f2c <__aeabi_d2iz>
1a00e8ea:	2103      	movs	r1, #3
1a00e8ec:	9013      	str	r0, [sp, #76]	; 0x4c
1a00e8ee:	a811      	add	r0, sp, #68	; 0x44
1a00e8f0:	f7f8 fb4a 	bl	1a006f88 <inv_set_compass_bias>
1a00e8f4:	4810      	ldr	r0, [pc, #64]	; (1a00e938 <inv_process_compass_only_cal+0x7e8>)
1a00e8f6:	4639      	mov	r1, r7
1a00e8f8:	2200      	movs	r2, #0
1a00e8fa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
1a00e8fe:	f7fe f977 	bl	1a00cbf0 <inv_combine_compass_data>
1a00e902:	e596      	b.n	1a00e432 <inv_process_compass_only_cal+0x2e2>
1a00e904:	f3af 8000 	nop.w
1a00e908:	70a3d70a 	.word	0x70a3d70a
1a00e90c:	3fe70a3d 	.word	0x3fe70a3d
1a00e910:	33333333 	.word	0x33333333
1a00e914:	3fc33333 	.word	0x3fc33333
1a00e918:	10088908 	.word	0x10088908
1a00e91c:	403e0000 	.word	0x403e0000
1a00e920:	3ff00000 	.word	0x3ff00000
1a00e924:	3e100000 	.word	0x3e100000
1a00e928:	40100000 	.word	0x40100000
1a00e92c:	40040000 	.word	0x40040000
1a00e930:	10088bd8 	.word	0x10088bd8
1a00e934:	40f00000 	.word	0x40f00000
1a00e938:	100889f0 	.word	0x100889f0
1a00e93c:	10088ad8 	.word	0x10088ad8
1a00e940:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
1a00e944:	2b01      	cmp	r3, #1
1a00e946:	f47f ac93 	bne.w	1a00e270 <inv_process_compass_only_cal+0x120>
1a00e94a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
1a00e94e:	2000      	movs	r0, #0
1a00e950:	3301      	adds	r3, #1
1a00e952:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
1a00e956:	f7fa fa9b 	bl	1a008e90 <inv_set_compass_state>
1a00e95a:	2200      	movs	r2, #0
1a00e95c:	4b69      	ldr	r3, [pc, #420]	; (1a00eb04 <inv_process_compass_only_cal+0x9b4>)
1a00e95e:	e9db 0132 	ldrd	r0, r1, [fp, #200]	; 0xc8
1a00e962:	f005 f849 	bl	1a0139f8 <__aeabi_dmul>
1a00e966:	f005 fae1 	bl	1a013f2c <__aeabi_d2iz>
1a00e96a:	2200      	movs	r2, #0
1a00e96c:	4b65      	ldr	r3, [pc, #404]	; (1a00eb04 <inv_process_compass_only_cal+0x9b4>)
1a00e96e:	9011      	str	r0, [sp, #68]	; 0x44
1a00e970:	e9db 0134 	ldrd	r0, r1, [fp, #208]	; 0xd0
1a00e974:	f005 f840 	bl	1a0139f8 <__aeabi_dmul>
1a00e978:	f005 fad8 	bl	1a013f2c <__aeabi_d2iz>
1a00e97c:	2200      	movs	r2, #0
1a00e97e:	4b61      	ldr	r3, [pc, #388]	; (1a00eb04 <inv_process_compass_only_cal+0x9b4>)
1a00e980:	9012      	str	r0, [sp, #72]	; 0x48
1a00e982:	e9db 0136 	ldrd	r0, r1, [fp, #216]	; 0xd8
1a00e986:	f005 f837 	bl	1a0139f8 <__aeabi_dmul>
1a00e98a:	f005 facf 	bl	1a013f2c <__aeabi_d2iz>
1a00e98e:	2103      	movs	r1, #3
1a00e990:	9013      	str	r0, [sp, #76]	; 0x4c
1a00e992:	a811      	add	r0, sp, #68	; 0x44
1a00e994:	f7f8 faf8 	bl	1a006f88 <inv_set_compass_bias>
1a00e998:	e9db 0130 	ldrd	r0, r1, [fp, #192]	; 0xc0
1a00e99c:	2200      	movs	r2, #0
1a00e99e:	4b5a      	ldr	r3, [pc, #360]	; (1a00eb08 <inv_process_compass_only_cal+0x9b8>)
1a00e9a0:	f005 faba 	bl	1a013f18 <__aeabi_dcmpgt>
1a00e9a4:	2800      	cmp	r0, #0
1a00e9a6:	f040 809e 	bne.w	1a00eae6 <inv_process_compass_only_cal+0x996>
1a00e9aa:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
1a00e9ae:	e9c6 4500 	strd	r4, r5, [r6]
1a00e9b2:	e45d      	b.n	1a00e270 <inv_process_compass_only_cal+0x120>
1a00e9b4:	4630      	mov	r0, r6
1a00e9b6:	f106 01c8 	add.w	r1, r6, #200	; 0xc8
1a00e9ba:	f7fe ff0f 	bl	1a00d7dc <inv_center_sum>
1a00e9be:	4e53      	ldr	r6, [pc, #332]	; (1a00eb0c <inv_process_compass_only_cal+0x9bc>)
1a00e9c0:	4680      	mov	r8, r0
1a00e9c2:	f506 7e80 	add.w	lr, r6, #256	; 0x100
1a00e9c6:	4689      	mov	r9, r1
1a00e9c8:	e9ce 8900 	strd	r8, r9, [lr]
1a00e9cc:	4602      	mov	r2, r0
1a00e9ce:	460b      	mov	r3, r1
1a00e9d0:	f004 fe60 	bl	1a013694 <__adddf3>
1a00e9d4:	2200      	movs	r2, #0
1a00e9d6:	4680      	mov	r8, r0
1a00e9d8:	4689      	mov	r9, r1
1a00e9da:	4620      	mov	r0, r4
1a00e9dc:	4629      	mov	r1, r5
1a00e9de:	4b4c      	ldr	r3, [pc, #304]	; (1a00eb10 <inv_process_compass_only_cal+0x9c0>)
1a00e9e0:	f004 fe56 	bl	1a013690 <__aeabi_dsub>
1a00e9e4:	4602      	mov	r2, r0
1a00e9e6:	460b      	mov	r3, r1
1a00e9e8:	4620      	mov	r0, r4
1a00e9ea:	4629      	mov	r1, r5
1a00e9ec:	f005 f804 	bl	1a0139f8 <__aeabi_dmul>
1a00e9f0:	4602      	mov	r2, r0
1a00e9f2:	460b      	mov	r3, r1
1a00e9f4:	4640      	mov	r0, r8
1a00e9f6:	4649      	mov	r1, r9
1a00e9f8:	f005 f928 	bl	1a013c4c <__aeabi_ddiv>
1a00e9fc:	f006 fe3a 	bl	1a015674 <sqrt>
1a00ea00:	4604      	mov	r4, r0
1a00ea02:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
1a00ea06:	460d      	mov	r5, r1
1a00ea08:	f004 ffa2 	bl	1a013950 <__aeabi_f2d>
1a00ea0c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
1a00ea10:	f004 fff2 	bl	1a0139f8 <__aeabi_dmul>
1a00ea14:	4602      	mov	r2, r0
1a00ea16:	460b      	mov	r3, r1
1a00ea18:	4620      	mov	r0, r4
1a00ea1a:	4629      	mov	r1, r5
1a00ea1c:	f005 fa7c 	bl	1a013f18 <__aeabi_dcmpgt>
1a00ea20:	2800      	cmp	r0, #0
1a00ea22:	f47f ad06 	bne.w	1a00e432 <inv_process_compass_only_cal+0x2e2>
1a00ea26:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
1a00ea2a:	f004 ff7f 	bl	1a01392c <__aeabi_i2d>
1a00ea2e:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
1a00ea32:	4602      	mov	r2, r0
1a00ea34:	460b      	mov	r3, r1
1a00ea36:	4620      	mov	r0, r4
1a00ea38:	4629      	mov	r1, r5
1a00ea3a:	f005 fa6d 	bl	1a013f18 <__aeabi_dcmpgt>
1a00ea3e:	2800      	cmp	r0, #0
1a00ea40:	f47f ab92 	bne.w	1a00e168 <inv_process_compass_only_cal+0x18>
1a00ea44:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
1a00ea48:	f004 ff70 	bl	1a01392c <__aeabi_i2d>
1a00ea4c:	4602      	mov	r2, r0
1a00ea4e:	460b      	mov	r3, r1
1a00ea50:	4620      	mov	r0, r4
1a00ea52:	4629      	mov	r1, r5
1a00ea54:	f005 fa42 	bl	1a013edc <__aeabi_dcmplt>
1a00ea58:	2800      	cmp	r0, #0
1a00ea5a:	f47f ab85 	bne.w	1a00e168 <inv_process_compass_only_cal+0x18>
1a00ea5e:	4620      	mov	r0, r4
1a00ea60:	4629      	mov	r1, r5
1a00ea62:	f7fd ff79 	bl	1a00c958 <inv_check_peaks.part.0.constprop.4>
1a00ea66:	2802      	cmp	r0, #2
1a00ea68:	f43f ace3 	beq.w	1a00e432 <inv_process_compass_only_cal+0x2e2>
1a00ea6c:	2800      	cmp	r0, #0
1a00ea6e:	f47f ab7b 	bne.w	1a00e168 <inv_process_compass_only_cal+0x18>
1a00ea72:	f8d6 3198 	ldr.w	r3, [r6, #408]	; 0x198
1a00ea76:	2b01      	cmp	r3, #1
1a00ea78:	f47f ab76 	bne.w	1a00e168 <inv_process_compass_only_cal+0x18>
1a00ea7c:	f7fa fa08 	bl	1a008e90 <inv_set_compass_state>
1a00ea80:	4a24      	ldr	r2, [pc, #144]	; (1a00eb14 <inv_process_compass_only_cal+0x9c4>)
1a00ea82:	4b20      	ldr	r3, [pc, #128]	; (1a00eb04 <inv_process_compass_only_cal+0x9b4>)
1a00ea84:	4c23      	ldr	r4, [pc, #140]	; (1a00eb14 <inv_process_compass_only_cal+0x9c4>)
1a00ea86:	e9d2 0132 	ldrd	r0, r1, [r2, #200]	; 0xc8
1a00ea8a:	2200      	movs	r2, #0
1a00ea8c:	f004 ffb4 	bl	1a0139f8 <__aeabi_dmul>
1a00ea90:	f005 fa4c 	bl	1a013f2c <__aeabi_d2iz>
1a00ea94:	2200      	movs	r2, #0
1a00ea96:	4b1b      	ldr	r3, [pc, #108]	; (1a00eb04 <inv_process_compass_only_cal+0x9b4>)
1a00ea98:	9011      	str	r0, [sp, #68]	; 0x44
1a00ea9a:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
1a00ea9e:	f004 ffab 	bl	1a0139f8 <__aeabi_dmul>
1a00eaa2:	f005 fa43 	bl	1a013f2c <__aeabi_d2iz>
1a00eaa6:	2200      	movs	r2, #0
1a00eaa8:	4b16      	ldr	r3, [pc, #88]	; (1a00eb04 <inv_process_compass_only_cal+0x9b4>)
1a00eaaa:	9012      	str	r0, [sp, #72]	; 0x48
1a00eaac:	e9d4 0136 	ldrd	r0, r1, [r4, #216]	; 0xd8
1a00eab0:	f004 ffa2 	bl	1a0139f8 <__aeabi_dmul>
1a00eab4:	f005 fa3a 	bl	1a013f2c <__aeabi_d2iz>
1a00eab8:	2103      	movs	r1, #3
1a00eaba:	9013      	str	r0, [sp, #76]	; 0x4c
1a00eabc:	a811      	add	r0, sp, #68	; 0x44
1a00eabe:	f7f8 fa63 	bl	1a006f88 <inv_set_compass_bias>
1a00eac2:	2001      	movs	r0, #1
1a00eac4:	f7fa f9d4 	bl	1a008e70 <inv_set_compass_bias_found>
1a00eac8:	2319      	movs	r3, #25
1a00eaca:	a817      	add	r0, sp, #92	; 0x5c
1a00eacc:	9317      	str	r3, [sp, #92]	; 0x5c
1a00eace:	9318      	str	r3, [sp, #96]	; 0x60
1a00ead0:	9319      	str	r3, [sp, #100]	; 0x64
1a00ead2:	f7fa f9f9 	bl	1a008ec8 <inv_set_compass_bias_error>
1a00ead6:	4810      	ldr	r0, [pc, #64]	; (1a00eb18 <inv_process_compass_only_cal+0x9c8>)
1a00ead8:	4621      	mov	r1, r4
1a00eada:	2200      	movs	r2, #0
1a00eadc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
1a00eae0:	f7fe f886 	bl	1a00cbf0 <inv_combine_compass_data>
1a00eae4:	e4a5      	b.n	1a00e432 <inv_process_compass_only_cal+0x2e2>
1a00eae6:	480c      	ldr	r0, [pc, #48]	; (1a00eb18 <inv_process_compass_only_cal+0x9c8>)
1a00eae8:	4a0c      	ldr	r2, [pc, #48]	; (1a00eb1c <inv_process_compass_only_cal+0x9cc>)
1a00eaea:	4601      	mov	r1, r0
1a00eaec:	4613      	mov	r3, r2
1a00eaee:	f7fe f87f 	bl	1a00cbf0 <inv_combine_compass_data>
1a00eaf2:	4809      	ldr	r0, [pc, #36]	; (1a00eb18 <inv_process_compass_only_cal+0x9c8>)
1a00eaf4:	f100 01c8 	add.w	r1, r0, #200	; 0xc8
1a00eaf8:	f7fe fe70 	bl	1a00d7dc <inv_center_sum>
1a00eafc:	e9cd 0108 	strd	r0, r1, [sp, #32]
1a00eb00:	e753      	b.n	1a00e9aa <inv_process_compass_only_cal+0x85a>
1a00eb02:	bf00      	nop
1a00eb04:	40f00000 	.word	0x40f00000
1a00eb08:	409f4000 	.word	0x409f4000
1a00eb0c:	10088ad8 	.word	0x10088ad8
1a00eb10:	3ff00000 	.word	0x3ff00000
1a00eb14:	10088908 	.word	0x10088908
1a00eb18:	100889f0 	.word	0x100889f0
1a00eb1c:	3ee66666 	.word	0x3ee66666

1a00eb20 <inv_generate_vector_compass_cal>:
1a00eb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00eb22:	4c27      	ldr	r4, [pc, #156]	; (1a00ebc0 <inv_generate_vector_compass_cal+0xa0>)
1a00eb24:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
1a00eb28:	4605      	mov	r5, r0
1a00eb2a:	b1bb      	cbz	r3, 1a00eb5c <inv_generate_vector_compass_cal+0x3c>
1a00eb2c:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
1a00eb30:	f644 631f 	movw	r3, #19999	; 0x4e1f
1a00eb34:	429a      	cmp	r2, r3
1a00eb36:	dc08      	bgt.n	1a00eb4a <inv_generate_vector_compass_cal+0x2a>
1a00eb38:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
1a00eb3c:	4820      	ldr	r0, [pc, #128]	; (1a00ebc0 <inv_generate_vector_compass_cal+0xa0>)
1a00eb3e:	1852      	adds	r2, r2, r1
1a00eb40:	429a      	cmp	r2, r3
1a00eb42:	dd07      	ble.n	1a00eb54 <inv_generate_vector_compass_cal+0x34>
1a00eb44:	2300      	movs	r3, #0
1a00eb46:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
1a00eb4a:	4628      	mov	r0, r5
1a00eb4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a00eb50:	f7ff bafe 	b.w	1a00e150 <inv_process_compass_only_cal>
1a00eb54:	f8c0 2110 	str.w	r2, [r0, #272]	; 0x110
1a00eb58:	2000      	movs	r0, #0
1a00eb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00eb5c:	f8d0 60ac 	ldr.w	r6, [r0, #172]	; 0xac
1a00eb60:	b1f6      	cbz	r6, 1a00eba0 <inv_generate_vector_compass_cal+0x80>
1a00eb62:	17f7      	asrs	r7, r6, #31
1a00eb64:	4632      	mov	r2, r6
1a00eb66:	463b      	mov	r3, r7
1a00eb68:	2000      	movs	r0, #0
1a00eb6a:	2119      	movs	r1, #25
1a00eb6c:	f005 fd50 	bl	1a014610 <__aeabi_ldivmod>
1a00eb70:	4632      	mov	r2, r6
1a00eb72:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
1a00eb76:	463b      	mov	r3, r7
1a00eb78:	2000      	movs	r0, #0
1a00eb7a:	2105      	movs	r1, #5
1a00eb7c:	f005 fd48 	bl	1a014610 <__aeabi_ldivmod>
1a00eb80:	4632      	mov	r2, r6
1a00eb82:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
1a00eb86:	463b      	mov	r3, r7
1a00eb88:	2000      	movs	r0, #0
1a00eb8a:	2196      	movs	r1, #150	; 0x96
1a00eb8c:	f005 fd40 	bl	1a014610 <__aeabi_ldivmod>
1a00eb90:	f004 fecc 	bl	1a01392c <__aeabi_i2d>
1a00eb94:	e9c4 0138 	strd	r0, r1, [r4, #224]	; 0xe0
1a00eb98:	2301      	movs	r3, #1
1a00eb9a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
1a00eb9e:	e7c5      	b.n	1a00eb2c <inv_generate_vector_compass_cal+0xc>
1a00eba0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
1a00eba4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
1a00eba8:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
1a00ebac:	a302      	add	r3, pc, #8	; (adr r3, 1a00ebb8 <inv_generate_vector_compass_cal+0x98>)
1a00ebae:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00ebb2:	e9c4 2338 	strd	r2, r3, [r4, #224]	; 0xe0
1a00ebb6:	e7ef      	b.n	1a00eb98 <inv_generate_vector_compass_cal+0x78>
1a00ebb8:	ffc00000 	.word	0xffc00000
1a00ebbc:	41dfffff 	.word	0x41dfffff
1a00ebc0:	10088ad8 	.word	0x10088ad8
1a00ebc4:	f3af 8000 	nop.w

1a00ebc8 <inv_init_vector_compass_cal>:
1a00ebc8:	b510      	push	{r4, lr}
1a00ebca:	4c15      	ldr	r4, [pc, #84]	; (1a00ec20 <inv_init_vector_compass_cal+0x58>)
1a00ebcc:	4815      	ldr	r0, [pc, #84]	; (1a00ec24 <inv_init_vector_compass_cal+0x5c>)
1a00ebce:	2100      	movs	r1, #0
1a00ebd0:	22e8      	movs	r2, #232	; 0xe8
1a00ebd2:	f006 f881 	bl	1a014cd8 <memset>
1a00ebd6:	f7ff fa93 	bl	1a00e100 <inv_reset_data_collection>
1a00ebda:	2100      	movs	r1, #0
1a00ebdc:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
1a00ebe0:	4620      	mov	r0, r4
1a00ebe2:	f006 f879 	bl	1a014cd8 <memset>
1a00ebe6:	f504 7090 	add.w	r0, r4, #288	; 0x120
1a00ebea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
1a00ebee:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
1a00ebf2:	f7fd f96b 	bl	1a00becc <inv_init_check_sample_balance_parameter>
1a00ebf6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
1a00ebfa:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
1a00ebfe:	230a      	movs	r3, #10
1a00ec00:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
1a00ec04:	231e      	movs	r3, #30
1a00ec06:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
1a00ec0a:	4b07      	ldr	r3, [pc, #28]	; (1a00ec28 <inv_init_vector_compass_cal+0x60>)
1a00ec0c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
1a00ec10:	4b06      	ldr	r3, [pc, #24]	; (1a00ec2c <inv_init_vector_compass_cal+0x64>)
1a00ec12:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
1a00ec16:	4b06      	ldr	r3, [pc, #24]	; (1a00ec30 <inv_init_vector_compass_cal+0x68>)
1a00ec18:	2000      	movs	r0, #0
1a00ec1a:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
1a00ec1e:	bd10      	pop	{r4, pc}
1a00ec20:	10088ad8 	.word	0x10088ad8
1a00ec24:	100889f0 	.word	0x100889f0
1a00ec28:	3ecccccd 	.word	0x3ecccccd
1a00ec2c:	3f333333 	.word	0x3f333333
1a00ec30:	3f19999a 	.word	0x3f19999a

1a00ec34 <inv_enable_vector_compass_cal>:
1a00ec34:	b508      	push	{r3, lr}
1a00ec36:	f7ff ffc7 	bl	1a00ebc8 <inv_init_vector_compass_cal>
1a00ec3a:	b100      	cbz	r0, 1a00ec3e <inv_enable_vector_compass_cal+0xa>
1a00ec3c:	bd08      	pop	{r3, pc}
1a00ec3e:	4802      	ldr	r0, [pc, #8]	; (1a00ec48 <inv_enable_vector_compass_cal+0x14>)
1a00ec40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a00ec44:	f7fa b9d4 	b.w	1a008ff0 <inv_register_mpl_start_notification>
1a00ec48:	1a00c949 	.word	0x1a00c949

1a00ec4c <inv_init_maxmin>:
1a00ec4c:	07c1      	lsls	r1, r0, #31
1a00ec4e:	d50a      	bpl.n	1a00ec66 <inv_init_maxmin+0x1a>
1a00ec50:	4b18      	ldr	r3, [pc, #96]	; (1a00ecb4 <inv_init_maxmin+0x68>)
1a00ec52:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
1a00ec56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a00ec5a:	6699      	str	r1, [r3, #104]	; 0x68
1a00ec5c:	66d9      	str	r1, [r3, #108]	; 0x6c
1a00ec5e:	6719      	str	r1, [r3, #112]	; 0x70
1a00ec60:	675a      	str	r2, [r3, #116]	; 0x74
1a00ec62:	679a      	str	r2, [r3, #120]	; 0x78
1a00ec64:	67da      	str	r2, [r3, #124]	; 0x7c
1a00ec66:	0782      	lsls	r2, r0, #30
1a00ec68:	d510      	bpl.n	1a00ec8c <inv_init_maxmin+0x40>
1a00ec6a:	4b12      	ldr	r3, [pc, #72]	; (1a00ecb4 <inv_init_maxmin+0x68>)
1a00ec6c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
1a00ec70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a00ec74:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
1a00ec78:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
1a00ec7c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
1a00ec80:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
1a00ec84:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
1a00ec88:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
1a00ec8c:	0743      	lsls	r3, r0, #29
1a00ec8e:	d510      	bpl.n	1a00ecb2 <inv_init_maxmin+0x66>
1a00ec90:	4b08      	ldr	r3, [pc, #32]	; (1a00ecb4 <inv_init_maxmin+0x68>)
1a00ec92:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
1a00ec96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a00ec9a:	f8c3 1198 	str.w	r1, [r3, #408]	; 0x198
1a00ec9e:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
1a00eca2:	f8c3 11a0 	str.w	r1, [r3, #416]	; 0x1a0
1a00eca6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
1a00ecaa:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
1a00ecae:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
1a00ecb2:	4770      	bx	lr
1a00ecb4:	10088d68 	.word	0x10088d68

1a00ecb8 <inv_start_fast_nomot>:
1a00ecb8:	b510      	push	{r4, lr}
1a00ecba:	4c0d      	ldr	r4, [pc, #52]	; (1a00ecf0 <inv_start_fast_nomot+0x38>)
1a00ecbc:	2100      	movs	r1, #0
1a00ecbe:	f44f 7218 	mov.w	r2, #608	; 0x260
1a00ecc2:	4620      	mov	r0, r4
1a00ecc4:	f006 f808 	bl	1a014cd8 <memset>
1a00ecc8:	2007      	movs	r0, #7
1a00ecca:	f7ff ffbf 	bl	1a00ec4c <inv_init_maxmin>
1a00ecce:	2301      	movs	r3, #1
1a00ecd0:	4618      	mov	r0, r3
1a00ecd2:	2103      	movs	r1, #3
1a00ecd4:	2200      	movs	r2, #0
1a00ecd6:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
1a00ecda:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
1a00ecde:	f7f8 ff1b 	bl	1a007b18 <inv_set_message>
1a00ece2:	4804      	ldr	r0, [pc, #16]	; (1a00ecf4 <inv_start_fast_nomot+0x3c>)
1a00ece4:	2164      	movs	r1, #100	; 0x64
1a00ece6:	2207      	movs	r2, #7
1a00ece8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a00ecec:	f7f8 bbac 	b.w	1a007448 <inv_register_data_cb>
1a00ecf0:	10088d68 	.word	0x10088d68
1a00ecf4:	1a00f331 	.word	0x1a00f331

1a00ecf8 <inv_reset_packet>:
1a00ecf8:	b538      	push	{r3, r4, r5, lr}
1a00ecfa:	4d09      	ldr	r5, [pc, #36]	; (1a00ed20 <inv_reset_packet+0x28>)
1a00ecfc:	2498      	movs	r4, #152	; 0x98
1a00ecfe:	2100      	movs	r1, #0
1a00ed00:	4622      	mov	r2, r4
1a00ed02:	4628      	mov	r0, r5
1a00ed04:	f005 ffe8 	bl	1a014cd8 <memset>
1a00ed08:	f505 7098 	add.w	r0, r5, #304	; 0x130
1a00ed0c:	2100      	movs	r1, #0
1a00ed0e:	4622      	mov	r2, r4
1a00ed10:	f005 ffe2 	bl	1a014cd8 <memset>
1a00ed14:	2005      	movs	r0, #5
1a00ed16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a00ed1a:	f7ff bf97 	b.w	1a00ec4c <inv_init_maxmin>
1a00ed1e:	bf00      	nop
1a00ed20:	10088d70 	.word	0x10088d70

1a00ed24 <inv_fast_nomot_parameter>:
1a00ed24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00ed28:	6f83      	ldr	r3, [r0, #120]	; 0x78
1a00ed2a:	b085      	sub	sp, #20
1a00ed2c:	2b00      	cmp	r3, #0
1a00ed2e:	f000 80a6 	beq.w	1a00ee7e <inv_fast_nomot_parameter+0x15a>
1a00ed32:	4680      	mov	r8, r0
1a00ed34:	2100      	movs	r1, #0
1a00ed36:	2000      	movs	r0, #0
1a00ed38:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a00ed3c:	f04f 0b00 	mov.w	fp, #0
1a00ed40:	f8cd b004 	str.w	fp, [sp, #4]
1a00ed44:	f8d8 e000 	ldr.w	lr, [r8]
1a00ed48:	f8d8 c004 	ldr.w	ip, [r8, #4]
1a00ed4c:	e9d8 ab06 	ldrd	sl, fp, [r8, #24]
1a00ed50:	fbae 010e 	umull	r0, r1, lr, lr
1a00ed54:	fb0e f30c 	mul.w	r3, lr, ip
1a00ed58:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00ed5c:	4654      	mov	r4, sl
1a00ed5e:	465d      	mov	r5, fp
1a00ed60:	1a24      	subs	r4, r4, r0
1a00ed62:	eb65 0501 	sbc.w	r5, r5, r1
1a00ed66:	1922      	adds	r2, r4, r4
1a00ed68:	eb45 0305 	adc.w	r3, r5, r5
1a00ed6c:	1912      	adds	r2, r2, r4
1a00ed6e:	eb43 0305 	adc.w	r3, r3, r5
1a00ed72:	1812      	adds	r2, r2, r0
1a00ed74:	eb43 0301 	adc.w	r3, r3, r1
1a00ed78:	e9d8 670c 	ldrd	r6, r7, [r8, #48]	; 0x30
1a00ed7c:	fb0e f403 	mul.w	r4, lr, r3
1a00ed80:	1800      	adds	r0, r0, r0
1a00ed82:	fb0c 4402 	mla	r4, ip, r2, r4
1a00ed86:	fbae 2302 	umull	r2, r3, lr, r2
1a00ed8a:	eb41 0101 	adc.w	r1, r1, r1
1a00ed8e:	18e3      	adds	r3, r4, r3
1a00ed90:	1b96      	subs	r6, r2, r6
1a00ed92:	eb63 0707 	sbc.w	r7, r3, r7
1a00ed96:	fb0e f301 	mul.w	r3, lr, r1
1a00ed9a:	fb0a f20b 	mul.w	r2, sl, fp
1a00ed9e:	fbaa 450a 	umull	r4, r5, sl, sl
1a00eda2:	fb0c 3300 	mla	r3, ip, r0, r3
1a00eda6:	fbae 0100 	umull	r0, r1, lr, r0
1a00edaa:	eb05 0542 	add.w	r5, r5, r2, lsl #1
1a00edae:	f1c6 0a00 	rsb	sl, r6, #0
1a00edb2:	1859      	adds	r1, r3, r1
1a00edb4:	f06f 0b03 	mvn.w	fp, #3
1a00edb8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
1a00edbc:	f1c4 0900 	rsb	r9, r4, #0
1a00edc0:	fb0b a707 	mla	r7, fp, r7, sl
1a00edc4:	fba6 ab0b 	umull	sl, fp, r6, fp
1a00edc8:	f06f 0602 	mvn.w	r6, #2
1a00edcc:	44bb      	add	fp, r7
1a00edce:	f8cd 9000 	str.w	r9, [sp]
1a00edd2:	fb06 9905 	mla	r9, r6, r5, r9
1a00edd6:	fba4 4506 	umull	r4, r5, r4, r6
1a00edda:	fb0e f601 	mul.w	r6, lr, r1
1a00edde:	fb0c 6600 	mla	r6, ip, r0, r6
1a00ede2:	fb0e f70b 	mul.w	r7, lr, fp
1a00ede6:	444d      	add	r5, r9
1a00ede8:	fbae 0100 	umull	r0, r1, lr, r0
1a00edec:	1912      	adds	r2, r2, r4
1a00edee:	eb43 0305 	adc.w	r3, r3, r5
1a00edf2:	1871      	adds	r1, r6, r1
1a00edf4:	fb0c 7c0a 	mla	ip, ip, sl, r7
1a00edf8:	1812      	adds	r2, r2, r0
1a00edfa:	fbae 670a 	umull	r6, r7, lr, sl
1a00edfe:	eb43 0301 	adc.w	r3, r3, r1
1a00ee02:	f8dd 9004 	ldr.w	r9, [sp, #4]
1a00ee06:	1992      	adds	r2, r2, r6
1a00ee08:	4467      	add	r7, ip
1a00ee0a:	eb43 0307 	adc.w	r3, r3, r7
1a00ee0e:	f109 0901 	add.w	r9, r9, #1
1a00ee12:	2a00      	cmp	r2, #0
1a00ee14:	f173 0b00 	sbcs.w	fp, r3, #0
1a00ee18:	f8cd 9004 	str.w	r9, [sp, #4]
1a00ee1c:	f108 0808 	add.w	r8, r8, #8
1a00ee20:	db30      	blt.n	1a00ee84 <inv_fast_nomot_parameter+0x160>
1a00ee22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00ee26:	4290      	cmp	r0, r2
1a00ee28:	4199      	sbcs	r1, r3
1a00ee2a:	da01      	bge.n	1a00ee30 <inv_fast_nomot_parameter+0x10c>
1a00ee2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a00ee30:	9a01      	ldr	r2, [sp, #4]
1a00ee32:	2a03      	cmp	r2, #3
1a00ee34:	d186      	bne.n	1a00ed44 <inv_fast_nomot_parameter+0x20>
1a00ee36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00ee3a:	f005 f9bf 	bl	1a0141bc <__aeabi_l2f>
1a00ee3e:	4b13      	ldr	r3, [pc, #76]	; (1a00ee8c <inv_fast_nomot_parameter+0x168>)
1a00ee40:	6b99      	ldr	r1, [r3, #56]	; 0x38
1a00ee42:	f005 faad 	bl	1a0143a0 <__aeabi_fdiv>
1a00ee46:	f005 fc4b 	bl	1a0146e0 <__aeabi_f2lz>
1a00ee4a:	4b11      	ldr	r3, [pc, #68]	; (1a00ee90 <inv_fast_nomot_parameter+0x16c>)
1a00ee4c:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
1a00ee50:	00a4      	lsls	r4, r4, #2
1a00ee52:	f1c4 0620 	rsb	r6, r4, #32
1a00ee56:	f1a4 0520 	sub.w	r5, r4, #32
1a00ee5a:	fa20 f204 	lsr.w	r2, r0, r4
1a00ee5e:	fa01 f606 	lsl.w	r6, r1, r6
1a00ee62:	fa41 f005 	asr.w	r0, r1, r5
1a00ee66:	4332      	orrs	r2, r6
1a00ee68:	ea12 0225 	ands.w	r2, r2, r5, asr #32
1a00ee6c:	bf38      	it	cc
1a00ee6e:	4602      	movcc	r2, r0
1a00ee70:	fa41 f304 	asr.w	r3, r1, r4
1a00ee74:	4610      	mov	r0, r2
1a00ee76:	4619      	mov	r1, r3
1a00ee78:	b005      	add	sp, #20
1a00ee7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00ee7e:	2200      	movs	r2, #0
1a00ee80:	2300      	movs	r3, #0
1a00ee82:	e7f7      	b.n	1a00ee74 <inv_fast_nomot_parameter+0x150>
1a00ee84:	4252      	negs	r2, r2
1a00ee86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00ee8a:	e7ca      	b.n	1a00ee22 <inv_fast_nomot_parameter+0xfe>
1a00ee8c:	100870a0 	.word	0x100870a0
1a00ee90:	10088d68 	.word	0x10088d68

1a00ee94 <inv_fast_nomot_parameter_3rd>:
1a00ee94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00ee98:	6f83      	ldr	r3, [r0, #120]	; 0x78
1a00ee9a:	2b00      	cmp	r3, #0
1a00ee9c:	d05a      	beq.n	1a00ef54 <inv_fast_nomot_parameter_3rd+0xc0>
1a00ee9e:	f100 0e28 	add.w	lr, r0, #40	; 0x28
1a00eea2:	2100      	movs	r1, #0
1a00eea4:	2000      	movs	r0, #0
1a00eea6:	f04f 0c00 	mov.w	ip, #0
1a00eeaa:	f85e 8c28 	ldr.w	r8, [lr, #-40]
1a00eeae:	f85e 9c24 	ldr.w	r9, [lr, #-36]
1a00eeb2:	e95e 4504 	ldrd	r4, r5, [lr, #-16]
1a00eeb6:	fb08 f309 	mul.w	r3, r8, r9
1a00eeba:	fba8 6708 	umull	r6, r7, r8, r8
1a00eebe:	eb07 0743 	add.w	r7, r7, r3, lsl #1
1a00eec2:	1ba4      	subs	r4, r4, r6
1a00eec4:	eb65 0507 	sbc.w	r5, r5, r7
1a00eec8:	1922      	adds	r2, r4, r4
1a00eeca:	eb45 0305 	adc.w	r3, r5, r5
1a00eece:	1912      	adds	r2, r2, r4
1a00eed0:	eb43 0305 	adc.w	r3, r3, r5
1a00eed4:	1992      	adds	r2, r2, r6
1a00eed6:	eb43 0307 	adc.w	r3, r3, r7
1a00eeda:	fb02 f909 	mul.w	r9, r2, r9
1a00eede:	e9fe 4502 	ldrd	r4, r5, [lr, #8]!
1a00eee2:	fb08 9903 	mla	r9, r8, r3, r9
1a00eee6:	fba2 2308 	umull	r2, r3, r2, r8
1a00eeea:	444b      	add	r3, r9
1a00eeec:	1b12      	subs	r2, r2, r4
1a00eeee:	eb63 0305 	sbc.w	r3, r3, r5
1a00eef2:	2a00      	cmp	r2, #0
1a00eef4:	f173 0400 	sbcs.w	r4, r3, #0
1a00eef8:	f10c 0c01 	add.w	ip, ip, #1
1a00eefc:	db2d      	blt.n	1a00ef5a <inv_fast_nomot_parameter_3rd+0xc6>
1a00eefe:	4290      	cmp	r0, r2
1a00ef00:	eb71 0403 	sbcs.w	r4, r1, r3
1a00ef04:	bfbc      	itt	lt
1a00ef06:	4610      	movlt	r0, r2
1a00ef08:	4619      	movlt	r1, r3
1a00ef0a:	f1bc 0f03 	cmp.w	ip, #3
1a00ef0e:	d1cc      	bne.n	1a00eeaa <inv_fast_nomot_parameter_3rd+0x16>
1a00ef10:	f005 f954 	bl	1a0141bc <__aeabi_l2f>
1a00ef14:	4b13      	ldr	r3, [pc, #76]	; (1a00ef64 <inv_fast_nomot_parameter_3rd+0xd0>)
1a00ef16:	6b99      	ldr	r1, [r3, #56]	; 0x38
1a00ef18:	f005 fa42 	bl	1a0143a0 <__aeabi_fdiv>
1a00ef1c:	f005 fbe0 	bl	1a0146e0 <__aeabi_f2lz>
1a00ef20:	4b11      	ldr	r3, [pc, #68]	; (1a00ef68 <inv_fast_nomot_parameter_3rd+0xd4>)
1a00ef22:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
1a00ef26:	eb04 0444 	add.w	r4, r4, r4, lsl #1
1a00ef2a:	f1c4 0620 	rsb	r6, r4, #32
1a00ef2e:	f1a4 0520 	sub.w	r5, r4, #32
1a00ef32:	fa20 f204 	lsr.w	r2, r0, r4
1a00ef36:	fa01 f606 	lsl.w	r6, r1, r6
1a00ef3a:	fa41 f005 	asr.w	r0, r1, r5
1a00ef3e:	4332      	orrs	r2, r6
1a00ef40:	ea12 0225 	ands.w	r2, r2, r5, asr #32
1a00ef44:	bf38      	it	cc
1a00ef46:	4602      	movcc	r2, r0
1a00ef48:	fa41 f304 	asr.w	r3, r1, r4
1a00ef4c:	4610      	mov	r0, r2
1a00ef4e:	4619      	mov	r1, r3
1a00ef50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00ef54:	2200      	movs	r2, #0
1a00ef56:	2300      	movs	r3, #0
1a00ef58:	e7f8      	b.n	1a00ef4c <inv_fast_nomot_parameter_3rd+0xb8>
1a00ef5a:	4252      	negs	r2, r2
1a00ef5c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00ef60:	e7cd      	b.n	1a00eefe <inv_fast_nomot_parameter_3rd+0x6a>
1a00ef62:	bf00      	nop
1a00ef64:	100870a0 	.word	0x100870a0
1a00ef68:	10088d68 	.word	0x10088d68

1a00ef6c <inv_fast_nomot_set_gyro_bias>:
1a00ef6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00ef70:	4b2f      	ldr	r3, [pc, #188]	; (1a00f030 <inv_fast_nomot_set_gyro_bias+0xc4>)
1a00ef72:	b084      	sub	sp, #16
1a00ef74:	461d      	mov	r5, r3
1a00ef76:	f8d3 e210 	ldr.w	lr, [r3, #528]	; 0x210
1a00ef7a:	461a      	mov	r2, r3
1a00ef7c:	4607      	mov	r7, r0
1a00ef7e:	2300      	movs	r3, #0
1a00ef80:	ae01      	add	r6, sp, #4
1a00ef82:	18e8      	adds	r0, r5, r3
1a00ef84:	f852 1f08 	ldr.w	r1, [r2, #8]!
1a00ef88:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
1a00ef8c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1a00f030 <inv_fast_nomot_set_gyro_bias+0xc4>
1a00ef90:	fa01 f10e 	lsl.w	r1, r1, lr
1a00ef94:	eb01 4104 	add.w	r1, r1, r4, lsl #16
1a00ef98:	50f1      	str	r1, [r6, r3]
1a00ef9a:	3304      	adds	r3, #4
1a00ef9c:	2b0c      	cmp	r3, #12
1a00ef9e:	d1f0      	bne.n	1a00ef82 <inv_fast_nomot_set_gyro_bias+0x16>
1a00efa0:	2100      	movs	r1, #0
1a00efa2:	2298      	movs	r2, #152	; 0x98
1a00efa4:	f108 0008 	add.w	r0, r8, #8
1a00efa8:	f005 fe96 	bl	1a014cd8 <memset>
1a00efac:	2001      	movs	r0, #1
1a00efae:	f7ff fe4d 	bl	1a00ec4c <inv_init_maxmin>
1a00efb2:	f898 31e8 	ldrb.w	r3, [r8, #488]	; 0x1e8
1a00efb6:	2b04      	cmp	r3, #4
1a00efb8:	d030      	beq.n	1a00f01c <inv_fast_nomot_set_gyro_bias+0xb0>
1a00efba:	4c1e      	ldr	r4, [pc, #120]	; (1a00f034 <inv_fast_nomot_set_gyro_bias+0xc8>)
1a00efbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
1a00efbe:	9f01      	ldr	r7, [sp, #4]
1a00efc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00efc4:	c80d      	ldmia	r0, {r0, r2, r3}
1a00efc6:	1a3f      	subs	r7, r7, r0
1a00efc8:	9802      	ldr	r0, [sp, #8]
1a00efca:	1a82      	subs	r2, r0, r2
1a00efcc:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
1a00efd0:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
1a00efd4:	9a03      	ldr	r2, [sp, #12]
1a00efd6:	2f00      	cmp	r7, #0
1a00efd8:	bfb8      	it	lt
1a00efda:	427f      	neglt	r7, r7
1a00efdc:	1ad3      	subs	r3, r2, r3
1a00efde:	2b00      	cmp	r3, #0
1a00efe0:	bfb8      	it	lt
1a00efe2:	425b      	neglt	r3, r3
1a00efe4:	4287      	cmp	r7, r0
1a00efe6:	bfa8      	it	ge
1a00efe8:	4638      	movge	r0, r7
1a00efea:	4298      	cmp	r0, r3
1a00efec:	bfb8      	it	lt
1a00efee:	4618      	movlt	r0, r3
1a00eff0:	f7f8 fe9c 	bl	1a007d2c <inv_q30_mult>
1a00eff4:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
1a00eff8:	4298      	cmp	r0, r3
1a00effa:	da06      	bge.n	1a00f00a <inv_fast_nomot_set_gyro_bias+0x9e>
1a00effc:	4630      	mov	r0, r6
1a00effe:	2103      	movs	r1, #3
1a00f000:	f7f8 f85e 	bl	1a0070c0 <inv_set_gyro_bias>
1a00f004:	2002      	movs	r0, #2
1a00f006:	f7f9 fdb9 	bl	1a008b7c <inv_set_motion_state>
1a00f00a:	9b01      	ldr	r3, [sp, #4]
1a00f00c:	6263      	str	r3, [r4, #36]	; 0x24
1a00f00e:	9b02      	ldr	r3, [sp, #8]
1a00f010:	62a3      	str	r3, [r4, #40]	; 0x28
1a00f012:	9b03      	ldr	r3, [sp, #12]
1a00f014:	62e3      	str	r3, [r4, #44]	; 0x2c
1a00f016:	b004      	add	sp, #16
1a00f018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00f01c:	f8d8 3218 	ldr.w	r3, [r8, #536]	; 0x218
1a00f020:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
1a00f024:	ddc9      	ble.n	1a00efba <inv_fast_nomot_set_gyro_bias+0x4e>
1a00f026:	2305      	movs	r3, #5
1a00f028:	f888 31e8 	strb.w	r3, [r8, #488]	; 0x1e8
1a00f02c:	e7c5      	b.n	1a00efba <inv_fast_nomot_set_gyro_bias+0x4e>
1a00f02e:	bf00      	nop
1a00f030:	10088d68 	.word	0x10088d68
1a00f034:	100870a0 	.word	0x100870a0

1a00f038 <inv_fast_nomot_store_data>:
1a00f038:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
1a00f03c:	6f8a      	ldr	r2, [r1, #120]	; 0x78
1a00f03e:	b082      	sub	sp, #8
1a00f040:	f04f 0900 	mov.w	r9, #0
1a00f044:	468a      	mov	sl, r1
1a00f046:	9200      	str	r2, [sp, #0]
1a00f048:	9001      	str	r0, [sp, #4]
1a00f04a:	468c      	mov	ip, r1
1a00f04c:	f101 0860 	add.w	r8, r1, #96	; 0x60
1a00f050:	46cb      	mov	fp, r9
1a00f052:	9b00      	ldr	r3, [sp, #0]
1a00f054:	2b00      	cmp	r3, #0
1a00f056:	d03d      	beq.n	1a00f0d4 <inv_fast_nomot_store_data+0x9c>
1a00f058:	9b01      	ldr	r3, [sp, #4]
1a00f05a:	f933 2009 	ldrsh.w	r2, [r3, r9]
1a00f05e:	f8dc 307c 	ldr.w	r3, [ip, #124]	; 0x7c
1a00f062:	1ad2      	subs	r2, r2, r3
1a00f064:	4614      	mov	r4, r2
1a00f066:	17d5      	asrs	r5, r2, #31
1a00f068:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
1a00f06c:	4293      	cmp	r3, r2
1a00f06e:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
1a00f072:	bfb8      	it	lt
1a00f074:	f8cc 2060 	strlt.w	r2, [ip, #96]	; 0x60
1a00f078:	4293      	cmp	r3, r2
1a00f07a:	bfc8      	it	gt
1a00f07c:	f8cc 206c 	strgt.w	r2, [ip, #108]	; 0x6c
1a00f080:	eb0a 06cb 	add.w	r6, sl, fp, lsl #3
1a00f084:	2201      	movs	r2, #1
1a00f086:	2300      	movs	r3, #0
1a00f088:	e9d6 0100 	ldrd	r0, r1, [r6]
1a00f08c:	fb02 f705 	mul.w	r7, r2, r5
1a00f090:	fb04 7703 	mla	r7, r4, r3, r7
1a00f094:	fba2 2304 	umull	r2, r3, r2, r4
1a00f098:	1880      	adds	r0, r0, r2
1a00f09a:	443b      	add	r3, r7
1a00f09c:	eb41 0103 	adc.w	r1, r1, r3
1a00f0a0:	e8e6 0106 	strd	r0, r1, [r6], #24
1a00f0a4:	4546      	cmp	r6, r8
1a00f0a6:	d1ef      	bne.n	1a00f088 <inv_fast_nomot_store_data+0x50>
1a00f0a8:	f10b 0b01 	add.w	fp, fp, #1
1a00f0ac:	f1bb 0f03 	cmp.w	fp, #3
1a00f0b0:	f106 0808 	add.w	r8, r6, #8
1a00f0b4:	f10c 0c04 	add.w	ip, ip, #4
1a00f0b8:	f109 0902 	add.w	r9, r9, #2
1a00f0bc:	d1c9      	bne.n	1a00f052 <inv_fast_nomot_store_data+0x1a>
1a00f0be:	9a00      	ldr	r2, [sp, #0]
1a00f0c0:	1c53      	adds	r3, r2, #1
1a00f0c2:	f8ca 3078 	str.w	r3, [sl, #120]	; 0x78
1a00f0c6:	2301      	movs	r3, #1
1a00f0c8:	f8ca 3090 	str.w	r3, [sl, #144]	; 0x90
1a00f0cc:	b002      	add	sp, #8
1a00f0ce:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
1a00f0d2:	4770      	bx	lr
1a00f0d4:	9a01      	ldr	r2, [sp, #4]
1a00f0d6:	f932 3009 	ldrsh.w	r3, [r2, r9]
1a00f0da:	9a00      	ldr	r2, [sp, #0]
1a00f0dc:	f8cc 307c 	str.w	r3, [ip, #124]	; 0x7c
1a00f0e0:	2400      	movs	r4, #0
1a00f0e2:	2500      	movs	r5, #0
1a00f0e4:	e7c0      	b.n	1a00f068 <inv_fast_nomot_store_data+0x30>
1a00f0e6:	bf00      	nop

1a00f0e8 <inv_fast_nomot_store_data_compass>:
1a00f0e8:	6803      	ldr	r3, [r0, #0]
1a00f0ea:	66d3      	str	r3, [r2, #108]	; 0x6c
1a00f0ec:	6843      	ldr	r3, [r0, #4]
1a00f0ee:	6713      	str	r3, [r2, #112]	; 0x70
1a00f0f0:	6883      	ldr	r3, [r0, #8]
1a00f0f2:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
1a00f0f6:	b4f0      	push	{r4, r5, r6, r7}
1a00f0f8:	6f97      	ldr	r7, [r2, #120]	; 0x78
1a00f0fa:	6753      	str	r3, [r2, #116]	; 0x74
1a00f0fc:	b17f      	cbz	r7, 1a00f11e <inv_fast_nomot_store_data_compass+0x36>
1a00f0fe:	4613      	mov	r3, r2
1a00f100:	2100      	movs	r1, #0
1a00f102:	5846      	ldr	r6, [r0, r1]
1a00f104:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
1a00f106:	6e1d      	ldr	r5, [r3, #96]	; 0x60
1a00f108:	1b34      	subs	r4, r6, r4
1a00f10a:	2c00      	cmp	r4, #0
1a00f10c:	bfb8      	it	lt
1a00f10e:	4264      	neglt	r4, r4
1a00f110:	3104      	adds	r1, #4
1a00f112:	42ac      	cmp	r4, r5
1a00f114:	bfc8      	it	gt
1a00f116:	661c      	strgt	r4, [r3, #96]	; 0x60
1a00f118:	3304      	adds	r3, #4
1a00f11a:	290c      	cmp	r1, #12
1a00f11c:	d1f1      	bne.n	1a00f102 <inv_fast_nomot_store_data_compass+0x1a>
1a00f11e:	3701      	adds	r7, #1
1a00f120:	2301      	movs	r3, #1
1a00f122:	6797      	str	r7, [r2, #120]	; 0x78
1a00f124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
1a00f128:	bcf0      	pop	{r4, r5, r6, r7}
1a00f12a:	4770      	bx	lr

1a00f12c <inv_reset_min_max_gyro_accel_statistics>:
1a00f12c:	4a0b      	ldr	r2, [pc, #44]	; (1a00f15c <inv_reset_min_max_gyro_accel_statistics+0x30>)
1a00f12e:	4611      	mov	r1, r2
1a00f130:	2300      	movs	r3, #0
1a00f132:	f841 3b04 	str.w	r3, [r1], #4
1a00f136:	3104      	adds	r1, #4
1a00f138:	6053      	str	r3, [r2, #4]
1a00f13a:	f841 3b04 	str.w	r3, [r1], #4
1a00f13e:	6213      	str	r3, [r2, #32]
1a00f140:	600b      	str	r3, [r1, #0]
1a00f142:	6253      	str	r3, [r2, #36]	; 0x24
1a00f144:	6293      	str	r3, [r2, #40]	; 0x28
1a00f146:	62d3      	str	r3, [r2, #44]	; 0x2c
1a00f148:	6113      	str	r3, [r2, #16]
1a00f14a:	6153      	str	r3, [r2, #20]
1a00f14c:	6193      	str	r3, [r2, #24]
1a00f14e:	61d3      	str	r3, [r2, #28]
1a00f150:	6313      	str	r3, [r2, #48]	; 0x30
1a00f152:	6353      	str	r3, [r2, #52]	; 0x34
1a00f154:	6393      	str	r3, [r2, #56]	; 0x38
1a00f156:	63d3      	str	r3, [r2, #60]	; 0x3c
1a00f158:	4770      	bx	lr
1a00f15a:	bf00      	nop
1a00f15c:	10088f88 	.word	0x10088f88

1a00f160 <inv_detect_motion_by_gyro_accel>:
1a00f160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00f164:	f8df 8128 	ldr.w	r8, [pc, #296]	; 1a00f290 <inv_detect_motion_by_gyro_accel+0x130>
1a00f168:	4f46      	ldr	r7, [pc, #280]	; (1a00f284 <inv_detect_motion_by_gyro_accel+0x124>)
1a00f16a:	f8d8 6074 	ldr.w	r6, [r8, #116]	; 0x74
1a00f16e:	f8d8 506c 	ldr.w	r5, [r8, #108]	; 0x6c
1a00f172:	f8d8 4078 	ldr.w	r4, [r8, #120]	; 0x78
1a00f176:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
1a00f17a:	f8d8 207c 	ldr.w	r2, [r8, #124]	; 0x7c
1a00f17e:	f8d8 1070 	ldr.w	r1, [r8, #112]	; 0x70
1a00f182:	1b9e      	subs	r6, r3, r6
1a00f184:	1b2c      	subs	r4, r5, r4
1a00f186:	42b4      	cmp	r4, r6
1a00f188:	bfb8      	it	lt
1a00f18a:	4634      	movlt	r4, r6
1a00f18c:	1a89      	subs	r1, r1, r2
1a00f18e:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
1a00f190:	428c      	cmp	r4, r1
1a00f192:	bfac      	ite	ge
1a00f194:	4622      	movge	r2, r4
1a00f196:	460a      	movlt	r2, r1
1a00f198:	4296      	cmp	r6, r2
1a00f19a:	db2f      	blt.n	1a00f1fc <inv_detect_motion_by_gyro_accel+0x9c>
1a00f19c:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00f19e:	05de      	lsls	r6, r3, #23
1a00f1a0:	d403      	bmi.n	1a00f1aa <inv_detect_motion_by_gyro_accel+0x4a>
1a00f1a2:	2602      	movs	r6, #2
1a00f1a4:	4630      	mov	r0, r6
1a00f1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00f1aa:	f8d8 3000 	ldr.w	r3, [r8]
1a00f1ae:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
1a00f1b2:	429a      	cmp	r2, r3
1a00f1b4:	dbf5      	blt.n	1a00f1a2 <inv_detect_motion_by_gyro_accel+0x42>
1a00f1b6:	6f42      	ldr	r2, [r0, #116]	; 0x74
1a00f1b8:	05d0      	lsls	r0, r2, #23
1a00f1ba:	d525      	bpl.n	1a00f208 <inv_detect_motion_by_gyro_accel+0xa8>
1a00f1bc:	f8d8 21b0 	ldr.w	r2, [r8, #432]	; 0x1b0
1a00f1c0:	4293      	cmp	r3, r2
1a00f1c2:	dcee      	bgt.n	1a00f1a2 <inv_detect_motion_by_gyro_accel+0x42>
1a00f1c4:	f508 709c 	add.w	r0, r8, #312	; 0x138
1a00f1c8:	f7ff fdac 	bl	1a00ed24 <inv_fast_nomot_parameter>
1a00f1cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
1a00f1d0:	0d04      	lsrs	r4, r0, #20
1a00f1d2:	ea44 3401 	orr.w	r4, r4, r1, lsl #12
1a00f1d6:	150d      	asrs	r5, r1, #20
1a00f1d8:	42a2      	cmp	r2, r4
1a00f1da:	eb73 0005 	sbcs.w	r0, r3, r5
1a00f1de:	f508 71ec 	add.w	r1, r8, #472	; 0x1d8
1a00f1e2:	e9c1 4500 	strd	r4, r5, [r1]
1a00f1e6:	db36      	blt.n	1a00f256 <inv_detect_motion_by_gyro_accel+0xf6>
1a00f1e8:	2601      	movs	r6, #1
1a00f1ea:	2100      	movs	r1, #0
1a00f1ec:	2298      	movs	r2, #152	; 0x98
1a00f1ee:	4826      	ldr	r0, [pc, #152]	; (1a00f288 <inv_detect_motion_by_gyro_accel+0x128>)
1a00f1f0:	f005 fd72 	bl	1a014cd8 <memset>
1a00f1f4:	2004      	movs	r0, #4
1a00f1f6:	f7ff fd29 	bl	1a00ec4c <inv_init_maxmin>
1a00f1fa:	e006      	b.n	1a00f20a <inv_detect_motion_by_gyro_accel+0xaa>
1a00f1fc:	2600      	movs	r6, #0
1a00f1fe:	f7ff fd7b 	bl	1a00ecf8 <inv_reset_packet>
1a00f202:	4630      	mov	r0, r6
1a00f204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00f208:	2601      	movs	r6, #1
1a00f20a:	4820      	ldr	r0, [pc, #128]	; (1a00f28c <inv_detect_motion_by_gyro_accel+0x12c>)
1a00f20c:	f7ff fd8a 	bl	1a00ed24 <inv_fast_nomot_parameter>
1a00f210:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
1a00f214:	460b      	mov	r3, r1
1a00f216:	491e      	ldr	r1, [pc, #120]	; (1a00f290 <inv_detect_motion_by_gyro_accel+0x130>)
1a00f218:	4602      	mov	r2, r0
1a00f21a:	f501 70f8 	add.w	r0, r1, #496	; 0x1f0
1a00f21e:	e9c0 2300 	strd	r2, r3, [r0]
1a00f222:	4294      	cmp	r4, r2
1a00f224:	eb75 0003 	sbcs.w	r0, r5, r3
1a00f228:	dabc      	bge.n	1a00f1a4 <inv_detect_motion_by_gyro_accel+0x44>
1a00f22a:	f8d1 4228 	ldr.w	r4, [r1, #552]	; 0x228
1a00f22e:	b16c      	cbz	r4, 1a00f24c <inv_detect_motion_by_gyro_accel+0xec>
1a00f230:	460d      	mov	r5, r1
1a00f232:	e9f5 0188 	ldrd	r0, r1, [r5, #544]!	; 0x220
1a00f236:	4282      	cmp	r2, r0
1a00f238:	eb73 0601 	sbcs.w	r6, r3, r1
1a00f23c:	da01      	bge.n	1a00f242 <inv_detect_motion_by_gyro_accel+0xe2>
1a00f23e:	e9c5 2300 	strd	r2, r3, [r5]
1a00f242:	3401      	adds	r4, #1
1a00f244:	f8c8 4228 	str.w	r4, [r8, #552]	; 0x228
1a00f248:	2600      	movs	r6, #0
1a00f24a:	e7ab      	b.n	1a00f1a4 <inv_detect_motion_by_gyro_accel+0x44>
1a00f24c:	f501 7108 	add.w	r1, r1, #544	; 0x220
1a00f250:	e9c1 2300 	strd	r2, r3, [r1]
1a00f254:	e7f5      	b.n	1a00f242 <inv_detect_motion_by_gyro_accel+0xe2>
1a00f256:	f8d8 1238 	ldr.w	r1, [r8, #568]	; 0x238
1a00f25a:	b941      	cbnz	r1, 1a00f26e <inv_detect_motion_by_gyro_accel+0x10e>
1a00f25c:	f508 730c 	add.w	r3, r8, #560	; 0x230
1a00f260:	e9c3 4500 	strd	r4, r5, [r3]
1a00f264:	3101      	adds	r1, #1
1a00f266:	f8c8 1238 	str.w	r1, [r8, #568]	; 0x238
1a00f26a:	2600      	movs	r6, #0
1a00f26c:	e7bd      	b.n	1a00f1ea <inv_detect_motion_by_gyro_accel+0x8a>
1a00f26e:	4640      	mov	r0, r8
1a00f270:	e9f0 238c 	ldrd	r2, r3, [r0, #560]!	; 0x230
1a00f274:	4294      	cmp	r4, r2
1a00f276:	eb75 0603 	sbcs.w	r6, r5, r3
1a00f27a:	daf3      	bge.n	1a00f264 <inv_detect_motion_by_gyro_accel+0x104>
1a00f27c:	e9c0 4500 	strd	r4, r5, [r0]
1a00f280:	e7f0      	b.n	1a00f264 <inv_detect_motion_by_gyro_accel+0x104>
1a00f282:	bf00      	nop
1a00f284:	100870a0 	.word	0x100870a0
1a00f288:	10088ea0 	.word	0x10088ea0
1a00f28c:	10088d70 	.word	0x10088d70
1a00f290:	10088d68 	.word	0x10088d68

1a00f294 <inv_sensor_data_preprocess>:
1a00f294:	b530      	push	{r4, r5, lr}
1a00f296:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00f298:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
1a00f29c:	2bc0      	cmp	r3, #192	; 0xc0
1a00f29e:	b085      	sub	sp, #20
1a00f2a0:	4604      	mov	r4, r0
1a00f2a2:	d039      	beq.n	1a00f318 <inv_sensor_data_preprocess+0x84>
1a00f2a4:	6f63      	ldr	r3, [r4, #116]	; 0x74
1a00f2a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
1a00f2aa:	2bc0      	cmp	r3, #192	; 0xc0
1a00f2ac:	d02e      	beq.n	1a00f30c <inv_sensor_data_preprocess+0x78>
1a00f2ae:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
1a00f2b2:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
1a00f2b6:	2ac0      	cmp	r2, #192	; 0xc0
1a00f2b8:	d018      	beq.n	1a00f2ec <inv_sensor_data_preprocess+0x58>
1a00f2ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
1a00f2be:	2b60      	cmp	r3, #96	; 0x60
1a00f2c0:	d001      	beq.n	1a00f2c6 <inv_sensor_data_preprocess+0x32>
1a00f2c2:	b005      	add	sp, #20
1a00f2c4:	bd30      	pop	{r4, r5, pc}
1a00f2c6:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
1a00f2ca:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
1a00f2ce:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
1a00f2d2:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
1a00f2d6:	4a13      	ldr	r2, [pc, #76]	; (1a00f324 <inv_sensor_data_preprocess+0x90>)
1a00f2d8:	1384      	asrs	r4, r0, #14
1a00f2da:	13ad      	asrs	r5, r5, #14
1a00f2dc:	139b      	asrs	r3, r3, #14
1a00f2de:	a801      	add	r0, sp, #4
1a00f2e0:	9501      	str	r5, [sp, #4]
1a00f2e2:	9402      	str	r4, [sp, #8]
1a00f2e4:	9303      	str	r3, [sp, #12]
1a00f2e6:	f7ff feff 	bl	1a00f0e8 <inv_fast_nomot_store_data_compass>
1a00f2ea:	e7ea      	b.n	1a00f2c2 <inv_sensor_data_preprocess+0x2e>
1a00f2ec:	f9b4 008c 	ldrsh.w	r0, [r4, #140]	; 0x8c
1a00f2f0:	f9b4 508e 	ldrsh.w	r5, [r4, #142]	; 0x8e
1a00f2f4:	f9b4 3090 	ldrsh.w	r3, [r4, #144]	; 0x90
1a00f2f8:	9001      	str	r0, [sp, #4]
1a00f2fa:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
1a00f2fe:	4a09      	ldr	r2, [pc, #36]	; (1a00f324 <inv_sensor_data_preprocess+0x90>)
1a00f300:	9502      	str	r5, [sp, #8]
1a00f302:	a801      	add	r0, sp, #4
1a00f304:	9303      	str	r3, [sp, #12]
1a00f306:	f7ff feef 	bl	1a00f0e8 <inv_fast_nomot_store_data_compass>
1a00f30a:	e7da      	b.n	1a00f2c2 <inv_sensor_data_preprocess+0x2e>
1a00f30c:	f104 0048 	add.w	r0, r4, #72	; 0x48
1a00f310:	4905      	ldr	r1, [pc, #20]	; (1a00f328 <inv_sensor_data_preprocess+0x94>)
1a00f312:	f7ff fe91 	bl	1a00f038 <inv_fast_nomot_store_data>
1a00f316:	e7ca      	b.n	1a00f2ae <inv_sensor_data_preprocess+0x1a>
1a00f318:	3004      	adds	r0, #4
1a00f31a:	4904      	ldr	r1, [pc, #16]	; (1a00f32c <inv_sensor_data_preprocess+0x98>)
1a00f31c:	f7ff fe8c 	bl	1a00f038 <inv_fast_nomot_store_data>
1a00f320:	e7c0      	b.n	1a00f2a4 <inv_sensor_data_preprocess+0x10>
1a00f322:	bf00      	nop
1a00f324:	10088e08 	.word	0x10088e08
1a00f328:	10088ea0 	.word	0x10088ea0
1a00f32c:	10088d70 	.word	0x10088d70

1a00f330 <inv_generate_fast_nomot>:
1a00f330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00f334:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00f336:	05d9      	lsls	r1, r3, #23
1a00f338:	4607      	mov	r7, r0
1a00f33a:	f140 8087 	bpl.w	1a00f44c <inv_generate_fast_nomot+0x11c>
1a00f33e:	6f42      	ldr	r2, [r0, #116]	; 0x74
1a00f340:	f002 0250 	and.w	r2, r2, #80	; 0x50
1a00f344:	2a40      	cmp	r2, #64	; 0x40
1a00f346:	f000 8084 	beq.w	1a00f452 <inv_generate_fast_nomot+0x122>
1a00f34a:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
1a00f34e:	f002 0250 	and.w	r2, r2, #80	; 0x50
1a00f352:	2a40      	cmp	r2, #64	; 0x40
1a00f354:	f003 0350 	and.w	r3, r3, #80	; 0x50
1a00f358:	d07b      	beq.n	1a00f452 <inv_generate_fast_nomot+0x122>
1a00f35a:	2b40      	cmp	r3, #64	; 0x40
1a00f35c:	d079      	beq.n	1a00f452 <inv_generate_fast_nomot+0x122>
1a00f35e:	4ec0      	ldr	r6, [pc, #768]	; (1a00f660 <inv_generate_fast_nomot+0x330>)
1a00f360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a00f362:	f8d6 2208 	ldr.w	r2, [r6, #520]	; 0x208
1a00f366:	4cbe      	ldr	r4, [pc, #760]	; (1a00f660 <inv_generate_fast_nomot+0x330>)
1a00f368:	429a      	cmp	r2, r3
1a00f36a:	d01a      	beq.n	1a00f3a2 <inv_generate_fast_nomot+0x72>
1a00f36c:	2b09      	cmp	r3, #9
1a00f36e:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
1a00f372:	4dbc      	ldr	r5, [pc, #752]	; (1a00f664 <inv_generate_fast_nomot+0x334>)
1a00f374:	f340 812e 	ble.w	1a00f5d4 <inv_generate_fast_nomot+0x2a4>
1a00f378:	6b6b      	ldr	r3, [r5, #52]	; 0x34
1a00f37a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
1a00f37c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
1a00f37e:	6022      	str	r2, [r4, #0]
1a00f380:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
1a00f384:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
1a00f388:	461a      	mov	r2, r3
1a00f38a:	f1c2 0210 	rsb	r2, r2, #16
1a00f38e:	2119      	movs	r1, #25
1a00f390:	fa01 f303 	lsl.w	r3, r1, r3
1a00f394:	f8c6 2210 	str.w	r2, [r6, #528]	; 0x210
1a00f398:	f44f 4280 	mov.w	r2, #16384	; 0x4000
1a00f39c:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
1a00f3a0:	63eb      	str	r3, [r5, #60]	; 0x3c
1a00f3a2:	4638      	mov	r0, r7
1a00f3a4:	f7ff ff76 	bl	1a00f294 <inv_sensor_data_preprocess>
1a00f3a8:	f896 31e8 	ldrb.w	r3, [r6, #488]	; 0x1e8
1a00f3ac:	2b06      	cmp	r3, #6
1a00f3ae:	d84d      	bhi.n	1a00f44c <inv_generate_fast_nomot+0x11c>
1a00f3b0:	e8df f013 	tbh	[pc, r3, lsl #1]
1a00f3b4:	00e000d1 	.word	0x00e000d1
1a00f3b8:	000700c8 	.word	0x000700c8
1a00f3bc:	007b009f 	.word	0x007b009f
1a00f3c0:	0058      	.short	0x0058
1a00f3c2:	4638      	mov	r0, r7
1a00f3c4:	f7ff fecc 	bl	1a00f160 <inv_detect_motion_by_gyro_accel>
1a00f3c8:	2800      	cmp	r0, #0
1a00f3ca:	f000 80ff 	beq.w	1a00f5cc <inv_generate_fast_nomot+0x29c>
1a00f3ce:	2801      	cmp	r0, #1
1a00f3d0:	d13c      	bne.n	1a00f44c <inv_generate_fast_nomot+0x11c>
1a00f3d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
1a00f3d6:	05da      	lsls	r2, r3, #23
1a00f3d8:	f140 814a 	bpl.w	1a00f670 <inv_generate_fast_nomot+0x340>
1a00f3dc:	f8d6 2100 	ldr.w	r2, [r6, #256]	; 0x100
1a00f3e0:	f8d6 4104 	ldr.w	r4, [r6, #260]	; 0x104
1a00f3e4:	4d9f      	ldr	r5, [pc, #636]	; (1a00f664 <inv_generate_fast_nomot+0x334>)
1a00f3e6:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
1a00f3ea:	499d      	ldr	r1, [pc, #628]	; (1a00f660 <inv_generate_fast_nomot+0x330>)
1a00f3ec:	42a2      	cmp	r2, r4
1a00f3ee:	bfa8      	it	ge
1a00f3f0:	4614      	movge	r4, r2
1a00f3f2:	e9d5 8902 	ldrd	r8, r9, [r5, #8]
1a00f3f6:	4284      	cmp	r4, r0
1a00f3f8:	bfa8      	it	ge
1a00f3fa:	4620      	movge	r0, r4
1a00f3fc:	4602      	mov	r2, r0
1a00f3fe:	17c3      	asrs	r3, r0, #31
1a00f400:	f501 70e8 	add.w	r0, r1, #464	; 0x1d0
1a00f404:	e9c0 2300 	strd	r2, r3, [r0]
1a00f408:	4590      	cmp	r8, r2
1a00f40a:	eb79 0003 	sbcs.w	r0, r9, r3
1a00f40e:	f280 8117 	bge.w	1a00f640 <inv_generate_fast_nomot+0x310>
1a00f412:	2305      	movs	r3, #5
1a00f414:	f881 31e8 	strb.w	r3, [r1, #488]	; 0x1e8
1a00f418:	4993      	ldr	r1, [pc, #588]	; (1a00f668 <inv_generate_fast_nomot+0x338>)
1a00f41a:	f8d6 5258 	ldr.w	r5, [r6, #600]	; 0x258
1a00f41e:	e9d1 2300 	ldrd	r2, r3, [r1]
1a00f422:	2d00      	cmp	r5, #0
1a00f424:	f040 80fb 	bne.w	1a00f61e <inv_generate_fast_nomot+0x2ee>
1a00f428:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
1a00f42c:	498f      	ldr	r1, [pc, #572]	; (1a00f66c <inv_generate_fast_nomot+0x33c>)
1a00f42e:	f8d6 4248 	ldr.w	r4, [r6, #584]	; 0x248
1a00f432:	3501      	adds	r5, #1
1a00f434:	f8c6 5258 	str.w	r5, [r6, #600]	; 0x258
1a00f438:	e9d1 2300 	ldrd	r2, r3, [r1]
1a00f43c:	2c00      	cmp	r4, #0
1a00f43e:	f040 80e3 	bne.w	1a00f608 <inv_generate_fast_nomot+0x2d8>
1a00f442:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
1a00f446:	3401      	adds	r4, #1
1a00f448:	f8c6 4248 	str.w	r4, [r6, #584]	; 0x248
1a00f44c:	2000      	movs	r0, #0
1a00f44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00f452:	4e83      	ldr	r6, [pc, #524]	; (1a00f660 <inv_generate_fast_nomot+0x330>)
1a00f454:	f7ff fc50 	bl	1a00ecf8 <inv_reset_packet>
1a00f458:	2300      	movs	r3, #0
1a00f45a:	f8c6 31e0 	str.w	r3, [r6, #480]	; 0x1e0
1a00f45e:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
1a00f462:	e77d      	b.n	1a00f360 <inv_generate_fast_nomot+0x30>
1a00f464:	4638      	mov	r0, r7
1a00f466:	f7ff fe7b 	bl	1a00f160 <inv_detect_motion_by_gyro_accel>
1a00f46a:	2801      	cmp	r0, #1
1a00f46c:	4604      	mov	r4, r0
1a00f46e:	f000 80c7 	beq.w	1a00f600 <inv_generate_fast_nomot+0x2d0>
1a00f472:	2800      	cmp	r0, #0
1a00f474:	d1ea      	bne.n	1a00f44c <inv_generate_fast_nomot+0x11c>
1a00f476:	f7ff fc3f 	bl	1a00ecf8 <inv_reset_packet>
1a00f47a:	f506 7086 	add.w	r0, r6, #268	; 0x10c
1a00f47e:	c807      	ldmia	r0, {r0, r1, r2}
1a00f480:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
1a00f484:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
1a00f488:	f8c6 4100 	str.w	r4, [r6, #256]	; 0x100
1a00f48c:	f8c6 1120 	str.w	r1, [r6, #288]	; 0x120
1a00f490:	f8c6 4104 	str.w	r4, [r6, #260]	; 0x104
1a00f494:	f8c6 2124 	str.w	r2, [r6, #292]	; 0x124
1a00f498:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
1a00f49c:	f8c6 312c 	str.w	r3, [r6, #300]	; 0x12c
1a00f4a0:	f8c6 4118 	str.w	r4, [r6, #280]	; 0x118
1a00f4a4:	f8c6 4130 	str.w	r4, [r6, #304]	; 0x130
1a00f4a8:	e7d0      	b.n	1a00f44c <inv_generate_fast_nomot+0x11c>
1a00f4aa:	2306      	movs	r3, #6
1a00f4ac:	2001      	movs	r0, #1
1a00f4ae:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
1a00f4b2:	f7f9 fb63 	bl	1a008b7c <inv_set_motion_state>
1a00f4b6:	f7ff fc1f 	bl	1a00ecf8 <inv_reset_packet>
1a00f4ba:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
1a00f4be:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
1a00f4c2:	f8d6 1114 	ldr.w	r1, [r6, #276]	; 0x114
1a00f4c6:	f8d6 2128 	ldr.w	r2, [r6, #296]	; 0x128
1a00f4ca:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
1a00f4ce:	2300      	movs	r3, #0
1a00f4d0:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
1a00f4d4:	f8c6 0120 	str.w	r0, [r6, #288]	; 0x120
1a00f4d8:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
1a00f4dc:	f8c6 1124 	str.w	r1, [r6, #292]	; 0x124
1a00f4e0:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
1a00f4e4:	f8c6 212c 	str.w	r2, [r6, #300]	; 0x12c
1a00f4e8:	f8c6 3118 	str.w	r3, [r6, #280]	; 0x118
1a00f4ec:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
1a00f4f0:	e7ac      	b.n	1a00f44c <inv_generate_fast_nomot+0x11c>
1a00f4f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
1a00f4f6:	05db      	lsls	r3, r3, #23
1a00f4f8:	d519      	bpl.n	1a00f52e <inv_generate_fast_nomot+0x1fe>
1a00f4fa:	f8d6 5100 	ldr.w	r5, [r6, #256]	; 0x100
1a00f4fe:	f8d6 4104 	ldr.w	r4, [r6, #260]	; 0x104
1a00f502:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
1a00f506:	4956      	ldr	r1, [pc, #344]	; (1a00f660 <inv_generate_fast_nomot+0x330>)
1a00f508:	42a5      	cmp	r5, r4
1a00f50a:	bfa8      	it	ge
1a00f50c:	462c      	movge	r4, r5
1a00f50e:	4284      	cmp	r4, r0
1a00f510:	bfa8      	it	ge
1a00f512:	4620      	movge	r0, r4
1a00f514:	4c53      	ldr	r4, [pc, #332]	; (1a00f664 <inv_generate_fast_nomot+0x334>)
1a00f516:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
1a00f51a:	4602      	mov	r2, r0
1a00f51c:	17c3      	asrs	r3, r0, #31
1a00f51e:	f501 70e8 	add.w	r0, r1, #464	; 0x1d0
1a00f522:	e9c0 2300 	strd	r2, r3, [r0]
1a00f526:	4294      	cmp	r4, r2
1a00f528:	eb75 0003 	sbcs.w	r0, r5, r3
1a00f52c:	db64      	blt.n	1a00f5f8 <inv_generate_fast_nomot+0x2c8>
1a00f52e:	4638      	mov	r0, r7
1a00f530:	f7ff fe16 	bl	1a00f160 <inv_detect_motion_by_gyro_accel>
1a00f534:	2800      	cmp	r0, #0
1a00f536:	d049      	beq.n	1a00f5cc <inv_generate_fast_nomot+0x29c>
1a00f538:	2801      	cmp	r0, #1
1a00f53a:	d187      	bne.n	1a00f44c <inv_generate_fast_nomot+0x11c>
1a00f53c:	4638      	mov	r0, r7
1a00f53e:	f7ff fd15 	bl	1a00ef6c <inv_fast_nomot_set_gyro_bias>
1a00f542:	e769      	b.n	1a00f418 <inv_generate_fast_nomot+0xe8>
1a00f544:	2303      	movs	r3, #3
1a00f546:	4638      	mov	r0, r7
1a00f548:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
1a00f54c:	f7ff fd0e 	bl	1a00ef6c <inv_fast_nomot_set_gyro_bias>
1a00f550:	f7ff fbd2 	bl	1a00ecf8 <inv_reset_packet>
1a00f554:	e77a      	b.n	1a00f44c <inv_generate_fast_nomot+0x11c>
1a00f556:	f8d6 31e0 	ldr.w	r3, [r6, #480]	; 0x1e0
1a00f55a:	1c5a      	adds	r2, r3, #1
1a00f55c:	2b09      	cmp	r3, #9
1a00f55e:	f8c6 21e0 	str.w	r2, [r6, #480]	; 0x1e0
1a00f562:	f77f af73 	ble.w	1a00f44c <inv_generate_fast_nomot+0x11c>
1a00f566:	f7ff fbc7 	bl	1a00ecf8 <inv_reset_packet>
1a00f56a:	4b3d      	ldr	r3, [pc, #244]	; (1a00f660 <inv_generate_fast_nomot+0x330>)
1a00f56c:	2201      	movs	r2, #1
1a00f56e:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
1a00f572:	e76b      	b.n	1a00f44c <inv_generate_fast_nomot+0x11c>
1a00f574:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
1a00f578:	4c39      	ldr	r4, [pc, #228]	; (1a00f660 <inv_generate_fast_nomot+0x330>)
1a00f57a:	2b01      	cmp	r3, #1
1a00f57c:	f47f af66 	bne.w	1a00f44c <inv_generate_fast_nomot+0x11c>
1a00f580:	4638      	mov	r0, r7
1a00f582:	f7ff fded 	bl	1a00f160 <inv_detect_motion_by_gyro_accel>
1a00f586:	2800      	cmp	r0, #0
1a00f588:	d154      	bne.n	1a00f634 <inv_generate_fast_nomot+0x304>
1a00f58a:	2305      	movs	r3, #5
1a00f58c:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
1a00f590:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
1a00f594:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
1a00f598:	f8d6 1114 	ldr.w	r1, [r6, #276]	; 0x114
1a00f59c:	f8d6 2128 	ldr.w	r2, [r6, #296]	; 0x128
1a00f5a0:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
1a00f5a4:	2300      	movs	r3, #0
1a00f5a6:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
1a00f5aa:	f8c6 0120 	str.w	r0, [r6, #288]	; 0x120
1a00f5ae:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
1a00f5b2:	f8c6 1124 	str.w	r1, [r6, #292]	; 0x124
1a00f5b6:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
1a00f5ba:	f8c6 212c 	str.w	r2, [r6, #300]	; 0x12c
1a00f5be:	f8c6 3118 	str.w	r3, [r6, #280]	; 0x118
1a00f5c2:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
1a00f5c6:	f7ff fdb1 	bl	1a00f12c <inv_reset_min_max_gyro_accel_statistics>
1a00f5ca:	e73f      	b.n	1a00f44c <inv_generate_fast_nomot+0x11c>
1a00f5cc:	2305      	movs	r3, #5
1a00f5ce:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
1a00f5d2:	e73b      	b.n	1a00f44c <inv_generate_fast_nomot+0x11c>
1a00f5d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
1a00f5d6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
1a00f5d8:	005b      	lsls	r3, r3, #1
1a00f5da:	3201      	adds	r2, #1
1a00f5dc:	4618      	mov	r0, r3
1a00f5de:	6023      	str	r3, [r4, #0]
1a00f5e0:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
1a00f5e4:	f004 fdd4 	bl	1a014190 <__aeabi_i2f>
1a00f5e8:	f006 f8ee 	bl	1a0157c8 <sqrtf>
1a00f5ec:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
1a00f5f0:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
1a00f5f4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
1a00f5f6:	e6c8      	b.n	1a00f38a <inv_generate_fast_nomot+0x5a>
1a00f5f8:	2305      	movs	r3, #5
1a00f5fa:	f881 31e8 	strb.w	r3, [r1, #488]	; 0x1e8
1a00f5fe:	e725      	b.n	1a00f44c <inv_generate_fast_nomot+0x11c>
1a00f600:	2302      	movs	r3, #2
1a00f602:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
1a00f606:	e721      	b.n	1a00f44c <inv_generate_fast_nomot+0x11c>
1a00f608:	460d      	mov	r5, r1
1a00f60a:	e9f5 0114 	ldrd	r0, r1, [r5, #80]!	; 0x50
1a00f60e:	4290      	cmp	r0, r2
1a00f610:	eb71 0703 	sbcs.w	r7, r1, r3
1a00f614:	f6bf af17 	bge.w	1a00f446 <inv_generate_fast_nomot+0x116>
1a00f618:	e9c5 2300 	strd	r2, r3, [r5]
1a00f61c:	e713      	b.n	1a00f446 <inv_generate_fast_nomot+0x116>
1a00f61e:	460c      	mov	r4, r1
1a00f620:	e9f4 011e 	ldrd	r0, r1, [r4, #120]!	; 0x78
1a00f624:	4290      	cmp	r0, r2
1a00f626:	eb71 0703 	sbcs.w	r7, r1, r3
1a00f62a:	f6bf aeff 	bge.w	1a00f42c <inv_generate_fast_nomot+0xfc>
1a00f62e:	e9c4 2300 	strd	r2, r3, [r4]
1a00f632:	e6fb      	b.n	1a00f42c <inv_generate_fast_nomot+0xfc>
1a00f634:	2801      	cmp	r0, #1
1a00f636:	d1ab      	bne.n	1a00f590 <inv_generate_fast_nomot+0x260>
1a00f638:	2302      	movs	r3, #2
1a00f63a:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
1a00f63e:	e7a7      	b.n	1a00f590 <inv_generate_fast_nomot+0x260>
1a00f640:	f8d1 2128 	ldr.w	r2, [r1, #296]	; 0x128
1a00f644:	f8d1 312c 	ldr.w	r3, [r1, #300]	; 0x12c
1a00f648:	6a28      	ldr	r0, [r5, #32]
1a00f64a:	1ad3      	subs	r3, r2, r3
1a00f64c:	4283      	cmp	r3, r0
1a00f64e:	f4ff aee3 	bcc.w	1a00f418 <inv_generate_fast_nomot+0xe8>
1a00f652:	2304      	movs	r3, #4
1a00f654:	4638      	mov	r0, r7
1a00f656:	f881 31e8 	strb.w	r3, [r1, #488]	; 0x1e8
1a00f65a:	f7ff fc87 	bl	1a00ef6c <inv_fast_nomot_set_gyro_bias>
1a00f65e:	e6db      	b.n	1a00f418 <inv_generate_fast_nomot+0xe8>
1a00f660:	10088d68 	.word	0x10088d68
1a00f664:	100870a0 	.word	0x100870a0
1a00f668:	10088f40 	.word	0x10088f40
1a00f66c:	10088f58 	.word	0x10088f58
1a00f670:	2304      	movs	r3, #4
1a00f672:	4638      	mov	r0, r7
1a00f674:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
1a00f678:	f7ff fc78 	bl	1a00ef6c <inv_fast_nomot_set_gyro_bias>
1a00f67c:	e6cc      	b.n	1a00f418 <inv_generate_fast_nomot+0xe8>
1a00f67e:	bf00      	nop

1a00f680 <inv_set_default_number_of_samples>:
1a00f680:	b510      	push	{r4, lr}
1a00f682:	2300      	movs	r3, #0
1a00f684:	1040      	asrs	r0, r0, #1
1a00f686:	2800      	cmp	r0, #0
1a00f688:	d112      	bne.n	1a00f6b0 <inv_set_default_number_of_samples+0x30>
1a00f68a:	3301      	adds	r3, #1
1a00f68c:	2201      	movs	r2, #1
1a00f68e:	fa02 f203 	lsl.w	r2, r2, r3
1a00f692:	4c09      	ldr	r4, [pc, #36]	; (1a00f6b8 <inv_set_default_number_of_samples+0x38>)
1a00f694:	4610      	mov	r0, r2
1a00f696:	6322      	str	r2, [r4, #48]	; 0x30
1a00f698:	6363      	str	r3, [r4, #52]	; 0x34
1a00f69a:	f004 fd79 	bl	1a014190 <__aeabi_i2f>
1a00f69e:	f006 f893 	bl	1a0157c8 <sqrtf>
1a00f6a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a00f6a4:	63a0      	str	r0, [r4, #56]	; 0x38
1a00f6a6:	2219      	movs	r2, #25
1a00f6a8:	fa02 f303 	lsl.w	r3, r2, r3
1a00f6ac:	63e3      	str	r3, [r4, #60]	; 0x3c
1a00f6ae:	bd10      	pop	{r4, pc}
1a00f6b0:	f103 0301 	add.w	r3, r3, #1
1a00f6b4:	dce6      	bgt.n	1a00f684 <inv_set_default_number_of_samples+0x4>
1a00f6b6:	e7e8      	b.n	1a00f68a <inv_set_default_number_of_samples+0xa>
1a00f6b8:	100870a0 	.word	0x100870a0

1a00f6bc <inv_init_fast_nomot>:
1a00f6bc:	b538      	push	{r3, r4, r5, lr}
1a00f6be:	4d15      	ldr	r5, [pc, #84]	; (1a00f714 <inv_init_fast_nomot+0x58>)
1a00f6c0:	4c15      	ldr	r4, [pc, #84]	; (1a00f718 <inv_init_fast_nomot+0x5c>)
1a00f6c2:	2100      	movs	r1, #0
1a00f6c4:	f44f 7218 	mov.w	r2, #608	; 0x260
1a00f6c8:	4628      	mov	r0, r5
1a00f6ca:	f005 fb05 	bl	1a014cd8 <memset>
1a00f6ce:	2100      	movs	r1, #0
1a00f6d0:	2240      	movs	r2, #64	; 0x40
1a00f6d2:	4620      	mov	r0, r4
1a00f6d4:	f005 fb00 	bl	1a014cd8 <memset>
1a00f6d8:	2007      	movs	r0, #7
1a00f6da:	f7ff fab7 	bl	1a00ec4c <inv_init_maxmin>
1a00f6de:	2300      	movs	r3, #0
1a00f6e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
1a00f6e4:	e9c4 2306 	strd	r2, r3, [r4, #24]
1a00f6e8:	2214      	movs	r2, #20
1a00f6ea:	2300      	movs	r3, #0
1a00f6ec:	e9c4 2302 	strd	r2, r3, [r4, #8]
1a00f6f0:	f44f 7216 	mov.w	r2, #600	; 0x258
1a00f6f4:	2300      	movs	r3, #0
1a00f6f6:	e9c4 2304 	strd	r2, r3, [r4, #16]
1a00f6fa:	4b08      	ldr	r3, [pc, #32]	; (1a00f71c <inv_init_fast_nomot+0x60>)
1a00f6fc:	2019      	movs	r0, #25
1a00f6fe:	6223      	str	r3, [r4, #32]
1a00f700:	2301      	movs	r3, #1
1a00f702:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
1a00f706:	f7ff ffbb 	bl	1a00f680 <inv_set_default_number_of_samples>
1a00f70a:	2000      	movs	r0, #0
1a00f70c:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
1a00f710:	bd38      	pop	{r3, r4, r5, pc}
1a00f712:	bf00      	nop
1a00f714:	10088d68 	.word	0x10088d68
1a00f718:	100870a0 	.word	0x100870a0
1a00f71c:	2faf0800 	.word	0x2faf0800

1a00f720 <inv_enable_fast_nomot>:
1a00f720:	b508      	push	{r3, lr}
1a00f722:	f7ff ffcb 	bl	1a00f6bc <inv_init_fast_nomot>
1a00f726:	b100      	cbz	r0, 1a00f72a <inv_enable_fast_nomot+0xa>
1a00f728:	bd08      	pop	{r3, pc}
1a00f72a:	4802      	ldr	r0, [pc, #8]	; (1a00f734 <inv_enable_fast_nomot+0x14>)
1a00f72c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a00f730:	f7f9 bc5e 	b.w	1a008ff0 <inv_register_mpl_start_notification>
1a00f734:	1a00ecb9 	.word	0x1a00ecb9

1a00f738 <inv_start_9x_sensor_fusion>:
1a00f738:	4802      	ldr	r0, [pc, #8]	; (1a00f744 <inv_start_9x_sensor_fusion+0xc>)
1a00f73a:	f44f 7116 	mov.w	r1, #600	; 0x258
1a00f73e:	2204      	movs	r2, #4
1a00f740:	f7f7 be82 	b.w	1a007448 <inv_register_data_cb>
1a00f744:	1a00fcd5 	.word	0x1a00fcd5

1a00f748 <inv_filter_correction_angle>:
1a00f748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00f74c:	4689      	mov	r9, r1
1a00f74e:	6b41      	ldr	r1, [r0, #52]	; 0x34
1a00f750:	2900      	cmp	r1, #0
1a00f752:	4692      	mov	sl, r2
1a00f754:	4698      	mov	r8, r3
1a00f756:	f2c0 80b6 	blt.w	1a00f8c6 <inv_filter_correction_angle+0x17e>
1a00f75a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
1a00f75e:	3b03      	subs	r3, #3
1a00f760:	f1d3 0b00 	rsbs	fp, r3, #0
1a00f764:	eb5b 0b03 	adcs.w	fp, fp, r3
1a00f768:	4869      	ldr	r0, [pc, #420]	; (1a00f910 <inv_filter_correction_angle+0x1c8>)
1a00f76a:	f1a0 07bc 	sub.w	r7, r0, #188	; 0xbc
1a00f76e:	1d01      	adds	r1, r0, #4
1a00f770:	2224      	movs	r2, #36	; 0x24
1a00f772:	f005 fa4d 	bl	1a014c10 <memmove>
1a00f776:	2500      	movs	r5, #0
1a00f778:	f8c7 90e0 	str.w	r9, [r7, #224]	; 0xe0
1a00f77c:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
1a00f780:	f107 06e0 	add.w	r6, r7, #224	; 0xe0
1a00f784:	f854 1f04 	ldr.w	r1, [r4, #4]!
1a00f788:	4628      	mov	r0, r5
1a00f78a:	f004 fc4d 	bl	1a014028 <__addsf3>
1a00f78e:	42b4      	cmp	r4, r6
1a00f790:	4605      	mov	r5, r0
1a00f792:	d1f7      	bne.n	1a00f784 <inv_filter_correction_angle+0x3c>
1a00f794:	495f      	ldr	r1, [pc, #380]	; (1a00f914 <inv_filter_correction_angle+0x1cc>)
1a00f796:	f004 fe03 	bl	1a0143a0 <__aeabi_fdiv>
1a00f79a:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
1a00f79e:	4604      	mov	r4, r0
1a00f7a0:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
1a00f7a4:	4b5c      	ldr	r3, [pc, #368]	; (1a00f918 <inv_filter_correction_angle+0x1d0>)
1a00f7a6:	dd16      	ble.n	1a00f7d6 <inv_filter_correction_angle+0x8e>
1a00f7a8:	22c8      	movs	r2, #200	; 0xc8
1a00f7aa:	4640      	mov	r0, r8
1a00f7ac:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
1a00f7b0:	f004 fcee 	bl	1a014190 <__aeabi_i2f>
1a00f7b4:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
1a00f7b8:	4605      	mov	r5, r0
1a00f7ba:	4648      	mov	r0, r9
1a00f7bc:	db74      	blt.n	1a00f8a8 <inv_filter_correction_angle+0x160>
1a00f7be:	4957      	ldr	r1, [pc, #348]	; (1a00f91c <inv_filter_correction_angle+0x1d4>)
1a00f7c0:	f004 fdee 	bl	1a0143a0 <__aeabi_fdiv>
1a00f7c4:	4601      	mov	r1, r0
1a00f7c6:	4628      	mov	r0, r5
1a00f7c8:	f004 fd36 	bl	1a014238 <__aeabi_fmul>
1a00f7cc:	4954      	ldr	r1, [pc, #336]	; (1a00f920 <inv_filter_correction_angle+0x1d8>)
1a00f7ce:	f004 fde7 	bl	1a0143a0 <__aeabi_fdiv>
1a00f7d2:	4605      	mov	r5, r0
1a00f7d4:	e021      	b.n	1a00f81a <inv_filter_correction_angle+0xd2>
1a00f7d6:	4a53      	ldr	r2, [pc, #332]	; (1a00f924 <inv_filter_correction_angle+0x1dc>)
1a00f7d8:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
1a00f7dc:	fb82 0208 	smull	r0, r2, r2, r8
1a00f7e0:	ea4f 70e8 	mov.w	r0, r8, asr #31
1a00f7e4:	eba0 22e2 	sub.w	r2, r0, r2, asr #11
1a00f7e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a00f7ec:	1856      	adds	r6, r2, r1
1a00f7ee:	2e00      	cmp	r6, #0
1a00f7f0:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
1a00f7f4:	494c      	ldr	r1, [pc, #304]	; (1a00f928 <inv_filter_correction_angle+0x1e0>)
1a00f7f6:	4648      	mov	r0, r9
1a00f7f8:	db68      	blt.n	1a00f8cc <inv_filter_correction_angle+0x184>
1a00f7fa:	f004 fdd1 	bl	1a0143a0 <__aeabi_fdiv>
1a00f7fe:	4605      	mov	r5, r0
1a00f800:	4640      	mov	r0, r8
1a00f802:	f004 fcc5 	bl	1a014190 <__aeabi_i2f>
1a00f806:	4601      	mov	r1, r0
1a00f808:	4628      	mov	r0, r5
1a00f80a:	f004 fd15 	bl	1a014238 <__aeabi_fmul>
1a00f80e:	4944      	ldr	r1, [pc, #272]	; (1a00f920 <inv_filter_correction_angle+0x1d8>)
1a00f810:	f004 fdc6 	bl	1a0143a0 <__aeabi_fdiv>
1a00f814:	4605      	mov	r5, r0
1a00f816:	2e00      	cmp	r6, #0
1a00f818:	d069      	beq.n	1a00f8ee <inv_filter_correction_angle+0x1a6>
1a00f81a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
1a00f81e:	b103      	cbz	r3, 1a00f822 <inv_filter_correction_angle+0xda>
1a00f820:	464d      	mov	r5, r9
1a00f822:	4b42      	ldr	r3, [pc, #264]	; (1a00f92c <inv_filter_correction_angle+0x1e4>)
1a00f824:	4598      	cmp	r8, r3
1a00f826:	bf08      	it	eq
1a00f828:	464d      	moveq	r5, r9
1a00f82a:	4628      	mov	r0, r5
1a00f82c:	2100      	movs	r1, #0
1a00f82e:	f004 fe97 	bl	1a014560 <__aeabi_fcmpeq>
1a00f832:	2800      	cmp	r0, #0
1a00f834:	d043      	beq.n	1a00f8be <inv_filter_correction_angle+0x176>
1a00f836:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
1a00f83a:	4621      	mov	r1, r4
1a00f83c:	f004 fbf2 	bl	1a014024 <__aeabi_fsub>
1a00f840:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a00f844:	f004 f884 	bl	1a013950 <__aeabi_f2d>
1a00f848:	a32d      	add	r3, pc, #180	; (adr r3, 1a00f900 <inv_filter_correction_angle+0x1b8>)
1a00f84a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00f84e:	f004 fb63 	bl	1a013f18 <__aeabi_dcmpgt>
1a00f852:	b330      	cbz	r0, 1a00f8a2 <inv_filter_correction_angle+0x15a>
1a00f854:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
1a00f858:	2100      	movs	r1, #0
1a00f85a:	f004 fe81 	bl	1a014560 <__aeabi_fcmpeq>
1a00f85e:	b300      	cbz	r0, 1a00f8a2 <inv_filter_correction_angle+0x15a>
1a00f860:	f1bb 0f00 	cmp.w	fp, #0
1a00f864:	d01d      	beq.n	1a00f8a2 <inv_filter_correction_angle+0x15a>
1a00f866:	4b2c      	ldr	r3, [pc, #176]	; (1a00f918 <inv_filter_correction_angle+0x1d0>)
1a00f868:	22c8      	movs	r2, #200	; 0xc8
1a00f86a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
1a00f86e:	4648      	mov	r0, r9
1a00f870:	f004 f86e 	bl	1a013950 <__aeabi_f2d>
1a00f874:	2200      	movs	r2, #0
1a00f876:	4b2e      	ldr	r3, [pc, #184]	; (1a00f930 <inv_filter_correction_angle+0x1e8>)
1a00f878:	f004 f9e8 	bl	1a013c4c <__aeabi_ddiv>
1a00f87c:	4604      	mov	r4, r0
1a00f87e:	4640      	mov	r0, r8
1a00f880:	460d      	mov	r5, r1
1a00f882:	f004 f853 	bl	1a01392c <__aeabi_i2d>
1a00f886:	4602      	mov	r2, r0
1a00f888:	460b      	mov	r3, r1
1a00f88a:	4620      	mov	r0, r4
1a00f88c:	4629      	mov	r1, r5
1a00f88e:	f004 f8b3 	bl	1a0139f8 <__aeabi_dmul>
1a00f892:	a31d      	add	r3, pc, #116	; (adr r3, 1a00f908 <inv_filter_correction_angle+0x1c0>)
1a00f894:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00f898:	f004 f9d8 	bl	1a013c4c <__aeabi_ddiv>
1a00f89c:	f004 fb6e 	bl	1a013f7c <__aeabi_d2f>
1a00f8a0:	4605      	mov	r5, r0
1a00f8a2:	4628      	mov	r0, r5
1a00f8a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00f8a8:	4922      	ldr	r1, [pc, #136]	; (1a00f934 <inv_filter_correction_angle+0x1ec>)
1a00f8aa:	f004 fd79 	bl	1a0143a0 <__aeabi_fdiv>
1a00f8ae:	4629      	mov	r1, r5
1a00f8b0:	f004 fcc2 	bl	1a014238 <__aeabi_fmul>
1a00f8b4:	491a      	ldr	r1, [pc, #104]	; (1a00f920 <inv_filter_correction_angle+0x1d8>)
1a00f8b6:	f004 fd73 	bl	1a0143a0 <__aeabi_fdiv>
1a00f8ba:	4605      	mov	r5, r0
1a00f8bc:	e7ad      	b.n	1a00f81a <inv_filter_correction_angle+0xd2>
1a00f8be:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
1a00f8c2:	4620      	mov	r0, r4
1a00f8c4:	e7b9      	b.n	1a00f83a <inv_filter_correction_angle+0xf2>
1a00f8c6:	f04f 0b00 	mov.w	fp, #0
1a00f8ca:	e74d      	b.n	1a00f768 <inv_filter_correction_angle+0x20>
1a00f8cc:	2200      	movs	r2, #0
1a00f8ce:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
1a00f8d2:	f004 fd65 	bl	1a0143a0 <__aeabi_fdiv>
1a00f8d6:	4605      	mov	r5, r0
1a00f8d8:	4640      	mov	r0, r8
1a00f8da:	f004 fc59 	bl	1a014190 <__aeabi_i2f>
1a00f8de:	4601      	mov	r1, r0
1a00f8e0:	4628      	mov	r0, r5
1a00f8e2:	f004 fca9 	bl	1a014238 <__aeabi_fmul>
1a00f8e6:	490e      	ldr	r1, [pc, #56]	; (1a00f920 <inv_filter_correction_angle+0x1d8>)
1a00f8e8:	f004 fd5a 	bl	1a0143a0 <__aeabi_fdiv>
1a00f8ec:	4605      	mov	r5, r0
1a00f8ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
1a00f8f2:	2b01      	cmp	r3, #1
1a00f8f4:	bf08      	it	eq
1a00f8f6:	2500      	moveq	r5, #0
1a00f8f8:	e78f      	b.n	1a00f81a <inv_filter_correction_angle+0xd2>
1a00f8fa:	bf00      	nop
1a00f8fc:	f3af 8000 	nop.w
1a00f900:	cac08312 	.word	0xcac08312
1a00f904:	3fb645a1 	.word	0x3fb645a1
1a00f908:	00000000 	.word	0x00000000
1a00f90c:	40b38800 	.word	0x40b38800
1a00f910:	10089084 	.word	0x10089084
1a00f914:	41200000 	.word	0x41200000
1a00f918:	10088fc8 	.word	0x10088fc8
1a00f91c:	42480000 	.word	0x42480000
1a00f920:	459c4000 	.word	0x459c4000
1a00f924:	68db8bad 	.word	0x68db8bad
1a00f928:	43c80000 	.word	0x43c80000
1a00f92c:	000f4240 	.word	0x000f4240
1a00f930:	40790000 	.word	0x40790000
1a00f934:	43480000 	.word	0x43480000

1a00f938 <inv_perform_9x_fusion>:
1a00f938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00f93c:	4ec2      	ldr	r6, [pc, #776]	; (1a00fc48 <inv_perform_9x_fusion+0x310>)
1a00f93e:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
1a00f942:	b0ab      	sub	sp, #172	; 0xac
1a00f944:	2400      	movs	r4, #0
1a00f946:	2b03      	cmp	r3, #3
1a00f948:	9403      	str	r4, [sp, #12]
1a00f94a:	9404      	str	r4, [sp, #16]
1a00f94c:	9405      	str	r4, [sp, #20]
1a00f94e:	9001      	str	r0, [sp, #4]
1a00f950:	f000 8176 	beq.w	1a00fc40 <inv_perform_9x_fusion+0x308>
1a00f954:	f10d 0824 	add.w	r8, sp, #36	; 0x24
1a00f958:	1933      	adds	r3, r6, r4
1a00f95a:	4dbb      	ldr	r5, [pc, #748]	; (1a00fc48 <inv_perform_9x_fusion+0x310>)
1a00f95c:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
1a00f960:	f004 fc16 	bl	1a014190 <__aeabi_i2f>
1a00f964:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a00f968:	f004 fc66 	bl	1a014238 <__aeabi_fmul>
1a00f96c:	f848 0004 	str.w	r0, [r8, r4]
1a00f970:	3404      	adds	r4, #4
1a00f972:	2c10      	cmp	r4, #16
1a00f974:	d1f0      	bne.n	1a00f958 <inv_perform_9x_fusion+0x20>
1a00f976:	af1d      	add	r7, sp, #116	; 0x74
1a00f978:	ac06      	add	r4, sp, #24
1a00f97a:	4638      	mov	r0, r7
1a00f97c:	f7f9 f990 	bl	1a008ca0 <inv_get_6axis_quaternion>
1a00f980:	4620      	mov	r0, r4
1a00f982:	f7f9 f93d 	bl	1a008c00 <inv_get_gravity>
1a00f986:	223c      	movs	r2, #60	; 0x3c
1a00f988:	f105 010c 	add.w	r1, r5, #12
1a00f98c:	4628      	mov	r0, r5
1a00f98e:	f005 f93f 	bl	1a014c10 <memmove>
1a00f992:	2250      	movs	r2, #80	; 0x50
1a00f994:	f105 0158 	add.w	r1, r5, #88	; 0x58
1a00f998:	f105 0048 	add.w	r0, r5, #72	; 0x48
1a00f99c:	f005 f938 	bl	1a014c10 <memmove>
1a00f9a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
1a00f9a4:	f105 033c 	add.w	r3, r5, #60	; 0x3c
1a00f9a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
1a00f9ac:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
1a00f9b0:	f8d5 c124 	ldr.w	ip, [r5, #292]	; 0x124
1a00f9b4:	f10c 0401 	add.w	r4, ip, #1
1a00f9b8:	f105 0e98 	add.w	lr, r5, #152	; 0x98
1a00f9bc:	2c06      	cmp	r4, #6
1a00f9be:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
1a00f9c2:	f8c5 4124 	str.w	r4, [r5, #292]	; 0x124
1a00f9c6:	f340 80fe 	ble.w	1a00fbc6 <inv_perform_9x_fusion+0x28e>
1a00f9ca:	2306      	movs	r3, #6
1a00f9cc:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
1a00f9d0:	2400      	movs	r4, #0
1a00f9d2:	9a01      	ldr	r2, [sp, #4]
1a00f9d4:	f8df a288 	ldr.w	sl, [pc, #648]	; 1a00fc60 <inv_perform_9x_fusion+0x328>
1a00f9d8:	ad21      	add	r5, sp, #132	; 0x84
1a00f9da:	f102 0ba0 	add.w	fp, r2, #160	; 0xa0
1a00f9de:	eb06 1104 	add.w	r1, r6, r4, lsl #4
1a00f9e2:	489a      	ldr	r0, [pc, #616]	; (1a00fc4c <inv_perform_9x_fusion+0x314>)
1a00f9e4:	3148      	adds	r1, #72	; 0x48
1a00f9e6:	462a      	mov	r2, r5
1a00f9e8:	f7f8 f9c6 	bl	1a007d78 <inv_q_mult>
1a00f9ec:	eb04 0144 	add.w	r1, r4, r4, lsl #1
1a00f9f0:	eb06 0181 	add.w	r1, r6, r1, lsl #2
1a00f9f4:	4658      	mov	r0, fp
1a00f9f6:	462a      	mov	r2, r5
1a00f9f8:	f7f8 f8c4 	bl	1a007b84 <inv_compass_angle>
1a00f9fc:	f02a 4100 	bic.w	r1, sl, #2147483648	; 0x80000000
1a00fa00:	4681      	mov	r9, r0
1a00fa02:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a00fa06:	3401      	adds	r4, #1
1a00fa08:	f004 fdb4 	bl	1a014574 <__aeabi_fcmplt>
1a00fa0c:	b100      	cbz	r0, 1a00fa10 <inv_perform_9x_fusion+0xd8>
1a00fa0e:	46ca      	mov	sl, r9
1a00fa10:	2c05      	cmp	r4, #5
1a00fa12:	dde4      	ble.n	1a00f9de <inv_perform_9x_fusion+0xa6>
1a00fa14:	9b01      	ldr	r3, [sp, #4]
1a00fa16:	f103 0018 	add.w	r0, r3, #24
1a00fa1a:	f7f8 f93b 	bl	1a007c94 <inv_get_gyro_sum_of_sqr>
1a00fa1e:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
1a00fa22:	498b      	ldr	r1, [pc, #556]	; (1a00fc50 <inv_perform_9x_fusion+0x318>)
1a00fa24:	0982      	lsrs	r2, r0, #6
1a00fa26:	428b      	cmp	r3, r1
1a00fa28:	bfa8      	it	ge
1a00fa2a:	460b      	movge	r3, r1
1a00fa2c:	9801      	ldr	r0, [sp, #4]
1a00fa2e:	4651      	mov	r1, sl
1a00fa30:	f7ff fe8a 	bl	1a00f748 <inv_filter_correction_angle>
1a00fa34:	f8d6 10ec 	ldr.w	r1, [r6, #236]	; 0xec
1a00fa38:	f004 fbfe 	bl	1a014238 <__aeabi_fmul>
1a00fa3c:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
1a00fa40:	a819      	add	r0, sp, #100	; 0x64
1a00fa42:	f7f9 f92d 	bl	1a008ca0 <inv_get_6axis_quaternion>
1a00fa46:	a819      	add	r0, sp, #100	; 0x64
1a00fa48:	4629      	mov	r1, r5
1a00fa4a:	f7f8 fdb9 	bl	1a0085c0 <inv_quaternion_to_rotation>
1a00fa4e:	a919      	add	r1, sp, #100	; 0x64
1a00fa50:	463a      	mov	r2, r7
1a00fa52:	4880      	ldr	r0, [pc, #512]	; (1a00fc54 <inv_perform_9x_fusion+0x31c>)
1a00fa54:	f7f8 f990 	bl	1a007d78 <inv_q_mult>
1a00fa58:	a819      	add	r0, sp, #100	; 0x64
1a00fa5a:	497e      	ldr	r1, [pc, #504]	; (1a00fc54 <inv_perform_9x_fusion+0x31c>)
1a00fa5c:	f7f8 fa8a 	bl	1a007f74 <inv_q_invert>
1a00fa60:	f10d 0e08 	add.w	lr, sp, #8
1a00fa64:	4628      	mov	r0, r5
1a00fa66:	f10d 0c14 	add.w	ip, sp, #20
1a00fa6a:	2300      	movs	r3, #0
1a00fa6c:	2400      	movs	r4, #0
1a00fa6e:	2500      	movs	r5, #0
1a00fa70:	18fa      	adds	r2, r7, r3
1a00fa72:	58c1      	ldr	r1, [r0, r3]
1a00fa74:	6852      	ldr	r2, [r2, #4]
1a00fa76:	3304      	adds	r3, #4
1a00fa78:	2b0c      	cmp	r3, #12
1a00fa7a:	fbc2 4501 	smlal	r4, r5, r2, r1
1a00fa7e:	d1f7      	bne.n	1a00fa70 <inv_perform_9x_fusion+0x138>
1a00fa80:	0fa3      	lsrs	r3, r4, #30
1a00fa82:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
1a00fa86:	f84e 3f04 	str.w	r3, [lr, #4]!
1a00fa8a:	300c      	adds	r0, #12
1a00fa8c:	45e6      	cmp	lr, ip
1a00fa8e:	d1ec      	bne.n	1a00fa6a <inv_perform_9x_fusion+0x132>
1a00fa90:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
1a00fa94:	2b00      	cmp	r3, #0
1a00fa96:	f040 809f 	bne.w	1a00fbd8 <inv_perform_9x_fusion+0x2a0>
1a00fa9a:	9f05      	ldr	r7, [sp, #20]
1a00fa9c:	4278      	negs	r0, r7
1a00fa9e:	f004 fb77 	bl	1a014190 <__aeabi_i2f>
1a00faa2:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a00faa6:	f004 fbc7 	bl	1a014238 <__aeabi_fmul>
1a00faaa:	4605      	mov	r5, r0
1a00faac:	f005 fc1c 	bl	1a0152e8 <cosf>
1a00fab0:	2400      	movs	r4, #0
1a00fab2:	9011      	str	r0, [sp, #68]	; 0x44
1a00fab4:	4628      	mov	r0, r5
1a00fab6:	9412      	str	r4, [sp, #72]	; 0x48
1a00fab8:	9413      	str	r4, [sp, #76]	; 0x4c
1a00faba:	f005 fcb9 	bl	1a015430 <sinf>
1a00fabe:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
1a00fac2:	9014      	str	r0, [sp, #80]	; 0x50
1a00fac4:	4864      	ldr	r0, [pc, #400]	; (1a00fc58 <inv_perform_9x_fusion+0x320>)
1a00fac6:	fb80 2003 	smull	r2, r0, r0, r3
1a00faca:	17db      	asrs	r3, r3, #31
1a00facc:	ebc3 20e0 	rsb	r0, r3, r0, asr #11
1a00fad0:	f004 fb5e 	bl	1a014190 <__aeabi_i2f>
1a00fad4:	4605      	mov	r5, r0
1a00fad6:	4638      	mov	r0, r7
1a00fad8:	f004 fb5a 	bl	1a014190 <__aeabi_i2f>
1a00fadc:	495f      	ldr	r1, [pc, #380]	; (1a00fc5c <inv_perform_9x_fusion+0x324>)
1a00fade:	f004 fc5f 	bl	1a0143a0 <__aeabi_fdiv>
1a00fae2:	4629      	mov	r1, r5
1a00fae4:	f004 fc5c 	bl	1a0143a0 <__aeabi_fdiv>
1a00fae8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
1a00faec:	f004 fba4 	bl	1a014238 <__aeabi_fmul>
1a00faf0:	f004 fd68 	bl	1a0145c4 <__aeabi_f2iz>
1a00faf4:	0040      	lsls	r0, r0, #1
1a00faf6:	f004 fb4b 	bl	1a014190 <__aeabi_i2f>
1a00fafa:	4958      	ldr	r1, [pc, #352]	; (1a00fc5c <inv_perform_9x_fusion+0x324>)
1a00fafc:	f004 fb9c 	bl	1a014238 <__aeabi_fmul>
1a00fb00:	4601      	mov	r1, r0
1a00fb02:	4628      	mov	r0, r5
1a00fb04:	f004 fb98 	bl	1a014238 <__aeabi_fmul>
1a00fb08:	f004 fd5c 	bl	1a0145c4 <__aeabi_f2iz>
1a00fb0c:	f004 fb40 	bl	1a014190 <__aeabi_i2f>
1a00fb10:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a00fb14:	f004 fb90 	bl	1a014238 <__aeabi_fmul>
1a00fb18:	4605      	mov	r5, r0
1a00fb1a:	f005 fbe5 	bl	1a0152e8 <cosf>
1a00fb1e:	9015      	str	r0, [sp, #84]	; 0x54
1a00fb20:	4628      	mov	r0, r5
1a00fb22:	9416      	str	r4, [sp, #88]	; 0x58
1a00fb24:	9417      	str	r4, [sp, #92]	; 0x5c
1a00fb26:	f005 fc83 	bl	1a015430 <sinf>
1a00fb2a:	ad11      	add	r5, sp, #68	; 0x44
1a00fb2c:	9018      	str	r0, [sp, #96]	; 0x60
1a00fb2e:	4629      	mov	r1, r5
1a00fb30:	4640      	mov	r0, r8
1a00fb32:	aa0d      	add	r2, sp, #52	; 0x34
1a00fb34:	f7f8 fa76 	bl	1a008024 <inv_q_multf>
1a00fb38:	a80d      	add	r0, sp, #52	; 0x34
1a00fb3a:	a915      	add	r1, sp, #84	; 0x54
1a00fb3c:	462a      	mov	r2, r5
1a00fb3e:	f7f8 fa71 	bl	1a008024 <inv_q_multf>
1a00fb42:	9b01      	ldr	r3, [sp, #4]
1a00fb44:	f8d3 70bc 	ldr.w	r7, [r3, #188]	; 0xbc
1a00fb48:	2f00      	cmp	r7, #0
1a00fb4a:	dd11      	ble.n	1a00fb70 <inv_perform_9x_fusion+0x238>
1a00fb4c:	2400      	movs	r4, #0
1a00fb4e:	5928      	ldr	r0, [r5, r4]
1a00fb50:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a00fb54:	f848 0004 	str.w	r0, [r8, r4]
1a00fb58:	f004 fb6e 	bl	1a014238 <__aeabi_fmul>
1a00fb5c:	f004 fd32 	bl	1a0145c4 <__aeabi_f2iz>
1a00fb60:	1933      	adds	r3, r6, r4
1a00fb62:	3404      	adds	r4, #4
1a00fb64:	2c10      	cmp	r4, #16
1a00fb66:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
1a00fb6a:	d1f0      	bne.n	1a00fb4e <inv_perform_9x_fusion+0x216>
1a00fb6c:	2f03      	cmp	r7, #3
1a00fb6e:	d079      	beq.n	1a00fc64 <inv_perform_9x_fusion+0x32c>
1a00fb70:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
1a00fb74:	4c34      	ldr	r4, [pc, #208]	; (1a00fc48 <inv_perform_9x_fusion+0x310>)
1a00fb76:	f004 fb0b 	bl	1a014190 <__aeabi_i2f>
1a00fb7a:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a00fb7e:	f004 fb5b 	bl	1a014238 <__aeabi_fmul>
1a00fb82:	900d      	str	r0, [sp, #52]	; 0x34
1a00fb84:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
1a00fb88:	f004 fb02 	bl	1a014190 <__aeabi_i2f>
1a00fb8c:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a00fb90:	f004 fb52 	bl	1a014238 <__aeabi_fmul>
1a00fb94:	900e      	str	r0, [sp, #56]	; 0x38
1a00fb96:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
1a00fb9a:	f004 faf9 	bl	1a014190 <__aeabi_i2f>
1a00fb9e:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a00fba2:	f004 fb49 	bl	1a014238 <__aeabi_fmul>
1a00fba6:	900f      	str	r0, [sp, #60]	; 0x3c
1a00fba8:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
1a00fbac:	f004 faf0 	bl	1a014190 <__aeabi_i2f>
1a00fbb0:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a00fbb4:	f004 fb40 	bl	1a014238 <__aeabi_fmul>
1a00fbb8:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
1a00fbbc:	9010      	str	r0, [sp, #64]	; 0x40
1a00fbbe:	b973      	cbnz	r3, 1a00fbde <inv_perform_9x_fusion+0x2a6>
1a00fbc0:	b02b      	add	sp, #172	; 0xac
1a00fbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00fbc6:	f1cc 0405 	rsb	r4, ip, #5
1a00fbca:	2c05      	cmp	r4, #5
1a00fbcc:	f77f af01 	ble.w	1a00f9d2 <inv_perform_9x_fusion+0x9a>
1a00fbd0:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1a00fc60 <inv_perform_9x_fusion+0x328>
1a00fbd4:	ad21      	add	r5, sp, #132	; 0x84
1a00fbd6:	e71d      	b.n	1a00fa14 <inv_perform_9x_fusion+0xdc>
1a00fbd8:	2000      	movs	r0, #0
1a00fbda:	4607      	mov	r7, r0
1a00fbdc:	e75f      	b.n	1a00fa9e <inv_perform_9x_fusion+0x166>
1a00fbde:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
1a00fbe2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
1a00fbe6:	f004 fb27 	bl	1a014238 <__aeabi_fmul>
1a00fbea:	4605      	mov	r5, r0
1a00fbec:	f005 fb7c 	bl	1a0152e8 <cosf>
1a00fbf0:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a00fbf4:	f004 fb20 	bl	1a014238 <__aeabi_fmul>
1a00fbf8:	f004 fce4 	bl	1a0145c4 <__aeabi_f2iz>
1a00fbfc:	2300      	movs	r3, #0
1a00fbfe:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
1a00fc02:	4628      	mov	r0, r5
1a00fc04:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
1a00fc08:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
1a00fc0c:	f005 fc10 	bl	1a015430 <sinf>
1a00fc10:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a00fc14:	f004 fb10 	bl	1a014238 <__aeabi_fmul>
1a00fc18:	f004 fcd4 	bl	1a0145c4 <__aeabi_f2iz>
1a00fc1c:	9a01      	ldr	r2, [sp, #4]
1a00fc1e:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
1a00fc22:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
1a00fc26:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
1a00fc2a:	f7f8 ff49 	bl	1a008ac0 <inv_set_compass_correction>
1a00fc2e:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
1a00fc32:	2b00      	cmp	r3, #0
1a00fc34:	d0c4      	beq.n	1a00fbc0 <inv_perform_9x_fusion+0x288>
1a00fc36:	4a04      	ldr	r2, [pc, #16]	; (1a00fc48 <inv_perform_9x_fusion+0x310>)
1a00fc38:	3b01      	subs	r3, #1
1a00fc3a:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
1a00fc3e:	e7bf      	b.n	1a00fbc0 <inv_perform_9x_fusion+0x288>
1a00fc40:	2302      	movs	r3, #2
1a00fc42:	f8c6 3120 	str.w	r3, [r6, #288]	; 0x120
1a00fc46:	e7bb      	b.n	1a00fbc0 <inv_perform_9x_fusion+0x288>
1a00fc48:	10088fc8 	.word	0x10088fc8
1a00fc4c:	10089070 	.word	0x10089070
1a00fc50:	000f4240 	.word	0x000f4240
1a00fc54:	100890c4 	.word	0x100890c4
1a00fc58:	68db8bad 	.word	0x68db8bad
1a00fc5c:	473702e1 	.word	0x473702e1
1a00fc60:	49742400 	.word	0x49742400
1a00fc64:	f001 f946 	bl	1a010ef4 <inv_get_magnetic_disturbance_state>
1a00fc68:	4604      	mov	r4, r0
1a00fc6a:	2800      	cmp	r0, #0
1a00fc6c:	d180      	bne.n	1a00fb70 <inv_perform_9x_fusion+0x238>
1a00fc6e:	4b17      	ldr	r3, [pc, #92]	; (1a00fccc <inv_perform_9x_fusion+0x394>)
1a00fc70:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
1a00fc74:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
1a00fc78:	f004 fade 	bl	1a014238 <__aeabi_fmul>
1a00fc7c:	4607      	mov	r7, r0
1a00fc7e:	f005 fb33 	bl	1a0152e8 <cosf>
1a00fc82:	2300      	movs	r3, #0
1a00fc84:	9015      	str	r0, [sp, #84]	; 0x54
1a00fc86:	4638      	mov	r0, r7
1a00fc88:	9316      	str	r3, [sp, #88]	; 0x58
1a00fc8a:	9317      	str	r3, [sp, #92]	; 0x5c
1a00fc8c:	f005 fbd0 	bl	1a015430 <sinf>
1a00fc90:	a915      	add	r1, sp, #84	; 0x54
1a00fc92:	9018      	str	r0, [sp, #96]	; 0x60
1a00fc94:	462a      	mov	r2, r5
1a00fc96:	4640      	mov	r0, r8
1a00fc98:	f7f8 f9c4 	bl	1a008024 <inv_q_multf>
1a00fc9c:	4628      	mov	r0, r5
1a00fc9e:	f7f8 facf 	bl	1a008240 <inv_q_normalizef>
1a00fca2:	5928      	ldr	r0, [r5, r4]
1a00fca4:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a00fca8:	f004 fac6 	bl	1a014238 <__aeabi_fmul>
1a00fcac:	f004 fc8a 	bl	1a0145c4 <__aeabi_f2iz>
1a00fcb0:	1933      	adds	r3, r6, r4
1a00fcb2:	3404      	adds	r4, #4
1a00fcb4:	2c10      	cmp	r4, #16
1a00fcb6:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
1a00fcba:	d1f2      	bne.n	1a00fca2 <inv_perform_9x_fusion+0x36a>
1a00fcbc:	9b01      	ldr	r3, [sp, #4]
1a00fcbe:	4804      	ldr	r0, [pc, #16]	; (1a00fcd0 <inv_perform_9x_fusion+0x398>)
1a00fcc0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
1a00fcc4:	f7f8 fefc 	bl	1a008ac0 <inv_set_compass_correction>
1a00fcc8:	e7b1      	b.n	1a00fc2e <inv_perform_9x_fusion+0x2f6>
1a00fcca:	bf00      	nop
1a00fccc:	10088fc8 	.word	0x10088fc8
1a00fcd0:	10089070 	.word	0x10089070

1a00fcd4 <inv_process_9x_sensor_fusion_cb>:
1a00fcd4:	b538      	push	{r3, r4, r5, lr}
1a00fcd6:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
1a00fcda:	f013 0210 	ands.w	r2, r3, #16
1a00fcde:	4b21      	ldr	r3, [pc, #132]	; (1a00fd64 <inv_process_9x_sensor_fusion_cb+0x90>)
1a00fce0:	d104      	bne.n	1a00fcec <inv_process_9x_sensor_fusion_cb+0x18>
1a00fce2:	2103      	movs	r1, #3
1a00fce4:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
1a00fce8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
1a00fcec:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
1a00fcf0:	05d2      	lsls	r2, r2, #23
1a00fcf2:	d407      	bmi.n	1a00fd04 <inv_process_9x_sensor_fusion_cb+0x30>
1a00fcf4:	6b02      	ldr	r2, [r0, #48]	; 0x30
1a00fcf6:	f412 7280 	ands.w	r2, r2, #256	; 0x100
1a00fcfa:	d028      	beq.n	1a00fd4e <inv_process_9x_sensor_fusion_cb+0x7a>
1a00fcfc:	6f42      	ldr	r2, [r0, #116]	; 0x74
1a00fcfe:	f412 7280 	ands.w	r2, r2, #256	; 0x100
1a00fd02:	d024      	beq.n	1a00fd4e <inv_process_9x_sensor_fusion_cb+0x7a>
1a00fd04:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
1a00fd08:	4b16      	ldr	r3, [pc, #88]	; (1a00fd64 <inv_process_9x_sensor_fusion_cb+0x90>)
1a00fd0a:	b172      	cbz	r2, 1a00fd2a <inv_process_9x_sensor_fusion_cb+0x56>
1a00fd0c:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
1a00fd10:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
1a00fd14:	4c14      	ldr	r4, [pc, #80]	; (1a00fd68 <inv_process_9x_sensor_fusion_cb+0x94>)
1a00fd16:	1a8a      	subs	r2, r1, r2
1a00fd18:	fba4 1202 	umull	r1, r2, r4, r2
1a00fd1c:	0992      	lsrs	r2, r2, #6
1a00fd1e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
1a00fd22:	f7ff fe09 	bl	1a00f938 <inv_perform_9x_fusion>
1a00fd26:	2000      	movs	r0, #0
1a00fd28:	bd38      	pop	{r3, r4, r5, pc}
1a00fd2a:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
1a00fd2e:	f644 641f 	movw	r4, #19999	; 0x4e1f
1a00fd32:	42a1      	cmp	r1, r4
1a00fd34:	dc12      	bgt.n	1a00fd5c <inv_process_9x_sensor_fusion_cb+0x88>
1a00fd36:	f8d3 512c 	ldr.w	r5, [r3, #300]	; 0x12c
1a00fd3a:	1949      	adds	r1, r1, r5
1a00fd3c:	42a1      	cmp	r1, r4
1a00fd3e:	f8c3 112c 	str.w	r1, [r3, #300]	; 0x12c
1a00fd42:	ddf0      	ble.n	1a00fd26 <inv_process_9x_sensor_fusion_cb+0x52>
1a00fd44:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
1a00fd48:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
1a00fd4c:	e7e9      	b.n	1a00fd22 <inv_process_9x_sensor_fusion_cb+0x4e>
1a00fd4e:	2103      	movs	r1, #3
1a00fd50:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
1a00fd54:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
1a00fd58:	2000      	movs	r0, #0
1a00fd5a:	bd38      	pop	{r3, r4, r5, pc}
1a00fd5c:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
1a00fd60:	e7df      	b.n	1a00fd22 <inv_process_9x_sensor_fusion_cb+0x4e>
1a00fd62:	bf00      	nop
1a00fd64:	10088fc8 	.word	0x10088fc8
1a00fd68:	10624dd3 	.word	0x10624dd3

1a00fd6c <inv_init_9x_fusion>:
1a00fd6c:	b510      	push	{r4, lr}
1a00fd6e:	4c0d      	ldr	r4, [pc, #52]	; (1a00fda4 <inv_init_9x_fusion+0x38>)
1a00fd70:	2100      	movs	r1, #0
1a00fd72:	f44f 729c 	mov.w	r2, #312	; 0x138
1a00fd76:	4620      	mov	r0, r4
1a00fd78:	f004 ffae 	bl	1a014cd8 <memset>
1a00fd7c:	4620      	mov	r0, r4
1a00fd7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a00fd82:	f840 3fa8 	str.w	r3, [r0, #168]!
1a00fd86:	2100      	movs	r1, #0
1a00fd88:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
1a00fd8c:	f7f8 fe98 	bl	1a008ac0 <inv_set_compass_correction>
1a00fd90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00fd94:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
1a00fd98:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
1a00fd9c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
1a00fda0:	bd10      	pop	{r4, pc}
1a00fda2:	bf00      	nop
1a00fda4:	10088fc8 	.word	0x10088fc8

1a00fda8 <inv_9x_fusion_use_timestamps>:
1a00fda8:	4b02      	ldr	r3, [pc, #8]	; (1a00fdb4 <inv_9x_fusion_use_timestamps+0xc>)
1a00fdaa:	f8c3 0134 	str.w	r0, [r3, #308]	; 0x134
1a00fdae:	2000      	movs	r0, #0
1a00fdb0:	4770      	bx	lr
1a00fdb2:	bf00      	nop
1a00fdb4:	10088fc8 	.word	0x10088fc8

1a00fdb8 <inv_enable_9x_sensor_fusion>:
1a00fdb8:	b508      	push	{r3, lr}
1a00fdba:	f7ff ffd7 	bl	1a00fd6c <inv_init_9x_fusion>
1a00fdbe:	4b05      	ldr	r3, [pc, #20]	; (1a00fdd4 <inv_enable_9x_sensor_fusion+0x1c>)
1a00fdc0:	4805      	ldr	r0, [pc, #20]	; (1a00fdd8 <inv_enable_9x_sensor_fusion+0x20>)
1a00fdc2:	2200      	movs	r2, #0
1a00fdc4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
1a00fdc8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
1a00fdcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a00fdd0:	f7f9 b90e 	b.w	1a008ff0 <inv_register_mpl_start_notification>
1a00fdd4:	10088fc8 	.word	0x10088fc8
1a00fdd8:	1a00f739 	.word	0x1a00f739

1a00fddc <inv_gtc_store>:
1a00fddc:	b470      	push	{r4, r5, r6}
1a00fdde:	4e0b      	ldr	r6, [pc, #44]	; (1a00fe0c <inv_gtc_store+0x30>)
1a00fde0:	f506 73d2 	add.w	r3, r6, #420	; 0x1a4
1a00fde4:	4605      	mov	r5, r0
1a00fde6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
1a00fdea:	b085      	sub	sp, #20
1a00fdec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
1a00fdf0:	f896 31b0 	ldrb.w	r3, [r6, #432]	; 0x1b0
1a00fdf4:	466c      	mov	r4, sp
1a00fdf6:	f88d 300c 	strb.w	r3, [sp, #12]
1a00fdfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a00fdfc:	6028      	str	r0, [r5, #0]
1a00fdfe:	6069      	str	r1, [r5, #4]
1a00fe00:	60aa      	str	r2, [r5, #8]
1a00fe02:	60eb      	str	r3, [r5, #12]
1a00fe04:	2000      	movs	r0, #0
1a00fe06:	b005      	add	sp, #20
1a00fe08:	bc70      	pop	{r4, r5, r6}
1a00fe0a:	4770      	bx	lr
1a00fe0c:	100870e0 	.word	0x100870e0

1a00fe10 <inv_gtc_load>:
1a00fe10:	b470      	push	{r4, r5, r6}
1a00fe12:	4603      	mov	r3, r0
1a00fe14:	b085      	sub	sp, #20
1a00fe16:	6800      	ldr	r0, [r0, #0]
1a00fe18:	6859      	ldr	r1, [r3, #4]
1a00fe1a:	689a      	ldr	r2, [r3, #8]
1a00fe1c:	68db      	ldr	r3, [r3, #12]
1a00fe1e:	4e08      	ldr	r6, [pc, #32]	; (1a00fe40 <inv_gtc_load+0x30>)
1a00fe20:	466c      	mov	r4, sp
1a00fe22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00fe24:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00fe28:	f506 73d2 	add.w	r3, r6, #420	; 0x1a4
1a00fe2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
1a00fe30:	466d      	mov	r5, sp
1a00fe32:	f886 41b0 	strb.w	r4, [r6, #432]	; 0x1b0
1a00fe36:	2000      	movs	r0, #0
1a00fe38:	b005      	add	sp, #20
1a00fe3a:	bc70      	pop	{r4, r5, r6}
1a00fe3c:	4770      	bx	lr
1a00fe3e:	bf00      	nop
1a00fe40:	100870e0 	.word	0x100870e0

1a00fe44 <inv_gtc_data_cb>:
1a00fe44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00fe48:	b0b5      	sub	sp, #212	; 0xd4
1a00fe4a:	a923      	add	r1, sp, #140	; 0x8c
1a00fe4c:	4604      	mov	r4, r0
1a00fe4e:	a825      	add	r0, sp, #148	; 0x94
1a00fe50:	f7f7 f994 	bl	1a00717c <inv_get_gyro_bias>
1a00fe54:	a824      	add	r0, sp, #144	; 0x90
1a00fe56:	f7f8 fe7d 	bl	1a008b54 <inv_get_motion_state>
1a00fe5a:	2802      	cmp	r0, #2
1a00fe5c:	d00d      	beq.n	1a00fe7a <inv_gtc_data_cb+0x36>
1a00fe5e:	4ba4      	ldr	r3, [pc, #656]	; (1a0100f0 <inv_gtc_data_cb+0x2ac>)
1a00fe60:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
1a00fe64:	f893 01b0 	ldrb.w	r0, [r3, #432]	; 0x1b0
1a00fe68:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a00fe6a:	b110      	cbz	r0, 1a00fe72 <inv_gtc_data_cb+0x2e>
1a00fe6c:	1a8a      	subs	r2, r1, r2
1a00fe6e:	f040 811b 	bne.w	1a0100a8 <inv_gtc_data_cb+0x264>
1a00fe72:	2000      	movs	r0, #0
1a00fe74:	b035      	add	sp, #212	; 0xd4
1a00fe76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00fe7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a00fe7c:	2b03      	cmp	r3, #3
1a00fe7e:	d1f8      	bne.n	1a00fe72 <inv_gtc_data_cb+0x2e>
1a00fe80:	f7f7 f962 	bl	1a007148 <inv_get_gyro_bias_tc_set>
1a00fe84:	2800      	cmp	r0, #0
1a00fe86:	d0f4      	beq.n	1a00fe72 <inv_gtc_data_cb+0x2e>
1a00fe88:	f8df 9264 	ldr.w	r9, [pc, #612]	; 1a0100f0 <inv_gtc_data_cb+0x2ac>
1a00fe8c:	4999      	ldr	r1, [pc, #612]	; (1a0100f4 <inv_gtc_data_cb+0x2b0>)
1a00fe8e:	f8d9 31b4 	ldr.w	r3, [r9, #436]	; 0x1b4
1a00fe92:	f8d9 21b8 	ldr.w	r2, [r9, #440]	; 0x1b8
1a00fe96:	9d23      	ldr	r5, [sp, #140]	; 0x8c
1a00fe98:	1ad2      	subs	r2, r2, r3
1a00fe9a:	fb81 0102 	smull	r0, r1, r1, r2
1a00fe9e:	17d2      	asrs	r2, r2, #31
1a00fea0:	1aeb      	subs	r3, r5, r3
1a00fea2:	ebc2 0261 	rsb	r2, r2, r1, asr #1
1a00fea6:	fb93 f4f2 	sdiv	r4, r3, r2
1a00feaa:	b2e4      	uxtb	r4, r4
1a00feac:	2c04      	cmp	r4, #4
1a00feae:	d8e0      	bhi.n	1a00fe72 <inv_gtc_data_cb+0x2e>
1a00feb0:	2654      	movs	r6, #84	; 0x54
1a00feb2:	fb06 f604 	mul.w	r6, r6, r4
1a00feb6:	eb09 0706 	add.w	r7, r9, r6
1a00feba:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
1a00febe:	2b05      	cmp	r3, #5
1a00fec0:	f000 81c3 	beq.w	1a01024a <inv_gtc_data_cb+0x406>
1a00fec4:	1c5a      	adds	r2, r3, #1
1a00fec6:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
1a00feca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
1a00fece:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
1a00fed2:	18e3      	adds	r3, r4, r3
1a00fed4:	9a25      	ldr	r2, [sp, #148]	; 0x94
1a00fed6:	9827      	ldr	r0, [sp, #156]	; 0x9c
1a00fed8:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
1a00fedc:	eb09 0283 	add.w	r2, r9, r3, lsl #2
1a00fee0:	f103 010a 	add.w	r1, r3, #10
1a00fee4:	63d5      	str	r5, [r2, #60]	; 0x3c
1a00fee6:	4613      	mov	r3, r2
1a00fee8:	9a26      	ldr	r2, [sp, #152]	; 0x98
1a00feea:	f849 0021 	str.w	r0, [r9, r1, lsl #2]
1a00feee:	615a      	str	r2, [r3, #20]
1a00fef0:	f899 11c0 	ldrb.w	r1, [r9, #448]	; 0x1c0
1a00fef4:	4b7e      	ldr	r3, [pc, #504]	; (1a0100f0 <inv_gtc_data_cb+0x2ac>)
1a00fef6:	2200      	movs	r2, #0
1a00fef8:	2901      	cmp	r1, #1
1a00fefa:	9228      	str	r2, [sp, #160]	; 0xa0
1a00fefc:	9229      	str	r2, [sp, #164]	; 0xa4
1a00fefe:	922a      	str	r2, [sp, #168]	; 0xa8
1a00ff00:	922b      	str	r2, [sp, #172]	; 0xac
1a00ff02:	922c      	str	r2, [sp, #176]	; 0xb0
1a00ff04:	922d      	str	r2, [sp, #180]	; 0xb4
1a00ff06:	922e      	str	r2, [sp, #184]	; 0xb8
1a00ff08:	922f      	str	r2, [sp, #188]	; 0xbc
1a00ff0a:	9230      	str	r2, [sp, #192]	; 0xc0
1a00ff0c:	9231      	str	r2, [sp, #196]	; 0xc4
1a00ff0e:	9232      	str	r2, [sp, #200]	; 0xc8
1a00ff10:	9233      	str	r2, [sp, #204]	; 0xcc
1a00ff12:	d1ae      	bne.n	1a00fe72 <inv_gtc_data_cb+0x2e>
1a00ff14:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
1a00ff18:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
1a00ff1c:	e9dd 672a 	ldrd	r6, r7, [sp, #168]	; 0xa8
1a00ff20:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a00ff24:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
1a00ff28:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
1a00ff2c:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
1a00ff30:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
1a00ff34:	e9dd 6730 	ldrd	r6, r7, [sp, #192]	; 0xc0
1a00ff38:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
1a00ff3c:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
1a00ff40:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
1a00ff44:	920b      	str	r2, [sp, #44]	; 0x2c
1a00ff46:	911c      	str	r1, [sp, #112]	; 0x70
1a00ff48:	931d      	str	r3, [sp, #116]	; 0x74
1a00ff4a:	2200      	movs	r2, #0
1a00ff4c:	2300      	movs	r3, #0
1a00ff4e:	46d0      	mov	r8, sl
1a00ff50:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
1a00ff54:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
1a00ff58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00ff5c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
1a00ff60:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
1a00ff64:	2300      	movs	r3, #0
1a00ff66:	9321      	str	r3, [sp, #132]	; 0x84
1a00ff68:	931b      	str	r3, [sp, #108]	; 0x6c
1a00ff6a:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
1a00ff6e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
1a00ff70:	9e20      	ldr	r6, [sp, #128]	; 0x80
1a00ff72:	f04f 0c54 	mov.w	ip, #84	; 0x54
1a00ff76:	fb0c 6307 	mla	r3, ip, r7, r6
1a00ff7a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
1a00ff7e:	2a00      	cmp	r2, #0
1a00ff80:	921a      	str	r2, [sp, #104]	; 0x68
1a00ff82:	f000 80c3 	beq.w	1a01010c <inv_gtc_data_cb+0x2c8>
1a00ff86:	f340 80c1 	ble.w	1a01010c <inv_gtc_data_cb+0x2c8>
1a00ff8a:	f04f 0c00 	mov.w	ip, #0
1a00ff8e:	461a      	mov	r2, r3
1a00ff90:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
1a00ff94:	e9cd 0100 	strd	r0, r1, [sp]
1a00ff98:	e9cd ab02 	strd	sl, fp, [sp, #8]
1a00ff9c:	e00e      	b.n	1a00ffbc <inv_gtc_data_cb+0x178>
1a00ff9e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
1a00ffa0:	429c      	cmp	r4, r3
1a00ffa2:	bfb8      	it	lt
1a00ffa4:	461c      	movlt	r4, r3
1a00ffa6:	941d      	str	r4, [sp, #116]	; 0x74
1a00ffa8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a00ffaa:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
1a00ffae:	1c6b      	adds	r3, r5, #1
1a00ffb0:	b2db      	uxtb	r3, r3
1a00ffb2:	3204      	adds	r2, #4
1a00ffb4:	4543      	cmp	r3, r8
1a00ffb6:	930a      	str	r3, [sp, #40]	; 0x28
1a00ffb8:	f000 809e 	beq.w	1a0100f8 <inv_gtc_data_cb+0x2b4>
1a00ffbc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
1a00ffbe:	6957      	ldr	r7, [r2, #20]
1a00ffc0:	6a91      	ldr	r1, [r2, #40]	; 0x28
1a00ffc2:	6815      	ldr	r5, [r2, #0]
1a00ffc4:	fb87 6703 	smull	r6, r7, r7, r3
1a00ffc8:	e9cd 6704 	strd	r6, r7, [sp, #16]
1a00ffcc:	fb83 6703 	smull	r6, r7, r3, r3
1a00ffd0:	e9cd 6708 	strd	r6, r7, [sp, #32]
1a00ffd4:	fb81 0103 	smull	r0, r1, r1, r3
1a00ffd8:	9f04      	ldr	r7, [sp, #16]
1a00ffda:	f8dd c020 	ldr.w	ip, [sp, #32]
1a00ffde:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a00ffe2:	9905      	ldr	r1, [sp, #20]
1a00ffe4:	0c3f      	lsrs	r7, r7, #16
1a00ffe6:	0c00      	lsrs	r0, r0, #16
1a00ffe8:	9000      	str	r0, [sp, #0]
1a00ffea:	ea47 4001 	orr.w	r0, r7, r1, lsl #16
1a00ffee:	9002      	str	r0, [sp, #8]
1a00fff0:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00fff2:	9c00      	ldr	r4, [sp, #0]
1a00fff4:	1409      	asrs	r1, r1, #16
1a00fff6:	ea4f 461c 	mov.w	r6, ip, lsr #16
1a00fffa:	f8dd c01c 	ldr.w	ip, [sp, #28]
1a00fffe:	9103      	str	r1, [sp, #12]
1a010000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
1a010004:	1407      	asrs	r7, r0, #16
1a010006:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a01000a:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
1a01000e:	9400      	str	r4, [sp, #0]
1a010010:	4664      	mov	r4, ip
1a010012:	1424      	asrs	r4, r4, #16
1a010014:	1940      	adds	r0, r0, r5
1a010016:	fb85 8903 	smull	r8, r9, r5, r3
1a01001a:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
1a01001e:	9401      	str	r4, [sp, #4]
1a010020:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
1a010024:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
1a010028:	6950      	ldr	r0, [r2, #20]
1a01002a:	990b      	ldr	r1, [sp, #44]	; 0x2c
1a01002c:	1824      	adds	r4, r4, r0
1a01002e:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
1a010032:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
1a010036:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
1a01003a:	6a90      	ldr	r0, [r2, #40]	; 0x28
1a01003c:	1824      	adds	r4, r4, r0
1a01003e:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
1a010042:	ea4f 4a18 	mov.w	sl, r8, lsr #16
1a010046:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
1a01004a:	18c9      	adds	r1, r1, r3
1a01004c:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
1a010050:	ea4a 4a09 	orr.w	sl, sl, r9, lsl #16
1a010054:	ea4f 4b29 	mov.w	fp, r9, asr #16
1a010058:	910b      	str	r1, [sp, #44]	; 0x2c
1a01005a:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
1a01005e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a010062:	eb14 040a 	adds.w	r4, r4, sl
1a010066:	eb45 050b 	adc.w	r5, r5, fp
1a01006a:	eb18 0800 	adds.w	r8, r8, r0
1a01006e:	eb49 0901 	adc.w	r9, r9, r1
1a010072:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
1a010076:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
1a01007a:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
1a01007e:	e9dd 8900 	ldrd	r8, r9, [sp]
1a010082:	eb14 0408 	adds.w	r4, r4, r8
1a010086:	eb45 0509 	adc.w	r5, r5, r9
1a01008a:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
1a01008e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a010092:	1980      	adds	r0, r0, r6
1a010094:	eb41 0107 	adc.w	r1, r1, r7
1a010098:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a01009c:	991c      	ldr	r1, [sp, #112]	; 0x70
1a01009e:	428b      	cmp	r3, r1
1a0100a0:	f6bf af7d 	bge.w	1a00ff9e <inv_gtc_data_cb+0x15a>
1a0100a4:	931c      	str	r3, [sp, #112]	; 0x70
1a0100a6:	e77f      	b.n	1a00ffa8 <inv_gtc_data_cb+0x164>
1a0100a8:	f8d3 41a4 	ldr.w	r4, [r3, #420]	; 0x1a4
1a0100ac:	f8d3 01a8 	ldr.w	r0, [r3, #424]	; 0x1a8
1a0100b0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
1a0100b4:	fb82 4504 	smull	r4, r5, r2, r4
1a0100b8:	fb82 0100 	smull	r0, r1, r2, r0
1a0100bc:	fb82 2303 	smull	r2, r3, r2, r3
1a0100c0:	0c12      	lsrs	r2, r2, #16
1a0100c2:	0c24      	lsrs	r4, r4, #16
1a0100c4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a0100c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a0100ca:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
1a0100ce:	191c      	adds	r4, r3, r4
1a0100d0:	0c00      	lsrs	r0, r0, #16
1a0100d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
1a0100d4:	9425      	str	r4, [sp, #148]	; 0x94
1a0100d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
1a0100da:	181d      	adds	r5, r3, r0
1a0100dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
1a0100de:	9526      	str	r5, [sp, #152]	; 0x98
1a0100e0:	189a      	adds	r2, r3, r2
1a0100e2:	a825      	add	r0, sp, #148	; 0x94
1a0100e4:	2103      	movs	r1, #3
1a0100e6:	9227      	str	r2, [sp, #156]	; 0x9c
1a0100e8:	f7f6 ffea 	bl	1a0070c0 <inv_set_gyro_bias>
1a0100ec:	e6c1      	b.n	1a00fe72 <inv_gtc_data_cb+0x2e>
1a0100ee:	bf00      	nop
1a0100f0:	100870e0 	.word	0x100870e0
1a0100f4:	66666667 	.word	0x66666667
1a0100f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a0100fa:	46d0      	mov	r8, sl
1a0100fc:	18d3      	adds	r3, r2, r3
1a0100fe:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
1a010102:	e9dd 0100 	ldrd	r0, r1, [sp]
1a010106:	f003 03ff 	and.w	r3, r3, #255	; 0xff
1a01010a:	9321      	str	r3, [sp, #132]	; 0x84
1a01010c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a01010e:	3301      	adds	r3, #1
1a010110:	2b05      	cmp	r3, #5
1a010112:	931b      	str	r3, [sp, #108]	; 0x6c
1a010114:	f47f af2b 	bne.w	1a00ff6e <inv_gtc_data_cb+0x12a>
1a010118:	9c1d      	ldr	r4, [sp, #116]	; 0x74
1a01011a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
1a01011c:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
1a010120:	1b62      	subs	r2, r4, r5
1a010122:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
1a010126:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a01012a:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
1a01012e:	f8d9 31bc 	ldr.w	r3, [r9, #444]	; 0x1bc
1a010132:	e9cd 6728 	strd	r6, r7, [sp, #160]	; 0xa0
1a010136:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
1a01013a:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
1a01013e:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
1a010142:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
1a010146:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
1a01014a:	429a      	cmp	r2, r3
1a01014c:	e9cd 672e 	strd	r6, r7, [sp, #184]	; 0xb8
1a010150:	e9cd 0130 	strd	r0, r1, [sp, #192]	; 0xc0
1a010154:	e9cd 4532 	strd	r4, r5, [sp, #200]	; 0xc8
1a010158:	f6ff ae8b 	blt.w	1a00fe72 <inv_gtc_data_cb+0x2e>
1a01015c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a01015e:	9f21      	ldr	r7, [sp, #132]	; 0x84
1a010160:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
1a010164:	f8df b124 	ldr.w	fp, [pc, #292]	; 1a01028c <inv_gtc_data_cb+0x448>
1a010168:	fb85 2305 	smull	r2, r3, r5, r5
1a01016c:	ea4f 4812 	mov.w	r8, r2, lsr #16
1a010170:	9d0c      	ldr	r5, [sp, #48]	; 0x30
1a010172:	b2fe      	uxtb	r6, r7
1a010174:	ea48 4703 	orr.w	r7, r8, r3, lsl #16
1a010178:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
1a01017c:	9704      	str	r7, [sp, #16]
1a01017e:	fba6 4505 	umull	r4, r5, r6, r5
1a010182:	fb06 5808 	mla	r8, r6, r8, r5
1a010186:	ea4f 4c23 	mov.w	ip, r3, asr #16
1a01018a:	e9cd 4506 	strd	r4, r5, [sp, #24]
1a01018e:	f8cd c014 	str.w	ip, [sp, #20]
1a010192:	f8cd 801c 	str.w	r8, [sp, #28]
1a010196:	ea4f 74ea 	mov.w	r4, sl, asr #31
1a01019a:	ad32      	add	r5, sp, #200	; 0xc8
1a01019c:	940a      	str	r4, [sp, #40]	; 0x28
1a01019e:	950b      	str	r5, [sp, #44]	; 0x2c
1a0101a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0101a4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
1a0101a8:	1a24      	subs	r4, r4, r0
1a0101aa:	eb65 0501 	sbc.w	r5, r5, r1
1a0101ae:	e9cd 4508 	strd	r4, r5, [sp, #32]
1a0101b2:	af2c      	add	r7, sp, #176	; 0xb0
1a0101b4:	f10d 0898 	add.w	r8, sp, #152	; 0x98
1a0101b8:	f858 0f08 	ldr.w	r0, [r8, #8]!
1a0101bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0101be:	f8d8 2004 	ldr.w	r2, [r8, #4]
1a0101c2:	f857 4f08 	ldr.w	r4, [r7, #8]!
1a0101c6:	fb00 f105 	mul.w	r1, r0, r5
1a0101ca:	fb02 110a 	mla	r1, r2, sl, r1
1a0101ce:	fba0 230a 	umull	r2, r3, r0, sl
1a0101d2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
1a0101d6:	18cb      	adds	r3, r1, r3
1a0101d8:	687d      	ldr	r5, [r7, #4]
1a0101da:	930f      	str	r3, [sp, #60]	; 0x3c
1a0101dc:	2300      	movs	r3, #0
1a0101de:	fb04 f203 	mul.w	r2, r4, r3
1a0101e2:	fba4 0106 	umull	r0, r1, r4, r6
1a0101e6:	fb05 2306 	mla	r3, r5, r6, r2
1a0101ea:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a0101ee:	1859      	adds	r1, r3, r1
1a0101f0:	910d      	str	r1, [sp, #52]	; 0x34
1a0101f2:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
1a0101f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0101fa:	428d      	cmp	r5, r1
1a0101fc:	bf08      	it	eq
1a0101fe:	4284      	cmpeq	r4, r0
1a010200:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a010204:	d018      	beq.n	1a010238 <inv_gtc_data_cb+0x3f4>
1a010206:	990e      	ldr	r1, [sp, #56]	; 0x38
1a010208:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
1a01020a:	0c09      	lsrs	r1, r1, #16
1a01020c:	ea41 4405 	orr.w	r4, r1, r5, lsl #16
1a010210:	ea4f 4c25 	mov.w	ip, r5, asr #16
1a010214:	941e      	str	r4, [sp, #120]	; 0x78
1a010216:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
1a01021a:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
1a01021e:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
1a010222:	1a24      	subs	r4, r4, r0
1a010224:	eb65 0501 	sbc.w	r5, r5, r1
1a010228:	0429      	lsls	r1, r5, #16
1a01022a:	0420      	lsls	r0, r4, #16
1a01022c:	ea41 4114 	orr.w	r1, r1, r4, lsr #16
1a010230:	f004 f9ee 	bl	1a014610 <__aeabi_ldivmod>
1a010234:	f8cb 01a4 	str.w	r0, [fp, #420]	; 0x1a4
1a010238:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
1a01023a:	42a7      	cmp	r7, r4
1a01023c:	f10b 0b04 	add.w	fp, fp, #4
1a010240:	d1ba      	bne.n	1a0101b8 <inv_gtc_data_cb+0x374>
1a010242:	2301      	movs	r3, #1
1a010244:	f889 31b0 	strb.w	r3, [r9, #432]	; 0x1b0
1a010248:	e613      	b.n	1a00fe72 <inv_gtc_data_cb+0x2e>
1a01024a:	eb09 0006 	add.w	r0, r9, r6
1a01024e:	4601      	mov	r1, r0
1a010250:	3140      	adds	r1, #64	; 0x40
1a010252:	2210      	movs	r2, #16
1a010254:	303c      	adds	r0, #60	; 0x3c
1a010256:	f004 fcdb 	bl	1a014c10 <memmove>
1a01025a:	1d31      	adds	r1, r6, #4
1a01025c:	4449      	add	r1, r9
1a01025e:	2210      	movs	r2, #16
1a010260:	4638      	mov	r0, r7
1a010262:	f004 fcd5 	bl	1a014c10 <memmove>
1a010266:	eb09 0006 	add.w	r0, r9, r6
1a01026a:	4601      	mov	r1, r0
1a01026c:	3118      	adds	r1, #24
1a01026e:	2210      	movs	r2, #16
1a010270:	3014      	adds	r0, #20
1a010272:	f004 fccd 	bl	1a014c10 <memmove>
1a010276:	f106 0028 	add.w	r0, r6, #40	; 0x28
1a01027a:	f106 012c 	add.w	r1, r6, #44	; 0x2c
1a01027e:	4448      	add	r0, r9
1a010280:	4449      	add	r1, r9
1a010282:	2210      	movs	r2, #16
1a010284:	f004 fcc4 	bl	1a014c10 <memmove>
1a010288:	2304      	movs	r3, #4
1a01028a:	e61e      	b.n	1a00feca <inv_gtc_data_cb+0x86>
1a01028c:	100870e0 	.word	0x100870e0

1a010290 <inv_start_gyro_tc>:
1a010290:	4802      	ldr	r0, [pc, #8]	; (1a01029c <inv_start_gyro_tc+0xc>)
1a010292:	2196      	movs	r1, #150	; 0x96
1a010294:	2208      	movs	r2, #8
1a010296:	f7f7 b8d7 	b.w	1a007448 <inv_register_data_cb>
1a01029a:	bf00      	nop
1a01029c:	1a00fe45 	.word	0x1a00fe45

1a0102a0 <inv_init_gyro_ts>:
1a0102a0:	b510      	push	{r4, lr}
1a0102a2:	4c0b      	ldr	r4, [pc, #44]	; (1a0102d0 <inv_init_gyro_ts+0x30>)
1a0102a4:	2100      	movs	r1, #0
1a0102a6:	4620      	mov	r0, r4
1a0102a8:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
1a0102ac:	f004 fd14 	bl	1a014cd8 <memset>
1a0102b0:	4b08      	ldr	r3, [pc, #32]	; (1a0102d4 <inv_init_gyro_ts+0x34>)
1a0102b2:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
1a0102b6:	f44f 03aa 	mov.w	r3, #5570560	; 0x550000
1a0102ba:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
1a0102be:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
1a0102c2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
1a0102c6:	2301      	movs	r3, #1
1a0102c8:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
1a0102cc:	2000      	movs	r0, #0
1a0102ce:	bd10      	pop	{r4, pc}
1a0102d0:	100870e0 	.word	0x100870e0
1a0102d4:	ffd80000 	.word	0xffd80000

1a0102d8 <inv_enable_gyro_tc>:
1a0102d8:	b508      	push	{r3, lr}
1a0102da:	f7ff ffe1 	bl	1a0102a0 <inv_init_gyro_ts>
1a0102de:	480a      	ldr	r0, [pc, #40]	; (1a010308 <inv_enable_gyro_tc+0x30>)
1a0102e0:	490a      	ldr	r1, [pc, #40]	; (1a01030c <inv_enable_gyro_tc+0x34>)
1a0102e2:	2210      	movs	r2, #16
1a0102e4:	f44f 739a 	mov.w	r3, #308	; 0x134
1a0102e8:	f7f8 fed8 	bl	1a00909c <inv_register_load_store>
1a0102ec:	b108      	cbz	r0, 1a0102f2 <inv_enable_gyro_tc+0x1a>
1a0102ee:	2001      	movs	r0, #1
1a0102f0:	bd08      	pop	{r3, pc}
1a0102f2:	4807      	ldr	r0, [pc, #28]	; (1a010310 <inv_enable_gyro_tc+0x38>)
1a0102f4:	f7f8 fe7c 	bl	1a008ff0 <inv_register_mpl_start_notification>
1a0102f8:	2800      	cmp	r0, #0
1a0102fa:	d1f8      	bne.n	1a0102ee <inv_enable_gyro_tc+0x16>
1a0102fc:	4b05      	ldr	r3, [pc, #20]	; (1a010314 <inv_enable_gyro_tc+0x3c>)
1a0102fe:	2201      	movs	r2, #1
1a010300:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
1a010304:	bd08      	pop	{r3, pc}
1a010306:	bf00      	nop
1a010308:	1a00fe11 	.word	0x1a00fe11
1a01030c:	1a00fddd 	.word	0x1a00fddd
1a010310:	1a010291 	.word	0x1a010291
1a010314:	100870e0 	.word	0x100870e0

1a010318 <inv_start_heading_from_gyro>:
1a010318:	4802      	ldr	r0, [pc, #8]	; (1a010324 <inv_start_heading_from_gyro+0xc>)
1a01031a:	f44f 71af 	mov.w	r1, #350	; 0x15e
1a01031e:	2204      	movs	r2, #4
1a010320:	f7f7 b892 	b.w	1a007448 <inv_register_data_cb>
1a010324:	1a010329 	.word	0x1a010329

1a010328 <inv_run_heading_from_gyro>:
1a010328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a01032c:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a01032e:	05db      	lsls	r3, r3, #23
1a010330:	b0a7      	sub	sp, #156	; 0x9c
1a010332:	4682      	mov	sl, r0
1a010334:	d403      	bmi.n	1a01033e <inv_run_heading_from_gyro+0x16>
1a010336:	2000      	movs	r0, #0
1a010338:	b027      	add	sp, #156	; 0x9c
1a01033a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a01033e:	f7f8 fd8b 	bl	1a008e58 <inv_got_compass_bias>
1a010342:	4604      	mov	r4, r0
1a010344:	2800      	cmp	r0, #0
1a010346:	d1f6      	bne.n	1a010336 <inv_run_heading_from_gyro+0xe>
1a010348:	a811      	add	r0, sp, #68	; 0x44
1a01034a:	f7f8 fca9 	bl	1a008ca0 <inv_get_6axis_quaternion>
1a01034e:	a811      	add	r0, sp, #68	; 0x44
1a010350:	a91d      	add	r1, sp, #116	; 0x74
1a010352:	f7f8 f935 	bl	1a0085c0 <inv_quaternion_to_rotation>
1a010356:	aa0d      	add	r2, sp, #52	; 0x34
1a010358:	a911      	add	r1, sp, #68	; 0x44
1a01035a:	48bb      	ldr	r0, [pc, #748]	; (1a010648 <inv_run_heading_from_gyro+0x320>)
1a01035c:	f7f7 fd0c 	bl	1a007d78 <inv_q_mult>
1a010360:	a811      	add	r0, sp, #68	; 0x44
1a010362:	49b9      	ldr	r1, [pc, #740]	; (1a010648 <inv_run_heading_from_gyro+0x320>)
1a010364:	f7f7 fe06 	bl	1a007f74 <inv_q_invert>
1a010368:	990e      	ldr	r1, [sp, #56]	; 0x38
1a01036a:	981d      	ldr	r0, [sp, #116]	; 0x74
1a01036c:	f7f7 fcde 	bl	1a007d2c <inv_q30_mult>
1a010370:	990f      	ldr	r1, [sp, #60]	; 0x3c
1a010372:	9001      	str	r0, [sp, #4]
1a010374:	981e      	ldr	r0, [sp, #120]	; 0x78
1a010376:	f7f7 fcd9 	bl	1a007d2c <inv_q30_mult>
1a01037a:	9910      	ldr	r1, [sp, #64]	; 0x40
1a01037c:	9002      	str	r0, [sp, #8]
1a01037e:	981f      	ldr	r0, [sp, #124]	; 0x7c
1a010380:	f7f7 fcd4 	bl	1a007d2c <inv_q30_mult>
1a010384:	990e      	ldr	r1, [sp, #56]	; 0x38
1a010386:	9003      	str	r0, [sp, #12]
1a010388:	9820      	ldr	r0, [sp, #128]	; 0x80
1a01038a:	f7f7 fccf 	bl	1a007d2c <inv_q30_mult>
1a01038e:	990f      	ldr	r1, [sp, #60]	; 0x3c
1a010390:	9005      	str	r0, [sp, #20]
1a010392:	9821      	ldr	r0, [sp, #132]	; 0x84
1a010394:	f7f7 fcca 	bl	1a007d2c <inv_q30_mult>
1a010398:	9910      	ldr	r1, [sp, #64]	; 0x40
1a01039a:	9006      	str	r0, [sp, #24]
1a01039c:	9822      	ldr	r0, [sp, #136]	; 0x88
1a01039e:	f7f7 fcc5 	bl	1a007d2c <inv_q30_mult>
1a0103a2:	990e      	ldr	r1, [sp, #56]	; 0x38
1a0103a4:	9007      	str	r0, [sp, #28]
1a0103a6:	9823      	ldr	r0, [sp, #140]	; 0x8c
1a0103a8:	f7f7 fcc0 	bl	1a007d2c <inv_q30_mult>
1a0103ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
1a0103ae:	4605      	mov	r5, r0
1a0103b0:	9824      	ldr	r0, [sp, #144]	; 0x90
1a0103b2:	f7f7 fcbb 	bl	1a007d2c <inv_q30_mult>
1a0103b6:	9910      	ldr	r1, [sp, #64]	; 0x40
1a0103b8:	182d      	adds	r5, r5, r0
1a0103ba:	9825      	ldr	r0, [sp, #148]	; 0x94
1a0103bc:	f7f7 fcb6 	bl	1a007d2c <inv_q30_mult>
1a0103c0:	1828      	adds	r0, r5, r0
1a0103c2:	4245      	negs	r5, r0
1a0103c4:	2d00      	cmp	r5, #0
1a0103c6:	f2c0 81ec 	blt.w	1a0107a2 <inv_run_heading_from_gyro+0x47a>
1a0103ca:	9404      	str	r4, [sp, #16]
1a0103cc:	4b9f      	ldr	r3, [pc, #636]	; (1a01064c <inv_run_heading_from_gyro+0x324>)
1a0103ce:	17ec      	asrs	r4, r5, #31
1a0103d0:	fb83 0305 	smull	r0, r3, r3, r5
1a0103d4:	ebc4 3463 	rsb	r4, r4, r3, asr #13
1a0103d8:	f8df b274 	ldr.w	fp, [pc, #628]	; 1a010650 <inv_run_heading_from_gyro+0x328>
1a0103dc:	f8da 10a0 	ldr.w	r1, [sl, #160]	; 0xa0
1a0103e0:	f8db 6028 	ldr.w	r6, [fp, #40]	; 0x28
1a0103e4:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
1a0103e8:	f8da e0a8 	ldr.w	lr, [sl, #168]	; 0xa8
1a0103ec:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
1a0103f0:	f8db 702c 	ldr.w	r7, [fp, #44]	; 0x2c
1a0103f4:	f8cb 1028 	str.w	r1, [fp, #40]	; 0x28
1a0103f8:	ebc6 0901 	rsb	r9, r6, r1
1a0103fc:	4649      	mov	r1, r9
1a0103fe:	981d      	ldr	r0, [sp, #116]	; 0x74
1a010400:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
1a010404:	ebc3 060e 	rsb	r6, r3, lr
1a010408:	1bd7      	subs	r7, r2, r7
1a01040a:	f8cb e030 	str.w	lr, [fp, #48]	; 0x30
1a01040e:	f7f7 fc8d 	bl	1a007d2c <inv_q30_mult>
1a010412:	4639      	mov	r1, r7
1a010414:	4680      	mov	r8, r0
1a010416:	981e      	ldr	r0, [sp, #120]	; 0x78
1a010418:	f7f7 fc88 	bl	1a007d2c <inv_q30_mult>
1a01041c:	4631      	mov	r1, r6
1a01041e:	4480      	add	r8, r0
1a010420:	981f      	ldr	r0, [sp, #124]	; 0x7c
1a010422:	f7f7 fc83 	bl	1a007d2c <inv_q30_mult>
1a010426:	4649      	mov	r1, r9
1a010428:	eb08 0300 	add.w	r3, r8, r0
1a01042c:	9820      	ldr	r0, [sp, #128]	; 0x80
1a01042e:	f8cb 3000 	str.w	r3, [fp]
1a010432:	f7f7 fc7b 	bl	1a007d2c <inv_q30_mult>
1a010436:	4639      	mov	r1, r7
1a010438:	4680      	mov	r8, r0
1a01043a:	9821      	ldr	r0, [sp, #132]	; 0x84
1a01043c:	f7f7 fc76 	bl	1a007d2c <inv_q30_mult>
1a010440:	4631      	mov	r1, r6
1a010442:	4480      	add	r8, r0
1a010444:	9822      	ldr	r0, [sp, #136]	; 0x88
1a010446:	f7f7 fc71 	bl	1a007d2c <inv_q30_mult>
1a01044a:	4649      	mov	r1, r9
1a01044c:	eb08 0300 	add.w	r3, r8, r0
1a010450:	9823      	ldr	r0, [sp, #140]	; 0x8c
1a010452:	f8cb 3004 	str.w	r3, [fp, #4]
1a010456:	f7f7 fc69 	bl	1a007d2c <inv_q30_mult>
1a01045a:	4639      	mov	r1, r7
1a01045c:	4681      	mov	r9, r0
1a01045e:	9824      	ldr	r0, [sp, #144]	; 0x90
1a010460:	f7f7 fc64 	bl	1a007d2c <inv_q30_mult>
1a010464:	4631      	mov	r1, r6
1a010466:	4481      	add	r9, r0
1a010468:	9825      	ldr	r0, [sp, #148]	; 0x94
1a01046a:	f7f7 fc5f 	bl	1a007d2c <inv_q30_mult>
1a01046e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
1a010472:	bfa8      	it	ge
1a010474:	f44f 3480 	movge.w	r4, #65536	; 0x10000
1a010478:	4448      	add	r0, r9
1a01047a:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
1a01047e:	f8cb 0008 	str.w	r0, [fp, #8]
1a010482:	f340 817a 	ble.w	1a01077a <inv_run_heading_from_gyro+0x452>
1a010486:	2d00      	cmp	r5, #0
1a010488:	f2c0 8197 	blt.w	1a0107ba <inv_run_heading_from_gyro+0x492>
1a01048c:	006b      	lsls	r3, r5, #1
1a01048e:	9a01      	ldr	r2, [sp, #4]
1a010490:	9802      	ldr	r0, [sp, #8]
1a010492:	eb02 0800 	add.w	r8, r2, r0
1a010496:	9a03      	ldr	r2, [sp, #12]
1a010498:	4490      	add	r8, r2
1a01049a:	f1c8 0800 	rsb	r8, r8, #0
1a01049e:	f1b8 0f00 	cmp.w	r8, #0
1a0104a2:	bfac      	ite	ge
1a0104a4:	eb08 0848 	addge.w	r8, r8, r8, lsl #1
1a0104a8:	eba8 0888 	sublt.w	r8, r8, r8, lsl #2
1a0104ac:	4543      	cmp	r3, r8
1a0104ae:	f340 8164 	ble.w	1a01077a <inv_run_heading_from_gyro+0x452>
1a0104b2:	9a05      	ldr	r2, [sp, #20]
1a0104b4:	9806      	ldr	r0, [sp, #24]
1a0104b6:	1813      	adds	r3, r2, r0
1a0104b8:	9a07      	ldr	r2, [sp, #28]
1a0104ba:	2d00      	cmp	r5, #0
1a0104bc:	4413      	add	r3, r2
1a0104be:	bfb8      	it	lt
1a0104c0:	ebc5 75c5 	rsblt	r5, r5, r5, lsl #31
1a0104c4:	425b      	negs	r3, r3
1a0104c6:	006d      	lsls	r5, r5, #1
1a0104c8:	2b00      	cmp	r3, #0
1a0104ca:	bfac      	ite	ge
1a0104cc:	eb03 0343 	addge.w	r3, r3, r3, lsl #1
1a0104d0:	eba3 0383 	sublt.w	r3, r3, r3, lsl #2
1a0104d4:	429d      	cmp	r5, r3
1a0104d6:	f340 8150 	ble.w	1a01077a <inv_run_heading_from_gyro+0x452>
1a0104da:	f8db 700c 	ldr.w	r7, [fp, #12]
1a0104de:	4e5c      	ldr	r6, [pc, #368]	; (1a010650 <inv_run_heading_from_gyro+0x328>)
1a0104e0:	2f00      	cmp	r7, #0
1a0104e2:	f340 816e 	ble.w	1a0107c2 <inv_run_heading_from_gyro+0x49a>
1a0104e6:	9b04      	ldr	r3, [sp, #16]
1a0104e8:	6971      	ldr	r1, [r6, #20]
1a0104ea:	6930      	ldr	r0, [r6, #16]
1a0104ec:	f5c4 3280 	rsb	r2, r4, #65536	; 0x10000
1a0104f0:	2b00      	cmp	r3, #0
1a0104f2:	f040 816f 	bne.w	1a0107d4 <inv_run_heading_from_gyro+0x4ac>
1a0104f6:	fb02 f101 	mul.w	r1, r2, r1
1a0104fa:	ea4f 7ce2 	mov.w	ip, r2, asr #31
1a0104fe:	fb00 150c 	mla	r5, r0, ip, r1
1a010502:	fba0 0102 	umull	r0, r1, r0, r2
1a010506:	1869      	adds	r1, r5, r1
1a010508:	6833      	ldr	r3, [r6, #0]
1a01050a:	4680      	mov	r8, r0
1a01050c:	4689      	mov	r9, r1
1a01050e:	425b      	negs	r3, r3
1a010510:	f1b8 0f00 	cmp.w	r8, #0
1a010514:	f179 0500 	sbcs.w	r5, r9, #0
1a010518:	9301      	str	r3, [sp, #4]
1a01051a:	f2c0 81a7 	blt.w	1a01086c <inv_run_heading_from_gyro+0x544>
1a01051e:	f8db 301c 	ldr.w	r3, [fp, #28]
1a010522:	f8db 5018 	ldr.w	r5, [fp, #24]
1a010526:	fb02 f303 	mul.w	r3, r2, r3
1a01052a:	fb05 3c0c 	mla	ip, r5, ip, r3
1a01052e:	ea4f 4018 	mov.w	r0, r8, lsr #16
1a010532:	fba5 2302 	umull	r2, r3, r5, r2
1a010536:	9d01      	ldr	r5, [sp, #4]
1a010538:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a01053c:	ea4f 4129 	mov.w	r1, r9, asr #16
1a010540:	fbc4 0105 	smlal	r0, r1, r4, r5
1a010544:	e9c6 0104 	strd	r0, r1, [r6, #16]
1a010548:	f8db 0004 	ldr.w	r0, [fp, #4]
1a01054c:	4463      	add	r3, ip
1a01054e:	4245      	negs	r5, r0
1a010550:	2a00      	cmp	r2, #0
1a010552:	f173 0100 	sbcs.w	r1, r3, #0
1a010556:	f2c0 8182 	blt.w	1a01085e <inv_run_heading_from_gyro+0x536>
1a01055a:	0c10      	lsrs	r0, r2, #16
1a01055c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
1a010560:	1419      	asrs	r1, r3, #16
1a010562:	4b3b      	ldr	r3, [pc, #236]	; (1a010650 <inv_run_heading_from_gyro+0x328>)
1a010564:	fbc5 0104 	smlal	r0, r1, r5, r4
1a010568:	e9c3 0106 	strd	r0, r1, [r3, #24]
1a01056c:	f5b7 7faf 	cmp.w	r7, #350	; 0x15e
1a010570:	f2c0 8127 	blt.w	1a0107c2 <inv_run_heading_from_gyro+0x49a>
1a010574:	e9db 0106 	ldrd	r0, r1, [fp, #24]
1a010578:	f003 fa10 	bl	1a01399c <__aeabi_l2d>
1a01057c:	4604      	mov	r4, r0
1a01057e:	460d      	mov	r5, r1
1a010580:	e9db 0104 	ldrd	r0, r1, [fp, #16]
1a010584:	f003 fa0a 	bl	1a01399c <__aeabi_l2d>
1a010588:	4602      	mov	r2, r0
1a01058a:	460b      	mov	r3, r1
1a01058c:	4620      	mov	r0, r4
1a01058e:	4629      	mov	r1, r5
1a010590:	f004 fff0 	bl	1a015574 <atan2>
1a010594:	2200      	movs	r2, #0
1a010596:	4b2f      	ldr	r3, [pc, #188]	; (1a010654 <inv_run_heading_from_gyro+0x32c>)
1a010598:	f003 fa2e 	bl	1a0139f8 <__aeabi_dmul>
1a01059c:	a326      	add	r3, pc, #152	; (adr r3, 1a010638 <inv_run_heading_from_gyro+0x310>)
1a01059e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0105a2:	f003 fb53 	bl	1a013c4c <__aeabi_ddiv>
1a0105a6:	4604      	mov	r4, r0
1a0105a8:	460d      	mov	r5, r1
1a0105aa:	a815      	add	r0, sp, #84	; 0x54
1a0105ac:	a909      	add	r1, sp, #36	; 0x24
1a0105ae:	f7f8 faa3 	bl	1a008af8 <inv_get_compass_correction>
1a0105b2:	9815      	ldr	r0, [sp, #84]	; 0x54
1a0105b4:	f003 f9ba 	bl	1a01392c <__aeabi_i2d>
1a0105b8:	2200      	movs	r2, #0
1a0105ba:	4b27      	ldr	r3, [pc, #156]	; (1a010658 <inv_run_heading_from_gyro+0x330>)
1a0105bc:	f003 fa1c 	bl	1a0139f8 <__aeabi_dmul>
1a0105c0:	2200      	movs	r2, #0
1a0105c2:	4b26      	ldr	r3, [pc, #152]	; (1a01065c <inv_run_heading_from_gyro+0x334>)
1a0105c4:	4606      	mov	r6, r0
1a0105c6:	460f      	mov	r7, r1
1a0105c8:	f003 fca6 	bl	1a013f18 <__aeabi_dcmpgt>
1a0105cc:	2800      	cmp	r0, #0
1a0105ce:	f000 813a 	beq.w	1a010846 <inv_run_heading_from_gyro+0x51e>
1a0105d2:	4f22      	ldr	r7, [pc, #136]	; (1a01065c <inv_run_heading_from_gyro+0x334>)
1a0105d4:	2600      	movs	r6, #0
1a0105d6:	4630      	mov	r0, r6
1a0105d8:	4639      	mov	r1, r7
1a0105da:	f004 ff77 	bl	1a0154cc <acos>
1a0105de:	4606      	mov	r6, r0
1a0105e0:	460f      	mov	r7, r1
1a0105e2:	e9db 0106 	ldrd	r0, r1, [fp, #24]
1a0105e6:	f003 f9d9 	bl	1a01399c <__aeabi_l2d>
1a0105ea:	4680      	mov	r8, r0
1a0105ec:	4689      	mov	r9, r1
1a0105ee:	e9db 0104 	ldrd	r0, r1, [fp, #16]
1a0105f2:	f003 f9d3 	bl	1a01399c <__aeabi_l2d>
1a0105f6:	4602      	mov	r2, r0
1a0105f8:	460b      	mov	r3, r1
1a0105fa:	4640      	mov	r0, r8
1a0105fc:	4649      	mov	r1, r9
1a0105fe:	f004 ffb9 	bl	1a015574 <atan2>
1a010602:	a30f      	add	r3, pc, #60	; (adr r3, 1a010640 <inv_run_heading_from_gyro+0x318>)
1a010604:	e9d3 2300 	ldrd	r2, r3, [r3]
1a010608:	4680      	mov	r8, r0
1a01060a:	4689      	mov	r9, r1
1a01060c:	4630      	mov	r0, r6
1a01060e:	4639      	mov	r1, r7
1a010610:	f003 f9f2 	bl	1a0139f8 <__aeabi_dmul>
1a010614:	2200      	movs	r2, #0
1a010616:	4606      	mov	r6, r0
1a010618:	460f      	mov	r7, r1
1a01061a:	4b11      	ldr	r3, [pc, #68]	; (1a010660 <inv_run_heading_from_gyro+0x338>)
1a01061c:	4640      	mov	r0, r8
1a01061e:	4649      	mov	r1, r9
1a010620:	f003 f9ea 	bl	1a0139f8 <__aeabi_dmul>
1a010624:	a304      	add	r3, pc, #16	; (adr r3, 1a010638 <inv_run_heading_from_gyro+0x310>)
1a010626:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01062a:	f003 fb0f 	bl	1a013c4c <__aeabi_ddiv>
1a01062e:	4602      	mov	r2, r0
1a010630:	460b      	mov	r3, r1
1a010632:	4630      	mov	r0, r6
1a010634:	e016      	b.n	1a010664 <inv_run_heading_from_gyro+0x33c>
1a010636:	bf00      	nop
1a010638:	54442d18 	.word	0x54442d18
1a01063c:	400921fb 	.word	0x400921fb
1a010640:	1a63c1f8 	.word	0x1a63c1f8
1a010644:	405ca5dc 	.word	0x405ca5dc
1a010648:	100872dc 	.word	0x100872dc
1a01064c:	45e7b273 	.word	0x45e7b273
1a010650:	100872a8 	.word	0x100872a8
1a010654:	c0668000 	.word	0xc0668000
1a010658:	3e100000 	.word	0x3e100000
1a01065c:	3ff00000 	.word	0x3ff00000
1a010660:	40668000 	.word	0x40668000
1a010664:	4639      	mov	r1, r7
1a010666:	f003 f813 	bl	1a013690 <__aeabi_dsub>
1a01066a:	2200      	movs	r2, #0
1a01066c:	4606      	mov	r6, r0
1a01066e:	460f      	mov	r7, r1
1a010670:	4b8d      	ldr	r3, [pc, #564]	; (1a0108a8 <inv_run_heading_from_gyro+0x580>)
1a010672:	4620      	mov	r0, r4
1a010674:	4629      	mov	r1, r5
1a010676:	f003 fc4f 	bl	1a013f18 <__aeabi_dcmpgt>
1a01067a:	b168      	cbz	r0, 1a010698 <inv_run_heading_from_gyro+0x370>
1a01067c:	2200      	movs	r2, #0
1a01067e:	4b8b      	ldr	r3, [pc, #556]	; (1a0108ac <inv_run_heading_from_gyro+0x584>)
1a010680:	4620      	mov	r0, r4
1a010682:	4629      	mov	r1, r5
1a010684:	f003 f804 	bl	1a013690 <__aeabi_dsub>
1a010688:	2200      	movs	r2, #0
1a01068a:	4b87      	ldr	r3, [pc, #540]	; (1a0108a8 <inv_run_heading_from_gyro+0x580>)
1a01068c:	4604      	mov	r4, r0
1a01068e:	460d      	mov	r5, r1
1a010690:	f003 fc42 	bl	1a013f18 <__aeabi_dcmpgt>
1a010694:	2800      	cmp	r0, #0
1a010696:	d1f1      	bne.n	1a01067c <inv_run_heading_from_gyro+0x354>
1a010698:	4620      	mov	r0, r4
1a01069a:	4629      	mov	r1, r5
1a01069c:	2200      	movs	r2, #0
1a01069e:	4b84      	ldr	r3, [pc, #528]	; (1a0108b0 <inv_run_heading_from_gyro+0x588>)
1a0106a0:	f003 fc1c 	bl	1a013edc <__aeabi_dcmplt>
1a0106a4:	b168      	cbz	r0, 1a0106c2 <inv_run_heading_from_gyro+0x39a>
1a0106a6:	2200      	movs	r2, #0
1a0106a8:	4b80      	ldr	r3, [pc, #512]	; (1a0108ac <inv_run_heading_from_gyro+0x584>)
1a0106aa:	4620      	mov	r0, r4
1a0106ac:	4629      	mov	r1, r5
1a0106ae:	f002 fff1 	bl	1a013694 <__adddf3>
1a0106b2:	2200      	movs	r2, #0
1a0106b4:	4b7e      	ldr	r3, [pc, #504]	; (1a0108b0 <inv_run_heading_from_gyro+0x588>)
1a0106b6:	4604      	mov	r4, r0
1a0106b8:	460d      	mov	r5, r1
1a0106ba:	f003 fc0f 	bl	1a013edc <__aeabi_dcmplt>
1a0106be:	2800      	cmp	r0, #0
1a0106c0:	d1f1      	bne.n	1a0106a6 <inv_run_heading_from_gyro+0x37e>
1a0106c2:	a80a      	add	r0, sp, #40	; 0x28
1a0106c4:	f7f8 fc10 	bl	1a008ee8 <inv_get_compass_bias_error>
1a0106c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0106ca:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 1a0108bc <inv_run_heading_from_gyro+0x594>
1a0106ce:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
1a0106d2:	bfc4      	itt	gt
1a0106d4:	f44f 7348 	movgt.w	r3, #800	; 0x320
1a0106d8:	930a      	strgt	r3, [sp, #40]	; 0x28
1a0106da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0106dc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
1a0106e0:	bfc4      	itt	gt
1a0106e2:	f44f 7348 	movgt.w	r3, #800	; 0x320
1a0106e6:	930b      	strgt	r3, [sp, #44]	; 0x2c
1a0106e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0106ea:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
1a0106ee:	bfc8      	it	gt
1a0106f0:	f44f 7348 	movgt.w	r3, #800	; 0x320
1a0106f4:	a80a      	add	r0, sp, #40	; 0x28
1a0106f6:	bfc8      	it	gt
1a0106f8:	930c      	strgt	r3, [sp, #48]	; 0x30
1a0106fa:	f7f8 fbe5 	bl	1a008ec8 <inv_set_compass_bias_error>
1a0106fe:	f8db 0044 	ldr.w	r0, [fp, #68]	; 0x44
1a010702:	f003 f925 	bl	1a013950 <__aeabi_f2d>
1a010706:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
1a01070a:	4602      	mov	r2, r0
1a01070c:	460b      	mov	r3, r1
1a01070e:	4630      	mov	r0, r6
1a010710:	4639      	mov	r1, r7
1a010712:	f003 fc01 	bl	1a013f18 <__aeabi_dcmpgt>
1a010716:	2800      	cmp	r0, #0
1a010718:	f43f ae0d 	beq.w	1a010336 <inv_run_heading_from_gyro+0xe>
1a01071c:	4620      	mov	r0, r4
1a01071e:	4c65      	ldr	r4, [pc, #404]	; (1a0108b4 <inv_run_heading_from_gyro+0x58c>)
1a010720:	2600      	movs	r6, #0
1a010722:	a35f      	add	r3, pc, #380	; (adr r3, 1a0108a0 <inv_run_heading_from_gyro+0x578>)
1a010724:	e9d3 2300 	ldrd	r2, r3, [r3]
1a010728:	f8c8 4044 	str.w	r4, [r8, #68]	; 0x44
1a01072c:	4629      	mov	r1, r5
1a01072e:	961a      	str	r6, [sp, #104]	; 0x68
1a010730:	961b      	str	r6, [sp, #108]	; 0x6c
1a010732:	f003 f961 	bl	1a0139f8 <__aeabi_dmul>
1a010736:	2200      	movs	r2, #0
1a010738:	4b5f      	ldr	r3, [pc, #380]	; (1a0108b8 <inv_run_heading_from_gyro+0x590>)
1a01073a:	f003 f95d 	bl	1a0139f8 <__aeabi_dmul>
1a01073e:	f003 fc1d 	bl	1a013f7c <__aeabi_d2f>
1a010742:	4604      	mov	r4, r0
1a010744:	f004 fdd0 	bl	1a0152e8 <cosf>
1a010748:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a01074c:	f003 fd74 	bl	1a014238 <__aeabi_fmul>
1a010750:	f003 ff38 	bl	1a0145c4 <__aeabi_f2iz>
1a010754:	9019      	str	r0, [sp, #100]	; 0x64
1a010756:	4620      	mov	r0, r4
1a010758:	f004 fe6a 	bl	1a015430 <sinf>
1a01075c:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a010760:	f003 fd6a 	bl	1a014238 <__aeabi_fmul>
1a010764:	f003 ff2e 	bl	1a0145c4 <__aeabi_f2iz>
1a010768:	f8da 10c0 	ldr.w	r1, [sl, #192]	; 0xc0
1a01076c:	901c      	str	r0, [sp, #112]	; 0x70
1a01076e:	a819      	add	r0, sp, #100	; 0x64
1a010770:	f7f8 f9a6 	bl	1a008ac0 <inv_set_compass_correction>
1a010774:	f8c8 600c 	str.w	r6, [r8, #12]
1a010778:	e5dd      	b.n	1a010336 <inv_run_heading_from_gyro+0xe>
1a01077a:	f8da 30c4 	ldr.w	r3, [sl, #196]	; 0xc4
1a01077e:	f8da 20c0 	ldr.w	r2, [sl, #192]	; 0xc0
1a010782:	f8db 100c 	ldr.w	r1, [fp, #12]
1a010786:	1ad2      	subs	r2, r2, r3
1a010788:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
1a01078c:	eba1 0362 	sub.w	r3, r1, r2, asr #1
1a010790:	2b00      	cmp	r3, #0
1a010792:	f8cb 300c 	str.w	r3, [fp, #12]
1a010796:	f6bf adce 	bge.w	1a010336 <inv_run_heading_from_gyro+0xe>
1a01079a:	4b48      	ldr	r3, [pc, #288]	; (1a0108bc <inv_run_heading_from_gyro+0x594>)
1a01079c:	2200      	movs	r2, #0
1a01079e:	60da      	str	r2, [r3, #12]
1a0107a0:	e5c9      	b.n	1a010336 <inv_run_heading_from_gyro+0xe>
1a0107a2:	4b47      	ldr	r3, [pc, #284]	; (1a0108c0 <inv_run_heading_from_gyro+0x598>)
1a0107a4:	429d      	cmp	r5, r3
1a0107a6:	da78      	bge.n	1a01089a <inv_run_heading_from_gyro+0x572>
1a0107a8:	4b46      	ldr	r3, [pc, #280]	; (1a0108c4 <inv_run_heading_from_gyro+0x59c>)
1a0107aa:	17ec      	asrs	r4, r5, #31
1a0107ac:	fb83 1305 	smull	r1, r3, r3, r5
1a0107b0:	2201      	movs	r2, #1
1a0107b2:	eba4 3463 	sub.w	r4, r4, r3, asr #13
1a0107b6:	9204      	str	r2, [sp, #16]
1a0107b8:	e60e      	b.n	1a0103d8 <inv_run_heading_from_gyro+0xb0>
1a0107ba:	ebc5 73c5 	rsb	r3, r5, r5, lsl #31
1a0107be:	005b      	lsls	r3, r3, #1
1a0107c0:	e665      	b.n	1a01048e <inv_run_heading_from_gyro+0x166>
1a0107c2:	f8da 20c0 	ldr.w	r2, [sl, #192]	; 0xc0
1a0107c6:	f8da 30c4 	ldr.w	r3, [sl, #196]	; 0xc4
1a0107ca:	1ad3      	subs	r3, r2, r3
1a0107cc:	18ff      	adds	r7, r7, r3
1a0107ce:	f8cb 700c 	str.w	r7, [fp, #12]
1a0107d2:	e5b0      	b.n	1a010336 <inv_run_heading_from_gyro+0xe>
1a0107d4:	6833      	ldr	r3, [r6, #0]
1a0107d6:	fb02 f101 	mul.w	r1, r2, r1
1a0107da:	9302      	str	r3, [sp, #8]
1a0107dc:	17d3      	asrs	r3, r2, #31
1a0107de:	fb00 1c03 	mla	ip, r0, r3, r1
1a0107e2:	fba0 0102 	umull	r0, r1, r0, r2
1a0107e6:	4461      	add	r1, ip
1a0107e8:	4680      	mov	r8, r0
1a0107ea:	4689      	mov	r9, r1
1a0107ec:	f1b8 0f00 	cmp.w	r8, #0
1a0107f0:	f179 0500 	sbcs.w	r5, r9, #0
1a0107f4:	db49      	blt.n	1a01088a <inv_run_heading_from_gyro+0x562>
1a0107f6:	f8db 501c 	ldr.w	r5, [fp, #28]
1a0107fa:	f8db 0004 	ldr.w	r0, [fp, #4]
1a0107fe:	fb02 fc05 	mul.w	ip, r2, r5
1a010802:	f8db 5018 	ldr.w	r5, [fp, #24]
1a010806:	9001      	str	r0, [sp, #4]
1a010808:	fb05 cc03 	mla	ip, r5, r3, ip
1a01080c:	ea4f 4018 	mov.w	r0, r8, lsr #16
1a010810:	fba5 2302 	umull	r2, r3, r5, r2
1a010814:	9d02      	ldr	r5, [sp, #8]
1a010816:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a01081a:	ea4f 4129 	mov.w	r1, r9, asr #16
1a01081e:	fbc4 0105 	smlal	r0, r1, r4, r5
1a010822:	4463      	add	r3, ip
1a010824:	e9c6 0104 	strd	r0, r1, [r6, #16]
1a010828:	2a00      	cmp	r2, #0
1a01082a:	f173 0000 	sbcs.w	r0, r3, #0
1a01082e:	db25      	blt.n	1a01087c <inv_run_heading_from_gyro+0x554>
1a010830:	0c10      	lsrs	r0, r2, #16
1a010832:	9a01      	ldr	r2, [sp, #4]
1a010834:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
1a010838:	1419      	asrs	r1, r3, #16
1a01083a:	4b20      	ldr	r3, [pc, #128]	; (1a0108bc <inv_run_heading_from_gyro+0x594>)
1a01083c:	fbc2 0104 	smlal	r0, r1, r2, r4
1a010840:	e9c3 0106 	strd	r0, r1, [r3, #24]
1a010844:	e692      	b.n	1a01056c <inv_run_heading_from_gyro+0x244>
1a010846:	4630      	mov	r0, r6
1a010848:	4639      	mov	r1, r7
1a01084a:	2200      	movs	r2, #0
1a01084c:	4b1e      	ldr	r3, [pc, #120]	; (1a0108c8 <inv_run_heading_from_gyro+0x5a0>)
1a01084e:	f003 fb45 	bl	1a013edc <__aeabi_dcmplt>
1a010852:	2800      	cmp	r0, #0
1a010854:	f43f aebf 	beq.w	1a0105d6 <inv_run_heading_from_gyro+0x2ae>
1a010858:	2600      	movs	r6, #0
1a01085a:	4f1b      	ldr	r7, [pc, #108]	; (1a0108c8 <inv_run_heading_from_gyro+0x5a0>)
1a01085c:	e6bb      	b.n	1a0105d6 <inv_run_heading_from_gyro+0x2ae>
1a01085e:	f64f 70ff 	movw	r0, #65535	; 0xffff
1a010862:	2100      	movs	r1, #0
1a010864:	1812      	adds	r2, r2, r0
1a010866:	eb43 0301 	adc.w	r3, r3, r1
1a01086a:	e676      	b.n	1a01055a <inv_run_heading_from_gyro+0x232>
1a01086c:	f64f 70ff 	movw	r0, #65535	; 0xffff
1a010870:	2100      	movs	r1, #0
1a010872:	eb18 0800 	adds.w	r8, r8, r0
1a010876:	eb49 0901 	adc.w	r9, r9, r1
1a01087a:	e650      	b.n	1a01051e <inv_run_heading_from_gyro+0x1f6>
1a01087c:	f64f 70ff 	movw	r0, #65535	; 0xffff
1a010880:	2100      	movs	r1, #0
1a010882:	1812      	adds	r2, r2, r0
1a010884:	eb43 0301 	adc.w	r3, r3, r1
1a010888:	e7d2      	b.n	1a010830 <inv_run_heading_from_gyro+0x508>
1a01088a:	f64f 70ff 	movw	r0, #65535	; 0xffff
1a01088e:	2100      	movs	r1, #0
1a010890:	eb18 0800 	adds.w	r8, r8, r0
1a010894:	eb49 0901 	adc.w	r9, r9, r1
1a010898:	e7ad      	b.n	1a0107f6 <inv_run_heading_from_gyro+0x4ce>
1a01089a:	2201      	movs	r2, #1
1a01089c:	9204      	str	r2, [sp, #16]
1a01089e:	e595      	b.n	1a0103cc <inv_run_heading_from_gyro+0xa4>
1a0108a0:	a2529d39 	.word	0xa2529d39
1a0108a4:	3f91df46 	.word	0x3f91df46
1a0108a8:	40668000 	.word	0x40668000
1a0108ac:	40768000 	.word	0x40768000
1a0108b0:	c0668000 	.word	0xc0668000
1a0108b4:	41700000 	.word	0x41700000
1a0108b8:	3fe00000 	.word	0x3fe00000
1a0108bc:	100872a8 	.word	0x100872a8
1a0108c0:	ffff8ad1 	.word	0xffff8ad1
1a0108c4:	45e7b273 	.word	0x45e7b273
1a0108c8:	bff00000 	.word	0xbff00000
1a0108cc:	f3af 8000 	nop.w

1a0108d0 <inv_init_heading_from_gyro>:
1a0108d0:	b510      	push	{r4, lr}
1a0108d2:	4c06      	ldr	r4, [pc, #24]	; (1a0108ec <inv_init_heading_from_gyro+0x1c>)
1a0108d4:	2100      	movs	r1, #0
1a0108d6:	4620      	mov	r0, r4
1a0108d8:	2248      	movs	r2, #72	; 0x48
1a0108da:	f004 f9fd 	bl	1a014cd8 <memset>
1a0108de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a0108e2:	6363      	str	r3, [r4, #52]	; 0x34
1a0108e4:	4b02      	ldr	r3, [pc, #8]	; (1a0108f0 <inv_init_heading_from_gyro+0x20>)
1a0108e6:	6463      	str	r3, [r4, #68]	; 0x44
1a0108e8:	bd10      	pop	{r4, pc}
1a0108ea:	bf00      	nop
1a0108ec:	100872a8 	.word	0x100872a8
1a0108f0:	40a00000 	.word	0x40a00000

1a0108f4 <inv_enable_heading_from_gyro>:
1a0108f4:	b508      	push	{r3, lr}
1a0108f6:	f7ff ffeb 	bl	1a0108d0 <inv_init_heading_from_gyro>
1a0108fa:	4802      	ldr	r0, [pc, #8]	; (1a010904 <inv_enable_heading_from_gyro+0x10>)
1a0108fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a010900:	f7f8 bb76 	b.w	1a008ff0 <inv_register_mpl_start_notification>
1a010904:	1a010319 	.word	0x1a010319

1a010908 <inv_start_magnetic_disturbance>:
1a010908:	4802      	ldr	r0, [pc, #8]	; (1a010914 <inv_start_magnetic_disturbance+0xc>)
1a01090a:	f44f 7196 	mov.w	r1, #300	; 0x12c
1a01090e:	2204      	movs	r2, #4
1a010910:	f7f6 bd9a 	b.w	1a007448 <inv_register_data_cb>
1a010914:	1a010ebd 	.word	0x1a010ebd

1a010918 <inv_set_magnetic_disturbance>:
1a010918:	2800      	cmp	r0, #0
1a01091a:	dd05      	ble.n	1a010928 <inv_set_magnetic_disturbance+0x10>
1a01091c:	4b03      	ldr	r3, [pc, #12]	; (1a01092c <inv_set_magnetic_disturbance+0x14>)
1a01091e:	2201      	movs	r2, #1
1a010920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
1a010924:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
1a010928:	2000      	movs	r0, #0
1a01092a:	4770      	bx	lr
1a01092c:	100872f0 	.word	0x100872f0

1a010930 <inv_init_magnetic_disturbance>:
1a010930:	b510      	push	{r4, lr}
1a010932:	4c0c      	ldr	r4, [pc, #48]	; (1a010964 <inv_init_magnetic_disturbance+0x34>)
1a010934:	2100      	movs	r1, #0
1a010936:	4620      	mov	r0, r4
1a010938:	22b8      	movs	r2, #184	; 0xb8
1a01093a:	f004 f9cd 	bl	1a014cd8 <memset>
1a01093e:	4b0a      	ldr	r3, [pc, #40]	; (1a010968 <inv_init_magnetic_disturbance+0x38>)
1a010940:	60e3      	str	r3, [r4, #12]
1a010942:	4b0a      	ldr	r3, [pc, #40]	; (1a01096c <inv_init_magnetic_disturbance+0x3c>)
1a010944:	60a3      	str	r3, [r4, #8]
1a010946:	4b0a      	ldr	r3, [pc, #40]	; (1a010970 <inv_init_magnetic_disturbance+0x40>)
1a010948:	6023      	str	r3, [r4, #0]
1a01094a:	4b0a      	ldr	r3, [pc, #40]	; (1a010974 <inv_init_magnetic_disturbance+0x44>)
1a01094c:	6063      	str	r3, [r4, #4]
1a01094e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a010952:	6663      	str	r3, [r4, #100]	; 0x64
1a010954:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
1a010958:	67e3      	str	r3, [r4, #124]	; 0x7c
1a01095a:	4b07      	ldr	r3, [pc, #28]	; (1a010978 <inv_init_magnetic_disturbance+0x48>)
1a01095c:	2000      	movs	r0, #0
1a01095e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
1a010962:	bd10      	pop	{r4, pc}
1a010964:	100872f0 	.word	0x100872f0
1a010968:	42b40000 	.word	0x42b40000
1a01096c:	c2b40000 	.word	0xc2b40000
1a010970:	42700000 	.word	0x42700000
1a010974:	41f00000 	.word	0x41f00000
1a010978:	3e2e147b 	.word	0x3e2e147b

1a01097c <inv_enable_magnetic_disturbance>:
1a01097c:	b508      	push	{r3, lr}
1a01097e:	f7ff ffd7 	bl	1a010930 <inv_init_magnetic_disturbance>
1a010982:	4603      	mov	r3, r0
1a010984:	b100      	cbz	r0, 1a010988 <inv_enable_magnetic_disturbance+0xc>
1a010986:	bd08      	pop	{r3, pc}
1a010988:	4a05      	ldr	r2, [pc, #20]	; (1a0109a0 <inv_enable_magnetic_disturbance+0x24>)
1a01098a:	4806      	ldr	r0, [pc, #24]	; (1a0109a4 <inv_enable_magnetic_disturbance+0x28>)
1a01098c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
1a010990:	2301      	movs	r3, #1
1a010992:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a010996:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a01099a:	f7f8 bb29 	b.w	1a008ff0 <inv_register_mpl_start_notification>
1a01099e:	bf00      	nop
1a0109a0:	100872f0 	.word	0x100872f0
1a0109a4:	1a010909 	.word	0x1a010909

1a0109a8 <inv_track_dip_angle>:
1a0109a8:	b570      	push	{r4, r5, r6, lr}
1a0109aa:	460c      	mov	r4, r1
1a0109ac:	b158      	cbz	r0, 1a0109c6 <inv_track_dip_angle+0x1e>
1a0109ae:	2801      	cmp	r0, #1
1a0109b0:	d019      	beq.n	1a0109e6 <inv_track_dip_angle+0x3e>
1a0109b2:	4b22      	ldr	r3, [pc, #136]	; (1a010a3c <inv_track_dip_angle+0x94>)
1a0109b4:	2200      	movs	r2, #0
1a0109b6:	2101      	movs	r1, #1
1a0109b8:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
1a0109bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
1a0109c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
1a0109c4:	bd70      	pop	{r4, r5, r6, pc}
1a0109c6:	4b1d      	ldr	r3, [pc, #116]	; (1a010a3c <inv_track_dip_angle+0x94>)
1a0109c8:	2200      	movs	r2, #0
1a0109ca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
1a0109ce:	2201      	movs	r2, #1
1a0109d0:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
1a0109d4:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
1a0109d8:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
1a0109dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
1a0109e0:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
1a0109e4:	bd70      	pop	{r4, r5, r6, pc}
1a0109e6:	4d15      	ldr	r5, [pc, #84]	; (1a010a3c <inv_track_dip_angle+0x94>)
1a0109e8:	4608      	mov	r0, r1
1a0109ea:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
1a0109ee:	f003 fb19 	bl	1a014024 <__aeabi_fsub>
1a0109f2:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
1a0109f6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a0109fa:	f003 fdbb 	bl	1a014574 <__aeabi_fcmplt>
1a0109fe:	b1b0      	cbz	r0, 1a010a2e <inv_track_dip_angle+0x86>
1a010a00:	f8d5 6094 	ldr.w	r6, [r5, #148]	; 0x94
1a010a04:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
1a010a08:	3601      	adds	r6, #1
1a010a0a:	4620      	mov	r0, r4
1a010a0c:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
1a010a10:	f003 fb0a 	bl	1a014028 <__addsf3>
1a010a14:	2e31      	cmp	r6, #49	; 0x31
1a010a16:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
1a010a1a:	dd0d      	ble.n	1a010a38 <inv_track_dip_angle+0x90>
1a010a1c:	2302      	movs	r3, #2
1a010a1e:	4908      	ldr	r1, [pc, #32]	; (1a010a40 <inv_track_dip_angle+0x98>)
1a010a20:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
1a010a24:	f003 fcbc 	bl	1a0143a0 <__aeabi_fdiv>
1a010a28:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
1a010a2c:	bd70      	pop	{r4, r5, r6, pc}
1a010a2e:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
1a010a32:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
1a010a36:	bd70      	pop	{r4, r5, r6, pc}
1a010a38:	bd70      	pop	{r4, r5, r6, pc}
1a010a3a:	bf00      	nop
1a010a3c:	100872f0 	.word	0x100872f0
1a010a40:	42480000 	.word	0x42480000

1a010a44 <ComputeAngleVelocity>:
1a010a44:	b5f0      	push	{r4, r5, r6, r7, lr}
1a010a46:	b08f      	sub	sp, #60	; 0x3c
1a010a48:	4605      	mov	r5, r0
1a010a4a:	460c      	mov	r4, r1
1a010a4c:	a905      	add	r1, sp, #20
1a010a4e:	4616      	mov	r6, r2
1a010a50:	f7f7 fdb6 	bl	1a0085c0 <inv_quaternion_to_rotation>
1a010a54:	aa01      	add	r2, sp, #4
1a010a56:	4620      	mov	r0, r4
1a010a58:	4629      	mov	r1, r5
1a010a5a:	f7f7 f98d 	bl	1a007d78 <inv_q_mult>
1a010a5e:	4621      	mov	r1, r4
1a010a60:	4628      	mov	r0, r5
1a010a62:	f7f7 fa87 	bl	1a007f74 <inv_q_invert>
1a010a66:	ac05      	add	r4, sp, #20
1a010a68:	1f32      	subs	r2, r6, #4
1a010a6a:	af0e      	add	r7, sp, #56	; 0x38
1a010a6c:	2300      	movs	r3, #0
1a010a6e:	2000      	movs	r0, #0
1a010a70:	2100      	movs	r1, #0
1a010a72:	ae01      	add	r6, sp, #4
1a010a74:	18f5      	adds	r5, r6, r3
1a010a76:	58e6      	ldr	r6, [r4, r3]
1a010a78:	686d      	ldr	r5, [r5, #4]
1a010a7a:	3304      	adds	r3, #4
1a010a7c:	2b0c      	cmp	r3, #12
1a010a7e:	fbc5 0106 	smlal	r0, r1, r5, r6
1a010a82:	d1f6      	bne.n	1a010a72 <ComputeAngleVelocity+0x2e>
1a010a84:	0f83      	lsrs	r3, r0, #30
1a010a86:	340c      	adds	r4, #12
1a010a88:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
1a010a8c:	42bc      	cmp	r4, r7
1a010a8e:	f842 3f04 	str.w	r3, [r2, #4]!
1a010a92:	d1eb      	bne.n	1a010a6c <ComputeAngleVelocity+0x28>
1a010a94:	b00f      	add	sp, #60	; 0x3c
1a010a96:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a010a98 <Mag3ofNormalizedLong>:
1a010a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a010a9a:	4604      	mov	r4, r0
1a010a9c:	6800      	ldr	r0, [r0, #0]
1a010a9e:	f003 fb77 	bl	1a014190 <__aeabi_i2f>
1a010aa2:	4607      	mov	r7, r0
1a010aa4:	6860      	ldr	r0, [r4, #4]
1a010aa6:	f003 fb73 	bl	1a014190 <__aeabi_i2f>
1a010aaa:	4606      	mov	r6, r0
1a010aac:	68a0      	ldr	r0, [r4, #8]
1a010aae:	f003 fb6f 	bl	1a014190 <__aeabi_i2f>
1a010ab2:	4639      	mov	r1, r7
1a010ab4:	4605      	mov	r5, r0
1a010ab6:	4638      	mov	r0, r7
1a010ab8:	f003 fbbe 	bl	1a014238 <__aeabi_fmul>
1a010abc:	4631      	mov	r1, r6
1a010abe:	4604      	mov	r4, r0
1a010ac0:	4630      	mov	r0, r6
1a010ac2:	f003 fbb9 	bl	1a014238 <__aeabi_fmul>
1a010ac6:	4601      	mov	r1, r0
1a010ac8:	4620      	mov	r0, r4
1a010aca:	f003 faad 	bl	1a014028 <__addsf3>
1a010ace:	4629      	mov	r1, r5
1a010ad0:	4604      	mov	r4, r0
1a010ad2:	4628      	mov	r0, r5
1a010ad4:	f003 fbb0 	bl	1a014238 <__aeabi_fmul>
1a010ad8:	4601      	mov	r1, r0
1a010ada:	4620      	mov	r0, r4
1a010adc:	f003 faa4 	bl	1a014028 <__addsf3>
1a010ae0:	f004 fe72 	bl	1a0157c8 <sqrtf>
1a010ae4:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a010ae8:	f003 fba6 	bl	1a014238 <__aeabi_fmul>
1a010aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a010aee:	bf00      	nop

1a010af0 <MagDisturbSetDisturbance>:
1a010af0:	b570      	push	{r4, r5, r6, lr}
1a010af2:	4c1c      	ldr	r4, [pc, #112]	; (1a010b64 <MagDisturbSetDisturbance+0x74>)
1a010af4:	4605      	mov	r5, r0
1a010af6:	460e      	mov	r6, r1
1a010af8:	6820      	ldr	r0, [r4, #0]
1a010afa:	4629      	mov	r1, r5
1a010afc:	f003 fd3a 	bl	1a014574 <__aeabi_fcmplt>
1a010b00:	b920      	cbnz	r0, 1a010b0c <MagDisturbSetDisturbance+0x1c>
1a010b02:	4628      	mov	r0, r5
1a010b04:	6861      	ldr	r1, [r4, #4]
1a010b06:	f003 fd35 	bl	1a014574 <__aeabi_fcmplt>
1a010b0a:	b180      	cbz	r0, 1a010b2e <MagDisturbSetDisturbance+0x3e>
1a010b0c:	6f63      	ldr	r3, [r4, #116]	; 0x74
1a010b0e:	4a15      	ldr	r2, [pc, #84]	; (1a010b64 <MagDisturbSetDisturbance+0x74>)
1a010b10:	b193      	cbz	r3, 1a010b38 <MagDisturbSetDisturbance+0x48>
1a010b12:	2300      	movs	r3, #0
1a010b14:	2201      	movs	r2, #1
1a010b16:	6762      	str	r2, [r4, #116]	; 0x74
1a010b18:	67a3      	str	r3, [r4, #120]	; 0x78
1a010b1a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
1a010b1c:	4911      	ldr	r1, [pc, #68]	; (1a010b64 <MagDisturbSetDisturbance+0x74>)
1a010b1e:	429a      	cmp	r2, r3
1a010b20:	dc04      	bgt.n	1a010b2c <MagDisturbSetDisturbance+0x3c>
1a010b22:	6f4b      	ldr	r3, [r1, #116]	; 0x74
1a010b24:	2b01      	cmp	r3, #1
1a010b26:	d00d      	beq.n	1a010b44 <MagDisturbSetDisturbance+0x54>
1a010b28:	2300      	movs	r3, #0
1a010b2a:	6763      	str	r3, [r4, #116]	; 0x74
1a010b2c:	bd70      	pop	{r4, r5, r6, pc}
1a010b2e:	6923      	ldr	r3, [r4, #16]
1a010b30:	2b01      	cmp	r3, #1
1a010b32:	d00a      	beq.n	1a010b4a <MagDisturbSetDisturbance+0x5a>
1a010b34:	6fa3      	ldr	r3, [r4, #120]	; 0x78
1a010b36:	e7f0      	b.n	1a010b1a <MagDisturbSetDisturbance+0x2a>
1a010b38:	f102 0018 	add.w	r0, r2, #24
1a010b3c:	6d91      	ldr	r1, [r2, #88]	; 0x58
1a010b3e:	f7f7 ffbf 	bl	1a008ac0 <inv_set_compass_correction>
1a010b42:	e7e6      	b.n	1a010b12 <MagDisturbSetDisturbance+0x22>
1a010b44:	2300      	movs	r3, #0
1a010b46:	65cb      	str	r3, [r1, #92]	; 0x5c
1a010b48:	e7ee      	b.n	1a010b28 <MagDisturbSetDisturbance+0x38>
1a010b4a:	68e0      	ldr	r0, [r4, #12]
1a010b4c:	4631      	mov	r1, r6
1a010b4e:	f003 fd11 	bl	1a014574 <__aeabi_fcmplt>
1a010b52:	2800      	cmp	r0, #0
1a010b54:	d1da      	bne.n	1a010b0c <MagDisturbSetDisturbance+0x1c>
1a010b56:	4630      	mov	r0, r6
1a010b58:	68a1      	ldr	r1, [r4, #8]
1a010b5a:	f003 fd0b 	bl	1a014574 <__aeabi_fcmplt>
1a010b5e:	2800      	cmp	r0, #0
1a010b60:	d1d4      	bne.n	1a010b0c <MagDisturbSetDisturbance+0x1c>
1a010b62:	e7e7      	b.n	1a010b34 <MagDisturbSetDisturbance+0x44>
1a010b64:	100872f0 	.word	0x100872f0

1a010b68 <MagDisturbCheckSettling>:
1a010b68:	b538      	push	{r3, r4, r5, lr}
1a010b6a:	4605      	mov	r5, r0
1a010b6c:	460c      	mov	r4, r1
1a010b6e:	f7f7 ffe5 	bl	1a008b3c <inv_get_acc_state>
1a010b72:	b920      	cbnz	r0, 1a010b7e <MagDisturbCheckSettling+0x16>
1a010b74:	4628      	mov	r0, r5
1a010b76:	490c      	ldr	r1, [pc, #48]	; (1a010ba8 <MagDisturbCheckSettling+0x40>)
1a010b78:	f003 fd1a 	bl	1a0145b0 <__aeabi_fcmpgt>
1a010b7c:	b178      	cbz	r0, 1a010b9e <MagDisturbCheckSettling+0x36>
1a010b7e:	4b0b      	ldr	r3, [pc, #44]	; (1a010bac <MagDisturbCheckSettling+0x44>)
1a010b80:	2200      	movs	r2, #0
1a010b82:	611a      	str	r2, [r3, #16]
1a010b84:	615a      	str	r2, [r3, #20]
1a010b86:	6959      	ldr	r1, [r3, #20]
1a010b88:	4a08      	ldr	r2, [pc, #32]	; (1a010bac <MagDisturbCheckSettling+0x44>)
1a010b8a:	1861      	adds	r1, r4, r1
1a010b8c:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
1a010b90:	6159      	str	r1, [r3, #20]
1a010b92:	dd03      	ble.n	1a010b9c <MagDisturbCheckSettling+0x34>
1a010b94:	2301      	movs	r3, #1
1a010b96:	6113      	str	r3, [r2, #16]
1a010b98:	2300      	movs	r3, #0
1a010b9a:	6153      	str	r3, [r2, #20]
1a010b9c:	bd38      	pop	{r3, r4, r5, pc}
1a010b9e:	4b03      	ldr	r3, [pc, #12]	; (1a010bac <MagDisturbCheckSettling+0x44>)
1a010ba0:	691a      	ldr	r2, [r3, #16]
1a010ba2:	2a00      	cmp	r2, #0
1a010ba4:	d0ef      	beq.n	1a010b86 <MagDisturbCheckSettling+0x1e>
1a010ba6:	bd38      	pop	{r3, r4, r5, pc}
1a010ba8:	461c4000 	.word	0x461c4000
1a010bac:	100872f0 	.word	0x100872f0

1a010bb0 <inv_check_magnetic_disturbance>:
1a010bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a010bb4:	4ca9      	ldr	r4, [pc, #676]	; (1a010e5c <inv_check_magnetic_disturbance+0x2ac>)
1a010bb6:	b08d      	sub	sp, #52	; 0x34
1a010bb8:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
1a010bbc:	2500      	movs	r5, #0
1a010bbe:	4680      	mov	r8, r0
1a010bc0:	4689      	mov	r9, r1
1a010bc2:	4617      	mov	r7, r2
1a010bc4:	469a      	mov	sl, r3
1a010bc6:	9506      	str	r5, [sp, #24]
1a010bc8:	9507      	str	r5, [sp, #28]
1a010bca:	9508      	str	r5, [sp, #32]
1a010bcc:	b926      	cbnz	r6, 1a010bd8 <inv_check_magnetic_disturbance+0x28>
1a010bce:	2300      	movs	r3, #0
1a010bd0:	4618      	mov	r0, r3
1a010bd2:	b00d      	add	sp, #52	; 0x34
1a010bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a010bd8:	f7f6 f8ee 	bl	1a006db8 <inv_get_gyro_on>
1a010bdc:	2800      	cmp	r0, #0
1a010bde:	f040 8123 	bne.w	1a010e28 <inv_check_magnetic_disturbance+0x278>
1a010be2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
1a010be6:	4d9d      	ldr	r5, [pc, #628]	; (1a010e5c <inv_check_magnetic_disturbance+0x2ac>)
1a010be8:	2b00      	cmp	r3, #0
1a010bea:	dd12      	ble.n	1a010c12 <inv_check_magnetic_disturbance+0x62>
1a010bec:	2301      	movs	r3, #1
1a010bee:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
1a010bf2:	f7f6 f8e1 	bl	1a006db8 <inv_get_gyro_on>
1a010bf6:	2800      	cmp	r0, #0
1a010bf8:	f040 80a9 	bne.w	1a010d4e <inv_check_magnetic_disturbance+0x19e>
1a010bfc:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
1a010c00:	ebc8 0303 	rsb	r3, r8, r3
1a010c04:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
1a010c08:	2b00      	cmp	r3, #0
1a010c0a:	dc02      	bgt.n	1a010c12 <inv_check_magnetic_disturbance+0x62>
1a010c0c:	2300      	movs	r3, #0
1a010c0e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
1a010c12:	f7f8 f921 	bl	1a008e58 <inv_got_compass_bias>
1a010c16:	2800      	cmp	r0, #0
1a010c18:	d0d9      	beq.n	1a010bce <inv_check_magnetic_disturbance+0x1e>
1a010c1a:	2600      	movs	r6, #0
1a010c1c:	2500      	movs	r5, #0
1a010c1e:	5978      	ldr	r0, [r7, r5]
1a010c20:	f003 fab6 	bl	1a014190 <__aeabi_i2f>
1a010c24:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a010c28:	f003 fb06 	bl	1a014238 <__aeabi_fmul>
1a010c2c:	4683      	mov	fp, r0
1a010c2e:	f85a 0005 	ldr.w	r0, [sl, r5]
1a010c32:	f003 faad 	bl	1a014190 <__aeabi_i2f>
1a010c36:	4601      	mov	r1, r0
1a010c38:	4658      	mov	r0, fp
1a010c3a:	f003 fafd 	bl	1a014238 <__aeabi_fmul>
1a010c3e:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a010c42:	f003 faf9 	bl	1a014238 <__aeabi_fmul>
1a010c46:	4601      	mov	r1, r0
1a010c48:	4630      	mov	r0, r6
1a010c4a:	f003 f9ed 	bl	1a014028 <__addsf3>
1a010c4e:	3504      	adds	r5, #4
1a010c50:	2d0c      	cmp	r5, #12
1a010c52:	4606      	mov	r6, r0
1a010c54:	d1e3      	bne.n	1a010c1e <inv_check_magnetic_disturbance+0x6e>
1a010c56:	4638      	mov	r0, r7
1a010c58:	f7ff ff1e 	bl	1a010a98 <Mag3ofNormalizedLong>
1a010c5c:	4607      	mov	r7, r0
1a010c5e:	4639      	mov	r1, r7
1a010c60:	4630      	mov	r0, r6
1a010c62:	f003 fb9d 	bl	1a0143a0 <__aeabi_fdiv>
1a010c66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
1a010c6a:	4605      	mov	r5, r0
1a010c6c:	f003 fca0 	bl	1a0145b0 <__aeabi_fcmpgt>
1a010c70:	2800      	cmp	r0, #0
1a010c72:	d064      	beq.n	1a010d3e <inv_check_magnetic_disturbance+0x18e>
1a010c74:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
1a010c78:	4628      	mov	r0, r5
1a010c7a:	f004 fd51 	bl	1a015720 <acosf>
1a010c7e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
1a010c82:	4d76      	ldr	r5, [pc, #472]	; (1a010e5c <inv_check_magnetic_disturbance+0x2ac>)
1a010c84:	4606      	mov	r6, r0
1a010c86:	b15b      	cbz	r3, 1a010ca0 <inv_check_magnetic_disturbance+0xf0>
1a010c88:	4638      	mov	r0, r7
1a010c8a:	6829      	ldr	r1, [r5, #0]
1a010c8c:	f003 fc72 	bl	1a014574 <__aeabi_fcmplt>
1a010c90:	b130      	cbz	r0, 1a010ca0 <inv_check_magnetic_disturbance+0xf0>
1a010c92:	4638      	mov	r0, r7
1a010c94:	6869      	ldr	r1, [r5, #4]
1a010c96:	f003 fc8b 	bl	1a0145b0 <__aeabi_fcmpgt>
1a010c9a:	2800      	cmp	r0, #0
1a010c9c:	f040 80c8 	bne.w	1a010e30 <inv_check_magnetic_disturbance+0x280>
1a010ca0:	ad09      	add	r5, sp, #36	; 0x24
1a010ca2:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 1a010e5c <inv_check_magnetic_disturbance+0x2ac>
1a010ca6:	4628      	mov	r0, r5
1a010ca8:	f7f7 ff9a 	bl	1a008be0 <inv_get_local_field>
1a010cac:	4628      	mov	r0, r5
1a010cae:	f10a 01ac 	add.w	r1, sl, #172	; 0xac
1a010cb2:	220c      	movs	r2, #12
1a010cb4:	f003 fee0 	bl	1a014a78 <memcmp>
1a010cb8:	2800      	cmp	r0, #0
1a010cba:	d152      	bne.n	1a010d62 <inv_check_magnetic_disturbance+0x1b2>
1a010cbc:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
1a010cc0:	2b01      	cmp	r3, #1
1a010cc2:	d04e      	beq.n	1a010d62 <inv_check_magnetic_disturbance+0x1b2>
1a010cc4:	6de5      	ldr	r5, [r4, #92]	; 0x5c
1a010cc6:	b95d      	cbnz	r5, 1a010ce0 <inv_check_magnetic_disturbance+0x130>
1a010cc8:	4b64      	ldr	r3, [pc, #400]	; (1a010e5c <inv_check_magnetic_disturbance+0x2ac>)
1a010cca:	2201      	movs	r2, #1
1a010ccc:	65da      	str	r2, [r3, #92]	; 0x5c
1a010cce:	eb04 1005 	add.w	r0, r4, r5, lsl #4
1a010cd2:	3018      	adds	r0, #24
1a010cd4:	4962      	ldr	r1, [pc, #392]	; (1a010e60 <inv_check_magnetic_disturbance+0x2b0>)
1a010cd6:	3501      	adds	r5, #1
1a010cd8:	f7f7 ff0e 	bl	1a008af8 <inv_get_compass_correction>
1a010cdc:	2d04      	cmp	r5, #4
1a010cde:	d1f6      	bne.n	1a010cce <inv_check_magnetic_disturbance+0x11e>
1a010ce0:	4d5e      	ldr	r5, [pc, #376]	; (1a010e5c <inv_check_magnetic_disturbance+0x2ac>)
1a010ce2:	aa03      	add	r2, sp, #12
1a010ce4:	f105 0164 	add.w	r1, r5, #100	; 0x64
1a010ce8:	4648      	mov	r0, r9
1a010cea:	f7ff feab 	bl	1a010a44 <ComputeAngleVelocity>
1a010cee:	f105 0164 	add.w	r1, r5, #100	; 0x64
1a010cf2:	4648      	mov	r0, r9
1a010cf4:	f7f7 f93e 	bl	1a007f74 <inv_q_invert>
1a010cf8:	a806      	add	r0, sp, #24
1a010cfa:	f7f6 ffcb 	bl	1a007c94 <inv_get_gyro_sum_of_sqr>
1a010cfe:	f003 fa43 	bl	1a014188 <__aeabi_ui2f>
1a010d02:	f04f 5172 	mov.w	r1, #1015021568	; 0x3c800000
1a010d06:	f003 fa97 	bl	1a014238 <__aeabi_fmul>
1a010d0a:	4641      	mov	r1, r8
1a010d0c:	f7ff ff2c 	bl	1a010b68 <MagDisturbCheckSettling>
1a010d10:	4638      	mov	r0, r7
1a010d12:	4631      	mov	r1, r6
1a010d14:	f7ff feec 	bl	1a010af0 <MagDisturbSetDisturbance>
1a010d18:	6fa3      	ldr	r3, [r4, #120]	; 0x78
1a010d1a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
1a010d1c:	4293      	cmp	r3, r2
1a010d1e:	da01      	bge.n	1a010d24 <inv_check_magnetic_disturbance+0x174>
1a010d20:	4443      	add	r3, r8
1a010d22:	67ab      	str	r3, [r5, #120]	; 0x78
1a010d24:	6f63      	ldr	r3, [r4, #116]	; 0x74
1a010d26:	4c4d      	ldr	r4, [pc, #308]	; (1a010e5c <inv_check_magnetic_disturbance+0x2ac>)
1a010d28:	2b00      	cmp	r3, #0
1a010d2a:	f47f af51 	bne.w	1a010bd0 <inv_check_magnetic_disturbance+0x20>
1a010d2e:	6e22      	ldr	r2, [r4, #96]	; 0x60
1a010d30:	4442      	add	r2, r8
1a010d32:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
1a010d36:	f300 8081 	bgt.w	1a010e3c <inv_check_magnetic_disturbance+0x28c>
1a010d3a:	6622      	str	r2, [r4, #96]	; 0x60
1a010d3c:	e748      	b.n	1a010bd0 <inv_check_magnetic_disturbance+0x20>
1a010d3e:	4628      	mov	r0, r5
1a010d40:	4948      	ldr	r1, [pc, #288]	; (1a010e64 <inv_check_magnetic_disturbance+0x2b4>)
1a010d42:	f003 fc17 	bl	1a014574 <__aeabi_fcmplt>
1a010d46:	2800      	cmp	r0, #0
1a010d48:	d096      	beq.n	1a010c78 <inv_check_magnetic_disturbance+0xc8>
1a010d4a:	4d46      	ldr	r5, [pc, #280]	; (1a010e64 <inv_check_magnetic_disturbance+0x2b4>)
1a010d4c:	e794      	b.n	1a010c78 <inv_check_magnetic_disturbance+0xc8>
1a010d4e:	a806      	add	r0, sp, #24
1a010d50:	f7f6 ffa0 	bl	1a007c94 <inv_get_gyro_sum_of_sqr>
1a010d54:	f5b0 4fc8 	cmp.w	r0, #25600	; 0x6400
1a010d58:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
1a010d5c:	f4bf af50 	bcs.w	1a010c00 <inv_check_magnetic_disturbance+0x50>
1a010d60:	e752      	b.n	1a010c08 <inv_check_magnetic_disturbance+0x58>
1a010d62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
1a010d66:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 1a010e5c <inv_check_magnetic_disturbance+0x2ac>
1a010d6a:	f10a 03ac 	add.w	r3, sl, #172	; 0xac
1a010d6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
1a010d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a010d74:	b9a3      	cbnz	r3, 1a010da0 <inv_check_magnetic_disturbance+0x1f0>
1a010d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a010d78:	b993      	cbnz	r3, 1a010da0 <inv_check_magnetic_disturbance+0x1f0>
1a010d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a010d7c:	b983      	cbnz	r3, 1a010da0 <inv_check_magnetic_disturbance+0x1f0>
1a010d7e:	493a      	ldr	r1, [pc, #232]	; (1a010e68 <inv_check_magnetic_disturbance+0x2b8>)
1a010d80:	f8da 2098 	ldr.w	r2, [sl, #152]	; 0x98
1a010d84:	f8ca 1000 	str.w	r1, [sl]
1a010d88:	4938      	ldr	r1, [pc, #224]	; (1a010e6c <inv_check_magnetic_disturbance+0x2bc>)
1a010d8a:	2a01      	cmp	r2, #1
1a010d8c:	f8ca 1004 	str.w	r1, [sl, #4]
1a010d90:	d07c      	beq.n	1a010e8c <inv_check_magnetic_disturbance+0x2dc>
1a010d92:	4b37      	ldr	r3, [pc, #220]	; (1a010e70 <inv_check_magnetic_disturbance+0x2c0>)
1a010d94:	f8ca 3008 	str.w	r3, [sl, #8]
1a010d98:	4b36      	ldr	r3, [pc, #216]	; (1a010e74 <inv_check_magnetic_disturbance+0x2c4>)
1a010d9a:	f8ca 300c 	str.w	r3, [sl, #12]
1a010d9e:	e791      	b.n	1a010cc4 <inv_check_magnetic_disturbance+0x114>
1a010da0:	4628      	mov	r0, r5
1a010da2:	f7ff fe79 	bl	1a010a98 <Mag3ofNormalizedLong>
1a010da6:	2100      	movs	r1, #0
1a010da8:	4605      	mov	r5, r0
1a010daa:	f003 fbd9 	bl	1a014560 <__aeabi_fcmpeq>
1a010dae:	2800      	cmp	r0, #0
1a010db0:	d188      	bne.n	1a010cc4 <inv_check_magnetic_disturbance+0x114>
1a010db2:	4628      	mov	r0, r5
1a010db4:	4930      	ldr	r1, [pc, #192]	; (1a010e78 <inv_check_magnetic_disturbance+0x2c8>)
1a010db6:	f003 f935 	bl	1a014024 <__aeabi_fsub>
1a010dba:	4601      	mov	r1, r0
1a010dbc:	f003 fa3c 	bl	1a014238 <__aeabi_fmul>
1a010dc0:	f004 fd02 	bl	1a0157c8 <sqrtf>
1a010dc4:	492c      	ldr	r1, [pc, #176]	; (1a010e78 <inv_check_magnetic_disturbance+0x2c8>)
1a010dc6:	6060      	str	r0, [r4, #4]
1a010dc8:	4628      	mov	r0, r5
1a010dca:	f003 f92d 	bl	1a014028 <__addsf3>
1a010dce:	4601      	mov	r1, r0
1a010dd0:	f003 fa32 	bl	1a014238 <__aeabi_fmul>
1a010dd4:	f004 fcf8 	bl	1a0157c8 <sqrtf>
1a010dd8:	6020      	str	r0, [r4, #0]
1a010dda:	980b      	ldr	r0, [sp, #44]	; 0x2c
1a010ddc:	f003 f9d8 	bl	1a014190 <__aeabi_i2f>
1a010de0:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a010de4:	f003 fa28 	bl	1a014238 <__aeabi_fmul>
1a010de8:	4629      	mov	r1, r5
1a010dea:	f003 fad9 	bl	1a0143a0 <__aeabi_fdiv>
1a010dee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
1a010df2:	4605      	mov	r5, r0
1a010df4:	f003 fbdc 	bl	1a0145b0 <__aeabi_fcmpgt>
1a010df8:	2800      	cmp	r0, #0
1a010dfa:	d03f      	beq.n	1a010e7c <inv_check_magnetic_disturbance+0x2cc>
1a010dfc:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
1a010e00:	4628      	mov	r0, r5
1a010e02:	f004 fc8d 	bl	1a015720 <acosf>
1a010e06:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
1a010e0a:	f003 f90b 	bl	1a014024 <__aeabi_fsub>
1a010e0e:	60a0      	str	r0, [r4, #8]
1a010e10:	4628      	mov	r0, r5
1a010e12:	f004 fc85 	bl	1a015720 <acosf>
1a010e16:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
1a010e1a:	f003 f905 	bl	1a014028 <__addsf3>
1a010e1e:	2300      	movs	r3, #0
1a010e20:	60e0      	str	r0, [r4, #12]
1a010e22:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
1a010e26:	e74d      	b.n	1a010cc4 <inv_check_magnetic_disturbance+0x114>
1a010e28:	a806      	add	r0, sp, #24
1a010e2a:	f7f6 fd07 	bl	1a00783c <inv_get_gyro>
1a010e2e:	e6d8      	b.n	1a010be2 <inv_check_magnetic_disturbance+0x32>
1a010e30:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
1a010e34:	4631      	mov	r1, r6
1a010e36:	f7ff fdb7 	bl	1a0109a8 <inv_track_dip_angle>
1a010e3a:	e731      	b.n	1a010ca0 <inv_check_magnetic_disturbance+0xf0>
1a010e3c:	f104 0128 	add.w	r1, r4, #40	; 0x28
1a010e40:	2230      	movs	r2, #48	; 0x30
1a010e42:	f104 0018 	add.w	r0, r4, #24
1a010e46:	6623      	str	r3, [r4, #96]	; 0x60
1a010e48:	f003 fee2 	bl	1a014c10 <memmove>
1a010e4c:	f104 0048 	add.w	r0, r4, #72	; 0x48
1a010e50:	f104 0158 	add.w	r1, r4, #88	; 0x58
1a010e54:	f7f7 fe50 	bl	1a008af8 <inv_get_compass_correction>
1a010e58:	6f63      	ldr	r3, [r4, #116]	; 0x74
1a010e5a:	e6b9      	b.n	1a010bd0 <inv_check_magnetic_disturbance+0x20>
1a010e5c:	100872f0 	.word	0x100872f0
1a010e60:	10087348 	.word	0x10087348
1a010e64:	bf800000 	.word	0xbf800000
1a010e68:	42700000 	.word	0x42700000
1a010e6c:	41f00000 	.word	0x41f00000
1a010e70:	c2b40000 	.word	0xc2b40000
1a010e74:	42b40000 	.word	0x42b40000
1a010e78:	41200000 	.word	0x41200000
1a010e7c:	4628      	mov	r0, r5
1a010e7e:	490e      	ldr	r1, [pc, #56]	; (1a010eb8 <inv_check_magnetic_disturbance+0x308>)
1a010e80:	f003 fb78 	bl	1a014574 <__aeabi_fcmplt>
1a010e84:	2800      	cmp	r0, #0
1a010e86:	d0bb      	beq.n	1a010e00 <inv_check_magnetic_disturbance+0x250>
1a010e88:	4d0b      	ldr	r5, [pc, #44]	; (1a010eb8 <inv_check_magnetic_disturbance+0x308>)
1a010e8a:	e7b9      	b.n	1a010e00 <inv_check_magnetic_disturbance+0x250>
1a010e8c:	f8da 50a8 	ldr.w	r5, [sl, #168]	; 0xa8
1a010e90:	f8da b09c 	ldr.w	fp, [sl, #156]	; 0x9c
1a010e94:	9301      	str	r3, [sp, #4]
1a010e96:	4659      	mov	r1, fp
1a010e98:	4628      	mov	r0, r5
1a010e9a:	f003 f8c3 	bl	1a014024 <__aeabi_fsub>
1a010e9e:	4659      	mov	r1, fp
1a010ea0:	f8ca 0008 	str.w	r0, [sl, #8]
1a010ea4:	4628      	mov	r0, r5
1a010ea6:	f003 f8bf 	bl	1a014028 <__addsf3>
1a010eaa:	9b01      	ldr	r3, [sp, #4]
1a010eac:	f8ca 000c 	str.w	r0, [sl, #12]
1a010eb0:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
1a010eb4:	e706      	b.n	1a010cc4 <inv_check_magnetic_disturbance+0x114>
1a010eb6:	bf00      	nop
1a010eb8:	bf800000 	.word	0xbf800000

1a010ebc <inv_magnetic_disturbance_process>:
1a010ebc:	b570      	push	{r4, r5, r6, lr}
1a010ebe:	4604      	mov	r4, r0
1a010ec0:	b088      	sub	sp, #32
1a010ec2:	a801      	add	r0, sp, #4
1a010ec4:	f7f7 fe9c 	bl	1a008c00 <inv_get_gravity>
1a010ec8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
1a010ecc:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
1a010ed0:	1ac6      	subs	r6, r0, r3
1a010ed2:	a804      	add	r0, sp, #16
1a010ed4:	f7f7 fee4 	bl	1a008ca0 <inv_get_6axis_quaternion>
1a010ed8:	a904      	add	r1, sp, #16
1a010eda:	4605      	mov	r5, r0
1a010edc:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
1a010ee0:	ab01      	add	r3, sp, #4
1a010ee2:	4630      	mov	r0, r6
1a010ee4:	f7ff fe64 	bl	1a010bb0 <inv_check_magnetic_disturbance>
1a010ee8:	f7f6 f87e 	bl	1a006fe8 <inv_set_compass_disturbance>
1a010eec:	4628      	mov	r0, r5
1a010eee:	b008      	add	sp, #32
1a010ef0:	bd70      	pop	{r4, r5, r6, pc}
1a010ef2:	bf00      	nop

1a010ef4 <inv_get_magnetic_disturbance_state>:
1a010ef4:	4b01      	ldr	r3, [pc, #4]	; (1a010efc <inv_get_magnetic_disturbance_state+0x8>)
1a010ef6:	6f58      	ldr	r0, [r3, #116]	; 0x74
1a010ef8:	4770      	bx	lr
1a010efa:	bf00      	nop
1a010efc:	100872f0 	.word	0x100872f0

1a010f00 <inv_normalize_quat>:
1a010f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a010f04:	4604      	mov	r4, r0
1a010f06:	6800      	ldr	r0, [r0, #0]
1a010f08:	460d      	mov	r5, r1
1a010f0a:	f003 f941 	bl	1a014190 <__aeabi_i2f>
1a010f0e:	4606      	mov	r6, r0
1a010f10:	6860      	ldr	r0, [r4, #4]
1a010f12:	f003 f93d 	bl	1a014190 <__aeabi_i2f>
1a010f16:	4681      	mov	r9, r0
1a010f18:	68a0      	ldr	r0, [r4, #8]
1a010f1a:	f003 f939 	bl	1a014190 <__aeabi_i2f>
1a010f1e:	4680      	mov	r8, r0
1a010f20:	68e0      	ldr	r0, [r4, #12]
1a010f22:	f003 f935 	bl	1a014190 <__aeabi_i2f>
1a010f26:	4631      	mov	r1, r6
1a010f28:	4607      	mov	r7, r0
1a010f2a:	4630      	mov	r0, r6
1a010f2c:	f003 f984 	bl	1a014238 <__aeabi_fmul>
1a010f30:	4649      	mov	r1, r9
1a010f32:	4606      	mov	r6, r0
1a010f34:	4648      	mov	r0, r9
1a010f36:	f003 f97f 	bl	1a014238 <__aeabi_fmul>
1a010f3a:	4601      	mov	r1, r0
1a010f3c:	4630      	mov	r0, r6
1a010f3e:	f003 f873 	bl	1a014028 <__addsf3>
1a010f42:	4641      	mov	r1, r8
1a010f44:	4606      	mov	r6, r0
1a010f46:	4640      	mov	r0, r8
1a010f48:	f003 f976 	bl	1a014238 <__aeabi_fmul>
1a010f4c:	4601      	mov	r1, r0
1a010f4e:	4630      	mov	r0, r6
1a010f50:	f003 f86a 	bl	1a014028 <__addsf3>
1a010f54:	4639      	mov	r1, r7
1a010f56:	4606      	mov	r6, r0
1a010f58:	4638      	mov	r0, r7
1a010f5a:	f003 f96d 	bl	1a014238 <__aeabi_fmul>
1a010f5e:	4601      	mov	r1, r0
1a010f60:	4630      	mov	r0, r6
1a010f62:	f003 f861 	bl	1a014028 <__addsf3>
1a010f66:	2100      	movs	r1, #0
1a010f68:	4606      	mov	r6, r0
1a010f6a:	f003 fb0d 	bl	1a014588 <__aeabi_fcmple>
1a010f6e:	2800      	cmp	r0, #0
1a010f70:	d132      	bne.n	1a010fd8 <inv_normalize_quat+0xd8>
1a010f72:	4630      	mov	r0, r6
1a010f74:	f004 fc28 	bl	1a0157c8 <sqrtf>
1a010f78:	4601      	mov	r1, r0
1a010f7a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
1a010f7e:	f003 fa0f 	bl	1a0143a0 <__aeabi_fdiv>
1a010f82:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a010f86:	f003 f957 	bl	1a014238 <__aeabi_fmul>
1a010f8a:	4606      	mov	r6, r0
1a010f8c:	6820      	ldr	r0, [r4, #0]
1a010f8e:	f003 f8ff 	bl	1a014190 <__aeabi_i2f>
1a010f92:	4631      	mov	r1, r6
1a010f94:	f003 f950 	bl	1a014238 <__aeabi_fmul>
1a010f98:	f003 fb14 	bl	1a0145c4 <__aeabi_f2iz>
1a010f9c:	6028      	str	r0, [r5, #0]
1a010f9e:	6860      	ldr	r0, [r4, #4]
1a010fa0:	f003 f8f6 	bl	1a014190 <__aeabi_i2f>
1a010fa4:	4631      	mov	r1, r6
1a010fa6:	f003 f947 	bl	1a014238 <__aeabi_fmul>
1a010faa:	f003 fb0b 	bl	1a0145c4 <__aeabi_f2iz>
1a010fae:	6068      	str	r0, [r5, #4]
1a010fb0:	68a0      	ldr	r0, [r4, #8]
1a010fb2:	f003 f8ed 	bl	1a014190 <__aeabi_i2f>
1a010fb6:	4631      	mov	r1, r6
1a010fb8:	f003 f93e 	bl	1a014238 <__aeabi_fmul>
1a010fbc:	f003 fb02 	bl	1a0145c4 <__aeabi_f2iz>
1a010fc0:	60a8      	str	r0, [r5, #8]
1a010fc2:	68e0      	ldr	r0, [r4, #12]
1a010fc4:	f003 f8e4 	bl	1a014190 <__aeabi_i2f>
1a010fc8:	4631      	mov	r1, r6
1a010fca:	f003 f935 	bl	1a014238 <__aeabi_fmul>
1a010fce:	f003 faf9 	bl	1a0145c4 <__aeabi_f2iz>
1a010fd2:	60e8      	str	r0, [r5, #12]
1a010fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a010fd8:	2300      	movs	r3, #0
1a010fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a010fde:	e885 000c 	stmia.w	r5, {r2, r3}
1a010fe2:	60ab      	str	r3, [r5, #8]
1a010fe4:	60eb      	str	r3, [r5, #12]
1a010fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a010fea:	bf00      	nop

1a010fec <inv_start_quaternion>:
1a010fec:	b508      	push	{r3, lr}
1a010fee:	4b08      	ldr	r3, [pc, #32]	; (1a011010 <inv_start_quaternion+0x24>)
1a010ff0:	4908      	ldr	r1, [pc, #32]	; (1a011014 <inv_start_quaternion+0x28>)
1a010ff2:	6818      	ldr	r0, [r3, #0]
1a010ff4:	2208      	movs	r2, #8
1a010ff6:	f003 fd3f 	bl	1a014a78 <memcmp>
1a010ffa:	b108      	cbz	r0, 1a011000 <inv_start_quaternion+0x14>
1a010ffc:	2032      	movs	r0, #50	; 0x32
1a010ffe:	bd08      	pop	{r3, pc}
1a011000:	4805      	ldr	r0, [pc, #20]	; (1a011018 <inv_start_quaternion+0x2c>)
1a011002:	21c8      	movs	r1, #200	; 0xc8
1a011004:	2213      	movs	r2, #19
1a011006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a01100a:	f7f6 ba1d 	b.w	1a007448 <inv_register_data_cb>
1a01100e:	bf00      	nop
1a011010:	10086018 	.word	0x10086018
1a011014:	1a01a98c 	.word	0x1a01a98c
1a011018:	1a011895 	.word	0x1a011895
1a01101c:	ffffffff 	.word	0xffffffff

1a011020 <inv_generate_gyro_quaternion>:
1a011020:	b5f0      	push	{r4, r5, r6, r7, lr}
1a011022:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a011024:	065b      	lsls	r3, r3, #25
1a011026:	b089      	sub	sp, #36	; 0x24
1a011028:	4604      	mov	r4, r0
1a01102a:	d55b      	bpl.n	1a0110e4 <inv_generate_gyro_quaternion+0xc4>
1a01102c:	6986      	ldr	r6, [r0, #24]
1a01102e:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a011032:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
1a011036:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
1a01103a:	429a      	cmp	r2, r3
1a01103c:	dd54      	ble.n	1a0110e8 <inv_generate_gyro_quaternion+0xc8>
1a01103e:	f5b2 0fc8 	cmp.w	r2, #6553600	; 0x640000
1a011042:	dd70      	ble.n	1a011126 <inv_generate_gyro_quaternion+0x106>
1a011044:	4d3c      	ldr	r5, [pc, #240]	; (1a011138 <inv_generate_gyro_quaternion+0x118>)
1a011046:	2303      	movs	r3, #3
1a011048:	63ab      	str	r3, [r5, #56]	; 0x38
1a01104a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a01104c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
1a01104e:	4f3a      	ldr	r7, [pc, #232]	; (1a011138 <inv_generate_gyro_quaternion+0x118>)
1a011050:	429a      	cmp	r2, r3
1a011052:	d01c      	beq.n	1a01108e <inv_generate_gyro_quaternion+0x6e>
1a011054:	4618      	mov	r0, r3
1a011056:	637b      	str	r3, [r7, #52]	; 0x34
1a011058:	f003 f89a 	bl	1a014190 <__aeabi_i2f>
1a01105c:	4937      	ldr	r1, [pc, #220]	; (1a01113c <inv_generate_gyro_quaternion+0x11c>)
1a01105e:	f003 f99f 	bl	1a0143a0 <__aeabi_fdiv>
1a011062:	f04f 419c 	mov.w	r1, #1308622848	; 0x4e000000
1a011066:	f003 f8e7 	bl	1a014238 <__aeabi_fmul>
1a01106a:	f002 fc71 	bl	1a013950 <__aeabi_f2d>
1a01106e:	a330      	add	r3, pc, #192	; (adr r3, 1a011130 <inv_generate_gyro_quaternion+0x110>)
1a011070:	e9d3 2300 	ldrd	r2, r3, [r3]
1a011074:	f002 fcc0 	bl	1a0139f8 <__aeabi_dmul>
1a011078:	2200      	movs	r2, #0
1a01107a:	4b31      	ldr	r3, [pc, #196]	; (1a011140 <inv_generate_gyro_quaternion+0x120>)
1a01107c:	f002 fcbc 	bl	1a0139f8 <__aeabi_dmul>
1a011080:	2200      	movs	r2, #0
1a011082:	4b30      	ldr	r3, [pc, #192]	; (1a011144 <inv_generate_gyro_quaternion+0x124>)
1a011084:	f002 fde2 	bl	1a013c4c <__aeabi_ddiv>
1a011088:	f002 ff50 	bl	1a013f2c <__aeabi_d2iz>
1a01108c:	6338      	str	r0, [r7, #48]	; 0x30
1a01108e:	2300      	movs	r3, #0
1a011090:	6b29      	ldr	r1, [r5, #48]	; 0x30
1a011092:	9300      	str	r3, [sp, #0]
1a011094:	4630      	mov	r0, r6
1a011096:	f7f6 fe49 	bl	1a007d2c <inv_q30_mult>
1a01109a:	6b29      	ldr	r1, [r5, #48]	; 0x30
1a01109c:	9001      	str	r0, [sp, #4]
1a01109e:	69e0      	ldr	r0, [r4, #28]
1a0110a0:	f7f6 fe44 	bl	1a007d2c <inv_q30_mult>
1a0110a4:	6b29      	ldr	r1, [r5, #48]	; 0x30
1a0110a6:	9002      	str	r0, [sp, #8]
1a0110a8:	6a20      	ldr	r0, [r4, #32]
1a0110aa:	f7f6 fe3f 	bl	1a007d2c <inv_q30_mult>
1a0110ae:	4669      	mov	r1, sp
1a0110b0:	9003      	str	r0, [sp, #12]
1a0110b2:	aa04      	add	r2, sp, #16
1a0110b4:	4820      	ldr	r0, [pc, #128]	; (1a011138 <inv_generate_gyro_quaternion+0x118>)
1a0110b6:	f7f6 fe5f 	bl	1a007d78 <inv_q_mult>
1a0110ba:	9b04      	ldr	r3, [sp, #16]
1a0110bc:	481e      	ldr	r0, [pc, #120]	; (1a011138 <inv_generate_gyro_quaternion+0x118>)
1a0110be:	019f      	lsls	r7, r3, #6
1a0110c0:	9b05      	ldr	r3, [sp, #20]
1a0110c2:	9704      	str	r7, [sp, #16]
1a0110c4:	019e      	lsls	r6, r3, #6
1a0110c6:	9b06      	ldr	r3, [sp, #24]
1a0110c8:	9605      	str	r6, [sp, #20]
1a0110ca:	019d      	lsls	r5, r3, #6
1a0110cc:	9b07      	ldr	r3, [sp, #28]
1a0110ce:	9506      	str	r5, [sp, #24]
1a0110d0:	019c      	lsls	r4, r3, #6
1a0110d2:	a904      	add	r1, sp, #16
1a0110d4:	4602      	mov	r2, r0
1a0110d6:	9407      	str	r4, [sp, #28]
1a0110d8:	f7f6 ff1a 	bl	1a007f10 <inv_q_add>
1a0110dc:	4816      	ldr	r0, [pc, #88]	; (1a011138 <inv_generate_gyro_quaternion+0x118>)
1a0110de:	4601      	mov	r1, r0
1a0110e0:	f7ff ff0e 	bl	1a010f00 <inv_normalize_quat>
1a0110e4:	b009      	add	sp, #36	; 0x24
1a0110e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0110e8:	69c2      	ldr	r2, [r0, #28]
1a0110ea:	2a00      	cmp	r2, #0
1a0110ec:	bfb8      	it	lt
1a0110ee:	4252      	neglt	r2, r2
1a0110f0:	429a      	cmp	r2, r3
1a0110f2:	dd0d      	ble.n	1a011110 <inv_generate_gyro_quaternion+0xf0>
1a0110f4:	f5b2 0fc8 	cmp.w	r2, #6553600	; 0x640000
1a0110f8:	dca4      	bgt.n	1a011044 <inv_generate_gyro_quaternion+0x24>
1a0110fa:	6a22      	ldr	r2, [r4, #32]
1a0110fc:	2a00      	cmp	r2, #0
1a0110fe:	bfb8      	it	lt
1a011100:	4252      	neglt	r2, r2
1a011102:	f5b2 0fc8 	cmp.w	r2, #6553600	; 0x640000
1a011106:	dc9d      	bgt.n	1a011044 <inv_generate_gyro_quaternion+0x24>
1a011108:	4d0b      	ldr	r5, [pc, #44]	; (1a011138 <inv_generate_gyro_quaternion+0x118>)
1a01110a:	2302      	movs	r3, #2
1a01110c:	63ab      	str	r3, [r5, #56]	; 0x38
1a01110e:	e79c      	b.n	1a01104a <inv_generate_gyro_quaternion+0x2a>
1a011110:	6a02      	ldr	r2, [r0, #32]
1a011112:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
1a011116:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
1a01111a:	4299      	cmp	r1, r3
1a01111c:	dcee      	bgt.n	1a0110fc <inv_generate_gyro_quaternion+0xdc>
1a01111e:	4b06      	ldr	r3, [pc, #24]	; (1a011138 <inv_generate_gyro_quaternion+0x118>)
1a011120:	2200      	movs	r2, #0
1a011122:	639a      	str	r2, [r3, #56]	; 0x38
1a011124:	e7de      	b.n	1a0110e4 <inv_generate_gyro_quaternion+0xc4>
1a011126:	69c2      	ldr	r2, [r0, #28]
1a011128:	2a00      	cmp	r2, #0
1a01112a:	bfb8      	it	lt
1a01112c:	4252      	neglt	r2, r2
1a01112e:	e7e1      	b.n	1a0110f4 <inv_generate_gyro_quaternion+0xd4>
1a011130:	54442d18 	.word	0x54442d18
1a011134:	400921fb 	.word	0x400921fb
1a011138:	100873a8 	.word	0x100873a8
1a01113c:	49742400 	.word	0x49742400
1a011140:	40700000 	.word	0x40700000
1a011144:	40668000 	.word	0x40668000

1a011148 <inv_generate_accel_gyro_quaternion>:
1a011148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a01114c:	6f43      	ldr	r3, [r0, #116]	; 0x74
1a01114e:	f003 0350 	and.w	r3, r3, #80	; 0x50
1a011152:	2b40      	cmp	r3, #64	; 0x40
1a011154:	b0ab      	sub	sp, #172	; 0xac
1a011156:	4606      	mov	r6, r0
1a011158:	f000 81e8 	beq.w	1a01152c <inv_generate_accel_gyro_quaternion+0x3e4>
1a01115c:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
1a011160:	4f8d      	ldr	r7, [pc, #564]	; (1a011398 <inv_generate_accel_gyro_quaternion+0x250>)
1a011162:	f001 0350 	and.w	r3, r1, #80	; 0x50
1a011166:	2b40      	cmp	r3, #64	; 0x40
1a011168:	f000 829b 	beq.w	1a0116a2 <inv_generate_accel_gyro_quaternion+0x55a>
1a01116c:	05cb      	lsls	r3, r1, #23
1a01116e:	f140 810e 	bpl.w	1a01138e <inv_generate_accel_gyro_quaternion+0x246>
1a011172:	0648      	lsls	r0, r1, #25
1a011174:	f140 80a3 	bpl.w	1a0112be <inv_generate_accel_gyro_quaternion+0x176>
1a011178:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
1a01117c:	683a      	ldr	r2, [r7, #0]
1a01117e:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
1a011182:	4c85      	ldr	r4, [pc, #532]	; (1a011398 <inv_generate_accel_gyro_quaternion+0x250>)
1a011184:	1a82      	subs	r2, r0, r2
1a011186:	4885      	ldr	r0, [pc, #532]	; (1a01139c <inv_generate_accel_gyro_quaternion+0x254>)
1a011188:	fb00 f303 	mul.w	r3, r0, r3
1a01118c:	429a      	cmp	r2, r3
1a01118e:	f300 81b6 	bgt.w	1a0114fe <inv_generate_accel_gyro_quaternion+0x3b6>
1a011192:	2302      	movs	r3, #2
1a011194:	f411 7100 	ands.w	r1, r1, #512	; 0x200
1a011198:	63a3      	str	r3, [r4, #56]	; 0x38
1a01119a:	f040 81b6 	bne.w	1a01150a <inv_generate_accel_gyro_quaternion+0x3c2>
1a01119e:	ac03      	add	r4, sp, #12
1a0111a0:	4d7d      	ldr	r5, [pc, #500]	; (1a011398 <inv_generate_accel_gyro_quaternion+0x250>)
1a0111a2:	4620      	mov	r0, r4
1a0111a4:	f7f5 ffea 	bl	1a00717c <inv_get_gyro_bias>
1a0111a8:	4620      	mov	r0, r4
1a0111aa:	f105 013c 	add.w	r1, r5, #60	; 0x3c
1a0111ae:	220c      	movs	r2, #12
1a0111b0:	f003 fc62 	bl	1a014a78 <memcmp>
1a0111b4:	b928      	cbnz	r0, 1a0111c2 <inv_generate_accel_gyro_quaternion+0x7a>
1a0111b6:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
1a0111ba:	6daa      	ldr	r2, [r5, #88]	; 0x58
1a0111bc:	4293      	cmp	r3, r2
1a0111be:	f000 8341 	beq.w	1a011844 <inv_generate_accel_gyro_quaternion+0x6fc>
1a0111c2:	ad0e      	add	r5, sp, #56	; 0x38
1a0111c4:	4622      	mov	r2, r4
1a0111c6:	462b      	mov	r3, r5
1a0111c8:	6a71      	ldr	r1, [r6, #36]	; 0x24
1a0111ca:	8830      	ldrh	r0, [r6, #0]
1a0111cc:	f7f7 fb54 	bl	1a008878 <inv_convert_to_body_with_scale>
1a0111d0:	980e      	ldr	r0, [sp, #56]	; 0x38
1a0111d2:	f002 ffdd 	bl	1a014190 <__aeabi_i2f>
1a0111d6:	4680      	mov	r8, r0
1a0111d8:	980f      	ldr	r0, [sp, #60]	; 0x3c
1a0111da:	f002 ffd9 	bl	1a014190 <__aeabi_i2f>
1a0111de:	4682      	mov	sl, r0
1a0111e0:	9810      	ldr	r0, [sp, #64]	; 0x40
1a0111e2:	f002 ffd5 	bl	1a014190 <__aeabi_i2f>
1a0111e6:	4641      	mov	r1, r8
1a0111e8:	4681      	mov	r9, r0
1a0111ea:	4640      	mov	r0, r8
1a0111ec:	f003 f824 	bl	1a014238 <__aeabi_fmul>
1a0111f0:	4651      	mov	r1, sl
1a0111f2:	4680      	mov	r8, r0
1a0111f4:	4650      	mov	r0, sl
1a0111f6:	f003 f81f 	bl	1a014238 <__aeabi_fmul>
1a0111fa:	4601      	mov	r1, r0
1a0111fc:	4640      	mov	r0, r8
1a0111fe:	f002 ff13 	bl	1a014028 <__addsf3>
1a011202:	4649      	mov	r1, r9
1a011204:	4680      	mov	r8, r0
1a011206:	4648      	mov	r0, r9
1a011208:	f003 f816 	bl	1a014238 <__aeabi_fmul>
1a01120c:	4601      	mov	r1, r0
1a01120e:	4640      	mov	r0, r8
1a011210:	f002 ff0a 	bl	1a014028 <__addsf3>
1a011214:	f004 fad8 	bl	1a0157c8 <sqrtf>
1a011218:	4961      	ldr	r1, [pc, #388]	; (1a0113a0 <inv_generate_accel_gyro_quaternion+0x258>)
1a01121a:	f8d6 9128 	ldr.w	r9, [r6, #296]	; 0x128
1a01121e:	4680      	mov	r8, r0
1a011220:	f003 f80a 	bl	1a014238 <__aeabi_fmul>
1a011224:	495f      	ldr	r1, [pc, #380]	; (1a0113a4 <inv_generate_accel_gyro_quaternion+0x25c>)
1a011226:	f003 f8bb 	bl	1a0143a0 <__aeabi_fdiv>
1a01122a:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a01122e:	f003 f803 	bl	1a014238 <__aeabi_fmul>
1a011232:	4682      	mov	sl, r0
1a011234:	4648      	mov	r0, r9
1a011236:	f002 ffab 	bl	1a014190 <__aeabi_i2f>
1a01123a:	4601      	mov	r1, r0
1a01123c:	4650      	mov	r0, sl
1a01123e:	f002 fffb 	bl	1a014238 <__aeabi_fmul>
1a011242:	4959      	ldr	r1, [pc, #356]	; (1a0113a8 <inv_generate_accel_gyro_quaternion+0x260>)
1a011244:	f003 f8ac 	bl	1a0143a0 <__aeabi_fdiv>
1a011248:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
1a01124c:	f002 fff4 	bl	1a014238 <__aeabi_fmul>
1a011250:	4682      	mov	sl, r0
1a011252:	f004 f849 	bl	1a0152e8 <cosf>
1a011256:	4683      	mov	fp, r0
1a011258:	4650      	mov	r0, sl
1a01125a:	f004 f8e9 	bl	1a015430 <sinf>
1a01125e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
1a011262:	4682      	mov	sl, r0
1a011264:	4640      	mov	r0, r8
1a011266:	f003 f985 	bl	1a014574 <__aeabi_fcmplt>
1a01126a:	2800      	cmp	r0, #0
1a01126c:	f000 823c 	beq.w	1a0116e8 <inv_generate_accel_gyro_quaternion+0x5a0>
1a011270:	2300      	movs	r3, #0
1a011272:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a011276:	64ba      	str	r2, [r7, #72]	; 0x48
1a011278:	64fb      	str	r3, [r7, #76]	; 0x4c
1a01127a:	653b      	str	r3, [r7, #80]	; 0x50
1a01127c:	657b      	str	r3, [r7, #84]	; 0x54
1a01127e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
1a011282:	4b4a      	ldr	r3, [pc, #296]	; (1a0113ac <inv_generate_accel_gyro_quaternion+0x264>)
1a011284:	f8c7 9058 	str.w	r9, [r7, #88]	; 0x58
1a011288:	e883 0007 	stmia.w	r3, {r0, r1, r2}
1a01128c:	f506 7488 	add.w	r4, r6, #272	; 0x110
1a011290:	4620      	mov	r0, r4
1a011292:	462a      	mov	r2, r5
1a011294:	4946      	ldr	r1, [pc, #280]	; (1a0113b0 <inv_generate_accel_gyro_quaternion+0x268>)
1a011296:	f7f6 fd6f 	bl	1a007d78 <inv_q_mult>
1a01129a:	aa0a      	add	r2, sp, #40	; 0x28
1a01129c:	4629      	mov	r1, r5
1a01129e:	4845      	ldr	r0, [pc, #276]	; (1a0113b4 <inv_generate_accel_gyro_quaternion+0x26c>)
1a0112a0:	f7f6 fd6a 	bl	1a007d78 <inv_q_mult>
1a0112a4:	4620      	mov	r0, r4
1a0112a6:	4943      	ldr	r1, [pc, #268]	; (1a0113b4 <inv_generate_accel_gyro_quaternion+0x26c>)
1a0112a8:	f7f6 fe64 	bl	1a007f74 <inv_q_invert>
1a0112ac:	a90a      	add	r1, sp, #40	; 0x28
1a0112ae:	483a      	ldr	r0, [pc, #232]	; (1a011398 <inv_generate_accel_gyro_quaternion+0x250>)
1a0112b0:	462a      	mov	r2, r5
1a0112b2:	f7f6 fd61 	bl	1a007d78 <inv_q_mult>
1a0112b6:	4628      	mov	r0, r5
1a0112b8:	4937      	ldr	r1, [pc, #220]	; (1a011398 <inv_generate_accel_gyro_quaternion+0x250>)
1a0112ba:	f7ff fe21 	bl	1a010f00 <inv_normalize_quat>
1a0112be:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1a011398 <inv_generate_accel_gyro_quaternion+0x250>
1a0112c2:	4641      	mov	r1, r8
1a0112c4:	f108 0020 	add.w	r0, r8, #32
1a0112c8:	f108 0210 	add.w	r2, r8, #16
1a0112cc:	f7f6 fd54 	bl	1a007d78 <inv_q_mult>
1a0112d0:	6f73      	ldr	r3, [r6, #116]	; 0x74
1a0112d2:	0659      	lsls	r1, r3, #25
1a0112d4:	d557      	bpl.n	1a011386 <inv_generate_accel_gyro_quaternion+0x23e>
1a0112d6:	f8d6 2120 	ldr.w	r2, [r6, #288]	; 0x120
1a0112da:	6b33      	ldr	r3, [r6, #48]	; 0x30
1a0112dc:	4313      	orrs	r3, r2
1a0112de:	05da      	lsls	r2, r3, #23
1a0112e0:	d56e      	bpl.n	1a0113c0 <inv_generate_accel_gyro_quaternion+0x278>
1a0112e2:	f108 0010 	add.w	r0, r8, #16
1a0112e6:	f106 015c 	add.w	r1, r6, #92	; 0x5c
1a0112ea:	aa03      	add	r2, sp, #12
1a0112ec:	f7f6 fe66 	bl	1a007fbc <inv_q_rotate>
1a0112f0:	6e32      	ldr	r2, [r6, #96]	; 0x60
1a0112f2:	6df0      	ldr	r0, [r6, #92]	; 0x5c
1a0112f4:	6e71      	ldr	r1, [r6, #100]	; 0x64
1a0112f6:	fb82 2302 	smull	r2, r3, r2, r2
1a0112fa:	fbc0 2300 	smlal	r2, r3, r0, r0
1a0112fe:	fbc1 2301 	smlal	r2, r3, r1, r1
1a011302:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
1a011306:	2502      	movs	r5, #2
1a011308:	4294      	cmp	r4, r2
1a01130a:	eb75 0003 	sbcs.w	r0, r5, r3
1a01130e:	f2c0 81d5 	blt.w	1a0116bc <inv_generate_accel_gyro_quaternion+0x574>
1a011312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a011314:	2b04      	cmp	r3, #4
1a011316:	f000 81e5 	beq.w	1a0116e4 <inv_generate_accel_gyro_quaternion+0x59c>
1a01131a:	1e9a      	subs	r2, r3, #2
1a01131c:	2a01      	cmp	r2, #1
1a01131e:	f240 80fa 	bls.w	1a011516 <inv_generate_accel_gyro_quaternion+0x3ce>
1a011322:	2b01      	cmp	r3, #1
1a011324:	f000 827a 	beq.w	1a01181c <inv_generate_accel_gyro_quaternion+0x6d4>
1a011328:	2501      	movs	r5, #1
1a01132a:	2b03      	cmp	r3, #3
1a01132c:	4b22      	ldr	r3, [pc, #136]	; (1a0113b8 <inv_generate_accel_gyro_quaternion+0x270>)
1a01132e:	bf18      	it	ne
1a011330:	00ad      	lslne	r5, r5, #2
1a011332:	fb03 f505 	mul.w	r5, r3, r5
1a011336:	9804      	ldr	r0, [sp, #16]
1a011338:	2400      	movs	r4, #0
1a01133a:	4629      	mov	r1, r5
1a01133c:	0280      	lsls	r0, r0, #10
1a01133e:	940a      	str	r4, [sp, #40]	; 0x28
1a011340:	f7f6 fcf4 	bl	1a007d2c <inv_q30_mult>
1a011344:	900b      	str	r0, [sp, #44]	; 0x2c
1a011346:	9803      	ldr	r0, [sp, #12]
1a011348:	4240      	negs	r0, r0
1a01134a:	4629      	mov	r1, r5
1a01134c:	0280      	lsls	r0, r0, #10
1a01134e:	f7f6 fced 	bl	1a007d2c <inv_q30_mult>
1a011352:	aa0e      	add	r2, sp, #56	; 0x38
1a011354:	900c      	str	r0, [sp, #48]	; 0x30
1a011356:	4919      	ldr	r1, [pc, #100]	; (1a0113bc <inv_generate_accel_gyro_quaternion+0x274>)
1a011358:	940d      	str	r4, [sp, #52]	; 0x34
1a01135a:	a80a      	add	r0, sp, #40	; 0x28
1a01135c:	f7f6 fd0c 	bl	1a007d78 <inv_q_mult>
1a011360:	4816      	ldr	r0, [pc, #88]	; (1a0113bc <inv_generate_accel_gyro_quaternion+0x274>)
1a011362:	a90e      	add	r1, sp, #56	; 0x38
1a011364:	4602      	mov	r2, r0
1a011366:	f7f6 fdd3 	bl	1a007f10 <inv_q_add>
1a01136a:	4814      	ldr	r0, [pc, #80]	; (1a0113bc <inv_generate_accel_gyro_quaternion+0x274>)
1a01136c:	4601      	mov	r1, r0
1a01136e:	f7ff fdc7 	bl	1a010f00 <inv_normalize_quat>
1a011372:	a906      	add	r1, sp, #24
1a011374:	4808      	ldr	r0, [pc, #32]	; (1a011398 <inv_generate_accel_gyro_quaternion+0x250>)
1a011376:	f7f6 fdfd 	bl	1a007f74 <inv_q_invert>
1a01137a:	4810      	ldr	r0, [pc, #64]	; (1a0113bc <inv_generate_accel_gyro_quaternion+0x274>)
1a01137c:	a906      	add	r1, sp, #24
1a01137e:	f100 0210 	add.w	r2, r0, #16
1a011382:	f7f6 fcf9 	bl	1a007d78 <inv_q_mult>
1a011386:	2000      	movs	r0, #0
1a011388:	b02b      	add	sp, #172	; 0xac
1a01138a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a01138e:	4630      	mov	r0, r6
1a011390:	f7ff fe46 	bl	1a011020 <inv_generate_gyro_quaternion>
1a011394:	e793      	b.n	1a0112be <inv_generate_accel_gyro_quaternion+0x176>
1a011396:	bf00      	nop
1a011398:	100873a8 	.word	0x100873a8
1a01139c:	001c9871 	.word	0x001c9871
1a0113a0:	40490fdb 	.word	0x40490fdb
1a0113a4:	43340000 	.word	0x43340000
1a0113a8:	49742400 	.word	0x49742400
1a0113ac:	100873e4 	.word	0x100873e4
1a0113b0:	100873f0 	.word	0x100873f0
1a0113b4:	10087404 	.word	0x10087404
1a0113b8:	00c49ba6 	.word	0x00c49ba6
1a0113bc:	100873b8 	.word	0x100873b8
1a0113c0:	6df0      	ldr	r0, [r6, #92]	; 0x5c
1a0113c2:	f8d6 906c 	ldr.w	r9, [r6, #108]	; 0x6c
1a0113c6:	f002 fee3 	bl	1a014190 <__aeabi_i2f>
1a0113ca:	4604      	mov	r4, r0
1a0113cc:	6e30      	ldr	r0, [r6, #96]	; 0x60
1a0113ce:	f002 fedf 	bl	1a014190 <__aeabi_i2f>
1a0113d2:	4682      	mov	sl, r0
1a0113d4:	6e70      	ldr	r0, [r6, #100]	; 0x64
1a0113d6:	f002 fedb 	bl	1a014190 <__aeabi_i2f>
1a0113da:	4621      	mov	r1, r4
1a0113dc:	4605      	mov	r5, r0
1a0113de:	4620      	mov	r0, r4
1a0113e0:	f002 ff2a 	bl	1a014238 <__aeabi_fmul>
1a0113e4:	4651      	mov	r1, sl
1a0113e6:	4604      	mov	r4, r0
1a0113e8:	4650      	mov	r0, sl
1a0113ea:	f002 ff25 	bl	1a014238 <__aeabi_fmul>
1a0113ee:	4601      	mov	r1, r0
1a0113f0:	4620      	mov	r0, r4
1a0113f2:	f002 fe19 	bl	1a014028 <__addsf3>
1a0113f6:	4629      	mov	r1, r5
1a0113f8:	4604      	mov	r4, r0
1a0113fa:	4628      	mov	r0, r5
1a0113fc:	f002 ff1c 	bl	1a014238 <__aeabi_fmul>
1a011400:	4601      	mov	r1, r0
1a011402:	4620      	mov	r0, r4
1a011404:	f002 fe10 	bl	1a014028 <__addsf3>
1a011408:	f004 f9de 	bl	1a0157c8 <sqrtf>
1a01140c:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
1a011410:	4604      	mov	r4, r0
1a011412:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a011416:	f003 f8cb 	bl	1a0145b0 <__aeabi_fcmpgt>
1a01141a:	2800      	cmp	r0, #0
1a01141c:	d0a9      	beq.n	1a011372 <inv_generate_accel_gyro_quaternion+0x22a>
1a01141e:	f8d8 0010 	ldr.w	r0, [r8, #16]
1a011422:	f002 feb5 	bl	1a014190 <__aeabi_i2f>
1a011426:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a01142a:	f002 ff05 	bl	1a014238 <__aeabi_fmul>
1a01142e:	9026      	str	r0, [sp, #152]	; 0x98
1a011430:	f8d8 0014 	ldr.w	r0, [r8, #20]
1a011434:	f002 feac 	bl	1a014190 <__aeabi_i2f>
1a011438:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a01143c:	f002 fefc 	bl	1a014238 <__aeabi_fmul>
1a011440:	9027      	str	r0, [sp, #156]	; 0x9c
1a011442:	f8d8 0018 	ldr.w	r0, [r8, #24]
1a011446:	f002 fea3 	bl	1a014190 <__aeabi_i2f>
1a01144a:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a01144e:	f002 fef3 	bl	1a014238 <__aeabi_fmul>
1a011452:	9028      	str	r0, [sp, #160]	; 0xa0
1a011454:	f8d8 001c 	ldr.w	r0, [r8, #28]
1a011458:	f002 fe9a 	bl	1a014190 <__aeabi_i2f>
1a01145c:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a011460:	f002 feea 	bl	1a014238 <__aeabi_fmul>
1a011464:	2300      	movs	r3, #0
1a011466:	9029      	str	r0, [sp, #164]	; 0xa4
1a011468:	6df0      	ldr	r0, [r6, #92]	; 0x5c
1a01146a:	9322      	str	r3, [sp, #136]	; 0x88
1a01146c:	f002 fe90 	bl	1a014190 <__aeabi_i2f>
1a011470:	4621      	mov	r1, r4
1a011472:	f002 ff95 	bl	1a0143a0 <__aeabi_fdiv>
1a011476:	9023      	str	r0, [sp, #140]	; 0x8c
1a011478:	6e30      	ldr	r0, [r6, #96]	; 0x60
1a01147a:	f002 fe89 	bl	1a014190 <__aeabi_i2f>
1a01147e:	4621      	mov	r1, r4
1a011480:	f002 ff8e 	bl	1a0143a0 <__aeabi_fdiv>
1a011484:	9024      	str	r0, [sp, #144]	; 0x90
1a011486:	6e70      	ldr	r0, [r6, #100]	; 0x64
1a011488:	f002 fe82 	bl	1a014190 <__aeabi_i2f>
1a01148c:	4621      	mov	r1, r4
1a01148e:	f002 ff87 	bl	1a0143a0 <__aeabi_fdiv>
1a011492:	aa12      	add	r2, sp, #72	; 0x48
1a011494:	9025      	str	r0, [sp, #148]	; 0x94
1a011496:	a922      	add	r1, sp, #136	; 0x88
1a011498:	a826      	add	r0, sp, #152	; 0x98
1a01149a:	f7f6 fdc3 	bl	1a008024 <inv_q_multf>
1a01149e:	a826      	add	r0, sp, #152	; 0x98
1a0114a0:	a91a      	add	r1, sp, #104	; 0x68
1a0114a2:	f7f7 f85f 	bl	1a008564 <inv_q_invertf>
1a0114a6:	aa16      	add	r2, sp, #88	; 0x58
1a0114a8:	a812      	add	r0, sp, #72	; 0x48
1a0114aa:	a91a      	add	r1, sp, #104	; 0x68
1a0114ac:	f7f6 fdba 	bl	1a008024 <inv_q_multf>
1a0114b0:	9d18      	ldr	r5, [sp, #96]	; 0x60
1a0114b2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
1a0114b4:	4629      	mov	r1, r5
1a0114b6:	4628      	mov	r0, r5
1a0114b8:	f002 febe 	bl	1a014238 <__aeabi_fmul>
1a0114bc:	4621      	mov	r1, r4
1a0114be:	4606      	mov	r6, r0
1a0114c0:	4620      	mov	r0, r4
1a0114c2:	f002 feb9 	bl	1a014238 <__aeabi_fmul>
1a0114c6:	4601      	mov	r1, r0
1a0114c8:	4630      	mov	r0, r6
1a0114ca:	f002 fdad 	bl	1a014028 <__addsf3>
1a0114ce:	49a2      	ldr	r1, [pc, #648]	; (1a011758 <inv_generate_accel_gyro_quaternion+0x610>)
1a0114d0:	4606      	mov	r6, r0
1a0114d2:	f003 f84f 	bl	1a014574 <__aeabi_fcmplt>
1a0114d6:	2800      	cmp	r0, #0
1a0114d8:	f040 814c 	bne.w	1a011774 <inv_generate_accel_gyro_quaternion+0x62c>
1a0114dc:	4630      	mov	r0, r6
1a0114de:	499f      	ldr	r1, [pc, #636]	; (1a01175c <inv_generate_accel_gyro_quaternion+0x614>)
1a0114e0:	f003 f848 	bl	1a014574 <__aeabi_fcmplt>
1a0114e4:	2800      	cmp	r0, #0
1a0114e6:	f040 81af 	bne.w	1a011848 <inv_generate_accel_gyro_quaternion+0x700>
1a0114ea:	4630      	mov	r0, r6
1a0114ec:	499c      	ldr	r1, [pc, #624]	; (1a011760 <inv_generate_accel_gyro_quaternion+0x618>)
1a0114ee:	f003 f841 	bl	1a014574 <__aeabi_fcmplt>
1a0114f2:	2800      	cmp	r0, #0
1a0114f4:	f040 8186 	bne.w	1a011804 <inv_generate_accel_gyro_quaternion+0x6bc>
1a0114f8:	f8df 8274 	ldr.w	r8, [pc, #628]	; 1a011770 <inv_generate_accel_gyro_quaternion+0x628>
1a0114fc:	e13c      	b.n	1a011778 <inv_generate_accel_gyro_quaternion+0x630>
1a0114fe:	2303      	movs	r3, #3
1a011500:	f411 7100 	ands.w	r1, r1, #512	; 0x200
1a011504:	63a3      	str	r3, [r4, #56]	; 0x38
1a011506:	f43f ae4a 	beq.w	1a01119e <inv_generate_accel_gyro_quaternion+0x56>
1a01150a:	f506 7088 	add.w	r0, r6, #272	; 0x110
1a01150e:	4995      	ldr	r1, [pc, #596]	; (1a011764 <inv_generate_accel_gyro_quaternion+0x61c>)
1a011510:	f7ff fcf6 	bl	1a010f00 <inv_normalize_quat>
1a011514:	e6d3      	b.n	1a0112be <inv_generate_accel_gyro_quaternion+0x176>
1a011516:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
1a011518:	4d93      	ldr	r5, [pc, #588]	; (1a011768 <inv_generate_accel_gyro_quaternion+0x620>)
1a01151a:	17d1      	asrs	r1, r2, #31
1a01151c:	fb85 0502 	smull	r0, r5, r5, r2
1a011520:	ebc1 25e5 	rsb	r5, r1, r5, asr #11
1a011524:	2d01      	cmp	r5, #1
1a011526:	bfb8      	it	lt
1a011528:	2501      	movlt	r5, #1
1a01152a:	e6fe      	b.n	1a01132a <inv_generate_accel_gyro_quaternion+0x1e2>
1a01152c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
1a01152e:	f002 fe2f 	bl	1a014190 <__aeabi_i2f>
1a011532:	4604      	mov	r4, r0
1a011534:	6e30      	ldr	r0, [r6, #96]	; 0x60
1a011536:	f002 fe2b 	bl	1a014190 <__aeabi_i2f>
1a01153a:	4607      	mov	r7, r0
1a01153c:	6e70      	ldr	r0, [r6, #100]	; 0x64
1a01153e:	f002 fe27 	bl	1a014190 <__aeabi_i2f>
1a011542:	4621      	mov	r1, r4
1a011544:	4605      	mov	r5, r0
1a011546:	4620      	mov	r0, r4
1a011548:	f002 fe76 	bl	1a014238 <__aeabi_fmul>
1a01154c:	4639      	mov	r1, r7
1a01154e:	4604      	mov	r4, r0
1a011550:	4638      	mov	r0, r7
1a011552:	f002 fe71 	bl	1a014238 <__aeabi_fmul>
1a011556:	4601      	mov	r1, r0
1a011558:	4620      	mov	r0, r4
1a01155a:	f002 fd65 	bl	1a014028 <__addsf3>
1a01155e:	4629      	mov	r1, r5
1a011560:	4604      	mov	r4, r0
1a011562:	4628      	mov	r0, r5
1a011564:	f002 fe68 	bl	1a014238 <__aeabi_fmul>
1a011568:	4601      	mov	r1, r0
1a01156a:	4620      	mov	r0, r4
1a01156c:	f002 fd5c 	bl	1a014028 <__addsf3>
1a011570:	f004 f92a 	bl	1a0157c8 <sqrtf>
1a011574:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
1a011578:	4604      	mov	r4, r0
1a01157a:	f003 f805 	bl	1a014588 <__aeabi_fcmple>
1a01157e:	2800      	cmp	r0, #0
1a011580:	f040 8143 	bne.w	1a01180a <inv_generate_accel_gyro_quaternion+0x6c2>
1a011584:	6e70      	ldr	r0, [r6, #100]	; 0x64
1a011586:	f002 fe03 	bl	1a014190 <__aeabi_i2f>
1a01158a:	4621      	mov	r1, r4
1a01158c:	f002 ff08 	bl	1a0143a0 <__aeabi_fdiv>
1a011590:	4601      	mov	r1, r0
1a011592:	4604      	mov	r4, r0
1a011594:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
1a011598:	f002 fd44 	bl	1a014024 <__aeabi_fsub>
1a01159c:	2100      	movs	r1, #0
1a01159e:	4605      	mov	r5, r0
1a0115a0:	f003 f806 	bl	1a0145b0 <__aeabi_fcmpgt>
1a0115a4:	2800      	cmp	r0, #0
1a0115a6:	f000 8160 	beq.w	1a01186a <inv_generate_accel_gyro_quaternion+0x722>
1a0115aa:	4628      	mov	r0, r5
1a0115ac:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
1a0115b0:	f002 fe42 	bl	1a014238 <__aeabi_fmul>
1a0115b4:	f004 f908 	bl	1a0157c8 <sqrtf>
1a0115b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
1a0115bc:	4605      	mov	r5, r0
1a0115be:	4620      	mov	r0, r4
1a0115c0:	f002 fd32 	bl	1a014028 <__addsf3>
1a0115c4:	2100      	movs	r1, #0
1a0115c6:	4604      	mov	r4, r0
1a0115c8:	f002 fff2 	bl	1a0145b0 <__aeabi_fcmpgt>
1a0115cc:	2800      	cmp	r0, #0
1a0115ce:	f000 814a 	beq.w	1a011866 <inv_generate_accel_gyro_quaternion+0x71e>
1a0115d2:	4620      	mov	r0, r4
1a0115d4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
1a0115d8:	f002 fe2e 	bl	1a014238 <__aeabi_fmul>
1a0115dc:	f004 f8f4 	bl	1a0157c8 <sqrtf>
1a0115e0:	4680      	mov	r8, r0
1a0115e2:	6df0      	ldr	r0, [r6, #92]	; 0x5c
1a0115e4:	f002 fdd4 	bl	1a014190 <__aeabi_i2f>
1a0115e8:	4604      	mov	r4, r0
1a0115ea:	6e30      	ldr	r0, [r6, #96]	; 0x60
1a0115ec:	f002 fdd0 	bl	1a014190 <__aeabi_i2f>
1a0115f0:	4621      	mov	r1, r4
1a0115f2:	4607      	mov	r7, r0
1a0115f4:	4620      	mov	r0, r4
1a0115f6:	f002 fe1f 	bl	1a014238 <__aeabi_fmul>
1a0115fa:	4639      	mov	r1, r7
1a0115fc:	4604      	mov	r4, r0
1a0115fe:	4638      	mov	r0, r7
1a011600:	f002 fe1a 	bl	1a014238 <__aeabi_fmul>
1a011604:	4601      	mov	r1, r0
1a011606:	4620      	mov	r0, r4
1a011608:	f002 fd0e 	bl	1a014028 <__addsf3>
1a01160c:	f004 f8dc 	bl	1a0157c8 <sqrtf>
1a011610:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
1a011614:	4604      	mov	r4, r0
1a011616:	f002 ffb7 	bl	1a014588 <__aeabi_fcmple>
1a01161a:	2800      	cmp	r0, #0
1a01161c:	f040 80f5 	bne.w	1a01180a <inv_generate_accel_gyro_quaternion+0x6c2>
1a011620:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a011624:	4640      	mov	r0, r8
1a011626:	f002 fe07 	bl	1a014238 <__aeabi_fmul>
1a01162a:	f002 ffcb 	bl	1a0145c4 <__aeabi_f2iz>
1a01162e:	4f4d      	ldr	r7, [pc, #308]	; (1a011764 <inv_generate_accel_gyro_quaternion+0x61c>)
1a011630:	6138      	str	r0, [r7, #16]
1a011632:	6e30      	ldr	r0, [r6, #96]	; 0x60
1a011634:	f002 fdac 	bl	1a014190 <__aeabi_i2f>
1a011638:	4621      	mov	r1, r4
1a01163a:	f002 feb1 	bl	1a0143a0 <__aeabi_fdiv>
1a01163e:	4601      	mov	r1, r0
1a011640:	4628      	mov	r0, r5
1a011642:	f002 fdf9 	bl	1a014238 <__aeabi_fmul>
1a011646:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a01164a:	f002 fdf5 	bl	1a014238 <__aeabi_fmul>
1a01164e:	f002 ffb9 	bl	1a0145c4 <__aeabi_f2iz>
1a011652:	6178      	str	r0, [r7, #20]
1a011654:	6df0      	ldr	r0, [r6, #92]	; 0x5c
1a011656:	f002 fd9b 	bl	1a014190 <__aeabi_i2f>
1a01165a:	4621      	mov	r1, r4
1a01165c:	f002 fea0 	bl	1a0143a0 <__aeabi_fdiv>
1a011660:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
1a011664:	4601      	mov	r1, r0
1a011666:	4628      	mov	r0, r5
1a011668:	f002 fde6 	bl	1a014238 <__aeabi_fmul>
1a01166c:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a011670:	f002 fde2 	bl	1a014238 <__aeabi_fmul>
1a011674:	f002 ffa6 	bl	1a0145c4 <__aeabi_f2iz>
1a011678:	2300      	movs	r3, #0
1a01167a:	61b8      	str	r0, [r7, #24]
1a01167c:	61fb      	str	r3, [r7, #28]
1a01167e:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
1a011682:	05d9      	lsls	r1, r3, #23
1a011684:	f100 80d8 	bmi.w	1a011838 <inv_generate_accel_gyro_quaternion+0x6f0>
1a011688:	4836      	ldr	r0, [pc, #216]	; (1a011764 <inv_generate_accel_gyro_quaternion+0x61c>)
1a01168a:	a906      	add	r1, sp, #24
1a01168c:	f7f6 fc72 	bl	1a007f74 <inv_q_invert>
1a011690:	4836      	ldr	r0, [pc, #216]	; (1a01176c <inv_generate_accel_gyro_quaternion+0x624>)
1a011692:	a906      	add	r1, sp, #24
1a011694:	f100 0210 	add.w	r2, r0, #16
1a011698:	f7f6 fb6e 	bl	1a007d78 <inv_q_mult>
1a01169c:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
1a0116a0:	e564      	b.n	1a01116c <inv_generate_accel_gyro_quaternion+0x24>
1a0116a2:	f500 7088 	add.w	r0, r0, #272	; 0x110
1a0116a6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
1a0116aa:	f7f6 fc63 	bl	1a007f74 <inv_q_invert>
1a0116ae:	6f73      	ldr	r3, [r6, #116]	; 0x74
1a0116b0:	05da      	lsls	r2, r3, #23
1a0116b2:	f100 80cc 	bmi.w	1a01184e <inv_generate_accel_gyro_quaternion+0x706>
1a0116b6:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
1a0116ba:	e557      	b.n	1a01116c <inv_generate_accel_gyro_quaternion+0x24>
1a0116bc:	4668      	mov	r0, sp
1a0116be:	f7f7 fc23 	bl	1a008f08 <inv_get_linear_accel>
1a0116c2:	e89d 0005 	ldmia.w	sp, {r0, r2}
1a0116c6:	9902      	ldr	r1, [sp, #8]
1a0116c8:	fb82 2302 	smull	r2, r3, r2, r2
1a0116cc:	fbc0 2300 	smlal	r2, r3, r0, r0
1a0116d0:	fbc1 2301 	smlal	r2, r3, r1, r1
1a0116d4:	4294      	cmp	r4, r2
1a0116d6:	eb75 0103 	sbcs.w	r1, r5, r3
1a0116da:	f6bf ae1a 	bge.w	1a011312 <inv_generate_accel_gyro_quaternion+0x1ca>
1a0116de:	2304      	movs	r3, #4
1a0116e0:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
1a0116e4:	2500      	movs	r5, #0
1a0116e6:	e626      	b.n	1a011336 <inv_generate_accel_gyro_quaternion+0x1ee>
1a0116e8:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a0116ec:	4658      	mov	r0, fp
1a0116ee:	f002 fda3 	bl	1a014238 <__aeabi_fmul>
1a0116f2:	f002 ff67 	bl	1a0145c4 <__aeabi_f2iz>
1a0116f6:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
1a0116fa:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a0116fe:	64b8      	str	r0, [r7, #72]	; 0x48
1a011700:	4650      	mov	r0, sl
1a011702:	f002 fd99 	bl	1a014238 <__aeabi_fmul>
1a011706:	4682      	mov	sl, r0
1a011708:	980e      	ldr	r0, [sp, #56]	; 0x38
1a01170a:	f002 fd41 	bl	1a014190 <__aeabi_i2f>
1a01170e:	4601      	mov	r1, r0
1a011710:	4650      	mov	r0, sl
1a011712:	f002 fd91 	bl	1a014238 <__aeabi_fmul>
1a011716:	4641      	mov	r1, r8
1a011718:	f002 fe42 	bl	1a0143a0 <__aeabi_fdiv>
1a01171c:	f002 ff52 	bl	1a0145c4 <__aeabi_f2iz>
1a011720:	64f8      	str	r0, [r7, #76]	; 0x4c
1a011722:	980f      	ldr	r0, [sp, #60]	; 0x3c
1a011724:	f002 fd34 	bl	1a014190 <__aeabi_i2f>
1a011728:	4601      	mov	r1, r0
1a01172a:	4650      	mov	r0, sl
1a01172c:	f002 fd84 	bl	1a014238 <__aeabi_fmul>
1a011730:	4641      	mov	r1, r8
1a011732:	f002 fe35 	bl	1a0143a0 <__aeabi_fdiv>
1a011736:	f002 ff45 	bl	1a0145c4 <__aeabi_f2iz>
1a01173a:	6538      	str	r0, [r7, #80]	; 0x50
1a01173c:	9810      	ldr	r0, [sp, #64]	; 0x40
1a01173e:	f002 fd27 	bl	1a014190 <__aeabi_i2f>
1a011742:	4601      	mov	r1, r0
1a011744:	4650      	mov	r0, sl
1a011746:	f002 fd77 	bl	1a014238 <__aeabi_fmul>
1a01174a:	4641      	mov	r1, r8
1a01174c:	f002 fe28 	bl	1a0143a0 <__aeabi_fdiv>
1a011750:	f002 ff38 	bl	1a0145c4 <__aeabi_f2iz>
1a011754:	6578      	str	r0, [r7, #84]	; 0x54
1a011756:	e592      	b.n	1a01127e <inv_generate_accel_gyro_quaternion+0x136>
1a011758:	3951b717 	.word	0x3951b717
1a01175c:	3c23d70a 	.word	0x3c23d70a
1a011760:	3e4ccccd 	.word	0x3e4ccccd
1a011764:	100873a8 	.word	0x100873a8
1a011768:	68db8bad 	.word	0x68db8bad
1a01176c:	100873b8 	.word	0x100873b8
1a011770:	3ecccccd 	.word	0x3ecccccd
1a011774:	f8df 8114 	ldr.w	r8, [pc, #276]	; 1a01188c <inv_generate_accel_gyro_quaternion+0x744>
1a011778:	4648      	mov	r0, r9
1a01177a:	f002 fd09 	bl	1a014190 <__aeabi_i2f>
1a01177e:	493d      	ldr	r1, [pc, #244]	; (1a011874 <inv_generate_accel_gyro_quaternion+0x72c>)
1a011780:	f002 fe0e 	bl	1a0143a0 <__aeabi_fdiv>
1a011784:	4641      	mov	r1, r8
1a011786:	f002 fd57 	bl	1a014238 <__aeabi_fmul>
1a01178a:	2600      	movs	r6, #0
1a01178c:	4601      	mov	r1, r0
1a01178e:	4680      	mov	r8, r0
1a011790:	4628      	mov	r0, r5
1a011792:	961e      	str	r6, [sp, #120]	; 0x78
1a011794:	f002 fd50 	bl	1a014238 <__aeabi_fmul>
1a011798:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
1a01179c:	901f      	str	r0, [sp, #124]	; 0x7c
1a01179e:	4640      	mov	r0, r8
1a0117a0:	f002 fd4a 	bl	1a014238 <__aeabi_fmul>
1a0117a4:	a926      	add	r1, sp, #152	; 0x98
1a0117a6:	9020      	str	r0, [sp, #128]	; 0x80
1a0117a8:	aa16      	add	r2, sp, #88	; 0x58
1a0117aa:	a81e      	add	r0, sp, #120	; 0x78
1a0117ac:	9621      	str	r6, [sp, #132]	; 0x84
1a0117ae:	f7f6 fc39 	bl	1a008024 <inv_q_multf>
1a0117b2:	a816      	add	r0, sp, #88	; 0x58
1a0117b4:	4602      	mov	r2, r0
1a0117b6:	a926      	add	r1, sp, #152	; 0x98
1a0117b8:	f7f6 fd00 	bl	1a0081bc <inv_q_addf>
1a0117bc:	a816      	add	r0, sp, #88	; 0x58
1a0117be:	f7f6 fe4f 	bl	1a008460 <inv_q_norm4>
1a0117c2:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a0117c6:	9816      	ldr	r0, [sp, #88]	; 0x58
1a0117c8:	f002 fd36 	bl	1a014238 <__aeabi_fmul>
1a0117cc:	f002 fefa 	bl	1a0145c4 <__aeabi_f2iz>
1a0117d0:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a0117d4:	6138      	str	r0, [r7, #16]
1a0117d6:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a0117d8:	f002 fd2e 	bl	1a014238 <__aeabi_fmul>
1a0117dc:	f002 fef2 	bl	1a0145c4 <__aeabi_f2iz>
1a0117e0:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a0117e4:	6178      	str	r0, [r7, #20]
1a0117e6:	9818      	ldr	r0, [sp, #96]	; 0x60
1a0117e8:	f002 fd26 	bl	1a014238 <__aeabi_fmul>
1a0117ec:	f002 feea 	bl	1a0145c4 <__aeabi_f2iz>
1a0117f0:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a0117f4:	61b8      	str	r0, [r7, #24]
1a0117f6:	9819      	ldr	r0, [sp, #100]	; 0x64
1a0117f8:	f002 fd1e 	bl	1a014238 <__aeabi_fmul>
1a0117fc:	f002 fee2 	bl	1a0145c4 <__aeabi_f2iz>
1a011800:	61f8      	str	r0, [r7, #28]
1a011802:	e5b6      	b.n	1a011372 <inv_generate_accel_gyro_quaternion+0x22a>
1a011804:	f04f 587a 	mov.w	r8, #1048576000	; 0x3e800000
1a011808:	e7b6      	b.n	1a011778 <inv_generate_accel_gyro_quaternion+0x630>
1a01180a:	4f1b      	ldr	r7, [pc, #108]	; (1a011878 <inv_generate_accel_gyro_quaternion+0x730>)
1a01180c:	2300      	movs	r3, #0
1a01180e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a011812:	613a      	str	r2, [r7, #16]
1a011814:	617b      	str	r3, [r7, #20]
1a011816:	61bb      	str	r3, [r7, #24]
1a011818:	61fb      	str	r3, [r7, #28]
1a01181a:	e730      	b.n	1a01167e <inv_generate_accel_gyro_quaternion+0x536>
1a01181c:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
1a01181e:	4917      	ldr	r1, [pc, #92]	; (1a01187c <inv_generate_accel_gyro_quaternion+0x734>)
1a011820:	17da      	asrs	r2, r3, #31
1a011822:	fb81 0303 	smull	r0, r3, r1, r3
1a011826:	ebc2 23e3 	rsb	r3, r2, r3, asr #11
1a01182a:	2b00      	cmp	r3, #0
1a01182c:	dd1f      	ble.n	1a01186e <inv_generate_accel_gyro_quaternion+0x726>
1a01182e:	4d14      	ldr	r5, [pc, #80]	; (1a011880 <inv_generate_accel_gyro_quaternion+0x738>)
1a011830:	00db      	lsls	r3, r3, #3
1a011832:	fb05 f503 	mul.w	r5, r5, r3
1a011836:	e57e      	b.n	1a011336 <inv_generate_accel_gyro_quaternion+0x1ee>
1a011838:	f506 7088 	add.w	r0, r6, #272	; 0x110
1a01183c:	4911      	ldr	r1, [pc, #68]	; (1a011884 <inv_generate_accel_gyro_quaternion+0x73c>)
1a01183e:	f7f6 fb99 	bl	1a007f74 <inv_q_invert>
1a011842:	e721      	b.n	1a011688 <inv_generate_accel_gyro_quaternion+0x540>
1a011844:	ad0e      	add	r5, sp, #56	; 0x38
1a011846:	e521      	b.n	1a01128c <inv_generate_accel_gyro_quaternion+0x144>
1a011848:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1a011890 <inv_generate_accel_gyro_quaternion+0x748>
1a01184c:	e794      	b.n	1a011778 <inv_generate_accel_gyro_quaternion+0x630>
1a01184e:	4638      	mov	r0, r7
1a011850:	a906      	add	r1, sp, #24
1a011852:	f7f6 fb8f 	bl	1a007f74 <inv_q_invert>
1a011856:	f107 0010 	add.w	r0, r7, #16
1a01185a:	a906      	add	r1, sp, #24
1a01185c:	f107 0220 	add.w	r2, r7, #32
1a011860:	f7f6 fa8a 	bl	1a007d78 <inv_q_mult>
1a011864:	e727      	b.n	1a0116b6 <inv_generate_accel_gyro_quaternion+0x56e>
1a011866:	2000      	movs	r0, #0
1a011868:	e6b8      	b.n	1a0115dc <inv_generate_accel_gyro_quaternion+0x494>
1a01186a:	2000      	movs	r0, #0
1a01186c:	e6a2      	b.n	1a0115b4 <inv_generate_accel_gyro_quaternion+0x46c>
1a01186e:	4d06      	ldr	r5, [pc, #24]	; (1a011888 <inv_generate_accel_gyro_quaternion+0x740>)
1a011870:	e561      	b.n	1a011336 <inv_generate_accel_gyro_quaternion+0x1ee>
1a011872:	bf00      	nop
1a011874:	47cd1400 	.word	0x47cd1400
1a011878:	100873a8 	.word	0x100873a8
1a01187c:	68db8bad 	.word	0x68db8bad
1a011880:	00c49ba6 	.word	0x00c49ba6
1a011884:	10087404 	.word	0x10087404
1a011888:	0624dd30 	.word	0x0624dd30
1a01188c:	3bc49ba6 	.word	0x3bc49ba6
1a011890:	3d75c28f 	.word	0x3d75c28f

1a011894 <inv_generate_quaternion>:
1a011894:	b538      	push	{r3, r4, r5, lr}
1a011896:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a011898:	05db      	lsls	r3, r3, #23
1a01189a:	4604      	mov	r4, r0
1a01189c:	d50f      	bpl.n	1a0118be <inv_generate_quaternion+0x2a>
1a01189e:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
1a0118a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
1a0118a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
1a0118aa:	d015      	beq.n	1a0118d8 <inv_generate_quaternion+0x44>
1a0118ac:	4620      	mov	r0, r4
1a0118ae:	f7ff fc4b 	bl	1a011148 <inv_generate_accel_gyro_quaternion>
1a0118b2:	480d      	ldr	r0, [pc, #52]	; (1a0118e8 <inv_generate_quaternion+0x54>)
1a0118b4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a0118b6:	f7f7 f8e7 	bl	1a008a88 <inv_store_gaming_quaternion>
1a0118ba:	2000      	movs	r0, #0
1a0118bc:	bd38      	pop	{r3, r4, r5, pc}
1a0118be:	6f43      	ldr	r3, [r0, #116]	; 0x74
1a0118c0:	f413 7f80 	tst.w	r3, #256	; 0x100
1a0118c4:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
1a0118c8:	d1eb      	bne.n	1a0118a2 <inv_generate_quaternion+0xe>
1a0118ca:	05d8      	lsls	r0, r3, #23
1a0118cc:	d5f5      	bpl.n	1a0118ba <inv_generate_quaternion+0x26>
1a0118ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
1a0118d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
1a0118d6:	d1e9      	bne.n	1a0118ac <inv_generate_quaternion+0x18>
1a0118d8:	f504 7388 	add.w	r3, r4, #272	; 0x110
1a0118dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a0118de:	4d02      	ldr	r5, [pc, #8]	; (1a0118e8 <inv_generate_quaternion+0x54>)
1a0118e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
1a0118e4:	e7e5      	b.n	1a0118b2 <inv_generate_quaternion+0x1e>
1a0118e6:	bf00      	nop
1a0118e8:	100873b8 	.word	0x100873b8

1a0118ec <inv_init_quaternion>:
1a0118ec:	b510      	push	{r4, lr}
1a0118ee:	4c07      	ldr	r4, [pc, #28]	; (1a01190c <inv_init_quaternion+0x20>)
1a0118f0:	2100      	movs	r1, #0
1a0118f2:	4620      	mov	r0, r4
1a0118f4:	226c      	movs	r2, #108	; 0x6c
1a0118f6:	f003 f9ef 	bl	1a014cd8 <memset>
1a0118fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a0118fe:	6123      	str	r3, [r4, #16]
1a011900:	6023      	str	r3, [r4, #0]
1a011902:	6223      	str	r3, [r4, #32]
1a011904:	63e3      	str	r3, [r4, #60]	; 0x3c
1a011906:	65e3      	str	r3, [r4, #92]	; 0x5c
1a011908:	2000      	movs	r0, #0
1a01190a:	bd10      	pop	{r4, pc}
1a01190c:	100873a8 	.word	0x100873a8

1a011910 <inv_enable_quaternion>:
1a011910:	b508      	push	{r3, lr}
1a011912:	f7ff ffeb 	bl	1a0118ec <inv_init_quaternion>
1a011916:	b100      	cbz	r0, 1a01191a <inv_enable_quaternion+0xa>
1a011918:	bd08      	pop	{r3, pc}
1a01191a:	4802      	ldr	r0, [pc, #8]	; (1a011924 <inv_enable_quaternion+0x14>)
1a01191c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a011920:	f7f7 bb66 	b.w	1a008ff0 <inv_register_mpl_start_notification>
1a011924:	1a010fed 	.word	0x1a010fed

1a011928 <getFullConvClk>:
 * Private functions
 ****************************************************************************/

/* Get the number of clock for a full conversion */
STATIC INLINE uint8_t getFullConvClk(void)
{
1a011928:	b480      	push	{r7}
1a01192a:	af00      	add	r7, sp, #0
	return 11;
1a01192c:	230b      	movs	r3, #11
}
1a01192e:	4618      	mov	r0, r3
1a011930:	46bd      	mov	sp, r7
1a011932:	f85d 7b04 	ldr.w	r7, [sp], #4
1a011936:	4770      	bx	lr

1a011938 <Chip_ADC_GetClockIndex>:

/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
1a011938:	b480      	push	{r7}
1a01193a:	b085      	sub	sp, #20
1a01193c:	af00      	add	r7, sp, #0
1a01193e:	6078      	str	r0, [r7, #4]
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a011940:	687b      	ldr	r3, [r7, #4]
1a011942:	4a07      	ldr	r2, [pc, #28]	; (1a011960 <Chip_ADC_GetClockIndex+0x28>)
1a011944:	4293      	cmp	r3, r2
1a011946:	d102      	bne.n	1a01194e <Chip_ADC_GetClockIndex+0x16>
		clkADC = CLK_APB3_ADC1;
1a011948:	2304      	movs	r3, #4
1a01194a:	81fb      	strh	r3, [r7, #14]
1a01194c:	e001      	b.n	1a011952 <Chip_ADC_GetClockIndex+0x1a>
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a01194e:	2303      	movs	r3, #3
1a011950:	81fb      	strh	r3, [r7, #14]
	}

	return clkADC;
1a011952:	89fb      	ldrh	r3, [r7, #14]
}
1a011954:	4618      	mov	r0, r3
1a011956:	3714      	adds	r7, #20
1a011958:	46bd      	mov	sp, r7
1a01195a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01195e:	4770      	bx	lr
1a011960:	400e4000 	.word	0x400e4000

1a011964 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a011964:	b580      	push	{r7, lr}
1a011966:	b088      	sub	sp, #32
1a011968:	af00      	add	r7, sp, #0
1a01196a:	60f8      	str	r0, [r7, #12]
1a01196c:	607a      	str	r2, [r7, #4]
1a01196e:	461a      	mov	r2, r3
1a011970:	460b      	mov	r3, r1
1a011972:	72fb      	strb	r3, [r7, #11]
1a011974:	4613      	mov	r3, r2
1a011976:	72bb      	strb	r3, [r7, #10]
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a011978:	68f8      	ldr	r0, [r7, #12]
1a01197a:	f7ff ffdd 	bl	1a011938 <Chip_ADC_GetClockIndex>
1a01197e:	4603      	mov	r3, r0
1a011980:	4618      	mov	r0, r3
1a011982:	f000 fdad 	bl	1a0124e0 <Chip_Clock_GetRate>
1a011986:	61b8      	str	r0, [r7, #24]
	if (burstMode) {
1a011988:	7afb      	ldrb	r3, [r7, #11]
1a01198a:	2b00      	cmp	r3, #0
1a01198c:	d005      	beq.n	1a01199a <getClkDiv+0x36>
		fullAdcRate = adcRate * clks;
1a01198e:	7abb      	ldrb	r3, [r7, #10]
1a011990:	687a      	ldr	r2, [r7, #4]
1a011992:	fb02 f303 	mul.w	r3, r2, r3
1a011996:	61fb      	str	r3, [r7, #28]
1a011998:	e007      	b.n	1a0119aa <getClkDiv+0x46>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a01199a:	f7ff ffc5 	bl	1a011928 <getFullConvClk>
1a01199e:	4603      	mov	r3, r0
1a0119a0:	461a      	mov	r2, r3
1a0119a2:	687b      	ldr	r3, [r7, #4]
1a0119a4:	fb03 f302 	mul.w	r3, r3, r2
1a0119a8:	61fb      	str	r3, [r7, #28]
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0119aa:	69bb      	ldr	r3, [r7, #24]
1a0119ac:	005a      	lsls	r2, r3, #1
1a0119ae:	69fb      	ldr	r3, [r7, #28]
1a0119b0:	441a      	add	r2, r3
1a0119b2:	69fb      	ldr	r3, [r7, #28]
1a0119b4:	005b      	lsls	r3, r3, #1
1a0119b6:	fbb2 f3f3 	udiv	r3, r2, r3
1a0119ba:	b2db      	uxtb	r3, r3
1a0119bc:	3b01      	subs	r3, #1
1a0119be:	75fb      	strb	r3, [r7, #23]
	return div;
1a0119c0:	7dfb      	ldrb	r3, [r7, #23]
}
1a0119c2:	4618      	mov	r0, r3
1a0119c4:	3720      	adds	r7, #32
1a0119c6:	46bd      	mov	sp, r7
1a0119c8:	bd80      	pop	{r7, pc}
1a0119ca:	bf00      	nop

1a0119cc <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
1a0119cc:	b480      	push	{r7}
1a0119ce:	b085      	sub	sp, #20
1a0119d0:	af00      	add	r7, sp, #0
1a0119d2:	6078      	str	r0, [r7, #4]
1a0119d4:	460b      	mov	r3, r1
1a0119d6:	70fb      	strb	r3, [r7, #3]
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a0119d8:	687b      	ldr	r3, [r7, #4]
1a0119da:	681b      	ldr	r3, [r3, #0]
1a0119dc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a0119e0:	60fb      	str	r3, [r7, #12]
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a0119e2:	78fb      	ldrb	r3, [r7, #3]
1a0119e4:	061a      	lsls	r2, r3, #24
1a0119e6:	68fb      	ldr	r3, [r7, #12]
1a0119e8:	431a      	orrs	r2, r3
1a0119ea:	687b      	ldr	r3, [r7, #4]
1a0119ec:	601a      	str	r2, [r3, #0]
}
1a0119ee:	bf00      	nop
1a0119f0:	3714      	adds	r7, #20
1a0119f2:	46bd      	mov	sp, r7
1a0119f4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0119f8:	4770      	bx	lr
1a0119fa:	bf00      	nop

1a0119fc <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a0119fc:	b480      	push	{r7}
1a0119fe:	b087      	sub	sp, #28
1a011a00:	af00      	add	r7, sp, #0
1a011a02:	60f8      	str	r0, [r7, #12]
1a011a04:	460b      	mov	r3, r1
1a011a06:	607a      	str	r2, [r7, #4]
1a011a08:	72fb      	strb	r3, [r7, #11]
	uint32_t temp;
	temp = pADC->DR[channel];
1a011a0a:	7afa      	ldrb	r2, [r7, #11]
1a011a0c:	68fb      	ldr	r3, [r7, #12]
1a011a0e:	3204      	adds	r2, #4
1a011a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a011a14:	617b      	str	r3, [r7, #20]
	if (!ADC_DR_DONE(temp)) {
1a011a16:	697b      	ldr	r3, [r7, #20]
1a011a18:	2b00      	cmp	r3, #0
1a011a1a:	db01      	blt.n	1a011a20 <readAdcVal+0x24>
		return ERROR;
1a011a1c:	2300      	movs	r3, #0
1a011a1e:	e008      	b.n	1a011a32 <readAdcVal+0x36>
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a011a20:	697b      	ldr	r3, [r7, #20]
1a011a22:	099b      	lsrs	r3, r3, #6
1a011a24:	b29b      	uxth	r3, r3
1a011a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
1a011a2a:	b29a      	uxth	r2, r3
1a011a2c:	687b      	ldr	r3, [r7, #4]
1a011a2e:	801a      	strh	r2, [r3, #0]
	return SUCCESS;
1a011a30:	2301      	movs	r3, #1
}
1a011a32:	4618      	mov	r0, r3
1a011a34:	371c      	adds	r7, #28
1a011a36:	46bd      	mov	sp, r7
1a011a38:	f85d 7b04 	ldr.w	r7, [sp], #4
1a011a3c:	4770      	bx	lr
1a011a3e:	bf00      	nop

1a011a40 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a011a40:	b580      	push	{r7, lr}
1a011a42:	b086      	sub	sp, #24
1a011a44:	af00      	add	r7, sp, #0
1a011a46:	6078      	str	r0, [r7, #4]
1a011a48:	6039      	str	r1, [r7, #0]
	uint8_t div;
	uint32_t cr = 0;
1a011a4a:	2300      	movs	r3, #0
1a011a4c:	617b      	str	r3, [r7, #20]
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a011a4e:	6878      	ldr	r0, [r7, #4]
1a011a50:	f7ff ff72 	bl	1a011938 <Chip_ADC_GetClockIndex>
1a011a54:	4603      	mov	r3, r0
1a011a56:	4618      	mov	r0, r3
1a011a58:	2301      	movs	r3, #1
1a011a5a:	2201      	movs	r2, #1
1a011a5c:	2101      	movs	r1, #1
1a011a5e:	f000 fc8b 	bl	1a012378 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a011a62:	687b      	ldr	r3, [r7, #4]
1a011a64:	2200      	movs	r2, #0
1a011a66:	60da      	str	r2, [r3, #12]

	cr |= ADC_CR_PDN;
1a011a68:	697b      	ldr	r3, [r7, #20]
1a011a6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a011a6e:	617b      	str	r3, [r7, #20]
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a011a70:	683b      	ldr	r3, [r7, #0]
1a011a72:	4a14      	ldr	r2, [pc, #80]	; (1a011ac4 <Chip_ADC_Init+0x84>)
1a011a74:	601a      	str	r2, [r3, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a011a76:	683b      	ldr	r3, [r7, #0]
1a011a78:	2200      	movs	r2, #0
1a011a7a:	711a      	strb	r2, [r3, #4]
	clk = 11;
1a011a7c:	230b      	movs	r3, #11
1a011a7e:	613b      	str	r3, [r7, #16]
	ADCSetup->burstMode = false;
1a011a80:	683b      	ldr	r3, [r7, #0]
1a011a82:	2200      	movs	r2, #0
1a011a84:	715a      	strb	r2, [r3, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a011a86:	683b      	ldr	r3, [r7, #0]
1a011a88:	681a      	ldr	r2, [r3, #0]
1a011a8a:	693b      	ldr	r3, [r7, #16]
1a011a8c:	b2db      	uxtb	r3, r3
1a011a8e:	2100      	movs	r1, #0
1a011a90:	6878      	ldr	r0, [r7, #4]
1a011a92:	f7ff ff67 	bl	1a011964 <getClkDiv>
1a011a96:	4603      	mov	r3, r0
1a011a98:	73fb      	strb	r3, [r7, #15]
	cr |= ADC_CR_CLKDIV(div);
1a011a9a:	7bfb      	ldrb	r3, [r7, #15]
1a011a9c:	021b      	lsls	r3, r3, #8
1a011a9e:	461a      	mov	r2, r3
1a011aa0:	697b      	ldr	r3, [r7, #20]
1a011aa2:	4313      	orrs	r3, r2
1a011aa4:	617b      	str	r3, [r7, #20]
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a011aa6:	683b      	ldr	r3, [r7, #0]
1a011aa8:	791b      	ldrb	r3, [r3, #4]
1a011aaa:	045b      	lsls	r3, r3, #17
1a011aac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a011ab0:	697a      	ldr	r2, [r7, #20]
1a011ab2:	4313      	orrs	r3, r2
1a011ab4:	617b      	str	r3, [r7, #20]
	pADC->CR = cr;
1a011ab6:	687b      	ldr	r3, [r7, #4]
1a011ab8:	697a      	ldr	r2, [r7, #20]
1a011aba:	601a      	str	r2, [r3, #0]
}
1a011abc:	bf00      	nop
1a011abe:	3718      	adds	r7, #24
1a011ac0:	46bd      	mov	sp, r7
1a011ac2:	bd80      	pop	{r7, pc}
1a011ac4:	00061a80 	.word	0x00061a80

1a011ac8 <Chip_ADC_ReadValue>:
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
}

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a011ac8:	b580      	push	{r7, lr}
1a011aca:	b084      	sub	sp, #16
1a011acc:	af00      	add	r7, sp, #0
1a011ace:	60f8      	str	r0, [r7, #12]
1a011ad0:	460b      	mov	r3, r1
1a011ad2:	607a      	str	r2, [r7, #4]
1a011ad4:	72fb      	strb	r3, [r7, #11]
	return readAdcVal(pADC, channel, data);
1a011ad6:	7afb      	ldrb	r3, [r7, #11]
1a011ad8:	687a      	ldr	r2, [r7, #4]
1a011ada:	4619      	mov	r1, r3
1a011adc:	68f8      	ldr	r0, [r7, #12]
1a011ade:	f7ff ff8d 	bl	1a0119fc <readAdcVal>
1a011ae2:	4603      	mov	r3, r0
}
1a011ae4:	4618      	mov	r0, r3
1a011ae6:	3710      	adds	r7, #16
1a011ae8:	46bd      	mov	sp, r7
1a011aea:	bd80      	pop	{r7, pc}

1a011aec <Chip_ADC_SetStartMode>:
	}
}

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a011aec:	b580      	push	{r7, lr}
1a011aee:	b082      	sub	sp, #8
1a011af0:	af00      	add	r7, sp, #0
1a011af2:	6078      	str	r0, [r7, #4]
1a011af4:	460b      	mov	r3, r1
1a011af6:	70fb      	strb	r3, [r7, #3]
1a011af8:	4613      	mov	r3, r2
1a011afa:	70bb      	strb	r3, [r7, #2]
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a011afc:	78fb      	ldrb	r3, [r7, #3]
1a011afe:	2b01      	cmp	r3, #1
1a011b00:	d012      	beq.n	1a011b28 <Chip_ADC_SetStartMode+0x3c>
1a011b02:	78fb      	ldrb	r3, [r7, #3]
1a011b04:	2b00      	cmp	r3, #0
1a011b06:	d00f      	beq.n	1a011b28 <Chip_ADC_SetStartMode+0x3c>
		if (EdgeOption) {
1a011b08:	78bb      	ldrb	r3, [r7, #2]
1a011b0a:	2b00      	cmp	r3, #0
1a011b0c:	d006      	beq.n	1a011b1c <Chip_ADC_SetStartMode+0x30>
			pADC->CR |= ADC_CR_EDGE;
1a011b0e:	687b      	ldr	r3, [r7, #4]
1a011b10:	681b      	ldr	r3, [r3, #0]
1a011b12:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
1a011b16:	687b      	ldr	r3, [r7, #4]
1a011b18:	601a      	str	r2, [r3, #0]
1a011b1a:	e005      	b.n	1a011b28 <Chip_ADC_SetStartMode+0x3c>
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
1a011b1c:	687b      	ldr	r3, [r7, #4]
1a011b1e:	681b      	ldr	r3, [r3, #0]
1a011b20:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
1a011b24:	687b      	ldr	r3, [r7, #4]
1a011b26:	601a      	str	r2, [r3, #0]
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a011b28:	78fb      	ldrb	r3, [r7, #3]
1a011b2a:	4619      	mov	r1, r3
1a011b2c:	6878      	ldr	r0, [r7, #4]
1a011b2e:	f7ff ff4d 	bl	1a0119cc <setStartMode>
}
1a011b32:	bf00      	nop
1a011b34:	3708      	adds	r7, #8
1a011b36:	46bd      	mov	sp, r7
1a011b38:	bd80      	pop	{r7, pc}
1a011b3a:	bf00      	nop

1a011b3c <Chip_ADC_EnableChannel>:
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
}

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
1a011b3c:	b480      	push	{r7}
1a011b3e:	b083      	sub	sp, #12
1a011b40:	af00      	add	r7, sp, #0
1a011b42:	6078      	str	r0, [r7, #4]
1a011b44:	460b      	mov	r3, r1
1a011b46:	70fb      	strb	r3, [r7, #3]
1a011b48:	4613      	mov	r3, r2
1a011b4a:	70bb      	strb	r3, [r7, #2]
	if (NewState == ENABLE) {
1a011b4c:	78bb      	ldrb	r3, [r7, #2]
1a011b4e:	2b01      	cmp	r3, #1
1a011b50:	d109      	bne.n	1a011b66 <Chip_ADC_EnableChannel+0x2a>
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a011b52:	687b      	ldr	r3, [r7, #4]
1a011b54:	681a      	ldr	r2, [r3, #0]
1a011b56:	78fb      	ldrb	r3, [r7, #3]
1a011b58:	2101      	movs	r1, #1
1a011b5a:	fa01 f303 	lsl.w	r3, r1, r3
1a011b5e:	431a      	orrs	r2, r3
1a011b60:	687b      	ldr	r3, [r7, #4]
1a011b62:	601a      	str	r2, [r3, #0]
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
	}
}
1a011b64:	e00f      	b.n	1a011b86 <Chip_ADC_EnableChannel+0x4a>
{
	if (NewState == ENABLE) {
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a011b66:	687b      	ldr	r3, [r7, #4]
1a011b68:	681b      	ldr	r3, [r3, #0]
1a011b6a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
1a011b6e:	687b      	ldr	r3, [r7, #4]
1a011b70:	601a      	str	r2, [r3, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a011b72:	687b      	ldr	r3, [r7, #4]
1a011b74:	681a      	ldr	r2, [r3, #0]
1a011b76:	78fb      	ldrb	r3, [r7, #3]
1a011b78:	2101      	movs	r1, #1
1a011b7a:	fa01 f303 	lsl.w	r3, r1, r3
1a011b7e:	43db      	mvns	r3, r3
1a011b80:	401a      	ands	r2, r3
1a011b82:	687b      	ldr	r3, [r7, #4]
1a011b84:	601a      	str	r2, [r3, #0]
	}
}
1a011b86:	bf00      	nop
1a011b88:	370c      	adds	r7, #12
1a011b8a:	46bd      	mov	sp, r7
1a011b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a011b90:	4770      	bx	lr
1a011b92:	bf00      	nop

1a011b94 <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a011b94:	b580      	push	{r7, lr}
1a011b96:	b082      	sub	sp, #8
1a011b98:	af00      	add	r7, sp, #0
1a011b9a:	6078      	str	r0, [r7, #4]
1a011b9c:	460b      	mov	r3, r1
1a011b9e:	70fb      	strb	r3, [r7, #3]
	setStartMode(pADC, ADC_NO_START);
1a011ba0:	2100      	movs	r1, #0
1a011ba2:	6878      	ldr	r0, [r7, #4]
1a011ba4:	f7ff ff12 	bl	1a0119cc <setStartMode>
	
    if (NewState == DISABLE) {
1a011ba8:	78fb      	ldrb	r3, [r7, #3]
1a011baa:	2b00      	cmp	r3, #0
1a011bac:	d106      	bne.n	1a011bbc <Chip_ADC_SetBurstCmd+0x28>
		pADC->CR &= ~ADC_CR_BURST;
1a011bae:	687b      	ldr	r3, [r7, #4]
1a011bb0:	681b      	ldr	r3, [r3, #0]
1a011bb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
1a011bb6:	687b      	ldr	r3, [r7, #4]
1a011bb8:	601a      	str	r2, [r3, #0]
	}
	else {
		pADC->CR |= ADC_CR_BURST;
	}
}
1a011bba:	e005      	b.n	1a011bc8 <Chip_ADC_SetBurstCmd+0x34>
	
    if (NewState == DISABLE) {
		pADC->CR &= ~ADC_CR_BURST;
	}
	else {
		pADC->CR |= ADC_CR_BURST;
1a011bbc:	687b      	ldr	r3, [r7, #4]
1a011bbe:	681b      	ldr	r3, [r3, #0]
1a011bc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
1a011bc4:	687b      	ldr	r3, [r7, #4]
1a011bc6:	601a      	str	r2, [r3, #0]
	}
}
1a011bc8:	bf00      	nop
1a011bca:	3708      	adds	r7, #8
1a011bcc:	46bd      	mov	sp, r7
1a011bce:	bd80      	pop	{r7, pc}

1a011bd0 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a011bd0:	b580      	push	{r7, lr}
1a011bd2:	af00      	add	r7, sp, #0
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a011bd4:	2069      	movs	r0, #105	; 0x69
1a011bd6:	f000 fc83 	bl	1a0124e0 <Chip_Clock_GetRate>
1a011bda:	4602      	mov	r2, r0
1a011bdc:	4b01      	ldr	r3, [pc, #4]	; (1a011be4 <SystemCoreClockUpdate+0x14>)
1a011bde:	601a      	str	r2, [r3, #0]
}
1a011be0:	bf00      	nop
1a011be2:	bd80      	pop	{r7, pc}
1a011be4:	10089100 	.word	0x10089100

1a011be8 <Chip_Clock_TestMainPLLMultiplier>:
 * Private functions
 ****************************************************************************/

/* Test PLL input values for a specific frequency range */
static uint32_t Chip_Clock_TestMainPLLMultiplier(uint32_t InputHz, uint32_t TestMult, uint32_t MinHz, uint32_t MaxHz)
{
1a011be8:	b480      	push	{r7}
1a011bea:	b087      	sub	sp, #28
1a011bec:	af00      	add	r7, sp, #0
1a011bee:	60f8      	str	r0, [r7, #12]
1a011bf0:	60b9      	str	r1, [r7, #8]
1a011bf2:	607a      	str	r2, [r7, #4]
1a011bf4:	603b      	str	r3, [r7, #0]
	uint32_t TestHz = TestMult * InputHz;
1a011bf6:	68bb      	ldr	r3, [r7, #8]
1a011bf8:	68fa      	ldr	r2, [r7, #12]
1a011bfa:	fb02 f303 	mul.w	r3, r2, r3
1a011bfe:	617b      	str	r3, [r7, #20]

	if ((TestHz < MinHz) || (TestHz > MAX_CLOCK_FREQ) || (TestHz > MaxHz)) {
1a011c00:	697a      	ldr	r2, [r7, #20]
1a011c02:	687b      	ldr	r3, [r7, #4]
1a011c04:	429a      	cmp	r2, r3
1a011c06:	d307      	bcc.n	1a011c18 <Chip_Clock_TestMainPLLMultiplier+0x30>
1a011c08:	697b      	ldr	r3, [r7, #20]
1a011c0a:	4a08      	ldr	r2, [pc, #32]	; (1a011c2c <Chip_Clock_TestMainPLLMultiplier+0x44>)
1a011c0c:	4293      	cmp	r3, r2
1a011c0e:	d803      	bhi.n	1a011c18 <Chip_Clock_TestMainPLLMultiplier+0x30>
1a011c10:	697a      	ldr	r2, [r7, #20]
1a011c12:	683b      	ldr	r3, [r7, #0]
1a011c14:	429a      	cmp	r2, r3
1a011c16:	d901      	bls.n	1a011c1c <Chip_Clock_TestMainPLLMultiplier+0x34>
		TestHz = 0;
1a011c18:	2300      	movs	r3, #0
1a011c1a:	617b      	str	r3, [r7, #20]
	}

	return TestHz;
1a011c1c:	697b      	ldr	r3, [r7, #20]
}
1a011c1e:	4618      	mov	r0, r3
1a011c20:	371c      	adds	r7, #28
1a011c22:	46bd      	mov	sp, r7
1a011c24:	f85d 7b04 	ldr.w	r7, [sp], #4
1a011c28:	4770      	bx	lr
1a011c2a:	bf00      	nop
1a011c2c:	0c28cb00 	.word	0x0c28cb00

1a011c30 <Chip_Clock_GetDivRate>:

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a011c30:	b580      	push	{r7, lr}
1a011c32:	b084      	sub	sp, #16
1a011c34:	af00      	add	r7, sp, #0
1a011c36:	4603      	mov	r3, r0
1a011c38:	460a      	mov	r2, r1
1a011c3a:	71fb      	strb	r3, [r7, #7]
1a011c3c:	4613      	mov	r3, r2
1a011c3e:	71bb      	strb	r3, [r7, #6]
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a011c40:	79bb      	ldrb	r3, [r7, #6]
1a011c42:	4618      	mov	r0, r3
1a011c44:	f000 fa16 	bl	1a012074 <Chip_Clock_GetDividerSource>
1a011c48:	4603      	mov	r3, r0
1a011c4a:	73fb      	strb	r3, [r7, #15]
	div = Chip_Clock_GetDividerDivisor(divider);
1a011c4c:	79bb      	ldrb	r3, [r7, #6]
1a011c4e:	4618      	mov	r0, r3
1a011c50:	f000 fa30 	bl	1a0120b4 <Chip_Clock_GetDividerDivisor>
1a011c54:	60b8      	str	r0, [r7, #8]
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a011c56:	7bfb      	ldrb	r3, [r7, #15]
1a011c58:	4618      	mov	r0, r3
1a011c5a:	f000 fa47 	bl	1a0120ec <Chip_Clock_GetClockInputHz>
1a011c5e:	4602      	mov	r2, r0
1a011c60:	68bb      	ldr	r3, [r7, #8]
1a011c62:	3301      	adds	r3, #1
1a011c64:	fbb2 f3f3 	udiv	r3, r2, r3
}
1a011c68:	4618      	mov	r0, r3
1a011c6a:	3710      	adds	r7, #16
1a011c6c:	46bd      	mov	sp, r7
1a011c6e:	bd80      	pop	{r7, pc}

1a011c70 <Chip_Clock_FindBaseClock>:

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a011c70:	b480      	push	{r7}
1a011c72:	b085      	sub	sp, #20
1a011c74:	af00      	add	r7, sp, #0
1a011c76:	4603      	mov	r3, r0
1a011c78:	80fb      	strh	r3, [r7, #6]
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a011c7a:	231c      	movs	r3, #28
1a011c7c:	73fb      	strb	r3, [r7, #15]
	int i = 0;
1a011c7e:	2300      	movs	r3, #0
1a011c80:	60bb      	str	r3, [r7, #8]

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a011c82:	e024      	b.n	1a011cce <Chip_Clock_FindBaseClock+0x5e>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a011c84:	491d      	ldr	r1, [pc, #116]	; (1a011cfc <Chip_Clock_FindBaseClock+0x8c>)
1a011c86:	68ba      	ldr	r2, [r7, #8]
1a011c88:	4613      	mov	r3, r2
1a011c8a:	005b      	lsls	r3, r3, #1
1a011c8c:	4413      	add	r3, r2
1a011c8e:	005b      	lsls	r3, r3, #1
1a011c90:	440b      	add	r3, r1
1a011c92:	881b      	ldrh	r3, [r3, #0]
1a011c94:	88fa      	ldrh	r2, [r7, #6]
1a011c96:	429a      	cmp	r2, r3
1a011c98:	d316      	bcc.n	1a011cc8 <Chip_Clock_FindBaseClock+0x58>
1a011c9a:	4918      	ldr	r1, [pc, #96]	; (1a011cfc <Chip_Clock_FindBaseClock+0x8c>)
1a011c9c:	68ba      	ldr	r2, [r7, #8]
1a011c9e:	4613      	mov	r3, r2
1a011ca0:	005b      	lsls	r3, r3, #1
1a011ca2:	4413      	add	r3, r2
1a011ca4:	005b      	lsls	r3, r3, #1
1a011ca6:	440b      	add	r3, r1
1a011ca8:	3302      	adds	r3, #2
1a011caa:	881b      	ldrh	r3, [r3, #0]
1a011cac:	88fa      	ldrh	r2, [r7, #6]
1a011cae:	429a      	cmp	r2, r3
1a011cb0:	d80a      	bhi.n	1a011cc8 <Chip_Clock_FindBaseClock+0x58>
			baseclk = periph_to_base[i].clkbase;
1a011cb2:	4912      	ldr	r1, [pc, #72]	; (1a011cfc <Chip_Clock_FindBaseClock+0x8c>)
1a011cb4:	68ba      	ldr	r2, [r7, #8]
1a011cb6:	4613      	mov	r3, r2
1a011cb8:	005b      	lsls	r3, r3, #1
1a011cba:	4413      	add	r3, r2
1a011cbc:	005b      	lsls	r3, r3, #1
1a011cbe:	440b      	add	r3, r1
1a011cc0:	3304      	adds	r3, #4
1a011cc2:	781b      	ldrb	r3, [r3, #0]
1a011cc4:	73fb      	strb	r3, [r7, #15]
1a011cc6:	e002      	b.n	1a011cce <Chip_Clock_FindBaseClock+0x5e>
		}
		else {
			i++;
1a011cc8:	68bb      	ldr	r3, [r7, #8]
1a011cca:	3301      	adds	r3, #1
1a011ccc:	60bb      	str	r3, [r7, #8]
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a011cce:	7bfb      	ldrb	r3, [r7, #15]
1a011cd0:	2b1c      	cmp	r3, #28
1a011cd2:	d10b      	bne.n	1a011cec <Chip_Clock_FindBaseClock+0x7c>
1a011cd4:	4909      	ldr	r1, [pc, #36]	; (1a011cfc <Chip_Clock_FindBaseClock+0x8c>)
1a011cd6:	68ba      	ldr	r2, [r7, #8]
1a011cd8:	4613      	mov	r3, r2
1a011cda:	005b      	lsls	r3, r3, #1
1a011cdc:	4413      	add	r3, r2
1a011cde:	005b      	lsls	r3, r3, #1
1a011ce0:	440b      	add	r3, r1
1a011ce2:	3304      	adds	r3, #4
1a011ce4:	781b      	ldrb	r3, [r3, #0]
1a011ce6:	7bfa      	ldrb	r2, [r7, #15]
1a011ce8:	429a      	cmp	r2, r3
1a011cea:	d1cb      	bne.n	1a011c84 <Chip_Clock_FindBaseClock+0x14>
		else {
			i++;
		}
	}

	return baseclk;
1a011cec:	7bfb      	ldrb	r3, [r7, #15]
}
1a011cee:	4618      	mov	r0, r3
1a011cf0:	3714      	adds	r7, #20
1a011cf2:	46bd      	mov	sp, r7
1a011cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a011cf8:	4770      	bx	lr
1a011cfa:	bf00      	nop
1a011cfc:	1a01a998 	.word	0x1a01a998

1a011d00 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a011d00:	b480      	push	{r7}
1a011d02:	b083      	sub	sp, #12
1a011d04:	af00      	add	r7, sp, #0
	volatile uint32_t delay = 1000;
1a011d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a011d0a:	603b      	str	r3, [r7, #0]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a011d0c:	4b15      	ldr	r3, [pc, #84]	; (1a011d64 <Chip_Clock_EnableCrystal+0x64>)
1a011d0e:	699b      	ldr	r3, [r3, #24]
1a011d10:	607b      	str	r3, [r7, #4]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a011d12:	687b      	ldr	r3, [r7, #4]
1a011d14:	f023 0302 	bic.w	r3, r3, #2
1a011d18:	607b      	str	r3, [r7, #4]
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a011d1a:	4b12      	ldr	r3, [pc, #72]	; (1a011d64 <Chip_Clock_EnableCrystal+0x64>)
1a011d1c:	699a      	ldr	r2, [r3, #24]
1a011d1e:	687b      	ldr	r3, [r7, #4]
1a011d20:	429a      	cmp	r2, r3
1a011d22:	d002      	beq.n	1a011d2a <Chip_Clock_EnableCrystal+0x2a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a011d24:	4a0f      	ldr	r2, [pc, #60]	; (1a011d64 <Chip_Clock_EnableCrystal+0x64>)
1a011d26:	687b      	ldr	r3, [r7, #4]
1a011d28:	6193      	str	r3, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a011d2a:	687b      	ldr	r3, [r7, #4]
1a011d2c:	f023 0301 	bic.w	r3, r3, #1
1a011d30:	607b      	str	r3, [r7, #4]
	if (OscRateIn >= 20000000) {
1a011d32:	4b0d      	ldr	r3, [pc, #52]	; (1a011d68 <Chip_Clock_EnableCrystal+0x68>)
1a011d34:	681b      	ldr	r3, [r3, #0]
1a011d36:	4a0d      	ldr	r2, [pc, #52]	; (1a011d6c <Chip_Clock_EnableCrystal+0x6c>)
1a011d38:	4293      	cmp	r3, r2
1a011d3a:	d903      	bls.n	1a011d44 <Chip_Clock_EnableCrystal+0x44>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a011d3c:	687b      	ldr	r3, [r7, #4]
1a011d3e:	f043 0304 	orr.w	r3, r3, #4
1a011d42:	607b      	str	r3, [r7, #4]

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a011d44:	4a07      	ldr	r2, [pc, #28]	; (1a011d64 <Chip_Clock_EnableCrystal+0x64>)
1a011d46:	687b      	ldr	r3, [r7, #4]
1a011d48:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a011d4a:	bf00      	nop
1a011d4c:	683b      	ldr	r3, [r7, #0]
1a011d4e:	1e5a      	subs	r2, r3, #1
1a011d50:	603a      	str	r2, [r7, #0]
1a011d52:	2b00      	cmp	r3, #0
1a011d54:	d1fa      	bne.n	1a011d4c <Chip_Clock_EnableCrystal+0x4c>
}
1a011d56:	bf00      	nop
1a011d58:	370c      	adds	r7, #12
1a011d5a:	46bd      	mov	sp, r7
1a011d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a011d60:	4770      	bx	lr
1a011d62:	bf00      	nop
1a011d64:	40050000 	.word	0x40050000
1a011d68:	1a018850 	.word	0x1a018850
1a011d6c:	01312cff 	.word	0x01312cff

1a011d70 <Chip_Clock_SetupMainPLLHz>:
	LPC_CGU->XTAL_OSC_CTRL |= 1;
}

/* Configures the main PLL */
uint32_t Chip_Clock_SetupMainPLLHz(CHIP_CGU_CLKIN_T Input, uint32_t MinHz, uint32_t DesiredHz, uint32_t MaxHz)
{
1a011d70:	b580      	push	{r7, lr}
1a011d72:	b08a      	sub	sp, #40	; 0x28
1a011d74:	af00      	add	r7, sp, #0
1a011d76:	60b9      	str	r1, [r7, #8]
1a011d78:	607a      	str	r2, [r7, #4]
1a011d7a:	603b      	str	r3, [r7, #0]
1a011d7c:	4603      	mov	r3, r0
1a011d7e:	73fb      	strb	r3, [r7, #15]
	uint32_t freqin = Chip_Clock_GetClockInputHz(Input);
1a011d80:	7bfb      	ldrb	r3, [r7, #15]
1a011d82:	4618      	mov	r0, r3
1a011d84:	f000 f9b2 	bl	1a0120ec <Chip_Clock_GetClockInputHz>
1a011d88:	61f8      	str	r0, [r7, #28]
	uint32_t Mult, LastMult, MultEnd;
	uint32_t freqout, freqout2;

	if (DesiredHz != 0xFFFFFFFF) {
1a011d8a:	687b      	ldr	r3, [r7, #4]
1a011d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
1a011d90:	d051      	beq.n	1a011e36 <Chip_Clock_SetupMainPLLHz+0xc6>
		/* Test DesiredHz rounded down */
		Mult = DesiredHz / freqin;
1a011d92:	687a      	ldr	r2, [r7, #4]
1a011d94:	69fb      	ldr	r3, [r7, #28]
1a011d96:	fbb2 f3f3 	udiv	r3, r2, r3
1a011d9a:	627b      	str	r3, [r7, #36]	; 0x24
		freqout = Chip_Clock_TestMainPLLMultiplier(freqin, Mult, MinHz, MaxHz);
1a011d9c:	683b      	ldr	r3, [r7, #0]
1a011d9e:	68ba      	ldr	r2, [r7, #8]
1a011da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
1a011da2:	69f8      	ldr	r0, [r7, #28]
1a011da4:	f7ff ff20 	bl	1a011be8 <Chip_Clock_TestMainPLLMultiplier>
1a011da8:	61b8      	str	r0, [r7, #24]

		/* Test DesiredHz rounded up */
		Mult++;
1a011daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a011dac:	3301      	adds	r3, #1
1a011dae:	627b      	str	r3, [r7, #36]	; 0x24
		freqout2 = Chip_Clock_TestMainPLLMultiplier(freqin, Mult, MinHz, MaxHz);
1a011db0:	683b      	ldr	r3, [r7, #0]
1a011db2:	68ba      	ldr	r2, [r7, #8]
1a011db4:	6a79      	ldr	r1, [r7, #36]	; 0x24
1a011db6:	69f8      	ldr	r0, [r7, #28]
1a011db8:	f7ff ff16 	bl	1a011be8 <Chip_Clock_TestMainPLLMultiplier>
1a011dbc:	6178      	str	r0, [r7, #20]

		if (freqout && !freqout2) {	/* rounding up is no good? set first multiplier */
1a011dbe:	69bb      	ldr	r3, [r7, #24]
1a011dc0:	2b00      	cmp	r3, #0
1a011dc2:	d00c      	beq.n	1a011dde <Chip_Clock_SetupMainPLLHz+0x6e>
1a011dc4:	697b      	ldr	r3, [r7, #20]
1a011dc6:	2b00      	cmp	r3, #0
1a011dc8:	d109      	bne.n	1a011dde <Chip_Clock_SetupMainPLLHz+0x6e>
			Mult--;
1a011dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a011dcc:	3b01      	subs	r3, #1
1a011dce:	627b      	str	r3, [r7, #36]	; 0x24
			return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a011dd0:	7bfb      	ldrb	r3, [r7, #15]
1a011dd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
1a011dd4:	4618      	mov	r0, r3
1a011dd6:	f000 f85f 	bl	1a011e98 <Chip_Clock_SetupMainPLLMult>
1a011dda:	4603      	mov	r3, r0
1a011ddc:	e057      	b.n	1a011e8e <Chip_Clock_SetupMainPLLHz+0x11e>
		}
		if (!freqout && freqout2) {	/* didn't work until rounded up? set 2nd multiplier */
1a011dde:	69bb      	ldr	r3, [r7, #24]
1a011de0:	2b00      	cmp	r3, #0
1a011de2:	d109      	bne.n	1a011df8 <Chip_Clock_SetupMainPLLHz+0x88>
1a011de4:	697b      	ldr	r3, [r7, #20]
1a011de6:	2b00      	cmp	r3, #0
1a011de8:	d006      	beq.n	1a011df8 <Chip_Clock_SetupMainPLLHz+0x88>
			return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a011dea:	7bfb      	ldrb	r3, [r7, #15]
1a011dec:	6a79      	ldr	r1, [r7, #36]	; 0x24
1a011dee:	4618      	mov	r0, r3
1a011df0:	f000 f852 	bl	1a011e98 <Chip_Clock_SetupMainPLLMult>
1a011df4:	4603      	mov	r3, r0
1a011df6:	e04a      	b.n	1a011e8e <Chip_Clock_SetupMainPLLHz+0x11e>
		}

		if (freqout && freqout2) {	/* either multiplier okay? choose closer one */
1a011df8:	69bb      	ldr	r3, [r7, #24]
1a011dfa:	2b00      	cmp	r3, #0
1a011dfc:	d01b      	beq.n	1a011e36 <Chip_Clock_SetupMainPLLHz+0xc6>
1a011dfe:	697b      	ldr	r3, [r7, #20]
1a011e00:	2b00      	cmp	r3, #0
1a011e02:	d018      	beq.n	1a011e36 <Chip_Clock_SetupMainPLLHz+0xc6>
			if ((DesiredHz - freqout) > (freqout2 - DesiredHz)) {
1a011e04:	687a      	ldr	r2, [r7, #4]
1a011e06:	69bb      	ldr	r3, [r7, #24]
1a011e08:	1ad2      	subs	r2, r2, r3
1a011e0a:	6979      	ldr	r1, [r7, #20]
1a011e0c:	687b      	ldr	r3, [r7, #4]
1a011e0e:	1acb      	subs	r3, r1, r3
1a011e10:	429a      	cmp	r2, r3
1a011e12:	d909      	bls.n	1a011e28 <Chip_Clock_SetupMainPLLHz+0xb8>
				Mult--;
1a011e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a011e16:	3b01      	subs	r3, #1
1a011e18:	627b      	str	r3, [r7, #36]	; 0x24
				return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a011e1a:	7bfb      	ldrb	r3, [r7, #15]
1a011e1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
1a011e1e:	4618      	mov	r0, r3
1a011e20:	f000 f83a 	bl	1a011e98 <Chip_Clock_SetupMainPLLMult>
1a011e24:	4603      	mov	r3, r0
1a011e26:	e032      	b.n	1a011e8e <Chip_Clock_SetupMainPLLHz+0x11e>
			}
			else {
				return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a011e28:	7bfb      	ldrb	r3, [r7, #15]
1a011e2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
1a011e2c:	4618      	mov	r0, r3
1a011e2e:	f000 f833 	bl	1a011e98 <Chip_Clock_SetupMainPLLMult>
1a011e32:	4603      	mov	r3, r0
1a011e34:	e02b      	b.n	1a011e8e <Chip_Clock_SetupMainPLLHz+0x11e>
		}
	}

	/* Neither multiplier okay? Try to start at MinHz and increment.
	   This should find the highest multiplier that is still good */
	Mult = MinHz / freqin;
1a011e36:	68ba      	ldr	r2, [r7, #8]
1a011e38:	69fb      	ldr	r3, [r7, #28]
1a011e3a:	fbb2 f3f3 	udiv	r3, r2, r3
1a011e3e:	627b      	str	r3, [r7, #36]	; 0x24
	MultEnd = MaxHz / freqin;
1a011e40:	683a      	ldr	r2, [r7, #0]
1a011e42:	69fb      	ldr	r3, [r7, #28]
1a011e44:	fbb2 f3f3 	udiv	r3, r2, r3
1a011e48:	613b      	str	r3, [r7, #16]
	LastMult = 0;
1a011e4a:	2300      	movs	r3, #0
1a011e4c:	623b      	str	r3, [r7, #32]
	while (1) {
		freqout = Chip_Clock_TestMainPLLMultiplier(freqin, Mult, MinHz, MaxHz);
1a011e4e:	683b      	ldr	r3, [r7, #0]
1a011e50:	68ba      	ldr	r2, [r7, #8]
1a011e52:	6a79      	ldr	r1, [r7, #36]	; 0x24
1a011e54:	69f8      	ldr	r0, [r7, #28]
1a011e56:	f7ff fec7 	bl	1a011be8 <Chip_Clock_TestMainPLLMultiplier>
1a011e5a:	61b8      	str	r0, [r7, #24]

		if (freqout) {
1a011e5c:	69bb      	ldr	r3, [r7, #24]
1a011e5e:	2b00      	cmp	r3, #0
1a011e60:	d001      	beq.n	1a011e66 <Chip_Clock_SetupMainPLLHz+0xf6>
			LastMult = Mult;
1a011e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a011e64:	623b      	str	r3, [r7, #32]
		}

		if (Mult >= MultEnd) {
1a011e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1a011e68:	693b      	ldr	r3, [r7, #16]
1a011e6a:	429a      	cmp	r2, r3
1a011e6c:	d203      	bcs.n	1a011e76 <Chip_Clock_SetupMainPLLHz+0x106>
			break;
		}
		Mult++;
1a011e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a011e70:	3301      	adds	r3, #1
1a011e72:	627b      	str	r3, [r7, #36]	; 0x24
	}
1a011e74:	e7eb      	b.n	1a011e4e <Chip_Clock_SetupMainPLLHz+0xde>
		if (freqout) {
			LastMult = Mult;
		}

		if (Mult >= MultEnd) {
			break;
1a011e76:	bf00      	nop
		}
		Mult++;
	}

	if (LastMult) {
1a011e78:	6a3b      	ldr	r3, [r7, #32]
1a011e7a:	2b00      	cmp	r3, #0
1a011e7c:	d006      	beq.n	1a011e8c <Chip_Clock_SetupMainPLLHz+0x11c>
		return Chip_Clock_SetupMainPLLMult(Input, LastMult);
1a011e7e:	7bfb      	ldrb	r3, [r7, #15]
1a011e80:	6a39      	ldr	r1, [r7, #32]
1a011e82:	4618      	mov	r0, r3
1a011e84:	f000 f808 	bl	1a011e98 <Chip_Clock_SetupMainPLLMult>
1a011e88:	4603      	mov	r3, r0
1a011e8a:	e000      	b.n	1a011e8e <Chip_Clock_SetupMainPLLHz+0x11e>
	}

	return 0;
1a011e8c:	2300      	movs	r3, #0
}
1a011e8e:	4618      	mov	r0, r3
1a011e90:	3728      	adds	r7, #40	; 0x28
1a011e92:	46bd      	mov	sp, r7
1a011e94:	bd80      	pop	{r7, pc}
1a011e96:	bf00      	nop

1a011e98 <Chip_Clock_SetupMainPLLMult>:

/* Directly set the PLL multipler */
uint32_t Chip_Clock_SetupMainPLLMult(CHIP_CGU_CLKIN_T Input, uint32_t mult)
{
1a011e98:	b580      	push	{r7, lr}
1a011e9a:	b08a      	sub	sp, #40	; 0x28
1a011e9c:	af00      	add	r7, sp, #0
1a011e9e:	4603      	mov	r3, r0
1a011ea0:	6039      	str	r1, [r7, #0]
1a011ea2:	71fb      	strb	r3, [r7, #7]
	volatile uint32_t delay = 250;
1a011ea4:	23fa      	movs	r3, #250	; 0xfa
1a011ea6:	60fb      	str	r3, [r7, #12]
	uint32_t freq = Chip_Clock_GetClockInputHz(Input);
1a011ea8:	79fb      	ldrb	r3, [r7, #7]
1a011eaa:	4618      	mov	r0, r3
1a011eac:	f000 f91e 	bl	1a0120ec <Chip_Clock_GetClockInputHz>
1a011eb0:	61b8      	str	r0, [r7, #24]
	uint32_t msel = 0, nsel = 0, psel = 0, pval = 1;
1a011eb2:	2300      	movs	r3, #0
1a011eb4:	617b      	str	r3, [r7, #20]
1a011eb6:	2300      	movs	r3, #0
1a011eb8:	613b      	str	r3, [r7, #16]
1a011eba:	2300      	movs	r3, #0
1a011ebc:	627b      	str	r3, [r7, #36]	; 0x24
1a011ebe:	2301      	movs	r3, #1
1a011ec0:	623b      	str	r3, [r7, #32]
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a011ec2:	4b30      	ldr	r3, [pc, #192]	; (1a011f84 <Chip_Clock_SetupMainPLLMult+0xec>)
1a011ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1a011ec6:	61fb      	str	r3, [r7, #28]

	freq *= mult;
1a011ec8:	69bb      	ldr	r3, [r7, #24]
1a011eca:	683a      	ldr	r2, [r7, #0]
1a011ecc:	fb02 f303 	mul.w	r3, r2, r3
1a011ed0:	61bb      	str	r3, [r7, #24]
	msel = mult - 1;
1a011ed2:	683b      	ldr	r3, [r7, #0]
1a011ed4:	3b01      	subs	r3, #1
1a011ed6:	617b      	str	r3, [r7, #20]

	PLLReg &= ~(0x1F << 24);/* clear input source bits */
1a011ed8:	69fb      	ldr	r3, [r7, #28]
1a011eda:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
1a011ede:	61fb      	str	r3, [r7, #28]
	PLLReg |= Input << 24;	/* set input source bits to parameter */
1a011ee0:	79fb      	ldrb	r3, [r7, #7]
1a011ee2:	061b      	lsls	r3, r3, #24
1a011ee4:	461a      	mov	r2, r3
1a011ee6:	69fb      	ldr	r3, [r7, #28]
1a011ee8:	4313      	orrs	r3, r2
1a011eea:	61fb      	str	r3, [r7, #28]

	/* Clear other PLL input bits */
	PLLReg &= ~((1 << 6) |	/* FBSEL */
1a011eec:	69fa      	ldr	r2, [r7, #28]
1a011eee:	4b26      	ldr	r3, [pc, #152]	; (1a011f88 <Chip_Clock_SetupMainPLLMult+0xf0>)
1a011ef0:	4013      	ands	r3, r2
1a011ef2:	61fb      	str	r3, [r7, #28]
				(1 << 1) |	/* BYPASS */
				(1 << 7) |	/* DIRECT */
				(0x03 << 8) | (0xFF << 16) | (0x03 << 12));	/* PSEL, MSEL, NSEL- divider ratios */

	if (freq < 156000000) {
1a011ef4:	69bb      	ldr	r3, [r7, #24]
1a011ef6:	4a25      	ldr	r2, [pc, #148]	; (1a011f8c <Chip_Clock_SetupMainPLLMult+0xf4>)
1a011ef8:	4293      	cmp	r3, r2
1a011efa:	d81c      	bhi.n	1a011f36 <Chip_Clock_SetupMainPLLMult+0x9e>
		/* psel is encoded such that 0=1, 1=2, 2=4, 3=8 */
		while ((2 * (pval) * freq) < 156000000) {
1a011efc:	e005      	b.n	1a011f0a <Chip_Clock_SetupMainPLLMult+0x72>
			psel++;
1a011efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a011f00:	3301      	adds	r3, #1
1a011f02:	627b      	str	r3, [r7, #36]	; 0x24
			pval *= 2;
1a011f04:	6a3b      	ldr	r3, [r7, #32]
1a011f06:	005b      	lsls	r3, r3, #1
1a011f08:	623b      	str	r3, [r7, #32]
				(1 << 7) |	/* DIRECT */
				(0x03 << 8) | (0xFF << 16) | (0x03 << 12));	/* PSEL, MSEL, NSEL- divider ratios */

	if (freq < 156000000) {
		/* psel is encoded such that 0=1, 1=2, 2=4, 3=8 */
		while ((2 * (pval) * freq) < 156000000) {
1a011f0a:	6a3b      	ldr	r3, [r7, #32]
1a011f0c:	69ba      	ldr	r2, [r7, #24]
1a011f0e:	fb02 f303 	mul.w	r3, r2, r3
1a011f12:	005b      	lsls	r3, r3, #1
1a011f14:	4a1d      	ldr	r2, [pc, #116]	; (1a011f8c <Chip_Clock_SetupMainPLLMult+0xf4>)
1a011f16:	4293      	cmp	r3, r2
1a011f18:	d9f1      	bls.n	1a011efe <Chip_Clock_SetupMainPLLMult+0x66>
			psel++;
			pval *= 2;
		}

		PLLReg |= (msel << 16) | (nsel << 12) | (psel << 8) | (1 << 6);	/* dividers + FBSEL */
1a011f1a:	697b      	ldr	r3, [r7, #20]
1a011f1c:	041a      	lsls	r2, r3, #16
1a011f1e:	693b      	ldr	r3, [r7, #16]
1a011f20:	031b      	lsls	r3, r3, #12
1a011f22:	431a      	orrs	r2, r3
1a011f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a011f26:	021b      	lsls	r3, r3, #8
1a011f28:	431a      	orrs	r2, r3
1a011f2a:	69fb      	ldr	r3, [r7, #28]
1a011f2c:	4313      	orrs	r3, r2
1a011f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a011f32:	61fb      	str	r3, [r7, #28]
1a011f34:	e015      	b.n	1a011f62 <Chip_Clock_SetupMainPLLMult+0xca>
	}
	else if (freq < 320000000) {
1a011f36:	69bb      	ldr	r3, [r7, #24]
1a011f38:	4a15      	ldr	r2, [pc, #84]	; (1a011f90 <Chip_Clock_SetupMainPLLMult+0xf8>)
1a011f3a:	4293      	cmp	r3, r2
1a011f3c:	d80d      	bhi.n	1a011f5a <Chip_Clock_SetupMainPLLMult+0xc2>
		PLLReg |= (msel << 16) | (nsel << 12) | (psel << 8) | (1 << 7) | (1 << 6);	/* dividers + DIRECT + FBSEL */
1a011f3e:	697b      	ldr	r3, [r7, #20]
1a011f40:	041a      	lsls	r2, r3, #16
1a011f42:	693b      	ldr	r3, [r7, #16]
1a011f44:	031b      	lsls	r3, r3, #12
1a011f46:	431a      	orrs	r2, r3
1a011f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a011f4a:	021b      	lsls	r3, r3, #8
1a011f4c:	431a      	orrs	r2, r3
1a011f4e:	69fb      	ldr	r3, [r7, #28]
1a011f50:	4313      	orrs	r3, r2
1a011f52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
1a011f56:	61fb      	str	r3, [r7, #28]
1a011f58:	e003      	b.n	1a011f62 <Chip_Clock_SetupMainPLLMult+0xca>
	}
	else {
		Chip_Clock_DisableMainPLL();
1a011f5a:	f000 f87b 	bl	1a012054 <Chip_Clock_DisableMainPLL>
		return 0;
1a011f5e:	2300      	movs	r3, #0
1a011f60:	e00b      	b.n	1a011f7a <Chip_Clock_SetupMainPLLMult+0xe2>
	}
	LPC_CGU->PLL1_CTRL = PLLReg & ~(1 << 0);
1a011f62:	4a08      	ldr	r2, [pc, #32]	; (1a011f84 <Chip_Clock_SetupMainPLLMult+0xec>)
1a011f64:	69fb      	ldr	r3, [r7, #28]
1a011f66:	f023 0301 	bic.w	r3, r3, #1
1a011f6a:	6453      	str	r3, [r2, #68]	; 0x44

	/* Wait for 50uSec */
	while(delay--) {}
1a011f6c:	bf00      	nop
1a011f6e:	68fb      	ldr	r3, [r7, #12]
1a011f70:	1e5a      	subs	r2, r3, #1
1a011f72:	60fa      	str	r2, [r7, #12]
1a011f74:	2b00      	cmp	r3, #0
1a011f76:	d1fa      	bne.n	1a011f6e <Chip_Clock_SetupMainPLLMult+0xd6>

	return freq;
1a011f78:	69bb      	ldr	r3, [r7, #24]
}
1a011f7a:	4618      	mov	r0, r3
1a011f7c:	3728      	adds	r7, #40	; 0x28
1a011f7e:	46bd      	mov	sp, r7
1a011f80:	bd80      	pop	{r7, pc}
1a011f82:	bf00      	nop
1a011f84:	40050000 	.word	0x40050000
1a011f88:	ff00cc3d 	.word	0xff00cc3d
1a011f8c:	094c5eff 	.word	0x094c5eff
1a011f90:	1312cfff 	.word	0x1312cfff

1a011f94 <Chip_Clock_GetMainPLLHz>:

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a011f94:	b580      	push	{r7, lr}
1a011f96:	b08c      	sub	sp, #48	; 0x30
1a011f98:	af00      	add	r7, sp, #0
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a011f9a:	4b2c      	ldr	r3, [pc, #176]	; (1a01204c <Chip_Clock_GetMainPLLHz+0xb8>)
1a011f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1a011f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a011fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a011fa2:	0e1b      	lsrs	r3, r3, #24
1a011fa4:	b2db      	uxtb	r3, r3
1a011fa6:	f003 030f 	and.w	r3, r3, #15
1a011faa:	b2db      	uxtb	r3, r3
1a011fac:	4618      	mov	r0, r3
1a011fae:	f000 f89d 	bl	1a0120ec <Chip_Clock_GetClockInputHz>
1a011fb2:	62b8      	str	r0, [r7, #40]	; 0x28
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a011fb4:	4a26      	ldr	r2, [pc, #152]	; (1a012050 <Chip_Clock_GetMainPLLHz+0xbc>)
1a011fb6:	1d3b      	adds	r3, r7, #4
1a011fb8:	6810      	ldr	r0, [r2, #0]
1a011fba:	6018      	str	r0, [r3, #0]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a011fbc:	4b23      	ldr	r3, [pc, #140]	; (1a01204c <Chip_Clock_GetMainPLLHz+0xb8>)
1a011fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a011fc0:	f003 0301 	and.w	r3, r3, #1
1a011fc4:	2b00      	cmp	r3, #0
1a011fc6:	d101      	bne.n	1a011fcc <Chip_Clock_GetMainPLLHz+0x38>
		return 0;
1a011fc8:	2300      	movs	r3, #0
1a011fca:	e03b      	b.n	1a012044 <Chip_Clock_GetMainPLLHz+0xb0>
	}

	msel = (PLLReg >> 16) & 0xFF;
1a011fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a011fce:	0c1b      	lsrs	r3, r3, #16
1a011fd0:	b2db      	uxtb	r3, r3
1a011fd2:	627b      	str	r3, [r7, #36]	; 0x24
	nsel = (PLLReg >> 12) & 0x3;
1a011fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a011fd6:	0b1b      	lsrs	r3, r3, #12
1a011fd8:	f003 0303 	and.w	r3, r3, #3
1a011fdc:	623b      	str	r3, [r7, #32]
	psel = (PLLReg >> 8) & 0x3;
1a011fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a011fe0:	0a1b      	lsrs	r3, r3, #8
1a011fe2:	f003 0303 	and.w	r3, r3, #3
1a011fe6:	61fb      	str	r3, [r7, #28]
	direct = (PLLReg >> 7) & 0x1;
1a011fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a011fea:	09db      	lsrs	r3, r3, #7
1a011fec:	f003 0301 	and.w	r3, r3, #1
1a011ff0:	61bb      	str	r3, [r7, #24]
	fbsel = (PLLReg >> 6) & 0x1;
1a011ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a011ff4:	099b      	lsrs	r3, r3, #6
1a011ff6:	f003 0301 	and.w	r3, r3, #1
1a011ffa:	617b      	str	r3, [r7, #20]

	m = msel + 1;
1a011ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a011ffe:	3301      	adds	r3, #1
1a012000:	613b      	str	r3, [r7, #16]
	n = nsel + 1;
1a012002:	6a3b      	ldr	r3, [r7, #32]
1a012004:	3301      	adds	r3, #1
1a012006:	60fb      	str	r3, [r7, #12]
	p = ptab[psel];
1a012008:	1d3a      	adds	r2, r7, #4
1a01200a:	69fb      	ldr	r3, [r7, #28]
1a01200c:	4413      	add	r3, r2
1a01200e:	781b      	ldrb	r3, [r3, #0]
1a012010:	60bb      	str	r3, [r7, #8]

	if (direct || fbsel) {
1a012012:	69bb      	ldr	r3, [r7, #24]
1a012014:	2b00      	cmp	r3, #0
1a012016:	d102      	bne.n	1a01201e <Chip_Clock_GetMainPLLHz+0x8a>
1a012018:	697b      	ldr	r3, [r7, #20]
1a01201a:	2b00      	cmp	r3, #0
1a01201c:	d007      	beq.n	1a01202e <Chip_Clock_GetMainPLLHz+0x9a>
		return m * (freq / n);
1a01201e:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a012020:	68fb      	ldr	r3, [r7, #12]
1a012022:	fbb2 f3f3 	udiv	r3, r2, r3
1a012026:	693a      	ldr	r2, [r7, #16]
1a012028:	fb02 f303 	mul.w	r3, r2, r3
1a01202c:	e00a      	b.n	1a012044 <Chip_Clock_GetMainPLLHz+0xb0>
	}

	return (m / (2 * p)) * (freq / n);
1a01202e:	68bb      	ldr	r3, [r7, #8]
1a012030:	005b      	lsls	r3, r3, #1
1a012032:	693a      	ldr	r2, [r7, #16]
1a012034:	fbb2 f3f3 	udiv	r3, r2, r3
1a012038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
1a01203a:	68fa      	ldr	r2, [r7, #12]
1a01203c:	fbb1 f2f2 	udiv	r2, r1, r2
1a012040:	fb02 f303 	mul.w	r3, r2, r3
}
1a012044:	4618      	mov	r0, r3
1a012046:	3730      	adds	r7, #48	; 0x30
1a012048:	46bd      	mov	sp, r7
1a01204a:	bd80      	pop	{r7, pc}
1a01204c:	40050000 	.word	0x40050000
1a012050:	1a01aa04 	.word	0x1a01aa04

1a012054 <Chip_Clock_DisableMainPLL>:

/* Disables the main PLL */
void Chip_Clock_DisableMainPLL(void)
{
1a012054:	b480      	push	{r7}
1a012056:	af00      	add	r7, sp, #0
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a012058:	4a05      	ldr	r2, [pc, #20]	; (1a012070 <Chip_Clock_DisableMainPLL+0x1c>)
1a01205a:	4b05      	ldr	r3, [pc, #20]	; (1a012070 <Chip_Clock_DisableMainPLL+0x1c>)
1a01205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1a01205e:	f043 0301 	orr.w	r3, r3, #1
1a012062:	6453      	str	r3, [r2, #68]	; 0x44
}
1a012064:	bf00      	nop
1a012066:	46bd      	mov	sp, r7
1a012068:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01206c:	4770      	bx	lr
1a01206e:	bf00      	nop
1a012070:	40050000 	.word	0x40050000

1a012074 <Chip_Clock_GetDividerSource>:
	}
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
1a012074:	b480      	push	{r7}
1a012076:	b085      	sub	sp, #20
1a012078:	af00      	add	r7, sp, #0
1a01207a:	4603      	mov	r3, r0
1a01207c:	71fb      	strb	r3, [r7, #7]
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a01207e:	4a0c      	ldr	r2, [pc, #48]	; (1a0120b0 <Chip_Clock_GetDividerSource+0x3c>)
1a012080:	79fb      	ldrb	r3, [r7, #7]
1a012082:	3312      	adds	r3, #18
1a012084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a012088:	60fb      	str	r3, [r7, #12]

	if (reg & 1) {	/* divider is powered down */
1a01208a:	68fb      	ldr	r3, [r7, #12]
1a01208c:	f003 0301 	and.w	r3, r3, #1
1a012090:	2b00      	cmp	r3, #0
1a012092:	d001      	beq.n	1a012098 <Chip_Clock_GetDividerSource+0x24>
		return CLKINPUT_PD;
1a012094:	2311      	movs	r3, #17
1a012096:	e005      	b.n	1a0120a4 <Chip_Clock_GetDividerSource+0x30>
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a012098:	68fb      	ldr	r3, [r7, #12]
1a01209a:	0e1b      	lsrs	r3, r3, #24
1a01209c:	b2db      	uxtb	r3, r3
1a01209e:	f003 031f 	and.w	r3, r3, #31
1a0120a2:	b2db      	uxtb	r3, r3
}
1a0120a4:	4618      	mov	r0, r3
1a0120a6:	3714      	adds	r7, #20
1a0120a8:	46bd      	mov	sp, r7
1a0120aa:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0120ae:	4770      	bx	lr
1a0120b0:	40050000 	.word	0x40050000

1a0120b4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
1a0120b4:	b480      	push	{r7}
1a0120b6:	b083      	sub	sp, #12
1a0120b8:	af00      	add	r7, sp, #0
1a0120ba:	4603      	mov	r3, r0
1a0120bc:	71fb      	strb	r3, [r7, #7]
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0120be:	4a09      	ldr	r2, [pc, #36]	; (1a0120e4 <Chip_Clock_GetDividerDivisor+0x30>)
1a0120c0:	79fb      	ldrb	r3, [r7, #7]
1a0120c2:	3312      	adds	r3, #18
1a0120c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0120c8:	089b      	lsrs	r3, r3, #2
1a0120ca:	b2da      	uxtb	r2, r3
1a0120cc:	79fb      	ldrb	r3, [r7, #7]
1a0120ce:	4906      	ldr	r1, [pc, #24]	; (1a0120e8 <Chip_Clock_GetDividerDivisor+0x34>)
1a0120d0:	5ccb      	ldrb	r3, [r1, r3]
1a0120d2:	4013      	ands	r3, r2
1a0120d4:	b2db      	uxtb	r3, r3
}
1a0120d6:	4618      	mov	r0, r3
1a0120d8:	370c      	adds	r7, #12
1a0120da:	46bd      	mov	sp, r7
1a0120dc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0120e0:	4770      	bx	lr
1a0120e2:	bf00      	nop
1a0120e4:	40050000 	.word	0x40050000
1a0120e8:	1a01aa08 	.word	0x1a01aa08

1a0120ec <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0120ec:	b580      	push	{r7, lr}
1a0120ee:	b084      	sub	sp, #16
1a0120f0:	af00      	add	r7, sp, #0
1a0120f2:	4603      	mov	r3, r0
1a0120f4:	71fb      	strb	r3, [r7, #7]
	uint32_t rate = 0;
1a0120f6:	2300      	movs	r3, #0
1a0120f8:	60fb      	str	r3, [r7, #12]

	switch (input) {
1a0120fa:	79fb      	ldrb	r3, [r7, #7]
1a0120fc:	2b11      	cmp	r3, #17
1a0120fe:	d87f      	bhi.n	1a012200 <Chip_Clock_GetClockInputHz+0x114>
1a012100:	a201      	add	r2, pc, #4	; (adr r2, 1a012108 <Chip_Clock_GetClockInputHz+0x1c>)
1a012102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a012106:	bf00      	nop
1a012108:	1a012151 	.word	0x1a012151
1a01210c:	1a012159 	.word	0x1a012159
1a012110:	1a01215f 	.word	0x1a01215f
1a012114:	1a012173 	.word	0x1a012173
1a012118:	1a01218d 	.word	0x1a01218d
1a01211c:	1a012201 	.word	0x1a012201
1a012120:	1a012195 	.word	0x1a012195
1a012124:	1a01219d 	.word	0x1a01219d
1a012128:	1a0121a5 	.word	0x1a0121a5
1a01212c:	1a0121ad 	.word	0x1a0121ad
1a012130:	1a012201 	.word	0x1a012201
1a012134:	1a012201 	.word	0x1a012201
1a012138:	1a0121b5 	.word	0x1a0121b5
1a01213c:	1a0121c3 	.word	0x1a0121c3
1a012140:	1a0121d1 	.word	0x1a0121d1
1a012144:	1a0121df 	.word	0x1a0121df
1a012148:	1a0121ed 	.word	0x1a0121ed
1a01214c:	1a0121fb 	.word	0x1a0121fb
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a012150:	f44f 4300 	mov.w	r3, #32768	; 0x8000
1a012154:	60fb      	str	r3, [r7, #12]
		break;
1a012156:	e056      	b.n	1a012206 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a012158:	4b2d      	ldr	r3, [pc, #180]	; (1a012210 <Chip_Clock_GetClockInputHz+0x124>)
1a01215a:	60fb      	str	r3, [r7, #12]
		break;
1a01215c:	e053      	b.n	1a012206 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a01215e:	4b2d      	ldr	r3, [pc, #180]	; (1a012214 <Chip_Clock_GetClockInputHz+0x128>)
1a012160:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a012164:	f003 0307 	and.w	r3, r3, #7
1a012168:	2b04      	cmp	r3, #4
1a01216a:	d04b      	beq.n	1a012204 <Chip_Clock_GetClockInputHz+0x118>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a01216c:	4b2a      	ldr	r3, [pc, #168]	; (1a012218 <Chip_Clock_GetClockInputHz+0x12c>)
1a01216e:	60fb      	str	r3, [r7, #12]
		}
		break;
1a012170:	e048      	b.n	1a012204 <Chip_Clock_GetClockInputHz+0x118>

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a012172:	4b28      	ldr	r3, [pc, #160]	; (1a012214 <Chip_Clock_GetClockInputHz+0x128>)
1a012174:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a012178:	f003 0307 	and.w	r3, r3, #7
1a01217c:	2b04      	cmp	r3, #4
1a01217e:	d002      	beq.n	1a012186 <Chip_Clock_GetClockInputHz+0x9a>
			rate = 25000000; /* MII uses 25 MHz */
1a012180:	4b25      	ldr	r3, [pc, #148]	; (1a012218 <Chip_Clock_GetClockInputHz+0x12c>)
1a012182:	60fb      	str	r3, [r7, #12]
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;
1a012184:	e03f      	b.n	1a012206 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a012186:	4b25      	ldr	r3, [pc, #148]	; (1a01221c <Chip_Clock_GetClockInputHz+0x130>)
1a012188:	60fb      	str	r3, [r7, #12]
		}
		break;
1a01218a:	e03c      	b.n	1a012206 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a01218c:	4b24      	ldr	r3, [pc, #144]	; (1a012220 <Chip_Clock_GetClockInputHz+0x134>)
1a01218e:	681b      	ldr	r3, [r3, #0]
1a012190:	60fb      	str	r3, [r7, #12]
		break;
1a012192:	e038      	b.n	1a012206 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a012194:	4b23      	ldr	r3, [pc, #140]	; (1a012224 <Chip_Clock_GetClockInputHz+0x138>)
1a012196:	681b      	ldr	r3, [r3, #0]
1a012198:	60fb      	str	r3, [r7, #12]
		break;
1a01219a:	e034      	b.n	1a012206 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a01219c:	4b22      	ldr	r3, [pc, #136]	; (1a012228 <Chip_Clock_GetClockInputHz+0x13c>)
1a01219e:	681b      	ldr	r3, [r3, #0]
1a0121a0:	60fb      	str	r3, [r7, #12]
		break;
1a0121a2:	e030      	b.n	1a012206 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0121a4:	4b20      	ldr	r3, [pc, #128]	; (1a012228 <Chip_Clock_GetClockInputHz+0x13c>)
1a0121a6:	685b      	ldr	r3, [r3, #4]
1a0121a8:	60fb      	str	r3, [r7, #12]
		break;
1a0121aa:	e02c      	b.n	1a012206 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0121ac:	f7ff fef2 	bl	1a011f94 <Chip_Clock_GetMainPLLHz>
1a0121b0:	60f8      	str	r0, [r7, #12]
		break;
1a0121b2:	e028      	b.n	1a012206 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0121b4:	79fb      	ldrb	r3, [r7, #7]
1a0121b6:	2100      	movs	r1, #0
1a0121b8:	4618      	mov	r0, r3
1a0121ba:	f7ff fd39 	bl	1a011c30 <Chip_Clock_GetDivRate>
1a0121be:	60f8      	str	r0, [r7, #12]
		break;
1a0121c0:	e021      	b.n	1a012206 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0121c2:	79fb      	ldrb	r3, [r7, #7]
1a0121c4:	2101      	movs	r1, #1
1a0121c6:	4618      	mov	r0, r3
1a0121c8:	f7ff fd32 	bl	1a011c30 <Chip_Clock_GetDivRate>
1a0121cc:	60f8      	str	r0, [r7, #12]
		break;
1a0121ce:	e01a      	b.n	1a012206 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0121d0:	79fb      	ldrb	r3, [r7, #7]
1a0121d2:	2102      	movs	r1, #2
1a0121d4:	4618      	mov	r0, r3
1a0121d6:	f7ff fd2b 	bl	1a011c30 <Chip_Clock_GetDivRate>
1a0121da:	60f8      	str	r0, [r7, #12]
		break;
1a0121dc:	e013      	b.n	1a012206 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0121de:	79fb      	ldrb	r3, [r7, #7]
1a0121e0:	2103      	movs	r1, #3
1a0121e2:	4618      	mov	r0, r3
1a0121e4:	f7ff fd24 	bl	1a011c30 <Chip_Clock_GetDivRate>
1a0121e8:	60f8      	str	r0, [r7, #12]
		break;
1a0121ea:	e00c      	b.n	1a012206 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0121ec:	79fb      	ldrb	r3, [r7, #7]
1a0121ee:	2104      	movs	r1, #4
1a0121f0:	4618      	mov	r0, r3
1a0121f2:	f7ff fd1d 	bl	1a011c30 <Chip_Clock_GetDivRate>
1a0121f6:	60f8      	str	r0, [r7, #12]
		break;
1a0121f8:	e005      	b.n	1a012206 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKINPUT_PD:
		rate = 0;
1a0121fa:	2300      	movs	r3, #0
1a0121fc:	60fb      	str	r3, [r7, #12]
		break;
1a0121fe:	e002      	b.n	1a012206 <Chip_Clock_GetClockInputHz+0x11a>

	default:
		break;
1a012200:	bf00      	nop
1a012202:	e000      	b.n	1a012206 <Chip_Clock_GetClockInputHz+0x11a>
	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
		}
		break;
1a012204:	bf00      	nop

	default:
		break;
	}

	return rate;
1a012206:	68fb      	ldr	r3, [r7, #12]
}
1a012208:	4618      	mov	r0, r3
1a01220a:	3710      	adds	r7, #16
1a01220c:	46bd      	mov	sp, r7
1a01220e:	bd80      	pop	{r7, pc}
1a012210:	00b71b00 	.word	0x00b71b00
1a012214:	40043000 	.word	0x40043000
1a012218:	017d7840 	.word	0x017d7840
1a01221c:	02faf080 	.word	0x02faf080
1a012220:	1a018854 	.word	0x1a018854
1a012224:	1a018850 	.word	0x1a018850
1a012228:	10087414 	.word	0x10087414

1a01222c <Chip_Clock_GetBaseClocktHz>:

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a01222c:	b580      	push	{r7, lr}
1a01222e:	b082      	sub	sp, #8
1a012230:	af00      	add	r7, sp, #0
1a012232:	4603      	mov	r3, r0
1a012234:	71fb      	strb	r3, [r7, #7]
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a012236:	79fb      	ldrb	r3, [r7, #7]
1a012238:	4618      	mov	r0, r3
1a01223a:	f000 f877 	bl	1a01232c <Chip_Clock_GetBaseClock>
1a01223e:	4603      	mov	r3, r0
1a012240:	4618      	mov	r0, r3
1a012242:	f7ff ff53 	bl	1a0120ec <Chip_Clock_GetClockInputHz>
1a012246:	4603      	mov	r3, r0
}
1a012248:	4618      	mov	r0, r3
1a01224a:	3708      	adds	r7, #8
1a01224c:	46bd      	mov	sp, r7
1a01224e:	bd80      	pop	{r7, pc}

1a012250 <Chip_Clock_SetBaseClock>:

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a012250:	b490      	push	{r4, r7}
1a012252:	b084      	sub	sp, #16
1a012254:	af00      	add	r7, sp, #0
1a012256:	4604      	mov	r4, r0
1a012258:	4608      	mov	r0, r1
1a01225a:	4611      	mov	r1, r2
1a01225c:	461a      	mov	r2, r3
1a01225e:	4623      	mov	r3, r4
1a012260:	71fb      	strb	r3, [r7, #7]
1a012262:	4603      	mov	r3, r0
1a012264:	71bb      	strb	r3, [r7, #6]
1a012266:	460b      	mov	r3, r1
1a012268:	717b      	strb	r3, [r7, #5]
1a01226a:	4613      	mov	r3, r2
1a01226c:	713b      	strb	r3, [r7, #4]
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a01226e:	4a1d      	ldr	r2, [pc, #116]	; (1a0122e4 <Chip_Clock_SetBaseClock+0x94>)
1a012270:	79fb      	ldrb	r3, [r7, #7]
1a012272:	3316      	adds	r3, #22
1a012274:	009b      	lsls	r3, r3, #2
1a012276:	4413      	add	r3, r2
1a012278:	685b      	ldr	r3, [r3, #4]
1a01227a:	60fb      	str	r3, [r7, #12]

	if (BaseClock < CLK_BASE_NONE) {
1a01227c:	79fb      	ldrb	r3, [r7, #7]
1a01227e:	2b1b      	cmp	r3, #27
1a012280:	d822      	bhi.n	1a0122c8 <Chip_Clock_SetBaseClock+0x78>
		if (Input != CLKINPUT_PD) {
1a012282:	79bb      	ldrb	r3, [r7, #6]
1a012284:	2b11      	cmp	r3, #17
1a012286:	d028      	beq.n	1a0122da <Chip_Clock_SetBaseClock+0x8a>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a012288:	68fa      	ldr	r2, [r7, #12]
1a01228a:	4b17      	ldr	r3, [pc, #92]	; (1a0122e8 <Chip_Clock_SetBaseClock+0x98>)
1a01228c:	4013      	ands	r3, r2
1a01228e:	60fb      	str	r3, [r7, #12]

			if (autoblocken) {
1a012290:	797b      	ldrb	r3, [r7, #5]
1a012292:	2b00      	cmp	r3, #0
1a012294:	d003      	beq.n	1a01229e <Chip_Clock_SetBaseClock+0x4e>
				reg |= (1 << 11);
1a012296:	68fb      	ldr	r3, [r7, #12]
1a012298:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a01229c:	60fb      	str	r3, [r7, #12]
			}
			if (powerdn) {
1a01229e:	793b      	ldrb	r3, [r7, #4]
1a0122a0:	2b00      	cmp	r3, #0
1a0122a2:	d003      	beq.n	1a0122ac <Chip_Clock_SetBaseClock+0x5c>
				reg |= (1 << 0);
1a0122a4:	68fb      	ldr	r3, [r7, #12]
1a0122a6:	f043 0301 	orr.w	r3, r3, #1
1a0122aa:	60fb      	str	r3, [r7, #12]
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0122ac:	79bb      	ldrb	r3, [r7, #6]
1a0122ae:	061b      	lsls	r3, r3, #24
1a0122b0:	461a      	mov	r2, r3
1a0122b2:	68fb      	ldr	r3, [r7, #12]
1a0122b4:	4313      	orrs	r3, r2
1a0122b6:	60fb      	str	r3, [r7, #12]

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0122b8:	4a0a      	ldr	r2, [pc, #40]	; (1a0122e4 <Chip_Clock_SetBaseClock+0x94>)
1a0122ba:	79fb      	ldrb	r3, [r7, #7]
1a0122bc:	3316      	adds	r3, #22
1a0122be:	009b      	lsls	r3, r3, #2
1a0122c0:	4413      	add	r3, r2
1a0122c2:	68fa      	ldr	r2, [r7, #12]
1a0122c4:	605a      	str	r2, [r3, #4]
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
	}
}
1a0122c6:	e008      	b.n	1a0122da <Chip_Clock_SetBaseClock+0x8a>

			LPC_CGU->BASE_CLK[BaseClock] = reg;
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0122c8:	4906      	ldr	r1, [pc, #24]	; (1a0122e4 <Chip_Clock_SetBaseClock+0x94>)
1a0122ca:	79fb      	ldrb	r3, [r7, #7]
1a0122cc:	68fa      	ldr	r2, [r7, #12]
1a0122ce:	f042 0201 	orr.w	r2, r2, #1
1a0122d2:	3316      	adds	r3, #22
1a0122d4:	009b      	lsls	r3, r3, #2
1a0122d6:	440b      	add	r3, r1
1a0122d8:	605a      	str	r2, [r3, #4]
	}
}
1a0122da:	bf00      	nop
1a0122dc:	3710      	adds	r7, #16
1a0122de:	46bd      	mov	sp, r7
1a0122e0:	bc90      	pop	{r4, r7}
1a0122e2:	4770      	bx	lr
1a0122e4:	40050000 	.word	0x40050000
1a0122e8:	e0fff7fe 	.word	0xe0fff7fe

1a0122ec <Chip_Clock_DisableBaseClock>:
	}
}

/* Disables a base clock source */
void Chip_Clock_DisableBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
1a0122ec:	b480      	push	{r7}
1a0122ee:	b083      	sub	sp, #12
1a0122f0:	af00      	add	r7, sp, #0
1a0122f2:	4603      	mov	r3, r0
1a0122f4:	71fb      	strb	r3, [r7, #7]
	if (BaseClock < CLK_BASE_NONE) {
1a0122f6:	79fb      	ldrb	r3, [r7, #7]
1a0122f8:	2b1b      	cmp	r3, #27
1a0122fa:	d80e      	bhi.n	1a01231a <Chip_Clock_DisableBaseClock+0x2e>
		LPC_CGU->BASE_CLK[BaseClock] |= 1;
1a0122fc:	480a      	ldr	r0, [pc, #40]	; (1a012328 <Chip_Clock_DisableBaseClock+0x3c>)
1a0122fe:	79f9      	ldrb	r1, [r7, #7]
1a012300:	4a09      	ldr	r2, [pc, #36]	; (1a012328 <Chip_Clock_DisableBaseClock+0x3c>)
1a012302:	79fb      	ldrb	r3, [r7, #7]
1a012304:	3316      	adds	r3, #22
1a012306:	009b      	lsls	r3, r3, #2
1a012308:	4413      	add	r3, r2
1a01230a:	685b      	ldr	r3, [r3, #4]
1a01230c:	f043 0201 	orr.w	r2, r3, #1
1a012310:	f101 0316 	add.w	r3, r1, #22
1a012314:	009b      	lsls	r3, r3, #2
1a012316:	4403      	add	r3, r0
1a012318:	605a      	str	r2, [r3, #4]
	}
}
1a01231a:	bf00      	nop
1a01231c:	370c      	adds	r7, #12
1a01231e:	46bd      	mov	sp, r7
1a012320:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012324:	4770      	bx	lr
1a012326:	bf00      	nop
1a012328:	40050000 	.word	0x40050000

1a01232c <Chip_Clock_GetBaseClock>:
	return enabled;
}

/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
1a01232c:	b480      	push	{r7}
1a01232e:	b085      	sub	sp, #20
1a012330:	af00      	add	r7, sp, #0
1a012332:	4603      	mov	r3, r0
1a012334:	71fb      	strb	r3, [r7, #7]
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a012336:	79fb      	ldrb	r3, [r7, #7]
1a012338:	2b1b      	cmp	r3, #27
1a01233a:	d901      	bls.n	1a012340 <Chip_Clock_GetBaseClock+0x14>
		return CLKINPUT_PD;
1a01233c:	2311      	movs	r3, #17
1a01233e:	e013      	b.n	1a012368 <Chip_Clock_GetBaseClock+0x3c>
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a012340:	4a0c      	ldr	r2, [pc, #48]	; (1a012374 <Chip_Clock_GetBaseClock+0x48>)
1a012342:	79fb      	ldrb	r3, [r7, #7]
1a012344:	3316      	adds	r3, #22
1a012346:	009b      	lsls	r3, r3, #2
1a012348:	4413      	add	r3, r2
1a01234a:	685b      	ldr	r3, [r3, #4]
1a01234c:	60fb      	str	r3, [r7, #12]

	/* base clock is powered down? */
	if (reg & 1) {
1a01234e:	68fb      	ldr	r3, [r7, #12]
1a012350:	f003 0301 	and.w	r3, r3, #1
1a012354:	2b00      	cmp	r3, #0
1a012356:	d001      	beq.n	1a01235c <Chip_Clock_GetBaseClock+0x30>
		return CLKINPUT_PD;
1a012358:	2311      	movs	r3, #17
1a01235a:	e005      	b.n	1a012368 <Chip_Clock_GetBaseClock+0x3c>
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a01235c:	68fb      	ldr	r3, [r7, #12]
1a01235e:	0e1b      	lsrs	r3, r3, #24
1a012360:	b2db      	uxtb	r3, r3
1a012362:	f003 031f 	and.w	r3, r3, #31
1a012366:	b2db      	uxtb	r3, r3
}
1a012368:	4618      	mov	r0, r3
1a01236a:	3714      	adds	r7, #20
1a01236c:	46bd      	mov	sp, r7
1a01236e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012372:	4770      	bx	lr
1a012374:	40050000 	.word	0x40050000

1a012378 <Chip_Clock_EnableOpts>:

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
1a012378:	b480      	push	{r7}
1a01237a:	b085      	sub	sp, #20
1a01237c:	af00      	add	r7, sp, #0
1a01237e:	603b      	str	r3, [r7, #0]
1a012380:	4603      	mov	r3, r0
1a012382:	80fb      	strh	r3, [r7, #6]
1a012384:	460b      	mov	r3, r1
1a012386:	717b      	strb	r3, [r7, #5]
1a012388:	4613      	mov	r3, r2
1a01238a:	713b      	strb	r3, [r7, #4]
	uint32_t reg = 1;
1a01238c:	2301      	movs	r3, #1
1a01238e:	60fb      	str	r3, [r7, #12]

	if (autoen) {
1a012390:	797b      	ldrb	r3, [r7, #5]
1a012392:	2b00      	cmp	r3, #0
1a012394:	d003      	beq.n	1a01239e <Chip_Clock_EnableOpts+0x26>
		reg |= (1 << 1);
1a012396:	68fb      	ldr	r3, [r7, #12]
1a012398:	f043 0302 	orr.w	r3, r3, #2
1a01239c:	60fb      	str	r3, [r7, #12]
	}
	if (wakeupen) {
1a01239e:	793b      	ldrb	r3, [r7, #4]
1a0123a0:	2b00      	cmp	r3, #0
1a0123a2:	d003      	beq.n	1a0123ac <Chip_Clock_EnableOpts+0x34>
		reg |= (1 << 2);
1a0123a4:	68fb      	ldr	r3, [r7, #12]
1a0123a6:	f043 0304 	orr.w	r3, r3, #4
1a0123aa:	60fb      	str	r3, [r7, #12]
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0123ac:	683b      	ldr	r3, [r7, #0]
1a0123ae:	2b02      	cmp	r3, #2
1a0123b0:	d103      	bne.n	1a0123ba <Chip_Clock_EnableOpts+0x42>
		reg |= (1 << 5);
1a0123b2:	68fb      	ldr	r3, [r7, #12]
1a0123b4:	f043 0320 	orr.w	r3, r3, #32
1a0123b8:	60fb      	str	r3, [r7, #12]
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0123ba:	88fb      	ldrh	r3, [r7, #6]
1a0123bc:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a0123c0:	d308      	bcc.n	1a0123d4 <Chip_Clock_EnableOpts+0x5c>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0123c2:	490a      	ldr	r1, [pc, #40]	; (1a0123ec <Chip_Clock_EnableOpts+0x74>)
1a0123c4:	88fb      	ldrh	r3, [r7, #6]
1a0123c6:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a0123ca:	3320      	adds	r3, #32
1a0123cc:	68fa      	ldr	r2, [r7, #12]
1a0123ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
	}
}
1a0123d2:	e005      	b.n	1a0123e0 <Chip_Clock_EnableOpts+0x68>
	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0123d4:	4906      	ldr	r1, [pc, #24]	; (1a0123f0 <Chip_Clock_EnableOpts+0x78>)
1a0123d6:	88fb      	ldrh	r3, [r7, #6]
1a0123d8:	3320      	adds	r3, #32
1a0123da:	68fa      	ldr	r2, [r7, #12]
1a0123dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	}
}
1a0123e0:	bf00      	nop
1a0123e2:	3714      	adds	r7, #20
1a0123e4:	46bd      	mov	sp, r7
1a0123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0123ea:	4770      	bx	lr
1a0123ec:	40052000 	.word	0x40052000
1a0123f0:	40051000 	.word	0x40051000

1a0123f4 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
1a0123f4:	b480      	push	{r7}
1a0123f6:	b083      	sub	sp, #12
1a0123f8:	af00      	add	r7, sp, #0
1a0123fa:	4603      	mov	r3, r0
1a0123fc:	80fb      	strh	r3, [r7, #6]
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0123fe:	88fb      	ldrh	r3, [r7, #6]
1a012400:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a012404:	d310      	bcc.n	1a012428 <Chip_Clock_Enable+0x34>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a012406:	4911      	ldr	r1, [pc, #68]	; (1a01244c <Chip_Clock_Enable+0x58>)
1a012408:	88fb      	ldrh	r3, [r7, #6]
1a01240a:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a01240e:	480f      	ldr	r0, [pc, #60]	; (1a01244c <Chip_Clock_Enable+0x58>)
1a012410:	88fa      	ldrh	r2, [r7, #6]
1a012412:	f5a2 72a1 	sub.w	r2, r2, #322	; 0x142
1a012416:	3220      	adds	r2, #32
1a012418:	f850 2032 	ldr.w	r2, [r0, r2, lsl #3]
1a01241c:	f042 0201 	orr.w	r2, r2, #1
1a012420:	3320      	adds	r3, #32
1a012422:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
	}
}
1a012426:	e00b      	b.n	1a012440 <Chip_Clock_Enable+0x4c>
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a012428:	4909      	ldr	r1, [pc, #36]	; (1a012450 <Chip_Clock_Enable+0x5c>)
1a01242a:	88fb      	ldrh	r3, [r7, #6]
1a01242c:	4808      	ldr	r0, [pc, #32]	; (1a012450 <Chip_Clock_Enable+0x5c>)
1a01242e:	88fa      	ldrh	r2, [r7, #6]
1a012430:	3220      	adds	r2, #32
1a012432:	f850 2032 	ldr.w	r2, [r0, r2, lsl #3]
1a012436:	f042 0201 	orr.w	r2, r2, #1
1a01243a:	3320      	adds	r3, #32
1a01243c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	}
}
1a012440:	bf00      	nop
1a012442:	370c      	adds	r7, #12
1a012444:	46bd      	mov	sp, r7
1a012446:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01244a:	4770      	bx	lr
1a01244c:	40052000 	.word	0x40052000
1a012450:	40051000 	.word	0x40051000

1a012454 <Chip_Clock_RTCEnable>:

/* Enable RTC Clock */
void Chip_Clock_RTCEnable(void)
{
1a012454:	b480      	push	{r7}
1a012456:	af00      	add	r7, sp, #0
	LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));	/* Reset 32Khz oscillator */
1a012458:	4a08      	ldr	r2, [pc, #32]	; (1a01247c <Chip_Clock_RTCEnable+0x28>)
1a01245a:	4b08      	ldr	r3, [pc, #32]	; (1a01247c <Chip_Clock_RTCEnable+0x28>)
1a01245c:	685b      	ldr	r3, [r3, #4]
1a01245e:	f023 030c 	bic.w	r3, r3, #12
1a012462:	6053      	str	r3, [r2, #4]
	LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);	/* Enable 32 kHz & 1 kHz on osc32k and release reset */
1a012464:	4a05      	ldr	r2, [pc, #20]	; (1a01247c <Chip_Clock_RTCEnable+0x28>)
1a012466:	4b05      	ldr	r3, [pc, #20]	; (1a01247c <Chip_Clock_RTCEnable+0x28>)
1a012468:	685b      	ldr	r3, [r3, #4]
1a01246a:	f043 0303 	orr.w	r3, r3, #3
1a01246e:	6053      	str	r3, [r2, #4]
}
1a012470:	bf00      	nop
1a012472:	46bd      	mov	sp, r7
1a012474:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012478:	4770      	bx	lr
1a01247a:	bf00      	nop
1a01247c:	40043000 	.word	0x40043000

1a012480 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
1a012480:	b480      	push	{r7}
1a012482:	b083      	sub	sp, #12
1a012484:	af00      	add	r7, sp, #0
1a012486:	4603      	mov	r3, r0
1a012488:	80fb      	strh	r3, [r7, #6]
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a01248a:	88fb      	ldrh	r3, [r7, #6]
1a01248c:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a012490:	d310      	bcc.n	1a0124b4 <Chip_Clock_Disable+0x34>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a012492:	4911      	ldr	r1, [pc, #68]	; (1a0124d8 <Chip_Clock_Disable+0x58>)
1a012494:	88fb      	ldrh	r3, [r7, #6]
1a012496:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a01249a:	480f      	ldr	r0, [pc, #60]	; (1a0124d8 <Chip_Clock_Disable+0x58>)
1a01249c:	88fa      	ldrh	r2, [r7, #6]
1a01249e:	f5a2 72a1 	sub.w	r2, r2, #322	; 0x142
1a0124a2:	3220      	adds	r2, #32
1a0124a4:	f850 2032 	ldr.w	r2, [r0, r2, lsl #3]
1a0124a8:	f022 0201 	bic.w	r2, r2, #1
1a0124ac:	3320      	adds	r3, #32
1a0124ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
	}
}
1a0124b2:	e00b      	b.n	1a0124cc <Chip_Clock_Disable+0x4c>
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a0124b4:	4909      	ldr	r1, [pc, #36]	; (1a0124dc <Chip_Clock_Disable+0x5c>)
1a0124b6:	88fb      	ldrh	r3, [r7, #6]
1a0124b8:	4808      	ldr	r0, [pc, #32]	; (1a0124dc <Chip_Clock_Disable+0x5c>)
1a0124ba:	88fa      	ldrh	r2, [r7, #6]
1a0124bc:	3220      	adds	r2, #32
1a0124be:	f850 2032 	ldr.w	r2, [r0, r2, lsl #3]
1a0124c2:	f022 0201 	bic.w	r2, r2, #1
1a0124c6:	3320      	adds	r3, #32
1a0124c8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	}
}
1a0124cc:	bf00      	nop
1a0124ce:	370c      	adds	r7, #12
1a0124d0:	46bd      	mov	sp, r7
1a0124d2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0124d6:	4770      	bx	lr
1a0124d8:	40052000 	.word	0x40052000
1a0124dc:	40051000 	.word	0x40051000

1a0124e0 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0124e0:	b580      	push	{r7, lr}
1a0124e2:	b086      	sub	sp, #24
1a0124e4:	af00      	add	r7, sp, #0
1a0124e6:	4603      	mov	r3, r0
1a0124e8:	80fb      	strh	r3, [r7, #6]
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0124ea:	88fb      	ldrh	r3, [r7, #6]
1a0124ec:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a0124f0:	d308      	bcc.n	1a012504 <Chip_Clock_GetRate+0x24>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0124f2:	4a1b      	ldr	r2, [pc, #108]	; (1a012560 <Chip_Clock_GetRate+0x80>)
1a0124f4:	88fb      	ldrh	r3, [r7, #6]
1a0124f6:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a0124fa:	3320      	adds	r3, #32
1a0124fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
1a012500:	617b      	str	r3, [r7, #20]
1a012502:	e005      	b.n	1a012510 <Chip_Clock_GetRate+0x30>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a012504:	4a17      	ldr	r2, [pc, #92]	; (1a012564 <Chip_Clock_GetRate+0x84>)
1a012506:	88fb      	ldrh	r3, [r7, #6]
1a012508:	3320      	adds	r3, #32
1a01250a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
1a01250e:	617b      	str	r3, [r7, #20]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a012510:	697b      	ldr	r3, [r7, #20]
1a012512:	f003 0301 	and.w	r3, r3, #1
1a012516:	2b00      	cmp	r3, #0
1a012518:	d01b      	beq.n	1a012552 <Chip_Clock_GetRate+0x72>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a01251a:	88fb      	ldrh	r3, [r7, #6]
1a01251c:	4618      	mov	r0, r3
1a01251e:	f7ff fba7 	bl	1a011c70 <Chip_Clock_FindBaseClock>
1a012522:	4603      	mov	r3, r0
1a012524:	72fb      	strb	r3, [r7, #11]

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a012526:	7afb      	ldrb	r3, [r7, #11]
1a012528:	4618      	mov	r0, r3
1a01252a:	f7ff fe7f 	bl	1a01222c <Chip_Clock_GetBaseClocktHz>
1a01252e:	60f8      	str	r0, [r7, #12]

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a012530:	697b      	ldr	r3, [r7, #20]
1a012532:	095b      	lsrs	r3, r3, #5
1a012534:	f003 0307 	and.w	r3, r3, #7
1a012538:	2b00      	cmp	r3, #0
1a01253a:	d102      	bne.n	1a012542 <Chip_Clock_GetRate+0x62>
			div = 1;
1a01253c:	2301      	movs	r3, #1
1a01253e:	613b      	str	r3, [r7, #16]
1a012540:	e001      	b.n	1a012546 <Chip_Clock_GetRate+0x66>
		}
		else {
			div = 2;/* No other dividers supported */
1a012542:	2302      	movs	r3, #2
1a012544:	613b      	str	r3, [r7, #16]

		}
		rate = rate / div;
1a012546:	68fa      	ldr	r2, [r7, #12]
1a012548:	693b      	ldr	r3, [r7, #16]
1a01254a:	fbb2 f3f3 	udiv	r3, r2, r3
1a01254e:	60fb      	str	r3, [r7, #12]
1a012550:	e001      	b.n	1a012556 <Chip_Clock_GetRate+0x76>
	}
	else {
		rate = 0;
1a012552:	2300      	movs	r3, #0
1a012554:	60fb      	str	r3, [r7, #12]
	}

	return rate;
1a012556:	68fb      	ldr	r3, [r7, #12]
}
1a012558:	4618      	mov	r0, r3
1a01255a:	3718      	adds	r7, #24
1a01255c:	46bd      	mov	sp, r7
1a01255e:	bd80      	pop	{r7, pc}
1a012560:	40052000 	.word	0x40052000
1a012564:	40051000 	.word	0x40051000

1a012568 <Chip_Clock_DisablePLL>:
	LPC_CGU->PLL[pllnum].PLL_CTRL &= ~1;
}

/* Disables the audio or USB PLL */
void Chip_Clock_DisablePLL(CHIP_CGU_USB_AUDIO_PLL_T pllnum)
{
1a012568:	b480      	push	{r7}
1a01256a:	b083      	sub	sp, #12
1a01256c:	af00      	add	r7, sp, #0
1a01256e:	4603      	mov	r3, r0
1a012570:	71fb      	strb	r3, [r7, #7]
	LPC_CGU->PLL[pllnum].PLL_CTRL |= 1;
1a012572:	490a      	ldr	r1, [pc, #40]	; (1a01259c <Chip_Clock_DisablePLL+0x34>)
1a012574:	79fb      	ldrb	r3, [r7, #7]
1a012576:	4809      	ldr	r0, [pc, #36]	; (1a01259c <Chip_Clock_DisablePLL+0x34>)
1a012578:	79fa      	ldrb	r2, [r7, #7]
1a01257a:	0112      	lsls	r2, r2, #4
1a01257c:	4402      	add	r2, r0
1a01257e:	3220      	adds	r2, #32
1a012580:	6812      	ldr	r2, [r2, #0]
1a012582:	f042 0201 	orr.w	r2, r2, #1
1a012586:	011b      	lsls	r3, r3, #4
1a012588:	440b      	add	r3, r1
1a01258a:	3320      	adds	r3, #32
1a01258c:	601a      	str	r2, [r3, #0]
}
1a01258e:	bf00      	nop
1a012590:	370c      	adds	r7, #12
1a012592:	46bd      	mov	sp, r7
1a012594:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012598:	4770      	bx	lr
1a01259a:	bf00      	nop
1a01259c:	40050000 	.word	0x40050000

1a0125a0 <Chip_DAC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the DAC peripheral */
void Chip_DAC_Init(LPC_DAC_T *pDAC)
{
1a0125a0:	b580      	push	{r7, lr}
1a0125a2:	b082      	sub	sp, #8
1a0125a4:	af00      	add	r7, sp, #0
1a0125a6:	6078      	str	r0, [r7, #4]
	Chip_Clock_EnableOpts(CLK_APB3_DAC, true, true, 1);
1a0125a8:	2301      	movs	r3, #1
1a0125aa:	2201      	movs	r2, #1
1a0125ac:	2101      	movs	r1, #1
1a0125ae:	2002      	movs	r0, #2
1a0125b0:	f7ff fee2 	bl	1a012378 <Chip_Clock_EnableOpts>

	/* Set maximum update rate 1MHz */
	Chip_DAC_SetBias(pDAC, DAC_MAX_UPDATE_RATE_1MHz);
1a0125b4:	2100      	movs	r1, #0
1a0125b6:	6878      	ldr	r0, [r7, #4]
1a0125b8:	f000 f81e 	bl	1a0125f8 <Chip_DAC_SetBias>
}
1a0125bc:	bf00      	nop
1a0125be:	3708      	adds	r7, #8
1a0125c0:	46bd      	mov	sp, r7
1a0125c2:	bd80      	pop	{r7, pc}

1a0125c4 <Chip_DAC_UpdateValue>:
	Chip_Clock_Disable(CLK_APB3_DAC);
}

/* Update value to DAC buffer*/
void Chip_DAC_UpdateValue(LPC_DAC_T *pDAC, uint32_t dac_value)
{
1a0125c4:	b480      	push	{r7}
1a0125c6:	b085      	sub	sp, #20
1a0125c8:	af00      	add	r7, sp, #0
1a0125ca:	6078      	str	r0, [r7, #4]
1a0125cc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;

	tmp = pDAC->CR & DAC_BIAS_EN;
1a0125ce:	687b      	ldr	r3, [r7, #4]
1a0125d0:	681b      	ldr	r3, [r3, #0]
1a0125d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
1a0125d6:	60fb      	str	r3, [r7, #12]
	tmp |= DAC_VALUE(dac_value);
1a0125d8:	683b      	ldr	r3, [r7, #0]
1a0125da:	019b      	lsls	r3, r3, #6
1a0125dc:	b29b      	uxth	r3, r3
1a0125de:	68fa      	ldr	r2, [r7, #12]
1a0125e0:	4313      	orrs	r3, r2
1a0125e2:	60fb      	str	r3, [r7, #12]
	/* Update value */
	pDAC->CR = tmp;
1a0125e4:	687b      	ldr	r3, [r7, #4]
1a0125e6:	68fa      	ldr	r2, [r7, #12]
1a0125e8:	601a      	str	r2, [r3, #0]
}
1a0125ea:	bf00      	nop
1a0125ec:	3714      	adds	r7, #20
1a0125ee:	46bd      	mov	sp, r7
1a0125f0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0125f4:	4770      	bx	lr
1a0125f6:	bf00      	nop

1a0125f8 <Chip_DAC_SetBias>:

/* Set Maximum update rate for DAC */
void Chip_DAC_SetBias(LPC_DAC_T *pDAC, uint32_t bias)
{
1a0125f8:	b480      	push	{r7}
1a0125fa:	b083      	sub	sp, #12
1a0125fc:	af00      	add	r7, sp, #0
1a0125fe:	6078      	str	r0, [r7, #4]
1a012600:	6039      	str	r1, [r7, #0]
	pDAC->CR &= ~DAC_BIAS_EN;
1a012602:	687b      	ldr	r3, [r7, #4]
1a012604:	681b      	ldr	r3, [r3, #0]
1a012606:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
1a01260a:	687b      	ldr	r3, [r7, #4]
1a01260c:	601a      	str	r2, [r3, #0]

	if (bias  == DAC_MAX_UPDATE_RATE_400kHz) {
1a01260e:	683b      	ldr	r3, [r7, #0]
1a012610:	2b01      	cmp	r3, #1
1a012612:	d105      	bne.n	1a012620 <Chip_DAC_SetBias+0x28>
		pDAC->CR |= DAC_BIAS_EN;
1a012614:	687b      	ldr	r3, [r7, #4]
1a012616:	681b      	ldr	r3, [r3, #0]
1a012618:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
1a01261c:	687b      	ldr	r3, [r7, #4]
1a01261e:	601a      	str	r2, [r3, #0]
	}
}
1a012620:	bf00      	nop
1a012622:	370c      	adds	r7, #12
1a012624:	46bd      	mov	sp, r7
1a012626:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01262a:	4770      	bx	lr

1a01262c <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a01262c:	b480      	push	{r7}
1a01262e:	b089      	sub	sp, #36	; 0x24
1a012630:	af00      	add	r7, sp, #0
	//                ; Set bits 20-23 to enable CP10 and CP11 coprocessors
	//                ORR R1, R1, #(0xF << 20)
	//                ; Write back the modified value to the CPACR
	//                STR R1, [R0]

	volatile uint32_t *regCpacr = (uint32_t *) LPC_CPACR;
1a012632:	4b16      	ldr	r3, [pc, #88]	; (1a01268c <fpuInit+0x60>)
1a012634:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *regMvfr0 = (uint32_t *) SCB_MVFR0;
1a012636:	4b16      	ldr	r3, [pc, #88]	; (1a012690 <fpuInit+0x64>)
1a012638:	61bb      	str	r3, [r7, #24]
	volatile uint32_t *regMvfr1 = (uint32_t *) SCB_MVFR1;
1a01263a:	4b16      	ldr	r3, [pc, #88]	; (1a012694 <fpuInit+0x68>)
1a01263c:	617b      	str	r3, [r7, #20]
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;
1a01263e:	2300      	movs	r3, #0
1a012640:	74fb      	strb	r3, [r7, #19]

	Mvfr0 = *regMvfr0;
1a012642:	69bb      	ldr	r3, [r7, #24]
1a012644:	681b      	ldr	r3, [r3, #0]
1a012646:	60bb      	str	r3, [r7, #8]
	Mvfr1 = *regMvfr1;
1a012648:	697b      	ldr	r3, [r7, #20]
1a01264a:	681b      	ldr	r3, [r3, #0]
1a01264c:	607b      	str	r3, [r7, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a01264e:	68bb      	ldr	r3, [r7, #8]
1a012650:	4a11      	ldr	r2, [pc, #68]	; (1a012698 <fpuInit+0x6c>)
1a012652:	4293      	cmp	r3, r2
1a012654:	d105      	bne.n	1a012662 <fpuInit+0x36>
1a012656:	687b      	ldr	r3, [r7, #4]
1a012658:	4a10      	ldr	r2, [pc, #64]	; (1a01269c <fpuInit+0x70>)
1a01265a:	4293      	cmp	r3, r2
1a01265c:	d101      	bne.n	1a012662 <fpuInit+0x36>
1a01265e:	2301      	movs	r3, #1
1a012660:	e000      	b.n	1a012664 <fpuInit+0x38>
1a012662:	2300      	movs	r3, #0
1a012664:	74fb      	strb	r3, [r7, #19]

	if (vfpPresent) {
1a012666:	7cfb      	ldrb	r3, [r7, #19]
1a012668:	2b00      	cmp	r3, #0
1a01266a:	d009      	beq.n	1a012680 <fpuInit+0x54>
		Cpacr = *regCpacr;
1a01266c:	69fb      	ldr	r3, [r7, #28]
1a01266e:	681b      	ldr	r3, [r3, #0]
1a012670:	60fb      	str	r3, [r7, #12]
		Cpacr |= (0xF << 20);
1a012672:	68fb      	ldr	r3, [r7, #12]
1a012674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a012678:	60fb      	str	r3, [r7, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a01267a:	68fa      	ldr	r2, [r7, #12]
1a01267c:	69fb      	ldr	r3, [r7, #28]
1a01267e:	601a      	str	r2, [r3, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a012680:	bf00      	nop
1a012682:	3724      	adds	r7, #36	; 0x24
1a012684:	46bd      	mov	sp, r7
1a012686:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01268a:	4770      	bx	lr
1a01268c:	e000ed88 	.word	0xe000ed88
1a012690:	e000ef40 	.word	0xe000ef40
1a012694:	e000ef44 	.word	0xe000ef44
1a012698:	10110021 	.word	0x10110021
1a01269c:	11000011 	.word	0x11000011

1a0126a0 <enableClk>:
/*****************************************************************************
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
1a0126a0:	b580      	push	{r7, lr}
1a0126a2:	b082      	sub	sp, #8
1a0126a4:	af00      	add	r7, sp, #0
1a0126a6:	4603      	mov	r3, r0
1a0126a8:	71fb      	strb	r3, [r7, #7]
	Chip_Clock_Enable(i2c[id].clk);
1a0126aa:	79fa      	ldrb	r2, [r7, #7]
1a0126ac:	4907      	ldr	r1, [pc, #28]	; (1a0126cc <enableClk+0x2c>)
1a0126ae:	4613      	mov	r3, r2
1a0126b0:	00db      	lsls	r3, r3, #3
1a0126b2:	1a9b      	subs	r3, r3, r2
1a0126b4:	009b      	lsls	r3, r3, #2
1a0126b6:	440b      	add	r3, r1
1a0126b8:	3304      	adds	r3, #4
1a0126ba:	881b      	ldrh	r3, [r3, #0]
1a0126bc:	4618      	mov	r0, r3
1a0126be:	f7ff fe99 	bl	1a0123f4 <Chip_Clock_Enable>
}
1a0126c2:	bf00      	nop
1a0126c4:	3708      	adds	r7, #8
1a0126c6:	46bd      	mov	sp, r7
1a0126c8:	bd80      	pop	{r7, pc}
1a0126ca:	bf00      	nop
1a0126cc:	10086078 	.word	0x10086078

1a0126d0 <disableClk>:

STATIC INLINE void disableClk(I2C_ID_T id)
{
1a0126d0:	b580      	push	{r7, lr}
1a0126d2:	b082      	sub	sp, #8
1a0126d4:	af00      	add	r7, sp, #0
1a0126d6:	4603      	mov	r3, r0
1a0126d8:	71fb      	strb	r3, [r7, #7]
	Chip_Clock_Disable(i2c[id].clk);
1a0126da:	79fa      	ldrb	r2, [r7, #7]
1a0126dc:	4907      	ldr	r1, [pc, #28]	; (1a0126fc <disableClk+0x2c>)
1a0126de:	4613      	mov	r3, r2
1a0126e0:	00db      	lsls	r3, r3, #3
1a0126e2:	1a9b      	subs	r3, r3, r2
1a0126e4:	009b      	lsls	r3, r3, #2
1a0126e6:	440b      	add	r3, r1
1a0126e8:	3304      	adds	r3, #4
1a0126ea:	881b      	ldrh	r3, [r3, #0]
1a0126ec:	4618      	mov	r0, r3
1a0126ee:	f7ff fec7 	bl	1a012480 <Chip_Clock_Disable>
}
1a0126f2:	bf00      	nop
1a0126f4:	3708      	adds	r7, #8
1a0126f6:	46bd      	mov	sp, r7
1a0126f8:	bd80      	pop	{r7, pc}
1a0126fa:	bf00      	nop
1a0126fc:	10086078 	.word	0x10086078

1a012700 <getClkRate>:

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
1a012700:	b580      	push	{r7, lr}
1a012702:	b082      	sub	sp, #8
1a012704:	af00      	add	r7, sp, #0
1a012706:	4603      	mov	r3, r0
1a012708:	71fb      	strb	r3, [r7, #7]
	return Chip_Clock_GetRate(i2c[id].clk);
1a01270a:	79fa      	ldrb	r2, [r7, #7]
1a01270c:	4907      	ldr	r1, [pc, #28]	; (1a01272c <getClkRate+0x2c>)
1a01270e:	4613      	mov	r3, r2
1a012710:	00db      	lsls	r3, r3, #3
1a012712:	1a9b      	subs	r3, r3, r2
1a012714:	009b      	lsls	r3, r3, #2
1a012716:	440b      	add	r3, r1
1a012718:	3304      	adds	r3, #4
1a01271a:	881b      	ldrh	r3, [r3, #0]
1a01271c:	4618      	mov	r0, r3
1a01271e:	f7ff fedf 	bl	1a0124e0 <Chip_Clock_GetRate>
1a012722:	4603      	mov	r3, r0
}
1a012724:	4618      	mov	r0, r3
1a012726:	3708      	adds	r7, #8
1a012728:	46bd      	mov	sp, r7
1a01272a:	bd80      	pop	{r7, pc}
1a01272c:	10086078 	.word	0x10086078

1a012730 <startMasterXfer>:

/* Enable I2C and start master transfer */
STATIC INLINE void startMasterXfer(LPC_I2C_T *pI2C)
{
1a012730:	b480      	push	{r7}
1a012732:	b083      	sub	sp, #12
1a012734:	af00      	add	r7, sp, #0
1a012736:	6078      	str	r0, [r7, #4]
	/* Reset STA, STO, SI */
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a012738:	687b      	ldr	r3, [r7, #4]
1a01273a:	222c      	movs	r2, #44	; 0x2c
1a01273c:	619a      	str	r2, [r3, #24]

	/* Enter to Master Transmitter mode */
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a01273e:	687b      	ldr	r3, [r7, #4]
1a012740:	2260      	movs	r2, #96	; 0x60
1a012742:	601a      	str	r2, [r3, #0]
}
1a012744:	bf00      	nop
1a012746:	370c      	adds	r7, #12
1a012748:	46bd      	mov	sp, r7
1a01274a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01274e:	4770      	bx	lr

1a012750 <startSlaverXfer>:

/* Enable I2C and enable slave transfers */
STATIC INLINE void startSlaverXfer(LPC_I2C_T *pI2C)
{
1a012750:	b480      	push	{r7}
1a012752:	b083      	sub	sp, #12
1a012754:	af00      	add	r7, sp, #0
1a012756:	6078      	str	r0, [r7, #4]
	/* Reset STA, STO, SI */
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA;
1a012758:	687b      	ldr	r3, [r7, #4]
1a01275a:	2228      	movs	r2, #40	; 0x28
1a01275c:	619a      	str	r2, [r3, #24]

	/* Enter to Master Transmitter mode */
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_AA;
1a01275e:	687b      	ldr	r3, [r7, #4]
1a012760:	2244      	movs	r2, #68	; 0x44
1a012762:	601a      	str	r2, [r3, #0]
}
1a012764:	bf00      	nop
1a012766:	370c      	adds	r7, #12
1a012768:	46bd      	mov	sp, r7
1a01276a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01276e:	4770      	bx	lr

1a012770 <isI2CBusFree>:

/* Check if I2C bus is free */
STATIC INLINE int isI2CBusFree(LPC_I2C_T *pI2C)
{
1a012770:	b480      	push	{r7}
1a012772:	b083      	sub	sp, #12
1a012774:	af00      	add	r7, sp, #0
1a012776:	6078      	str	r0, [r7, #4]
	return !(pI2C->CONSET & I2C_CON_STO);
1a012778:	687b      	ldr	r3, [r7, #4]
1a01277a:	681b      	ldr	r3, [r3, #0]
1a01277c:	f003 0310 	and.w	r3, r3, #16
1a012780:	2b00      	cmp	r3, #0
1a012782:	bf0c      	ite	eq
1a012784:	2301      	moveq	r3, #1
1a012786:	2300      	movne	r3, #0
1a012788:	b2db      	uxtb	r3, r3
}
1a01278a:	4618      	mov	r0, r3
1a01278c:	370c      	adds	r7, #12
1a01278e:	46bd      	mov	sp, r7
1a012790:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012794:	4770      	bx	lr
1a012796:	bf00      	nop

1a012798 <getCurState>:

/* Get current state of the I2C peripheral */
STATIC INLINE int getCurState(LPC_I2C_T *pI2C)
{
1a012798:	b480      	push	{r7}
1a01279a:	b083      	sub	sp, #12
1a01279c:	af00      	add	r7, sp, #0
1a01279e:	6078      	str	r0, [r7, #4]
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a0127a0:	687b      	ldr	r3, [r7, #4]
1a0127a2:	685b      	ldr	r3, [r3, #4]
1a0127a4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
}
1a0127a8:	4618      	mov	r0, r3
1a0127aa:	370c      	adds	r7, #12
1a0127ac:	46bd      	mov	sp, r7
1a0127ae:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0127b2:	4770      	bx	lr

1a0127b4 <handleMasterXferState>:
	return I2C_SLAVE_GENERAL;
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
1a0127b4:	b580      	push	{r7, lr}
1a0127b6:	b084      	sub	sp, #16
1a0127b8:	af00      	add	r7, sp, #0
1a0127ba:	6078      	str	r0, [r7, #4]
1a0127bc:	6039      	str	r1, [r7, #0]
	uint32_t cclr = I2C_CON_FLAGS;
1a0127be:	233c      	movs	r3, #60	; 0x3c
1a0127c0:	60fb      	str	r3, [r7, #12]

	switch (getCurState(pI2C)) {
1a0127c2:	6878      	ldr	r0, [r7, #4]
1a0127c4:	f7ff ffe8 	bl	1a012798 <getCurState>
1a0127c8:	4603      	mov	r3, r0
1a0127ca:	2b58      	cmp	r3, #88	; 0x58
1a0127cc:	f200 811d 	bhi.w	1a012a0a <handleMasterXferState+0x256>
1a0127d0:	a201      	add	r2, pc, #4	; (adr r2, 1a0127d8 <handleMasterXferState+0x24>)
1a0127d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0127d6:	bf00      	nop
1a0127d8:	1a0129f9 	.word	0x1a0129f9
1a0127dc:	1a012a0b 	.word	0x1a012a0b
1a0127e0:	1a012a0b 	.word	0x1a012a0b
1a0127e4:	1a012a0b 	.word	0x1a012a0b
1a0127e8:	1a012a0b 	.word	0x1a012a0b
1a0127ec:	1a012a0b 	.word	0x1a012a0b
1a0127f0:	1a012a0b 	.word	0x1a012a0b
1a0127f4:	1a012a0b 	.word	0x1a012a0b
1a0127f8:	1a01293d 	.word	0x1a01293d
1a0127fc:	1a012a0b 	.word	0x1a012a0b
1a012800:	1a012a0b 	.word	0x1a012a0b
1a012804:	1a012a0b 	.word	0x1a012a0b
1a012808:	1a012a0b 	.word	0x1a012a0b
1a01280c:	1a012a0b 	.word	0x1a012a0b
1a012810:	1a012a0b 	.word	0x1a012a0b
1a012814:	1a012a0b 	.word	0x1a012a0b
1a012818:	1a01293d 	.word	0x1a01293d
1a01281c:	1a012a0b 	.word	0x1a012a0b
1a012820:	1a012a0b 	.word	0x1a012a0b
1a012824:	1a012a0b 	.word	0x1a012a0b
1a012828:	1a012a0b 	.word	0x1a012a0b
1a01282c:	1a012a0b 	.word	0x1a012a0b
1a012830:	1a012a0b 	.word	0x1a012a0b
1a012834:	1a012a0b 	.word	0x1a012a0b
1a012838:	1a01295b 	.word	0x1a01295b
1a01283c:	1a012a0b 	.word	0x1a012a0b
1a012840:	1a012a0b 	.word	0x1a012a0b
1a012844:	1a012a0b 	.word	0x1a012a0b
1a012848:	1a012a0b 	.word	0x1a012a0b
1a01284c:	1a012a0b 	.word	0x1a012a0b
1a012850:	1a012a0b 	.word	0x1a012a0b
1a012854:	1a012a0b 	.word	0x1a012a0b
1a012858:	1a0129d1 	.word	0x1a0129d1
1a01285c:	1a012a0b 	.word	0x1a012a0b
1a012860:	1a012a0b 	.word	0x1a012a0b
1a012864:	1a012a0b 	.word	0x1a012a0b
1a012868:	1a012a0b 	.word	0x1a012a0b
1a01286c:	1a012a0b 	.word	0x1a012a0b
1a012870:	1a012a0b 	.word	0x1a012a0b
1a012874:	1a012a0b 	.word	0x1a012a0b
1a012878:	1a01295b 	.word	0x1a01295b
1a01287c:	1a012a0b 	.word	0x1a012a0b
1a012880:	1a012a0b 	.word	0x1a012a0b
1a012884:	1a012a0b 	.word	0x1a012a0b
1a012888:	1a012a0b 	.word	0x1a012a0b
1a01288c:	1a012a0b 	.word	0x1a012a0b
1a012890:	1a012a0b 	.word	0x1a012a0b
1a012894:	1a012a0b 	.word	0x1a012a0b
1a012898:	1a0129e1 	.word	0x1a0129e1
1a01289c:	1a012a0b 	.word	0x1a012a0b
1a0128a0:	1a012a0b 	.word	0x1a012a0b
1a0128a4:	1a012a0b 	.word	0x1a012a0b
1a0128a8:	1a012a0b 	.word	0x1a012a0b
1a0128ac:	1a012a0b 	.word	0x1a012a0b
1a0128b0:	1a012a0b 	.word	0x1a012a0b
1a0128b4:	1a012a0b 	.word	0x1a012a0b
1a0128b8:	1a0129f1 	.word	0x1a0129f1
1a0128bc:	1a012a0b 	.word	0x1a012a0b
1a0128c0:	1a012a0b 	.word	0x1a012a0b
1a0128c4:	1a012a0b 	.word	0x1a012a0b
1a0128c8:	1a012a0b 	.word	0x1a012a0b
1a0128cc:	1a012a0b 	.word	0x1a012a0b
1a0128d0:	1a012a0b 	.word	0x1a012a0b
1a0128d4:	1a012a0b 	.word	0x1a012a0b
1a0128d8:	1a0129bf 	.word	0x1a0129bf
1a0128dc:	1a012a0b 	.word	0x1a012a0b
1a0128e0:	1a012a0b 	.word	0x1a012a0b
1a0128e4:	1a012a0b 	.word	0x1a012a0b
1a0128e8:	1a012a0b 	.word	0x1a012a0b
1a0128ec:	1a012a0b 	.word	0x1a012a0b
1a0128f0:	1a012a0b 	.word	0x1a012a0b
1a0128f4:	1a012a0b 	.word	0x1a012a0b
1a0128f8:	1a0129d1 	.word	0x1a0129d1
1a0128fc:	1a012a0b 	.word	0x1a012a0b
1a012900:	1a012a0b 	.word	0x1a012a0b
1a012904:	1a012a0b 	.word	0x1a012a0b
1a012908:	1a012a0b 	.word	0x1a012a0b
1a01290c:	1a012a0b 	.word	0x1a012a0b
1a012910:	1a012a0b 	.word	0x1a012a0b
1a012914:	1a012a0b 	.word	0x1a012a0b
1a012918:	1a0129a3 	.word	0x1a0129a3
1a01291c:	1a012a0b 	.word	0x1a012a0b
1a012920:	1a012a0b 	.word	0x1a012a0b
1a012924:	1a012a0b 	.word	0x1a012a0b
1a012928:	1a012a0b 	.word	0x1a012a0b
1a01292c:	1a012a0b 	.word	0x1a012a0b
1a012930:	1a012a0b 	.word	0x1a012a0b
1a012934:	1a012a0b 	.word	0x1a012a0b
1a012938:	1a01299b 	.word	0x1a01299b
	case 0x08:		/* Start condition on bus */
	case 0x10:		/* Repeated start condition */
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a01293c:	683b      	ldr	r3, [r7, #0]
1a01293e:	781b      	ldrb	r3, [r3, #0]
1a012940:	005b      	lsls	r3, r3, #1
1a012942:	683a      	ldr	r2, [r7, #0]
1a012944:	6892      	ldr	r2, [r2, #8]
1a012946:	2a00      	cmp	r2, #0
1a012948:	bf0c      	ite	eq
1a01294a:	2201      	moveq	r2, #1
1a01294c:	2200      	movne	r2, #0
1a01294e:	b2d2      	uxtb	r2, r2
1a012950:	4313      	orrs	r3, r2
1a012952:	461a      	mov	r2, r3
1a012954:	687b      	ldr	r3, [r7, #4]
1a012956:	609a      	str	r2, [r3, #8]
		break;
1a012958:	e057      	b.n	1a012a0a <handleMasterXferState+0x256>

	/* Tx handling */
	case 0x18:		/* SLA+W sent and ACK received */
	case 0x28:		/* DATA sent and ACK received */
		if (!xfer->txSz) {
1a01295a:	683b      	ldr	r3, [r7, #0]
1a01295c:	689b      	ldr	r3, [r3, #8]
1a01295e:	2b00      	cmp	r3, #0
1a012960:	d10c      	bne.n	1a01297c <handleMasterXferState+0x1c8>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a012962:	683b      	ldr	r3, [r7, #0]
1a012964:	691b      	ldr	r3, [r3, #16]
1a012966:	2b00      	cmp	r3, #0
1a012968:	d002      	beq.n	1a012970 <handleMasterXferState+0x1bc>
1a01296a:	f06f 0320 	mvn.w	r3, #32
1a01296e:	e001      	b.n	1a012974 <handleMasterXferState+0x1c0>
1a012970:	f06f 0310 	mvn.w	r3, #16
1a012974:	68fa      	ldr	r2, [r7, #12]
1a012976:	4013      	ands	r3, r2
1a012978:	60fb      	str	r3, [r7, #12]
		}
		else {
			pI2C->DAT = *xfer->txBuff++;
			xfer->txSz--;
		}
		break;
1a01297a:	e046      	b.n	1a012a0a <handleMasterXferState+0x256>
	case 0x28:		/* DATA sent and ACK received */
		if (!xfer->txSz) {
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
		}
		else {
			pI2C->DAT = *xfer->txBuff++;
1a01297c:	683b      	ldr	r3, [r7, #0]
1a01297e:	685b      	ldr	r3, [r3, #4]
1a012980:	1c59      	adds	r1, r3, #1
1a012982:	683a      	ldr	r2, [r7, #0]
1a012984:	6051      	str	r1, [r2, #4]
1a012986:	781b      	ldrb	r3, [r3, #0]
1a012988:	461a      	mov	r2, r3
1a01298a:	687b      	ldr	r3, [r7, #4]
1a01298c:	609a      	str	r2, [r3, #8]
			xfer->txSz--;
1a01298e:	683b      	ldr	r3, [r7, #0]
1a012990:	689b      	ldr	r3, [r3, #8]
1a012992:	1e5a      	subs	r2, r3, #1
1a012994:	683b      	ldr	r3, [r7, #0]
1a012996:	609a      	str	r2, [r3, #8]
		}
		break;
1a012998:	e037      	b.n	1a012a0a <handleMasterXferState+0x256>

	/* Rx handling */
	case 0x58:		/* Data Received and NACK sent */
		cclr &= ~I2C_CON_STO;
1a01299a:	68fb      	ldr	r3, [r7, #12]
1a01299c:	f023 0310 	bic.w	r3, r3, #16
1a0129a0:	60fb      	str	r3, [r7, #12]

	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
1a0129a2:	683b      	ldr	r3, [r7, #0]
1a0129a4:	68db      	ldr	r3, [r3, #12]
1a0129a6:	1c59      	adds	r1, r3, #1
1a0129a8:	683a      	ldr	r2, [r7, #0]
1a0129aa:	60d1      	str	r1, [r2, #12]
1a0129ac:	687a      	ldr	r2, [r7, #4]
1a0129ae:	6892      	ldr	r2, [r2, #8]
1a0129b0:	b2d2      	uxtb	r2, r2
1a0129b2:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a0129b4:	683b      	ldr	r3, [r7, #0]
1a0129b6:	691b      	ldr	r3, [r3, #16]
1a0129b8:	1e5a      	subs	r2, r3, #1
1a0129ba:	683b      	ldr	r3, [r7, #0]
1a0129bc:	611a      	str	r2, [r3, #16]

	case 0x40:		/* SLA+R sent and ACK received */
		if (xfer->rxSz > 1) {
1a0129be:	683b      	ldr	r3, [r7, #0]
1a0129c0:	691b      	ldr	r3, [r3, #16]
1a0129c2:	2b01      	cmp	r3, #1
1a0129c4:	dd20      	ble.n	1a012a08 <handleMasterXferState+0x254>
			cclr &= ~I2C_CON_AA;
1a0129c6:	68fb      	ldr	r3, [r7, #12]
1a0129c8:	f023 0304 	bic.w	r3, r3, #4
1a0129cc:	60fb      	str	r3, [r7, #12]
		}
		break;
1a0129ce:	e01b      	b.n	1a012a08 <handleMasterXferState+0x254>

	/* NAK Handling */
	case 0x20:		/* SLA+W sent NAK received */
	case 0x48:		/* SLA+R sent NAK received */
		xfer->status = I2C_STATUS_SLAVENAK;
1a0129d0:	683b      	ldr	r3, [r7, #0]
1a0129d2:	2205      	movs	r2, #5
1a0129d4:	751a      	strb	r2, [r3, #20]
		cclr &= ~I2C_CON_STO;
1a0129d6:	68fb      	ldr	r3, [r7, #12]
1a0129d8:	f023 0310 	bic.w	r3, r3, #16
1a0129dc:	60fb      	str	r3, [r7, #12]
		break;
1a0129de:	e014      	b.n	1a012a0a <handleMasterXferState+0x256>

	case 0x30:		/* DATA sent NAK received */
		xfer->status = I2C_STATUS_NAK;
1a0129e0:	683b      	ldr	r3, [r7, #0]
1a0129e2:	2201      	movs	r2, #1
1a0129e4:	751a      	strb	r2, [r3, #20]
		cclr &= ~I2C_CON_STO;
1a0129e6:	68fb      	ldr	r3, [r7, #12]
1a0129e8:	f023 0310 	bic.w	r3, r3, #16
1a0129ec:	60fb      	str	r3, [r7, #12]
		break;
1a0129ee:	e00c      	b.n	1a012a0a <handleMasterXferState+0x256>

	case 0x38:		/* Arbitration lost */
		xfer->status = I2C_STATUS_ARBLOST;
1a0129f0:	683b      	ldr	r3, [r7, #0]
1a0129f2:	2202      	movs	r2, #2
1a0129f4:	751a      	strb	r2, [r3, #20]
		break;
1a0129f6:	e008      	b.n	1a012a0a <handleMasterXferState+0x256>

	/* Bus Error */
	case 0x00:
		xfer->status = I2C_STATUS_BUSERR;
1a0129f8:	683b      	ldr	r3, [r7, #0]
1a0129fa:	2203      	movs	r2, #3
1a0129fc:	751a      	strb	r2, [r3, #20]
		cclr &= ~I2C_CON_STO;
1a0129fe:	68fb      	ldr	r3, [r7, #12]
1a012a00:	f023 0310 	bic.w	r3, r3, #16
1a012a04:	60fb      	str	r3, [r7, #12]
1a012a06:	e000      	b.n	1a012a0a <handleMasterXferState+0x256>

	case 0x40:		/* SLA+R sent and ACK received */
		if (xfer->rxSz > 1) {
			cclr &= ~I2C_CON_AA;
		}
		break;
1a012a08:	bf00      	nop
		xfer->status = I2C_STATUS_BUSERR;
		cclr &= ~I2C_CON_STO;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a012a0a:	68fb      	ldr	r3, [r7, #12]
1a012a0c:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a012a10:	687b      	ldr	r3, [r7, #4]
1a012a12:	601a      	str	r2, [r3, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a012a14:	68fb      	ldr	r3, [r7, #12]
1a012a16:	f023 0210 	bic.w	r2, r3, #16
1a012a1a:	687b      	ldr	r3, [r7, #4]
1a012a1c:	619a      	str	r2, [r3, #24]

	/* If stopped return 0 */
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a012a1e:	68fb      	ldr	r3, [r7, #12]
1a012a20:	f003 0310 	and.w	r3, r3, #16
1a012a24:	2b00      	cmp	r3, #0
1a012a26:	d003      	beq.n	1a012a30 <handleMasterXferState+0x27c>
1a012a28:	683b      	ldr	r3, [r7, #0]
1a012a2a:	7d1b      	ldrb	r3, [r3, #20]
1a012a2c:	2b02      	cmp	r3, #2
1a012a2e:	d108      	bne.n	1a012a42 <handleMasterXferState+0x28e>
		if (xfer->status == I2C_STATUS_BUSY) {
1a012a30:	683b      	ldr	r3, [r7, #0]
1a012a32:	7d1b      	ldrb	r3, [r3, #20]
1a012a34:	2b04      	cmp	r3, #4
1a012a36:	d102      	bne.n	1a012a3e <handleMasterXferState+0x28a>
			xfer->status = I2C_STATUS_DONE;
1a012a38:	683b      	ldr	r3, [r7, #0]
1a012a3a:	2200      	movs	r2, #0
1a012a3c:	751a      	strb	r2, [r3, #20]
		}
		return 0;
1a012a3e:	2300      	movs	r3, #0
1a012a40:	e000      	b.n	1a012a44 <handleMasterXferState+0x290>
	}
	return 1;
1a012a42:	2301      	movs	r3, #1
}
1a012a44:	4618      	mov	r0, r3
1a012a46:	3710      	adds	r7, #16
1a012a48:	46bd      	mov	sp, r7
1a012a4a:	bd80      	pop	{r7, pc}

1a012a4c <Chip_I2C_EventHandler>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Chip event handler interrupt based */
void Chip_I2C_EventHandler(I2C_ID_T id, I2C_EVENT_T event)
{
1a012a4c:	b480      	push	{r7}
1a012a4e:	b085      	sub	sp, #20
1a012a50:	af00      	add	r7, sp, #0
1a012a52:	4603      	mov	r3, r0
1a012a54:	460a      	mov	r2, r1
1a012a56:	71fb      	strb	r3, [r7, #7]
1a012a58:	4613      	mov	r3, r2
1a012a5a:	71bb      	strb	r3, [r7, #6]
	struct i2c_interface *iic = &i2c[id];
1a012a5c:	79fa      	ldrb	r2, [r7, #7]
1a012a5e:	4613      	mov	r3, r2
1a012a60:	00db      	lsls	r3, r3, #3
1a012a62:	1a9b      	subs	r3, r3, r2
1a012a64:	009b      	lsls	r3, r3, #2
1a012a66:	4a0b      	ldr	r2, [pc, #44]	; (1a012a94 <Chip_I2C_EventHandler+0x48>)
1a012a68:	4413      	add	r3, r2
1a012a6a:	60fb      	str	r3, [r7, #12]
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a012a6c:	79bb      	ldrb	r3, [r7, #6]
1a012a6e:	2b01      	cmp	r3, #1
1a012a70:	d10a      	bne.n	1a012a88 <Chip_I2C_EventHandler+0x3c>
		return;
	}

	stat = &iic->mXfer->status;
1a012a72:	68fb      	ldr	r3, [r7, #12]
1a012a74:	691b      	ldr	r3, [r3, #16]
1a012a76:	3314      	adds	r3, #20
1a012a78:	60bb      	str	r3, [r7, #8]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a012a7a:	bf00      	nop
1a012a7c:	68bb      	ldr	r3, [r7, #8]
1a012a7e:	781b      	ldrb	r3, [r3, #0]
1a012a80:	b2db      	uxtb	r3, r3
1a012a82:	2b04      	cmp	r3, #4
1a012a84:	d0fa      	beq.n	1a012a7c <Chip_I2C_EventHandler+0x30>
1a012a86:	e000      	b.n	1a012a8a <Chip_I2C_EventHandler+0x3e>
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
		return;
1a012a88:	bf00      	nop
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a012a8a:	3714      	adds	r7, #20
1a012a8c:	46bd      	mov	sp, r7
1a012a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012a92:	4770      	bx	lr
1a012a94:	10086078 	.word	0x10086078

1a012a98 <Chip_I2C_EventHandlerPolling>:

/* Chip polling event handler */
void Chip_I2C_EventHandlerPolling(I2C_ID_T id, I2C_EVENT_T event)
{
1a012a98:	b580      	push	{r7, lr}
1a012a9a:	b084      	sub	sp, #16
1a012a9c:	af00      	add	r7, sp, #0
1a012a9e:	4603      	mov	r3, r0
1a012aa0:	460a      	mov	r2, r1
1a012aa2:	71fb      	strb	r3, [r7, #7]
1a012aa4:	4613      	mov	r3, r2
1a012aa6:	71bb      	strb	r3, [r7, #6]
	struct i2c_interface *iic = &i2c[id];
1a012aa8:	79fa      	ldrb	r2, [r7, #7]
1a012aaa:	4613      	mov	r3, r2
1a012aac:	00db      	lsls	r3, r3, #3
1a012aae:	1a9b      	subs	r3, r3, r2
1a012ab0:	009b      	lsls	r3, r3, #2
1a012ab2:	4a10      	ldr	r2, [pc, #64]	; (1a012af4 <Chip_I2C_EventHandlerPolling+0x5c>)
1a012ab4:	4413      	add	r3, r2
1a012ab6:	60fb      	str	r3, [r7, #12]
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a012ab8:	79bb      	ldrb	r3, [r7, #6]
1a012aba:	2b01      	cmp	r3, #1
1a012abc:	d115      	bne.n	1a012aea <Chip_I2C_EventHandlerPolling+0x52>
		return;
	}

	stat = &iic->mXfer->status;
1a012abe:	68fb      	ldr	r3, [r7, #12]
1a012ac0:	691b      	ldr	r3, [r3, #16]
1a012ac2:	3314      	adds	r3, #20
1a012ac4:	60bb      	str	r3, [r7, #8]
	/* Call the state change handler till xfer is done */
	while (*stat == I2C_STATUS_BUSY) {
1a012ac6:	e00a      	b.n	1a012ade <Chip_I2C_EventHandlerPolling+0x46>
		if (Chip_I2C_IsStateChanged(id)) {
1a012ac8:	79fb      	ldrb	r3, [r7, #7]
1a012aca:	4618      	mov	r0, r3
1a012acc:	f000 f996 	bl	1a012dfc <Chip_I2C_IsStateChanged>
1a012ad0:	4603      	mov	r3, r0
1a012ad2:	2b00      	cmp	r3, #0
1a012ad4:	d003      	beq.n	1a012ade <Chip_I2C_EventHandlerPolling+0x46>
			Chip_I2C_MasterStateHandler(id);
1a012ad6:	79fb      	ldrb	r3, [r7, #7]
1a012ad8:	4618      	mov	r0, r3
1a012ada:	f000 f95f 	bl	1a012d9c <Chip_I2C_MasterStateHandler>
		return;
	}

	stat = &iic->mXfer->status;
	/* Call the state change handler till xfer is done */
	while (*stat == I2C_STATUS_BUSY) {
1a012ade:	68bb      	ldr	r3, [r7, #8]
1a012ae0:	781b      	ldrb	r3, [r3, #0]
1a012ae2:	b2db      	uxtb	r3, r3
1a012ae4:	2b04      	cmp	r3, #4
1a012ae6:	d0ef      	beq.n	1a012ac8 <Chip_I2C_EventHandlerPolling+0x30>
1a012ae8:	e000      	b.n	1a012aec <Chip_I2C_EventHandlerPolling+0x54>
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
		return;
1a012aea:	bf00      	nop
	while (*stat == I2C_STATUS_BUSY) {
		if (Chip_I2C_IsStateChanged(id)) {
			Chip_I2C_MasterStateHandler(id);
		}
	}
}
1a012aec:	3710      	adds	r7, #16
1a012aee:	46bd      	mov	sp, r7
1a012af0:	bd80      	pop	{r7, pc}
1a012af2:	bf00      	nop
1a012af4:	10086078 	.word	0x10086078

1a012af8 <Chip_I2C_Init>:

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a012af8:	b580      	push	{r7, lr}
1a012afa:	b082      	sub	sp, #8
1a012afc:	af00      	add	r7, sp, #0
1a012afe:	4603      	mov	r3, r0
1a012b00:	71fb      	strb	r3, [r7, #7]
	enableClk(id);
1a012b02:	79fb      	ldrb	r3, [r7, #7]
1a012b04:	4618      	mov	r0, r3
1a012b06:	f7ff fdcb 	bl	1a0126a0 <enableClk>

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a012b0a:	79fa      	ldrb	r2, [r7, #7]
1a012b0c:	4906      	ldr	r1, [pc, #24]	; (1a012b28 <Chip_I2C_Init+0x30>)
1a012b0e:	4613      	mov	r3, r2
1a012b10:	00db      	lsls	r3, r3, #3
1a012b12:	1a9b      	subs	r3, r3, r2
1a012b14:	009b      	lsls	r3, r3, #2
1a012b16:	440b      	add	r3, r1
1a012b18:	681b      	ldr	r3, [r3, #0]
1a012b1a:	226c      	movs	r2, #108	; 0x6c
1a012b1c:	619a      	str	r2, [r3, #24]
}
1a012b1e:	bf00      	nop
1a012b20:	3708      	adds	r7, #8
1a012b22:	46bd      	mov	sp, r7
1a012b24:	bd80      	pop	{r7, pc}
1a012b26:	bf00      	nop
1a012b28:	10086078 	.word	0x10086078

1a012b2c <Chip_I2C_DeInit>:

/* De-initializes the I2C peripheral registers to their default reset values */
void Chip_I2C_DeInit(I2C_ID_T id)
{
1a012b2c:	b580      	push	{r7, lr}
1a012b2e:	b082      	sub	sp, #8
1a012b30:	af00      	add	r7, sp, #0
1a012b32:	4603      	mov	r3, r0
1a012b34:	71fb      	strb	r3, [r7, #7]
	/* Disable I2C control */
	LPC_I2Cx(id)->CONCLR = I2C_CON_I2EN | I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a012b36:	79fa      	ldrb	r2, [r7, #7]
1a012b38:	4908      	ldr	r1, [pc, #32]	; (1a012b5c <Chip_I2C_DeInit+0x30>)
1a012b3a:	4613      	mov	r3, r2
1a012b3c:	00db      	lsls	r3, r3, #3
1a012b3e:	1a9b      	subs	r3, r3, r2
1a012b40:	009b      	lsls	r3, r3, #2
1a012b42:	440b      	add	r3, r1
1a012b44:	681b      	ldr	r3, [r3, #0]
1a012b46:	226c      	movs	r2, #108	; 0x6c
1a012b48:	619a      	str	r2, [r3, #24]

	disableClk(id);
1a012b4a:	79fb      	ldrb	r3, [r7, #7]
1a012b4c:	4618      	mov	r0, r3
1a012b4e:	f7ff fdbf 	bl	1a0126d0 <disableClk>
}
1a012b52:	bf00      	nop
1a012b54:	3708      	adds	r7, #8
1a012b56:	46bd      	mov	sp, r7
1a012b58:	bd80      	pop	{r7, pc}
1a012b5a:	bf00      	nop
1a012b5c:	10086078 	.word	0x10086078

1a012b60 <Chip_I2C_SetClockRate>:

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a012b60:	b580      	push	{r7, lr}
1a012b62:	b084      	sub	sp, #16
1a012b64:	af00      	add	r7, sp, #0
1a012b66:	4603      	mov	r3, r0
1a012b68:	6039      	str	r1, [r7, #0]
1a012b6a:	71fb      	strb	r3, [r7, #7]
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a012b6c:	79fb      	ldrb	r3, [r7, #7]
1a012b6e:	4618      	mov	r0, r3
1a012b70:	f7ff fdc6 	bl	1a012700 <getClkRate>
1a012b74:	4602      	mov	r2, r0
1a012b76:	683b      	ldr	r3, [r7, #0]
1a012b78:	fbb2 f3f3 	udiv	r3, r2, r3
1a012b7c:	60fb      	str	r3, [r7, #12]
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a012b7e:	79fa      	ldrb	r2, [r7, #7]
1a012b80:	4910      	ldr	r1, [pc, #64]	; (1a012bc4 <Chip_I2C_SetClockRate+0x64>)
1a012b82:	4613      	mov	r3, r2
1a012b84:	00db      	lsls	r3, r3, #3
1a012b86:	1a9b      	subs	r3, r3, r2
1a012b88:	009b      	lsls	r3, r3, #2
1a012b8a:	440b      	add	r3, r1
1a012b8c:	681b      	ldr	r3, [r3, #0]
1a012b8e:	68fa      	ldr	r2, [r7, #12]
1a012b90:	0852      	lsrs	r2, r2, #1
1a012b92:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a012b94:	79fa      	ldrb	r2, [r7, #7]
1a012b96:	490b      	ldr	r1, [pc, #44]	; (1a012bc4 <Chip_I2C_SetClockRate+0x64>)
1a012b98:	4613      	mov	r3, r2
1a012b9a:	00db      	lsls	r3, r3, #3
1a012b9c:	1a9b      	subs	r3, r3, r2
1a012b9e:	009b      	lsls	r3, r3, #2
1a012ba0:	440b      	add	r3, r1
1a012ba2:	6819      	ldr	r1, [r3, #0]
1a012ba4:	79fa      	ldrb	r2, [r7, #7]
1a012ba6:	4807      	ldr	r0, [pc, #28]	; (1a012bc4 <Chip_I2C_SetClockRate+0x64>)
1a012ba8:	4613      	mov	r3, r2
1a012baa:	00db      	lsls	r3, r3, #3
1a012bac:	1a9b      	subs	r3, r3, r2
1a012bae:	009b      	lsls	r3, r3, #2
1a012bb0:	4403      	add	r3, r0
1a012bb2:	681b      	ldr	r3, [r3, #0]
1a012bb4:	691b      	ldr	r3, [r3, #16]
1a012bb6:	68fa      	ldr	r2, [r7, #12]
1a012bb8:	1ad3      	subs	r3, r2, r3
1a012bba:	614b      	str	r3, [r1, #20]
}
1a012bbc:	bf00      	nop
1a012bbe:	3710      	adds	r7, #16
1a012bc0:	46bd      	mov	sp, r7
1a012bc2:	bd80      	pop	{r7, pc}
1a012bc4:	10086078 	.word	0x10086078

1a012bc8 <Chip_I2C_SetMasterEventHandler>:
	return getClkRate(id) / (LPC_I2Cx(id)->SCLH + LPC_I2Cx(id)->SCLL);
}

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
1a012bc8:	b480      	push	{r7}
1a012bca:	b085      	sub	sp, #20
1a012bcc:	af00      	add	r7, sp, #0
1a012bce:	4603      	mov	r3, r0
1a012bd0:	6039      	str	r1, [r7, #0]
1a012bd2:	71fb      	strb	r3, [r7, #7]
	struct i2c_interface *iic = &i2c[id];
1a012bd4:	79fa      	ldrb	r2, [r7, #7]
1a012bd6:	4613      	mov	r3, r2
1a012bd8:	00db      	lsls	r3, r3, #3
1a012bda:	1a9b      	subs	r3, r3, r2
1a012bdc:	009b      	lsls	r3, r3, #2
1a012bde:	4a0c      	ldr	r2, [pc, #48]	; (1a012c10 <Chip_I2C_SetMasterEventHandler+0x48>)
1a012be0:	4413      	add	r3, r2
1a012be2:	60fb      	str	r3, [r7, #12]
	if (!iic->mXfer) {
1a012be4:	68fb      	ldr	r3, [r7, #12]
1a012be6:	691b      	ldr	r3, [r3, #16]
1a012be8:	2b00      	cmp	r3, #0
1a012bea:	d102      	bne.n	1a012bf2 <Chip_I2C_SetMasterEventHandler+0x2a>
		iic->mEvent = event;
1a012bec:	68fb      	ldr	r3, [r7, #12]
1a012bee:	683a      	ldr	r2, [r7, #0]
1a012bf0:	609a      	str	r2, [r3, #8]
	}
	return iic->mEvent == event;
1a012bf2:	68fb      	ldr	r3, [r7, #12]
1a012bf4:	689a      	ldr	r2, [r3, #8]
1a012bf6:	683b      	ldr	r3, [r7, #0]
1a012bf8:	429a      	cmp	r2, r3
1a012bfa:	bf0c      	ite	eq
1a012bfc:	2301      	moveq	r3, #1
1a012bfe:	2300      	movne	r3, #0
1a012c00:	b2db      	uxtb	r3, r3
}
1a012c02:	4618      	mov	r0, r3
1a012c04:	3714      	adds	r7, #20
1a012c06:	46bd      	mov	sp, r7
1a012c08:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012c0c:	4770      	bx	lr
1a012c0e:	bf00      	nop
1a012c10:	10086078 	.word	0x10086078

1a012c14 <Chip_I2C_MasterTransfer>:
	return i2c[id].mEvent;
}

/* Transmit and Receive data in master mode */
int Chip_I2C_MasterTransfer(I2C_ID_T id, I2C_XFER_T *xfer)
{
1a012c14:	b580      	push	{r7, lr}
1a012c16:	b084      	sub	sp, #16
1a012c18:	af00      	add	r7, sp, #0
1a012c1a:	4603      	mov	r3, r0
1a012c1c:	6039      	str	r1, [r7, #0]
1a012c1e:	71fb      	strb	r3, [r7, #7]
	struct i2c_interface *iic = &i2c[id];
1a012c20:	79fa      	ldrb	r2, [r7, #7]
1a012c22:	4613      	mov	r3, r2
1a012c24:	00db      	lsls	r3, r3, #3
1a012c26:	1a9b      	subs	r3, r3, r2
1a012c28:	009b      	lsls	r3, r3, #2
1a012c2a:	4a20      	ldr	r2, [pc, #128]	; (1a012cac <Chip_I2C_MasterTransfer+0x98>)
1a012c2c:	4413      	add	r3, r2
1a012c2e:	60fb      	str	r3, [r7, #12]

	iic->mEvent(id, I2C_EVENT_LOCK);
1a012c30:	68fb      	ldr	r3, [r7, #12]
1a012c32:	689b      	ldr	r3, [r3, #8]
1a012c34:	79fa      	ldrb	r2, [r7, #7]
1a012c36:	2103      	movs	r1, #3
1a012c38:	4610      	mov	r0, r2
1a012c3a:	4798      	blx	r3
	xfer->status = I2C_STATUS_BUSY;
1a012c3c:	683b      	ldr	r3, [r7, #0]
1a012c3e:	2204      	movs	r2, #4
1a012c40:	751a      	strb	r2, [r3, #20]
	iic->mXfer = xfer;
1a012c42:	68fb      	ldr	r3, [r7, #12]
1a012c44:	683a      	ldr	r2, [r7, #0]
1a012c46:	611a      	str	r2, [r3, #16]

	/* If slave xfer not in progress */
	if (!iic->sXfer) {
1a012c48:	68fb      	ldr	r3, [r7, #12]
1a012c4a:	695b      	ldr	r3, [r3, #20]
1a012c4c:	2b00      	cmp	r3, #0
1a012c4e:	d104      	bne.n	1a012c5a <Chip_I2C_MasterTransfer+0x46>
		startMasterXfer(iic->ip);
1a012c50:	68fb      	ldr	r3, [r7, #12]
1a012c52:	681b      	ldr	r3, [r3, #0]
1a012c54:	4618      	mov	r0, r3
1a012c56:	f7ff fd6b 	bl	1a012730 <startMasterXfer>
	}
	iic->mEvent(id, I2C_EVENT_WAIT);
1a012c5a:	68fb      	ldr	r3, [r7, #12]
1a012c5c:	689b      	ldr	r3, [r3, #8]
1a012c5e:	79fa      	ldrb	r2, [r7, #7]
1a012c60:	2101      	movs	r1, #1
1a012c62:	4610      	mov	r0, r2
1a012c64:	4798      	blx	r3
	iic->mXfer = 0;
1a012c66:	68fb      	ldr	r3, [r7, #12]
1a012c68:	2200      	movs	r2, #0
1a012c6a:	611a      	str	r2, [r3, #16]

	/* Wait for stop condition to appear on bus */
	while (!isI2CBusFree(iic->ip)) {}
1a012c6c:	bf00      	nop
1a012c6e:	68fb      	ldr	r3, [r7, #12]
1a012c70:	681b      	ldr	r3, [r3, #0]
1a012c72:	4618      	mov	r0, r3
1a012c74:	f7ff fd7c 	bl	1a012770 <isI2CBusFree>
1a012c78:	4603      	mov	r3, r0
1a012c7a:	2b00      	cmp	r3, #0
1a012c7c:	d0f7      	beq.n	1a012c6e <Chip_I2C_MasterTransfer+0x5a>

	/* Start slave if one is active */
	if (SLAVE_ACTIVE(iic)) {
1a012c7e:	68fb      	ldr	r3, [r7, #12]
1a012c80:	699b      	ldr	r3, [r3, #24]
1a012c82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
1a012c86:	2b00      	cmp	r3, #0
1a012c88:	d004      	beq.n	1a012c94 <Chip_I2C_MasterTransfer+0x80>
		startSlaverXfer(iic->ip);
1a012c8a:	68fb      	ldr	r3, [r7, #12]
1a012c8c:	681b      	ldr	r3, [r3, #0]
1a012c8e:	4618      	mov	r0, r3
1a012c90:	f7ff fd5e 	bl	1a012750 <startSlaverXfer>
	}

	iic->mEvent(id, I2C_EVENT_UNLOCK);
1a012c94:	68fb      	ldr	r3, [r7, #12]
1a012c96:	689b      	ldr	r3, [r3, #8]
1a012c98:	79fa      	ldrb	r2, [r7, #7]
1a012c9a:	2104      	movs	r1, #4
1a012c9c:	4610      	mov	r0, r2
1a012c9e:	4798      	blx	r3
	return (int) xfer->status;
1a012ca0:	683b      	ldr	r3, [r7, #0]
1a012ca2:	7d1b      	ldrb	r3, [r3, #20]
}
1a012ca4:	4618      	mov	r0, r3
1a012ca6:	3710      	adds	r7, #16
1a012ca8:	46bd      	mov	sp, r7
1a012caa:	bd80      	pop	{r7, pc}
1a012cac:	10086078 	.word	0x10086078

1a012cb0 <Chip_I2C_MasterSend>:

/* Master tx only */
int Chip_I2C_MasterSend(I2C_ID_T id, uint8_t slaveAddr, const uint8_t *buff, uint8_t len)
{
1a012cb0:	b580      	push	{r7, lr}
1a012cb2:	b08a      	sub	sp, #40	; 0x28
1a012cb4:	af00      	add	r7, sp, #0
1a012cb6:	603a      	str	r2, [r7, #0]
1a012cb8:	461a      	mov	r2, r3
1a012cba:	4603      	mov	r3, r0
1a012cbc:	71fb      	strb	r3, [r7, #7]
1a012cbe:	460b      	mov	r3, r1
1a012cc0:	71bb      	strb	r3, [r7, #6]
1a012cc2:	4613      	mov	r3, r2
1a012cc4:	717b      	strb	r3, [r7, #5]
	I2C_XFER_T xfer = {0};
1a012cc6:	f107 030c 	add.w	r3, r7, #12
1a012cca:	2200      	movs	r2, #0
1a012ccc:	601a      	str	r2, [r3, #0]
1a012cce:	605a      	str	r2, [r3, #4]
1a012cd0:	609a      	str	r2, [r3, #8]
1a012cd2:	60da      	str	r2, [r3, #12]
1a012cd4:	611a      	str	r2, [r3, #16]
1a012cd6:	615a      	str	r2, [r3, #20]
	xfer.slaveAddr = slaveAddr;
1a012cd8:	79bb      	ldrb	r3, [r7, #6]
1a012cda:	733b      	strb	r3, [r7, #12]
	xfer.txBuff = buff;
1a012cdc:	683b      	ldr	r3, [r7, #0]
1a012cde:	613b      	str	r3, [r7, #16]
	xfer.txSz = len;
1a012ce0:	797b      	ldrb	r3, [r7, #5]
1a012ce2:	617b      	str	r3, [r7, #20]
	uint32_t timeout = TIMEOUT * len;
1a012ce4:	797b      	ldrb	r3, [r7, #5]
1a012ce6:	f64e 2260 	movw	r2, #60000	; 0xea60
1a012cea:	fb02 f303 	mul.w	r3, r2, r3
1a012cee:	627b      	str	r3, [r7, #36]	; 0x24
	while (Chip_I2C_MasterTransfer(id, &xfer) == I2C_STATUS_ARBLOST) {
1a012cf0:	e004      	b.n	1a012cfc <Chip_I2C_MasterSend+0x4c>
		if (timeout-- == 0) {
1a012cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a012cf4:	1e5a      	subs	r2, r3, #1
1a012cf6:	627a      	str	r2, [r7, #36]	; 0x24
1a012cf8:	2b00      	cmp	r3, #0
1a012cfa:	d00a      	beq.n	1a012d12 <Chip_I2C_MasterSend+0x62>
	I2C_XFER_T xfer = {0};
	xfer.slaveAddr = slaveAddr;
	xfer.txBuff = buff;
	xfer.txSz = len;
	uint32_t timeout = TIMEOUT * len;
	while (Chip_I2C_MasterTransfer(id, &xfer) == I2C_STATUS_ARBLOST) {
1a012cfc:	f107 020c 	add.w	r2, r7, #12
1a012d00:	79fb      	ldrb	r3, [r7, #7]
1a012d02:	4611      	mov	r1, r2
1a012d04:	4618      	mov	r0, r3
1a012d06:	f7ff ff85 	bl	1a012c14 <Chip_I2C_MasterTransfer>
1a012d0a:	4603      	mov	r3, r0
1a012d0c:	2b02      	cmp	r3, #2
1a012d0e:	d0f0      	beq.n	1a012cf2 <Chip_I2C_MasterSend+0x42>
1a012d10:	e000      	b.n	1a012d14 <Chip_I2C_MasterSend+0x64>
		if (timeout-- == 0) {
			break;
1a012d12:	bf00      	nop
		}
	}
	return len - xfer.txSz;
1a012d14:	797a      	ldrb	r2, [r7, #5]
1a012d16:	697b      	ldr	r3, [r7, #20]
1a012d18:	1ad3      	subs	r3, r2, r3
}
1a012d1a:	4618      	mov	r0, r3
1a012d1c:	3728      	adds	r7, #40	; 0x28
1a012d1e:	46bd      	mov	sp, r7
1a012d20:	bd80      	pop	{r7, pc}
1a012d22:	bf00      	nop

1a012d24 <Chip_I2C_MasterCmdRead>:

/* Transmit one byte and receive an array of bytes after a repeated start condition is generated in Master mode.
 * This function is useful for communicating with the I2C slave registers
 */
int Chip_I2C_MasterCmdRead(I2C_ID_T id, uint8_t slaveAddr, uint8_t cmd, uint8_t *buff, int len)
{
1a012d24:	b580      	push	{r7, lr}
1a012d26:	b08a      	sub	sp, #40	; 0x28
1a012d28:	af00      	add	r7, sp, #0
1a012d2a:	603b      	str	r3, [r7, #0]
1a012d2c:	4603      	mov	r3, r0
1a012d2e:	71fb      	strb	r3, [r7, #7]
1a012d30:	460b      	mov	r3, r1
1a012d32:	71bb      	strb	r3, [r7, #6]
1a012d34:	4613      	mov	r3, r2
1a012d36:	717b      	strb	r3, [r7, #5]
	I2C_XFER_T xfer = {0};
1a012d38:	f107 030c 	add.w	r3, r7, #12
1a012d3c:	2200      	movs	r2, #0
1a012d3e:	601a      	str	r2, [r3, #0]
1a012d40:	605a      	str	r2, [r3, #4]
1a012d42:	609a      	str	r2, [r3, #8]
1a012d44:	60da      	str	r2, [r3, #12]
1a012d46:	611a      	str	r2, [r3, #16]
1a012d48:	615a      	str	r2, [r3, #20]
	xfer.slaveAddr = slaveAddr;
1a012d4a:	79bb      	ldrb	r3, [r7, #6]
1a012d4c:	733b      	strb	r3, [r7, #12]
	xfer.txBuff = &cmd;
1a012d4e:	1d7b      	adds	r3, r7, #5
1a012d50:	613b      	str	r3, [r7, #16]
	xfer.txSz = 1;
1a012d52:	2301      	movs	r3, #1
1a012d54:	617b      	str	r3, [r7, #20]
	xfer.rxBuff = buff;
1a012d56:	683b      	ldr	r3, [r7, #0]
1a012d58:	61bb      	str	r3, [r7, #24]
	xfer.rxSz = len;
1a012d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a012d5c:	61fb      	str	r3, [r7, #28]
	uint32_t timeout = TIMEOUT * len;
1a012d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a012d60:	f64e 2260 	movw	r2, #60000	; 0xea60
1a012d64:	fb02 f303 	mul.w	r3, r2, r3
1a012d68:	627b      	str	r3, [r7, #36]	; 0x24
	while (Chip_I2C_MasterTransfer(id, &xfer) == I2C_STATUS_ARBLOST) {
1a012d6a:	e004      	b.n	1a012d76 <Chip_I2C_MasterCmdRead+0x52>
		if (timeout-- == 0) {
1a012d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a012d6e:	1e5a      	subs	r2, r3, #1
1a012d70:	627a      	str	r2, [r7, #36]	; 0x24
1a012d72:	2b00      	cmp	r3, #0
1a012d74:	d00a      	beq.n	1a012d8c <Chip_I2C_MasterCmdRead+0x68>
	xfer.txBuff = &cmd;
	xfer.txSz = 1;
	xfer.rxBuff = buff;
	xfer.rxSz = len;
	uint32_t timeout = TIMEOUT * len;
	while (Chip_I2C_MasterTransfer(id, &xfer) == I2C_STATUS_ARBLOST) {
1a012d76:	f107 020c 	add.w	r2, r7, #12
1a012d7a:	79fb      	ldrb	r3, [r7, #7]
1a012d7c:	4611      	mov	r1, r2
1a012d7e:	4618      	mov	r0, r3
1a012d80:	f7ff ff48 	bl	1a012c14 <Chip_I2C_MasterTransfer>
1a012d84:	4603      	mov	r3, r0
1a012d86:	2b02      	cmp	r3, #2
1a012d88:	d0f0      	beq.n	1a012d6c <Chip_I2C_MasterCmdRead+0x48>
1a012d8a:	e000      	b.n	1a012d8e <Chip_I2C_MasterCmdRead+0x6a>
		if (timeout-- == 0) {
			break;
1a012d8c:	bf00      	nop
		}
	}
	return len - xfer.rxSz;
1a012d8e:	69fb      	ldr	r3, [r7, #28]
1a012d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1a012d92:	1ad3      	subs	r3, r2, r3
}
1a012d94:	4618      	mov	r0, r3
1a012d96:	3728      	adds	r7, #40	; 0x28
1a012d98:	46bd      	mov	sp, r7
1a012d9a:	bd80      	pop	{r7, pc}

1a012d9c <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a012d9c:	b580      	push	{r7, lr}
1a012d9e:	b082      	sub	sp, #8
1a012da0:	af00      	add	r7, sp, #0
1a012da2:	4603      	mov	r3, r0
1a012da4:	71fb      	strb	r3, [r7, #7]
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a012da6:	79fa      	ldrb	r2, [r7, #7]
1a012da8:	4913      	ldr	r1, [pc, #76]	; (1a012df8 <Chip_I2C_MasterStateHandler+0x5c>)
1a012daa:	4613      	mov	r3, r2
1a012dac:	00db      	lsls	r3, r3, #3
1a012dae:	1a9b      	subs	r3, r3, r2
1a012db0:	009b      	lsls	r3, r3, #2
1a012db2:	440b      	add	r3, r1
1a012db4:	6818      	ldr	r0, [r3, #0]
1a012db6:	79fa      	ldrb	r2, [r7, #7]
1a012db8:	490f      	ldr	r1, [pc, #60]	; (1a012df8 <Chip_I2C_MasterStateHandler+0x5c>)
1a012dba:	4613      	mov	r3, r2
1a012dbc:	00db      	lsls	r3, r3, #3
1a012dbe:	1a9b      	subs	r3, r3, r2
1a012dc0:	009b      	lsls	r3, r3, #2
1a012dc2:	440b      	add	r3, r1
1a012dc4:	3310      	adds	r3, #16
1a012dc6:	681b      	ldr	r3, [r3, #0]
1a012dc8:	4619      	mov	r1, r3
1a012dca:	f7ff fcf3 	bl	1a0127b4 <handleMasterXferState>
1a012dce:	4603      	mov	r3, r0
1a012dd0:	2b00      	cmp	r3, #0
1a012dd2:	d10c      	bne.n	1a012dee <Chip_I2C_MasterStateHandler+0x52>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a012dd4:	79fa      	ldrb	r2, [r7, #7]
1a012dd6:	4908      	ldr	r1, [pc, #32]	; (1a012df8 <Chip_I2C_MasterStateHandler+0x5c>)
1a012dd8:	4613      	mov	r3, r2
1a012dda:	00db      	lsls	r3, r3, #3
1a012ddc:	1a9b      	subs	r3, r3, r2
1a012dde:	009b      	lsls	r3, r3, #2
1a012de0:	440b      	add	r3, r1
1a012de2:	3308      	adds	r3, #8
1a012de4:	681b      	ldr	r3, [r3, #0]
1a012de6:	79fa      	ldrb	r2, [r7, #7]
1a012de8:	2102      	movs	r1, #2
1a012dea:	4610      	mov	r0, r2
1a012dec:	4798      	blx	r3
	}
}
1a012dee:	bf00      	nop
1a012df0:	3708      	adds	r7, #8
1a012df2:	46bd      	mov	sp, r7
1a012df4:	bd80      	pop	{r7, pc}
1a012df6:	bf00      	nop
1a012df8:	10086078 	.word	0x10086078

1a012dfc <Chip_I2C_IsStateChanged>:
	LPC_I2Cx(id)->CONCLR = I2C_I2CONCLR_I2ENC;
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
1a012dfc:	b480      	push	{r7}
1a012dfe:	b083      	sub	sp, #12
1a012e00:	af00      	add	r7, sp, #0
1a012e02:	4603      	mov	r3, r0
1a012e04:	71fb      	strb	r3, [r7, #7]
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a012e06:	79fa      	ldrb	r2, [r7, #7]
1a012e08:	490a      	ldr	r1, [pc, #40]	; (1a012e34 <Chip_I2C_IsStateChanged+0x38>)
1a012e0a:	4613      	mov	r3, r2
1a012e0c:	00db      	lsls	r3, r3, #3
1a012e0e:	1a9b      	subs	r3, r3, r2
1a012e10:	009b      	lsls	r3, r3, #2
1a012e12:	440b      	add	r3, r1
1a012e14:	681b      	ldr	r3, [r3, #0]
1a012e16:	681b      	ldr	r3, [r3, #0]
1a012e18:	f003 0308 	and.w	r3, r3, #8
1a012e1c:	2b00      	cmp	r3, #0
1a012e1e:	bf14      	ite	ne
1a012e20:	2301      	movne	r3, #1
1a012e22:	2300      	moveq	r3, #0
1a012e24:	b2db      	uxtb	r3, r3
}
1a012e26:	4618      	mov	r0, r3
1a012e28:	370c      	adds	r7, #12
1a012e2a:	46bd      	mov	sp, r7
1a012e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012e30:	4770      	bx	lr
1a012e32:	bf00      	nop
1a012e34:	10086078 	.word	0x10086078

1a012e38 <iap_entry>:
/**
 * @}
 */

static INLINE void iap_entry(uint32_t cmd_param[5],uint32_t status_result[4])
{
1a012e38:	b580      	push	{r7, lr}
1a012e3a:	b082      	sub	sp, #8
1a012e3c:	af00      	add	r7, sp, #0
1a012e3e:	6078      	str	r0, [r7, #4]
1a012e40:	6039      	str	r1, [r7, #0]
	((IAP_ENTRY_T) IAP_ENTRY_LOCATION)(cmd_param, status_result);
1a012e42:	4b04      	ldr	r3, [pc, #16]	; (1a012e54 <iap_entry+0x1c>)
1a012e44:	681b      	ldr	r3, [r3, #0]
1a012e46:	6839      	ldr	r1, [r7, #0]
1a012e48:	6878      	ldr	r0, [r7, #4]
1a012e4a:	4798      	blx	r3
}
1a012e4c:	bf00      	nop
1a012e4e:	3708      	adds	r7, #8
1a012e50:	46bd      	mov	sp, r7
1a012e52:	bd80      	pop	{r7, pc}
1a012e54:	10400100 	.word	0x10400100

1a012e58 <Chip_IAP_ReinvokeISP>:
	return result[0];
}

/* Reinvoke ISP */
uint8_t Chip_IAP_ReinvokeISP()
{
1a012e58:	b580      	push	{r7, lr}
1a012e5a:	b08a      	sub	sp, #40	; 0x28
1a012e5c:	af00      	add	r7, sp, #0
	uint32_t command[5], result[4];

	command[0] = IAP_REINVOKE_ISP_CMD;
1a012e5e:	2339      	movs	r3, #57	; 0x39
1a012e60:	617b      	str	r3, [r7, #20]
	iap_entry(command, result);
1a012e62:	1d3a      	adds	r2, r7, #4
1a012e64:	f107 0314 	add.w	r3, r7, #20
1a012e68:	4611      	mov	r1, r2
1a012e6a:	4618      	mov	r0, r3
1a012e6c:	f7ff ffe4 	bl	1a012e38 <iap_entry>

	return result[0];
1a012e70:	687b      	ldr	r3, [r7, #4]
1a012e72:	b2db      	uxtb	r3, r3
}
1a012e74:	4618      	mov	r0, r3
1a012e76:	3728      	adds	r7, #40	; 0x28
1a012e78:	46bd      	mov	sp, r7
1a012e7a:	bd80      	pop	{r7, pc}

1a012e7c <Chip_OTP_Init>:
 * Public functions
 ****************************************************************************/

/* CHIP OTP Initialisation function */
uint32_t Chip_OTP_Init(void)
{
1a012e7c:	b580      	push	{r7, lr}
1a012e7e:	b082      	sub	sp, #8
1a012e80:	af00      	add	r7, sp, #0
	uint32_t (*ROM_otp_Init)(void);

	BOOTROM_API_TABLE = *((unsigned long * *) BOOTROM_BASE + OTP_API_TABLE_OFFSET);
1a012e82:	4b27      	ldr	r3, [pc, #156]	; (1a012f20 <Chip_OTP_Init+0xa4>)
1a012e84:	681b      	ldr	r3, [r3, #0]
1a012e86:	4a27      	ldr	r2, [pc, #156]	; (1a012f24 <Chip_OTP_Init+0xa8>)
1a012e88:	6013      	str	r3, [r2, #0]

	ROM_otp_Init      = (uint32_t (*)(void))BOOTROM_API_TABLE[0];
1a012e8a:	4b26      	ldr	r3, [pc, #152]	; (1a012f24 <Chip_OTP_Init+0xa8>)
1a012e8c:	681b      	ldr	r3, [r3, #0]
1a012e8e:	681b      	ldr	r3, [r3, #0]
1a012e90:	607b      	str	r3, [r7, #4]
	Otp_ProgBootSrc   = (uint32_t (*)(CHIP_OTP_BOOT_SRC_T BootSrc))BOOTROM_API_TABLE[1];
1a012e92:	4b24      	ldr	r3, [pc, #144]	; (1a012f24 <Chip_OTP_Init+0xa8>)
1a012e94:	681b      	ldr	r3, [r3, #0]
1a012e96:	3304      	adds	r3, #4
1a012e98:	681b      	ldr	r3, [r3, #0]
1a012e9a:	461a      	mov	r2, r3
1a012e9c:	4b22      	ldr	r3, [pc, #136]	; (1a012f28 <Chip_OTP_Init+0xac>)
1a012e9e:	601a      	str	r2, [r3, #0]
	Otp_ProgJTAGDis   = (uint32_t (*)(void))BOOTROM_API_TABLE[2];
1a012ea0:	4b20      	ldr	r3, [pc, #128]	; (1a012f24 <Chip_OTP_Init+0xa8>)
1a012ea2:	681b      	ldr	r3, [r3, #0]
1a012ea4:	3308      	adds	r3, #8
1a012ea6:	681b      	ldr	r3, [r3, #0]
1a012ea8:	461a      	mov	r2, r3
1a012eaa:	4b20      	ldr	r3, [pc, #128]	; (1a012f2c <Chip_OTP_Init+0xb0>)
1a012eac:	601a      	str	r2, [r3, #0]
	Otp_ProgUSBID     = (uint32_t (*)(uint32_t ProductID, uint32_t VendorID))BOOTROM_API_TABLE[3];
1a012eae:	4b1d      	ldr	r3, [pc, #116]	; (1a012f24 <Chip_OTP_Init+0xa8>)
1a012eb0:	681b      	ldr	r3, [r3, #0]
1a012eb2:	330c      	adds	r3, #12
1a012eb4:	681b      	ldr	r3, [r3, #0]
1a012eb6:	461a      	mov	r2, r3
1a012eb8:	4b1d      	ldr	r3, [pc, #116]	; (1a012f30 <Chip_OTP_Init+0xb4>)
1a012eba:	601a      	str	r2, [r3, #0]
	Otp_ProgGP0       = (uint32_t (*)(uint32_t Data, uint32_t Mask))BOOTROM_API_TABLE[8];
1a012ebc:	4b19      	ldr	r3, [pc, #100]	; (1a012f24 <Chip_OTP_Init+0xa8>)
1a012ebe:	681b      	ldr	r3, [r3, #0]
1a012ec0:	3320      	adds	r3, #32
1a012ec2:	681b      	ldr	r3, [r3, #0]
1a012ec4:	461a      	mov	r2, r3
1a012ec6:	4b1b      	ldr	r3, [pc, #108]	; (1a012f34 <Chip_OTP_Init+0xb8>)
1a012ec8:	601a      	str	r2, [r3, #0]
	Otp_ProgGP1       = (uint32_t (*)(uint32_t Data, uint32_t Mask))BOOTROM_API_TABLE[9];
1a012eca:	4b16      	ldr	r3, [pc, #88]	; (1a012f24 <Chip_OTP_Init+0xa8>)
1a012ecc:	681b      	ldr	r3, [r3, #0]
1a012ece:	3324      	adds	r3, #36	; 0x24
1a012ed0:	681b      	ldr	r3, [r3, #0]
1a012ed2:	461a      	mov	r2, r3
1a012ed4:	4b18      	ldr	r3, [pc, #96]	; (1a012f38 <Chip_OTP_Init+0xbc>)
1a012ed6:	601a      	str	r2, [r3, #0]
	Otp_ProgGP2       = (uint32_t (*)(uint32_t Data, uint32_t Mask))BOOTROM_API_TABLE[10];
1a012ed8:	4b12      	ldr	r3, [pc, #72]	; (1a012f24 <Chip_OTP_Init+0xa8>)
1a012eda:	681b      	ldr	r3, [r3, #0]
1a012edc:	3328      	adds	r3, #40	; 0x28
1a012ede:	681b      	ldr	r3, [r3, #0]
1a012ee0:	461a      	mov	r2, r3
1a012ee2:	4b16      	ldr	r3, [pc, #88]	; (1a012f3c <Chip_OTP_Init+0xc0>)
1a012ee4:	601a      	str	r2, [r3, #0]
	Otp_ProgKey1      = (uint32_t (*)(uint8_t *key))BOOTROM_API_TABLE[11];
1a012ee6:	4b0f      	ldr	r3, [pc, #60]	; (1a012f24 <Chip_OTP_Init+0xa8>)
1a012ee8:	681b      	ldr	r3, [r3, #0]
1a012eea:	332c      	adds	r3, #44	; 0x2c
1a012eec:	681b      	ldr	r3, [r3, #0]
1a012eee:	461a      	mov	r2, r3
1a012ef0:	4b13      	ldr	r3, [pc, #76]	; (1a012f40 <Chip_OTP_Init+0xc4>)
1a012ef2:	601a      	str	r2, [r3, #0]
	Otp_ProgKey2      = (uint32_t (*)(uint8_t *key))BOOTROM_API_TABLE[12];
1a012ef4:	4b0b      	ldr	r3, [pc, #44]	; (1a012f24 <Chip_OTP_Init+0xa8>)
1a012ef6:	681b      	ldr	r3, [r3, #0]
1a012ef8:	3330      	adds	r3, #48	; 0x30
1a012efa:	681b      	ldr	r3, [r3, #0]
1a012efc:	461a      	mov	r2, r3
1a012efe:	4b11      	ldr	r3, [pc, #68]	; (1a012f44 <Chip_OTP_Init+0xc8>)
1a012f00:	601a      	str	r2, [r3, #0]
	Otp_GenRand       = (uint32_t (*)(void))BOOTROM_API_TABLE[13];
1a012f02:	4b08      	ldr	r3, [pc, #32]	; (1a012f24 <Chip_OTP_Init+0xa8>)
1a012f04:	681b      	ldr	r3, [r3, #0]
1a012f06:	3334      	adds	r3, #52	; 0x34
1a012f08:	681b      	ldr	r3, [r3, #0]
1a012f0a:	461a      	mov	r2, r3
1a012f0c:	4b0e      	ldr	r3, [pc, #56]	; (1a012f48 <Chip_OTP_Init+0xcc>)
1a012f0e:	601a      	str	r2, [r3, #0]

	return ROM_otp_Init();
1a012f10:	687b      	ldr	r3, [r7, #4]
1a012f12:	4798      	blx	r3
1a012f14:	4603      	mov	r3, r0
}
1a012f16:	4618      	mov	r0, r3
1a012f18:	3708      	adds	r7, #8
1a012f1a:	46bd      	mov	sp, r7
1a012f1c:	bd80      	pop	{r7, pc}
1a012f1e:	bf00      	nop
1a012f20:	10400104 	.word	0x10400104
1a012f24:	1008741c 	.word	0x1008741c
1a012f28:	10087420 	.word	0x10087420
1a012f2c:	10087424 	.word	0x10087424
1a012f30:	10087428 	.word	0x10087428
1a012f34:	1008742c 	.word	0x1008742c
1a012f38:	10087430 	.word	0x10087430
1a012f3c:	10087434 	.word	0x10087434
1a012f40:	10087438 	.word	0x10087438
1a012f44:	1008743c 	.word	0x1008743c
1a012f48:	10087440 	.word	0x10087440

1a012f4c <Chip_RGU_TriggerReset>:
 * Public functions
 ****************************************************************************/

/* Trigger a peripheral reset for the selected peripheral */
void Chip_RGU_TriggerReset(CHIP_RGU_RST_T ResetNumber)
{
1a012f4c:	b480      	push	{r7}
1a012f4e:	b085      	sub	sp, #20
1a012f50:	af00      	add	r7, sp, #0
1a012f52:	4603      	mov	r3, r0
1a012f54:	71fb      	strb	r3, [r7, #7]
	volatile uint32_t *p;

	/* To trigger reset- write RESET_CTRLx with a 1 bit */
	p = (volatile uint32_t *) &(LPC_RGU->RESET_CTRL0);
1a012f56:	4b0c      	ldr	r3, [pc, #48]	; (1a012f88 <Chip_RGU_TriggerReset+0x3c>)
1a012f58:	60fb      	str	r3, [r7, #12]

	/* higher numbers are in RESET_CTRL1, RESET_CTRL2, etc. */
	p += ResetNumber / 32;
1a012f5a:	79fb      	ldrb	r3, [r7, #7]
1a012f5c:	095b      	lsrs	r3, r3, #5
1a012f5e:	b2db      	uxtb	r3, r3
1a012f60:	009b      	lsls	r3, r3, #2
1a012f62:	68fa      	ldr	r2, [r7, #12]
1a012f64:	4413      	add	r3, r2
1a012f66:	60fb      	str	r3, [r7, #12]

	/* On the LPC18xx and LPC43xx, most of the reset bits automatically clear
	   after 1 clock cycle, so set the bit and return */
	*p = (1 << (ResetNumber % 32));
1a012f68:	79fb      	ldrb	r3, [r7, #7]
1a012f6a:	f003 031f 	and.w	r3, r3, #31
1a012f6e:	2201      	movs	r2, #1
1a012f70:	fa02 f303 	lsl.w	r3, r2, r3
1a012f74:	461a      	mov	r2, r3
1a012f76:	68fb      	ldr	r3, [r7, #12]
1a012f78:	601a      	str	r2, [r3, #0]
}
1a012f7a:	bf00      	nop
1a012f7c:	3714      	adds	r7, #20
1a012f7e:	46bd      	mov	sp, r7
1a012f80:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012f84:	4770      	bx	lr
1a012f86:	bf00      	nop
1a012f88:	40053100 	.word	0x40053100

1a012f8c <Chip_RGU_ClearReset>:

/* Clears reset for the selected peripheral */
void Chip_RGU_ClearReset(CHIP_RGU_RST_T ResetNumber)
{
1a012f8c:	b480      	push	{r7}
1a012f8e:	b085      	sub	sp, #20
1a012f90:	af00      	add	r7, sp, #0
1a012f92:	4603      	mov	r3, r0
1a012f94:	71fb      	strb	r3, [r7, #7]
	volatile uint32_t *p;

	/* To trigger reset- write RESET_CTRLx with a 1 bit */
	p = (volatile uint32_t *) &(LPC_RGU->RESET_CTRL0);
1a012f96:	4b09      	ldr	r3, [pc, #36]	; (1a012fbc <Chip_RGU_ClearReset+0x30>)
1a012f98:	60fb      	str	r3, [r7, #12]

	/* higher numbers are in RESET_CTRL1, RESET_CTRL2, etc. */
	p += ResetNumber / 32;
1a012f9a:	79fb      	ldrb	r3, [r7, #7]
1a012f9c:	095b      	lsrs	r3, r3, #5
1a012f9e:	b2db      	uxtb	r3, r3
1a012fa0:	009b      	lsls	r3, r3, #2
1a012fa2:	68fa      	ldr	r2, [r7, #12]
1a012fa4:	4413      	add	r3, r2
1a012fa6:	60fb      	str	r3, [r7, #12]

	/* On the LPC18xx and LPC43xx, most of the reset bits automatically clear
	   after 1 clock cycle, so set the bit and return */
	*p = 0;
1a012fa8:	68fb      	ldr	r3, [r7, #12]
1a012faa:	2200      	movs	r2, #0
1a012fac:	601a      	str	r2, [r3, #0]
}
1a012fae:	bf00      	nop
1a012fb0:	3714      	adds	r7, #20
1a012fb2:	46bd      	mov	sp, r7
1a012fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012fb8:	4770      	bx	lr
1a012fba:	bf00      	nop
1a012fbc:	40053100 	.word	0x40053100

1a012fc0 <Chip_RIT_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the RIT */
void Chip_RIT_Init(LPC_RITIMER_T *pRITimer)
{
1a012fc0:	b580      	push	{r7, lr}
1a012fc2:	b082      	sub	sp, #8
1a012fc4:	af00      	add	r7, sp, #0
1a012fc6:	6078      	str	r0, [r7, #4]
	Chip_Clock_EnableOpts(CLK_MX_RITIMER, true, true, 1);
1a012fc8:	2301      	movs	r3, #1
1a012fca:	2201      	movs	r2, #1
1a012fcc:	2101      	movs	r1, #1
1a012fce:	20a0      	movs	r0, #160	; 0xa0
1a012fd0:	f7ff f9d2 	bl	1a012378 <Chip_Clock_EnableOpts>
	pRITimer->COMPVAL = 0xFFFFFFFF;
1a012fd4:	687b      	ldr	r3, [r7, #4]
1a012fd6:	f04f 32ff 	mov.w	r2, #4294967295
1a012fda:	601a      	str	r2, [r3, #0]
	pRITimer->MASK  = 0x00000000;
1a012fdc:	687b      	ldr	r3, [r7, #4]
1a012fde:	2200      	movs	r2, #0
1a012fe0:	605a      	str	r2, [r3, #4]
	pRITimer->CTRL  = 0x0C;
1a012fe2:	687b      	ldr	r3, [r7, #4]
1a012fe4:	220c      	movs	r2, #12
1a012fe6:	609a      	str	r2, [r3, #8]
	pRITimer->COUNTER   = 0x00000000;
1a012fe8:	687b      	ldr	r3, [r7, #4]
1a012fea:	2200      	movs	r2, #0
1a012fec:	60da      	str	r2, [r3, #12]
}
1a012fee:	bf00      	nop
1a012ff0:	3708      	adds	r7, #8
1a012ff2:	46bd      	mov	sp, r7
1a012ff4:	bd80      	pop	{r7, pc}
1a012ff6:	bf00      	nop

1a012ff8 <Chip_RTC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the RTC peripheral */
void Chip_RTC_Init(LPC_RTC_T *pRTC)
{
1a012ff8:	b580      	push	{r7, lr}
1a012ffa:	b082      	sub	sp, #8
1a012ffc:	af00      	add	r7, sp, #0
1a012ffe:	6078      	str	r0, [r7, #4]
	Chip_Clock_RTCEnable();
1a013000:	f7ff fa28 	bl	1a012454 <Chip_Clock_RTCEnable>

	/* Disable RTC */
	Chip_RTC_Enable(pRTC, DISABLE);
1a013004:	2100      	movs	r1, #0
1a013006:	6878      	ldr	r0, [r7, #4]
1a013008:	f000 f84c 	bl	1a0130a4 <Chip_RTC_Enable>

	/* Disable Calibration */
	Chip_RTC_CalibCounterCmd(pRTC, DISABLE);
1a01300c:	2100      	movs	r1, #0
1a01300e:	6878      	ldr	r0, [r7, #4]
1a013010:	f000 f898 	bl	1a013144 <Chip_RTC_CalibCounterCmd>

	/* Reset RTC Clock */
	Chip_RTC_ResetClockTickCounter(pRTC);
1a013014:	6878      	ldr	r0, [r7, #4]
1a013016:	f000 f823 	bl	1a013060 <Chip_RTC_ResetClockTickCounter>

	/* Clear counter increment and alarm interrupt */
	pRTC->ILR = RTC_IRL_RTCCIF | RTC_IRL_RTCALF;
1a01301a:	687b      	ldr	r3, [r7, #4]
1a01301c:	2203      	movs	r2, #3
1a01301e:	601a      	str	r2, [r3, #0]
	while (pRTC->ILR != 0) {}
1a013020:	bf00      	nop
1a013022:	687b      	ldr	r3, [r7, #4]
1a013024:	681b      	ldr	r3, [r3, #0]
1a013026:	2b00      	cmp	r3, #0
1a013028:	d1fb      	bne.n	1a013022 <Chip_RTC_Init+0x2a>

	/* Clear all register to be default */
	pRTC->CIIR = 0x00;
1a01302a:	687b      	ldr	r3, [r7, #4]
1a01302c:	2200      	movs	r2, #0
1a01302e:	60da      	str	r2, [r3, #12]
	pRTC->AMR = 0xFF;
1a013030:	687b      	ldr	r3, [r7, #4]
1a013032:	22ff      	movs	r2, #255	; 0xff
1a013034:	611a      	str	r2, [r3, #16]
	pRTC->CALIBRATION = 0x00;
1a013036:	687b      	ldr	r3, [r7, #4]
1a013038:	2200      	movs	r2, #0
1a01303a:	641a      	str	r2, [r3, #64]	; 0x40
}
1a01303c:	bf00      	nop
1a01303e:	3708      	adds	r7, #8
1a013040:	46bd      	mov	sp, r7
1a013042:	bd80      	pop	{r7, pc}

1a013044 <Chip_RTC_DeInit>:

/*De-initialize the RTC peripheral */
void Chip_RTC_DeInit(LPC_RTC_T *pRTC)
{
1a013044:	b480      	push	{r7}
1a013046:	b083      	sub	sp, #12
1a013048:	af00      	add	r7, sp, #0
1a01304a:	6078      	str	r0, [r7, #4]
	pRTC->CCR = 0x00;
1a01304c:	687b      	ldr	r3, [r7, #4]
1a01304e:	2200      	movs	r2, #0
1a013050:	609a      	str	r2, [r3, #8]
}
1a013052:	bf00      	nop
1a013054:	370c      	adds	r7, #12
1a013056:	46bd      	mov	sp, r7
1a013058:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01305c:	4770      	bx	lr
1a01305e:	bf00      	nop

1a013060 <Chip_RTC_ResetClockTickCounter>:

/* Reset clock tick counter in the RTC peripheral */
void Chip_RTC_ResetClockTickCounter(LPC_RTC_T *pRTC)
{
1a013060:	b480      	push	{r7}
1a013062:	b083      	sub	sp, #12
1a013064:	af00      	add	r7, sp, #0
1a013066:	6078      	str	r0, [r7, #4]
	do {
		/* Reset RTC clock*/
		pRTC->CCR |= RTC_CCR_CTCRST;
1a013068:	687b      	ldr	r3, [r7, #4]
1a01306a:	689b      	ldr	r3, [r3, #8]
1a01306c:	f043 0202 	orr.w	r2, r3, #2
1a013070:	687b      	ldr	r3, [r7, #4]
1a013072:	609a      	str	r2, [r3, #8]
	} while ((pRTC->CCR & RTC_CCR_CTCRST) != RTC_CCR_CTCRST);
1a013074:	687b      	ldr	r3, [r7, #4]
1a013076:	689b      	ldr	r3, [r3, #8]
1a013078:	f003 0302 	and.w	r3, r3, #2
1a01307c:	2b00      	cmp	r3, #0
1a01307e:	d0f3      	beq.n	1a013068 <Chip_RTC_ResetClockTickCounter+0x8>

	do {
		/* Finish resetting RTC clock */
		pRTC->CCR &= (~RTC_CCR_CTCRST) & RTC_CCR_BITMASK;
1a013080:	687b      	ldr	r3, [r7, #4]
1a013082:	689b      	ldr	r3, [r3, #8]
1a013084:	f003 0211 	and.w	r2, r3, #17
1a013088:	687b      	ldr	r3, [r7, #4]
1a01308a:	609a      	str	r2, [r3, #8]
	} while (pRTC->CCR & RTC_CCR_CTCRST);
1a01308c:	687b      	ldr	r3, [r7, #4]
1a01308e:	689b      	ldr	r3, [r3, #8]
1a013090:	f003 0302 	and.w	r3, r3, #2
1a013094:	2b00      	cmp	r3, #0
1a013096:	d1f3      	bne.n	1a013080 <Chip_RTC_ResetClockTickCounter+0x20>
}
1a013098:	bf00      	nop
1a01309a:	370c      	adds	r7, #12
1a01309c:	46bd      	mov	sp, r7
1a01309e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0130a2:	4770      	bx	lr

1a0130a4 <Chip_RTC_Enable>:

/* Start/Stop RTC peripheral */
void Chip_RTC_Enable(LPC_RTC_T *pRTC, FunctionalState NewState)
{
1a0130a4:	b480      	push	{r7}
1a0130a6:	b083      	sub	sp, #12
1a0130a8:	af00      	add	r7, sp, #0
1a0130aa:	6078      	str	r0, [r7, #4]
1a0130ac:	460b      	mov	r3, r1
1a0130ae:	70fb      	strb	r3, [r7, #3]
	if (NewState == ENABLE) {
1a0130b0:	78fb      	ldrb	r3, [r7, #3]
1a0130b2:	2b01      	cmp	r3, #1
1a0130b4:	d10c      	bne.n	1a0130d0 <Chip_RTC_Enable+0x2c>
		do {
			pRTC->CCR |= RTC_CCR_CLKEN;
1a0130b6:	687b      	ldr	r3, [r7, #4]
1a0130b8:	689b      	ldr	r3, [r3, #8]
1a0130ba:	f043 0201 	orr.w	r2, r3, #1
1a0130be:	687b      	ldr	r3, [r7, #4]
1a0130c0:	609a      	str	r2, [r3, #8]
		} while ((pRTC->CCR & RTC_CCR_CLKEN) == 0);
1a0130c2:	687b      	ldr	r3, [r7, #4]
1a0130c4:	689b      	ldr	r3, [r3, #8]
1a0130c6:	f003 0301 	and.w	r3, r3, #1
1a0130ca:	2b00      	cmp	r3, #0
1a0130cc:	d0f3      	beq.n	1a0130b6 <Chip_RTC_Enable+0x12>
	}
	else {
		pRTC->CCR &= (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
	}
}
1a0130ce:	e005      	b.n	1a0130dc <Chip_RTC_Enable+0x38>
		do {
			pRTC->CCR |= RTC_CCR_CLKEN;
		} while ((pRTC->CCR & RTC_CCR_CLKEN) == 0);
	}
	else {
		pRTC->CCR &= (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a0130d0:	687b      	ldr	r3, [r7, #4]
1a0130d2:	689b      	ldr	r3, [r3, #8]
1a0130d4:	f003 0212 	and.w	r2, r3, #18
1a0130d8:	687b      	ldr	r3, [r7, #4]
1a0130da:	609a      	str	r2, [r3, #8]
	}
}
1a0130dc:	bf00      	nop
1a0130de:	370c      	adds	r7, #12
1a0130e0:	46bd      	mov	sp, r7
1a0130e2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0130e6:	4770      	bx	lr

1a0130e8 <Chip_RTC_SetFullTime>:
	}
}

/* Set full time in the RTC peripheral */
void Chip_RTC_SetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a0130e8:	b480      	push	{r7}
1a0130ea:	b085      	sub	sp, #20
1a0130ec:	af00      	add	r7, sp, #0
1a0130ee:	6078      	str	r0, [r7, #4]
1a0130f0:	6039      	str	r1, [r7, #0]
	RTC_TIMEINDEX_T i;
	uint32_t ccr_val = pRTC->CCR;
1a0130f2:	687b      	ldr	r3, [r7, #4]
1a0130f4:	689b      	ldr	r3, [r3, #8]
1a0130f6:	60bb      	str	r3, [r7, #8]

	/* Temporarily disable */
	if (ccr_val & RTC_CCR_CLKEN) {
1a0130f8:	68bb      	ldr	r3, [r7, #8]
1a0130fa:	f003 0301 	and.w	r3, r3, #1
1a0130fe:	2b00      	cmp	r3, #0
1a013100:	d004      	beq.n	1a01310c <Chip_RTC_SetFullTime+0x24>
		pRTC->CCR = ccr_val & (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a013102:	68bb      	ldr	r3, [r7, #8]
1a013104:	f003 0212 	and.w	r2, r3, #18
1a013108:	687b      	ldr	r3, [r7, #4]
1a01310a:	609a      	str	r2, [r3, #8]
	}

	/* Date time setting */
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
1a01310c:	2300      	movs	r3, #0
1a01310e:	73fb      	strb	r3, [r7, #15]
1a013110:	e00b      	b.n	1a01312a <Chip_RTC_SetFullTime+0x42>
		pRTC->TIME[i] = pFullTime->time[i];
1a013112:	7bfa      	ldrb	r2, [r7, #15]
1a013114:	7bf9      	ldrb	r1, [r7, #15]
1a013116:	683b      	ldr	r3, [r7, #0]
1a013118:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a01311c:	687b      	ldr	r3, [r7, #4]
1a01311e:	3208      	adds	r2, #8
1a013120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if (ccr_val & RTC_CCR_CLKEN) {
		pRTC->CCR = ccr_val & (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
	}

	/* Date time setting */
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
1a013124:	7bfb      	ldrb	r3, [r7, #15]
1a013126:	3301      	adds	r3, #1
1a013128:	73fb      	strb	r3, [r7, #15]
1a01312a:	7bfb      	ldrb	r3, [r7, #15]
1a01312c:	2b07      	cmp	r3, #7
1a01312e:	d9f0      	bls.n	1a013112 <Chip_RTC_SetFullTime+0x2a>
		pRTC->TIME[i] = pFullTime->time[i];
	}

	/* Restore to old setting */
	pRTC->CCR = ccr_val;
1a013130:	687b      	ldr	r3, [r7, #4]
1a013132:	68ba      	ldr	r2, [r7, #8]
1a013134:	609a      	str	r2, [r3, #8]
}
1a013136:	bf00      	nop
1a013138:	3714      	adds	r7, #20
1a01313a:	46bd      	mov	sp, r7
1a01313c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a013140:	4770      	bx	lr
1a013142:	bf00      	nop

1a013144 <Chip_RTC_CalibCounterCmd>:
	}
}

/* Enable/Disable calibration counter in the RTC peripheral */
void Chip_RTC_CalibCounterCmd(LPC_RTC_T *pRTC, FunctionalState NewState)
{
1a013144:	b480      	push	{r7}
1a013146:	b083      	sub	sp, #12
1a013148:	af00      	add	r7, sp, #0
1a01314a:	6078      	str	r0, [r7, #4]
1a01314c:	460b      	mov	r3, r1
1a01314e:	70fb      	strb	r3, [r7, #3]
	if (NewState == ENABLE) {
1a013150:	78fb      	ldrb	r3, [r7, #3]
1a013152:	2b01      	cmp	r3, #1
1a013154:	d10c      	bne.n	1a013170 <Chip_RTC_CalibCounterCmd+0x2c>
		do {
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
1a013156:	687b      	ldr	r3, [r7, #4]
1a013158:	689b      	ldr	r3, [r3, #8]
1a01315a:	f003 0203 	and.w	r2, r3, #3
1a01315e:	687b      	ldr	r3, [r7, #4]
1a013160:	609a      	str	r2, [r3, #8]
		} while (pRTC->CCR & RTC_CCR_CCALEN);
1a013162:	687b      	ldr	r3, [r7, #4]
1a013164:	689b      	ldr	r3, [r3, #8]
1a013166:	f003 0310 	and.w	r3, r3, #16
1a01316a:	2b00      	cmp	r3, #0
1a01316c:	d1f3      	bne.n	1a013156 <Chip_RTC_CalibCounterCmd+0x12>
	}
	else {
		pRTC->CCR |= RTC_CCR_CCALEN;
	}
}
1a01316e:	e005      	b.n	1a01317c <Chip_RTC_CalibCounterCmd+0x38>
		do {
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
		} while (pRTC->CCR & RTC_CCR_CCALEN);
	}
	else {
		pRTC->CCR |= RTC_CCR_CCALEN;
1a013170:	687b      	ldr	r3, [r7, #4]
1a013172:	689b      	ldr	r3, [r3, #8]
1a013174:	f043 0210 	orr.w	r2, r3, #16
1a013178:	687b      	ldr	r3, [r7, #4]
1a01317a:	609a      	str	r2, [r3, #8]
	}
}
1a01317c:	bf00      	nop
1a01317e:	370c      	adds	r7, #12
1a013180:	46bd      	mov	sp, r7
1a013182:	f85d 7b04 	ldr.w	r7, [sp], #4
1a013186:	4770      	bx	lr

1a013188 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a013188:	b590      	push	{r4, r7, lr}
1a01318a:	b085      	sub	sp, #20
1a01318c:	af00      	add	r7, sp, #0
1a01318e:	4603      	mov	r3, r0
1a013190:	6039      	str	r1, [r7, #0]
1a013192:	71fb      	strb	r3, [r7, #7]
1a013194:	4613      	mov	r3, r2
1a013196:	71bb      	strb	r3, [r7, #6]
	int i;
	if (clkin == CLKIN_CRYSTAL) {
1a013198:	79fb      	ldrb	r3, [r7, #7]
1a01319a:	2b06      	cmp	r3, #6
1a01319c:	d101      	bne.n	1a0131a2 <Chip_SetupCoreClock+0x1a>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a01319e:	f7fe fdaf 	bl	1a011d00 <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0131a2:	79f9      	ldrb	r1, [r7, #7]
1a0131a4:	2300      	movs	r3, #0
1a0131a6:	2201      	movs	r2, #1
1a0131a8:	2004      	movs	r0, #4
1a0131aa:	f7ff f851 	bl	1a012250 <Chip_Clock_SetBaseClock>

	if (core_freq > 110000000UL) {
1a0131ae:	683b      	ldr	r3, [r7, #0]
1a0131b0:	4a1d      	ldr	r2, [pc, #116]	; (1a013228 <Chip_SetupCoreClock+0xa0>)
1a0131b2:	4293      	cmp	r3, r2
1a0131b4:	d90b      	bls.n	1a0131ce <Chip_SetupCoreClock+0x46>
		/* Setup PLL for 100MHz and switch main system clocking */
		Chip_Clock_SetupMainPLLHz(clkin, CGU_IRC_FREQ, 110 * 1000000, 110 * 1000000);
1a0131b6:	79f8      	ldrb	r0, [r7, #7]
1a0131b8:	4b1b      	ldr	r3, [pc, #108]	; (1a013228 <Chip_SetupCoreClock+0xa0>)
1a0131ba:	4a1b      	ldr	r2, [pc, #108]	; (1a013228 <Chip_SetupCoreClock+0xa0>)
1a0131bc:	491b      	ldr	r1, [pc, #108]	; (1a01322c <Chip_SetupCoreClock+0xa4>)
1a0131be:	f7fe fdd7 	bl	1a011d70 <Chip_Clock_SetupMainPLLHz>
		Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0131c2:	2300      	movs	r3, #0
1a0131c4:	2201      	movs	r2, #1
1a0131c6:	2109      	movs	r1, #9
1a0131c8:	2004      	movs	r0, #4
1a0131ca:	f7ff f841 	bl	1a012250 <Chip_Clock_SetBaseClock>
	}

	/* Setup PLL for maximum clock */
	Chip_Clock_SetupMainPLLHz(clkin, OscRateIn, core_freq, core_freq);
1a0131ce:	4b18      	ldr	r3, [pc, #96]	; (1a013230 <Chip_SetupCoreClock+0xa8>)
1a0131d0:	6819      	ldr	r1, [r3, #0]
1a0131d2:	79f8      	ldrb	r0, [r7, #7]
1a0131d4:	683b      	ldr	r3, [r7, #0]
1a0131d6:	683a      	ldr	r2, [r7, #0]
1a0131d8:	f7fe fdca 	bl	1a011d70 <Chip_Clock_SetupMainPLLHz>

	if (setbase) {
1a0131dc:	79bb      	ldrb	r3, [r7, #6]
1a0131de:	2b00      	cmp	r3, #0
1a0131e0:	d01e      	beq.n	1a013220 <Chip_SetupCoreClock+0x98>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0131e2:	2300      	movs	r3, #0
1a0131e4:	60fb      	str	r3, [r7, #12]
1a0131e6:	e018      	b.n	1a01321a <Chip_SetupCoreClock+0x92>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0131e8:	4a12      	ldr	r2, [pc, #72]	; (1a013234 <Chip_SetupCoreClock+0xac>)
1a0131ea:	68fb      	ldr	r3, [r7, #12]
1a0131ec:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
1a0131f0:	4a10      	ldr	r2, [pc, #64]	; (1a013234 <Chip_SetupCoreClock+0xac>)
1a0131f2:	68fb      	ldr	r3, [r7, #12]
1a0131f4:	009b      	lsls	r3, r3, #2
1a0131f6:	4413      	add	r3, r2
1a0131f8:	7859      	ldrb	r1, [r3, #1]
1a0131fa:	4a0e      	ldr	r2, [pc, #56]	; (1a013234 <Chip_SetupCoreClock+0xac>)
1a0131fc:	68fb      	ldr	r3, [r7, #12]
1a0131fe:	009b      	lsls	r3, r3, #2
1a013200:	4413      	add	r3, r2
1a013202:	789c      	ldrb	r4, [r3, #2]
1a013204:	4a0b      	ldr	r2, [pc, #44]	; (1a013234 <Chip_SetupCoreClock+0xac>)
1a013206:	68fb      	ldr	r3, [r7, #12]
1a013208:	009b      	lsls	r3, r3, #2
1a01320a:	4413      	add	r3, r2
1a01320c:	78db      	ldrb	r3, [r3, #3]
1a01320e:	4622      	mov	r2, r4
1a013210:	f7ff f81e 	bl	1a012250 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a013214:	68fb      	ldr	r3, [r7, #12]
1a013216:	3301      	adds	r3, #1
1a013218:	60fb      	str	r3, [r7, #12]
1a01321a:	68fb      	ldr	r3, [r7, #12]
1a01321c:	2b11      	cmp	r3, #17
1a01321e:	d9e3      	bls.n	1a0131e8 <Chip_SetupCoreClock+0x60>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a013220:	bf00      	nop
1a013222:	3714      	adds	r7, #20
1a013224:	46bd      	mov	sp, r7
1a013226:	bd90      	pop	{r4, r7, pc}
1a013228:	068e7780 	.word	0x068e7780
1a01322c:	00b71b00 	.word	0x00b71b00
1a013230:	1a018850 	.word	0x1a018850
1a013234:	1a01aa10 	.word	0x1a01aa10

1a013238 <Chip_TIMER_GetClockIndex>:
 * Private functions
 ****************************************************************************/

/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_TIMER_GetClockIndex(LPC_TIMER_T *pTMR)
{
1a013238:	b480      	push	{r7}
1a01323a:	b085      	sub	sp, #20
1a01323c:	af00      	add	r7, sp, #0
1a01323e:	6078      	str	r0, [r7, #4]
	CHIP_CCU_CLK_T clkTMR;

	if (pTMR == LPC_TIMER3) {
1a013240:	687b      	ldr	r3, [r7, #4]
1a013242:	4a0e      	ldr	r2, [pc, #56]	; (1a01327c <Chip_TIMER_GetClockIndex+0x44>)
1a013244:	4293      	cmp	r3, r2
1a013246:	d102      	bne.n	1a01324e <Chip_TIMER_GetClockIndex+0x16>
		clkTMR = CLK_MX_TIMER3;
1a013248:	23a4      	movs	r3, #164	; 0xa4
1a01324a:	81fb      	strh	r3, [r7, #14]
1a01324c:	e00f      	b.n	1a01326e <Chip_TIMER_GetClockIndex+0x36>
	}
    else if (pTMR == LPC_TIMER2) {
1a01324e:	687b      	ldr	r3, [r7, #4]
1a013250:	4a0b      	ldr	r2, [pc, #44]	; (1a013280 <Chip_TIMER_GetClockIndex+0x48>)
1a013252:	4293      	cmp	r3, r2
1a013254:	d102      	bne.n	1a01325c <Chip_TIMER_GetClockIndex+0x24>
		clkTMR = CLK_MX_TIMER2;
1a013256:	23a3      	movs	r3, #163	; 0xa3
1a013258:	81fb      	strh	r3, [r7, #14]
1a01325a:	e008      	b.n	1a01326e <Chip_TIMER_GetClockIndex+0x36>
	}
    else if (pTMR == LPC_TIMER1) {
1a01325c:	687b      	ldr	r3, [r7, #4]
1a01325e:	4a09      	ldr	r2, [pc, #36]	; (1a013284 <Chip_TIMER_GetClockIndex+0x4c>)
1a013260:	4293      	cmp	r3, r2
1a013262:	d102      	bne.n	1a01326a <Chip_TIMER_GetClockIndex+0x32>
		clkTMR = CLK_MX_TIMER1;
1a013264:	2385      	movs	r3, #133	; 0x85
1a013266:	81fb      	strh	r3, [r7, #14]
1a013268:	e001      	b.n	1a01326e <Chip_TIMER_GetClockIndex+0x36>
	}
	else {
		clkTMR = CLK_MX_TIMER0;
1a01326a:	2384      	movs	r3, #132	; 0x84
1a01326c:	81fb      	strh	r3, [r7, #14]
	}

	return clkTMR;
1a01326e:	89fb      	ldrh	r3, [r7, #14]
}
1a013270:	4618      	mov	r0, r3
1a013272:	3714      	adds	r7, #20
1a013274:	46bd      	mov	sp, r7
1a013276:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01327a:	4770      	bx	lr
1a01327c:	400c4000 	.word	0x400c4000
1a013280:	400c3000 	.word	0x400c3000
1a013284:	40085000 	.word	0x40085000

1a013288 <Chip_TIMER_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize a timer */
void Chip_TIMER_Init(LPC_TIMER_T *pTMR)
{
1a013288:	b580      	push	{r7, lr}
1a01328a:	b082      	sub	sp, #8
1a01328c:	af00      	add	r7, sp, #0
1a01328e:	6078      	str	r0, [r7, #4]
	Chip_Clock_Enable(Chip_TIMER_GetClockIndex(pTMR));
1a013290:	6878      	ldr	r0, [r7, #4]
1a013292:	f7ff ffd1 	bl	1a013238 <Chip_TIMER_GetClockIndex>
1a013296:	4603      	mov	r3, r0
1a013298:	4618      	mov	r0, r3
1a01329a:	f7ff f8ab 	bl	1a0123f4 <Chip_Clock_Enable>
}
1a01329e:	bf00      	nop
1a0132a0:	3708      	adds	r7, #8
1a0132a2:	46bd      	mov	sp, r7
1a0132a4:	bd80      	pop	{r7, pc}
1a0132a6:	bf00      	nop

1a0132a8 <Chip_TIMER_DeInit>:

/*	Shutdown a timer */
void Chip_TIMER_DeInit(LPC_TIMER_T *pTMR)
{
1a0132a8:	b580      	push	{r7, lr}
1a0132aa:	b082      	sub	sp, #8
1a0132ac:	af00      	add	r7, sp, #0
1a0132ae:	6078      	str	r0, [r7, #4]
	Chip_Clock_Disable(Chip_TIMER_GetClockIndex(pTMR));
1a0132b0:	6878      	ldr	r0, [r7, #4]
1a0132b2:	f7ff ffc1 	bl	1a013238 <Chip_TIMER_GetClockIndex>
1a0132b6:	4603      	mov	r3, r0
1a0132b8:	4618      	mov	r0, r3
1a0132ba:	f7ff f8e1 	bl	1a012480 <Chip_Clock_Disable>
}
1a0132be:	bf00      	nop
1a0132c0:	3708      	adds	r7, #8
1a0132c2:	46bd      	mov	sp, r7
1a0132c4:	bd80      	pop	{r7, pc}
1a0132c6:	bf00      	nop

1a0132c8 <Chip_TIMER_Reset>:

/* Resets the timer terminal and prescale counts to 0 */
void Chip_TIMER_Reset(LPC_TIMER_T *pTMR)
{
1a0132c8:	b480      	push	{r7}
1a0132ca:	b085      	sub	sp, #20
1a0132cc:	af00      	add	r7, sp, #0
1a0132ce:	6078      	str	r0, [r7, #4]
	uint32_t reg;

	/* Disable timer, set terminal count to non-0 */
	reg = pTMR->TCR;
1a0132d0:	687b      	ldr	r3, [r7, #4]
1a0132d2:	685b      	ldr	r3, [r3, #4]
1a0132d4:	60fb      	str	r3, [r7, #12]
	pTMR->TCR = 0;
1a0132d6:	687b      	ldr	r3, [r7, #4]
1a0132d8:	2200      	movs	r2, #0
1a0132da:	605a      	str	r2, [r3, #4]
	pTMR->TC = 1;
1a0132dc:	687b      	ldr	r3, [r7, #4]
1a0132de:	2201      	movs	r2, #1
1a0132e0:	609a      	str	r2, [r3, #8]

	/* Reset timer counter */
	pTMR->TCR = TIMER_RESET;
1a0132e2:	687b      	ldr	r3, [r7, #4]
1a0132e4:	2202      	movs	r2, #2
1a0132e6:	605a      	str	r2, [r3, #4]

	/* Wait for terminal count to clear */
	while (pTMR->TC != 0) {}
1a0132e8:	bf00      	nop
1a0132ea:	687b      	ldr	r3, [r7, #4]
1a0132ec:	689b      	ldr	r3, [r3, #8]
1a0132ee:	2b00      	cmp	r3, #0
1a0132f0:	d1fb      	bne.n	1a0132ea <Chip_TIMER_Reset+0x22>

	/* Restore timer state */
	pTMR->TCR = reg;
1a0132f2:	687b      	ldr	r3, [r7, #4]
1a0132f4:	68fa      	ldr	r2, [r7, #12]
1a0132f6:	605a      	str	r2, [r3, #4]
}
1a0132f8:	bf00      	nop
1a0132fa:	3714      	adds	r7, #20
1a0132fc:	46bd      	mov	sp, r7
1a0132fe:	f85d 7b04 	ldr.w	r7, [sp], #4
1a013302:	4770      	bx	lr

1a013304 <Chip_TIMER_ExtMatchControlSet>:

/* Sets external match control (MATn.matchnum) pin control */
void Chip_TIMER_ExtMatchControlSet(LPC_TIMER_T *pTMR, int8_t initial_state,
								   TIMER_PIN_MATCH_STATE_T matchState, int8_t matchnum)
{
1a013304:	b480      	push	{r7}
1a013306:	b085      	sub	sp, #20
1a013308:	af00      	add	r7, sp, #0
1a01330a:	6078      	str	r0, [r7, #4]
1a01330c:	4608      	mov	r0, r1
1a01330e:	4611      	mov	r1, r2
1a013310:	461a      	mov	r2, r3
1a013312:	4603      	mov	r3, r0
1a013314:	70fb      	strb	r3, [r7, #3]
1a013316:	460b      	mov	r3, r1
1a013318:	70bb      	strb	r3, [r7, #2]
1a01331a:	4613      	mov	r3, r2
1a01331c:	707b      	strb	r3, [r7, #1]
	uint32_t mask, reg;

	/* Clear bits corresponding to selected match register */
	mask = (1 << matchnum) | (0x03 << (4 + (matchnum * 2)));
1a01331e:	f997 3001 	ldrsb.w	r3, [r7, #1]
1a013322:	2201      	movs	r2, #1
1a013324:	409a      	lsls	r2, r3
1a013326:	f997 3001 	ldrsb.w	r3, [r7, #1]
1a01332a:	3302      	adds	r3, #2
1a01332c:	005b      	lsls	r3, r3, #1
1a01332e:	2103      	movs	r1, #3
1a013330:	fa01 f303 	lsl.w	r3, r1, r3
1a013334:	4313      	orrs	r3, r2
1a013336:	60fb      	str	r3, [r7, #12]
	reg = pTMR->EMR &= ~mask;
1a013338:	687b      	ldr	r3, [r7, #4]
1a01333a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
1a01333c:	68fb      	ldr	r3, [r7, #12]
1a01333e:	43db      	mvns	r3, r3
1a013340:	4013      	ands	r3, r2
1a013342:	687a      	ldr	r2, [r7, #4]
1a013344:	63d3      	str	r3, [r2, #60]	; 0x3c
1a013346:	60bb      	str	r3, [r7, #8]

	/* Set new configuration for selected match register */
	pTMR->EMR = reg | (((uint32_t) initial_state) << matchnum) |
1a013348:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a01334c:	f997 3001 	ldrsb.w	r3, [r7, #1]
1a013350:	409a      	lsls	r2, r3
1a013352:	68bb      	ldr	r3, [r7, #8]
1a013354:	431a      	orrs	r2, r3
				(((uint32_t) matchState) << (4 + (matchnum * 2)));
1a013356:	78b9      	ldrb	r1, [r7, #2]
1a013358:	f997 3001 	ldrsb.w	r3, [r7, #1]
1a01335c:	3302      	adds	r3, #2
1a01335e:	005b      	lsls	r3, r3, #1
1a013360:	fa01 f303 	lsl.w	r3, r1, r3
	/* Clear bits corresponding to selected match register */
	mask = (1 << matchnum) | (0x03 << (4 + (matchnum * 2)));
	reg = pTMR->EMR &= ~mask;

	/* Set new configuration for selected match register */
	pTMR->EMR = reg | (((uint32_t) initial_state) << matchnum) |
1a013364:	431a      	orrs	r2, r3
1a013366:	687b      	ldr	r3, [r7, #4]
1a013368:	63da      	str	r2, [r3, #60]	; 0x3c
				(((uint32_t) matchState) << (4 + (matchnum * 2)));
}
1a01336a:	bf00      	nop
1a01336c:	3714      	adds	r7, #20
1a01336e:	46bd      	mov	sp, r7
1a013370:	f85d 7b04 	ldr.w	r7, [sp], #4
1a013374:	4770      	bx	lr
1a013376:	bf00      	nop

1a013378 <Chip_UART_TXDisable>:
 * @brief	Disable transmission on UART TxD pin
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
1a013378:	b480      	push	{r7}
1a01337a:	b083      	sub	sp, #12
1a01337c:	af00      	add	r7, sp, #0
1a01337e:	6078      	str	r0, [r7, #4]
    pUART->TER2 = 0;
1a013380:	687b      	ldr	r3, [r7, #4]
1a013382:	2200      	movs	r2, #0
1a013384:	65da      	str	r2, [r3, #92]	; 0x5c
}
1a013386:	bf00      	nop
1a013388:	370c      	adds	r7, #12
1a01338a:	46bd      	mov	sp, r7
1a01338c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a013390:	4770      	bx	lr
1a013392:	bf00      	nop

1a013394 <Chip_UART_SetupFIFOS>:
 *			to select specific options. For example, to enable the FIFOs
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
1a013394:	b480      	push	{r7}
1a013396:	b083      	sub	sp, #12
1a013398:	af00      	add	r7, sp, #0
1a01339a:	6078      	str	r0, [r7, #4]
1a01339c:	6039      	str	r1, [r7, #0]
	pUART->FCR = fcr;
1a01339e:	687b      	ldr	r3, [r7, #4]
1a0133a0:	683a      	ldr	r2, [r7, #0]
1a0133a2:	609a      	str	r2, [r3, #8]
}
1a0133a4:	bf00      	nop
1a0133a6:	370c      	adds	r7, #12
1a0133a8:	46bd      	mov	sp, r7
1a0133aa:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0133ae:	4770      	bx	lr

1a0133b0 <Chip_UART_ConfigData>:
 *			definitions. For example, a configuration of 8 data bits, 1
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
1a0133b0:	b480      	push	{r7}
1a0133b2:	b083      	sub	sp, #12
1a0133b4:	af00      	add	r7, sp, #0
1a0133b6:	6078      	str	r0, [r7, #4]
1a0133b8:	6039      	str	r1, [r7, #0]
	pUART->LCR = config;
1a0133ba:	687b      	ldr	r3, [r7, #4]
1a0133bc:	683a      	ldr	r2, [r7, #0]
1a0133be:	60da      	str	r2, [r3, #12]
}
1a0133c0:	bf00      	nop
1a0133c2:	370c      	adds	r7, #12
1a0133c4:	46bd      	mov	sp, r7
1a0133c6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0133ca:	4770      	bx	lr

1a0133cc <Chip_UART_EnableDivisorAccess>:
 * @brief	Enable access to Divisor Latches
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
1a0133cc:	b480      	push	{r7}
1a0133ce:	b083      	sub	sp, #12
1a0133d0:	af00      	add	r7, sp, #0
1a0133d2:	6078      	str	r0, [r7, #4]
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0133d4:	687b      	ldr	r3, [r7, #4]
1a0133d6:	68db      	ldr	r3, [r3, #12]
1a0133d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
1a0133dc:	687b      	ldr	r3, [r7, #4]
1a0133de:	60da      	str	r2, [r3, #12]
}
1a0133e0:	bf00      	nop
1a0133e2:	370c      	adds	r7, #12
1a0133e4:	46bd      	mov	sp, r7
1a0133e6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0133ea:	4770      	bx	lr

1a0133ec <Chip_UART_DisableDivisorAccess>:
 * @brief	Disable access to Divisor Latches
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
1a0133ec:	b480      	push	{r7}
1a0133ee:	b083      	sub	sp, #12
1a0133f0:	af00      	add	r7, sp, #0
1a0133f2:	6078      	str	r0, [r7, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0133f4:	687b      	ldr	r3, [r7, #4]
1a0133f6:	68db      	ldr	r3, [r3, #12]
1a0133f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
1a0133fc:	687b      	ldr	r3, [r7, #4]
1a0133fe:	60da      	str	r2, [r3, #12]
}
1a013400:	bf00      	nop
1a013402:	370c      	adds	r7, #12
1a013404:	46bd      	mov	sp, r7
1a013406:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01340a:	4770      	bx	lr

1a01340c <Chip_UART_SetDivisorLatches>:
 * @note	The Divisor Latch Access Bit (DLAB) in LCR must be set in
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
1a01340c:	b480      	push	{r7}
1a01340e:	b083      	sub	sp, #12
1a013410:	af00      	add	r7, sp, #0
1a013412:	6078      	str	r0, [r7, #4]
1a013414:	460b      	mov	r3, r1
1a013416:	70fb      	strb	r3, [r7, #3]
1a013418:	4613      	mov	r3, r2
1a01341a:	70bb      	strb	r3, [r7, #2]
	pUART->DLL = (uint32_t) dll;
1a01341c:	78fa      	ldrb	r2, [r7, #3]
1a01341e:	687b      	ldr	r3, [r7, #4]
1a013420:	601a      	str	r2, [r3, #0]
	pUART->DLM = (uint32_t) dlm;
1a013422:	78ba      	ldrb	r2, [r7, #2]
1a013424:	687b      	ldr	r3, [r7, #4]
1a013426:	605a      	str	r2, [r3, #4]
}
1a013428:	bf00      	nop
1a01342a:	370c      	adds	r7, #12
1a01342c:	46bd      	mov	sp, r7
1a01342e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a013432:	4770      	bx	lr

1a013434 <Chip_UART_GetClockIndex>:
 * Private functions
 ****************************************************************************/

/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_UART_GetClockIndex(LPC_USART_T *pUART)
{
1a013434:	b480      	push	{r7}
1a013436:	b085      	sub	sp, #20
1a013438:	af00      	add	r7, sp, #0
1a01343a:	6078      	str	r0, [r7, #4]
	CHIP_CCU_CLK_T clkUART;

	if (pUART == LPC_USART3) {
1a01343c:	687b      	ldr	r3, [r7, #4]
1a01343e:	4a0e      	ldr	r2, [pc, #56]	; (1a013478 <Chip_UART_GetClockIndex+0x44>)
1a013440:	4293      	cmp	r3, r2
1a013442:	d102      	bne.n	1a01344a <Chip_UART_GetClockIndex+0x16>
		clkUART = CLK_MX_UART3;
1a013444:	23a2      	movs	r3, #162	; 0xa2
1a013446:	81fb      	strh	r3, [r7, #14]
1a013448:	e00f      	b.n	1a01346a <Chip_UART_GetClockIndex+0x36>
	}
	else if (pUART == LPC_USART2) {
1a01344a:	687b      	ldr	r3, [r7, #4]
1a01344c:	4a0b      	ldr	r2, [pc, #44]	; (1a01347c <Chip_UART_GetClockIndex+0x48>)
1a01344e:	4293      	cmp	r3, r2
1a013450:	d102      	bne.n	1a013458 <Chip_UART_GetClockIndex+0x24>
		clkUART = CLK_MX_UART2;
1a013452:	23a1      	movs	r3, #161	; 0xa1
1a013454:	81fb      	strh	r3, [r7, #14]
1a013456:	e008      	b.n	1a01346a <Chip_UART_GetClockIndex+0x36>
	}
	else if (pUART == LPC_UART1) {
1a013458:	687b      	ldr	r3, [r7, #4]
1a01345a:	4a09      	ldr	r2, [pc, #36]	; (1a013480 <Chip_UART_GetClockIndex+0x4c>)
1a01345c:	4293      	cmp	r3, r2
1a01345e:	d102      	bne.n	1a013466 <Chip_UART_GetClockIndex+0x32>
		clkUART = CLK_MX_UART1;
1a013460:	2382      	movs	r3, #130	; 0x82
1a013462:	81fb      	strh	r3, [r7, #14]
1a013464:	e001      	b.n	1a01346a <Chip_UART_GetClockIndex+0x36>
	}
	else {
		clkUART = CLK_MX_UART0;
1a013466:	2381      	movs	r3, #129	; 0x81
1a013468:	81fb      	strh	r3, [r7, #14]
	}

	return clkUART;
1a01346a:	89fb      	ldrh	r3, [r7, #14]
}
1a01346c:	4618      	mov	r0, r3
1a01346e:	3714      	adds	r7, #20
1a013470:	46bd      	mov	sp, r7
1a013472:	f85d 7b04 	ldr.w	r7, [sp], #4
1a013476:	4770      	bx	lr
1a013478:	400c2000 	.word	0x400c2000
1a01347c:	400c1000 	.word	0x400c1000
1a013480:	40082000 	.word	0x40082000

1a013484 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a013484:	b580      	push	{r7, lr}
1a013486:	b084      	sub	sp, #16
1a013488:	af00      	add	r7, sp, #0
1a01348a:	6078      	str	r0, [r7, #4]
    uint32_t tmp;

	(void) tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(Chip_UART_GetClockIndex(pUART), true, true, 1);
1a01348c:	6878      	ldr	r0, [r7, #4]
1a01348e:	f7ff ffd1 	bl	1a013434 <Chip_UART_GetClockIndex>
1a013492:	4603      	mov	r3, r0
1a013494:	4618      	mov	r0, r3
1a013496:	2301      	movs	r3, #1
1a013498:	2201      	movs	r2, #1
1a01349a:	2101      	movs	r1, #1
1a01349c:	f7fe ff6c 	bl	1a012378 <Chip_Clock_EnableOpts>

	/* Enable FIFOs by default, reset them */
	Chip_UART_SetupFIFOS(pUART, (UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS));
1a0134a0:	2107      	movs	r1, #7
1a0134a2:	6878      	ldr	r0, [r7, #4]
1a0134a4:	f7ff ff76 	bl	1a013394 <Chip_UART_SetupFIFOS>

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);
1a0134a8:	6878      	ldr	r0, [r7, #4]
1a0134aa:	f7ff ff65 	bl	1a013378 <Chip_UART_TXDisable>

    /* Disable interrupts */
	pUART->IER = 0;
1a0134ae:	687b      	ldr	r3, [r7, #4]
1a0134b0:	2200      	movs	r2, #0
1a0134b2:	605a      	str	r2, [r3, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0134b4:	687b      	ldr	r3, [r7, #4]
1a0134b6:	2200      	movs	r2, #0
1a0134b8:	60da      	str	r2, [r3, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0134ba:	687b      	ldr	r3, [r7, #4]
1a0134bc:	2200      	movs	r2, #0
1a0134be:	621a      	str	r2, [r3, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0134c0:	687b      	ldr	r3, [r7, #4]
1a0134c2:	2200      	movs	r2, #0
1a0134c4:	64da      	str	r2, [r3, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0134c6:	687b      	ldr	r3, [r7, #4]
1a0134c8:	2200      	movs	r2, #0
1a0134ca:	655a      	str	r2, [r3, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0134cc:	687b      	ldr	r3, [r7, #4]
1a0134ce:	2200      	movs	r2, #0
1a0134d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0134d2:	687b      	ldr	r3, [r7, #4]
1a0134d4:	4a09      	ldr	r2, [pc, #36]	; (1a0134fc <Chip_UART_Init+0x78>)
1a0134d6:	4293      	cmp	r3, r2
1a0134d8:	d105      	bne.n	1a0134e6 <Chip_UART_Init+0x62>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a0134da:	687b      	ldr	r3, [r7, #4]
1a0134dc:	2200      	movs	r2, #0
1a0134de:	611a      	str	r2, [r3, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a0134e0:	687b      	ldr	r3, [r7, #4]
1a0134e2:	699b      	ldr	r3, [r3, #24]
1a0134e4:	60fb      	str	r3, [r7, #12]
	}

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));
1a0134e6:	2103      	movs	r1, #3
1a0134e8:	6878      	ldr	r0, [r7, #4]
1a0134ea:	f7ff ff61 	bl	1a0133b0 <Chip_UART_ConfigData>

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0134ee:	687b      	ldr	r3, [r7, #4]
1a0134f0:	2210      	movs	r2, #16
1a0134f2:	629a      	str	r2, [r3, #40]	; 0x28
}
1a0134f4:	bf00      	nop
1a0134f6:	3710      	adds	r7, #16
1a0134f8:	46bd      	mov	sp, r7
1a0134fa:	bd80      	pop	{r7, pc}
1a0134fc:	40082000 	.word	0x40082000

1a013500 <Chip_UART_DeInit>:

/* De-initializes the pUART peripheral */
void Chip_UART_DeInit(LPC_USART_T *pUART)
{
1a013500:	b580      	push	{r7, lr}
1a013502:	b082      	sub	sp, #8
1a013504:	af00      	add	r7, sp, #0
1a013506:	6078      	str	r0, [r7, #4]
    /* Disable Tx */
    Chip_UART_TXDisable(pUART);
1a013508:	6878      	ldr	r0, [r7, #4]
1a01350a:	f7ff ff35 	bl	1a013378 <Chip_UART_TXDisable>

    /* Disable clock */
	Chip_Clock_Disable(Chip_UART_GetClockIndex(pUART));
1a01350e:	6878      	ldr	r0, [r7, #4]
1a013510:	f7ff ff90 	bl	1a013434 <Chip_UART_GetClockIndex>
1a013514:	4603      	mov	r3, r0
1a013516:	4618      	mov	r0, r3
1a013518:	f7fe ffb2 	bl	1a012480 <Chip_Clock_Disable>
}
1a01351c:	bf00      	nop
1a01351e:	3708      	adds	r7, #8
1a013520:	46bd      	mov	sp, r7
1a013522:	bd80      	pop	{r7, pc}

1a013524 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a013524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a013528:	b08f      	sub	sp, #60	; 0x3c
1a01352a:	af00      	add	r7, sp, #0
1a01352c:	6078      	str	r0, [r7, #4]
1a01352e:	6039      	str	r1, [r7, #0]
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a013530:	2300      	movs	r3, #0
1a013532:	637b      	str	r3, [r7, #52]	; 0x34
1a013534:	2301      	movs	r3, #1
1a013536:	633b      	str	r3, [r7, #48]	; 0x30
1a013538:	2300      	movs	r3, #0
1a01353a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a01353c:	f04f 33ff 	mov.w	r3, #4294967295
1a013540:	623b      	str	r3, [r7, #32]

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(Chip_UART_GetClockIndex(pUART));
1a013542:	6878      	ldr	r0, [r7, #4]
1a013544:	f7ff ff76 	bl	1a013434 <Chip_UART_GetClockIndex>
1a013548:	4603      	mov	r3, r0
1a01354a:	4618      	mov	r0, r3
1a01354c:	f7fe ffc8 	bl	1a0124e0 <Chip_Clock_GetRate>
1a013550:	6178      	str	r0, [r7, #20]

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a013552:	2301      	movs	r3, #1
1a013554:	62bb      	str	r3, [r7, #40]	; 0x28
1a013556:	e062      	b.n	1a01361e <Chip_UART_SetBaudFDR+0xfa>
		for (d = 0; d < m; d++) {
1a013558:	2300      	movs	r3, #0
1a01355a:	627b      	str	r3, [r7, #36]	; 0x24
1a01355c:	e056      	b.n	1a01360c <Chip_UART_SetBaudFDR+0xe8>
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a01355e:	697b      	ldr	r3, [r7, #20]
1a013560:	461a      	mov	r2, r3
1a013562:	f04f 0300 	mov.w	r3, #0
1a013566:	071d      	lsls	r5, r3, #28
1a013568:	ea45 1512 	orr.w	r5, r5, r2, lsr #4
1a01356c:	0714      	lsls	r4, r2, #28
1a01356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a013570:	461a      	mov	r2, r3
1a013572:	f04f 0300 	mov.w	r3, #0
1a013576:	fb02 f005 	mul.w	r0, r2, r5
1a01357a:	fb04 f103 	mul.w	r1, r4, r3
1a01357e:	1846      	adds	r6, r0, r1
1a013580:	fba4 0102 	umull	r0, r1, r4, r2
1a013584:	1873      	adds	r3, r6, r1
1a013586:	4619      	mov	r1, r3
1a013588:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a01358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a01358c:	4413      	add	r3, r2
1a01358e:	683a      	ldr	r2, [r7, #0]
1a013590:	fb02 f303 	mul.w	r3, r2, r3
1a013594:	461a      	mov	r2, r3
1a013596:	f04f 0300 	mov.w	r3, #0
1a01359a:	f001 f889 	bl	1a0146b0 <__aeabi_uldivmod>
1a01359e:	4602      	mov	r2, r0
1a0135a0:	460b      	mov	r3, r1
1a0135a2:	e9c7 2302 	strd	r2, r3, [r7, #8]

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a0135a6:	68bb      	ldr	r3, [r7, #8]
1a0135a8:	61fb      	str	r3, [r7, #28]
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a0135aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
1a0135ae:	4698      	mov	r8, r3
1a0135b0:	f04f 0900 	mov.w	r9, #0
1a0135b4:	4643      	mov	r3, r8
1a0135b6:	61bb      	str	r3, [r7, #24]

			/* Closer to next div */
			if ((int)diff < 0) {
1a0135b8:	69fb      	ldr	r3, [r7, #28]
1a0135ba:	2b00      	cmp	r3, #0
1a0135bc:	da05      	bge.n	1a0135ca <Chip_UART_SetBaudFDR+0xa6>
				diff = -diff;
1a0135be:	69fb      	ldr	r3, [r7, #28]
1a0135c0:	425b      	negs	r3, r3
1a0135c2:	61fb      	str	r3, [r7, #28]
				div ++;
1a0135c4:	69bb      	ldr	r3, [r7, #24]
1a0135c6:	3301      	adds	r3, #1
1a0135c8:	61bb      	str	r3, [r7, #24]
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0135ca:	6a3a      	ldr	r2, [r7, #32]
1a0135cc:	69fb      	ldr	r3, [r7, #28]
1a0135ce:	429a      	cmp	r2, r3
1a0135d0:	d318      	bcc.n	1a013604 <Chip_UART_SetBaudFDR+0xe0>
1a0135d2:	69bb      	ldr	r3, [r7, #24]
1a0135d4:	2b00      	cmp	r3, #0
1a0135d6:	d015      	beq.n	1a013604 <Chip_UART_SetBaudFDR+0xe0>
1a0135d8:	69bb      	ldr	r3, [r7, #24]
1a0135da:	0c1b      	lsrs	r3, r3, #16
1a0135dc:	2b00      	cmp	r3, #0
1a0135de:	d111      	bne.n	1a013604 <Chip_UART_SetBaudFDR+0xe0>
1a0135e0:	69bb      	ldr	r3, [r7, #24]
1a0135e2:	2b02      	cmp	r3, #2
1a0135e4:	d802      	bhi.n	1a0135ec <Chip_UART_SetBaudFDR+0xc8>
1a0135e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0135e8:	2b00      	cmp	r3, #0
1a0135ea:	d10b      	bne.n	1a013604 <Chip_UART_SetBaudFDR+0xe0>
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a0135ec:	69bb      	ldr	r3, [r7, #24]
1a0135ee:	637b      	str	r3, [r7, #52]	; 0x34
			sd = d;
1a0135f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0135f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			sm = m;
1a0135f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a0135f6:	633b      	str	r3, [r7, #48]	; 0x30
			odiff = diff;
1a0135f8:	69fb      	ldr	r3, [r7, #28]
1a0135fa:	623b      	str	r3, [r7, #32]

			/* On perfect match, break loop */
			if(!diff) {
1a0135fc:	69fb      	ldr	r3, [r7, #28]
1a0135fe:	2b00      	cmp	r3, #0
1a013600:	d009      	beq.n	1a013616 <Chip_UART_SetBaudFDR+0xf2>
1a013602:	e000      	b.n	1a013606 <Chip_UART_SetBaudFDR+0xe2>
				div ++;
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
1a013604:	bf00      	nop
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(Chip_UART_GetClockIndex(pUART));

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a013606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a013608:	3301      	adds	r3, #1
1a01360a:	627b      	str	r3, [r7, #36]	; 0x24
1a01360c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1a01360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a013610:	429a      	cmp	r2, r3
1a013612:	d3a4      	bcc.n	1a01355e <Chip_UART_SetBaudFDR+0x3a>
1a013614:	e000      	b.n	1a013618 <Chip_UART_SetBaudFDR+0xf4>
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
				break;
1a013616:	bf00      	nop

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(Chip_UART_GetClockIndex(pUART));

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a013618:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a01361a:	3301      	adds	r3, #1
1a01361c:	62bb      	str	r3, [r7, #40]	; 0x28
1a01361e:	6a3b      	ldr	r3, [r7, #32]
1a013620:	2b00      	cmp	r3, #0
1a013622:	d002      	beq.n	1a01362a <Chip_UART_SetBaudFDR+0x106>
1a013624:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a013626:	2b0f      	cmp	r3, #15
1a013628:	d996      	bls.n	1a013558 <Chip_UART_SetBaudFDR+0x34>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a01362a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a01362c:	2b00      	cmp	r3, #0
1a01362e:	d101      	bne.n	1a013634 <Chip_UART_SetBaudFDR+0x110>
		return 0;
1a013630:	2300      	movs	r3, #0
1a013632:	e024      	b.n	1a01367e <Chip_UART_SetBaudFDR+0x15a>
	}

	/* Update UART registers */
	Chip_UART_EnableDivisorAccess(pUART);
1a013634:	6878      	ldr	r0, [r7, #4]
1a013636:	f7ff fec9 	bl	1a0133cc <Chip_UART_EnableDivisorAccess>
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
1a01363a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a01363c:	b2d9      	uxtb	r1, r3
1a01363e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a013640:	0a1b      	lsrs	r3, r3, #8
1a013642:	b2db      	uxtb	r3, r3
1a013644:	461a      	mov	r2, r3
1a013646:	6878      	ldr	r0, [r7, #4]
1a013648:	f7ff fee0 	bl	1a01340c <Chip_UART_SetDivisorLatches>
	Chip_UART_DisableDivisorAccess(pUART);
1a01364c:	6878      	ldr	r0, [r7, #4]
1a01364e:	f7ff fecd 	bl	1a0133ec <Chip_UART_DisableDivisorAccess>

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a013652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a013654:	011b      	lsls	r3, r3, #4
1a013656:	b2da      	uxtb	r2, r3
1a013658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a01365a:	f003 030f 	and.w	r3, r3, #15
1a01365e:	431a      	orrs	r2, r3
1a013660:	687b      	ldr	r3, [r7, #4]
1a013662:	629a      	str	r2, [r3, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a013664:	697b      	ldr	r3, [r7, #20]
1a013666:	091b      	lsrs	r3, r3, #4
1a013668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1a01366a:	fb02 f203 	mul.w	r2, r2, r3
1a01366e:	6b39      	ldr	r1, [r7, #48]	; 0x30
1a013670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a013672:	440b      	add	r3, r1
1a013674:	6b79      	ldr	r1, [r7, #52]	; 0x34
1a013676:	fb01 f303 	mul.w	r3, r1, r3
1a01367a:	fbb2 f3f3 	udiv	r3, r2, r3
}
1a01367e:	4618      	mov	r0, r3
1a013680:	373c      	adds	r7, #60	; 0x3c
1a013682:	46bd      	mov	sp, r7
1a013684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

1a013688 <__aeabi_drsub>:
1a013688:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a01368c:	e002      	b.n	1a013694 <__adddf3>
1a01368e:	bf00      	nop

1a013690 <__aeabi_dsub>:
1a013690:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a013694 <__adddf3>:
1a013694:	b530      	push	{r4, r5, lr}
1a013696:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a01369a:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a01369e:	ea94 0f05 	teq	r4, r5
1a0136a2:	bf08      	it	eq
1a0136a4:	ea90 0f02 	teqeq	r0, r2
1a0136a8:	bf1f      	itttt	ne
1a0136aa:	ea54 0c00 	orrsne.w	ip, r4, r0
1a0136ae:	ea55 0c02 	orrsne.w	ip, r5, r2
1a0136b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a0136b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0136ba:	f000 80e2 	beq.w	1a013882 <__adddf3+0x1ee>
1a0136be:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a0136c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a0136c6:	bfb8      	it	lt
1a0136c8:	426d      	neglt	r5, r5
1a0136ca:	dd0c      	ble.n	1a0136e6 <__adddf3+0x52>
1a0136cc:	442c      	add	r4, r5
1a0136ce:	ea80 0202 	eor.w	r2, r0, r2
1a0136d2:	ea81 0303 	eor.w	r3, r1, r3
1a0136d6:	ea82 0000 	eor.w	r0, r2, r0
1a0136da:	ea83 0101 	eor.w	r1, r3, r1
1a0136de:	ea80 0202 	eor.w	r2, r0, r2
1a0136e2:	ea81 0303 	eor.w	r3, r1, r3
1a0136e6:	2d36      	cmp	r5, #54	; 0x36
1a0136e8:	bf88      	it	hi
1a0136ea:	bd30      	pophi	{r4, r5, pc}
1a0136ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0136f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0136f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a0136f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a0136fc:	d002      	beq.n	1a013704 <__adddf3+0x70>
1a0136fe:	4240      	negs	r0, r0
1a013700:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a013704:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a013708:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a01370c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a013710:	d002      	beq.n	1a013718 <__adddf3+0x84>
1a013712:	4252      	negs	r2, r2
1a013714:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a013718:	ea94 0f05 	teq	r4, r5
1a01371c:	f000 80a7 	beq.w	1a01386e <__adddf3+0x1da>
1a013720:	f1a4 0401 	sub.w	r4, r4, #1
1a013724:	f1d5 0e20 	rsbs	lr, r5, #32
1a013728:	db0d      	blt.n	1a013746 <__adddf3+0xb2>
1a01372a:	fa02 fc0e 	lsl.w	ip, r2, lr
1a01372e:	fa22 f205 	lsr.w	r2, r2, r5
1a013732:	1880      	adds	r0, r0, r2
1a013734:	f141 0100 	adc.w	r1, r1, #0
1a013738:	fa03 f20e 	lsl.w	r2, r3, lr
1a01373c:	1880      	adds	r0, r0, r2
1a01373e:	fa43 f305 	asr.w	r3, r3, r5
1a013742:	4159      	adcs	r1, r3
1a013744:	e00e      	b.n	1a013764 <__adddf3+0xd0>
1a013746:	f1a5 0520 	sub.w	r5, r5, #32
1a01374a:	f10e 0e20 	add.w	lr, lr, #32
1a01374e:	2a01      	cmp	r2, #1
1a013750:	fa03 fc0e 	lsl.w	ip, r3, lr
1a013754:	bf28      	it	cs
1a013756:	f04c 0c02 	orrcs.w	ip, ip, #2
1a01375a:	fa43 f305 	asr.w	r3, r3, r5
1a01375e:	18c0      	adds	r0, r0, r3
1a013760:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a013764:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a013768:	d507      	bpl.n	1a01377a <__adddf3+0xe6>
1a01376a:	f04f 0e00 	mov.w	lr, #0
1a01376e:	f1dc 0c00 	rsbs	ip, ip, #0
1a013772:	eb7e 0000 	sbcs.w	r0, lr, r0
1a013776:	eb6e 0101 	sbc.w	r1, lr, r1
1a01377a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a01377e:	d31b      	bcc.n	1a0137b8 <__adddf3+0x124>
1a013780:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a013784:	d30c      	bcc.n	1a0137a0 <__adddf3+0x10c>
1a013786:	0849      	lsrs	r1, r1, #1
1a013788:	ea5f 0030 	movs.w	r0, r0, rrx
1a01378c:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a013790:	f104 0401 	add.w	r4, r4, #1
1a013794:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a013798:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a01379c:	f080 809a 	bcs.w	1a0138d4 <__adddf3+0x240>
1a0137a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a0137a4:	bf08      	it	eq
1a0137a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0137aa:	f150 0000 	adcs.w	r0, r0, #0
1a0137ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0137b2:	ea41 0105 	orr.w	r1, r1, r5
1a0137b6:	bd30      	pop	{r4, r5, pc}
1a0137b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a0137bc:	4140      	adcs	r0, r0
1a0137be:	eb41 0101 	adc.w	r1, r1, r1
1a0137c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0137c6:	f1a4 0401 	sub.w	r4, r4, #1
1a0137ca:	d1e9      	bne.n	1a0137a0 <__adddf3+0x10c>
1a0137cc:	f091 0f00 	teq	r1, #0
1a0137d0:	bf04      	itt	eq
1a0137d2:	4601      	moveq	r1, r0
1a0137d4:	2000      	moveq	r0, #0
1a0137d6:	fab1 f381 	clz	r3, r1
1a0137da:	bf08      	it	eq
1a0137dc:	3320      	addeq	r3, #32
1a0137de:	f1a3 030b 	sub.w	r3, r3, #11
1a0137e2:	f1b3 0220 	subs.w	r2, r3, #32
1a0137e6:	da0c      	bge.n	1a013802 <__adddf3+0x16e>
1a0137e8:	320c      	adds	r2, #12
1a0137ea:	dd08      	ble.n	1a0137fe <__adddf3+0x16a>
1a0137ec:	f102 0c14 	add.w	ip, r2, #20
1a0137f0:	f1c2 020c 	rsb	r2, r2, #12
1a0137f4:	fa01 f00c 	lsl.w	r0, r1, ip
1a0137f8:	fa21 f102 	lsr.w	r1, r1, r2
1a0137fc:	e00c      	b.n	1a013818 <__adddf3+0x184>
1a0137fe:	f102 0214 	add.w	r2, r2, #20
1a013802:	bfd8      	it	le
1a013804:	f1c2 0c20 	rsble	ip, r2, #32
1a013808:	fa01 f102 	lsl.w	r1, r1, r2
1a01380c:	fa20 fc0c 	lsr.w	ip, r0, ip
1a013810:	bfdc      	itt	le
1a013812:	ea41 010c 	orrle.w	r1, r1, ip
1a013816:	4090      	lslle	r0, r2
1a013818:	1ae4      	subs	r4, r4, r3
1a01381a:	bfa2      	ittt	ge
1a01381c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a013820:	4329      	orrge	r1, r5
1a013822:	bd30      	popge	{r4, r5, pc}
1a013824:	ea6f 0404 	mvn.w	r4, r4
1a013828:	3c1f      	subs	r4, #31
1a01382a:	da1c      	bge.n	1a013866 <__adddf3+0x1d2>
1a01382c:	340c      	adds	r4, #12
1a01382e:	dc0e      	bgt.n	1a01384e <__adddf3+0x1ba>
1a013830:	f104 0414 	add.w	r4, r4, #20
1a013834:	f1c4 0220 	rsb	r2, r4, #32
1a013838:	fa20 f004 	lsr.w	r0, r0, r4
1a01383c:	fa01 f302 	lsl.w	r3, r1, r2
1a013840:	ea40 0003 	orr.w	r0, r0, r3
1a013844:	fa21 f304 	lsr.w	r3, r1, r4
1a013848:	ea45 0103 	orr.w	r1, r5, r3
1a01384c:	bd30      	pop	{r4, r5, pc}
1a01384e:	f1c4 040c 	rsb	r4, r4, #12
1a013852:	f1c4 0220 	rsb	r2, r4, #32
1a013856:	fa20 f002 	lsr.w	r0, r0, r2
1a01385a:	fa01 f304 	lsl.w	r3, r1, r4
1a01385e:	ea40 0003 	orr.w	r0, r0, r3
1a013862:	4629      	mov	r1, r5
1a013864:	bd30      	pop	{r4, r5, pc}
1a013866:	fa21 f004 	lsr.w	r0, r1, r4
1a01386a:	4629      	mov	r1, r5
1a01386c:	bd30      	pop	{r4, r5, pc}
1a01386e:	f094 0f00 	teq	r4, #0
1a013872:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a013876:	bf06      	itte	eq
1a013878:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a01387c:	3401      	addeq	r4, #1
1a01387e:	3d01      	subne	r5, #1
1a013880:	e74e      	b.n	1a013720 <__adddf3+0x8c>
1a013882:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a013886:	bf18      	it	ne
1a013888:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a01388c:	d029      	beq.n	1a0138e2 <__adddf3+0x24e>
1a01388e:	ea94 0f05 	teq	r4, r5
1a013892:	bf08      	it	eq
1a013894:	ea90 0f02 	teqeq	r0, r2
1a013898:	d005      	beq.n	1a0138a6 <__adddf3+0x212>
1a01389a:	ea54 0c00 	orrs.w	ip, r4, r0
1a01389e:	bf04      	itt	eq
1a0138a0:	4619      	moveq	r1, r3
1a0138a2:	4610      	moveq	r0, r2
1a0138a4:	bd30      	pop	{r4, r5, pc}
1a0138a6:	ea91 0f03 	teq	r1, r3
1a0138aa:	bf1e      	ittt	ne
1a0138ac:	2100      	movne	r1, #0
1a0138ae:	2000      	movne	r0, #0
1a0138b0:	bd30      	popne	{r4, r5, pc}
1a0138b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a0138b6:	d105      	bne.n	1a0138c4 <__adddf3+0x230>
1a0138b8:	0040      	lsls	r0, r0, #1
1a0138ba:	4149      	adcs	r1, r1
1a0138bc:	bf28      	it	cs
1a0138be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a0138c2:	bd30      	pop	{r4, r5, pc}
1a0138c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a0138c8:	bf3c      	itt	cc
1a0138ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a0138ce:	bd30      	popcc	{r4, r5, pc}
1a0138d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0138d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a0138d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0138dc:	f04f 0000 	mov.w	r0, #0
1a0138e0:	bd30      	pop	{r4, r5, pc}
1a0138e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0138e6:	bf1a      	itte	ne
1a0138e8:	4619      	movne	r1, r3
1a0138ea:	4610      	movne	r0, r2
1a0138ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a0138f0:	bf1c      	itt	ne
1a0138f2:	460b      	movne	r3, r1
1a0138f4:	4602      	movne	r2, r0
1a0138f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0138fa:	bf06      	itte	eq
1a0138fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a013900:	ea91 0f03 	teqeq	r1, r3
1a013904:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a013908:	bd30      	pop	{r4, r5, pc}
1a01390a:	bf00      	nop

1a01390c <__aeabi_ui2d>:
1a01390c:	f090 0f00 	teq	r0, #0
1a013910:	bf04      	itt	eq
1a013912:	2100      	moveq	r1, #0
1a013914:	4770      	bxeq	lr
1a013916:	b530      	push	{r4, r5, lr}
1a013918:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a01391c:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a013920:	f04f 0500 	mov.w	r5, #0
1a013924:	f04f 0100 	mov.w	r1, #0
1a013928:	e750      	b.n	1a0137cc <__adddf3+0x138>
1a01392a:	bf00      	nop

1a01392c <__aeabi_i2d>:
1a01392c:	f090 0f00 	teq	r0, #0
1a013930:	bf04      	itt	eq
1a013932:	2100      	moveq	r1, #0
1a013934:	4770      	bxeq	lr
1a013936:	b530      	push	{r4, r5, lr}
1a013938:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a01393c:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a013940:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a013944:	bf48      	it	mi
1a013946:	4240      	negmi	r0, r0
1a013948:	f04f 0100 	mov.w	r1, #0
1a01394c:	e73e      	b.n	1a0137cc <__adddf3+0x138>
1a01394e:	bf00      	nop

1a013950 <__aeabi_f2d>:
1a013950:	0042      	lsls	r2, r0, #1
1a013952:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a013956:	ea4f 0131 	mov.w	r1, r1, rrx
1a01395a:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a01395e:	bf1f      	itttt	ne
1a013960:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a013964:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a013968:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a01396c:	4770      	bxne	lr
1a01396e:	f092 0f00 	teq	r2, #0
1a013972:	bf14      	ite	ne
1a013974:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a013978:	4770      	bxeq	lr
1a01397a:	b530      	push	{r4, r5, lr}
1a01397c:	f44f 7460 	mov.w	r4, #896	; 0x380
1a013980:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a013984:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a013988:	e720      	b.n	1a0137cc <__adddf3+0x138>
1a01398a:	bf00      	nop

1a01398c <__aeabi_ul2d>:
1a01398c:	ea50 0201 	orrs.w	r2, r0, r1
1a013990:	bf08      	it	eq
1a013992:	4770      	bxeq	lr
1a013994:	b530      	push	{r4, r5, lr}
1a013996:	f04f 0500 	mov.w	r5, #0
1a01399a:	e00a      	b.n	1a0139b2 <__aeabi_l2d+0x16>

1a01399c <__aeabi_l2d>:
1a01399c:	ea50 0201 	orrs.w	r2, r0, r1
1a0139a0:	bf08      	it	eq
1a0139a2:	4770      	bxeq	lr
1a0139a4:	b530      	push	{r4, r5, lr}
1a0139a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a0139aa:	d502      	bpl.n	1a0139b2 <__aeabi_l2d+0x16>
1a0139ac:	4240      	negs	r0, r0
1a0139ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0139b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0139b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0139ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a0139be:	f43f aedc 	beq.w	1a01377a <__adddf3+0xe6>
1a0139c2:	f04f 0203 	mov.w	r2, #3
1a0139c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0139ca:	bf18      	it	ne
1a0139cc:	3203      	addne	r2, #3
1a0139ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0139d2:	bf18      	it	ne
1a0139d4:	3203      	addne	r2, #3
1a0139d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a0139da:	f1c2 0320 	rsb	r3, r2, #32
1a0139de:	fa00 fc03 	lsl.w	ip, r0, r3
1a0139e2:	fa20 f002 	lsr.w	r0, r0, r2
1a0139e6:	fa01 fe03 	lsl.w	lr, r1, r3
1a0139ea:	ea40 000e 	orr.w	r0, r0, lr
1a0139ee:	fa21 f102 	lsr.w	r1, r1, r2
1a0139f2:	4414      	add	r4, r2
1a0139f4:	e6c1      	b.n	1a01377a <__adddf3+0xe6>
1a0139f6:	bf00      	nop

1a0139f8 <__aeabi_dmul>:
1a0139f8:	b570      	push	{r4, r5, r6, lr}
1a0139fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a0139fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a013a02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a013a06:	bf1d      	ittte	ne
1a013a08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a013a0c:	ea94 0f0c 	teqne	r4, ip
1a013a10:	ea95 0f0c 	teqne	r5, ip
1a013a14:	f000 f8de 	bleq	1a013bd4 <__aeabi_dmul+0x1dc>
1a013a18:	442c      	add	r4, r5
1a013a1a:	ea81 0603 	eor.w	r6, r1, r3
1a013a1e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a013a22:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a013a26:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a013a2a:	bf18      	it	ne
1a013a2c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a013a30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a013a34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a013a38:	d038      	beq.n	1a013aac <__aeabi_dmul+0xb4>
1a013a3a:	fba0 ce02 	umull	ip, lr, r0, r2
1a013a3e:	f04f 0500 	mov.w	r5, #0
1a013a42:	fbe1 e502 	umlal	lr, r5, r1, r2
1a013a46:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a013a4a:	fbe0 e503 	umlal	lr, r5, r0, r3
1a013a4e:	f04f 0600 	mov.w	r6, #0
1a013a52:	fbe1 5603 	umlal	r5, r6, r1, r3
1a013a56:	f09c 0f00 	teq	ip, #0
1a013a5a:	bf18      	it	ne
1a013a5c:	f04e 0e01 	orrne.w	lr, lr, #1
1a013a60:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a013a64:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a013a68:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a013a6c:	d204      	bcs.n	1a013a78 <__aeabi_dmul+0x80>
1a013a6e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a013a72:	416d      	adcs	r5, r5
1a013a74:	eb46 0606 	adc.w	r6, r6, r6
1a013a78:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a013a7c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a013a80:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a013a84:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a013a88:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a013a8c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a013a90:	bf88      	it	hi
1a013a92:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a013a96:	d81e      	bhi.n	1a013ad6 <__aeabi_dmul+0xde>
1a013a98:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a013a9c:	bf08      	it	eq
1a013a9e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a013aa2:	f150 0000 	adcs.w	r0, r0, #0
1a013aa6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a013aaa:	bd70      	pop	{r4, r5, r6, pc}
1a013aac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a013ab0:	ea46 0101 	orr.w	r1, r6, r1
1a013ab4:	ea40 0002 	orr.w	r0, r0, r2
1a013ab8:	ea81 0103 	eor.w	r1, r1, r3
1a013abc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a013ac0:	bfc2      	ittt	gt
1a013ac2:	ebd4 050c 	rsbsgt	r5, r4, ip
1a013ac6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a013aca:	bd70      	popgt	{r4, r5, r6, pc}
1a013acc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a013ad0:	f04f 0e00 	mov.w	lr, #0
1a013ad4:	3c01      	subs	r4, #1
1a013ad6:	f300 80ab 	bgt.w	1a013c30 <__aeabi_dmul+0x238>
1a013ada:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a013ade:	bfde      	ittt	le
1a013ae0:	2000      	movle	r0, #0
1a013ae2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a013ae6:	bd70      	pople	{r4, r5, r6, pc}
1a013ae8:	f1c4 0400 	rsb	r4, r4, #0
1a013aec:	3c20      	subs	r4, #32
1a013aee:	da35      	bge.n	1a013b5c <__aeabi_dmul+0x164>
1a013af0:	340c      	adds	r4, #12
1a013af2:	dc1b      	bgt.n	1a013b2c <__aeabi_dmul+0x134>
1a013af4:	f104 0414 	add.w	r4, r4, #20
1a013af8:	f1c4 0520 	rsb	r5, r4, #32
1a013afc:	fa00 f305 	lsl.w	r3, r0, r5
1a013b00:	fa20 f004 	lsr.w	r0, r0, r4
1a013b04:	fa01 f205 	lsl.w	r2, r1, r5
1a013b08:	ea40 0002 	orr.w	r0, r0, r2
1a013b0c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a013b10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a013b14:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a013b18:	fa21 f604 	lsr.w	r6, r1, r4
1a013b1c:	eb42 0106 	adc.w	r1, r2, r6
1a013b20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a013b24:	bf08      	it	eq
1a013b26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a013b2a:	bd70      	pop	{r4, r5, r6, pc}
1a013b2c:	f1c4 040c 	rsb	r4, r4, #12
1a013b30:	f1c4 0520 	rsb	r5, r4, #32
1a013b34:	fa00 f304 	lsl.w	r3, r0, r4
1a013b38:	fa20 f005 	lsr.w	r0, r0, r5
1a013b3c:	fa01 f204 	lsl.w	r2, r1, r4
1a013b40:	ea40 0002 	orr.w	r0, r0, r2
1a013b44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a013b48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a013b4c:	f141 0100 	adc.w	r1, r1, #0
1a013b50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a013b54:	bf08      	it	eq
1a013b56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a013b5a:	bd70      	pop	{r4, r5, r6, pc}
1a013b5c:	f1c4 0520 	rsb	r5, r4, #32
1a013b60:	fa00 f205 	lsl.w	r2, r0, r5
1a013b64:	ea4e 0e02 	orr.w	lr, lr, r2
1a013b68:	fa20 f304 	lsr.w	r3, r0, r4
1a013b6c:	fa01 f205 	lsl.w	r2, r1, r5
1a013b70:	ea43 0302 	orr.w	r3, r3, r2
1a013b74:	fa21 f004 	lsr.w	r0, r1, r4
1a013b78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a013b7c:	fa21 f204 	lsr.w	r2, r1, r4
1a013b80:	ea20 0002 	bic.w	r0, r0, r2
1a013b84:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a013b88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a013b8c:	bf08      	it	eq
1a013b8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a013b92:	bd70      	pop	{r4, r5, r6, pc}
1a013b94:	f094 0f00 	teq	r4, #0
1a013b98:	d10f      	bne.n	1a013bba <__aeabi_dmul+0x1c2>
1a013b9a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a013b9e:	0040      	lsls	r0, r0, #1
1a013ba0:	eb41 0101 	adc.w	r1, r1, r1
1a013ba4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a013ba8:	bf08      	it	eq
1a013baa:	3c01      	subeq	r4, #1
1a013bac:	d0f7      	beq.n	1a013b9e <__aeabi_dmul+0x1a6>
1a013bae:	ea41 0106 	orr.w	r1, r1, r6
1a013bb2:	f095 0f00 	teq	r5, #0
1a013bb6:	bf18      	it	ne
1a013bb8:	4770      	bxne	lr
1a013bba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a013bbe:	0052      	lsls	r2, r2, #1
1a013bc0:	eb43 0303 	adc.w	r3, r3, r3
1a013bc4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a013bc8:	bf08      	it	eq
1a013bca:	3d01      	subeq	r5, #1
1a013bcc:	d0f7      	beq.n	1a013bbe <__aeabi_dmul+0x1c6>
1a013bce:	ea43 0306 	orr.w	r3, r3, r6
1a013bd2:	4770      	bx	lr
1a013bd4:	ea94 0f0c 	teq	r4, ip
1a013bd8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a013bdc:	bf18      	it	ne
1a013bde:	ea95 0f0c 	teqne	r5, ip
1a013be2:	d00c      	beq.n	1a013bfe <__aeabi_dmul+0x206>
1a013be4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a013be8:	bf18      	it	ne
1a013bea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a013bee:	d1d1      	bne.n	1a013b94 <__aeabi_dmul+0x19c>
1a013bf0:	ea81 0103 	eor.w	r1, r1, r3
1a013bf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a013bf8:	f04f 0000 	mov.w	r0, #0
1a013bfc:	bd70      	pop	{r4, r5, r6, pc}
1a013bfe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a013c02:	bf06      	itte	eq
1a013c04:	4610      	moveq	r0, r2
1a013c06:	4619      	moveq	r1, r3
1a013c08:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a013c0c:	d019      	beq.n	1a013c42 <__aeabi_dmul+0x24a>
1a013c0e:	ea94 0f0c 	teq	r4, ip
1a013c12:	d102      	bne.n	1a013c1a <__aeabi_dmul+0x222>
1a013c14:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a013c18:	d113      	bne.n	1a013c42 <__aeabi_dmul+0x24a>
1a013c1a:	ea95 0f0c 	teq	r5, ip
1a013c1e:	d105      	bne.n	1a013c2c <__aeabi_dmul+0x234>
1a013c20:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a013c24:	bf1c      	itt	ne
1a013c26:	4610      	movne	r0, r2
1a013c28:	4619      	movne	r1, r3
1a013c2a:	d10a      	bne.n	1a013c42 <__aeabi_dmul+0x24a>
1a013c2c:	ea81 0103 	eor.w	r1, r1, r3
1a013c30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a013c34:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a013c38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a013c3c:	f04f 0000 	mov.w	r0, #0
1a013c40:	bd70      	pop	{r4, r5, r6, pc}
1a013c42:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a013c46:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a013c4a:	bd70      	pop	{r4, r5, r6, pc}

1a013c4c <__aeabi_ddiv>:
1a013c4c:	b570      	push	{r4, r5, r6, lr}
1a013c4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a013c52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a013c56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a013c5a:	bf1d      	ittte	ne
1a013c5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a013c60:	ea94 0f0c 	teqne	r4, ip
1a013c64:	ea95 0f0c 	teqne	r5, ip
1a013c68:	f000 f8a7 	bleq	1a013dba <__aeabi_ddiv+0x16e>
1a013c6c:	eba4 0405 	sub.w	r4, r4, r5
1a013c70:	ea81 0e03 	eor.w	lr, r1, r3
1a013c74:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a013c78:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a013c7c:	f000 8088 	beq.w	1a013d90 <__aeabi_ddiv+0x144>
1a013c80:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a013c84:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a013c88:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a013c8c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a013c90:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a013c94:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a013c98:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a013c9c:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a013ca0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a013ca4:	429d      	cmp	r5, r3
1a013ca6:	bf08      	it	eq
1a013ca8:	4296      	cmpeq	r6, r2
1a013caa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a013cae:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a013cb2:	d202      	bcs.n	1a013cba <__aeabi_ddiv+0x6e>
1a013cb4:	085b      	lsrs	r3, r3, #1
1a013cb6:	ea4f 0232 	mov.w	r2, r2, rrx
1a013cba:	1ab6      	subs	r6, r6, r2
1a013cbc:	eb65 0503 	sbc.w	r5, r5, r3
1a013cc0:	085b      	lsrs	r3, r3, #1
1a013cc2:	ea4f 0232 	mov.w	r2, r2, rrx
1a013cc6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a013cca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a013cce:	ebb6 0e02 	subs.w	lr, r6, r2
1a013cd2:	eb75 0e03 	sbcs.w	lr, r5, r3
1a013cd6:	bf22      	ittt	cs
1a013cd8:	1ab6      	subcs	r6, r6, r2
1a013cda:	4675      	movcs	r5, lr
1a013cdc:	ea40 000c 	orrcs.w	r0, r0, ip
1a013ce0:	085b      	lsrs	r3, r3, #1
1a013ce2:	ea4f 0232 	mov.w	r2, r2, rrx
1a013ce6:	ebb6 0e02 	subs.w	lr, r6, r2
1a013cea:	eb75 0e03 	sbcs.w	lr, r5, r3
1a013cee:	bf22      	ittt	cs
1a013cf0:	1ab6      	subcs	r6, r6, r2
1a013cf2:	4675      	movcs	r5, lr
1a013cf4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a013cf8:	085b      	lsrs	r3, r3, #1
1a013cfa:	ea4f 0232 	mov.w	r2, r2, rrx
1a013cfe:	ebb6 0e02 	subs.w	lr, r6, r2
1a013d02:	eb75 0e03 	sbcs.w	lr, r5, r3
1a013d06:	bf22      	ittt	cs
1a013d08:	1ab6      	subcs	r6, r6, r2
1a013d0a:	4675      	movcs	r5, lr
1a013d0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a013d10:	085b      	lsrs	r3, r3, #1
1a013d12:	ea4f 0232 	mov.w	r2, r2, rrx
1a013d16:	ebb6 0e02 	subs.w	lr, r6, r2
1a013d1a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a013d1e:	bf22      	ittt	cs
1a013d20:	1ab6      	subcs	r6, r6, r2
1a013d22:	4675      	movcs	r5, lr
1a013d24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a013d28:	ea55 0e06 	orrs.w	lr, r5, r6
1a013d2c:	d018      	beq.n	1a013d60 <__aeabi_ddiv+0x114>
1a013d2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a013d32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a013d36:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a013d3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a013d3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a013d42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a013d46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a013d4a:	d1c0      	bne.n	1a013cce <__aeabi_ddiv+0x82>
1a013d4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a013d50:	d10b      	bne.n	1a013d6a <__aeabi_ddiv+0x11e>
1a013d52:	ea41 0100 	orr.w	r1, r1, r0
1a013d56:	f04f 0000 	mov.w	r0, #0
1a013d5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a013d5e:	e7b6      	b.n	1a013cce <__aeabi_ddiv+0x82>
1a013d60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a013d64:	bf04      	itt	eq
1a013d66:	4301      	orreq	r1, r0
1a013d68:	2000      	moveq	r0, #0
1a013d6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a013d6e:	bf88      	it	hi
1a013d70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a013d74:	f63f aeaf 	bhi.w	1a013ad6 <__aeabi_dmul+0xde>
1a013d78:	ebb5 0c03 	subs.w	ip, r5, r3
1a013d7c:	bf04      	itt	eq
1a013d7e:	ebb6 0c02 	subseq.w	ip, r6, r2
1a013d82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a013d86:	f150 0000 	adcs.w	r0, r0, #0
1a013d8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a013d8e:	bd70      	pop	{r4, r5, r6, pc}
1a013d90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a013d94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a013d98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a013d9c:	bfc2      	ittt	gt
1a013d9e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a013da2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a013da6:	bd70      	popgt	{r4, r5, r6, pc}
1a013da8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a013dac:	f04f 0e00 	mov.w	lr, #0
1a013db0:	3c01      	subs	r4, #1
1a013db2:	e690      	b.n	1a013ad6 <__aeabi_dmul+0xde>
1a013db4:	ea45 0e06 	orr.w	lr, r5, r6
1a013db8:	e68d      	b.n	1a013ad6 <__aeabi_dmul+0xde>
1a013dba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a013dbe:	ea94 0f0c 	teq	r4, ip
1a013dc2:	bf08      	it	eq
1a013dc4:	ea95 0f0c 	teqeq	r5, ip
1a013dc8:	f43f af3b 	beq.w	1a013c42 <__aeabi_dmul+0x24a>
1a013dcc:	ea94 0f0c 	teq	r4, ip
1a013dd0:	d10a      	bne.n	1a013de8 <__aeabi_ddiv+0x19c>
1a013dd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a013dd6:	f47f af34 	bne.w	1a013c42 <__aeabi_dmul+0x24a>
1a013dda:	ea95 0f0c 	teq	r5, ip
1a013dde:	f47f af25 	bne.w	1a013c2c <__aeabi_dmul+0x234>
1a013de2:	4610      	mov	r0, r2
1a013de4:	4619      	mov	r1, r3
1a013de6:	e72c      	b.n	1a013c42 <__aeabi_dmul+0x24a>
1a013de8:	ea95 0f0c 	teq	r5, ip
1a013dec:	d106      	bne.n	1a013dfc <__aeabi_ddiv+0x1b0>
1a013dee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a013df2:	f43f aefd 	beq.w	1a013bf0 <__aeabi_dmul+0x1f8>
1a013df6:	4610      	mov	r0, r2
1a013df8:	4619      	mov	r1, r3
1a013dfa:	e722      	b.n	1a013c42 <__aeabi_dmul+0x24a>
1a013dfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a013e00:	bf18      	it	ne
1a013e02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a013e06:	f47f aec5 	bne.w	1a013b94 <__aeabi_dmul+0x19c>
1a013e0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a013e0e:	f47f af0d 	bne.w	1a013c2c <__aeabi_dmul+0x234>
1a013e12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a013e16:	f47f aeeb 	bne.w	1a013bf0 <__aeabi_dmul+0x1f8>
1a013e1a:	e712      	b.n	1a013c42 <__aeabi_dmul+0x24a>

1a013e1c <__gedf2>:
1a013e1c:	f04f 3cff 	mov.w	ip, #4294967295
1a013e20:	e006      	b.n	1a013e30 <__cmpdf2+0x4>
1a013e22:	bf00      	nop

1a013e24 <__ledf2>:
1a013e24:	f04f 0c01 	mov.w	ip, #1
1a013e28:	e002      	b.n	1a013e30 <__cmpdf2+0x4>
1a013e2a:	bf00      	nop

1a013e2c <__cmpdf2>:
1a013e2c:	f04f 0c01 	mov.w	ip, #1
1a013e30:	f84d cd04 	str.w	ip, [sp, #-4]!
1a013e34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a013e38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a013e3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a013e40:	bf18      	it	ne
1a013e42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a013e46:	d01b      	beq.n	1a013e80 <__cmpdf2+0x54>
1a013e48:	b001      	add	sp, #4
1a013e4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a013e4e:	bf0c      	ite	eq
1a013e50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a013e54:	ea91 0f03 	teqne	r1, r3
1a013e58:	bf02      	ittt	eq
1a013e5a:	ea90 0f02 	teqeq	r0, r2
1a013e5e:	2000      	moveq	r0, #0
1a013e60:	4770      	bxeq	lr
1a013e62:	f110 0f00 	cmn.w	r0, #0
1a013e66:	ea91 0f03 	teq	r1, r3
1a013e6a:	bf58      	it	pl
1a013e6c:	4299      	cmppl	r1, r3
1a013e6e:	bf08      	it	eq
1a013e70:	4290      	cmpeq	r0, r2
1a013e72:	bf2c      	ite	cs
1a013e74:	17d8      	asrcs	r0, r3, #31
1a013e76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a013e7a:	f040 0001 	orr.w	r0, r0, #1
1a013e7e:	4770      	bx	lr
1a013e80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a013e84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a013e88:	d102      	bne.n	1a013e90 <__cmpdf2+0x64>
1a013e8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a013e8e:	d107      	bne.n	1a013ea0 <__cmpdf2+0x74>
1a013e90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a013e94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a013e98:	d1d6      	bne.n	1a013e48 <__cmpdf2+0x1c>
1a013e9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a013e9e:	d0d3      	beq.n	1a013e48 <__cmpdf2+0x1c>
1a013ea0:	f85d 0b04 	ldr.w	r0, [sp], #4
1a013ea4:	4770      	bx	lr
1a013ea6:	bf00      	nop

1a013ea8 <__aeabi_cdrcmple>:
1a013ea8:	4684      	mov	ip, r0
1a013eaa:	4610      	mov	r0, r2
1a013eac:	4662      	mov	r2, ip
1a013eae:	468c      	mov	ip, r1
1a013eb0:	4619      	mov	r1, r3
1a013eb2:	4663      	mov	r3, ip
1a013eb4:	e000      	b.n	1a013eb8 <__aeabi_cdcmpeq>
1a013eb6:	bf00      	nop

1a013eb8 <__aeabi_cdcmpeq>:
1a013eb8:	b501      	push	{r0, lr}
1a013eba:	f7ff ffb7 	bl	1a013e2c <__cmpdf2>
1a013ebe:	2800      	cmp	r0, #0
1a013ec0:	bf48      	it	mi
1a013ec2:	f110 0f00 	cmnmi.w	r0, #0
1a013ec6:	bd01      	pop	{r0, pc}

1a013ec8 <__aeabi_dcmpeq>:
1a013ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
1a013ecc:	f7ff fff4 	bl	1a013eb8 <__aeabi_cdcmpeq>
1a013ed0:	bf0c      	ite	eq
1a013ed2:	2001      	moveq	r0, #1
1a013ed4:	2000      	movne	r0, #0
1a013ed6:	f85d fb08 	ldr.w	pc, [sp], #8
1a013eda:	bf00      	nop

1a013edc <__aeabi_dcmplt>:
1a013edc:	f84d ed08 	str.w	lr, [sp, #-8]!
1a013ee0:	f7ff ffea 	bl	1a013eb8 <__aeabi_cdcmpeq>
1a013ee4:	bf34      	ite	cc
1a013ee6:	2001      	movcc	r0, #1
1a013ee8:	2000      	movcs	r0, #0
1a013eea:	f85d fb08 	ldr.w	pc, [sp], #8
1a013eee:	bf00      	nop

1a013ef0 <__aeabi_dcmple>:
1a013ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a013ef4:	f7ff ffe0 	bl	1a013eb8 <__aeabi_cdcmpeq>
1a013ef8:	bf94      	ite	ls
1a013efa:	2001      	movls	r0, #1
1a013efc:	2000      	movhi	r0, #0
1a013efe:	f85d fb08 	ldr.w	pc, [sp], #8
1a013f02:	bf00      	nop

1a013f04 <__aeabi_dcmpge>:
1a013f04:	f84d ed08 	str.w	lr, [sp, #-8]!
1a013f08:	f7ff ffce 	bl	1a013ea8 <__aeabi_cdrcmple>
1a013f0c:	bf94      	ite	ls
1a013f0e:	2001      	movls	r0, #1
1a013f10:	2000      	movhi	r0, #0
1a013f12:	f85d fb08 	ldr.w	pc, [sp], #8
1a013f16:	bf00      	nop

1a013f18 <__aeabi_dcmpgt>:
1a013f18:	f84d ed08 	str.w	lr, [sp, #-8]!
1a013f1c:	f7ff ffc4 	bl	1a013ea8 <__aeabi_cdrcmple>
1a013f20:	bf34      	ite	cc
1a013f22:	2001      	movcc	r0, #1
1a013f24:	2000      	movcs	r0, #0
1a013f26:	f85d fb08 	ldr.w	pc, [sp], #8
1a013f2a:	bf00      	nop

1a013f2c <__aeabi_d2iz>:
1a013f2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a013f30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a013f34:	d215      	bcs.n	1a013f62 <__aeabi_d2iz+0x36>
1a013f36:	d511      	bpl.n	1a013f5c <__aeabi_d2iz+0x30>
1a013f38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a013f3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a013f40:	d912      	bls.n	1a013f68 <__aeabi_d2iz+0x3c>
1a013f42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a013f46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a013f4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a013f4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a013f52:	fa23 f002 	lsr.w	r0, r3, r2
1a013f56:	bf18      	it	ne
1a013f58:	4240      	negne	r0, r0
1a013f5a:	4770      	bx	lr
1a013f5c:	f04f 0000 	mov.w	r0, #0
1a013f60:	4770      	bx	lr
1a013f62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a013f66:	d105      	bne.n	1a013f74 <__aeabi_d2iz+0x48>
1a013f68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a013f6c:	bf08      	it	eq
1a013f6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a013f72:	4770      	bx	lr
1a013f74:	f04f 0000 	mov.w	r0, #0
1a013f78:	4770      	bx	lr
1a013f7a:	bf00      	nop

1a013f7c <__aeabi_d2f>:
1a013f7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a013f80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a013f84:	bf24      	itt	cs
1a013f86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a013f8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a013f8e:	d90d      	bls.n	1a013fac <__aeabi_d2f+0x30>
1a013f90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a013f94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a013f98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a013f9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a013fa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a013fa4:	bf08      	it	eq
1a013fa6:	f020 0001 	biceq.w	r0, r0, #1
1a013faa:	4770      	bx	lr
1a013fac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a013fb0:	d121      	bne.n	1a013ff6 <__aeabi_d2f+0x7a>
1a013fb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a013fb6:	bfbc      	itt	lt
1a013fb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a013fbc:	4770      	bxlt	lr
1a013fbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a013fc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a013fc6:	f1c2 0218 	rsb	r2, r2, #24
1a013fca:	f1c2 0c20 	rsb	ip, r2, #32
1a013fce:	fa10 f30c 	lsls.w	r3, r0, ip
1a013fd2:	fa20 f002 	lsr.w	r0, r0, r2
1a013fd6:	bf18      	it	ne
1a013fd8:	f040 0001 	orrne.w	r0, r0, #1
1a013fdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a013fe0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a013fe4:	fa03 fc0c 	lsl.w	ip, r3, ip
1a013fe8:	ea40 000c 	orr.w	r0, r0, ip
1a013fec:	fa23 f302 	lsr.w	r3, r3, r2
1a013ff0:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a013ff4:	e7cc      	b.n	1a013f90 <__aeabi_d2f+0x14>
1a013ff6:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a013ffa:	d107      	bne.n	1a01400c <__aeabi_d2f+0x90>
1a013ffc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a014000:	bf1e      	ittt	ne
1a014002:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a014006:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a01400a:	4770      	bxne	lr
1a01400c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a014010:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a014014:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a014018:	4770      	bx	lr
1a01401a:	bf00      	nop

1a01401c <__aeabi_frsub>:
1a01401c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
1a014020:	e002      	b.n	1a014028 <__addsf3>
1a014022:	bf00      	nop

1a014024 <__aeabi_fsub>:
1a014024:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

1a014028 <__addsf3>:
1a014028:	0042      	lsls	r2, r0, #1
1a01402a:	bf1f      	itttt	ne
1a01402c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
1a014030:	ea92 0f03 	teqne	r2, r3
1a014034:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
1a014038:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
1a01403c:	d06a      	beq.n	1a014114 <__addsf3+0xec>
1a01403e:	ea4f 6212 	mov.w	r2, r2, lsr #24
1a014042:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
1a014046:	bfc1      	itttt	gt
1a014048:	18d2      	addgt	r2, r2, r3
1a01404a:	4041      	eorgt	r1, r0
1a01404c:	4048      	eorgt	r0, r1
1a01404e:	4041      	eorgt	r1, r0
1a014050:	bfb8      	it	lt
1a014052:	425b      	neglt	r3, r3
1a014054:	2b19      	cmp	r3, #25
1a014056:	bf88      	it	hi
1a014058:	4770      	bxhi	lr
1a01405a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
1a01405e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a014062:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
1a014066:	bf18      	it	ne
1a014068:	4240      	negne	r0, r0
1a01406a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a01406e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
1a014072:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
1a014076:	bf18      	it	ne
1a014078:	4249      	negne	r1, r1
1a01407a:	ea92 0f03 	teq	r2, r3
1a01407e:	d03f      	beq.n	1a014100 <__addsf3+0xd8>
1a014080:	f1a2 0201 	sub.w	r2, r2, #1
1a014084:	fa41 fc03 	asr.w	ip, r1, r3
1a014088:	eb10 000c 	adds.w	r0, r0, ip
1a01408c:	f1c3 0320 	rsb	r3, r3, #32
1a014090:	fa01 f103 	lsl.w	r1, r1, r3
1a014094:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
1a014098:	d502      	bpl.n	1a0140a0 <__addsf3+0x78>
1a01409a:	4249      	negs	r1, r1
1a01409c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
1a0140a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
1a0140a4:	d313      	bcc.n	1a0140ce <__addsf3+0xa6>
1a0140a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a0140aa:	d306      	bcc.n	1a0140ba <__addsf3+0x92>
1a0140ac:	0840      	lsrs	r0, r0, #1
1a0140ae:	ea4f 0131 	mov.w	r1, r1, rrx
1a0140b2:	f102 0201 	add.w	r2, r2, #1
1a0140b6:	2afe      	cmp	r2, #254	; 0xfe
1a0140b8:	d251      	bcs.n	1a01415e <__addsf3+0x136>
1a0140ba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
1a0140be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
1a0140c2:	bf08      	it	eq
1a0140c4:	f020 0001 	biceq.w	r0, r0, #1
1a0140c8:	ea40 0003 	orr.w	r0, r0, r3
1a0140cc:	4770      	bx	lr
1a0140ce:	0049      	lsls	r1, r1, #1
1a0140d0:	eb40 0000 	adc.w	r0, r0, r0
1a0140d4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
1a0140d8:	f1a2 0201 	sub.w	r2, r2, #1
1a0140dc:	d1ed      	bne.n	1a0140ba <__addsf3+0x92>
1a0140de:	fab0 fc80 	clz	ip, r0
1a0140e2:	f1ac 0c08 	sub.w	ip, ip, #8
1a0140e6:	ebb2 020c 	subs.w	r2, r2, ip
1a0140ea:	fa00 f00c 	lsl.w	r0, r0, ip
1a0140ee:	bfaa      	itet	ge
1a0140f0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
1a0140f4:	4252      	neglt	r2, r2
1a0140f6:	4318      	orrge	r0, r3
1a0140f8:	bfbc      	itt	lt
1a0140fa:	40d0      	lsrlt	r0, r2
1a0140fc:	4318      	orrlt	r0, r3
1a0140fe:	4770      	bx	lr
1a014100:	f092 0f00 	teq	r2, #0
1a014104:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
1a014108:	bf06      	itte	eq
1a01410a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
1a01410e:	3201      	addeq	r2, #1
1a014110:	3b01      	subne	r3, #1
1a014112:	e7b5      	b.n	1a014080 <__addsf3+0x58>
1a014114:	ea4f 0341 	mov.w	r3, r1, lsl #1
1a014118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
1a01411c:	bf18      	it	ne
1a01411e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
1a014122:	d021      	beq.n	1a014168 <__addsf3+0x140>
1a014124:	ea92 0f03 	teq	r2, r3
1a014128:	d004      	beq.n	1a014134 <__addsf3+0x10c>
1a01412a:	f092 0f00 	teq	r2, #0
1a01412e:	bf08      	it	eq
1a014130:	4608      	moveq	r0, r1
1a014132:	4770      	bx	lr
1a014134:	ea90 0f01 	teq	r0, r1
1a014138:	bf1c      	itt	ne
1a01413a:	2000      	movne	r0, #0
1a01413c:	4770      	bxne	lr
1a01413e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
1a014142:	d104      	bne.n	1a01414e <__addsf3+0x126>
1a014144:	0040      	lsls	r0, r0, #1
1a014146:	bf28      	it	cs
1a014148:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
1a01414c:	4770      	bx	lr
1a01414e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
1a014152:	bf3c      	itt	cc
1a014154:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
1a014158:	4770      	bxcc	lr
1a01415a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
1a01415e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
1a014162:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a014166:	4770      	bx	lr
1a014168:	ea7f 6222 	mvns.w	r2, r2, asr #24
1a01416c:	bf16      	itet	ne
1a01416e:	4608      	movne	r0, r1
1a014170:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
1a014174:	4601      	movne	r1, r0
1a014176:	0242      	lsls	r2, r0, #9
1a014178:	bf06      	itte	eq
1a01417a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
1a01417e:	ea90 0f01 	teqeq	r0, r1
1a014182:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
1a014186:	4770      	bx	lr

1a014188 <__aeabi_ui2f>:
1a014188:	f04f 0300 	mov.w	r3, #0
1a01418c:	e004      	b.n	1a014198 <__aeabi_i2f+0x8>
1a01418e:	bf00      	nop

1a014190 <__aeabi_i2f>:
1a014190:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
1a014194:	bf48      	it	mi
1a014196:	4240      	negmi	r0, r0
1a014198:	ea5f 0c00 	movs.w	ip, r0
1a01419c:	bf08      	it	eq
1a01419e:	4770      	bxeq	lr
1a0141a0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
1a0141a4:	4601      	mov	r1, r0
1a0141a6:	f04f 0000 	mov.w	r0, #0
1a0141aa:	e01c      	b.n	1a0141e6 <__aeabi_l2f+0x2a>

1a0141ac <__aeabi_ul2f>:
1a0141ac:	ea50 0201 	orrs.w	r2, r0, r1
1a0141b0:	bf08      	it	eq
1a0141b2:	4770      	bxeq	lr
1a0141b4:	f04f 0300 	mov.w	r3, #0
1a0141b8:	e00a      	b.n	1a0141d0 <__aeabi_l2f+0x14>
1a0141ba:	bf00      	nop

1a0141bc <__aeabi_l2f>:
1a0141bc:	ea50 0201 	orrs.w	r2, r0, r1
1a0141c0:	bf08      	it	eq
1a0141c2:	4770      	bxeq	lr
1a0141c4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
1a0141c8:	d502      	bpl.n	1a0141d0 <__aeabi_l2f+0x14>
1a0141ca:	4240      	negs	r0, r0
1a0141cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0141d0:	ea5f 0c01 	movs.w	ip, r1
1a0141d4:	bf02      	ittt	eq
1a0141d6:	4684      	moveq	ip, r0
1a0141d8:	4601      	moveq	r1, r0
1a0141da:	2000      	moveq	r0, #0
1a0141dc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
1a0141e0:	bf08      	it	eq
1a0141e2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
1a0141e6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
1a0141ea:	fabc f28c 	clz	r2, ip
1a0141ee:	3a08      	subs	r2, #8
1a0141f0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
1a0141f4:	db10      	blt.n	1a014218 <__aeabi_l2f+0x5c>
1a0141f6:	fa01 fc02 	lsl.w	ip, r1, r2
1a0141fa:	4463      	add	r3, ip
1a0141fc:	fa00 fc02 	lsl.w	ip, r0, r2
1a014200:	f1c2 0220 	rsb	r2, r2, #32
1a014204:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a014208:	fa20 f202 	lsr.w	r2, r0, r2
1a01420c:	eb43 0002 	adc.w	r0, r3, r2
1a014210:	bf08      	it	eq
1a014212:	f020 0001 	biceq.w	r0, r0, #1
1a014216:	4770      	bx	lr
1a014218:	f102 0220 	add.w	r2, r2, #32
1a01421c:	fa01 fc02 	lsl.w	ip, r1, r2
1a014220:	f1c2 0220 	rsb	r2, r2, #32
1a014224:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
1a014228:	fa21 f202 	lsr.w	r2, r1, r2
1a01422c:	eb43 0002 	adc.w	r0, r3, r2
1a014230:	bf08      	it	eq
1a014232:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
1a014236:	4770      	bx	lr

1a014238 <__aeabi_fmul>:
1a014238:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a01423c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
1a014240:	bf1e      	ittt	ne
1a014242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
1a014246:	ea92 0f0c 	teqne	r2, ip
1a01424a:	ea93 0f0c 	teqne	r3, ip
1a01424e:	d06f      	beq.n	1a014330 <__aeabi_fmul+0xf8>
1a014250:	441a      	add	r2, r3
1a014252:	ea80 0c01 	eor.w	ip, r0, r1
1a014256:	0240      	lsls	r0, r0, #9
1a014258:	bf18      	it	ne
1a01425a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
1a01425e:	d01e      	beq.n	1a01429e <__aeabi_fmul+0x66>
1a014260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
1a014264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
1a014268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
1a01426c:	fba0 3101 	umull	r3, r1, r0, r1
1a014270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
1a014274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
1a014278:	bf3e      	ittt	cc
1a01427a:	0049      	lslcc	r1, r1, #1
1a01427c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
1a014280:	005b      	lslcc	r3, r3, #1
1a014282:	ea40 0001 	orr.w	r0, r0, r1
1a014286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
1a01428a:	2afd      	cmp	r2, #253	; 0xfd
1a01428c:	d81d      	bhi.n	1a0142ca <__aeabi_fmul+0x92>
1a01428e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1a014292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
1a014296:	bf08      	it	eq
1a014298:	f020 0001 	biceq.w	r0, r0, #1
1a01429c:	4770      	bx	lr
1a01429e:	f090 0f00 	teq	r0, #0
1a0142a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
1a0142a6:	bf08      	it	eq
1a0142a8:	0249      	lsleq	r1, r1, #9
1a0142aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
1a0142ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
1a0142b2:	3a7f      	subs	r2, #127	; 0x7f
1a0142b4:	bfc2      	ittt	gt
1a0142b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
1a0142ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
1a0142be:	4770      	bxgt	lr
1a0142c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a0142c4:	f04f 0300 	mov.w	r3, #0
1a0142c8:	3a01      	subs	r2, #1
1a0142ca:	dc5d      	bgt.n	1a014388 <__aeabi_fmul+0x150>
1a0142cc:	f112 0f19 	cmn.w	r2, #25
1a0142d0:	bfdc      	itt	le
1a0142d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
1a0142d6:	4770      	bxle	lr
1a0142d8:	f1c2 0200 	rsb	r2, r2, #0
1a0142dc:	0041      	lsls	r1, r0, #1
1a0142de:	fa21 f102 	lsr.w	r1, r1, r2
1a0142e2:	f1c2 0220 	rsb	r2, r2, #32
1a0142e6:	fa00 fc02 	lsl.w	ip, r0, r2
1a0142ea:	ea5f 0031 	movs.w	r0, r1, rrx
1a0142ee:	f140 0000 	adc.w	r0, r0, #0
1a0142f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
1a0142f6:	bf08      	it	eq
1a0142f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
1a0142fc:	4770      	bx	lr
1a0142fe:	f092 0f00 	teq	r2, #0
1a014302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
1a014306:	bf02      	ittt	eq
1a014308:	0040      	lsleq	r0, r0, #1
1a01430a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
1a01430e:	3a01      	subeq	r2, #1
1a014310:	d0f9      	beq.n	1a014306 <__aeabi_fmul+0xce>
1a014312:	ea40 000c 	orr.w	r0, r0, ip
1a014316:	f093 0f00 	teq	r3, #0
1a01431a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a01431e:	bf02      	ittt	eq
1a014320:	0049      	lsleq	r1, r1, #1
1a014322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
1a014326:	3b01      	subeq	r3, #1
1a014328:	d0f9      	beq.n	1a01431e <__aeabi_fmul+0xe6>
1a01432a:	ea41 010c 	orr.w	r1, r1, ip
1a01432e:	e78f      	b.n	1a014250 <__aeabi_fmul+0x18>
1a014330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
1a014334:	ea92 0f0c 	teq	r2, ip
1a014338:	bf18      	it	ne
1a01433a:	ea93 0f0c 	teqne	r3, ip
1a01433e:	d00a      	beq.n	1a014356 <__aeabi_fmul+0x11e>
1a014340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
1a014344:	bf18      	it	ne
1a014346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
1a01434a:	d1d8      	bne.n	1a0142fe <__aeabi_fmul+0xc6>
1a01434c:	ea80 0001 	eor.w	r0, r0, r1
1a014350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
1a014354:	4770      	bx	lr
1a014356:	f090 0f00 	teq	r0, #0
1a01435a:	bf17      	itett	ne
1a01435c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
1a014360:	4608      	moveq	r0, r1
1a014362:	f091 0f00 	teqne	r1, #0
1a014366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
1a01436a:	d014      	beq.n	1a014396 <__aeabi_fmul+0x15e>
1a01436c:	ea92 0f0c 	teq	r2, ip
1a014370:	d101      	bne.n	1a014376 <__aeabi_fmul+0x13e>
1a014372:	0242      	lsls	r2, r0, #9
1a014374:	d10f      	bne.n	1a014396 <__aeabi_fmul+0x15e>
1a014376:	ea93 0f0c 	teq	r3, ip
1a01437a:	d103      	bne.n	1a014384 <__aeabi_fmul+0x14c>
1a01437c:	024b      	lsls	r3, r1, #9
1a01437e:	bf18      	it	ne
1a014380:	4608      	movne	r0, r1
1a014382:	d108      	bne.n	1a014396 <__aeabi_fmul+0x15e>
1a014384:	ea80 0001 	eor.w	r0, r0, r1
1a014388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
1a01438c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a014390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a014394:	4770      	bx	lr
1a014396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a01439a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
1a01439e:	4770      	bx	lr

1a0143a0 <__aeabi_fdiv>:
1a0143a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a0143a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
1a0143a8:	bf1e      	ittt	ne
1a0143aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
1a0143ae:	ea92 0f0c 	teqne	r2, ip
1a0143b2:	ea93 0f0c 	teqne	r3, ip
1a0143b6:	d069      	beq.n	1a01448c <__aeabi_fdiv+0xec>
1a0143b8:	eba2 0203 	sub.w	r2, r2, r3
1a0143bc:	ea80 0c01 	eor.w	ip, r0, r1
1a0143c0:	0249      	lsls	r1, r1, #9
1a0143c2:	ea4f 2040 	mov.w	r0, r0, lsl #9
1a0143c6:	d037      	beq.n	1a014438 <__aeabi_fdiv+0x98>
1a0143c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
1a0143cc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
1a0143d0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
1a0143d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
1a0143d8:	428b      	cmp	r3, r1
1a0143da:	bf38      	it	cc
1a0143dc:	005b      	lslcc	r3, r3, #1
1a0143de:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
1a0143e2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
1a0143e6:	428b      	cmp	r3, r1
1a0143e8:	bf24      	itt	cs
1a0143ea:	1a5b      	subcs	r3, r3, r1
1a0143ec:	ea40 000c 	orrcs.w	r0, r0, ip
1a0143f0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
1a0143f4:	bf24      	itt	cs
1a0143f6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
1a0143fa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a0143fe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
1a014402:	bf24      	itt	cs
1a014404:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
1a014408:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a01440c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
1a014410:	bf24      	itt	cs
1a014412:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
1a014416:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a01441a:	011b      	lsls	r3, r3, #4
1a01441c:	bf18      	it	ne
1a01441e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
1a014422:	d1e0      	bne.n	1a0143e6 <__aeabi_fdiv+0x46>
1a014424:	2afd      	cmp	r2, #253	; 0xfd
1a014426:	f63f af50 	bhi.w	1a0142ca <__aeabi_fmul+0x92>
1a01442a:	428b      	cmp	r3, r1
1a01442c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
1a014430:	bf08      	it	eq
1a014432:	f020 0001 	biceq.w	r0, r0, #1
1a014436:	4770      	bx	lr
1a014438:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
1a01443c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
1a014440:	327f      	adds	r2, #127	; 0x7f
1a014442:	bfc2      	ittt	gt
1a014444:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
1a014448:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
1a01444c:	4770      	bxgt	lr
1a01444e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a014452:	f04f 0300 	mov.w	r3, #0
1a014456:	3a01      	subs	r2, #1
1a014458:	e737      	b.n	1a0142ca <__aeabi_fmul+0x92>
1a01445a:	f092 0f00 	teq	r2, #0
1a01445e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
1a014462:	bf02      	ittt	eq
1a014464:	0040      	lsleq	r0, r0, #1
1a014466:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
1a01446a:	3a01      	subeq	r2, #1
1a01446c:	d0f9      	beq.n	1a014462 <__aeabi_fdiv+0xc2>
1a01446e:	ea40 000c 	orr.w	r0, r0, ip
1a014472:	f093 0f00 	teq	r3, #0
1a014476:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a01447a:	bf02      	ittt	eq
1a01447c:	0049      	lsleq	r1, r1, #1
1a01447e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
1a014482:	3b01      	subeq	r3, #1
1a014484:	d0f9      	beq.n	1a01447a <__aeabi_fdiv+0xda>
1a014486:	ea41 010c 	orr.w	r1, r1, ip
1a01448a:	e795      	b.n	1a0143b8 <__aeabi_fdiv+0x18>
1a01448c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
1a014490:	ea92 0f0c 	teq	r2, ip
1a014494:	d108      	bne.n	1a0144a8 <__aeabi_fdiv+0x108>
1a014496:	0242      	lsls	r2, r0, #9
1a014498:	f47f af7d 	bne.w	1a014396 <__aeabi_fmul+0x15e>
1a01449c:	ea93 0f0c 	teq	r3, ip
1a0144a0:	f47f af70 	bne.w	1a014384 <__aeabi_fmul+0x14c>
1a0144a4:	4608      	mov	r0, r1
1a0144a6:	e776      	b.n	1a014396 <__aeabi_fmul+0x15e>
1a0144a8:	ea93 0f0c 	teq	r3, ip
1a0144ac:	d104      	bne.n	1a0144b8 <__aeabi_fdiv+0x118>
1a0144ae:	024b      	lsls	r3, r1, #9
1a0144b0:	f43f af4c 	beq.w	1a01434c <__aeabi_fmul+0x114>
1a0144b4:	4608      	mov	r0, r1
1a0144b6:	e76e      	b.n	1a014396 <__aeabi_fmul+0x15e>
1a0144b8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
1a0144bc:	bf18      	it	ne
1a0144be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
1a0144c2:	d1ca      	bne.n	1a01445a <__aeabi_fdiv+0xba>
1a0144c4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
1a0144c8:	f47f af5c 	bne.w	1a014384 <__aeabi_fmul+0x14c>
1a0144cc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
1a0144d0:	f47f af3c 	bne.w	1a01434c <__aeabi_fmul+0x114>
1a0144d4:	e75f      	b.n	1a014396 <__aeabi_fmul+0x15e>
1a0144d6:	bf00      	nop

1a0144d8 <__gesf2>:
1a0144d8:	f04f 3cff 	mov.w	ip, #4294967295
1a0144dc:	e006      	b.n	1a0144ec <__cmpsf2+0x4>
1a0144de:	bf00      	nop

1a0144e0 <__lesf2>:
1a0144e0:	f04f 0c01 	mov.w	ip, #1
1a0144e4:	e002      	b.n	1a0144ec <__cmpsf2+0x4>
1a0144e6:	bf00      	nop

1a0144e8 <__cmpsf2>:
1a0144e8:	f04f 0c01 	mov.w	ip, #1
1a0144ec:	f84d cd04 	str.w	ip, [sp, #-4]!
1a0144f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
1a0144f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
1a0144f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
1a0144fc:	bf18      	it	ne
1a0144fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
1a014502:	d011      	beq.n	1a014528 <__cmpsf2+0x40>
1a014504:	b001      	add	sp, #4
1a014506:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
1a01450a:	bf18      	it	ne
1a01450c:	ea90 0f01 	teqne	r0, r1
1a014510:	bf58      	it	pl
1a014512:	ebb2 0003 	subspl.w	r0, r2, r3
1a014516:	bf88      	it	hi
1a014518:	17c8      	asrhi	r0, r1, #31
1a01451a:	bf38      	it	cc
1a01451c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
1a014520:	bf18      	it	ne
1a014522:	f040 0001 	orrne.w	r0, r0, #1
1a014526:	4770      	bx	lr
1a014528:	ea7f 6c22 	mvns.w	ip, r2, asr #24
1a01452c:	d102      	bne.n	1a014534 <__cmpsf2+0x4c>
1a01452e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
1a014532:	d105      	bne.n	1a014540 <__cmpsf2+0x58>
1a014534:	ea7f 6c23 	mvns.w	ip, r3, asr #24
1a014538:	d1e4      	bne.n	1a014504 <__cmpsf2+0x1c>
1a01453a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
1a01453e:	d0e1      	beq.n	1a014504 <__cmpsf2+0x1c>
1a014540:	f85d 0b04 	ldr.w	r0, [sp], #4
1a014544:	4770      	bx	lr
1a014546:	bf00      	nop

1a014548 <__aeabi_cfrcmple>:
1a014548:	4684      	mov	ip, r0
1a01454a:	4608      	mov	r0, r1
1a01454c:	4661      	mov	r1, ip
1a01454e:	e7ff      	b.n	1a014550 <__aeabi_cfcmpeq>

1a014550 <__aeabi_cfcmpeq>:
1a014550:	b50f      	push	{r0, r1, r2, r3, lr}
1a014552:	f7ff ffc9 	bl	1a0144e8 <__cmpsf2>
1a014556:	2800      	cmp	r0, #0
1a014558:	bf48      	it	mi
1a01455a:	f110 0f00 	cmnmi.w	r0, #0
1a01455e:	bd0f      	pop	{r0, r1, r2, r3, pc}

1a014560 <__aeabi_fcmpeq>:
1a014560:	f84d ed08 	str.w	lr, [sp, #-8]!
1a014564:	f7ff fff4 	bl	1a014550 <__aeabi_cfcmpeq>
1a014568:	bf0c      	ite	eq
1a01456a:	2001      	moveq	r0, #1
1a01456c:	2000      	movne	r0, #0
1a01456e:	f85d fb08 	ldr.w	pc, [sp], #8
1a014572:	bf00      	nop

1a014574 <__aeabi_fcmplt>:
1a014574:	f84d ed08 	str.w	lr, [sp, #-8]!
1a014578:	f7ff ffea 	bl	1a014550 <__aeabi_cfcmpeq>
1a01457c:	bf34      	ite	cc
1a01457e:	2001      	movcc	r0, #1
1a014580:	2000      	movcs	r0, #0
1a014582:	f85d fb08 	ldr.w	pc, [sp], #8
1a014586:	bf00      	nop

1a014588 <__aeabi_fcmple>:
1a014588:	f84d ed08 	str.w	lr, [sp, #-8]!
1a01458c:	f7ff ffe0 	bl	1a014550 <__aeabi_cfcmpeq>
1a014590:	bf94      	ite	ls
1a014592:	2001      	movls	r0, #1
1a014594:	2000      	movhi	r0, #0
1a014596:	f85d fb08 	ldr.w	pc, [sp], #8
1a01459a:	bf00      	nop

1a01459c <__aeabi_fcmpge>:
1a01459c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0145a0:	f7ff ffd2 	bl	1a014548 <__aeabi_cfrcmple>
1a0145a4:	bf94      	ite	ls
1a0145a6:	2001      	movls	r0, #1
1a0145a8:	2000      	movhi	r0, #0
1a0145aa:	f85d fb08 	ldr.w	pc, [sp], #8
1a0145ae:	bf00      	nop

1a0145b0 <__aeabi_fcmpgt>:
1a0145b0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0145b4:	f7ff ffc8 	bl	1a014548 <__aeabi_cfrcmple>
1a0145b8:	bf34      	ite	cc
1a0145ba:	2001      	movcc	r0, #1
1a0145bc:	2000      	movcs	r0, #0
1a0145be:	f85d fb08 	ldr.w	pc, [sp], #8
1a0145c2:	bf00      	nop

1a0145c4 <__aeabi_f2iz>:
1a0145c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
1a0145c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
1a0145cc:	d30f      	bcc.n	1a0145ee <__aeabi_f2iz+0x2a>
1a0145ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
1a0145d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
1a0145d6:	d90d      	bls.n	1a0145f4 <__aeabi_f2iz+0x30>
1a0145d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
1a0145dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a0145e0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
1a0145e4:	fa23 f002 	lsr.w	r0, r3, r2
1a0145e8:	bf18      	it	ne
1a0145ea:	4240      	negne	r0, r0
1a0145ec:	4770      	bx	lr
1a0145ee:	f04f 0000 	mov.w	r0, #0
1a0145f2:	4770      	bx	lr
1a0145f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
1a0145f8:	d101      	bne.n	1a0145fe <__aeabi_f2iz+0x3a>
1a0145fa:	0242      	lsls	r2, r0, #9
1a0145fc:	d105      	bne.n	1a01460a <__aeabi_f2iz+0x46>
1a0145fe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
1a014602:	bf08      	it	eq
1a014604:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a014608:	4770      	bx	lr
1a01460a:	f04f 0000 	mov.w	r0, #0
1a01460e:	4770      	bx	lr

1a014610 <__aeabi_ldivmod>:
1a014610:	b97b      	cbnz	r3, 1a014632 <__aeabi_ldivmod+0x22>
1a014612:	b972      	cbnz	r2, 1a014632 <__aeabi_ldivmod+0x22>
1a014614:	2900      	cmp	r1, #0
1a014616:	bfbe      	ittt	lt
1a014618:	2000      	movlt	r0, #0
1a01461a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
1a01461e:	e006      	blt.n	1a01462e <__aeabi_ldivmod+0x1e>
1a014620:	bf08      	it	eq
1a014622:	2800      	cmpeq	r0, #0
1a014624:	bf1c      	itt	ne
1a014626:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
1a01462a:	f04f 30ff 	movne.w	r0, #4294967295
1a01462e:	f000 ba01 	b.w	1a014a34 <__aeabi_idiv0>
1a014632:	f1ad 0c08 	sub.w	ip, sp, #8
1a014636:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a01463a:	2900      	cmp	r1, #0
1a01463c:	db09      	blt.n	1a014652 <__aeabi_ldivmod+0x42>
1a01463e:	2b00      	cmp	r3, #0
1a014640:	db1a      	blt.n	1a014678 <__aeabi_ldivmod+0x68>
1a014642:	f000 f885 	bl	1a014750 <__udivmoddi4>
1a014646:	f8dd e004 	ldr.w	lr, [sp, #4]
1a01464a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a01464e:	b004      	add	sp, #16
1a014650:	4770      	bx	lr
1a014652:	4240      	negs	r0, r0
1a014654:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a014658:	2b00      	cmp	r3, #0
1a01465a:	db1b      	blt.n	1a014694 <__aeabi_ldivmod+0x84>
1a01465c:	f000 f878 	bl	1a014750 <__udivmoddi4>
1a014660:	f8dd e004 	ldr.w	lr, [sp, #4]
1a014664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a014668:	b004      	add	sp, #16
1a01466a:	4240      	negs	r0, r0
1a01466c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a014670:	4252      	negs	r2, r2
1a014672:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a014676:	4770      	bx	lr
1a014678:	4252      	negs	r2, r2
1a01467a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a01467e:	f000 f867 	bl	1a014750 <__udivmoddi4>
1a014682:	f8dd e004 	ldr.w	lr, [sp, #4]
1a014686:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a01468a:	b004      	add	sp, #16
1a01468c:	4240      	negs	r0, r0
1a01468e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a014692:	4770      	bx	lr
1a014694:	4252      	negs	r2, r2
1a014696:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a01469a:	f000 f859 	bl	1a014750 <__udivmoddi4>
1a01469e:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0146a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0146a6:	b004      	add	sp, #16
1a0146a8:	4252      	negs	r2, r2
1a0146aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0146ae:	4770      	bx	lr

1a0146b0 <__aeabi_uldivmod>:
1a0146b0:	b953      	cbnz	r3, 1a0146c8 <__aeabi_uldivmod+0x18>
1a0146b2:	b94a      	cbnz	r2, 1a0146c8 <__aeabi_uldivmod+0x18>
1a0146b4:	2900      	cmp	r1, #0
1a0146b6:	bf08      	it	eq
1a0146b8:	2800      	cmpeq	r0, #0
1a0146ba:	bf1c      	itt	ne
1a0146bc:	f04f 31ff 	movne.w	r1, #4294967295
1a0146c0:	f04f 30ff 	movne.w	r0, #4294967295
1a0146c4:	f000 b9b6 	b.w	1a014a34 <__aeabi_idiv0>
1a0146c8:	f1ad 0c08 	sub.w	ip, sp, #8
1a0146cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0146d0:	f000 f83e 	bl	1a014750 <__udivmoddi4>
1a0146d4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0146d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0146dc:	b004      	add	sp, #16
1a0146de:	4770      	bx	lr

1a0146e0 <__aeabi_f2lz>:
1a0146e0:	ee07 0a90 	vmov	s15, r0
1a0146e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
1a0146e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0146ec:	d401      	bmi.n	1a0146f2 <__aeabi_f2lz+0x12>
1a0146ee:	f000 b809 	b.w	1a014704 <__aeabi_f2ulz>
1a0146f2:	b508      	push	{r3, lr}
1a0146f4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
1a0146f8:	f000 f804 	bl	1a014704 <__aeabi_f2ulz>
1a0146fc:	4240      	negs	r0, r0
1a0146fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a014702:	bd08      	pop	{r3, pc}

1a014704 <__aeabi_f2ulz>:
1a014704:	b5d0      	push	{r4, r6, r7, lr}
1a014706:	f7ff f923 	bl	1a013950 <__aeabi_f2d>
1a01470a:	2200      	movs	r2, #0
1a01470c:	4b0e      	ldr	r3, [pc, #56]	; (1a014748 <__aeabi_f2ulz+0x44>)
1a01470e:	4606      	mov	r6, r0
1a014710:	460f      	mov	r7, r1
1a014712:	f7ff f971 	bl	1a0139f8 <__aeabi_dmul>
1a014716:	f000 f98f 	bl	1a014a38 <__aeabi_d2uiz>
1a01471a:	4604      	mov	r4, r0
1a01471c:	f7ff f8f6 	bl	1a01390c <__aeabi_ui2d>
1a014720:	2200      	movs	r2, #0
1a014722:	4b0a      	ldr	r3, [pc, #40]	; (1a01474c <__aeabi_f2ulz+0x48>)
1a014724:	f7ff f968 	bl	1a0139f8 <__aeabi_dmul>
1a014728:	4602      	mov	r2, r0
1a01472a:	460b      	mov	r3, r1
1a01472c:	4630      	mov	r0, r6
1a01472e:	4639      	mov	r1, r7
1a014730:	f7fe ffae 	bl	1a013690 <__aeabi_dsub>
1a014734:	f000 f980 	bl	1a014a38 <__aeabi_d2uiz>
1a014738:	4623      	mov	r3, r4
1a01473a:	2200      	movs	r2, #0
1a01473c:	ea42 0200 	orr.w	r2, r2, r0
1a014740:	4610      	mov	r0, r2
1a014742:	4619      	mov	r1, r3
1a014744:	bdd0      	pop	{r4, r6, r7, pc}
1a014746:	bf00      	nop
1a014748:	3df00000 	.word	0x3df00000
1a01474c:	41f00000 	.word	0x41f00000

1a014750 <__udivmoddi4>:
1a014750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a014754:	468c      	mov	ip, r1
1a014756:	460e      	mov	r6, r1
1a014758:	4604      	mov	r4, r0
1a01475a:	9d08      	ldr	r5, [sp, #32]
1a01475c:	2b00      	cmp	r3, #0
1a01475e:	d150      	bne.n	1a014802 <__udivmoddi4+0xb2>
1a014760:	428a      	cmp	r2, r1
1a014762:	4617      	mov	r7, r2
1a014764:	d96c      	bls.n	1a014840 <__udivmoddi4+0xf0>
1a014766:	fab2 fe82 	clz	lr, r2
1a01476a:	f1be 0f00 	cmp.w	lr, #0
1a01476e:	d00b      	beq.n	1a014788 <__udivmoddi4+0x38>
1a014770:	f1ce 0420 	rsb	r4, lr, #32
1a014774:	fa20 f404 	lsr.w	r4, r0, r4
1a014778:	fa01 f60e 	lsl.w	r6, r1, lr
1a01477c:	ea44 0c06 	orr.w	ip, r4, r6
1a014780:	fa02 f70e 	lsl.w	r7, r2, lr
1a014784:	fa00 f40e 	lsl.w	r4, r0, lr
1a014788:	ea4f 4917 	mov.w	r9, r7, lsr #16
1a01478c:	0c22      	lsrs	r2, r4, #16
1a01478e:	fbbc f0f9 	udiv	r0, ip, r9
1a014792:	fa1f f887 	uxth.w	r8, r7
1a014796:	fb09 c610 	mls	r6, r9, r0, ip
1a01479a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
1a01479e:	fb00 f308 	mul.w	r3, r0, r8
1a0147a2:	42b3      	cmp	r3, r6
1a0147a4:	d909      	bls.n	1a0147ba <__udivmoddi4+0x6a>
1a0147a6:	19f6      	adds	r6, r6, r7
1a0147a8:	f100 32ff 	add.w	r2, r0, #4294967295
1a0147ac:	f080 8122 	bcs.w	1a0149f4 <__udivmoddi4+0x2a4>
1a0147b0:	42b3      	cmp	r3, r6
1a0147b2:	f240 811f 	bls.w	1a0149f4 <__udivmoddi4+0x2a4>
1a0147b6:	3802      	subs	r0, #2
1a0147b8:	443e      	add	r6, r7
1a0147ba:	1af6      	subs	r6, r6, r3
1a0147bc:	b2a2      	uxth	r2, r4
1a0147be:	fbb6 f3f9 	udiv	r3, r6, r9
1a0147c2:	fb09 6613 	mls	r6, r9, r3, r6
1a0147c6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
1a0147ca:	fb03 f808 	mul.w	r8, r3, r8
1a0147ce:	45a0      	cmp	r8, r4
1a0147d0:	d909      	bls.n	1a0147e6 <__udivmoddi4+0x96>
1a0147d2:	19e4      	adds	r4, r4, r7
1a0147d4:	f103 32ff 	add.w	r2, r3, #4294967295
1a0147d8:	f080 810a 	bcs.w	1a0149f0 <__udivmoddi4+0x2a0>
1a0147dc:	45a0      	cmp	r8, r4
1a0147de:	f240 8107 	bls.w	1a0149f0 <__udivmoddi4+0x2a0>
1a0147e2:	3b02      	subs	r3, #2
1a0147e4:	443c      	add	r4, r7
1a0147e6:	ebc8 0404 	rsb	r4, r8, r4
1a0147ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a0147ee:	2100      	movs	r1, #0
1a0147f0:	2d00      	cmp	r5, #0
1a0147f2:	d062      	beq.n	1a0148ba <__udivmoddi4+0x16a>
1a0147f4:	fa24 f40e 	lsr.w	r4, r4, lr
1a0147f8:	2300      	movs	r3, #0
1a0147fa:	602c      	str	r4, [r5, #0]
1a0147fc:	606b      	str	r3, [r5, #4]
1a0147fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a014802:	428b      	cmp	r3, r1
1a014804:	d907      	bls.n	1a014816 <__udivmoddi4+0xc6>
1a014806:	2d00      	cmp	r5, #0
1a014808:	d055      	beq.n	1a0148b6 <__udivmoddi4+0x166>
1a01480a:	2100      	movs	r1, #0
1a01480c:	e885 0041 	stmia.w	r5, {r0, r6}
1a014810:	4608      	mov	r0, r1
1a014812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a014816:	fab3 f183 	clz	r1, r3
1a01481a:	2900      	cmp	r1, #0
1a01481c:	f040 8090 	bne.w	1a014940 <__udivmoddi4+0x1f0>
1a014820:	42b3      	cmp	r3, r6
1a014822:	d302      	bcc.n	1a01482a <__udivmoddi4+0xda>
1a014824:	4282      	cmp	r2, r0
1a014826:	f200 80f8 	bhi.w	1a014a1a <__udivmoddi4+0x2ca>
1a01482a:	1a84      	subs	r4, r0, r2
1a01482c:	eb66 0603 	sbc.w	r6, r6, r3
1a014830:	2001      	movs	r0, #1
1a014832:	46b4      	mov	ip, r6
1a014834:	2d00      	cmp	r5, #0
1a014836:	d040      	beq.n	1a0148ba <__udivmoddi4+0x16a>
1a014838:	e885 1010 	stmia.w	r5, {r4, ip}
1a01483c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a014840:	b912      	cbnz	r2, 1a014848 <__udivmoddi4+0xf8>
1a014842:	2701      	movs	r7, #1
1a014844:	fbb7 f7f2 	udiv	r7, r7, r2
1a014848:	fab7 fe87 	clz	lr, r7
1a01484c:	f1be 0f00 	cmp.w	lr, #0
1a014850:	d135      	bne.n	1a0148be <__udivmoddi4+0x16e>
1a014852:	1bf3      	subs	r3, r6, r7
1a014854:	ea4f 4817 	mov.w	r8, r7, lsr #16
1a014858:	fa1f fc87 	uxth.w	ip, r7
1a01485c:	2101      	movs	r1, #1
1a01485e:	fbb3 f0f8 	udiv	r0, r3, r8
1a014862:	0c22      	lsrs	r2, r4, #16
1a014864:	fb08 3610 	mls	r6, r8, r0, r3
1a014868:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
1a01486c:	fb0c f300 	mul.w	r3, ip, r0
1a014870:	42b3      	cmp	r3, r6
1a014872:	d907      	bls.n	1a014884 <__udivmoddi4+0x134>
1a014874:	19f6      	adds	r6, r6, r7
1a014876:	f100 32ff 	add.w	r2, r0, #4294967295
1a01487a:	d202      	bcs.n	1a014882 <__udivmoddi4+0x132>
1a01487c:	42b3      	cmp	r3, r6
1a01487e:	f200 80ce 	bhi.w	1a014a1e <__udivmoddi4+0x2ce>
1a014882:	4610      	mov	r0, r2
1a014884:	1af6      	subs	r6, r6, r3
1a014886:	b2a2      	uxth	r2, r4
1a014888:	fbb6 f3f8 	udiv	r3, r6, r8
1a01488c:	fb08 6613 	mls	r6, r8, r3, r6
1a014890:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
1a014894:	fb0c fc03 	mul.w	ip, ip, r3
1a014898:	45a4      	cmp	ip, r4
1a01489a:	d907      	bls.n	1a0148ac <__udivmoddi4+0x15c>
1a01489c:	19e4      	adds	r4, r4, r7
1a01489e:	f103 32ff 	add.w	r2, r3, #4294967295
1a0148a2:	d202      	bcs.n	1a0148aa <__udivmoddi4+0x15a>
1a0148a4:	45a4      	cmp	ip, r4
1a0148a6:	f200 80b5 	bhi.w	1a014a14 <__udivmoddi4+0x2c4>
1a0148aa:	4613      	mov	r3, r2
1a0148ac:	ebcc 0404 	rsb	r4, ip, r4
1a0148b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a0148b4:	e79c      	b.n	1a0147f0 <__udivmoddi4+0xa0>
1a0148b6:	4629      	mov	r1, r5
1a0148b8:	4628      	mov	r0, r5
1a0148ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0148be:	f1ce 0120 	rsb	r1, lr, #32
1a0148c2:	fa06 f30e 	lsl.w	r3, r6, lr
1a0148c6:	fa07 f70e 	lsl.w	r7, r7, lr
1a0148ca:	fa20 f901 	lsr.w	r9, r0, r1
1a0148ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
1a0148d2:	40ce      	lsrs	r6, r1
1a0148d4:	ea49 0903 	orr.w	r9, r9, r3
1a0148d8:	fbb6 faf8 	udiv	sl, r6, r8
1a0148dc:	ea4f 4419 	mov.w	r4, r9, lsr #16
1a0148e0:	fb08 661a 	mls	r6, r8, sl, r6
1a0148e4:	fa1f fc87 	uxth.w	ip, r7
1a0148e8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
1a0148ec:	fb0a f20c 	mul.w	r2, sl, ip
1a0148f0:	429a      	cmp	r2, r3
1a0148f2:	fa00 f40e 	lsl.w	r4, r0, lr
1a0148f6:	d90a      	bls.n	1a01490e <__udivmoddi4+0x1be>
1a0148f8:	19db      	adds	r3, r3, r7
1a0148fa:	f10a 31ff 	add.w	r1, sl, #4294967295
1a0148fe:	f080 8087 	bcs.w	1a014a10 <__udivmoddi4+0x2c0>
1a014902:	429a      	cmp	r2, r3
1a014904:	f240 8084 	bls.w	1a014a10 <__udivmoddi4+0x2c0>
1a014908:	f1aa 0a02 	sub.w	sl, sl, #2
1a01490c:	443b      	add	r3, r7
1a01490e:	1a9b      	subs	r3, r3, r2
1a014910:	fa1f f989 	uxth.w	r9, r9
1a014914:	fbb3 f1f8 	udiv	r1, r3, r8
1a014918:	fb08 3311 	mls	r3, r8, r1, r3
1a01491c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
1a014920:	fb01 f60c 	mul.w	r6, r1, ip
1a014924:	429e      	cmp	r6, r3
1a014926:	d907      	bls.n	1a014938 <__udivmoddi4+0x1e8>
1a014928:	19db      	adds	r3, r3, r7
1a01492a:	f101 32ff 	add.w	r2, r1, #4294967295
1a01492e:	d26b      	bcs.n	1a014a08 <__udivmoddi4+0x2b8>
1a014930:	429e      	cmp	r6, r3
1a014932:	d969      	bls.n	1a014a08 <__udivmoddi4+0x2b8>
1a014934:	3902      	subs	r1, #2
1a014936:	443b      	add	r3, r7
1a014938:	1b9b      	subs	r3, r3, r6
1a01493a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
1a01493e:	e78e      	b.n	1a01485e <__udivmoddi4+0x10e>
1a014940:	f1c1 0e20 	rsb	lr, r1, #32
1a014944:	fa22 f40e 	lsr.w	r4, r2, lr
1a014948:	408b      	lsls	r3, r1
1a01494a:	4323      	orrs	r3, r4
1a01494c:	fa20 f70e 	lsr.w	r7, r0, lr
1a014950:	fa06 f401 	lsl.w	r4, r6, r1
1a014954:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a014958:	fa26 f60e 	lsr.w	r6, r6, lr
1a01495c:	433c      	orrs	r4, r7
1a01495e:	fbb6 f9fc 	udiv	r9, r6, ip
1a014962:	0c27      	lsrs	r7, r4, #16
1a014964:	fb0c 6619 	mls	r6, ip, r9, r6
1a014968:	fa1f f883 	uxth.w	r8, r3
1a01496c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
1a014970:	fb09 f708 	mul.w	r7, r9, r8
1a014974:	42b7      	cmp	r7, r6
1a014976:	fa02 f201 	lsl.w	r2, r2, r1
1a01497a:	fa00 fa01 	lsl.w	sl, r0, r1
1a01497e:	d908      	bls.n	1a014992 <__udivmoddi4+0x242>
1a014980:	18f6      	adds	r6, r6, r3
1a014982:	f109 30ff 	add.w	r0, r9, #4294967295
1a014986:	d241      	bcs.n	1a014a0c <__udivmoddi4+0x2bc>
1a014988:	42b7      	cmp	r7, r6
1a01498a:	d93f      	bls.n	1a014a0c <__udivmoddi4+0x2bc>
1a01498c:	f1a9 0902 	sub.w	r9, r9, #2
1a014990:	441e      	add	r6, r3
1a014992:	1bf6      	subs	r6, r6, r7
1a014994:	b2a0      	uxth	r0, r4
1a014996:	fbb6 f4fc 	udiv	r4, r6, ip
1a01499a:	fb0c 6614 	mls	r6, ip, r4, r6
1a01499e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
1a0149a2:	fb04 f808 	mul.w	r8, r4, r8
1a0149a6:	45b8      	cmp	r8, r7
1a0149a8:	d907      	bls.n	1a0149ba <__udivmoddi4+0x26a>
1a0149aa:	18ff      	adds	r7, r7, r3
1a0149ac:	f104 30ff 	add.w	r0, r4, #4294967295
1a0149b0:	d228      	bcs.n	1a014a04 <__udivmoddi4+0x2b4>
1a0149b2:	45b8      	cmp	r8, r7
1a0149b4:	d926      	bls.n	1a014a04 <__udivmoddi4+0x2b4>
1a0149b6:	3c02      	subs	r4, #2
1a0149b8:	441f      	add	r7, r3
1a0149ba:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
1a0149be:	ebc8 0707 	rsb	r7, r8, r7
1a0149c2:	fba0 8902 	umull	r8, r9, r0, r2
1a0149c6:	454f      	cmp	r7, r9
1a0149c8:	4644      	mov	r4, r8
1a0149ca:	464e      	mov	r6, r9
1a0149cc:	d314      	bcc.n	1a0149f8 <__udivmoddi4+0x2a8>
1a0149ce:	d029      	beq.n	1a014a24 <__udivmoddi4+0x2d4>
1a0149d0:	b365      	cbz	r5, 1a014a2c <__udivmoddi4+0x2dc>
1a0149d2:	ebba 0304 	subs.w	r3, sl, r4
1a0149d6:	eb67 0706 	sbc.w	r7, r7, r6
1a0149da:	fa07 fe0e 	lsl.w	lr, r7, lr
1a0149de:	40cb      	lsrs	r3, r1
1a0149e0:	40cf      	lsrs	r7, r1
1a0149e2:	ea4e 0303 	orr.w	r3, lr, r3
1a0149e6:	e885 0088 	stmia.w	r5, {r3, r7}
1a0149ea:	2100      	movs	r1, #0
1a0149ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0149f0:	4613      	mov	r3, r2
1a0149f2:	e6f8      	b.n	1a0147e6 <__udivmoddi4+0x96>
1a0149f4:	4610      	mov	r0, r2
1a0149f6:	e6e0      	b.n	1a0147ba <__udivmoddi4+0x6a>
1a0149f8:	ebb8 0402 	subs.w	r4, r8, r2
1a0149fc:	eb69 0603 	sbc.w	r6, r9, r3
1a014a00:	3801      	subs	r0, #1
1a014a02:	e7e5      	b.n	1a0149d0 <__udivmoddi4+0x280>
1a014a04:	4604      	mov	r4, r0
1a014a06:	e7d8      	b.n	1a0149ba <__udivmoddi4+0x26a>
1a014a08:	4611      	mov	r1, r2
1a014a0a:	e795      	b.n	1a014938 <__udivmoddi4+0x1e8>
1a014a0c:	4681      	mov	r9, r0
1a014a0e:	e7c0      	b.n	1a014992 <__udivmoddi4+0x242>
1a014a10:	468a      	mov	sl, r1
1a014a12:	e77c      	b.n	1a01490e <__udivmoddi4+0x1be>
1a014a14:	3b02      	subs	r3, #2
1a014a16:	443c      	add	r4, r7
1a014a18:	e748      	b.n	1a0148ac <__udivmoddi4+0x15c>
1a014a1a:	4608      	mov	r0, r1
1a014a1c:	e70a      	b.n	1a014834 <__udivmoddi4+0xe4>
1a014a1e:	3802      	subs	r0, #2
1a014a20:	443e      	add	r6, r7
1a014a22:	e72f      	b.n	1a014884 <__udivmoddi4+0x134>
1a014a24:	45c2      	cmp	sl, r8
1a014a26:	d3e7      	bcc.n	1a0149f8 <__udivmoddi4+0x2a8>
1a014a28:	463e      	mov	r6, r7
1a014a2a:	e7d1      	b.n	1a0149d0 <__udivmoddi4+0x280>
1a014a2c:	4629      	mov	r1, r5
1a014a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a014a32:	bf00      	nop

1a014a34 <__aeabi_idiv0>:
1a014a34:	4770      	bx	lr
1a014a36:	bf00      	nop

1a014a38 <__aeabi_d2uiz>:
1a014a38:	004a      	lsls	r2, r1, #1
1a014a3a:	d211      	bcs.n	1a014a60 <__aeabi_d2uiz+0x28>
1a014a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a014a40:	d211      	bcs.n	1a014a66 <__aeabi_d2uiz+0x2e>
1a014a42:	d50d      	bpl.n	1a014a60 <__aeabi_d2uiz+0x28>
1a014a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a014a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a014a4c:	d40e      	bmi.n	1a014a6c <__aeabi_d2uiz+0x34>
1a014a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a014a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a014a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a014a5a:	fa23 f002 	lsr.w	r0, r3, r2
1a014a5e:	4770      	bx	lr
1a014a60:	f04f 0000 	mov.w	r0, #0
1a014a64:	4770      	bx	lr
1a014a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a014a6a:	d102      	bne.n	1a014a72 <__aeabi_d2uiz+0x3a>
1a014a6c:	f04f 30ff 	mov.w	r0, #4294967295
1a014a70:	4770      	bx	lr
1a014a72:	f04f 0000 	mov.w	r0, #0
1a014a76:	4770      	bx	lr

1a014a78 <memcmp>:
1a014a78:	2a03      	cmp	r2, #3
1a014a7a:	b470      	push	{r4, r5, r6}
1a014a7c:	d926      	bls.n	1a014acc <memcmp+0x54>
1a014a7e:	ea40 0301 	orr.w	r3, r0, r1
1a014a82:	079b      	lsls	r3, r3, #30
1a014a84:	d011      	beq.n	1a014aaa <memcmp+0x32>
1a014a86:	7804      	ldrb	r4, [r0, #0]
1a014a88:	780d      	ldrb	r5, [r1, #0]
1a014a8a:	42ac      	cmp	r4, r5
1a014a8c:	d122      	bne.n	1a014ad4 <memcmp+0x5c>
1a014a8e:	4402      	add	r2, r0
1a014a90:	1c43      	adds	r3, r0, #1
1a014a92:	e005      	b.n	1a014aa0 <memcmp+0x28>
1a014a94:	f813 4b01 	ldrb.w	r4, [r3], #1
1a014a98:	f811 5f01 	ldrb.w	r5, [r1, #1]!
1a014a9c:	42ac      	cmp	r4, r5
1a014a9e:	d119      	bne.n	1a014ad4 <memcmp+0x5c>
1a014aa0:	4293      	cmp	r3, r2
1a014aa2:	d1f7      	bne.n	1a014a94 <memcmp+0x1c>
1a014aa4:	2000      	movs	r0, #0
1a014aa6:	bc70      	pop	{r4, r5, r6}
1a014aa8:	4770      	bx	lr
1a014aaa:	460c      	mov	r4, r1
1a014aac:	4603      	mov	r3, r0
1a014aae:	681e      	ldr	r6, [r3, #0]
1a014ab0:	6825      	ldr	r5, [r4, #0]
1a014ab2:	42ae      	cmp	r6, r5
1a014ab4:	4618      	mov	r0, r3
1a014ab6:	4621      	mov	r1, r4
1a014ab8:	f103 0304 	add.w	r3, r3, #4
1a014abc:	f104 0404 	add.w	r4, r4, #4
1a014ac0:	d1e1      	bne.n	1a014a86 <memcmp+0xe>
1a014ac2:	3a04      	subs	r2, #4
1a014ac4:	2a03      	cmp	r2, #3
1a014ac6:	4618      	mov	r0, r3
1a014ac8:	4621      	mov	r1, r4
1a014aca:	d8f0      	bhi.n	1a014aae <memcmp+0x36>
1a014acc:	2a00      	cmp	r2, #0
1a014ace:	d1da      	bne.n	1a014a86 <memcmp+0xe>
1a014ad0:	4610      	mov	r0, r2
1a014ad2:	e7e8      	b.n	1a014aa6 <memcmp+0x2e>
1a014ad4:	1b60      	subs	r0, r4, r5
1a014ad6:	bc70      	pop	{r4, r5, r6}
1a014ad8:	4770      	bx	lr
1a014ada:	bf00      	nop

1a014adc <memcpy>:
1a014adc:	4684      	mov	ip, r0
1a014ade:	ea41 0300 	orr.w	r3, r1, r0
1a014ae2:	f013 0303 	ands.w	r3, r3, #3
1a014ae6:	d16d      	bne.n	1a014bc4 <memcpy+0xe8>
1a014ae8:	3a40      	subs	r2, #64	; 0x40
1a014aea:	d341      	bcc.n	1a014b70 <memcpy+0x94>
1a014aec:	f851 3b04 	ldr.w	r3, [r1], #4
1a014af0:	f840 3b04 	str.w	r3, [r0], #4
1a014af4:	f851 3b04 	ldr.w	r3, [r1], #4
1a014af8:	f840 3b04 	str.w	r3, [r0], #4
1a014afc:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b00:	f840 3b04 	str.w	r3, [r0], #4
1a014b04:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b08:	f840 3b04 	str.w	r3, [r0], #4
1a014b0c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b10:	f840 3b04 	str.w	r3, [r0], #4
1a014b14:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b18:	f840 3b04 	str.w	r3, [r0], #4
1a014b1c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b20:	f840 3b04 	str.w	r3, [r0], #4
1a014b24:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b28:	f840 3b04 	str.w	r3, [r0], #4
1a014b2c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b30:	f840 3b04 	str.w	r3, [r0], #4
1a014b34:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b38:	f840 3b04 	str.w	r3, [r0], #4
1a014b3c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b40:	f840 3b04 	str.w	r3, [r0], #4
1a014b44:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b48:	f840 3b04 	str.w	r3, [r0], #4
1a014b4c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b50:	f840 3b04 	str.w	r3, [r0], #4
1a014b54:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b58:	f840 3b04 	str.w	r3, [r0], #4
1a014b5c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b60:	f840 3b04 	str.w	r3, [r0], #4
1a014b64:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b68:	f840 3b04 	str.w	r3, [r0], #4
1a014b6c:	3a40      	subs	r2, #64	; 0x40
1a014b6e:	d2bd      	bcs.n	1a014aec <memcpy+0x10>
1a014b70:	3230      	adds	r2, #48	; 0x30
1a014b72:	d311      	bcc.n	1a014b98 <memcpy+0xbc>
1a014b74:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b78:	f840 3b04 	str.w	r3, [r0], #4
1a014b7c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b80:	f840 3b04 	str.w	r3, [r0], #4
1a014b84:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b88:	f840 3b04 	str.w	r3, [r0], #4
1a014b8c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014b90:	f840 3b04 	str.w	r3, [r0], #4
1a014b94:	3a10      	subs	r2, #16
1a014b96:	d2ed      	bcs.n	1a014b74 <memcpy+0x98>
1a014b98:	320c      	adds	r2, #12
1a014b9a:	d305      	bcc.n	1a014ba8 <memcpy+0xcc>
1a014b9c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014ba0:	f840 3b04 	str.w	r3, [r0], #4
1a014ba4:	3a04      	subs	r2, #4
1a014ba6:	d2f9      	bcs.n	1a014b9c <memcpy+0xc0>
1a014ba8:	3204      	adds	r2, #4
1a014baa:	d008      	beq.n	1a014bbe <memcpy+0xe2>
1a014bac:	07d2      	lsls	r2, r2, #31
1a014bae:	bf1c      	itt	ne
1a014bb0:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a014bb4:	f800 3b01 	strbne.w	r3, [r0], #1
1a014bb8:	d301      	bcc.n	1a014bbe <memcpy+0xe2>
1a014bba:	880b      	ldrh	r3, [r1, #0]
1a014bbc:	8003      	strh	r3, [r0, #0]
1a014bbe:	4660      	mov	r0, ip
1a014bc0:	4770      	bx	lr
1a014bc2:	bf00      	nop
1a014bc4:	2a08      	cmp	r2, #8
1a014bc6:	d313      	bcc.n	1a014bf0 <memcpy+0x114>
1a014bc8:	078b      	lsls	r3, r1, #30
1a014bca:	d08d      	beq.n	1a014ae8 <memcpy+0xc>
1a014bcc:	f010 0303 	ands.w	r3, r0, #3
1a014bd0:	d08a      	beq.n	1a014ae8 <memcpy+0xc>
1a014bd2:	f1c3 0304 	rsb	r3, r3, #4
1a014bd6:	1ad2      	subs	r2, r2, r3
1a014bd8:	07db      	lsls	r3, r3, #31
1a014bda:	bf1c      	itt	ne
1a014bdc:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a014be0:	f800 3b01 	strbne.w	r3, [r0], #1
1a014be4:	d380      	bcc.n	1a014ae8 <memcpy+0xc>
1a014be6:	f831 3b02 	ldrh.w	r3, [r1], #2
1a014bea:	f820 3b02 	strh.w	r3, [r0], #2
1a014bee:	e77b      	b.n	1a014ae8 <memcpy+0xc>
1a014bf0:	3a04      	subs	r2, #4
1a014bf2:	d3d9      	bcc.n	1a014ba8 <memcpy+0xcc>
1a014bf4:	3a01      	subs	r2, #1
1a014bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
1a014bfa:	f800 3b01 	strb.w	r3, [r0], #1
1a014bfe:	d2f9      	bcs.n	1a014bf4 <memcpy+0x118>
1a014c00:	780b      	ldrb	r3, [r1, #0]
1a014c02:	7003      	strb	r3, [r0, #0]
1a014c04:	784b      	ldrb	r3, [r1, #1]
1a014c06:	7043      	strb	r3, [r0, #1]
1a014c08:	788b      	ldrb	r3, [r1, #2]
1a014c0a:	7083      	strb	r3, [r0, #2]
1a014c0c:	4660      	mov	r0, ip
1a014c0e:	4770      	bx	lr

1a014c10 <memmove>:
1a014c10:	4288      	cmp	r0, r1
1a014c12:	b5f0      	push	{r4, r5, r6, r7, lr}
1a014c14:	d90d      	bls.n	1a014c32 <memmove+0x22>
1a014c16:	188b      	adds	r3, r1, r2
1a014c18:	4298      	cmp	r0, r3
1a014c1a:	d20a      	bcs.n	1a014c32 <memmove+0x22>
1a014c1c:	1881      	adds	r1, r0, r2
1a014c1e:	2a00      	cmp	r2, #0
1a014c20:	d051      	beq.n	1a014cc6 <memmove+0xb6>
1a014c22:	1a9a      	subs	r2, r3, r2
1a014c24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a014c28:	f801 4d01 	strb.w	r4, [r1, #-1]!
1a014c2c:	4293      	cmp	r3, r2
1a014c2e:	d1f9      	bne.n	1a014c24 <memmove+0x14>
1a014c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a014c32:	2a0f      	cmp	r2, #15
1a014c34:	d948      	bls.n	1a014cc8 <memmove+0xb8>
1a014c36:	ea41 0300 	orr.w	r3, r1, r0
1a014c3a:	079b      	lsls	r3, r3, #30
1a014c3c:	d146      	bne.n	1a014ccc <memmove+0xbc>
1a014c3e:	f100 0410 	add.w	r4, r0, #16
1a014c42:	f101 0310 	add.w	r3, r1, #16
1a014c46:	4615      	mov	r5, r2
1a014c48:	f853 6c10 	ldr.w	r6, [r3, #-16]
1a014c4c:	f844 6c10 	str.w	r6, [r4, #-16]
1a014c50:	f853 6c0c 	ldr.w	r6, [r3, #-12]
1a014c54:	f844 6c0c 	str.w	r6, [r4, #-12]
1a014c58:	f853 6c08 	ldr.w	r6, [r3, #-8]
1a014c5c:	f844 6c08 	str.w	r6, [r4, #-8]
1a014c60:	3d10      	subs	r5, #16
1a014c62:	f853 6c04 	ldr.w	r6, [r3, #-4]
1a014c66:	f844 6c04 	str.w	r6, [r4, #-4]
1a014c6a:	2d0f      	cmp	r5, #15
1a014c6c:	f103 0310 	add.w	r3, r3, #16
1a014c70:	f104 0410 	add.w	r4, r4, #16
1a014c74:	d8e8      	bhi.n	1a014c48 <memmove+0x38>
1a014c76:	f1a2 0310 	sub.w	r3, r2, #16
1a014c7a:	f023 030f 	bic.w	r3, r3, #15
1a014c7e:	f002 0e0f 	and.w	lr, r2, #15
1a014c82:	3310      	adds	r3, #16
1a014c84:	f1be 0f03 	cmp.w	lr, #3
1a014c88:	4419      	add	r1, r3
1a014c8a:	4403      	add	r3, r0
1a014c8c:	d921      	bls.n	1a014cd2 <memmove+0xc2>
1a014c8e:	1f1e      	subs	r6, r3, #4
1a014c90:	460d      	mov	r5, r1
1a014c92:	4674      	mov	r4, lr
1a014c94:	3c04      	subs	r4, #4
1a014c96:	f855 7b04 	ldr.w	r7, [r5], #4
1a014c9a:	f846 7f04 	str.w	r7, [r6, #4]!
1a014c9e:	2c03      	cmp	r4, #3
1a014ca0:	d8f8      	bhi.n	1a014c94 <memmove+0x84>
1a014ca2:	f1ae 0404 	sub.w	r4, lr, #4
1a014ca6:	f024 0403 	bic.w	r4, r4, #3
1a014caa:	3404      	adds	r4, #4
1a014cac:	4423      	add	r3, r4
1a014cae:	4421      	add	r1, r4
1a014cb0:	f002 0203 	and.w	r2, r2, #3
1a014cb4:	b162      	cbz	r2, 1a014cd0 <memmove+0xc0>
1a014cb6:	3b01      	subs	r3, #1
1a014cb8:	440a      	add	r2, r1
1a014cba:	f811 4b01 	ldrb.w	r4, [r1], #1
1a014cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
1a014cc2:	428a      	cmp	r2, r1
1a014cc4:	d1f9      	bne.n	1a014cba <memmove+0xaa>
1a014cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a014cc8:	4603      	mov	r3, r0
1a014cca:	e7f3      	b.n	1a014cb4 <memmove+0xa4>
1a014ccc:	4603      	mov	r3, r0
1a014cce:	e7f2      	b.n	1a014cb6 <memmove+0xa6>
1a014cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a014cd2:	4672      	mov	r2, lr
1a014cd4:	e7ee      	b.n	1a014cb4 <memmove+0xa4>
1a014cd6:	bf00      	nop

1a014cd8 <memset>:
1a014cd8:	b470      	push	{r4, r5, r6}
1a014cda:	0784      	lsls	r4, r0, #30
1a014cdc:	d046      	beq.n	1a014d6c <memset+0x94>
1a014cde:	1e54      	subs	r4, r2, #1
1a014ce0:	2a00      	cmp	r2, #0
1a014ce2:	d041      	beq.n	1a014d68 <memset+0x90>
1a014ce4:	b2cd      	uxtb	r5, r1
1a014ce6:	4603      	mov	r3, r0
1a014ce8:	e002      	b.n	1a014cf0 <memset+0x18>
1a014cea:	1e62      	subs	r2, r4, #1
1a014cec:	b3e4      	cbz	r4, 1a014d68 <memset+0x90>
1a014cee:	4614      	mov	r4, r2
1a014cf0:	f803 5b01 	strb.w	r5, [r3], #1
1a014cf4:	079a      	lsls	r2, r3, #30
1a014cf6:	d1f8      	bne.n	1a014cea <memset+0x12>
1a014cf8:	2c03      	cmp	r4, #3
1a014cfa:	d92e      	bls.n	1a014d5a <memset+0x82>
1a014cfc:	b2cd      	uxtb	r5, r1
1a014cfe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a014d02:	2c0f      	cmp	r4, #15
1a014d04:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a014d08:	d919      	bls.n	1a014d3e <memset+0x66>
1a014d0a:	f103 0210 	add.w	r2, r3, #16
1a014d0e:	4626      	mov	r6, r4
1a014d10:	3e10      	subs	r6, #16
1a014d12:	2e0f      	cmp	r6, #15
1a014d14:	f842 5c10 	str.w	r5, [r2, #-16]
1a014d18:	f842 5c0c 	str.w	r5, [r2, #-12]
1a014d1c:	f842 5c08 	str.w	r5, [r2, #-8]
1a014d20:	f842 5c04 	str.w	r5, [r2, #-4]
1a014d24:	f102 0210 	add.w	r2, r2, #16
1a014d28:	d8f2      	bhi.n	1a014d10 <memset+0x38>
1a014d2a:	f1a4 0210 	sub.w	r2, r4, #16
1a014d2e:	f022 020f 	bic.w	r2, r2, #15
1a014d32:	f004 040f 	and.w	r4, r4, #15
1a014d36:	3210      	adds	r2, #16
1a014d38:	2c03      	cmp	r4, #3
1a014d3a:	4413      	add	r3, r2
1a014d3c:	d90d      	bls.n	1a014d5a <memset+0x82>
1a014d3e:	461e      	mov	r6, r3
1a014d40:	4622      	mov	r2, r4
1a014d42:	3a04      	subs	r2, #4
1a014d44:	2a03      	cmp	r2, #3
1a014d46:	f846 5b04 	str.w	r5, [r6], #4
1a014d4a:	d8fa      	bhi.n	1a014d42 <memset+0x6a>
1a014d4c:	1f22      	subs	r2, r4, #4
1a014d4e:	f022 0203 	bic.w	r2, r2, #3
1a014d52:	3204      	adds	r2, #4
1a014d54:	4413      	add	r3, r2
1a014d56:	f004 0403 	and.w	r4, r4, #3
1a014d5a:	b12c      	cbz	r4, 1a014d68 <memset+0x90>
1a014d5c:	b2c9      	uxtb	r1, r1
1a014d5e:	441c      	add	r4, r3
1a014d60:	f803 1b01 	strb.w	r1, [r3], #1
1a014d64:	42a3      	cmp	r3, r4
1a014d66:	d1fb      	bne.n	1a014d60 <memset+0x88>
1a014d68:	bc70      	pop	{r4, r5, r6}
1a014d6a:	4770      	bx	lr
1a014d6c:	4614      	mov	r4, r2
1a014d6e:	4603      	mov	r3, r0
1a014d70:	e7c2      	b.n	1a014cf8 <memset+0x20>
1a014d72:	bf00      	nop

1a014d74 <__fpclassifyd>:
1a014d74:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
1a014d78:	b410      	push	{r4}
1a014d7a:	460b      	mov	r3, r1
1a014d7c:	d008      	beq.n	1a014d90 <__fpclassifyd+0x1c>
1a014d7e:	4911      	ldr	r1, [pc, #68]	; (1a014dc4 <__fpclassifyd+0x50>)
1a014d80:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
1a014d84:	428c      	cmp	r4, r1
1a014d86:	d808      	bhi.n	1a014d9a <__fpclassifyd+0x26>
1a014d88:	2004      	movs	r0, #4
1a014d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a014d8e:	4770      	bx	lr
1a014d90:	b918      	cbnz	r0, 1a014d9a <__fpclassifyd+0x26>
1a014d92:	2002      	movs	r0, #2
1a014d94:	f85d 4b04 	ldr.w	r4, [sp], #4
1a014d98:	4770      	bx	lr
1a014d9a:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
1a014d9e:	4909      	ldr	r1, [pc, #36]	; (1a014dc4 <__fpclassifyd+0x50>)
1a014da0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
1a014da4:	428b      	cmp	r3, r1
1a014da6:	d9ef      	bls.n	1a014d88 <__fpclassifyd+0x14>
1a014da8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
1a014dac:	d201      	bcs.n	1a014db2 <__fpclassifyd+0x3e>
1a014dae:	2003      	movs	r0, #3
1a014db0:	e7eb      	b.n	1a014d8a <__fpclassifyd+0x16>
1a014db2:	4b05      	ldr	r3, [pc, #20]	; (1a014dc8 <__fpclassifyd+0x54>)
1a014db4:	429a      	cmp	r2, r3
1a014db6:	d001      	beq.n	1a014dbc <__fpclassifyd+0x48>
1a014db8:	2000      	movs	r0, #0
1a014dba:	e7e6      	b.n	1a014d8a <__fpclassifyd+0x16>
1a014dbc:	fab0 f080 	clz	r0, r0
1a014dc0:	0940      	lsrs	r0, r0, #5
1a014dc2:	e7e2      	b.n	1a014d8a <__fpclassifyd+0x16>
1a014dc4:	7fdfffff 	.word	0x7fdfffff
1a014dc8:	7ff00000 	.word	0x7ff00000

1a014dcc <__fpclassifyf>:
1a014dcc:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
1a014dd0:	d101      	bne.n	1a014dd6 <__fpclassifyf+0xa>
1a014dd2:	2002      	movs	r0, #2
1a014dd4:	4770      	bx	lr
1a014dd6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
1a014dda:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
1a014dde:	d201      	bcs.n	1a014de4 <__fpclassifyf+0x18>
1a014de0:	2004      	movs	r0, #4
1a014de2:	4770      	bx	lr
1a014de4:	4b05      	ldr	r3, [pc, #20]	; (1a014dfc <__fpclassifyf+0x30>)
1a014de6:	1e42      	subs	r2, r0, #1
1a014de8:	429a      	cmp	r2, r3
1a014dea:	d801      	bhi.n	1a014df0 <__fpclassifyf+0x24>
1a014dec:	2003      	movs	r0, #3
1a014dee:	4770      	bx	lr
1a014df0:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
1a014df4:	fab0 f080 	clz	r0, r0
1a014df8:	0940      	lsrs	r0, r0, #5
1a014dfa:	4770      	bx	lr
1a014dfc:	007ffffe 	.word	0x007ffffe

1a014e00 <atan>:
1a014e00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a014e04:	4bc4      	ldr	r3, [pc, #784]	; (1a015118 <atan+0x318>)
1a014e06:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
1a014e0a:	429e      	cmp	r6, r3
1a014e0c:	4604      	mov	r4, r0
1a014e0e:	460d      	mov	r5, r1
1a014e10:	468b      	mov	fp, r1
1a014e12:	dd0e      	ble.n	1a014e32 <atan+0x32>
1a014e14:	4bc1      	ldr	r3, [pc, #772]	; (1a01511c <atan+0x31c>)
1a014e16:	429e      	cmp	r6, r3
1a014e18:	f300 80ac 	bgt.w	1a014f74 <atan+0x174>
1a014e1c:	f000 80a7 	beq.w	1a014f6e <atan+0x16e>
1a014e20:	f1bb 0f00 	cmp.w	fp, #0
1a014e24:	f340 80e9 	ble.w	1a014ffa <atan+0x1fa>
1a014e28:	a19f      	add	r1, pc, #636	; (adr r1, 1a0150a8 <atan+0x2a8>)
1a014e2a:	e9d1 0100 	ldrd	r0, r1, [r1]
1a014e2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a014e32:	4bbb      	ldr	r3, [pc, #748]	; (1a015120 <atan+0x320>)
1a014e34:	429e      	cmp	r6, r3
1a014e36:	f300 80b5 	bgt.w	1a014fa4 <atan+0x1a4>
1a014e3a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
1a014e3e:	429e      	cmp	r6, r3
1a014e40:	f340 80a0 	ble.w	1a014f84 <atan+0x184>
1a014e44:	f04f 3aff 	mov.w	sl, #4294967295
1a014e48:	4622      	mov	r2, r4
1a014e4a:	462b      	mov	r3, r5
1a014e4c:	4620      	mov	r0, r4
1a014e4e:	4629      	mov	r1, r5
1a014e50:	f7fe fdd2 	bl	1a0139f8 <__aeabi_dmul>
1a014e54:	4602      	mov	r2, r0
1a014e56:	460b      	mov	r3, r1
1a014e58:	4680      	mov	r8, r0
1a014e5a:	4689      	mov	r9, r1
1a014e5c:	f7fe fdcc 	bl	1a0139f8 <__aeabi_dmul>
1a014e60:	a393      	add	r3, pc, #588	; (adr r3, 1a0150b0 <atan+0x2b0>)
1a014e62:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014e66:	4606      	mov	r6, r0
1a014e68:	460f      	mov	r7, r1
1a014e6a:	f7fe fdc5 	bl	1a0139f8 <__aeabi_dmul>
1a014e6e:	a392      	add	r3, pc, #584	; (adr r3, 1a0150b8 <atan+0x2b8>)
1a014e70:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014e74:	f7fe fc0e 	bl	1a013694 <__adddf3>
1a014e78:	4632      	mov	r2, r6
1a014e7a:	463b      	mov	r3, r7
1a014e7c:	f7fe fdbc 	bl	1a0139f8 <__aeabi_dmul>
1a014e80:	a38f      	add	r3, pc, #572	; (adr r3, 1a0150c0 <atan+0x2c0>)
1a014e82:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014e86:	f7fe fc05 	bl	1a013694 <__adddf3>
1a014e8a:	4632      	mov	r2, r6
1a014e8c:	463b      	mov	r3, r7
1a014e8e:	f7fe fdb3 	bl	1a0139f8 <__aeabi_dmul>
1a014e92:	a38d      	add	r3, pc, #564	; (adr r3, 1a0150c8 <atan+0x2c8>)
1a014e94:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014e98:	f7fe fbfc 	bl	1a013694 <__adddf3>
1a014e9c:	4632      	mov	r2, r6
1a014e9e:	463b      	mov	r3, r7
1a014ea0:	f7fe fdaa 	bl	1a0139f8 <__aeabi_dmul>
1a014ea4:	a38a      	add	r3, pc, #552	; (adr r3, 1a0150d0 <atan+0x2d0>)
1a014ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014eaa:	f7fe fbf3 	bl	1a013694 <__adddf3>
1a014eae:	4632      	mov	r2, r6
1a014eb0:	463b      	mov	r3, r7
1a014eb2:	f7fe fda1 	bl	1a0139f8 <__aeabi_dmul>
1a014eb6:	a388      	add	r3, pc, #544	; (adr r3, 1a0150d8 <atan+0x2d8>)
1a014eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014ebc:	f7fe fbea 	bl	1a013694 <__adddf3>
1a014ec0:	4642      	mov	r2, r8
1a014ec2:	464b      	mov	r3, r9
1a014ec4:	f7fe fd98 	bl	1a0139f8 <__aeabi_dmul>
1a014ec8:	a385      	add	r3, pc, #532	; (adr r3, 1a0150e0 <atan+0x2e0>)
1a014eca:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014ece:	4680      	mov	r8, r0
1a014ed0:	4689      	mov	r9, r1
1a014ed2:	4630      	mov	r0, r6
1a014ed4:	4639      	mov	r1, r7
1a014ed6:	f7fe fd8f 	bl	1a0139f8 <__aeabi_dmul>
1a014eda:	a383      	add	r3, pc, #524	; (adr r3, 1a0150e8 <atan+0x2e8>)
1a014edc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014ee0:	f7fe fbd6 	bl	1a013690 <__aeabi_dsub>
1a014ee4:	4632      	mov	r2, r6
1a014ee6:	463b      	mov	r3, r7
1a014ee8:	f7fe fd86 	bl	1a0139f8 <__aeabi_dmul>
1a014eec:	a380      	add	r3, pc, #512	; (adr r3, 1a0150f0 <atan+0x2f0>)
1a014eee:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014ef2:	f7fe fbcd 	bl	1a013690 <__aeabi_dsub>
1a014ef6:	4632      	mov	r2, r6
1a014ef8:	463b      	mov	r3, r7
1a014efa:	f7fe fd7d 	bl	1a0139f8 <__aeabi_dmul>
1a014efe:	a37e      	add	r3, pc, #504	; (adr r3, 1a0150f8 <atan+0x2f8>)
1a014f00:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014f04:	f7fe fbc4 	bl	1a013690 <__aeabi_dsub>
1a014f08:	4632      	mov	r2, r6
1a014f0a:	463b      	mov	r3, r7
1a014f0c:	f7fe fd74 	bl	1a0139f8 <__aeabi_dmul>
1a014f10:	a37b      	add	r3, pc, #492	; (adr r3, 1a015100 <atan+0x300>)
1a014f12:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014f16:	f7fe fbbb 	bl	1a013690 <__aeabi_dsub>
1a014f1a:	4632      	mov	r2, r6
1a014f1c:	463b      	mov	r3, r7
1a014f1e:	f7fe fd6b 	bl	1a0139f8 <__aeabi_dmul>
1a014f22:	f1ba 3fff 	cmp.w	sl, #4294967295
1a014f26:	4602      	mov	r2, r0
1a014f28:	460b      	mov	r3, r1
1a014f2a:	d06b      	beq.n	1a015004 <atan+0x204>
1a014f2c:	4640      	mov	r0, r8
1a014f2e:	4649      	mov	r1, r9
1a014f30:	f7fe fbb0 	bl	1a013694 <__adddf3>
1a014f34:	4622      	mov	r2, r4
1a014f36:	462b      	mov	r3, r5
1a014f38:	f7fe fd5e 	bl	1a0139f8 <__aeabi_dmul>
1a014f3c:	4e79      	ldr	r6, [pc, #484]	; (1a015124 <atan+0x324>)
1a014f3e:	4b7a      	ldr	r3, [pc, #488]	; (1a015128 <atan+0x328>)
1a014f40:	ea4f 0aca 	mov.w	sl, sl, lsl #3
1a014f44:	4456      	add	r6, sl
1a014f46:	449a      	add	sl, r3
1a014f48:	e9da 2300 	ldrd	r2, r3, [sl]
1a014f4c:	f7fe fba0 	bl	1a013690 <__aeabi_dsub>
1a014f50:	4622      	mov	r2, r4
1a014f52:	462b      	mov	r3, r5
1a014f54:	f7fe fb9c 	bl	1a013690 <__aeabi_dsub>
1a014f58:	4602      	mov	r2, r0
1a014f5a:	460b      	mov	r3, r1
1a014f5c:	e9d6 0100 	ldrd	r0, r1, [r6]
1a014f60:	f7fe fb96 	bl	1a013690 <__aeabi_dsub>
1a014f64:	f1bb 0f00 	cmp.w	fp, #0
1a014f68:	db43      	blt.n	1a014ff2 <atan+0x1f2>
1a014f6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a014f6e:	2800      	cmp	r0, #0
1a014f70:	f43f af56 	beq.w	1a014e20 <atan+0x20>
1a014f74:	4622      	mov	r2, r4
1a014f76:	462b      	mov	r3, r5
1a014f78:	4620      	mov	r0, r4
1a014f7a:	4629      	mov	r1, r5
1a014f7c:	f7fe fb8a 	bl	1a013694 <__adddf3>
1a014f80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a014f84:	a360      	add	r3, pc, #384	; (adr r3, 1a015108 <atan+0x308>)
1a014f86:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014f8a:	f7fe fb83 	bl	1a013694 <__adddf3>
1a014f8e:	2200      	movs	r2, #0
1a014f90:	4b66      	ldr	r3, [pc, #408]	; (1a01512c <atan+0x32c>)
1a014f92:	f7fe ffc1 	bl	1a013f18 <__aeabi_dcmpgt>
1a014f96:	2800      	cmp	r0, #0
1a014f98:	f43f af54 	beq.w	1a014e44 <atan+0x44>
1a014f9c:	4620      	mov	r0, r4
1a014f9e:	4629      	mov	r1, r5
1a014fa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a014fa4:	f000 f914 	bl	1a0151d0 <fabs>
1a014fa8:	4b61      	ldr	r3, [pc, #388]	; (1a015130 <atan+0x330>)
1a014faa:	429e      	cmp	r6, r3
1a014fac:	4604      	mov	r4, r0
1a014fae:	460d      	mov	r5, r1
1a014fb0:	dc38      	bgt.n	1a015024 <atan+0x224>
1a014fb2:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
1a014fb6:	429e      	cmp	r6, r3
1a014fb8:	dc5d      	bgt.n	1a015076 <atan+0x276>
1a014fba:	4602      	mov	r2, r0
1a014fbc:	460b      	mov	r3, r1
1a014fbe:	f7fe fb69 	bl	1a013694 <__adddf3>
1a014fc2:	2200      	movs	r2, #0
1a014fc4:	4b59      	ldr	r3, [pc, #356]	; (1a01512c <atan+0x32c>)
1a014fc6:	f7fe fb63 	bl	1a013690 <__aeabi_dsub>
1a014fca:	2200      	movs	r2, #0
1a014fcc:	4606      	mov	r6, r0
1a014fce:	460f      	mov	r7, r1
1a014fd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a014fd4:	4620      	mov	r0, r4
1a014fd6:	4629      	mov	r1, r5
1a014fd8:	f7fe fb5c 	bl	1a013694 <__adddf3>
1a014fdc:	4602      	mov	r2, r0
1a014fde:	460b      	mov	r3, r1
1a014fe0:	4630      	mov	r0, r6
1a014fe2:	4639      	mov	r1, r7
1a014fe4:	f7fe fe32 	bl	1a013c4c <__aeabi_ddiv>
1a014fe8:	f04f 0a00 	mov.w	sl, #0
1a014fec:	4604      	mov	r4, r0
1a014fee:	460d      	mov	r5, r1
1a014ff0:	e72a      	b.n	1a014e48 <atan+0x48>
1a014ff2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
1a014ff6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a014ffa:	a145      	add	r1, pc, #276	; (adr r1, 1a015110 <atan+0x310>)
1a014ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015000:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015004:	4640      	mov	r0, r8
1a015006:	4649      	mov	r1, r9
1a015008:	f7fe fb44 	bl	1a013694 <__adddf3>
1a01500c:	4622      	mov	r2, r4
1a01500e:	462b      	mov	r3, r5
1a015010:	f7fe fcf2 	bl	1a0139f8 <__aeabi_dmul>
1a015014:	4602      	mov	r2, r0
1a015016:	460b      	mov	r3, r1
1a015018:	4620      	mov	r0, r4
1a01501a:	4629      	mov	r1, r5
1a01501c:	f7fe fb38 	bl	1a013690 <__aeabi_dsub>
1a015020:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015024:	4b43      	ldr	r3, [pc, #268]	; (1a015134 <atan+0x334>)
1a015026:	429e      	cmp	r6, r3
1a015028:	dc1a      	bgt.n	1a015060 <atan+0x260>
1a01502a:	2200      	movs	r2, #0
1a01502c:	4b42      	ldr	r3, [pc, #264]	; (1a015138 <atan+0x338>)
1a01502e:	f7fe fb2f 	bl	1a013690 <__aeabi_dsub>
1a015032:	2200      	movs	r2, #0
1a015034:	4606      	mov	r6, r0
1a015036:	460f      	mov	r7, r1
1a015038:	4b3f      	ldr	r3, [pc, #252]	; (1a015138 <atan+0x338>)
1a01503a:	4620      	mov	r0, r4
1a01503c:	4629      	mov	r1, r5
1a01503e:	f7fe fcdb 	bl	1a0139f8 <__aeabi_dmul>
1a015042:	2200      	movs	r2, #0
1a015044:	4b39      	ldr	r3, [pc, #228]	; (1a01512c <atan+0x32c>)
1a015046:	f7fe fb25 	bl	1a013694 <__adddf3>
1a01504a:	4602      	mov	r2, r0
1a01504c:	460b      	mov	r3, r1
1a01504e:	4630      	mov	r0, r6
1a015050:	4639      	mov	r1, r7
1a015052:	f7fe fdfb 	bl	1a013c4c <__aeabi_ddiv>
1a015056:	f04f 0a02 	mov.w	sl, #2
1a01505a:	4604      	mov	r4, r0
1a01505c:	460d      	mov	r5, r1
1a01505e:	e6f3      	b.n	1a014e48 <atan+0x48>
1a015060:	4602      	mov	r2, r0
1a015062:	460b      	mov	r3, r1
1a015064:	2000      	movs	r0, #0
1a015066:	4935      	ldr	r1, [pc, #212]	; (1a01513c <atan+0x33c>)
1a015068:	f7fe fdf0 	bl	1a013c4c <__aeabi_ddiv>
1a01506c:	f04f 0a03 	mov.w	sl, #3
1a015070:	4604      	mov	r4, r0
1a015072:	460d      	mov	r5, r1
1a015074:	e6e8      	b.n	1a014e48 <atan+0x48>
1a015076:	2200      	movs	r2, #0
1a015078:	4b2c      	ldr	r3, [pc, #176]	; (1a01512c <atan+0x32c>)
1a01507a:	f7fe fb09 	bl	1a013690 <__aeabi_dsub>
1a01507e:	2200      	movs	r2, #0
1a015080:	4606      	mov	r6, r0
1a015082:	460f      	mov	r7, r1
1a015084:	4b29      	ldr	r3, [pc, #164]	; (1a01512c <atan+0x32c>)
1a015086:	4620      	mov	r0, r4
1a015088:	4629      	mov	r1, r5
1a01508a:	f7fe fb03 	bl	1a013694 <__adddf3>
1a01508e:	4602      	mov	r2, r0
1a015090:	460b      	mov	r3, r1
1a015092:	4630      	mov	r0, r6
1a015094:	4639      	mov	r1, r7
1a015096:	f7fe fdd9 	bl	1a013c4c <__aeabi_ddiv>
1a01509a:	f04f 0a01 	mov.w	sl, #1
1a01509e:	4604      	mov	r4, r0
1a0150a0:	460d      	mov	r5, r1
1a0150a2:	e6d1      	b.n	1a014e48 <atan+0x48>
1a0150a4:	f3af 8000 	nop.w
1a0150a8:	54442d18 	.word	0x54442d18
1a0150ac:	3ff921fb 	.word	0x3ff921fb
1a0150b0:	e322da11 	.word	0xe322da11
1a0150b4:	3f90ad3a 	.word	0x3f90ad3a
1a0150b8:	24760deb 	.word	0x24760deb
1a0150bc:	3fa97b4b 	.word	0x3fa97b4b
1a0150c0:	a0d03d51 	.word	0xa0d03d51
1a0150c4:	3fb10d66 	.word	0x3fb10d66
1a0150c8:	c54c206e 	.word	0xc54c206e
1a0150cc:	3fb745cd 	.word	0x3fb745cd
1a0150d0:	920083ff 	.word	0x920083ff
1a0150d4:	3fc24924 	.word	0x3fc24924
1a0150d8:	5555550d 	.word	0x5555550d
1a0150dc:	3fd55555 	.word	0x3fd55555
1a0150e0:	2c6a6c2f 	.word	0x2c6a6c2f
1a0150e4:	bfa2b444 	.word	0xbfa2b444
1a0150e8:	52defd9a 	.word	0x52defd9a
1a0150ec:	3fadde2d 	.word	0x3fadde2d
1a0150f0:	af749a6d 	.word	0xaf749a6d
1a0150f4:	3fb3b0f2 	.word	0x3fb3b0f2
1a0150f8:	fe231671 	.word	0xfe231671
1a0150fc:	3fbc71c6 	.word	0x3fbc71c6
1a015100:	9998ebc4 	.word	0x9998ebc4
1a015104:	3fc99999 	.word	0x3fc99999
1a015108:	8800759c 	.word	0x8800759c
1a01510c:	7e37e43c 	.word	0x7e37e43c
1a015110:	54442d18 	.word	0x54442d18
1a015114:	bff921fb 	.word	0xbff921fb
1a015118:	440fffff 	.word	0x440fffff
1a01511c:	7ff00000 	.word	0x7ff00000
1a015120:	3fdbffff 	.word	0x3fdbffff
1a015124:	1a01ab80 	.word	0x1a01ab80
1a015128:	1a01ab60 	.word	0x1a01ab60
1a01512c:	3ff00000 	.word	0x3ff00000
1a015130:	3ff2ffff 	.word	0x3ff2ffff
1a015134:	40037fff 	.word	0x40037fff
1a015138:	3ff80000 	.word	0x3ff80000
1a01513c:	bff00000 	.word	0xbff00000

1a015140 <cos>:
1a015140:	b530      	push	{r4, r5, lr}
1a015142:	4a21      	ldr	r2, [pc, #132]	; (1a0151c8 <cos+0x88>)
1a015144:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a015148:	4293      	cmp	r3, r2
1a01514a:	b087      	sub	sp, #28
1a01514c:	dd1b      	ble.n	1a015186 <cos+0x46>
1a01514e:	4a1f      	ldr	r2, [pc, #124]	; (1a0151cc <cos+0x8c>)
1a015150:	4293      	cmp	r3, r2
1a015152:	dd05      	ble.n	1a015160 <cos+0x20>
1a015154:	4602      	mov	r2, r0
1a015156:	460b      	mov	r3, r1
1a015158:	f7fe fa9a 	bl	1a013690 <__aeabi_dsub>
1a01515c:	b007      	add	sp, #28
1a01515e:	bd30      	pop	{r4, r5, pc}
1a015160:	aa02      	add	r2, sp, #8
1a015162:	f001 f8cd 	bl	1a016300 <__ieee754_rem_pio2>
1a015166:	f000 0303 	and.w	r3, r0, #3
1a01516a:	2b01      	cmp	r3, #1
1a01516c:	d01b      	beq.n	1a0151a6 <cos+0x66>
1a01516e:	2b02      	cmp	r3, #2
1a015170:	d00f      	beq.n	1a015192 <cos+0x52>
1a015172:	b313      	cbz	r3, 1a0151ba <cos+0x7a>
1a015174:	2401      	movs	r4, #1
1a015176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a01517a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a01517e:	9400      	str	r4, [sp, #0]
1a015180:	f002 fc5a 	bl	1a017a38 <__kernel_sin>
1a015184:	e7ea      	b.n	1a01515c <cos+0x1c>
1a015186:	2200      	movs	r2, #0
1a015188:	2300      	movs	r3, #0
1a01518a:	f001 ff29 	bl	1a016fe0 <__kernel_cos>
1a01518e:	b007      	add	sp, #28
1a015190:	bd30      	pop	{r4, r5, pc}
1a015192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a015196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a01519a:	f001 ff21 	bl	1a016fe0 <__kernel_cos>
1a01519e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
1a0151a2:	b007      	add	sp, #28
1a0151a4:	bd30      	pop	{r4, r5, pc}
1a0151a6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
1a0151aa:	9300      	str	r3, [sp, #0]
1a0151ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a0151b0:	4622      	mov	r2, r4
1a0151b2:	462b      	mov	r3, r5
1a0151b4:	f002 fc40 	bl	1a017a38 <__kernel_sin>
1a0151b8:	e7f1      	b.n	1a01519e <cos+0x5e>
1a0151ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a0151be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a0151c2:	f001 ff0d 	bl	1a016fe0 <__kernel_cos>
1a0151c6:	e7c9      	b.n	1a01515c <cos+0x1c>
1a0151c8:	3fe921fb 	.word	0x3fe921fb
1a0151cc:	7fefffff 	.word	0x7fefffff

1a0151d0 <fabs>:
1a0151d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0151d4:	4770      	bx	lr
1a0151d6:	bf00      	nop

1a0151d8 <floor>:
1a0151d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0151dc:	f3c1 570a 	ubfx	r7, r1, #20, #11
1a0151e0:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
1a0151e4:	2d13      	cmp	r5, #19
1a0151e6:	4602      	mov	r2, r0
1a0151e8:	460b      	mov	r3, r1
1a0151ea:	460c      	mov	r4, r1
1a0151ec:	4688      	mov	r8, r1
1a0151ee:	4606      	mov	r6, r0
1a0151f0:	dc1c      	bgt.n	1a01522c <floor+0x54>
1a0151f2:	2d00      	cmp	r5, #0
1a0151f4:	db3f      	blt.n	1a015276 <floor+0x9e>
1a0151f6:	4f3a      	ldr	r7, [pc, #232]	; (1a0152e0 <floor+0x108>)
1a0151f8:	412f      	asrs	r7, r5
1a0151fa:	4686      	mov	lr, r0
1a0151fc:	ea01 0c07 	and.w	ip, r1, r7
1a015200:	ea5c 0e0e 	orrs.w	lr, ip, lr
1a015204:	d017      	beq.n	1a015236 <floor+0x5e>
1a015206:	a334      	add	r3, pc, #208	; (adr r3, 1a0152d8 <floor+0x100>)
1a015208:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01520c:	f7fe fa42 	bl	1a013694 <__adddf3>
1a015210:	2200      	movs	r2, #0
1a015212:	2300      	movs	r3, #0
1a015214:	f7fe fe80 	bl	1a013f18 <__aeabi_dcmpgt>
1a015218:	b120      	cbz	r0, 1a015224 <floor+0x4c>
1a01521a:	2c00      	cmp	r4, #0
1a01521c:	db3f      	blt.n	1a01529e <floor+0xc6>
1a01521e:	ea28 0407 	bic.w	r4, r8, r7
1a015222:	2600      	movs	r6, #0
1a015224:	4621      	mov	r1, r4
1a015226:	4630      	mov	r0, r6
1a015228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a01522c:	2d33      	cmp	r5, #51	; 0x33
1a01522e:	dd06      	ble.n	1a01523e <floor+0x66>
1a015230:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
1a015234:	d02f      	beq.n	1a015296 <floor+0xbe>
1a015236:	4610      	mov	r0, r2
1a015238:	4619      	mov	r1, r3
1a01523a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a01523e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
1a015242:	f04f 3eff 	mov.w	lr, #4294967295
1a015246:	fa2e f707 	lsr.w	r7, lr, r7
1a01524a:	4238      	tst	r0, r7
1a01524c:	d0f3      	beq.n	1a015236 <floor+0x5e>
1a01524e:	a322      	add	r3, pc, #136	; (adr r3, 1a0152d8 <floor+0x100>)
1a015250:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015254:	f7fe fa1e 	bl	1a013694 <__adddf3>
1a015258:	2200      	movs	r2, #0
1a01525a:	2300      	movs	r3, #0
1a01525c:	f7fe fe5c 	bl	1a013f18 <__aeabi_dcmpgt>
1a015260:	2800      	cmp	r0, #0
1a015262:	d0df      	beq.n	1a015224 <floor+0x4c>
1a015264:	2c00      	cmp	r4, #0
1a015266:	db20      	blt.n	1a0152aa <floor+0xd2>
1a015268:	4644      	mov	r4, r8
1a01526a:	ea26 0607 	bic.w	r6, r6, r7
1a01526e:	4621      	mov	r1, r4
1a015270:	4630      	mov	r0, r6
1a015272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a015276:	a318      	add	r3, pc, #96	; (adr r3, 1a0152d8 <floor+0x100>)
1a015278:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01527c:	f7fe fa0a 	bl	1a013694 <__adddf3>
1a015280:	2200      	movs	r2, #0
1a015282:	2300      	movs	r3, #0
1a015284:	f7fe fe48 	bl	1a013f18 <__aeabi_dcmpgt>
1a015288:	2800      	cmp	r0, #0
1a01528a:	d0cb      	beq.n	1a015224 <floor+0x4c>
1a01528c:	2c00      	cmp	r4, #0
1a01528e:	db17      	blt.n	1a0152c0 <floor+0xe8>
1a015290:	2600      	movs	r6, #0
1a015292:	4634      	mov	r4, r6
1a015294:	e7c6      	b.n	1a015224 <floor+0x4c>
1a015296:	f7fe f9fd 	bl	1a013694 <__adddf3>
1a01529a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a01529e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
1a0152a2:	fa43 f505 	asr.w	r5, r3, r5
1a0152a6:	44a8      	add	r8, r5
1a0152a8:	e7b9      	b.n	1a01521e <floor+0x46>
1a0152aa:	2d14      	cmp	r5, #20
1a0152ac:	d010      	beq.n	1a0152d0 <floor+0xf8>
1a0152ae:	2301      	movs	r3, #1
1a0152b0:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
1a0152b4:	fa03 f505 	lsl.w	r5, r3, r5
1a0152b8:	19ae      	adds	r6, r5, r6
1a0152ba:	bf28      	it	cs
1a0152bc:	4498      	addcs	r8, r3
1a0152be:	e7d3      	b.n	1a015268 <floor+0x90>
1a0152c0:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
1a0152c4:	4b07      	ldr	r3, [pc, #28]	; (1a0152e4 <floor+0x10c>)
1a0152c6:	4332      	orrs	r2, r6
1a0152c8:	bf18      	it	ne
1a0152ca:	461c      	movne	r4, r3
1a0152cc:	2600      	movs	r6, #0
1a0152ce:	e7a9      	b.n	1a015224 <floor+0x4c>
1a0152d0:	f104 0801 	add.w	r8, r4, #1
1a0152d4:	e7c8      	b.n	1a015268 <floor+0x90>
1a0152d6:	bf00      	nop
1a0152d8:	8800759c 	.word	0x8800759c
1a0152dc:	7e37e43c 	.word	0x7e37e43c
1a0152e0:	000fffff 	.word	0x000fffff
1a0152e4:	bff00000 	.word	0xbff00000

1a0152e8 <cosf>:
1a0152e8:	b500      	push	{lr}
1a0152ea:	b085      	sub	sp, #20
1a0152ec:	4a23      	ldr	r2, [pc, #140]	; (1a01537c <cosf+0x94>)
1a0152ee:	9001      	str	r0, [sp, #4]
1a0152f0:	9b01      	ldr	r3, [sp, #4]
1a0152f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
1a0152f6:	4293      	cmp	r3, r2
1a0152f8:	dd1d      	ble.n	1a015336 <cosf+0x4e>
1a0152fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
1a0152fe:	db08      	blt.n	1a015312 <cosf+0x2a>
1a015300:	eddd 7a01 	vldr	s15, [sp, #4]
1a015304:	ee77 7ae7 	vsub.f32	s15, s15, s15
1a015308:	ee17 0a90 	vmov	r0, s15
1a01530c:	b005      	add	sp, #20
1a01530e:	f85d fb04 	ldr.w	pc, [sp], #4
1a015312:	a902      	add	r1, sp, #8
1a015314:	f001 fcc0 	bl	1a016c98 <__ieee754_rem_pio2f>
1a015318:	f000 0203 	and.w	r2, r0, #3
1a01531c:	2a01      	cmp	r2, #1
1a01531e:	d01d      	beq.n	1a01535c <cosf+0x74>
1a015320:	2a02      	cmp	r2, #2
1a015322:	d012      	beq.n	1a01534a <cosf+0x62>
1a015324:	b31a      	cbz	r2, 1a01536e <cosf+0x86>
1a015326:	2201      	movs	r2, #1
1a015328:	9903      	ldr	r1, [sp, #12]
1a01532a:	9802      	ldr	r0, [sp, #8]
1a01532c:	f002 fff0 	bl	1a018310 <__kernel_sinf>
1a015330:	ee07 0a90 	vmov	s15, r0
1a015334:	e7e8      	b.n	1a015308 <cosf+0x20>
1a015336:	2100      	movs	r1, #0
1a015338:	f002 fc34 	bl	1a017ba4 <__kernel_cosf>
1a01533c:	ee07 0a90 	vmov	s15, r0
1a015340:	ee17 0a90 	vmov	r0, s15
1a015344:	b005      	add	sp, #20
1a015346:	f85d fb04 	ldr.w	pc, [sp], #4
1a01534a:	9903      	ldr	r1, [sp, #12]
1a01534c:	9802      	ldr	r0, [sp, #8]
1a01534e:	f002 fc29 	bl	1a017ba4 <__kernel_cosf>
1a015352:	ee07 0a90 	vmov	s15, r0
1a015356:	eef1 7a67 	vneg.f32	s15, s15
1a01535a:	e7d5      	b.n	1a015308 <cosf+0x20>
1a01535c:	9903      	ldr	r1, [sp, #12]
1a01535e:	9802      	ldr	r0, [sp, #8]
1a015360:	f002 ffd6 	bl	1a018310 <__kernel_sinf>
1a015364:	ee07 0a90 	vmov	s15, r0
1a015368:	eef1 7a67 	vneg.f32	s15, s15
1a01536c:	e7cc      	b.n	1a015308 <cosf+0x20>
1a01536e:	9903      	ldr	r1, [sp, #12]
1a015370:	9802      	ldr	r0, [sp, #8]
1a015372:	f002 fc17 	bl	1a017ba4 <__kernel_cosf>
1a015376:	ee07 0a90 	vmov	s15, r0
1a01537a:	e7c5      	b.n	1a015308 <cosf+0x20>
1a01537c:	3f490fd8 	.word	0x3f490fd8

1a015380 <fabsf>:
1a015380:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a015384:	4770      	bx	lr
1a015386:	bf00      	nop

1a015388 <floorf>:
1a015388:	b082      	sub	sp, #8
1a01538a:	9001      	str	r0, [sp, #4]
1a01538c:	9a01      	ldr	r2, [sp, #4]
1a01538e:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
1a015392:	0dcb      	lsrs	r3, r1, #23
1a015394:	3b7f      	subs	r3, #127	; 0x7f
1a015396:	2b16      	cmp	r3, #22
1a015398:	dc17      	bgt.n	1a0153ca <floorf+0x42>
1a01539a:	2b00      	cmp	r3, #0
1a01539c:	4610      	mov	r0, r2
1a01539e:	db22      	blt.n	1a0153e6 <floorf+0x5e>
1a0153a0:	4921      	ldr	r1, [pc, #132]	; (1a015428 <floorf+0xa0>)
1a0153a2:	4119      	asrs	r1, r3
1a0153a4:	420a      	tst	r2, r1
1a0153a6:	d013      	beq.n	1a0153d0 <floorf+0x48>
1a0153a8:	eddf 7a20 	vldr	s15, [pc, #128]	; 1a01542c <floorf+0xa4>
1a0153ac:	ed9d 7a01 	vldr	s14, [sp, #4]
1a0153b0:	ee77 7a27 	vadd.f32	s15, s14, s15
1a0153b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
1a0153b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0153bc:	dd22      	ble.n	1a015404 <floorf+0x7c>
1a0153be:	2a00      	cmp	r2, #0
1a0153c0:	db23      	blt.n	1a01540a <floorf+0x82>
1a0153c2:	ea20 0001 	bic.w	r0, r0, r1
1a0153c6:	b002      	add	sp, #8
1a0153c8:	4770      	bx	lr
1a0153ca:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
1a0153ce:	d202      	bcs.n	1a0153d6 <floorf+0x4e>
1a0153d0:	9801      	ldr	r0, [sp, #4]
1a0153d2:	b002      	add	sp, #8
1a0153d4:	4770      	bx	lr
1a0153d6:	eddd 7a01 	vldr	s15, [sp, #4]
1a0153da:	ee77 7aa7 	vadd.f32	s15, s15, s15
1a0153de:	ee17 0a90 	vmov	r0, s15
1a0153e2:	b002      	add	sp, #8
1a0153e4:	4770      	bx	lr
1a0153e6:	eddf 7a11 	vldr	s15, [pc, #68]	; 1a01542c <floorf+0xa4>
1a0153ea:	ed9d 7a01 	vldr	s14, [sp, #4]
1a0153ee:	ee77 7a27 	vadd.f32	s15, s14, s15
1a0153f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
1a0153f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0153fa:	dde9      	ble.n	1a0153d0 <floorf+0x48>
1a0153fc:	2a00      	cmp	r2, #0
1a0153fe:	db0a      	blt.n	1a015416 <floorf+0x8e>
1a015400:	2000      	movs	r0, #0
1a015402:	e7e6      	b.n	1a0153d2 <floorf+0x4a>
1a015404:	ee17 0a10 	vmov	r0, s14
1a015408:	e7e3      	b.n	1a0153d2 <floorf+0x4a>
1a01540a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
1a01540e:	fa42 f303 	asr.w	r3, r2, r3
1a015412:	4418      	add	r0, r3
1a015414:	e7d5      	b.n	1a0153c2 <floorf+0x3a>
1a015416:	ee17 0a10 	vmov	r0, s14
1a01541a:	2900      	cmp	r1, #0
1a01541c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
1a015420:	bf18      	it	ne
1a015422:	ee17 0a90 	vmovne	r0, s15
1a015426:	e7d4      	b.n	1a0153d2 <floorf+0x4a>
1a015428:	007fffff 	.word	0x007fffff
1a01542c:	7149f2ca 	.word	0x7149f2ca

1a015430 <sinf>:
1a015430:	b500      	push	{lr}
1a015432:	b085      	sub	sp, #20
1a015434:	4a24      	ldr	r2, [pc, #144]	; (1a0154c8 <sinf+0x98>)
1a015436:	9001      	str	r0, [sp, #4]
1a015438:	9b01      	ldr	r3, [sp, #4]
1a01543a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
1a01543e:	4293      	cmp	r3, r2
1a015440:	dd1e      	ble.n	1a015480 <sinf+0x50>
1a015442:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
1a015446:	db08      	blt.n	1a01545a <sinf+0x2a>
1a015448:	eddd 7a01 	vldr	s15, [sp, #4]
1a01544c:	ee77 7ae7 	vsub.f32	s15, s15, s15
1a015450:	ee17 0a90 	vmov	r0, s15
1a015454:	b005      	add	sp, #20
1a015456:	f85d fb04 	ldr.w	pc, [sp], #4
1a01545a:	a902      	add	r1, sp, #8
1a01545c:	f001 fc1c 	bl	1a016c98 <__ieee754_rem_pio2f>
1a015460:	f000 0003 	and.w	r0, r0, #3
1a015464:	2801      	cmp	r0, #1
1a015466:	d020      	beq.n	1a0154aa <sinf+0x7a>
1a015468:	2802      	cmp	r0, #2
1a01546a:	d014      	beq.n	1a015496 <sinf+0x66>
1a01546c:	b320      	cbz	r0, 1a0154b8 <sinf+0x88>
1a01546e:	9903      	ldr	r1, [sp, #12]
1a015470:	9802      	ldr	r0, [sp, #8]
1a015472:	f002 fb97 	bl	1a017ba4 <__kernel_cosf>
1a015476:	ee07 0a90 	vmov	s15, r0
1a01547a:	eef1 7a67 	vneg.f32	s15, s15
1a01547e:	e7e7      	b.n	1a015450 <sinf+0x20>
1a015480:	2200      	movs	r2, #0
1a015482:	2100      	movs	r1, #0
1a015484:	f002 ff44 	bl	1a018310 <__kernel_sinf>
1a015488:	ee07 0a90 	vmov	s15, r0
1a01548c:	ee17 0a90 	vmov	r0, s15
1a015490:	b005      	add	sp, #20
1a015492:	f85d fb04 	ldr.w	pc, [sp], #4
1a015496:	2201      	movs	r2, #1
1a015498:	9903      	ldr	r1, [sp, #12]
1a01549a:	9802      	ldr	r0, [sp, #8]
1a01549c:	f002 ff38 	bl	1a018310 <__kernel_sinf>
1a0154a0:	ee07 0a90 	vmov	s15, r0
1a0154a4:	eef1 7a67 	vneg.f32	s15, s15
1a0154a8:	e7d2      	b.n	1a015450 <sinf+0x20>
1a0154aa:	9903      	ldr	r1, [sp, #12]
1a0154ac:	9802      	ldr	r0, [sp, #8]
1a0154ae:	f002 fb79 	bl	1a017ba4 <__kernel_cosf>
1a0154b2:	ee07 0a90 	vmov	s15, r0
1a0154b6:	e7cb      	b.n	1a015450 <sinf+0x20>
1a0154b8:	2201      	movs	r2, #1
1a0154ba:	9903      	ldr	r1, [sp, #12]
1a0154bc:	9802      	ldr	r0, [sp, #8]
1a0154be:	f002 ff27 	bl	1a018310 <__kernel_sinf>
1a0154c2:	ee07 0a90 	vmov	s15, r0
1a0154c6:	e7c3      	b.n	1a015450 <sinf+0x20>
1a0154c8:	3f490fd8 	.word	0x3f490fd8

1a0154cc <acos>:
1a0154cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0154d0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1a015570 <acos+0xa4>
1a0154d4:	b08a      	sub	sp, #40	; 0x28
1a0154d6:	4606      	mov	r6, r0
1a0154d8:	460f      	mov	r7, r1
1a0154da:	f000 f9cd 	bl	1a015878 <__ieee754_acos>
1a0154de:	f998 3000 	ldrsb.w	r3, [r8]
1a0154e2:	3301      	adds	r3, #1
1a0154e4:	4604      	mov	r4, r0
1a0154e6:	460d      	mov	r5, r1
1a0154e8:	d004      	beq.n	1a0154f4 <acos+0x28>
1a0154ea:	4630      	mov	r0, r6
1a0154ec:	4639      	mov	r1, r7
1a0154ee:	f7ff fc41 	bl	1a014d74 <__fpclassifyd>
1a0154f2:	b920      	cbnz	r0, 1a0154fe <acos+0x32>
1a0154f4:	4620      	mov	r0, r4
1a0154f6:	4629      	mov	r1, r5
1a0154f8:	b00a      	add	sp, #40	; 0x28
1a0154fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0154fe:	4630      	mov	r0, r6
1a015500:	4639      	mov	r1, r7
1a015502:	f7ff fe65 	bl	1a0151d0 <fabs>
1a015506:	2200      	movs	r2, #0
1a015508:	4b16      	ldr	r3, [pc, #88]	; (1a015564 <acos+0x98>)
1a01550a:	f7fe fd05 	bl	1a013f18 <__aeabi_dcmpgt>
1a01550e:	2800      	cmp	r0, #0
1a015510:	d0f0      	beq.n	1a0154f4 <acos+0x28>
1a015512:	2301      	movs	r3, #1
1a015514:	4a14      	ldr	r2, [pc, #80]	; (1a015568 <acos+0x9c>)
1a015516:	9300      	str	r3, [sp, #0]
1a015518:	4814      	ldr	r0, [pc, #80]	; (1a01556c <acos+0xa0>)
1a01551a:	9201      	str	r2, [sp, #4]
1a01551c:	2300      	movs	r3, #0
1a01551e:	9308      	str	r3, [sp, #32]
1a015520:	e9cd 6704 	strd	r6, r7, [sp, #16]
1a015524:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a015528:	f002 ff42 	bl	1a0183b0 <nan>
1a01552c:	f998 3000 	ldrsb.w	r3, [r8]
1a015530:	2b02      	cmp	r3, #2
1a015532:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a015536:	d00a      	beq.n	1a01554e <acos+0x82>
1a015538:	4668      	mov	r0, sp
1a01553a:	f002 ff37 	bl	1a0183ac <matherr>
1a01553e:	b130      	cbz	r0, 1a01554e <acos+0x82>
1a015540:	9b08      	ldr	r3, [sp, #32]
1a015542:	b94b      	cbnz	r3, 1a015558 <acos+0x8c>
1a015544:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a015548:	b00a      	add	sp, #40	; 0x28
1a01554a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a01554e:	f003 f921 	bl	1a018794 <__errno>
1a015552:	2321      	movs	r3, #33	; 0x21
1a015554:	6003      	str	r3, [r0, #0]
1a015556:	e7f3      	b.n	1a015540 <acos+0x74>
1a015558:	f003 f91c 	bl	1a018794 <__errno>
1a01555c:	9b08      	ldr	r3, [sp, #32]
1a01555e:	6003      	str	r3, [r0, #0]
1a015560:	e7f0      	b.n	1a015544 <acos+0x78>
1a015562:	bf00      	nop
1a015564:	3ff00000 	.word	0x3ff00000
1a015568:	1a01aba0 	.word	0x1a01aba0
1a01556c:	1a01a994 	.word	0x1a01a994
1a015570:	100860b4 	.word	0x100860b4

1a015574 <atan2>:
1a015574:	f000 bbd4 	b.w	1a015d20 <__ieee754_atan2>

1a015578 <log>:
1a015578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a01557c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 1a01566c <log+0xf4>
1a015580:	b08b      	sub	sp, #44	; 0x2c
1a015582:	4606      	mov	r6, r0
1a015584:	460f      	mov	r7, r1
1a015586:	f000 fcc7 	bl	1a015f18 <__ieee754_log>
1a01558a:	f998 3000 	ldrsb.w	r3, [r8]
1a01558e:	3301      	adds	r3, #1
1a015590:	4604      	mov	r4, r0
1a015592:	460d      	mov	r5, r1
1a015594:	d00b      	beq.n	1a0155ae <log+0x36>
1a015596:	4630      	mov	r0, r6
1a015598:	4639      	mov	r1, r7
1a01559a:	f7ff fbeb 	bl	1a014d74 <__fpclassifyd>
1a01559e:	b130      	cbz	r0, 1a0155ae <log+0x36>
1a0155a0:	2200      	movs	r2, #0
1a0155a2:	2300      	movs	r3, #0
1a0155a4:	4630      	mov	r0, r6
1a0155a6:	4639      	mov	r1, r7
1a0155a8:	f7fe fcb6 	bl	1a013f18 <__aeabi_dcmpgt>
1a0155ac:	b120      	cbz	r0, 1a0155b8 <log+0x40>
1a0155ae:	4620      	mov	r0, r4
1a0155b0:	4629      	mov	r1, r5
1a0155b2:	b00b      	add	sp, #44	; 0x2c
1a0155b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0155b8:	f898 4000 	ldrb.w	r4, [r8]
1a0155bc:	4b28      	ldr	r3, [pc, #160]	; (1a015660 <log+0xe8>)
1a0155be:	9008      	str	r0, [sp, #32]
1a0155c0:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a0155c4:	e9cd 6704 	strd	r6, r7, [sp, #16]
1a0155c8:	9301      	str	r3, [sp, #4]
1a0155ca:	b9b4      	cbnz	r4, 1a0155fa <log+0x82>
1a0155cc:	4d25      	ldr	r5, [pc, #148]	; (1a015664 <log+0xec>)
1a0155ce:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
1a0155d2:	4630      	mov	r0, r6
1a0155d4:	4639      	mov	r1, r7
1a0155d6:	2200      	movs	r2, #0
1a0155d8:	2300      	movs	r3, #0
1a0155da:	e9cd 4506 	strd	r4, r5, [sp, #24]
1a0155de:	f7fe fc73 	bl	1a013ec8 <__aeabi_dcmpeq>
1a0155e2:	b358      	cbz	r0, 1a01563c <log+0xc4>
1a0155e4:	2302      	movs	r3, #2
1a0155e6:	9300      	str	r3, [sp, #0]
1a0155e8:	4668      	mov	r0, sp
1a0155ea:	f002 fedf 	bl	1a0183ac <matherr>
1a0155ee:	b9f0      	cbnz	r0, 1a01562e <log+0xb6>
1a0155f0:	f003 f8d0 	bl	1a018794 <__errno>
1a0155f4:	2322      	movs	r3, #34	; 0x22
1a0155f6:	6003      	str	r3, [r0, #0]
1a0155f8:	e019      	b.n	1a01562e <log+0xb6>
1a0155fa:	f8df 9074 	ldr.w	r9, [pc, #116]	; 1a015670 <log+0xf8>
1a0155fe:	f04f 0800 	mov.w	r8, #0
1a015602:	4630      	mov	r0, r6
1a015604:	4639      	mov	r1, r7
1a015606:	2200      	movs	r2, #0
1a015608:	2300      	movs	r3, #0
1a01560a:	e9cd 8906 	strd	r8, r9, [sp, #24]
1a01560e:	f7fe fc5b 	bl	1a013ec8 <__aeabi_dcmpeq>
1a015612:	b9d8      	cbnz	r0, 1a01564c <log+0xd4>
1a015614:	2301      	movs	r3, #1
1a015616:	2c02      	cmp	r4, #2
1a015618:	9300      	str	r3, [sp, #0]
1a01561a:	d111      	bne.n	1a015640 <log+0xc8>
1a01561c:	f003 f8ba 	bl	1a018794 <__errno>
1a015620:	2321      	movs	r3, #33	; 0x21
1a015622:	6003      	str	r3, [r0, #0]
1a015624:	4810      	ldr	r0, [pc, #64]	; (1a015668 <log+0xf0>)
1a015626:	f002 fec3 	bl	1a0183b0 <nan>
1a01562a:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a01562e:	9b08      	ldr	r3, [sp, #32]
1a015630:	b98b      	cbnz	r3, 1a015656 <log+0xde>
1a015632:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a015636:	b00b      	add	sp, #44	; 0x2c
1a015638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a01563c:	2301      	movs	r3, #1
1a01563e:	9300      	str	r3, [sp, #0]
1a015640:	4668      	mov	r0, sp
1a015642:	f002 feb3 	bl	1a0183ac <matherr>
1a015646:	2800      	cmp	r0, #0
1a015648:	d1ec      	bne.n	1a015624 <log+0xac>
1a01564a:	e7e7      	b.n	1a01561c <log+0xa4>
1a01564c:	2302      	movs	r3, #2
1a01564e:	429c      	cmp	r4, r3
1a015650:	9300      	str	r3, [sp, #0]
1a015652:	d0cd      	beq.n	1a0155f0 <log+0x78>
1a015654:	e7c8      	b.n	1a0155e8 <log+0x70>
1a015656:	f003 f89d 	bl	1a018794 <__errno>
1a01565a:	9b08      	ldr	r3, [sp, #32]
1a01565c:	6003      	str	r3, [r0, #0]
1a01565e:	e7e8      	b.n	1a015632 <log+0xba>
1a015660:	1a01aba8 	.word	0x1a01aba8
1a015664:	c7efffff 	.word	0xc7efffff
1a015668:	1a01a994 	.word	0x1a01a994
1a01566c:	100860b4 	.word	0x100860b4
1a015670:	fff00000 	.word	0xfff00000

1a015674 <sqrt>:
1a015674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a015678:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 1a01571c <sqrt+0xa8>
1a01567c:	b08a      	sub	sp, #40	; 0x28
1a01567e:	4606      	mov	r6, r0
1a015680:	460f      	mov	r7, r1
1a015682:	f001 f85b 	bl	1a01673c <__ieee754_sqrt>
1a015686:	f99a 3000 	ldrsb.w	r3, [sl]
1a01568a:	3301      	adds	r3, #1
1a01568c:	4604      	mov	r4, r0
1a01568e:	460d      	mov	r5, r1
1a015690:	d00f      	beq.n	1a0156b2 <sqrt+0x3e>
1a015692:	4630      	mov	r0, r6
1a015694:	4639      	mov	r1, r7
1a015696:	f7ff fb6d 	bl	1a014d74 <__fpclassifyd>
1a01569a:	b150      	cbz	r0, 1a0156b2 <sqrt+0x3e>
1a01569c:	f04f 0800 	mov.w	r8, #0
1a0156a0:	f04f 0900 	mov.w	r9, #0
1a0156a4:	4630      	mov	r0, r6
1a0156a6:	4639      	mov	r1, r7
1a0156a8:	4642      	mov	r2, r8
1a0156aa:	464b      	mov	r3, r9
1a0156ac:	f7fe fc16 	bl	1a013edc <__aeabi_dcmplt>
1a0156b0:	b920      	cbnz	r0, 1a0156bc <sqrt+0x48>
1a0156b2:	4620      	mov	r0, r4
1a0156b4:	4629      	mov	r1, r5
1a0156b6:	b00a      	add	sp, #40	; 0x28
1a0156b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0156bc:	4b16      	ldr	r3, [pc, #88]	; (1a015718 <sqrt+0xa4>)
1a0156be:	f89a 4000 	ldrb.w	r4, [sl]
1a0156c2:	9301      	str	r3, [sp, #4]
1a0156c4:	2201      	movs	r2, #1
1a0156c6:	2300      	movs	r3, #0
1a0156c8:	e9cd 6704 	strd	r6, r7, [sp, #16]
1a0156cc:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a0156d0:	9200      	str	r2, [sp, #0]
1a0156d2:	9308      	str	r3, [sp, #32]
1a0156d4:	b964      	cbnz	r4, 1a0156f0 <sqrt+0x7c>
1a0156d6:	e9cd 8906 	strd	r8, r9, [sp, #24]
1a0156da:	4668      	mov	r0, sp
1a0156dc:	f002 fe66 	bl	1a0183ac <matherr>
1a0156e0:	b180      	cbz	r0, 1a015704 <sqrt+0x90>
1a0156e2:	9b08      	ldr	r3, [sp, #32]
1a0156e4:	b99b      	cbnz	r3, 1a01570e <sqrt+0x9a>
1a0156e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0156ea:	b00a      	add	sp, #40	; 0x28
1a0156ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0156f0:	4642      	mov	r2, r8
1a0156f2:	464b      	mov	r3, r9
1a0156f4:	4640      	mov	r0, r8
1a0156f6:	4649      	mov	r1, r9
1a0156f8:	f7fe faa8 	bl	1a013c4c <__aeabi_ddiv>
1a0156fc:	2c02      	cmp	r4, #2
1a0156fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a015702:	d1ea      	bne.n	1a0156da <sqrt+0x66>
1a015704:	f003 f846 	bl	1a018794 <__errno>
1a015708:	2321      	movs	r3, #33	; 0x21
1a01570a:	6003      	str	r3, [r0, #0]
1a01570c:	e7e9      	b.n	1a0156e2 <sqrt+0x6e>
1a01570e:	f003 f841 	bl	1a018794 <__errno>
1a015712:	9b08      	ldr	r3, [sp, #32]
1a015714:	6003      	str	r3, [r0, #0]
1a015716:	e7e6      	b.n	1a0156e6 <sqrt+0x72>
1a015718:	1a01abac 	.word	0x1a01abac
1a01571c:	100860b4 	.word	0x100860b4

1a015720 <acosf>:
1a015720:	b570      	push	{r4, r5, r6, lr}
1a015722:	4d25      	ldr	r5, [pc, #148]	; (1a0157b8 <acosf+0x98>)
1a015724:	b08a      	sub	sp, #40	; 0x28
1a015726:	4606      	mov	r6, r0
1a015728:	f001 f8ca 	bl	1a0168c0 <__ieee754_acosf>
1a01572c:	f995 3000 	ldrsb.w	r3, [r5]
1a015730:	3301      	adds	r3, #1
1a015732:	4604      	mov	r4, r0
1a015734:	d003      	beq.n	1a01573e <acosf+0x1e>
1a015736:	4630      	mov	r0, r6
1a015738:	f7ff fb48 	bl	1a014dcc <__fpclassifyf>
1a01573c:	b910      	cbnz	r0, 1a015744 <acosf+0x24>
1a01573e:	4620      	mov	r0, r4
1a015740:	b00a      	add	sp, #40	; 0x28
1a015742:	bd70      	pop	{r4, r5, r6, pc}
1a015744:	4630      	mov	r0, r6
1a015746:	f7ff fe1b 	bl	1a015380 <fabsf>
1a01574a:	ee07 0a10 	vmov	s14, r0
1a01574e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
1a015752:	eeb4 7ae7 	vcmpe.f32	s14, s15
1a015756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a01575a:	ddf0      	ble.n	1a01573e <acosf+0x1e>
1a01575c:	2301      	movs	r3, #1
1a01575e:	4a17      	ldr	r2, [pc, #92]	; (1a0157bc <acosf+0x9c>)
1a015760:	9300      	str	r3, [sp, #0]
1a015762:	4630      	mov	r0, r6
1a015764:	2300      	movs	r3, #0
1a015766:	9201      	str	r2, [sp, #4]
1a015768:	9308      	str	r3, [sp, #32]
1a01576a:	f7fe f8f1 	bl	1a013950 <__aeabi_f2d>
1a01576e:	4602      	mov	r2, r0
1a015770:	460b      	mov	r3, r1
1a015772:	4813      	ldr	r0, [pc, #76]	; (1a0157c0 <acosf+0xa0>)
1a015774:	e9cd 2304 	strd	r2, r3, [sp, #16]
1a015778:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a01577c:	f002 fe18 	bl	1a0183b0 <nan>
1a015780:	f995 3000 	ldrsb.w	r3, [r5]
1a015784:	2b02      	cmp	r3, #2
1a015786:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a01578a:	d00b      	beq.n	1a0157a4 <acosf+0x84>
1a01578c:	4668      	mov	r0, sp
1a01578e:	f002 fe0d 	bl	1a0183ac <matherr>
1a015792:	b138      	cbz	r0, 1a0157a4 <acosf+0x84>
1a015794:	9b08      	ldr	r3, [sp, #32]
1a015796:	b953      	cbnz	r3, 1a0157ae <acosf+0x8e>
1a015798:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a01579c:	f7fe fbee 	bl	1a013f7c <__aeabi_d2f>
1a0157a0:	b00a      	add	sp, #40	; 0x28
1a0157a2:	bd70      	pop	{r4, r5, r6, pc}
1a0157a4:	f002 fff6 	bl	1a018794 <__errno>
1a0157a8:	2321      	movs	r3, #33	; 0x21
1a0157aa:	6003      	str	r3, [r0, #0]
1a0157ac:	e7f2      	b.n	1a015794 <acosf+0x74>
1a0157ae:	f002 fff1 	bl	1a018794 <__errno>
1a0157b2:	9b08      	ldr	r3, [sp, #32]
1a0157b4:	6003      	str	r3, [r0, #0]
1a0157b6:	e7ef      	b.n	1a015798 <acosf+0x78>
1a0157b8:	100860b4 	.word	0x100860b4
1a0157bc:	1a01abb4 	.word	0x1a01abb4
1a0157c0:	1a01a994 	.word	0x1a01a994

1a0157c4 <atan2f>:
1a0157c4:	f001 b9a8 	b.w	1a016b18 <__ieee754_atan2f>

1a0157c8 <sqrtf>:
1a0157c8:	b530      	push	{r4, r5, lr}
1a0157ca:	ed2d 8b02 	vpush	{d8}
1a0157ce:	4d27      	ldr	r5, [pc, #156]	; (1a01586c <sqrtf+0xa4>)
1a0157d0:	b08b      	sub	sp, #44	; 0x2c
1a0157d2:	ee08 0a10 	vmov	s16, r0
1a0157d6:	f001 fbab 	bl	1a016f30 <__ieee754_sqrtf>
1a0157da:	f995 3000 	ldrsb.w	r3, [r5]
1a0157de:	3301      	adds	r3, #1
1a0157e0:	4604      	mov	r4, r0
1a0157e2:	d009      	beq.n	1a0157f8 <sqrtf+0x30>
1a0157e4:	ee18 0a10 	vmov	r0, s16
1a0157e8:	f7ff faf0 	bl	1a014dcc <__fpclassifyf>
1a0157ec:	b120      	cbz	r0, 1a0157f8 <sqrtf+0x30>
1a0157ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
1a0157f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0157f6:	d404      	bmi.n	1a015802 <sqrtf+0x3a>
1a0157f8:	4620      	mov	r0, r4
1a0157fa:	b00b      	add	sp, #44	; 0x2c
1a0157fc:	ecbd 8b02 	vpop	{d8}
1a015800:	bd30      	pop	{r4, r5, pc}
1a015802:	2301      	movs	r3, #1
1a015804:	4a1a      	ldr	r2, [pc, #104]	; (1a015870 <sqrtf+0xa8>)
1a015806:	9300      	str	r3, [sp, #0]
1a015808:	ee18 0a10 	vmov	r0, s16
1a01580c:	2300      	movs	r3, #0
1a01580e:	9201      	str	r2, [sp, #4]
1a015810:	9308      	str	r3, [sp, #32]
1a015812:	f7fe f89d 	bl	1a013950 <__aeabi_f2d>
1a015816:	782c      	ldrb	r4, [r5, #0]
1a015818:	e9cd 0104 	strd	r0, r1, [sp, #16]
1a01581c:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a015820:	2200      	movs	r2, #0
1a015822:	2300      	movs	r3, #0
1a015824:	b97c      	cbnz	r4, 1a015846 <sqrtf+0x7e>
1a015826:	e9cd 2306 	strd	r2, r3, [sp, #24]
1a01582a:	4668      	mov	r0, sp
1a01582c:	f002 fdbe 	bl	1a0183ac <matherr>
1a015830:	b188      	cbz	r0, 1a015856 <sqrtf+0x8e>
1a015832:	9b08      	ldr	r3, [sp, #32]
1a015834:	b9a3      	cbnz	r3, 1a015860 <sqrtf+0x98>
1a015836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a01583a:	f7fe fb9f 	bl	1a013f7c <__aeabi_d2f>
1a01583e:	b00b      	add	sp, #44	; 0x2c
1a015840:	ecbd 8b02 	vpop	{d8}
1a015844:	bd30      	pop	{r4, r5, pc}
1a015846:	4610      	mov	r0, r2
1a015848:	4619      	mov	r1, r3
1a01584a:	f7fe f9ff 	bl	1a013c4c <__aeabi_ddiv>
1a01584e:	2c02      	cmp	r4, #2
1a015850:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a015854:	d1e9      	bne.n	1a01582a <sqrtf+0x62>
1a015856:	f002 ff9d 	bl	1a018794 <__errno>
1a01585a:	2321      	movs	r3, #33	; 0x21
1a01585c:	6003      	str	r3, [r0, #0]
1a01585e:	e7e8      	b.n	1a015832 <sqrtf+0x6a>
1a015860:	f002 ff98 	bl	1a018794 <__errno>
1a015864:	9b08      	ldr	r3, [sp, #32]
1a015866:	6003      	str	r3, [r0, #0]
1a015868:	e7e5      	b.n	1a015836 <sqrtf+0x6e>
1a01586a:	bf00      	nop
1a01586c:	100860b4 	.word	0x100860b4
1a015870:	1a01abbc 	.word	0x1a01abbc
1a015874:	ffffffff 	.word	0xffffffff

1a015878 <__ieee754_acos>:
1a015878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a01587c:	4ec4      	ldr	r6, [pc, #784]	; (1a015b90 <__ieee754_acos+0x318>)
1a01587e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a015882:	42b3      	cmp	r3, r6
1a015884:	4604      	mov	r4, r0
1a015886:	460d      	mov	r5, r1
1a015888:	dd0d      	ble.n	1a0158a6 <__ieee754_acos+0x2e>
1a01588a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
1a01588e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
1a015892:	4303      	orrs	r3, r0
1a015894:	f040 80b9 	bne.w	1a015a0a <__ieee754_acos+0x192>
1a015898:	2900      	cmp	r1, #0
1a01589a:	f340 8140 	ble.w	1a015b1e <__ieee754_acos+0x2a6>
1a01589e:	2000      	movs	r0, #0
1a0158a0:	2100      	movs	r1, #0
1a0158a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0158a6:	4ebb      	ldr	r6, [pc, #748]	; (1a015b94 <__ieee754_acos+0x31c>)
1a0158a8:	42b3      	cmp	r3, r6
1a0158aa:	f340 80a6 	ble.w	1a0159fa <__ieee754_acos+0x182>
1a0158ae:	2900      	cmp	r1, #0
1a0158b0:	f2c0 8178 	blt.w	1a015ba4 <__ieee754_acos+0x32c>
1a0158b4:	4602      	mov	r2, r0
1a0158b6:	460b      	mov	r3, r1
1a0158b8:	2000      	movs	r0, #0
1a0158ba:	49b7      	ldr	r1, [pc, #732]	; (1a015b98 <__ieee754_acos+0x320>)
1a0158bc:	f7fd fee8 	bl	1a013690 <__aeabi_dsub>
1a0158c0:	2200      	movs	r2, #0
1a0158c2:	4bb6      	ldr	r3, [pc, #728]	; (1a015b9c <__ieee754_acos+0x324>)
1a0158c4:	f7fe f898 	bl	1a0139f8 <__aeabi_dmul>
1a0158c8:	4604      	mov	r4, r0
1a0158ca:	460d      	mov	r5, r1
1a0158cc:	f000 ff36 	bl	1a01673c <__ieee754_sqrt>
1a0158d0:	a395      	add	r3, pc, #596	; (adr r3, 1a015b28 <__ieee754_acos+0x2b0>)
1a0158d2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0158d6:	4689      	mov	r9, r1
1a0158d8:	4680      	mov	r8, r0
1a0158da:	4629      	mov	r1, r5
1a0158dc:	4620      	mov	r0, r4
1a0158de:	f7fe f88b 	bl	1a0139f8 <__aeabi_dmul>
1a0158e2:	a393      	add	r3, pc, #588	; (adr r3, 1a015b30 <__ieee754_acos+0x2b8>)
1a0158e4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0158e8:	f7fd fed4 	bl	1a013694 <__adddf3>
1a0158ec:	4622      	mov	r2, r4
1a0158ee:	462b      	mov	r3, r5
1a0158f0:	f7fe f882 	bl	1a0139f8 <__aeabi_dmul>
1a0158f4:	a390      	add	r3, pc, #576	; (adr r3, 1a015b38 <__ieee754_acos+0x2c0>)
1a0158f6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0158fa:	f7fd fec9 	bl	1a013690 <__aeabi_dsub>
1a0158fe:	4622      	mov	r2, r4
1a015900:	462b      	mov	r3, r5
1a015902:	f7fe f879 	bl	1a0139f8 <__aeabi_dmul>
1a015906:	a38e      	add	r3, pc, #568	; (adr r3, 1a015b40 <__ieee754_acos+0x2c8>)
1a015908:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01590c:	f7fd fec2 	bl	1a013694 <__adddf3>
1a015910:	4622      	mov	r2, r4
1a015912:	462b      	mov	r3, r5
1a015914:	f7fe f870 	bl	1a0139f8 <__aeabi_dmul>
1a015918:	a38b      	add	r3, pc, #556	; (adr r3, 1a015b48 <__ieee754_acos+0x2d0>)
1a01591a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01591e:	f7fd feb7 	bl	1a013690 <__aeabi_dsub>
1a015922:	4622      	mov	r2, r4
1a015924:	462b      	mov	r3, r5
1a015926:	f7fe f867 	bl	1a0139f8 <__aeabi_dmul>
1a01592a:	a389      	add	r3, pc, #548	; (adr r3, 1a015b50 <__ieee754_acos+0x2d8>)
1a01592c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015930:	f7fd feb0 	bl	1a013694 <__adddf3>
1a015934:	4622      	mov	r2, r4
1a015936:	462b      	mov	r3, r5
1a015938:	f7fe f85e 	bl	1a0139f8 <__aeabi_dmul>
1a01593c:	a386      	add	r3, pc, #536	; (adr r3, 1a015b58 <__ieee754_acos+0x2e0>)
1a01593e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015942:	4682      	mov	sl, r0
1a015944:	468b      	mov	fp, r1
1a015946:	4620      	mov	r0, r4
1a015948:	4629      	mov	r1, r5
1a01594a:	f7fe f855 	bl	1a0139f8 <__aeabi_dmul>
1a01594e:	a384      	add	r3, pc, #528	; (adr r3, 1a015b60 <__ieee754_acos+0x2e8>)
1a015950:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015954:	f7fd fe9c 	bl	1a013690 <__aeabi_dsub>
1a015958:	4622      	mov	r2, r4
1a01595a:	462b      	mov	r3, r5
1a01595c:	f7fe f84c 	bl	1a0139f8 <__aeabi_dmul>
1a015960:	a381      	add	r3, pc, #516	; (adr r3, 1a015b68 <__ieee754_acos+0x2f0>)
1a015962:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015966:	f7fd fe95 	bl	1a013694 <__adddf3>
1a01596a:	4622      	mov	r2, r4
1a01596c:	462b      	mov	r3, r5
1a01596e:	f7fe f843 	bl	1a0139f8 <__aeabi_dmul>
1a015972:	a37f      	add	r3, pc, #508	; (adr r3, 1a015b70 <__ieee754_acos+0x2f8>)
1a015974:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015978:	f7fd fe8a 	bl	1a013690 <__aeabi_dsub>
1a01597c:	4622      	mov	r2, r4
1a01597e:	462b      	mov	r3, r5
1a015980:	f7fe f83a 	bl	1a0139f8 <__aeabi_dmul>
1a015984:	2200      	movs	r2, #0
1a015986:	4b84      	ldr	r3, [pc, #528]	; (1a015b98 <__ieee754_acos+0x320>)
1a015988:	f7fd fe84 	bl	1a013694 <__adddf3>
1a01598c:	4602      	mov	r2, r0
1a01598e:	460b      	mov	r3, r1
1a015990:	4650      	mov	r0, sl
1a015992:	4659      	mov	r1, fp
1a015994:	f7fe f95a 	bl	1a013c4c <__aeabi_ddiv>
1a015998:	4642      	mov	r2, r8
1a01599a:	464b      	mov	r3, r9
1a01599c:	f7fe f82c 	bl	1a0139f8 <__aeabi_dmul>
1a0159a0:	2600      	movs	r6, #0
1a0159a2:	4682      	mov	sl, r0
1a0159a4:	468b      	mov	fp, r1
1a0159a6:	4632      	mov	r2, r6
1a0159a8:	464b      	mov	r3, r9
1a0159aa:	4630      	mov	r0, r6
1a0159ac:	4649      	mov	r1, r9
1a0159ae:	f7fe f823 	bl	1a0139f8 <__aeabi_dmul>
1a0159b2:	4602      	mov	r2, r0
1a0159b4:	460b      	mov	r3, r1
1a0159b6:	4620      	mov	r0, r4
1a0159b8:	4629      	mov	r1, r5
1a0159ba:	f7fd fe69 	bl	1a013690 <__aeabi_dsub>
1a0159be:	4632      	mov	r2, r6
1a0159c0:	4604      	mov	r4, r0
1a0159c2:	460d      	mov	r5, r1
1a0159c4:	464b      	mov	r3, r9
1a0159c6:	4640      	mov	r0, r8
1a0159c8:	4649      	mov	r1, r9
1a0159ca:	f7fd fe63 	bl	1a013694 <__adddf3>
1a0159ce:	4602      	mov	r2, r0
1a0159d0:	460b      	mov	r3, r1
1a0159d2:	4620      	mov	r0, r4
1a0159d4:	4629      	mov	r1, r5
1a0159d6:	f7fe f939 	bl	1a013c4c <__aeabi_ddiv>
1a0159da:	4602      	mov	r2, r0
1a0159dc:	460b      	mov	r3, r1
1a0159de:	4650      	mov	r0, sl
1a0159e0:	4659      	mov	r1, fp
1a0159e2:	f7fd fe57 	bl	1a013694 <__adddf3>
1a0159e6:	4632      	mov	r2, r6
1a0159e8:	464b      	mov	r3, r9
1a0159ea:	f7fd fe53 	bl	1a013694 <__adddf3>
1a0159ee:	4602      	mov	r2, r0
1a0159f0:	460b      	mov	r3, r1
1a0159f2:	f7fd fe4f 	bl	1a013694 <__adddf3>
1a0159f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0159fa:	4a69      	ldr	r2, [pc, #420]	; (1a015ba0 <__ieee754_acos+0x328>)
1a0159fc:	4293      	cmp	r3, r2
1a0159fe:	dc0e      	bgt.n	1a015a1e <__ieee754_acos+0x1a6>
1a015a00:	a15d      	add	r1, pc, #372	; (adr r1, 1a015b78 <__ieee754_acos+0x300>)
1a015a02:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015a06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015a0a:	4602      	mov	r2, r0
1a015a0c:	460b      	mov	r3, r1
1a015a0e:	f7fd fe3f 	bl	1a013690 <__aeabi_dsub>
1a015a12:	4602      	mov	r2, r0
1a015a14:	460b      	mov	r3, r1
1a015a16:	f7fe f919 	bl	1a013c4c <__aeabi_ddiv>
1a015a1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015a1e:	4602      	mov	r2, r0
1a015a20:	460b      	mov	r3, r1
1a015a22:	f7fd ffe9 	bl	1a0139f8 <__aeabi_dmul>
1a015a26:	a340      	add	r3, pc, #256	; (adr r3, 1a015b28 <__ieee754_acos+0x2b0>)
1a015a28:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015a2c:	4606      	mov	r6, r0
1a015a2e:	460f      	mov	r7, r1
1a015a30:	f7fd ffe2 	bl	1a0139f8 <__aeabi_dmul>
1a015a34:	a33e      	add	r3, pc, #248	; (adr r3, 1a015b30 <__ieee754_acos+0x2b8>)
1a015a36:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015a3a:	f7fd fe2b 	bl	1a013694 <__adddf3>
1a015a3e:	4632      	mov	r2, r6
1a015a40:	463b      	mov	r3, r7
1a015a42:	f7fd ffd9 	bl	1a0139f8 <__aeabi_dmul>
1a015a46:	a33c      	add	r3, pc, #240	; (adr r3, 1a015b38 <__ieee754_acos+0x2c0>)
1a015a48:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015a4c:	f7fd fe20 	bl	1a013690 <__aeabi_dsub>
1a015a50:	4632      	mov	r2, r6
1a015a52:	463b      	mov	r3, r7
1a015a54:	f7fd ffd0 	bl	1a0139f8 <__aeabi_dmul>
1a015a58:	a339      	add	r3, pc, #228	; (adr r3, 1a015b40 <__ieee754_acos+0x2c8>)
1a015a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015a5e:	f7fd fe19 	bl	1a013694 <__adddf3>
1a015a62:	4632      	mov	r2, r6
1a015a64:	463b      	mov	r3, r7
1a015a66:	f7fd ffc7 	bl	1a0139f8 <__aeabi_dmul>
1a015a6a:	a337      	add	r3, pc, #220	; (adr r3, 1a015b48 <__ieee754_acos+0x2d0>)
1a015a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015a70:	f7fd fe0e 	bl	1a013690 <__aeabi_dsub>
1a015a74:	4632      	mov	r2, r6
1a015a76:	463b      	mov	r3, r7
1a015a78:	f7fd ffbe 	bl	1a0139f8 <__aeabi_dmul>
1a015a7c:	a334      	add	r3, pc, #208	; (adr r3, 1a015b50 <__ieee754_acos+0x2d8>)
1a015a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015a82:	f7fd fe07 	bl	1a013694 <__adddf3>
1a015a86:	4632      	mov	r2, r6
1a015a88:	463b      	mov	r3, r7
1a015a8a:	f7fd ffb5 	bl	1a0139f8 <__aeabi_dmul>
1a015a8e:	a332      	add	r3, pc, #200	; (adr r3, 1a015b58 <__ieee754_acos+0x2e0>)
1a015a90:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015a94:	4680      	mov	r8, r0
1a015a96:	4689      	mov	r9, r1
1a015a98:	4630      	mov	r0, r6
1a015a9a:	4639      	mov	r1, r7
1a015a9c:	f7fd ffac 	bl	1a0139f8 <__aeabi_dmul>
1a015aa0:	a32f      	add	r3, pc, #188	; (adr r3, 1a015b60 <__ieee754_acos+0x2e8>)
1a015aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015aa6:	f7fd fdf3 	bl	1a013690 <__aeabi_dsub>
1a015aaa:	4632      	mov	r2, r6
1a015aac:	463b      	mov	r3, r7
1a015aae:	f7fd ffa3 	bl	1a0139f8 <__aeabi_dmul>
1a015ab2:	a32d      	add	r3, pc, #180	; (adr r3, 1a015b68 <__ieee754_acos+0x2f0>)
1a015ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015ab8:	f7fd fdec 	bl	1a013694 <__adddf3>
1a015abc:	4632      	mov	r2, r6
1a015abe:	463b      	mov	r3, r7
1a015ac0:	f7fd ff9a 	bl	1a0139f8 <__aeabi_dmul>
1a015ac4:	a32a      	add	r3, pc, #168	; (adr r3, 1a015b70 <__ieee754_acos+0x2f8>)
1a015ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015aca:	f7fd fde1 	bl	1a013690 <__aeabi_dsub>
1a015ace:	4632      	mov	r2, r6
1a015ad0:	463b      	mov	r3, r7
1a015ad2:	f7fd ff91 	bl	1a0139f8 <__aeabi_dmul>
1a015ad6:	2200      	movs	r2, #0
1a015ad8:	4b2f      	ldr	r3, [pc, #188]	; (1a015b98 <__ieee754_acos+0x320>)
1a015ada:	f7fd fddb 	bl	1a013694 <__adddf3>
1a015ade:	4602      	mov	r2, r0
1a015ae0:	460b      	mov	r3, r1
1a015ae2:	4640      	mov	r0, r8
1a015ae4:	4649      	mov	r1, r9
1a015ae6:	f7fe f8b1 	bl	1a013c4c <__aeabi_ddiv>
1a015aea:	4622      	mov	r2, r4
1a015aec:	462b      	mov	r3, r5
1a015aee:	f7fd ff83 	bl	1a0139f8 <__aeabi_dmul>
1a015af2:	4602      	mov	r2, r0
1a015af4:	460b      	mov	r3, r1
1a015af6:	a122      	add	r1, pc, #136	; (adr r1, 1a015b80 <__ieee754_acos+0x308>)
1a015af8:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015afc:	f7fd fdc8 	bl	1a013690 <__aeabi_dsub>
1a015b00:	4602      	mov	r2, r0
1a015b02:	460b      	mov	r3, r1
1a015b04:	4620      	mov	r0, r4
1a015b06:	4629      	mov	r1, r5
1a015b08:	f7fd fdc2 	bl	1a013690 <__aeabi_dsub>
1a015b0c:	4602      	mov	r2, r0
1a015b0e:	460b      	mov	r3, r1
1a015b10:	a119      	add	r1, pc, #100	; (adr r1, 1a015b78 <__ieee754_acos+0x300>)
1a015b12:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015b16:	f7fd fdbb 	bl	1a013690 <__aeabi_dsub>
1a015b1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015b1e:	a11a      	add	r1, pc, #104	; (adr r1, 1a015b88 <__ieee754_acos+0x310>)
1a015b20:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015b24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015b28:	0dfdf709 	.word	0x0dfdf709
1a015b2c:	3f023de1 	.word	0x3f023de1
1a015b30:	7501b288 	.word	0x7501b288
1a015b34:	3f49efe0 	.word	0x3f49efe0
1a015b38:	b5688f3b 	.word	0xb5688f3b
1a015b3c:	3fa48228 	.word	0x3fa48228
1a015b40:	0e884455 	.word	0x0e884455
1a015b44:	3fc9c155 	.word	0x3fc9c155
1a015b48:	03eb6f7d 	.word	0x03eb6f7d
1a015b4c:	3fd4d612 	.word	0x3fd4d612
1a015b50:	55555555 	.word	0x55555555
1a015b54:	3fc55555 	.word	0x3fc55555
1a015b58:	b12e9282 	.word	0xb12e9282
1a015b5c:	3fb3b8c5 	.word	0x3fb3b8c5
1a015b60:	1b8d0159 	.word	0x1b8d0159
1a015b64:	3fe6066c 	.word	0x3fe6066c
1a015b68:	9c598ac8 	.word	0x9c598ac8
1a015b6c:	40002ae5 	.word	0x40002ae5
1a015b70:	1c8a2d4b 	.word	0x1c8a2d4b
1a015b74:	40033a27 	.word	0x40033a27
1a015b78:	54442d18 	.word	0x54442d18
1a015b7c:	3ff921fb 	.word	0x3ff921fb
1a015b80:	33145c07 	.word	0x33145c07
1a015b84:	3c91a626 	.word	0x3c91a626
1a015b88:	54442d18 	.word	0x54442d18
1a015b8c:	400921fb 	.word	0x400921fb
1a015b90:	3fefffff 	.word	0x3fefffff
1a015b94:	3fdfffff 	.word	0x3fdfffff
1a015b98:	3ff00000 	.word	0x3ff00000
1a015b9c:	3fe00000 	.word	0x3fe00000
1a015ba0:	3c600000 	.word	0x3c600000
1a015ba4:	2200      	movs	r2, #0
1a015ba6:	4b5c      	ldr	r3, [pc, #368]	; (1a015d18 <__ieee754_acos+0x4a0>)
1a015ba8:	f7fd fd74 	bl	1a013694 <__adddf3>
1a015bac:	2200      	movs	r2, #0
1a015bae:	4b5b      	ldr	r3, [pc, #364]	; (1a015d1c <__ieee754_acos+0x4a4>)
1a015bb0:	f7fd ff22 	bl	1a0139f8 <__aeabi_dmul>
1a015bb4:	a340      	add	r3, pc, #256	; (adr r3, 1a015cb8 <__ieee754_acos+0x440>)
1a015bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015bba:	4604      	mov	r4, r0
1a015bbc:	460d      	mov	r5, r1
1a015bbe:	f7fd ff1b 	bl	1a0139f8 <__aeabi_dmul>
1a015bc2:	a33f      	add	r3, pc, #252	; (adr r3, 1a015cc0 <__ieee754_acos+0x448>)
1a015bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015bc8:	f7fd fd64 	bl	1a013694 <__adddf3>
1a015bcc:	4622      	mov	r2, r4
1a015bce:	462b      	mov	r3, r5
1a015bd0:	f7fd ff12 	bl	1a0139f8 <__aeabi_dmul>
1a015bd4:	a33c      	add	r3, pc, #240	; (adr r3, 1a015cc8 <__ieee754_acos+0x450>)
1a015bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015bda:	f7fd fd59 	bl	1a013690 <__aeabi_dsub>
1a015bde:	4622      	mov	r2, r4
1a015be0:	462b      	mov	r3, r5
1a015be2:	f7fd ff09 	bl	1a0139f8 <__aeabi_dmul>
1a015be6:	a33a      	add	r3, pc, #232	; (adr r3, 1a015cd0 <__ieee754_acos+0x458>)
1a015be8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015bec:	f7fd fd52 	bl	1a013694 <__adddf3>
1a015bf0:	4622      	mov	r2, r4
1a015bf2:	462b      	mov	r3, r5
1a015bf4:	f7fd ff00 	bl	1a0139f8 <__aeabi_dmul>
1a015bf8:	a337      	add	r3, pc, #220	; (adr r3, 1a015cd8 <__ieee754_acos+0x460>)
1a015bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015bfe:	f7fd fd47 	bl	1a013690 <__aeabi_dsub>
1a015c02:	4622      	mov	r2, r4
1a015c04:	462b      	mov	r3, r5
1a015c06:	f7fd fef7 	bl	1a0139f8 <__aeabi_dmul>
1a015c0a:	a335      	add	r3, pc, #212	; (adr r3, 1a015ce0 <__ieee754_acos+0x468>)
1a015c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015c10:	f7fd fd40 	bl	1a013694 <__adddf3>
1a015c14:	4622      	mov	r2, r4
1a015c16:	462b      	mov	r3, r5
1a015c18:	f7fd feee 	bl	1a0139f8 <__aeabi_dmul>
1a015c1c:	4680      	mov	r8, r0
1a015c1e:	4689      	mov	r9, r1
1a015c20:	4620      	mov	r0, r4
1a015c22:	4629      	mov	r1, r5
1a015c24:	f000 fd8a 	bl	1a01673c <__ieee754_sqrt>
1a015c28:	a32f      	add	r3, pc, #188	; (adr r3, 1a015ce8 <__ieee754_acos+0x470>)
1a015c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015c2e:	4606      	mov	r6, r0
1a015c30:	460f      	mov	r7, r1
1a015c32:	4620      	mov	r0, r4
1a015c34:	4629      	mov	r1, r5
1a015c36:	f7fd fedf 	bl	1a0139f8 <__aeabi_dmul>
1a015c3a:	a32d      	add	r3, pc, #180	; (adr r3, 1a015cf0 <__ieee754_acos+0x478>)
1a015c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015c40:	f7fd fd26 	bl	1a013690 <__aeabi_dsub>
1a015c44:	4622      	mov	r2, r4
1a015c46:	462b      	mov	r3, r5
1a015c48:	f7fd fed6 	bl	1a0139f8 <__aeabi_dmul>
1a015c4c:	a32a      	add	r3, pc, #168	; (adr r3, 1a015cf8 <__ieee754_acos+0x480>)
1a015c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015c52:	f7fd fd1f 	bl	1a013694 <__adddf3>
1a015c56:	4622      	mov	r2, r4
1a015c58:	462b      	mov	r3, r5
1a015c5a:	f7fd fecd 	bl	1a0139f8 <__aeabi_dmul>
1a015c5e:	a328      	add	r3, pc, #160	; (adr r3, 1a015d00 <__ieee754_acos+0x488>)
1a015c60:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015c64:	f7fd fd14 	bl	1a013690 <__aeabi_dsub>
1a015c68:	4622      	mov	r2, r4
1a015c6a:	462b      	mov	r3, r5
1a015c6c:	f7fd fec4 	bl	1a0139f8 <__aeabi_dmul>
1a015c70:	2200      	movs	r2, #0
1a015c72:	4b29      	ldr	r3, [pc, #164]	; (1a015d18 <__ieee754_acos+0x4a0>)
1a015c74:	f7fd fd0e 	bl	1a013694 <__adddf3>
1a015c78:	4602      	mov	r2, r0
1a015c7a:	460b      	mov	r3, r1
1a015c7c:	4640      	mov	r0, r8
1a015c7e:	4649      	mov	r1, r9
1a015c80:	f7fd ffe4 	bl	1a013c4c <__aeabi_ddiv>
1a015c84:	4632      	mov	r2, r6
1a015c86:	463b      	mov	r3, r7
1a015c88:	f7fd feb6 	bl	1a0139f8 <__aeabi_dmul>
1a015c8c:	a31e      	add	r3, pc, #120	; (adr r3, 1a015d08 <__ieee754_acos+0x490>)
1a015c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015c92:	f7fd fcfd 	bl	1a013690 <__aeabi_dsub>
1a015c96:	4632      	mov	r2, r6
1a015c98:	463b      	mov	r3, r7
1a015c9a:	f7fd fcfb 	bl	1a013694 <__adddf3>
1a015c9e:	4602      	mov	r2, r0
1a015ca0:	460b      	mov	r3, r1
1a015ca2:	f7fd fcf7 	bl	1a013694 <__adddf3>
1a015ca6:	4602      	mov	r2, r0
1a015ca8:	460b      	mov	r3, r1
1a015caa:	a119      	add	r1, pc, #100	; (adr r1, 1a015d10 <__ieee754_acos+0x498>)
1a015cac:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015cb0:	f7fd fcee 	bl	1a013690 <__aeabi_dsub>
1a015cb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015cb8:	0dfdf709 	.word	0x0dfdf709
1a015cbc:	3f023de1 	.word	0x3f023de1
1a015cc0:	7501b288 	.word	0x7501b288
1a015cc4:	3f49efe0 	.word	0x3f49efe0
1a015cc8:	b5688f3b 	.word	0xb5688f3b
1a015ccc:	3fa48228 	.word	0x3fa48228
1a015cd0:	0e884455 	.word	0x0e884455
1a015cd4:	3fc9c155 	.word	0x3fc9c155
1a015cd8:	03eb6f7d 	.word	0x03eb6f7d
1a015cdc:	3fd4d612 	.word	0x3fd4d612
1a015ce0:	55555555 	.word	0x55555555
1a015ce4:	3fc55555 	.word	0x3fc55555
1a015ce8:	b12e9282 	.word	0xb12e9282
1a015cec:	3fb3b8c5 	.word	0x3fb3b8c5
1a015cf0:	1b8d0159 	.word	0x1b8d0159
1a015cf4:	3fe6066c 	.word	0x3fe6066c
1a015cf8:	9c598ac8 	.word	0x9c598ac8
1a015cfc:	40002ae5 	.word	0x40002ae5
1a015d00:	1c8a2d4b 	.word	0x1c8a2d4b
1a015d04:	40033a27 	.word	0x40033a27
1a015d08:	33145c07 	.word	0x33145c07
1a015d0c:	3c91a626 	.word	0x3c91a626
1a015d10:	54442d18 	.word	0x54442d18
1a015d14:	400921fb 	.word	0x400921fb
1a015d18:	3ff00000 	.word	0x3ff00000
1a015d1c:	3fe00000 	.word	0x3fe00000

1a015d20 <__ieee754_atan2>:
1a015d20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a015d24:	461d      	mov	r5, r3
1a015d26:	4253      	negs	r3, r2
1a015d28:	4313      	orrs	r3, r2
1a015d2a:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
1a015d2e:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 1a015f10 <__ieee754_atan2+0x1f0>
1a015d32:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
1a015d36:	4573      	cmp	r3, lr
1a015d38:	4614      	mov	r4, r2
1a015d3a:	4606      	mov	r6, r0
1a015d3c:	460f      	mov	r7, r1
1a015d3e:	d847      	bhi.n	1a015dd0 <__ieee754_atan2+0xb0>
1a015d40:	f1c0 0800 	rsb	r8, r0, #0
1a015d44:	ea48 0800 	orr.w	r8, r8, r0
1a015d48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a015d4c:	ea43 78d8 	orr.w	r8, r3, r8, lsr #31
1a015d50:	45f0      	cmp	r8, lr
1a015d52:	468b      	mov	fp, r1
1a015d54:	d83c      	bhi.n	1a015dd0 <__ieee754_atan2+0xb0>
1a015d56:	f105 4840 	add.w	r8, r5, #3221225472	; 0xc0000000
1a015d5a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
1a015d5e:	ea58 0802 	orrs.w	r8, r8, r2
1a015d62:	d050      	beq.n	1a015e06 <__ieee754_atan2+0xe6>
1a015d64:	ea4f 78a5 	mov.w	r8, r5, asr #30
1a015d68:	f008 0802 	and.w	r8, r8, #2
1a015d6c:	ea48 78d1 	orr.w	r8, r8, r1, lsr #31
1a015d70:	ea50 0103 	orrs.w	r1, r0, r3
1a015d74:	d034      	beq.n	1a015de0 <__ieee754_atan2+0xc0>
1a015d76:	ea52 020a 	orrs.w	r2, r2, sl
1a015d7a:	d03c      	beq.n	1a015df6 <__ieee754_atan2+0xd6>
1a015d7c:	45f2      	cmp	sl, lr
1a015d7e:	d057      	beq.n	1a015e30 <__ieee754_atan2+0x110>
1a015d80:	4573      	cmp	r3, lr
1a015d82:	d038      	beq.n	1a015df6 <__ieee754_atan2+0xd6>
1a015d84:	ebca 0303 	rsb	r3, sl, r3
1a015d88:	151b      	asrs	r3, r3, #20
1a015d8a:	2b3c      	cmp	r3, #60	; 0x3c
1a015d8c:	dc42      	bgt.n	1a015e14 <__ieee754_atan2+0xf4>
1a015d8e:	2d00      	cmp	r5, #0
1a015d90:	db70      	blt.n	1a015e74 <__ieee754_atan2+0x154>
1a015d92:	4622      	mov	r2, r4
1a015d94:	462b      	mov	r3, r5
1a015d96:	4630      	mov	r0, r6
1a015d98:	4639      	mov	r1, r7
1a015d9a:	f7fd ff57 	bl	1a013c4c <__aeabi_ddiv>
1a015d9e:	f7ff fa17 	bl	1a0151d0 <fabs>
1a015da2:	f7ff f82d 	bl	1a014e00 <atan>
1a015da6:	f1b8 0f01 	cmp.w	r8, #1
1a015daa:	d05f      	beq.n	1a015e6c <__ieee754_atan2+0x14c>
1a015dac:	f1b8 0f02 	cmp.w	r8, #2
1a015db0:	d04e      	beq.n	1a015e50 <__ieee754_atan2+0x130>
1a015db2:	f1b8 0f00 	cmp.w	r8, #0
1a015db6:	d062      	beq.n	1a015e7e <__ieee754_atan2+0x15e>
1a015db8:	a343      	add	r3, pc, #268	; (adr r3, 1a015ec8 <__ieee754_atan2+0x1a8>)
1a015dba:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015dbe:	f7fd fc67 	bl	1a013690 <__aeabi_dsub>
1a015dc2:	a343      	add	r3, pc, #268	; (adr r3, 1a015ed0 <__ieee754_atan2+0x1b0>)
1a015dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015dc8:	f7fd fc62 	bl	1a013690 <__aeabi_dsub>
1a015dcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015dd0:	4632      	mov	r2, r6
1a015dd2:	463b      	mov	r3, r7
1a015dd4:	4620      	mov	r0, r4
1a015dd6:	4629      	mov	r1, r5
1a015dd8:	f7fd fc5c 	bl	1a013694 <__adddf3>
1a015ddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015de0:	f1b8 0f02 	cmp.w	r8, #2
1a015de4:	d01a      	beq.n	1a015e1c <__ieee754_atan2+0xfc>
1a015de6:	f1b8 0f03 	cmp.w	r8, #3
1a015dea:	d110      	bne.n	1a015e0e <__ieee754_atan2+0xee>
1a015dec:	a13a      	add	r1, pc, #232	; (adr r1, 1a015ed8 <__ieee754_atan2+0x1b8>)
1a015dee:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015df2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015df6:	f1bb 0f00 	cmp.w	fp, #0
1a015dfa:	db14      	blt.n	1a015e26 <__ieee754_atan2+0x106>
1a015dfc:	a138      	add	r1, pc, #224	; (adr r1, 1a015ee0 <__ieee754_atan2+0x1c0>)
1a015dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015e02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015e06:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a015e0a:	f7fe bff9 	b.w	1a014e00 <atan>
1a015e0e:	4639      	mov	r1, r7
1a015e10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015e14:	a132      	add	r1, pc, #200	; (adr r1, 1a015ee0 <__ieee754_atan2+0x1c0>)
1a015e16:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015e1a:	e7c4      	b.n	1a015da6 <__ieee754_atan2+0x86>
1a015e1c:	a12c      	add	r1, pc, #176	; (adr r1, 1a015ed0 <__ieee754_atan2+0x1b0>)
1a015e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015e22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015e26:	a130      	add	r1, pc, #192	; (adr r1, 1a015ee8 <__ieee754_atan2+0x1c8>)
1a015e28:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015e2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015e30:	4553      	cmp	r3, sl
1a015e32:	d026      	beq.n	1a015e82 <__ieee754_atan2+0x162>
1a015e34:	f1b8 0f02 	cmp.w	r8, #2
1a015e38:	d0f0      	beq.n	1a015e1c <__ieee754_atan2+0xfc>
1a015e3a:	f1b8 0f03 	cmp.w	r8, #3
1a015e3e:	d0d5      	beq.n	1a015dec <__ieee754_atan2+0xcc>
1a015e40:	f1b8 0f01 	cmp.w	r8, #1
1a015e44:	f04f 0000 	mov.w	r0, #0
1a015e48:	d029      	beq.n	1a015e9e <__ieee754_atan2+0x17e>
1a015e4a:	2100      	movs	r1, #0
1a015e4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015e50:	a31d      	add	r3, pc, #116	; (adr r3, 1a015ec8 <__ieee754_atan2+0x1a8>)
1a015e52:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015e56:	f7fd fc1b 	bl	1a013690 <__aeabi_dsub>
1a015e5a:	4602      	mov	r2, r0
1a015e5c:	460b      	mov	r3, r1
1a015e5e:	a11c      	add	r1, pc, #112	; (adr r1, 1a015ed0 <__ieee754_atan2+0x1b0>)
1a015e60:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015e64:	f7fd fc14 	bl	1a013690 <__aeabi_dsub>
1a015e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015e6c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
1a015e70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015e74:	333c      	adds	r3, #60	; 0x3c
1a015e76:	da8c      	bge.n	1a015d92 <__ieee754_atan2+0x72>
1a015e78:	2000      	movs	r0, #0
1a015e7a:	2100      	movs	r1, #0
1a015e7c:	e793      	b.n	1a015da6 <__ieee754_atan2+0x86>
1a015e7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015e82:	f1b8 0f02 	cmp.w	r8, #2
1a015e86:	d018      	beq.n	1a015eba <__ieee754_atan2+0x19a>
1a015e88:	f1b8 0f03 	cmp.w	r8, #3
1a015e8c:	d010      	beq.n	1a015eb0 <__ieee754_atan2+0x190>
1a015e8e:	f1b8 0f01 	cmp.w	r8, #1
1a015e92:	d008      	beq.n	1a015ea6 <__ieee754_atan2+0x186>
1a015e94:	a116      	add	r1, pc, #88	; (adr r1, 1a015ef0 <__ieee754_atan2+0x1d0>)
1a015e96:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015e9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015e9e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
1a015ea2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015ea6:	a114      	add	r1, pc, #80	; (adr r1, 1a015ef8 <__ieee754_atan2+0x1d8>)
1a015ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015eac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015eb0:	a113      	add	r1, pc, #76	; (adr r1, 1a015f00 <__ieee754_atan2+0x1e0>)
1a015eb2:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015eb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015eba:	a113      	add	r1, pc, #76	; (adr r1, 1a015f08 <__ieee754_atan2+0x1e8>)
1a015ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015ec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015ec4:	f3af 8000 	nop.w
1a015ec8:	33145c07 	.word	0x33145c07
1a015ecc:	3ca1a626 	.word	0x3ca1a626
1a015ed0:	54442d18 	.word	0x54442d18
1a015ed4:	400921fb 	.word	0x400921fb
1a015ed8:	54442d18 	.word	0x54442d18
1a015edc:	c00921fb 	.word	0xc00921fb
1a015ee0:	54442d18 	.word	0x54442d18
1a015ee4:	3ff921fb 	.word	0x3ff921fb
1a015ee8:	54442d18 	.word	0x54442d18
1a015eec:	bff921fb 	.word	0xbff921fb
1a015ef0:	54442d18 	.word	0x54442d18
1a015ef4:	3fe921fb 	.word	0x3fe921fb
1a015ef8:	54442d18 	.word	0x54442d18
1a015efc:	bfe921fb 	.word	0xbfe921fb
1a015f00:	7f3321d2 	.word	0x7f3321d2
1a015f04:	c002d97c 	.word	0xc002d97c
1a015f08:	7f3321d2 	.word	0x7f3321d2
1a015f0c:	4002d97c 	.word	0x4002d97c
1a015f10:	7ff00000 	.word	0x7ff00000
1a015f14:	ffffffff 	.word	0xffffffff

1a015f18 <__ieee754_log>:
1a015f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a015f1c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a015f20:	b085      	sub	sp, #20
1a015f22:	4606      	mov	r6, r0
1a015f24:	460f      	mov	r7, r1
1a015f26:	460b      	mov	r3, r1
1a015f28:	da5a      	bge.n	1a015fe0 <__ieee754_log+0xc8>
1a015f2a:	4602      	mov	r2, r0
1a015f2c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
1a015f30:	4322      	orrs	r2, r4
1a015f32:	f000 80f8 	beq.w	1a016126 <__ieee754_log+0x20e>
1a015f36:	2900      	cmp	r1, #0
1a015f38:	f2c0 817a 	blt.w	1a016230 <__ieee754_log+0x318>
1a015f3c:	2200      	movs	r2, #0
1a015f3e:	4bd6      	ldr	r3, [pc, #856]	; (1a016298 <__ieee754_log+0x380>)
1a015f40:	f7fd fd5a 	bl	1a0139f8 <__aeabi_dmul>
1a015f44:	460b      	mov	r3, r1
1a015f46:	460f      	mov	r7, r1
1a015f48:	49d4      	ldr	r1, [pc, #848]	; (1a01629c <__ieee754_log+0x384>)
1a015f4a:	428b      	cmp	r3, r1
1a015f4c:	4606      	mov	r6, r0
1a015f4e:	f06f 0235 	mvn.w	r2, #53	; 0x35
1a015f52:	dc4a      	bgt.n	1a015fea <__ieee754_log+0xd2>
1a015f54:	f3c3 0513 	ubfx	r5, r3, #0, #20
1a015f58:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
1a015f5c:	f604 7464 	addw	r4, r4, #3940	; 0xf64
1a015f60:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
1a015f64:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
1a015f68:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
1a015f6c:	151b      	asrs	r3, r3, #20
1a015f6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
1a015f72:	ea41 0705 	orr.w	r7, r1, r5
1a015f76:	189c      	adds	r4, r3, r2
1a015f78:	4630      	mov	r0, r6
1a015f7a:	2200      	movs	r2, #0
1a015f7c:	4bc8      	ldr	r3, [pc, #800]	; (1a0162a0 <__ieee754_log+0x388>)
1a015f7e:	4639      	mov	r1, r7
1a015f80:	eb04 541e 	add.w	r4, r4, lr, lsr #20
1a015f84:	f7fd fb84 	bl	1a013690 <__aeabi_dsub>
1a015f88:	1cab      	adds	r3, r5, #2
1a015f8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
1a015f8e:	2b02      	cmp	r3, #2
1a015f90:	4682      	mov	sl, r0
1a015f92:	468b      	mov	fp, r1
1a015f94:	f04f 0200 	mov.w	r2, #0
1a015f98:	dc30      	bgt.n	1a015ffc <__ieee754_log+0xe4>
1a015f9a:	2300      	movs	r3, #0
1a015f9c:	f7fd ff94 	bl	1a013ec8 <__aeabi_dcmpeq>
1a015fa0:	2800      	cmp	r0, #0
1a015fa2:	f000 80c9 	beq.w	1a016138 <__ieee754_log+0x220>
1a015fa6:	2c00      	cmp	r4, #0
1a015fa8:	f000 814b 	beq.w	1a016242 <__ieee754_log+0x32a>
1a015fac:	4620      	mov	r0, r4
1a015fae:	f7fd fcbd 	bl	1a01392c <__aeabi_i2d>
1a015fb2:	a3a5      	add	r3, pc, #660	; (adr r3, 1a016248 <__ieee754_log+0x330>)
1a015fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015fb8:	4606      	mov	r6, r0
1a015fba:	460f      	mov	r7, r1
1a015fbc:	f7fd fd1c 	bl	1a0139f8 <__aeabi_dmul>
1a015fc0:	a3a3      	add	r3, pc, #652	; (adr r3, 1a016250 <__ieee754_log+0x338>)
1a015fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015fc6:	4604      	mov	r4, r0
1a015fc8:	460d      	mov	r5, r1
1a015fca:	4630      	mov	r0, r6
1a015fcc:	4639      	mov	r1, r7
1a015fce:	f7fd fd13 	bl	1a0139f8 <__aeabi_dmul>
1a015fd2:	4602      	mov	r2, r0
1a015fd4:	460b      	mov	r3, r1
1a015fd6:	4620      	mov	r0, r4
1a015fd8:	4629      	mov	r1, r5
1a015fda:	f7fd fb5b 	bl	1a013694 <__adddf3>
1a015fde:	e00a      	b.n	1a015ff6 <__ieee754_log+0xde>
1a015fe0:	49ae      	ldr	r1, [pc, #696]	; (1a01629c <__ieee754_log+0x384>)
1a015fe2:	428b      	cmp	r3, r1
1a015fe4:	f04f 0200 	mov.w	r2, #0
1a015fe8:	ddb4      	ble.n	1a015f54 <__ieee754_log+0x3c>
1a015fea:	4632      	mov	r2, r6
1a015fec:	463b      	mov	r3, r7
1a015fee:	4630      	mov	r0, r6
1a015ff0:	4639      	mov	r1, r7
1a015ff2:	f7fd fb4f 	bl	1a013694 <__adddf3>
1a015ff6:	b005      	add	sp, #20
1a015ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015ffc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a016000:	f7fd fb48 	bl	1a013694 <__adddf3>
1a016004:	4602      	mov	r2, r0
1a016006:	460b      	mov	r3, r1
1a016008:	4650      	mov	r0, sl
1a01600a:	4659      	mov	r1, fp
1a01600c:	f7fd fe1e 	bl	1a013c4c <__aeabi_ddiv>
1a016010:	4606      	mov	r6, r0
1a016012:	4620      	mov	r0, r4
1a016014:	460f      	mov	r7, r1
1a016016:	f7fd fc89 	bl	1a01392c <__aeabi_i2d>
1a01601a:	4632      	mov	r2, r6
1a01601c:	e9cd 0100 	strd	r0, r1, [sp]
1a016020:	463b      	mov	r3, r7
1a016022:	4630      	mov	r0, r6
1a016024:	4639      	mov	r1, r7
1a016026:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a01602a:	f7fd fce5 	bl	1a0139f8 <__aeabi_dmul>
1a01602e:	4602      	mov	r2, r0
1a016030:	460b      	mov	r3, r1
1a016032:	4680      	mov	r8, r0
1a016034:	4689      	mov	r9, r1
1a016036:	f7fd fcdf 	bl	1a0139f8 <__aeabi_dmul>
1a01603a:	a387      	add	r3, pc, #540	; (adr r3, 1a016258 <__ieee754_log+0x340>)
1a01603c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016040:	4606      	mov	r6, r0
1a016042:	460f      	mov	r7, r1
1a016044:	f7fd fcd8 	bl	1a0139f8 <__aeabi_dmul>
1a016048:	a385      	add	r3, pc, #532	; (adr r3, 1a016260 <__ieee754_log+0x348>)
1a01604a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01604e:	f7fd fb21 	bl	1a013694 <__adddf3>
1a016052:	4632      	mov	r2, r6
1a016054:	463b      	mov	r3, r7
1a016056:	f7fd fccf 	bl	1a0139f8 <__aeabi_dmul>
1a01605a:	a383      	add	r3, pc, #524	; (adr r3, 1a016268 <__ieee754_log+0x350>)
1a01605c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016060:	f7fd fb18 	bl	1a013694 <__adddf3>
1a016064:	4632      	mov	r2, r6
1a016066:	463b      	mov	r3, r7
1a016068:	f7fd fcc6 	bl	1a0139f8 <__aeabi_dmul>
1a01606c:	a380      	add	r3, pc, #512	; (adr r3, 1a016270 <__ieee754_log+0x358>)
1a01606e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016072:	f7fd fb0f 	bl	1a013694 <__adddf3>
1a016076:	4642      	mov	r2, r8
1a016078:	464b      	mov	r3, r9
1a01607a:	f7fd fcbd 	bl	1a0139f8 <__aeabi_dmul>
1a01607e:	a37e      	add	r3, pc, #504	; (adr r3, 1a016278 <__ieee754_log+0x360>)
1a016080:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016084:	4680      	mov	r8, r0
1a016086:	4689      	mov	r9, r1
1a016088:	4630      	mov	r0, r6
1a01608a:	4639      	mov	r1, r7
1a01608c:	f7fd fcb4 	bl	1a0139f8 <__aeabi_dmul>
1a016090:	a37b      	add	r3, pc, #492	; (adr r3, 1a016280 <__ieee754_log+0x368>)
1a016092:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016096:	f7fd fafd 	bl	1a013694 <__adddf3>
1a01609a:	4632      	mov	r2, r6
1a01609c:	463b      	mov	r3, r7
1a01609e:	f7fd fcab 	bl	1a0139f8 <__aeabi_dmul>
1a0160a2:	a379      	add	r3, pc, #484	; (adr r3, 1a016288 <__ieee754_log+0x370>)
1a0160a4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0160a8:	f7fd faf4 	bl	1a013694 <__adddf3>
1a0160ac:	4632      	mov	r2, r6
1a0160ae:	463b      	mov	r3, r7
1a0160b0:	f7fd fca2 	bl	1a0139f8 <__aeabi_dmul>
1a0160b4:	460b      	mov	r3, r1
1a0160b6:	4602      	mov	r2, r0
1a0160b8:	4649      	mov	r1, r9
1a0160ba:	4640      	mov	r0, r8
1a0160bc:	f7fd faea 	bl	1a013694 <__adddf3>
1a0160c0:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
1a0160c4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
1a0160c8:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
1a0160cc:	3551      	adds	r5, #81	; 0x51
1a0160ce:	431d      	orrs	r5, r3
1a0160d0:	2d00      	cmp	r5, #0
1a0160d2:	4680      	mov	r8, r0
1a0160d4:	4689      	mov	r9, r1
1a0160d6:	dd56      	ble.n	1a016186 <__ieee754_log+0x26e>
1a0160d8:	2200      	movs	r2, #0
1a0160da:	4b72      	ldr	r3, [pc, #456]	; (1a0162a4 <__ieee754_log+0x38c>)
1a0160dc:	4650      	mov	r0, sl
1a0160de:	4659      	mov	r1, fp
1a0160e0:	f7fd fc8a 	bl	1a0139f8 <__aeabi_dmul>
1a0160e4:	4652      	mov	r2, sl
1a0160e6:	465b      	mov	r3, fp
1a0160e8:	f7fd fc86 	bl	1a0139f8 <__aeabi_dmul>
1a0160ec:	4606      	mov	r6, r0
1a0160ee:	460f      	mov	r7, r1
1a0160f0:	2c00      	cmp	r4, #0
1a0160f2:	d168      	bne.n	1a0161c6 <__ieee754_log+0x2ae>
1a0160f4:	4632      	mov	r2, r6
1a0160f6:	463b      	mov	r3, r7
1a0160f8:	4640      	mov	r0, r8
1a0160fa:	4649      	mov	r1, r9
1a0160fc:	f7fd faca 	bl	1a013694 <__adddf3>
1a016100:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a016104:	f7fd fc78 	bl	1a0139f8 <__aeabi_dmul>
1a016108:	4602      	mov	r2, r0
1a01610a:	460b      	mov	r3, r1
1a01610c:	4630      	mov	r0, r6
1a01610e:	4639      	mov	r1, r7
1a016110:	f7fd fabe 	bl	1a013690 <__aeabi_dsub>
1a016114:	4602      	mov	r2, r0
1a016116:	460b      	mov	r3, r1
1a016118:	4650      	mov	r0, sl
1a01611a:	4659      	mov	r1, fp
1a01611c:	f7fd fab8 	bl	1a013690 <__aeabi_dsub>
1a016120:	b005      	add	sp, #20
1a016122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a016126:	2200      	movs	r2, #0
1a016128:	2300      	movs	r3, #0
1a01612a:	2000      	movs	r0, #0
1a01612c:	495e      	ldr	r1, [pc, #376]	; (1a0162a8 <__ieee754_log+0x390>)
1a01612e:	f7fd fd8d 	bl	1a013c4c <__aeabi_ddiv>
1a016132:	b005      	add	sp, #20
1a016134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a016138:	a355      	add	r3, pc, #340	; (adr r3, 1a016290 <__ieee754_log+0x378>)
1a01613a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01613e:	4650      	mov	r0, sl
1a016140:	4659      	mov	r1, fp
1a016142:	f7fd fc59 	bl	1a0139f8 <__aeabi_dmul>
1a016146:	4602      	mov	r2, r0
1a016148:	460b      	mov	r3, r1
1a01614a:	2000      	movs	r0, #0
1a01614c:	4955      	ldr	r1, [pc, #340]	; (1a0162a4 <__ieee754_log+0x38c>)
1a01614e:	f7fd fa9f 	bl	1a013690 <__aeabi_dsub>
1a016152:	4652      	mov	r2, sl
1a016154:	4606      	mov	r6, r0
1a016156:	460f      	mov	r7, r1
1a016158:	465b      	mov	r3, fp
1a01615a:	4650      	mov	r0, sl
1a01615c:	4659      	mov	r1, fp
1a01615e:	f7fd fc4b 	bl	1a0139f8 <__aeabi_dmul>
1a016162:	4602      	mov	r2, r0
1a016164:	460b      	mov	r3, r1
1a016166:	4630      	mov	r0, r6
1a016168:	4639      	mov	r1, r7
1a01616a:	f7fd fc45 	bl	1a0139f8 <__aeabi_dmul>
1a01616e:	4606      	mov	r6, r0
1a016170:	460f      	mov	r7, r1
1a016172:	2c00      	cmp	r4, #0
1a016174:	f040 809a 	bne.w	1a0162ac <__ieee754_log+0x394>
1a016178:	4602      	mov	r2, r0
1a01617a:	460b      	mov	r3, r1
1a01617c:	4650      	mov	r0, sl
1a01617e:	4659      	mov	r1, fp
1a016180:	f7fd fa86 	bl	1a013690 <__aeabi_dsub>
1a016184:	e737      	b.n	1a015ff6 <__ieee754_log+0xde>
1a016186:	2c00      	cmp	r4, #0
1a016188:	f000 80a4 	beq.w	1a0162d4 <__ieee754_log+0x3bc>
1a01618c:	a32e      	add	r3, pc, #184	; (adr r3, 1a016248 <__ieee754_log+0x330>)
1a01618e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016192:	e9dd 0100 	ldrd	r0, r1, [sp]
1a016196:	f7fd fc2f 	bl	1a0139f8 <__aeabi_dmul>
1a01619a:	4642      	mov	r2, r8
1a01619c:	464b      	mov	r3, r9
1a01619e:	4604      	mov	r4, r0
1a0161a0:	460d      	mov	r5, r1
1a0161a2:	4650      	mov	r0, sl
1a0161a4:	4659      	mov	r1, fp
1a0161a6:	f7fd fa73 	bl	1a013690 <__aeabi_dsub>
1a0161aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0161ae:	f7fd fc23 	bl	1a0139f8 <__aeabi_dmul>
1a0161b2:	a327      	add	r3, pc, #156	; (adr r3, 1a016250 <__ieee754_log+0x338>)
1a0161b4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0161b8:	4606      	mov	r6, r0
1a0161ba:	460f      	mov	r7, r1
1a0161bc:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0161c0:	f7fd fc1a 	bl	1a0139f8 <__aeabi_dmul>
1a0161c4:	e021      	b.n	1a01620a <__ieee754_log+0x2f2>
1a0161c6:	a320      	add	r3, pc, #128	; (adr r3, 1a016248 <__ieee754_log+0x330>)
1a0161c8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0161cc:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0161d0:	f7fd fc12 	bl	1a0139f8 <__aeabi_dmul>
1a0161d4:	4632      	mov	r2, r6
1a0161d6:	463b      	mov	r3, r7
1a0161d8:	4604      	mov	r4, r0
1a0161da:	460d      	mov	r5, r1
1a0161dc:	4640      	mov	r0, r8
1a0161de:	4649      	mov	r1, r9
1a0161e0:	f7fd fa58 	bl	1a013694 <__adddf3>
1a0161e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0161e8:	f7fd fc06 	bl	1a0139f8 <__aeabi_dmul>
1a0161ec:	a318      	add	r3, pc, #96	; (adr r3, 1a016250 <__ieee754_log+0x338>)
1a0161ee:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0161f2:	4680      	mov	r8, r0
1a0161f4:	4689      	mov	r9, r1
1a0161f6:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0161fa:	f7fd fbfd 	bl	1a0139f8 <__aeabi_dmul>
1a0161fe:	4602      	mov	r2, r0
1a016200:	460b      	mov	r3, r1
1a016202:	4640      	mov	r0, r8
1a016204:	4649      	mov	r1, r9
1a016206:	f7fd fa45 	bl	1a013694 <__adddf3>
1a01620a:	4602      	mov	r2, r0
1a01620c:	460b      	mov	r3, r1
1a01620e:	4630      	mov	r0, r6
1a016210:	4639      	mov	r1, r7
1a016212:	f7fd fa3d 	bl	1a013690 <__aeabi_dsub>
1a016216:	4652      	mov	r2, sl
1a016218:	465b      	mov	r3, fp
1a01621a:	f7fd fa39 	bl	1a013690 <__aeabi_dsub>
1a01621e:	4602      	mov	r2, r0
1a016220:	460b      	mov	r3, r1
1a016222:	4620      	mov	r0, r4
1a016224:	4629      	mov	r1, r5
1a016226:	f7fd fa33 	bl	1a013690 <__aeabi_dsub>
1a01622a:	b005      	add	sp, #20
1a01622c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a016230:	4602      	mov	r2, r0
1a016232:	460b      	mov	r3, r1
1a016234:	f7fd fa2c 	bl	1a013690 <__aeabi_dsub>
1a016238:	2200      	movs	r2, #0
1a01623a:	2300      	movs	r3, #0
1a01623c:	f7fd fd06 	bl	1a013c4c <__aeabi_ddiv>
1a016240:	e6d9      	b.n	1a015ff6 <__ieee754_log+0xde>
1a016242:	2000      	movs	r0, #0
1a016244:	2100      	movs	r1, #0
1a016246:	e6d6      	b.n	1a015ff6 <__ieee754_log+0xde>
1a016248:	fee00000 	.word	0xfee00000
1a01624c:	3fe62e42 	.word	0x3fe62e42
1a016250:	35793c76 	.word	0x35793c76
1a016254:	3dea39ef 	.word	0x3dea39ef
1a016258:	df3e5244 	.word	0xdf3e5244
1a01625c:	3fc2f112 	.word	0x3fc2f112
1a016260:	96cb03de 	.word	0x96cb03de
1a016264:	3fc74664 	.word	0x3fc74664
1a016268:	94229359 	.word	0x94229359
1a01626c:	3fd24924 	.word	0x3fd24924
1a016270:	55555593 	.word	0x55555593
1a016274:	3fe55555 	.word	0x3fe55555
1a016278:	d078c69f 	.word	0xd078c69f
1a01627c:	3fc39a09 	.word	0x3fc39a09
1a016280:	1d8e78af 	.word	0x1d8e78af
1a016284:	3fcc71c5 	.word	0x3fcc71c5
1a016288:	9997fa04 	.word	0x9997fa04
1a01628c:	3fd99999 	.word	0x3fd99999
1a016290:	55555555 	.word	0x55555555
1a016294:	3fd55555 	.word	0x3fd55555
1a016298:	43500000 	.word	0x43500000
1a01629c:	7fefffff 	.word	0x7fefffff
1a0162a0:	3ff00000 	.word	0x3ff00000
1a0162a4:	3fe00000 	.word	0x3fe00000
1a0162a8:	c3500000 	.word	0xc3500000
1a0162ac:	4620      	mov	r0, r4
1a0162ae:	f7fd fb3d 	bl	1a01392c <__aeabi_i2d>
1a0162b2:	a30f      	add	r3, pc, #60	; (adr r3, 1a0162f0 <__ieee754_log+0x3d8>)
1a0162b4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0162b8:	4680      	mov	r8, r0
1a0162ba:	4689      	mov	r9, r1
1a0162bc:	f7fd fb9c 	bl	1a0139f8 <__aeabi_dmul>
1a0162c0:	a30d      	add	r3, pc, #52	; (adr r3, 1a0162f8 <__ieee754_log+0x3e0>)
1a0162c2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0162c6:	4604      	mov	r4, r0
1a0162c8:	460d      	mov	r5, r1
1a0162ca:	4640      	mov	r0, r8
1a0162cc:	4649      	mov	r1, r9
1a0162ce:	f7fd fb93 	bl	1a0139f8 <__aeabi_dmul>
1a0162d2:	e79a      	b.n	1a01620a <__ieee754_log+0x2f2>
1a0162d4:	4602      	mov	r2, r0
1a0162d6:	460b      	mov	r3, r1
1a0162d8:	4650      	mov	r0, sl
1a0162da:	4659      	mov	r1, fp
1a0162dc:	f7fd f9d8 	bl	1a013690 <__aeabi_dsub>
1a0162e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0162e4:	f7fd fb88 	bl	1a0139f8 <__aeabi_dmul>
1a0162e8:	e714      	b.n	1a016114 <__ieee754_log+0x1fc>
1a0162ea:	bf00      	nop
1a0162ec:	f3af 8000 	nop.w
1a0162f0:	fee00000 	.word	0xfee00000
1a0162f4:	3fe62e42 	.word	0x3fe62e42
1a0162f8:	35793c76 	.word	0x35793c76
1a0162fc:	3dea39ef 	.word	0x3dea39ef

1a016300 <__ieee754_rem_pio2>:
1a016300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a016304:	4b94      	ldr	r3, [pc, #592]	; (1a016558 <__ieee754_rem_pio2+0x258>)
1a016306:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
1a01630a:	459b      	cmp	fp, r3
1a01630c:	b08f      	sub	sp, #60	; 0x3c
1a01630e:	4606      	mov	r6, r0
1a016310:	460f      	mov	r7, r1
1a016312:	f340 8082 	ble.w	1a01641a <__ieee754_rem_pio2+0x11a>
1a016316:	4b91      	ldr	r3, [pc, #580]	; (1a01655c <__ieee754_rem_pio2+0x25c>)
1a016318:	459b      	cmp	fp, r3
1a01631a:	460c      	mov	r4, r1
1a01631c:	4692      	mov	sl, r2
1a01631e:	dc26      	bgt.n	1a01636e <__ieee754_rem_pio2+0x6e>
1a016320:	2900      	cmp	r1, #0
1a016322:	a383      	add	r3, pc, #524	; (adr r3, 1a016530 <__ieee754_rem_pio2+0x230>)
1a016324:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016328:	f340 81a0 	ble.w	1a01666c <__ieee754_rem_pio2+0x36c>
1a01632c:	f7fd f9b0 	bl	1a013690 <__aeabi_dsub>
1a016330:	4b8b      	ldr	r3, [pc, #556]	; (1a016560 <__ieee754_rem_pio2+0x260>)
1a016332:	459b      	cmp	fp, r3
1a016334:	4604      	mov	r4, r0
1a016336:	460d      	mov	r5, r1
1a016338:	f000 8084 	beq.w	1a016444 <__ieee754_rem_pio2+0x144>
1a01633c:	a37e      	add	r3, pc, #504	; (adr r3, 1a016538 <__ieee754_rem_pio2+0x238>)
1a01633e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016342:	f7fd f9a5 	bl	1a013690 <__aeabi_dsub>
1a016346:	4602      	mov	r2, r0
1a016348:	460b      	mov	r3, r1
1a01634a:	e9ca 2300 	strd	r2, r3, [sl]
1a01634e:	4620      	mov	r0, r4
1a016350:	4629      	mov	r1, r5
1a016352:	f7fd f99d 	bl	1a013690 <__aeabi_dsub>
1a016356:	a378      	add	r3, pc, #480	; (adr r3, 1a016538 <__ieee754_rem_pio2+0x238>)
1a016358:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01635c:	f7fd f998 	bl	1a013690 <__aeabi_dsub>
1a016360:	2501      	movs	r5, #1
1a016362:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a016366:	4628      	mov	r0, r5
1a016368:	b00f      	add	sp, #60	; 0x3c
1a01636a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a01636e:	4b7d      	ldr	r3, [pc, #500]	; (1a016564 <__ieee754_rem_pio2+0x264>)
1a016370:	459b      	cmp	fp, r3
1a016372:	f340 8084 	ble.w	1a01647e <__ieee754_rem_pio2+0x17e>
1a016376:	4b7c      	ldr	r3, [pc, #496]	; (1a016568 <__ieee754_rem_pio2+0x268>)
1a016378:	459b      	cmp	fp, r3
1a01637a:	dc59      	bgt.n	1a016430 <__ieee754_rem_pio2+0x130>
1a01637c:	ea4f 552b 	mov.w	r5, fp, asr #20
1a016380:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
1a016384:	ebab 5705 	sub.w	r7, fp, r5, lsl #20
1a016388:	4639      	mov	r1, r7
1a01638a:	4606      	mov	r6, r0
1a01638c:	f7fd fdce 	bl	1a013f2c <__aeabi_d2iz>
1a016390:	f7fd facc 	bl	1a01392c <__aeabi_i2d>
1a016394:	4680      	mov	r8, r0
1a016396:	4689      	mov	r9, r1
1a016398:	4642      	mov	r2, r8
1a01639a:	464b      	mov	r3, r9
1a01639c:	4630      	mov	r0, r6
1a01639e:	4639      	mov	r1, r7
1a0163a0:	e9cd 8908 	strd	r8, r9, [sp, #32]
1a0163a4:	f7fd f974 	bl	1a013690 <__aeabi_dsub>
1a0163a8:	2200      	movs	r2, #0
1a0163aa:	4b70      	ldr	r3, [pc, #448]	; (1a01656c <__ieee754_rem_pio2+0x26c>)
1a0163ac:	f7fd fb24 	bl	1a0139f8 <__aeabi_dmul>
1a0163b0:	4689      	mov	r9, r1
1a0163b2:	4680      	mov	r8, r0
1a0163b4:	f7fd fdba 	bl	1a013f2c <__aeabi_d2iz>
1a0163b8:	f7fd fab8 	bl	1a01392c <__aeabi_i2d>
1a0163bc:	4606      	mov	r6, r0
1a0163be:	460f      	mov	r7, r1
1a0163c0:	4632      	mov	r2, r6
1a0163c2:	463b      	mov	r3, r7
1a0163c4:	4640      	mov	r0, r8
1a0163c6:	4649      	mov	r1, r9
1a0163c8:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
1a0163cc:	f7fd f960 	bl	1a013690 <__aeabi_dsub>
1a0163d0:	2200      	movs	r2, #0
1a0163d2:	4b66      	ldr	r3, [pc, #408]	; (1a01656c <__ieee754_rem_pio2+0x26c>)
1a0163d4:	f7fd fb10 	bl	1a0139f8 <__aeabi_dmul>
1a0163d8:	2200      	movs	r2, #0
1a0163da:	2300      	movs	r3, #0
1a0163dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a0163e0:	f7fd fd72 	bl	1a013ec8 <__aeabi_dcmpeq>
1a0163e4:	2800      	cmp	r0, #0
1a0163e6:	f000 816d 	beq.w	1a0166c4 <__ieee754_rem_pio2+0x3c4>
1a0163ea:	2300      	movs	r3, #0
1a0163ec:	4630      	mov	r0, r6
1a0163ee:	4639      	mov	r1, r7
1a0163f0:	2200      	movs	r2, #0
1a0163f2:	f7fd fd69 	bl	1a013ec8 <__aeabi_dcmpeq>
1a0163f6:	2800      	cmp	r0, #0
1a0163f8:	bf14      	ite	ne
1a0163fa:	2301      	movne	r3, #1
1a0163fc:	2302      	moveq	r3, #2
1a0163fe:	4a5c      	ldr	r2, [pc, #368]	; (1a016570 <__ieee754_rem_pio2+0x270>)
1a016400:	9201      	str	r2, [sp, #4]
1a016402:	2102      	movs	r1, #2
1a016404:	9100      	str	r1, [sp, #0]
1a016406:	462a      	mov	r2, r5
1a016408:	4651      	mov	r1, sl
1a01640a:	a808      	add	r0, sp, #32
1a01640c:	f000 ff10 	bl	1a017230 <__kernel_rem_pio2>
1a016410:	2c00      	cmp	r4, #0
1a016412:	f2c0 8149 	blt.w	1a0166a8 <__ieee754_rem_pio2+0x3a8>
1a016416:	4605      	mov	r5, r0
1a016418:	e006      	b.n	1a016428 <__ieee754_rem_pio2+0x128>
1a01641a:	2000      	movs	r0, #0
1a01641c:	2100      	movs	r1, #0
1a01641e:	e9c2 6700 	strd	r6, r7, [r2]
1a016422:	e9c2 0102 	strd	r0, r1, [r2, #8]
1a016426:	2500      	movs	r5, #0
1a016428:	4628      	mov	r0, r5
1a01642a:	b00f      	add	sp, #60	; 0x3c
1a01642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a016430:	4602      	mov	r2, r0
1a016432:	460b      	mov	r3, r1
1a016434:	f7fd f92c 	bl	1a013690 <__aeabi_dsub>
1a016438:	2500      	movs	r5, #0
1a01643a:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a01643e:	e9ca 0100 	strd	r0, r1, [sl]
1a016442:	e7f1      	b.n	1a016428 <__ieee754_rem_pio2+0x128>
1a016444:	a33e      	add	r3, pc, #248	; (adr r3, 1a016540 <__ieee754_rem_pio2+0x240>)
1a016446:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01644a:	f7fd f921 	bl	1a013690 <__aeabi_dsub>
1a01644e:	a33e      	add	r3, pc, #248	; (adr r3, 1a016548 <__ieee754_rem_pio2+0x248>)
1a016450:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016454:	460d      	mov	r5, r1
1a016456:	4604      	mov	r4, r0
1a016458:	f7fd f91a 	bl	1a013690 <__aeabi_dsub>
1a01645c:	4602      	mov	r2, r0
1a01645e:	460b      	mov	r3, r1
1a016460:	e9ca 2300 	strd	r2, r3, [sl]
1a016464:	4629      	mov	r1, r5
1a016466:	4620      	mov	r0, r4
1a016468:	f7fd f912 	bl	1a013690 <__aeabi_dsub>
1a01646c:	a336      	add	r3, pc, #216	; (adr r3, 1a016548 <__ieee754_rem_pio2+0x248>)
1a01646e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016472:	f7fd f90d 	bl	1a013690 <__aeabi_dsub>
1a016476:	2501      	movs	r5, #1
1a016478:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a01647c:	e7d4      	b.n	1a016428 <__ieee754_rem_pio2+0x128>
1a01647e:	f7fe fea7 	bl	1a0151d0 <fabs>
1a016482:	a333      	add	r3, pc, #204	; (adr r3, 1a016550 <__ieee754_rem_pio2+0x250>)
1a016484:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016488:	4606      	mov	r6, r0
1a01648a:	460f      	mov	r7, r1
1a01648c:	f7fd fab4 	bl	1a0139f8 <__aeabi_dmul>
1a016490:	2200      	movs	r2, #0
1a016492:	4b38      	ldr	r3, [pc, #224]	; (1a016574 <__ieee754_rem_pio2+0x274>)
1a016494:	f7fd f8fe 	bl	1a013694 <__adddf3>
1a016498:	f7fd fd48 	bl	1a013f2c <__aeabi_d2iz>
1a01649c:	4605      	mov	r5, r0
1a01649e:	f7fd fa45 	bl	1a01392c <__aeabi_i2d>
1a0164a2:	a323      	add	r3, pc, #140	; (adr r3, 1a016530 <__ieee754_rem_pio2+0x230>)
1a0164a4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0164a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
1a0164ac:	f7fd faa4 	bl	1a0139f8 <__aeabi_dmul>
1a0164b0:	4602      	mov	r2, r0
1a0164b2:	460b      	mov	r3, r1
1a0164b4:	4630      	mov	r0, r6
1a0164b6:	4639      	mov	r1, r7
1a0164b8:	f7fd f8ea 	bl	1a013690 <__aeabi_dsub>
1a0164bc:	a31e      	add	r3, pc, #120	; (adr r3, 1a016538 <__ieee754_rem_pio2+0x238>)
1a0164be:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0164c2:	4680      	mov	r8, r0
1a0164c4:	4689      	mov	r9, r1
1a0164c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0164ca:	f7fd fa95 	bl	1a0139f8 <__aeabi_dmul>
1a0164ce:	2d1f      	cmp	r5, #31
1a0164d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a0164d4:	dc52      	bgt.n	1a01657c <__ieee754_rem_pio2+0x27c>
1a0164d6:	4b28      	ldr	r3, [pc, #160]	; (1a016578 <__ieee754_rem_pio2+0x278>)
1a0164d8:	1e6a      	subs	r2, r5, #1
1a0164da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a0164de:	459b      	cmp	fp, r3
1a0164e0:	d04c      	beq.n	1a01657c <__ieee754_rem_pio2+0x27c>
1a0164e2:	4602      	mov	r2, r0
1a0164e4:	460b      	mov	r3, r1
1a0164e6:	4640      	mov	r0, r8
1a0164e8:	4649      	mov	r1, r9
1a0164ea:	f7fd f8d1 	bl	1a013690 <__aeabi_dsub>
1a0164ee:	4606      	mov	r6, r0
1a0164f0:	460f      	mov	r7, r1
1a0164f2:	e9ca 6700 	strd	r6, r7, [sl]
1a0164f6:	4632      	mov	r2, r6
1a0164f8:	463b      	mov	r3, r7
1a0164fa:	4640      	mov	r0, r8
1a0164fc:	4649      	mov	r1, r9
1a0164fe:	f7fd f8c7 	bl	1a013690 <__aeabi_dsub>
1a016502:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a016506:	f7fd f8c3 	bl	1a013690 <__aeabi_dsub>
1a01650a:	2c00      	cmp	r4, #0
1a01650c:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a016510:	da8a      	bge.n	1a016428 <__ieee754_rem_pio2+0x128>
1a016512:	f107 4400 	add.w	r4, r7, #2147483648	; 0x80000000
1a016516:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a01651a:	426d      	negs	r5, r5
1a01651c:	f8ca 6000 	str.w	r6, [sl]
1a016520:	f8ca 4004 	str.w	r4, [sl, #4]
1a016524:	f8ca 0008 	str.w	r0, [sl, #8]
1a016528:	f8ca 300c 	str.w	r3, [sl, #12]
1a01652c:	e77c      	b.n	1a016428 <__ieee754_rem_pio2+0x128>
1a01652e:	bf00      	nop
1a016530:	54400000 	.word	0x54400000
1a016534:	3ff921fb 	.word	0x3ff921fb
1a016538:	1a626331 	.word	0x1a626331
1a01653c:	3dd0b461 	.word	0x3dd0b461
1a016540:	1a600000 	.word	0x1a600000
1a016544:	3dd0b461 	.word	0x3dd0b461
1a016548:	2e037073 	.word	0x2e037073
1a01654c:	3ba3198a 	.word	0x3ba3198a
1a016550:	6dc9c883 	.word	0x6dc9c883
1a016554:	3fe45f30 	.word	0x3fe45f30
1a016558:	3fe921fb 	.word	0x3fe921fb
1a01655c:	4002d97b 	.word	0x4002d97b
1a016560:	3ff921fb 	.word	0x3ff921fb
1a016564:	413921fb 	.word	0x413921fb
1a016568:	7fefffff 	.word	0x7fefffff
1a01656c:	41700000 	.word	0x41700000
1a016570:	1a01ac44 	.word	0x1a01ac44
1a016574:	3fe00000 	.word	0x3fe00000
1a016578:	1a01abc4 	.word	0x1a01abc4
1a01657c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a016580:	4640      	mov	r0, r8
1a016582:	4649      	mov	r1, r9
1a016584:	f7fd f884 	bl	1a013690 <__aeabi_dsub>
1a016588:	ea4f 5b2b 	mov.w	fp, fp, asr #20
1a01658c:	f3c1 530a 	ubfx	r3, r1, #20, #11
1a016590:	ebc3 030b 	rsb	r3, r3, fp
1a016594:	4606      	mov	r6, r0
1a016596:	460f      	mov	r7, r1
1a016598:	2b10      	cmp	r3, #16
1a01659a:	e9ca 6700 	strd	r6, r7, [sl]
1a01659e:	ddaa      	ble.n	1a0164f6 <__ieee754_rem_pio2+0x1f6>
1a0165a0:	a35d      	add	r3, pc, #372	; (adr r3, 1a016718 <__ieee754_rem_pio2+0x418>)
1a0165a2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0165a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0165aa:	f7fd fa25 	bl	1a0139f8 <__aeabi_dmul>
1a0165ae:	4606      	mov	r6, r0
1a0165b0:	460f      	mov	r7, r1
1a0165b2:	4602      	mov	r2, r0
1a0165b4:	460b      	mov	r3, r1
1a0165b6:	4640      	mov	r0, r8
1a0165b8:	4649      	mov	r1, r9
1a0165ba:	f7fd f869 	bl	1a013690 <__aeabi_dsub>
1a0165be:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a0165c2:	4602      	mov	r2, r0
1a0165c4:	460b      	mov	r3, r1
1a0165c6:	4640      	mov	r0, r8
1a0165c8:	4649      	mov	r1, r9
1a0165ca:	f7fd f861 	bl	1a013690 <__aeabi_dsub>
1a0165ce:	4632      	mov	r2, r6
1a0165d0:	463b      	mov	r3, r7
1a0165d2:	f7fd f85d 	bl	1a013690 <__aeabi_dsub>
1a0165d6:	a352      	add	r3, pc, #328	; (adr r3, 1a016720 <__ieee754_rem_pio2+0x420>)
1a0165d8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0165dc:	4606      	mov	r6, r0
1a0165de:	460f      	mov	r7, r1
1a0165e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0165e4:	f7fd fa08 	bl	1a0139f8 <__aeabi_dmul>
1a0165e8:	4632      	mov	r2, r6
1a0165ea:	463b      	mov	r3, r7
1a0165ec:	f7fd f850 	bl	1a013690 <__aeabi_dsub>
1a0165f0:	460b      	mov	r3, r1
1a0165f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a0165f6:	4602      	mov	r2, r0
1a0165f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0165fc:	f7fd f848 	bl	1a013690 <__aeabi_dsub>
1a016600:	f3c1 530a 	ubfx	r3, r1, #20, #11
1a016604:	ebc3 0b0b 	rsb	fp, r3, fp
1a016608:	4606      	mov	r6, r0
1a01660a:	460f      	mov	r7, r1
1a01660c:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
1a016610:	e9ca 6700 	strd	r6, r7, [sl]
1a016614:	dd76      	ble.n	1a016704 <__ieee754_rem_pio2+0x404>
1a016616:	a345      	add	r3, pc, #276	; (adr r3, 1a01672c <__ieee754_rem_pio2+0x42c>)
1a016618:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01661c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a016620:	f7fd f9ea 	bl	1a0139f8 <__aeabi_dmul>
1a016624:	4606      	mov	r6, r0
1a016626:	460f      	mov	r7, r1
1a016628:	4602      	mov	r2, r0
1a01662a:	460b      	mov	r3, r1
1a01662c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a016630:	f7fd f82e 	bl	1a013690 <__aeabi_dsub>
1a016634:	4602      	mov	r2, r0
1a016636:	460b      	mov	r3, r1
1a016638:	4680      	mov	r8, r0
1a01663a:	4689      	mov	r9, r1
1a01663c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a016640:	f7fd f826 	bl	1a013690 <__aeabi_dsub>
1a016644:	4632      	mov	r2, r6
1a016646:	463b      	mov	r3, r7
1a016648:	f7fd f822 	bl	1a013690 <__aeabi_dsub>
1a01664c:	a339      	add	r3, pc, #228	; (adr r3, 1a016734 <__ieee754_rem_pio2+0x434>)
1a01664e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016652:	4606      	mov	r6, r0
1a016654:	460f      	mov	r7, r1
1a016656:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a01665a:	f7fd f9cd 	bl	1a0139f8 <__aeabi_dmul>
1a01665e:	4632      	mov	r2, r6
1a016660:	463b      	mov	r3, r7
1a016662:	f7fd f815 	bl	1a013690 <__aeabi_dsub>
1a016666:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a01666a:	e73a      	b.n	1a0164e2 <__ieee754_rem_pio2+0x1e2>
1a01666c:	f7fd f812 	bl	1a013694 <__adddf3>
1a016670:	4b2d      	ldr	r3, [pc, #180]	; (1a016728 <__ieee754_rem_pio2+0x428>)
1a016672:	459b      	cmp	fp, r3
1a016674:	4604      	mov	r4, r0
1a016676:	460d      	mov	r5, r1
1a016678:	d026      	beq.n	1a0166c8 <__ieee754_rem_pio2+0x3c8>
1a01667a:	a325      	add	r3, pc, #148	; (adr r3, 1a016710 <__ieee754_rem_pio2+0x410>)
1a01667c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016680:	f7fd f808 	bl	1a013694 <__adddf3>
1a016684:	4602      	mov	r2, r0
1a016686:	460b      	mov	r3, r1
1a016688:	e9ca 2300 	strd	r2, r3, [sl]
1a01668c:	4629      	mov	r1, r5
1a01668e:	4620      	mov	r0, r4
1a016690:	f7fc fffe 	bl	1a013690 <__aeabi_dsub>
1a016694:	a31e      	add	r3, pc, #120	; (adr r3, 1a016710 <__ieee754_rem_pio2+0x410>)
1a016696:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01669a:	f7fc fffb 	bl	1a013694 <__adddf3>
1a01669e:	f04f 35ff 	mov.w	r5, #4294967295
1a0166a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a0166a6:	e6bf      	b.n	1a016428 <__ieee754_rem_pio2+0x128>
1a0166a8:	f8da 2004 	ldr.w	r2, [sl, #4]
1a0166ac:	f8da 300c 	ldr.w	r3, [sl, #12]
1a0166b0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
1a0166b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
1a0166b8:	4245      	negs	r5, r0
1a0166ba:	f8ca 2004 	str.w	r2, [sl, #4]
1a0166be:	f8ca 300c 	str.w	r3, [sl, #12]
1a0166c2:	e6b1      	b.n	1a016428 <__ieee754_rem_pio2+0x128>
1a0166c4:	2303      	movs	r3, #3
1a0166c6:	e69a      	b.n	1a0163fe <__ieee754_rem_pio2+0xfe>
1a0166c8:	a313      	add	r3, pc, #76	; (adr r3, 1a016718 <__ieee754_rem_pio2+0x418>)
1a0166ca:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0166ce:	f7fc ffe1 	bl	1a013694 <__adddf3>
1a0166d2:	a313      	add	r3, pc, #76	; (adr r3, 1a016720 <__ieee754_rem_pio2+0x420>)
1a0166d4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0166d8:	460d      	mov	r5, r1
1a0166da:	4604      	mov	r4, r0
1a0166dc:	f7fc ffda 	bl	1a013694 <__adddf3>
1a0166e0:	4602      	mov	r2, r0
1a0166e2:	460b      	mov	r3, r1
1a0166e4:	e9ca 2300 	strd	r2, r3, [sl]
1a0166e8:	4629      	mov	r1, r5
1a0166ea:	4620      	mov	r0, r4
1a0166ec:	f7fc ffd0 	bl	1a013690 <__aeabi_dsub>
1a0166f0:	a30b      	add	r3, pc, #44	; (adr r3, 1a016720 <__ieee754_rem_pio2+0x420>)
1a0166f2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0166f6:	f7fc ffcd 	bl	1a013694 <__adddf3>
1a0166fa:	f04f 35ff 	mov.w	r5, #4294967295
1a0166fe:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a016702:	e691      	b.n	1a016428 <__ieee754_rem_pio2+0x128>
1a016704:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
1a016708:	e6f5      	b.n	1a0164f6 <__ieee754_rem_pio2+0x1f6>
1a01670a:	bf00      	nop
1a01670c:	f3af 8000 	nop.w
1a016710:	1a626331 	.word	0x1a626331
1a016714:	3dd0b461 	.word	0x3dd0b461
1a016718:	1a600000 	.word	0x1a600000
1a01671c:	3dd0b461 	.word	0x3dd0b461
1a016720:	2e037073 	.word	0x2e037073
1a016724:	3ba3198a 	.word	0x3ba3198a
1a016728:	3ff921fb 	.word	0x3ff921fb
1a01672c:	2e000000 	.word	0x2e000000
1a016730:	3ba3198a 	.word	0x3ba3198a
1a016734:	252049c1 	.word	0x252049c1
1a016738:	397b839a 	.word	0x397b839a

1a01673c <__ieee754_sqrt>:
1a01673c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a016740:	4e5e      	ldr	r6, [pc, #376]	; (1a0168bc <__ieee754_sqrt+0x180>)
1a016742:	46b6      	mov	lr, r6
1a016744:	400e      	ands	r6, r1
1a016746:	4576      	cmp	r6, lr
1a016748:	4604      	mov	r4, r0
1a01674a:	460d      	mov	r5, r1
1a01674c:	f000 8094 	beq.w	1a016878 <__ieee754_sqrt+0x13c>
1a016750:	2900      	cmp	r1, #0
1a016752:	460b      	mov	r3, r1
1a016754:	4602      	mov	r2, r0
1a016756:	dd72      	ble.n	1a01683e <__ieee754_sqrt+0x102>
1a016758:	150f      	asrs	r7, r1, #20
1a01675a:	d07d      	beq.n	1a016858 <__ieee754_sqrt+0x11c>
1a01675c:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
1a016760:	f3c3 0313 	ubfx	r3, r3, #0, #20
1a016764:	07f8      	lsls	r0, r7, #31
1a016766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a01676a:	d463      	bmi.n	1a016834 <__ieee754_sqrt+0xf8>
1a01676c:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
1a016770:	2600      	movs	r6, #0
1a016772:	440b      	add	r3, r1
1a016774:	107f      	asrs	r7, r7, #1
1a016776:	0052      	lsls	r2, r2, #1
1a016778:	46b6      	mov	lr, r6
1a01677a:	2016      	movs	r0, #22
1a01677c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
1a016780:	eb0e 0401 	add.w	r4, lr, r1
1a016784:	429c      	cmp	r4, r3
1a016786:	ea4f 75d2 	mov.w	r5, r2, lsr #31
1a01678a:	ea4f 0242 	mov.w	r2, r2, lsl #1
1a01678e:	dc03      	bgt.n	1a016798 <__ieee754_sqrt+0x5c>
1a016790:	1b1b      	subs	r3, r3, r4
1a016792:	eb04 0e01 	add.w	lr, r4, r1
1a016796:	440e      	add	r6, r1
1a016798:	3801      	subs	r0, #1
1a01679a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
1a01679e:	ea4f 0151 	mov.w	r1, r1, lsr #1
1a0167a2:	d1ed      	bne.n	1a016780 <__ieee754_sqrt+0x44>
1a0167a4:	4684      	mov	ip, r0
1a0167a6:	2420      	movs	r4, #32
1a0167a8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
1a0167ac:	e009      	b.n	1a0167c2 <__ieee754_sqrt+0x86>
1a0167ae:	d020      	beq.n	1a0167f2 <__ieee754_sqrt+0xb6>
1a0167b0:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
1a0167b4:	3c01      	subs	r4, #1
1a0167b6:	ea4f 0151 	mov.w	r1, r1, lsr #1
1a0167ba:	442b      	add	r3, r5
1a0167bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
1a0167c0:	d020      	beq.n	1a016804 <__ieee754_sqrt+0xc8>
1a0167c2:	459e      	cmp	lr, r3
1a0167c4:	eb01 050c 	add.w	r5, r1, ip
1a0167c8:	daf1      	bge.n	1a0167ae <__ieee754_sqrt+0x72>
1a0167ca:	2d00      	cmp	r5, #0
1a0167cc:	eb05 0c01 	add.w	ip, r5, r1
1a0167d0:	db09      	blt.n	1a0167e6 <__ieee754_sqrt+0xaa>
1a0167d2:	46f0      	mov	r8, lr
1a0167d4:	4295      	cmp	r5, r2
1a0167d6:	ebce 0303 	rsb	r3, lr, r3
1a0167da:	d900      	bls.n	1a0167de <__ieee754_sqrt+0xa2>
1a0167dc:	3b01      	subs	r3, #1
1a0167de:	1b52      	subs	r2, r2, r5
1a0167e0:	4408      	add	r0, r1
1a0167e2:	46c6      	mov	lr, r8
1a0167e4:	e7e4      	b.n	1a0167b0 <__ieee754_sqrt+0x74>
1a0167e6:	f1bc 0f00 	cmp.w	ip, #0
1a0167ea:	dbf2      	blt.n	1a0167d2 <__ieee754_sqrt+0x96>
1a0167ec:	f10e 0801 	add.w	r8, lr, #1
1a0167f0:	e7f0      	b.n	1a0167d4 <__ieee754_sqrt+0x98>
1a0167f2:	4295      	cmp	r5, r2
1a0167f4:	d81c      	bhi.n	1a016830 <__ieee754_sqrt+0xf4>
1a0167f6:	2d00      	cmp	r5, #0
1a0167f8:	eb05 0c01 	add.w	ip, r5, r1
1a0167fc:	db48      	blt.n	1a016890 <__ieee754_sqrt+0x154>
1a0167fe:	4698      	mov	r8, r3
1a016800:	2300      	movs	r3, #0
1a016802:	e7ec      	b.n	1a0167de <__ieee754_sqrt+0xa2>
1a016804:	4313      	orrs	r3, r2
1a016806:	d004      	beq.n	1a016812 <__ieee754_sqrt+0xd6>
1a016808:	1c41      	adds	r1, r0, #1
1a01680a:	d045      	beq.n	1a016898 <__ieee754_sqrt+0x15c>
1a01680c:	f000 0401 	and.w	r4, r0, #1
1a016810:	4420      	add	r0, r4
1a016812:	0844      	lsrs	r4, r0, #1
1a016814:	1073      	asrs	r3, r6, #1
1a016816:	07f2      	lsls	r2, r6, #31
1a016818:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
1a01681c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
1a016820:	bf48      	it	mi
1a016822:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
1a016826:	eb03 5107 	add.w	r1, r3, r7, lsl #20
1a01682a:	4620      	mov	r0, r4
1a01682c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a016830:	4673      	mov	r3, lr
1a016832:	e7bd      	b.n	1a0167b0 <__ieee754_sqrt+0x74>
1a016834:	005b      	lsls	r3, r3, #1
1a016836:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
1a01683a:	0052      	lsls	r2, r2, #1
1a01683c:	e796      	b.n	1a01676c <__ieee754_sqrt+0x30>
1a01683e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
1a016842:	4306      	orrs	r6, r0
1a016844:	d022      	beq.n	1a01688c <__ieee754_sqrt+0x150>
1a016846:	bb71      	cbnz	r1, 1a0168a6 <__ieee754_sqrt+0x16a>
1a016848:	460f      	mov	r7, r1
1a01684a:	0ad3      	lsrs	r3, r2, #11
1a01684c:	3f15      	subs	r7, #21
1a01684e:	0552      	lsls	r2, r2, #21
1a016850:	2b00      	cmp	r3, #0
1a016852:	d0fa      	beq.n	1a01684a <__ieee754_sqrt+0x10e>
1a016854:	02dd      	lsls	r5, r3, #11
1a016856:	d421      	bmi.n	1a01689c <__ieee754_sqrt+0x160>
1a016858:	2100      	movs	r1, #0
1a01685a:	e000      	b.n	1a01685e <__ieee754_sqrt+0x122>
1a01685c:	4601      	mov	r1, r0
1a01685e:	005b      	lsls	r3, r3, #1
1a016860:	02dc      	lsls	r4, r3, #11
1a016862:	f101 0001 	add.w	r0, r1, #1
1a016866:	d5f9      	bpl.n	1a01685c <__ieee754_sqrt+0x120>
1a016868:	f1c0 0420 	rsb	r4, r0, #32
1a01686c:	fa22 f404 	lsr.w	r4, r2, r4
1a016870:	4323      	orrs	r3, r4
1a016872:	1a7f      	subs	r7, r7, r1
1a016874:	4082      	lsls	r2, r0
1a016876:	e771      	b.n	1a01675c <__ieee754_sqrt+0x20>
1a016878:	4602      	mov	r2, r0
1a01687a:	460b      	mov	r3, r1
1a01687c:	f7fd f8bc 	bl	1a0139f8 <__aeabi_dmul>
1a016880:	4622      	mov	r2, r4
1a016882:	462b      	mov	r3, r5
1a016884:	f7fc ff06 	bl	1a013694 <__adddf3>
1a016888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a01688c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a016890:	f1bc 0f00 	cmp.w	ip, #0
1a016894:	dbb3      	blt.n	1a0167fe <__ieee754_sqrt+0xc2>
1a016896:	e7a9      	b.n	1a0167ec <__ieee754_sqrt+0xb0>
1a016898:	3601      	adds	r6, #1
1a01689a:	e7bb      	b.n	1a016814 <__ieee754_sqrt+0xd8>
1a01689c:	2420      	movs	r4, #32
1a01689e:	f04f 31ff 	mov.w	r1, #4294967295
1a0168a2:	2000      	movs	r0, #0
1a0168a4:	e7e2      	b.n	1a01686c <__ieee754_sqrt+0x130>
1a0168a6:	4602      	mov	r2, r0
1a0168a8:	460b      	mov	r3, r1
1a0168aa:	f7fc fef1 	bl	1a013690 <__aeabi_dsub>
1a0168ae:	4602      	mov	r2, r0
1a0168b0:	460b      	mov	r3, r1
1a0168b2:	f7fd f9cb 	bl	1a013c4c <__aeabi_ddiv>
1a0168b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0168ba:	bf00      	nop
1a0168bc:	7ff00000 	.word	0x7ff00000

1a0168c0 <__ieee754_acosf>:
1a0168c0:	b508      	push	{r3, lr}
1a0168c2:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
1a0168c6:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
1a0168ca:	ed2d 8b02 	vpush	{d8}
1a0168ce:	d018      	beq.n	1a016902 <__ieee754_acosf+0x42>
1a0168d0:	ee07 0a90 	vmov	s15, r0
1a0168d4:	dc0c      	bgt.n	1a0168f0 <__ieee754_acosf+0x30>
1a0168d6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
1a0168da:	da1f      	bge.n	1a01691c <__ieee754_acosf+0x5c>
1a0168dc:	f1b3 5f0c 	cmp.w	r3, #587202560	; 0x23000000
1a0168e0:	dc70      	bgt.n	1a0169c4 <__ieee754_acosf+0x104>
1a0168e2:	ecbd 8b02 	vpop	{d8}
1a0168e6:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 1a016ad4 <__ieee754_acosf+0x214>
1a0168ea:	ee17 0a10 	vmov	r0, s14
1a0168ee:	bd08      	pop	{r3, pc}
1a0168f0:	ee77 7ae7 	vsub.f32	s15, s15, s15
1a0168f4:	ee87 7aa7 	vdiv.f32	s14, s15, s15
1a0168f8:	ecbd 8b02 	vpop	{d8}
1a0168fc:	ee17 0a10 	vmov	r0, s14
1a016900:	bd08      	pop	{r3, pc}
1a016902:	ecbd 8b02 	vpop	{d8}
1a016906:	eddf 7a74 	vldr	s15, [pc, #464]	; 1a016ad8 <__ieee754_acosf+0x218>
1a01690a:	ed9f 7a74 	vldr	s14, [pc, #464]	; 1a016adc <__ieee754_acosf+0x21c>
1a01690e:	2800      	cmp	r0, #0
1a016910:	bfc8      	it	gt
1a016912:	eeb0 7a67 	vmovgt.f32	s14, s15
1a016916:	ee17 0a10 	vmov	r0, s14
1a01691a:	bd08      	pop	{r3, pc}
1a01691c:	2800      	cmp	r0, #0
1a01691e:	f2c0 8090 	blt.w	1a016a42 <__ieee754_acosf+0x182>
1a016922:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
1a016926:	ee78 7ae7 	vsub.f32	s15, s17, s15
1a01692a:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
1a01692e:	ee27 8a88 	vmul.f32	s16, s15, s16
1a016932:	ee18 0a10 	vmov	r0, s16
1a016936:	f000 fafb 	bl	1a016f30 <__ieee754_sqrtf>
1a01693a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 1a016ae0 <__ieee754_acosf+0x220>
1a01693e:	ed9f 3a69 	vldr	s6, [pc, #420]	; 1a016ae4 <__ieee754_acosf+0x224>
1a016942:	ed9f 4a69 	vldr	s8, [pc, #420]	; 1a016ae8 <__ieee754_acosf+0x228>
1a016946:	eddf 2a69 	vldr	s5, [pc, #420]	; 1a016aec <__ieee754_acosf+0x22c>
1a01694a:	eddf 3a69 	vldr	s7, [pc, #420]	; 1a016af0 <__ieee754_acosf+0x230>
1a01694e:	ed9f 5a69 	vldr	s10, [pc, #420]	; 1a016af4 <__ieee754_acosf+0x234>
1a016952:	eddf 4a69 	vldr	s9, [pc, #420]	; 1a016af8 <__ieee754_acosf+0x238>
1a016956:	ed9f 6a69 	vldr	s12, [pc, #420]	; 1a016afc <__ieee754_acosf+0x23c>
1a01695a:	eddf 5a69 	vldr	s11, [pc, #420]	; 1a016b00 <__ieee754_acosf+0x240>
1a01695e:	eddf 7a69 	vldr	s15, [pc, #420]	; 1a016b04 <__ieee754_acosf+0x244>
1a016962:	eea8 3a07 	vfma.f32	s6, s16, s14
1a016966:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
1a01696a:	f023 030f 	bic.w	r3, r3, #15
1a01696e:	eee8 3a22 	vfma.f32	s7, s16, s5
1a016972:	eea8 4a03 	vfma.f32	s8, s16, s6
1a016976:	eee8 4a23 	vfma.f32	s9, s16, s7
1a01697a:	eea8 5a04 	vfma.f32	s10, s16, s8
1a01697e:	eee8 5a24 	vfma.f32	s11, s16, s9
1a016982:	eea8 6a05 	vfma.f32	s12, s16, s10
1a016986:	ee07 3a10 	vmov	s14, r3
1a01698a:	eee8 7a06 	vfma.f32	s15, s16, s12
1a01698e:	eeb0 5a48 	vmov.f32	s10, s16
1a016992:	eee8 8a25 	vfma.f32	s17, s16, s11
1a016996:	ee06 0a90 	vmov	s13, r0
1a01699a:	eea7 5a47 	vfms.f32	s10, s14, s14
1a01699e:	ee27 8a88 	vmul.f32	s16, s15, s16
1a0169a2:	ee76 5a87 	vadd.f32	s11, s13, s14
1a0169a6:	ee88 6a28 	vdiv.f32	s12, s16, s17
1a0169aa:	ecbd 8b02 	vpop	{d8}
1a0169ae:	eec5 7a25 	vdiv.f32	s15, s10, s11
1a0169b2:	eee6 7a86 	vfma.f32	s15, s13, s12
1a0169b6:	ee77 7a87 	vadd.f32	s15, s15, s14
1a0169ba:	ee37 7aa7 	vadd.f32	s14, s15, s15
1a0169be:	ee17 0a10 	vmov	r0, s14
1a0169c2:	bd08      	pop	{r3, pc}
1a0169c4:	ee67 6aa7 	vmul.f32	s13, s15, s15
1a0169c8:	ed9f 1a45 	vldr	s2, [pc, #276]	; 1a016ae0 <__ieee754_acosf+0x220>
1a0169cc:	ed9f 2a45 	vldr	s4, [pc, #276]	; 1a016ae4 <__ieee754_acosf+0x224>
1a0169d0:	ed9f 3a45 	vldr	s6, [pc, #276]	; 1a016ae8 <__ieee754_acosf+0x228>
1a0169d4:	eddf 1a45 	vldr	s3, [pc, #276]	; 1a016aec <__ieee754_acosf+0x22c>
1a0169d8:	eddf 2a45 	vldr	s5, [pc, #276]	; 1a016af0 <__ieee754_acosf+0x230>
1a0169dc:	ed9f 5a45 	vldr	s10, [pc, #276]	; 1a016af4 <__ieee754_acosf+0x234>
1a0169e0:	eddf 3a45 	vldr	s7, [pc, #276]	; 1a016af8 <__ieee754_acosf+0x238>
1a0169e4:	ed9f 4a45 	vldr	s8, [pc, #276]	; 1a016afc <__ieee754_acosf+0x23c>
1a0169e8:	eddf 4a45 	vldr	s9, [pc, #276]	; 1a016b00 <__ieee754_acosf+0x240>
1a0169ec:	ed9f 6a45 	vldr	s12, [pc, #276]	; 1a016b04 <__ieee754_acosf+0x244>
1a0169f0:	eddf 5a45 	vldr	s11, [pc, #276]	; 1a016b08 <__ieee754_acosf+0x248>
1a0169f4:	ed9f 7a45 	vldr	s14, [pc, #276]	; 1a016b0c <__ieee754_acosf+0x24c>
1a0169f8:	eea6 2a81 	vfma.f32	s4, s13, s2
1a0169fc:	ecbd 8b02 	vpop	{d8}
1a016a00:	eea6 3a82 	vfma.f32	s6, s13, s4
1a016a04:	eee6 2aa1 	vfma.f32	s5, s13, s3
1a016a08:	eea6 5a83 	vfma.f32	s10, s13, s6
1a016a0c:	eee6 3aa2 	vfma.f32	s7, s13, s5
1a016a10:	eea6 4a85 	vfma.f32	s8, s13, s10
1a016a14:	eee6 4aa3 	vfma.f32	s9, s13, s7
1a016a18:	eea6 6a84 	vfma.f32	s12, s13, s8
1a016a1c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
1a016a20:	eea6 5aa4 	vfma.f32	s10, s13, s9
1a016a24:	ee66 6a26 	vmul.f32	s13, s12, s13
1a016a28:	ee86 6a85 	vdiv.f32	s12, s13, s10
1a016a2c:	eef0 6a65 	vmov.f32	s13, s11
1a016a30:	eee7 6ac6 	vfms.f32	s13, s15, s12
1a016a34:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a016a38:	ee37 7a67 	vsub.f32	s14, s14, s15
1a016a3c:	ee17 0a10 	vmov	r0, s14
1a016a40:	bd08      	pop	{r3, pc}
1a016a42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
1a016a46:	ee77 7a87 	vadd.f32	s15, s15, s14
1a016a4a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
1a016a4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
1a016a52:	eddf 2a23 	vldr	s5, [pc, #140]	; 1a016ae0 <__ieee754_acosf+0x220>
1a016a56:	eddf 3a23 	vldr	s7, [pc, #140]	; 1a016ae4 <__ieee754_acosf+0x224>
1a016a5a:	eddf 4a23 	vldr	s9, [pc, #140]	; 1a016ae8 <__ieee754_acosf+0x228>
1a016a5e:	ed9f 3a23 	vldr	s6, [pc, #140]	; 1a016aec <__ieee754_acosf+0x22c>
1a016a62:	ed9f 4a23 	vldr	s8, [pc, #140]	; 1a016af0 <__ieee754_acosf+0x230>
1a016a66:	eddf 5a23 	vldr	s11, [pc, #140]	; 1a016af4 <__ieee754_acosf+0x234>
1a016a6a:	ed9f 5a23 	vldr	s10, [pc, #140]	; 1a016af8 <__ieee754_acosf+0x238>
1a016a6e:	eddf 6a23 	vldr	s13, [pc, #140]	; 1a016afc <__ieee754_acosf+0x23c>
1a016a72:	ed9f 6a23 	vldr	s12, [pc, #140]	; 1a016b00 <__ieee754_acosf+0x240>
1a016a76:	ed9f 8a23 	vldr	s16, [pc, #140]	; 1a016b04 <__ieee754_acosf+0x244>
1a016a7a:	eee7 3aa2 	vfma.f32	s7, s15, s5
1a016a7e:	eea7 4a83 	vfma.f32	s8, s15, s6
1a016a82:	eee7 4aa3 	vfma.f32	s9, s15, s7
1a016a86:	eea7 5a84 	vfma.f32	s10, s15, s8
1a016a8a:	eee7 5aa4 	vfma.f32	s11, s15, s9
1a016a8e:	eea7 6a85 	vfma.f32	s12, s15, s10
1a016a92:	eee7 6aa5 	vfma.f32	s13, s15, s11
1a016a96:	eea7 7a86 	vfma.f32	s14, s15, s12
1a016a9a:	eea7 8aa6 	vfma.f32	s16, s15, s13
1a016a9e:	eef0 8a47 	vmov.f32	s17, s14
1a016aa2:	ee28 8a27 	vmul.f32	s16, s16, s15
1a016aa6:	ee17 0a90 	vmov	r0, s15
1a016aaa:	f000 fa41 	bl	1a016f30 <__ieee754_sqrtf>
1a016aae:	eec8 6a28 	vdiv.f32	s13, s16, s17
1a016ab2:	ee06 0a10 	vmov	s12, r0
1a016ab6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 1a016b10 <__ieee754_acosf+0x250>
1a016aba:	eddf 7a16 	vldr	s15, [pc, #88]	; 1a016b14 <__ieee754_acosf+0x254>
1a016abe:	eea6 7a26 	vfma.f32	s14, s12, s13
1a016ac2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
1a016ac6:	ee37 7a06 	vadd.f32	s14, s14, s12
1a016aca:	eee7 7a66 	vfms.f32	s15, s14, s13
1a016ace:	eeb0 7a67 	vmov.f32	s14, s15
1a016ad2:	e711      	b.n	1a0168f8 <__ieee754_acosf+0x38>
1a016ad4:	3fc90fdb 	.word	0x3fc90fdb
1a016ad8:	00000000 	.word	0x00000000
1a016adc:	40490fdb 	.word	0x40490fdb
1a016ae0:	3811ef08 	.word	0x3811ef08
1a016ae4:	3a4f7f04 	.word	0x3a4f7f04
1a016ae8:	bd241146 	.word	0xbd241146
1a016aec:	3d9dc62e 	.word	0x3d9dc62e
1a016af0:	bf303361 	.word	0xbf303361
1a016af4:	3e4e0aa8 	.word	0x3e4e0aa8
1a016af8:	4001572d 	.word	0x4001572d
1a016afc:	bea6b090 	.word	0xbea6b090
1a016b00:	c019d139 	.word	0xc019d139
1a016b04:	3e2aaaab 	.word	0x3e2aaaab
1a016b08:	33a22168 	.word	0x33a22168
1a016b0c:	3fc90fda 	.word	0x3fc90fda
1a016b10:	b3a22168 	.word	0xb3a22168
1a016b14:	40490fda 	.word	0x40490fda

1a016b18 <__ieee754_atan2f>:
1a016b18:	b530      	push	{r4, r5, lr}
1a016b1a:	b083      	sub	sp, #12
1a016b1c:	ee07 0a90 	vmov	s15, r0
1a016b20:	9101      	str	r1, [sp, #4]
1a016b22:	9b01      	ldr	r3, [sp, #4]
1a016b24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
1a016b28:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
1a016b2c:	dc1a      	bgt.n	1a016b64 <__ieee754_atan2f+0x4c>
1a016b2e:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
1a016b32:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
1a016b36:	4605      	mov	r5, r0
1a016b38:	dc14      	bgt.n	1a016b64 <__ieee754_atan2f+0x4c>
1a016b3a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
1a016b3e:	d054      	beq.n	1a016bea <__ieee754_atan2f+0xd2>
1a016b40:	179c      	asrs	r4, r3, #30
1a016b42:	f004 0402 	and.w	r4, r4, #2
1a016b46:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
1a016b4a:	b999      	cbnz	r1, 1a016b74 <__ieee754_atan2f+0x5c>
1a016b4c:	2c02      	cmp	r4, #2
1a016b4e:	d049      	beq.n	1a016be4 <__ieee754_atan2f+0xcc>
1a016b50:	ed9f 7a46 	vldr	s14, [pc, #280]	; 1a016c6c <__ieee754_atan2f+0x154>
1a016b54:	2c03      	cmp	r4, #3
1a016b56:	bf08      	it	eq
1a016b58:	eef0 7a47 	vmoveq.f32	s15, s14
1a016b5c:	ee17 0a90 	vmov	r0, s15
1a016b60:	b003      	add	sp, #12
1a016b62:	bd30      	pop	{r4, r5, pc}
1a016b64:	ed9d 7a01 	vldr	s14, [sp, #4]
1a016b68:	ee77 7a27 	vadd.f32	s15, s14, s15
1a016b6c:	ee17 0a90 	vmov	r0, s15
1a016b70:	b003      	add	sp, #12
1a016b72:	bd30      	pop	{r4, r5, pc}
1a016b74:	b33a      	cbz	r2, 1a016bc6 <__ieee754_atan2f+0xae>
1a016b76:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
1a016b7a:	d03b      	beq.n	1a016bf4 <__ieee754_atan2f+0xdc>
1a016b7c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
1a016b80:	d021      	beq.n	1a016bc6 <__ieee754_atan2f+0xae>
1a016b82:	1a8a      	subs	r2, r1, r2
1a016b84:	15d2      	asrs	r2, r2, #23
1a016b86:	2a3c      	cmp	r2, #60	; 0x3c
1a016b88:	dc29      	bgt.n	1a016bde <__ieee754_atan2f+0xc6>
1a016b8a:	2b00      	cmp	r3, #0
1a016b8c:	db52      	blt.n	1a016c34 <__ieee754_atan2f+0x11c>
1a016b8e:	9801      	ldr	r0, [sp, #4]
1a016b90:	ee06 0a90 	vmov	s13, r0
1a016b94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
1a016b98:	ee17 0a10 	vmov	r0, s14
1a016b9c:	f7fe fbf0 	bl	1a015380 <fabsf>
1a016ba0:	f001 fc8c 	bl	1a0184bc <atanf>
1a016ba4:	ee07 0a90 	vmov	s15, r0
1a016ba8:	2c01      	cmp	r4, #1
1a016baa:	d03c      	beq.n	1a016c26 <__ieee754_atan2f+0x10e>
1a016bac:	2c02      	cmp	r4, #2
1a016bae:	d031      	beq.n	1a016c14 <__ieee754_atan2f+0xfc>
1a016bb0:	2c00      	cmp	r4, #0
1a016bb2:	d0db      	beq.n	1a016b6c <__ieee754_atan2f+0x54>
1a016bb4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 1a016c70 <__ieee754_atan2f+0x158>
1a016bb8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 1a016c74 <__ieee754_atan2f+0x15c>
1a016bbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
1a016bc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a016bc4:	e7d2      	b.n	1a016b6c <__ieee754_atan2f+0x54>
1a016bc6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 1a016c78 <__ieee754_atan2f+0x160>
1a016bca:	eddf 7a2c 	vldr	s15, [pc, #176]	; 1a016c7c <__ieee754_atan2f+0x164>
1a016bce:	2d00      	cmp	r5, #0
1a016bd0:	bfb8      	it	lt
1a016bd2:	eef0 7a47 	vmovlt.f32	s15, s14
1a016bd6:	ee17 0a90 	vmov	r0, s15
1a016bda:	b003      	add	sp, #12
1a016bdc:	bd30      	pop	{r4, r5, pc}
1a016bde:	eddf 7a27 	vldr	s15, [pc, #156]	; 1a016c7c <__ieee754_atan2f+0x164>
1a016be2:	e7e1      	b.n	1a016ba8 <__ieee754_atan2f+0x90>
1a016be4:	eddf 7a23 	vldr	s15, [pc, #140]	; 1a016c74 <__ieee754_atan2f+0x15c>
1a016be8:	e7c0      	b.n	1a016b6c <__ieee754_atan2f+0x54>
1a016bea:	b003      	add	sp, #12
1a016bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1a016bf0:	f001 bc64 	b.w	1a0184bc <atanf>
1a016bf4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
1a016bf8:	d021      	beq.n	1a016c3e <__ieee754_atan2f+0x126>
1a016bfa:	2c02      	cmp	r4, #2
1a016bfc:	d0f2      	beq.n	1a016be4 <__ieee754_atan2f+0xcc>
1a016bfe:	2c03      	cmp	r4, #3
1a016c00:	d02a      	beq.n	1a016c58 <__ieee754_atan2f+0x140>
1a016c02:	eddf 7a1f 	vldr	s15, [pc, #124]	; 1a016c80 <__ieee754_atan2f+0x168>
1a016c06:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 1a016c84 <__ieee754_atan2f+0x16c>
1a016c0a:	2c01      	cmp	r4, #1
1a016c0c:	bf18      	it	ne
1a016c0e:	eef0 7a47 	vmovne.f32	s15, s14
1a016c12:	e7ab      	b.n	1a016b6c <__ieee754_atan2f+0x54>
1a016c14:	eddf 6a16 	vldr	s13, [pc, #88]	; 1a016c70 <__ieee754_atan2f+0x158>
1a016c18:	ed9f 7a16 	vldr	s14, [pc, #88]	; 1a016c74 <__ieee754_atan2f+0x15c>
1a016c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
1a016c20:	ee77 7a67 	vsub.f32	s15, s14, s15
1a016c24:	e7a2      	b.n	1a016b6c <__ieee754_atan2f+0x54>
1a016c26:	ee17 3a90 	vmov	r3, s15
1a016c2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
1a016c2e:	ee07 3a90 	vmov	s15, r3
1a016c32:	e79b      	b.n	1a016b6c <__ieee754_atan2f+0x54>
1a016c34:	323c      	adds	r2, #60	; 0x3c
1a016c36:	daaa      	bge.n	1a016b8e <__ieee754_atan2f+0x76>
1a016c38:	eddf 7a12 	vldr	s15, [pc, #72]	; 1a016c84 <__ieee754_atan2f+0x16c>
1a016c3c:	e7b4      	b.n	1a016ba8 <__ieee754_atan2f+0x90>
1a016c3e:	2c02      	cmp	r4, #2
1a016c40:	d010      	beq.n	1a016c64 <__ieee754_atan2f+0x14c>
1a016c42:	2c03      	cmp	r4, #3
1a016c44:	d00b      	beq.n	1a016c5e <__ieee754_atan2f+0x146>
1a016c46:	eddf 7a10 	vldr	s15, [pc, #64]	; 1a016c88 <__ieee754_atan2f+0x170>
1a016c4a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 1a016c8c <__ieee754_atan2f+0x174>
1a016c4e:	2c01      	cmp	r4, #1
1a016c50:	bf18      	it	ne
1a016c52:	eef0 7a47 	vmovne.f32	s15, s14
1a016c56:	e789      	b.n	1a016b6c <__ieee754_atan2f+0x54>
1a016c58:	eddf 7a04 	vldr	s15, [pc, #16]	; 1a016c6c <__ieee754_atan2f+0x154>
1a016c5c:	e786      	b.n	1a016b6c <__ieee754_atan2f+0x54>
1a016c5e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 1a016c90 <__ieee754_atan2f+0x178>
1a016c62:	e783      	b.n	1a016b6c <__ieee754_atan2f+0x54>
1a016c64:	eddf 7a0b 	vldr	s15, [pc, #44]	; 1a016c94 <__ieee754_atan2f+0x17c>
1a016c68:	e780      	b.n	1a016b6c <__ieee754_atan2f+0x54>
1a016c6a:	bf00      	nop
1a016c6c:	c0490fdb 	.word	0xc0490fdb
1a016c70:	33bbbd2e 	.word	0x33bbbd2e
1a016c74:	40490fdb 	.word	0x40490fdb
1a016c78:	bfc90fdb 	.word	0xbfc90fdb
1a016c7c:	3fc90fdb 	.word	0x3fc90fdb
1a016c80:	80000000 	.word	0x80000000
1a016c84:	00000000 	.word	0x00000000
1a016c88:	bf490fdb 	.word	0xbf490fdb
1a016c8c:	3f490fdb 	.word	0x3f490fdb
1a016c90:	c016cbe4 	.word	0xc016cbe4
1a016c94:	4016cbe4 	.word	0x4016cbe4

1a016c98 <__ieee754_rem_pio2f>:
1a016c98:	b570      	push	{r4, r5, r6, lr}
1a016c9a:	4a97      	ldr	r2, [pc, #604]	; (1a016ef8 <__ieee754_rem_pio2f+0x260>)
1a016c9c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
1a016ca0:	4294      	cmp	r4, r2
1a016ca2:	b086      	sub	sp, #24
1a016ca4:	dd6a      	ble.n	1a016d7c <__ieee754_rem_pio2f+0xe4>
1a016ca6:	4a95      	ldr	r2, [pc, #596]	; (1a016efc <__ieee754_rem_pio2f+0x264>)
1a016ca8:	4294      	cmp	r4, r2
1a016caa:	4606      	mov	r6, r0
1a016cac:	dc1c      	bgt.n	1a016ce8 <__ieee754_rem_pio2f+0x50>
1a016cae:	2800      	cmp	r0, #0
1a016cb0:	eddf 7a93 	vldr	s15, [pc, #588]	; 1a016f00 <__ieee754_rem_pio2f+0x268>
1a016cb4:	4a93      	ldr	r2, [pc, #588]	; (1a016f04 <__ieee754_rem_pio2f+0x26c>)
1a016cb6:	f024 040f 	bic.w	r4, r4, #15
1a016cba:	ee07 0a10 	vmov	s14, r0
1a016cbe:	f340 80e3 	ble.w	1a016e88 <__ieee754_rem_pio2f+0x1f0>
1a016cc2:	4294      	cmp	r4, r2
1a016cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
1a016cc8:	d068      	beq.n	1a016d9c <__ieee754_rem_pio2f+0x104>
1a016cca:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 1a016f08 <__ieee754_rem_pio2f+0x270>
1a016cce:	ee77 6ac7 	vsub.f32	s13, s15, s14
1a016cd2:	2001      	movs	r0, #1
1a016cd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a016cd8:	edc1 6a00 	vstr	s13, [r1]
1a016cdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a016ce0:	edc1 7a01 	vstr	s15, [r1, #4]
1a016ce4:	b006      	add	sp, #24
1a016ce6:	bd70      	pop	{r4, r5, r6, pc}
1a016ce8:	4a88      	ldr	r2, [pc, #544]	; (1a016f0c <__ieee754_rem_pio2f+0x274>)
1a016cea:	4294      	cmp	r4, r2
1a016cec:	460d      	mov	r5, r1
1a016cee:	dd67      	ble.n	1a016dc0 <__ieee754_rem_pio2f+0x128>
1a016cf0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
1a016cf4:	da48      	bge.n	1a016d88 <__ieee754_rem_pio2f+0xf0>
1a016cf6:	15e2      	asrs	r2, r4, #23
1a016cf8:	3a86      	subs	r2, #134	; 0x86
1a016cfa:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
1a016cfe:	ee07 3a10 	vmov	s14, r3
1a016d02:	eefd 6ac7 	vcvt.s32.f32	s13, s14
1a016d06:	eddf 7a82 	vldr	s15, [pc, #520]	; 1a016f10 <__ieee754_rem_pio2f+0x278>
1a016d0a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
1a016d0e:	ee37 7a66 	vsub.f32	s14, s14, s13
1a016d12:	edcd 6a03 	vstr	s13, [sp, #12]
1a016d16:	ee27 7a27 	vmul.f32	s14, s14, s15
1a016d1a:	eefd 6ac7 	vcvt.s32.f32	s13, s14
1a016d1e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
1a016d22:	ee37 7a66 	vsub.f32	s14, s14, s13
1a016d26:	edcd 6a04 	vstr	s13, [sp, #16]
1a016d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
1a016d2e:	eef5 7a40 	vcmp.f32	s15, #0.0
1a016d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a016d36:	edcd 7a05 	vstr	s15, [sp, #20]
1a016d3a:	f040 80b8 	bne.w	1a016eae <__ieee754_rem_pio2f+0x216>
1a016d3e:	eef5 6a40 	vcmp.f32	s13, #0.0
1a016d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a016d46:	bf0c      	ite	eq
1a016d48:	2301      	moveq	r3, #1
1a016d4a:	2302      	movne	r3, #2
1a016d4c:	4971      	ldr	r1, [pc, #452]	; (1a016f14 <__ieee754_rem_pio2f+0x27c>)
1a016d4e:	9101      	str	r1, [sp, #4]
1a016d50:	2102      	movs	r1, #2
1a016d52:	9100      	str	r1, [sp, #0]
1a016d54:	a803      	add	r0, sp, #12
1a016d56:	4629      	mov	r1, r5
1a016d58:	f000 ffae 	bl	1a017cb8 <__kernel_rem_pio2f>
1a016d5c:	2e00      	cmp	r6, #0
1a016d5e:	da11      	bge.n	1a016d84 <__ieee754_rem_pio2f+0xec>
1a016d60:	ed95 7a00 	vldr	s14, [r5]
1a016d64:	edd5 7a01 	vldr	s15, [r5, #4]
1a016d68:	eeb1 7a47 	vneg.f32	s14, s14
1a016d6c:	eef1 7a67 	vneg.f32	s15, s15
1a016d70:	4240      	negs	r0, r0
1a016d72:	ed85 7a00 	vstr	s14, [r5]
1a016d76:	edc5 7a01 	vstr	s15, [r5, #4]
1a016d7a:	e003      	b.n	1a016d84 <__ieee754_rem_pio2f+0xec>
1a016d7c:	2200      	movs	r2, #0
1a016d7e:	6008      	str	r0, [r1, #0]
1a016d80:	604a      	str	r2, [r1, #4]
1a016d82:	2000      	movs	r0, #0
1a016d84:	b006      	add	sp, #24
1a016d86:	bd70      	pop	{r4, r5, r6, pc}
1a016d88:	ee07 0a90 	vmov	s15, r0
1a016d8c:	ee77 7ae7 	vsub.f32	s15, s15, s15
1a016d90:	2000      	movs	r0, #0
1a016d92:	edc1 7a01 	vstr	s15, [r1, #4]
1a016d96:	edc1 7a00 	vstr	s15, [r1]
1a016d9a:	e7f3      	b.n	1a016d84 <__ieee754_rem_pio2f+0xec>
1a016d9c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 1a016f18 <__ieee754_rem_pio2f+0x280>
1a016da0:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 1a016f1c <__ieee754_rem_pio2f+0x284>
1a016da4:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a016da8:	2001      	movs	r0, #1
1a016daa:	ee77 6ac7 	vsub.f32	s13, s15, s14
1a016dae:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a016db2:	edc1 6a00 	vstr	s13, [r1]
1a016db6:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a016dba:	edc1 7a01 	vstr	s15, [r1, #4]
1a016dbe:	e7e1      	b.n	1a016d84 <__ieee754_rem_pio2f+0xec>
1a016dc0:	f7fe fade 	bl	1a015380 <fabsf>
1a016dc4:	ed9f 6a56 	vldr	s12, [pc, #344]	; 1a016f20 <__ieee754_rem_pio2f+0x288>
1a016dc8:	ed9f 5a4d 	vldr	s10, [pc, #308]	; 1a016f00 <__ieee754_rem_pio2f+0x268>
1a016dcc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 1a016f08 <__ieee754_rem_pio2f+0x270>
1a016dd0:	ee07 0a10 	vmov	s14, r0
1a016dd4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
1a016dd8:	eee7 7a06 	vfma.f32	s15, s14, s12
1a016ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a016de0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
1a016de4:	ee17 0a90 	vmov	r0, s15
1a016de8:	eef1 5a46 	vneg.f32	s11, s12
1a016dec:	eef0 7a47 	vmov.f32	s15, s14
1a016df0:	281f      	cmp	r0, #31
1a016df2:	eee5 7a85 	vfma.f32	s15, s11, s10
1a016df6:	ee26 7a26 	vmul.f32	s14, s12, s13
1a016dfa:	dc1d      	bgt.n	1a016e38 <__ieee754_rem_pio2f+0x1a0>
1a016dfc:	4a49      	ldr	r2, [pc, #292]	; (1a016f24 <__ieee754_rem_pio2f+0x28c>)
1a016dfe:	1e41      	subs	r1, r0, #1
1a016e00:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
1a016e04:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
1a016e08:	4293      	cmp	r3, r2
1a016e0a:	d015      	beq.n	1a016e38 <__ieee754_rem_pio2f+0x1a0>
1a016e0c:	ee77 6ac7 	vsub.f32	s13, s15, s14
1a016e10:	edc5 6a00 	vstr	s13, [r5]
1a016e14:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a016e18:	2e00      	cmp	r6, #0
1a016e1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a016e1e:	edc5 7a01 	vstr	s15, [r5, #4]
1a016e22:	daaf      	bge.n	1a016d84 <__ieee754_rem_pio2f+0xec>
1a016e24:	eef1 6a66 	vneg.f32	s13, s13
1a016e28:	eef1 7a67 	vneg.f32	s15, s15
1a016e2c:	edc5 6a00 	vstr	s13, [r5]
1a016e30:	edc5 7a01 	vstr	s15, [r5, #4]
1a016e34:	4240      	negs	r0, r0
1a016e36:	e7a5      	b.n	1a016d84 <__ieee754_rem_pio2f+0xec>
1a016e38:	ee77 6ac7 	vsub.f32	s13, s15, s14
1a016e3c:	15e4      	asrs	r4, r4, #23
1a016e3e:	ee16 3a90 	vmov	r3, s13
1a016e42:	f3c3 53c7 	ubfx	r3, r3, #23, #8
1a016e46:	1ae3      	subs	r3, r4, r3
1a016e48:	2b08      	cmp	r3, #8
1a016e4a:	dde1      	ble.n	1a016e10 <__ieee754_rem_pio2f+0x178>
1a016e4c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 1a016f18 <__ieee754_rem_pio2f+0x280>
1a016e50:	eddf 6a32 	vldr	s13, [pc, #200]	; 1a016f1c <__ieee754_rem_pio2f+0x284>
1a016e54:	eeb0 5a67 	vmov.f32	s10, s15
1a016e58:	eea5 5a87 	vfma.f32	s10, s11, s14
1a016e5c:	ee77 7ac5 	vsub.f32	s15, s15, s10
1a016e60:	eee5 7a87 	vfma.f32	s15, s11, s14
1a016e64:	eed6 7a26 	vfnms.f32	s15, s12, s13
1a016e68:	ee75 6a67 	vsub.f32	s13, s10, s15
1a016e6c:	eeb0 7a67 	vmov.f32	s14, s15
1a016e70:	ee16 3a90 	vmov	r3, s13
1a016e74:	f3c3 53c7 	ubfx	r3, r3, #23, #8
1a016e78:	1ae4      	subs	r4, r4, r3
1a016e7a:	2c19      	cmp	r4, #25
1a016e7c:	dc2c      	bgt.n	1a016ed8 <__ieee754_rem_pio2f+0x240>
1a016e7e:	edc5 6a00 	vstr	s13, [r5]
1a016e82:	eef0 7a45 	vmov.f32	s15, s10
1a016e86:	e7c5      	b.n	1a016e14 <__ieee754_rem_pio2f+0x17c>
1a016e88:	4294      	cmp	r4, r2
1a016e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
1a016e8e:	d010      	beq.n	1a016eb2 <__ieee754_rem_pio2f+0x21a>
1a016e90:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 1a016f08 <__ieee754_rem_pio2f+0x270>
1a016e94:	ee77 6a87 	vadd.f32	s13, s15, s14
1a016e98:	f04f 30ff 	mov.w	r0, #4294967295
1a016e9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a016ea0:	edc1 6a00 	vstr	s13, [r1]
1a016ea4:	ee77 7a87 	vadd.f32	s15, s15, s14
1a016ea8:	edc1 7a01 	vstr	s15, [r1, #4]
1a016eac:	e76a      	b.n	1a016d84 <__ieee754_rem_pio2f+0xec>
1a016eae:	2303      	movs	r3, #3
1a016eb0:	e74c      	b.n	1a016d4c <__ieee754_rem_pio2f+0xb4>
1a016eb2:	eddf 6a19 	vldr	s13, [pc, #100]	; 1a016f18 <__ieee754_rem_pio2f+0x280>
1a016eb6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 1a016f1c <__ieee754_rem_pio2f+0x284>
1a016eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
1a016ebe:	f04f 30ff 	mov.w	r0, #4294967295
1a016ec2:	ee77 6a87 	vadd.f32	s13, s15, s14
1a016ec6:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a016eca:	edc1 6a00 	vstr	s13, [r1]
1a016ece:	ee77 7a87 	vadd.f32	s15, s15, s14
1a016ed2:	edc1 7a01 	vstr	s15, [r1, #4]
1a016ed6:	e755      	b.n	1a016d84 <__ieee754_rem_pio2f+0xec>
1a016ed8:	eddf 6a13 	vldr	s13, [pc, #76]	; 1a016f28 <__ieee754_rem_pio2f+0x290>
1a016edc:	eddf 4a13 	vldr	s9, [pc, #76]	; 1a016f2c <__ieee754_rem_pio2f+0x294>
1a016ee0:	eef0 7a45 	vmov.f32	s15, s10
1a016ee4:	eee5 7aa6 	vfma.f32	s15, s11, s13
1a016ee8:	ee35 7a67 	vsub.f32	s14, s10, s15
1a016eec:	eea5 7aa6 	vfma.f32	s14, s11, s13
1a016ef0:	ee96 7a24 	vfnms.f32	s14, s12, s9
1a016ef4:	e78a      	b.n	1a016e0c <__ieee754_rem_pio2f+0x174>
1a016ef6:	bf00      	nop
1a016ef8:	3f490fd8 	.word	0x3f490fd8
1a016efc:	4016cbe3 	.word	0x4016cbe3
1a016f00:	3fc90f80 	.word	0x3fc90f80
1a016f04:	3fc90fd0 	.word	0x3fc90fd0
1a016f08:	37354443 	.word	0x37354443
1a016f0c:	43490f80 	.word	0x43490f80
1a016f10:	43800000 	.word	0x43800000
1a016f14:	1a01adcc 	.word	0x1a01adcc
1a016f18:	37354400 	.word	0x37354400
1a016f1c:	2e85a308 	.word	0x2e85a308
1a016f20:	3f22f984 	.word	0x3f22f984
1a016f24:	1a01ad4c 	.word	0x1a01ad4c
1a016f28:	2e85a300 	.word	0x2e85a300
1a016f2c:	248d3132 	.word	0x248d3132

1a016f30 <__ieee754_sqrtf>:
1a016f30:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
1a016f34:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
1a016f38:	b470      	push	{r4, r5, r6}
1a016f3a:	ee07 0a90 	vmov	s15, r0
1a016f3e:	d233      	bcs.n	1a016fa8 <__ieee754_sqrtf+0x78>
1a016f40:	b372      	cbz	r2, 1a016fa0 <__ieee754_sqrtf+0x70>
1a016f42:	2800      	cmp	r0, #0
1a016f44:	4603      	mov	r3, r0
1a016f46:	db41      	blt.n	1a016fcc <__ieee754_sqrtf+0x9c>
1a016f48:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
1a016f4c:	ea4f 50e0 	mov.w	r0, r0, asr #23
1a016f50:	d330      	bcc.n	1a016fb4 <__ieee754_sqrtf+0x84>
1a016f52:	f1a0 027f 	sub.w	r2, r0, #127	; 0x7f
1a016f56:	f3c3 0316 	ubfx	r3, r3, #0, #23
1a016f5a:	07d1      	lsls	r1, r2, #31
1a016f5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
1a016f60:	bf48      	it	mi
1a016f62:	005b      	lslmi	r3, r3, #1
1a016f64:	2400      	movs	r4, #0
1a016f66:	1056      	asrs	r6, r2, #1
1a016f68:	005b      	lsls	r3, r3, #1
1a016f6a:	4625      	mov	r5, r4
1a016f6c:	2119      	movs	r1, #25
1a016f6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
1a016f72:	18a8      	adds	r0, r5, r2
1a016f74:	4298      	cmp	r0, r3
1a016f76:	dc02      	bgt.n	1a016f7e <__ieee754_sqrtf+0x4e>
1a016f78:	1a1b      	subs	r3, r3, r0
1a016f7a:	1885      	adds	r5, r0, r2
1a016f7c:	4414      	add	r4, r2
1a016f7e:	3901      	subs	r1, #1
1a016f80:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a016f84:	ea4f 0252 	mov.w	r2, r2, lsr #1
1a016f88:	d1f3      	bne.n	1a016f72 <__ieee754_sqrtf+0x42>
1a016f8a:	b113      	cbz	r3, 1a016f92 <__ieee754_sqrtf+0x62>
1a016f8c:	f004 0301 	and.w	r3, r4, #1
1a016f90:	441c      	add	r4, r3
1a016f92:	1064      	asrs	r4, r4, #1
1a016f94:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
1a016f98:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
1a016f9c:	ee07 3a90 	vmov	s15, r3
1a016fa0:	ee17 0a90 	vmov	r0, s15
1a016fa4:	bc70      	pop	{r4, r5, r6}
1a016fa6:	4770      	bx	lr
1a016fa8:	eee7 7aa7 	vfma.f32	s15, s15, s15
1a016fac:	bc70      	pop	{r4, r5, r6}
1a016fae:	ee17 0a90 	vmov	r0, s15
1a016fb2:	4770      	bx	lr
1a016fb4:	f413 0200 	ands.w	r2, r3, #8388608	; 0x800000
1a016fb8:	d001      	beq.n	1a016fbe <__ieee754_sqrtf+0x8e>
1a016fba:	e00c      	b.n	1a016fd6 <__ieee754_sqrtf+0xa6>
1a016fbc:	460a      	mov	r2, r1
1a016fbe:	005b      	lsls	r3, r3, #1
1a016fc0:	021c      	lsls	r4, r3, #8
1a016fc2:	f102 0101 	add.w	r1, r2, #1
1a016fc6:	d5f9      	bpl.n	1a016fbc <__ieee754_sqrtf+0x8c>
1a016fc8:	1a80      	subs	r0, r0, r2
1a016fca:	e7c2      	b.n	1a016f52 <__ieee754_sqrtf+0x22>
1a016fcc:	ee37 7ae7 	vsub.f32	s14, s15, s15
1a016fd0:	eec7 7a07 	vdiv.f32	s15, s14, s14
1a016fd4:	e7e4      	b.n	1a016fa0 <__ieee754_sqrtf+0x70>
1a016fd6:	f04f 32ff 	mov.w	r2, #4294967295
1a016fda:	e7f5      	b.n	1a016fc8 <__ieee754_sqrtf+0x98>
1a016fdc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a016fe0 <__kernel_cos>:
1a016fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a016fe4:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
1a016fe8:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
1a016fec:	b085      	sub	sp, #20
1a016fee:	4606      	mov	r6, r0
1a016ff0:	460f      	mov	r7, r1
1a016ff2:	4692      	mov	sl, r2
1a016ff4:	469b      	mov	fp, r3
1a016ff6:	da6b      	bge.n	1a0170d0 <__kernel_cos+0xf0>
1a016ff8:	f7fc ff98 	bl	1a013f2c <__aeabi_d2iz>
1a016ffc:	2800      	cmp	r0, #0
1a016ffe:	f000 80ea 	beq.w	1a0171d6 <__kernel_cos+0x1f6>
1a017002:	4632      	mov	r2, r6
1a017004:	463b      	mov	r3, r7
1a017006:	4630      	mov	r0, r6
1a017008:	4639      	mov	r1, r7
1a01700a:	f7fc fcf5 	bl	1a0139f8 <__aeabi_dmul>
1a01700e:	a374      	add	r3, pc, #464	; (adr r3, 1a0171e0 <__kernel_cos+0x200>)
1a017010:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017014:	4604      	mov	r4, r0
1a017016:	460d      	mov	r5, r1
1a017018:	f7fc fcee 	bl	1a0139f8 <__aeabi_dmul>
1a01701c:	a372      	add	r3, pc, #456	; (adr r3, 1a0171e8 <__kernel_cos+0x208>)
1a01701e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017022:	f7fc fb37 	bl	1a013694 <__adddf3>
1a017026:	4622      	mov	r2, r4
1a017028:	462b      	mov	r3, r5
1a01702a:	f7fc fce5 	bl	1a0139f8 <__aeabi_dmul>
1a01702e:	a370      	add	r3, pc, #448	; (adr r3, 1a0171f0 <__kernel_cos+0x210>)
1a017030:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017034:	f7fc fb2c 	bl	1a013690 <__aeabi_dsub>
1a017038:	4622      	mov	r2, r4
1a01703a:	462b      	mov	r3, r5
1a01703c:	f7fc fcdc 	bl	1a0139f8 <__aeabi_dmul>
1a017040:	a36d      	add	r3, pc, #436	; (adr r3, 1a0171f8 <__kernel_cos+0x218>)
1a017042:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017046:	f7fc fb25 	bl	1a013694 <__adddf3>
1a01704a:	4622      	mov	r2, r4
1a01704c:	462b      	mov	r3, r5
1a01704e:	f7fc fcd3 	bl	1a0139f8 <__aeabi_dmul>
1a017052:	a36b      	add	r3, pc, #428	; (adr r3, 1a017200 <__kernel_cos+0x220>)
1a017054:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017058:	f7fc fb1a 	bl	1a013690 <__aeabi_dsub>
1a01705c:	4622      	mov	r2, r4
1a01705e:	462b      	mov	r3, r5
1a017060:	f7fc fcca 	bl	1a0139f8 <__aeabi_dmul>
1a017064:	a368      	add	r3, pc, #416	; (adr r3, 1a017208 <__kernel_cos+0x228>)
1a017066:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01706a:	f7fc fb13 	bl	1a013694 <__adddf3>
1a01706e:	4622      	mov	r2, r4
1a017070:	462b      	mov	r3, r5
1a017072:	f7fc fcc1 	bl	1a0139f8 <__aeabi_dmul>
1a017076:	e9cd 0100 	strd	r0, r1, [sp]
1a01707a:	2200      	movs	r2, #0
1a01707c:	4b66      	ldr	r3, [pc, #408]	; (1a017218 <__kernel_cos+0x238>)
1a01707e:	4620      	mov	r0, r4
1a017080:	4629      	mov	r1, r5
1a017082:	f7fc fcb9 	bl	1a0139f8 <__aeabi_dmul>
1a017086:	e9dd 2300 	ldrd	r2, r3, [sp]
1a01708a:	4680      	mov	r8, r0
1a01708c:	4689      	mov	r9, r1
1a01708e:	4620      	mov	r0, r4
1a017090:	4629      	mov	r1, r5
1a017092:	f7fc fcb1 	bl	1a0139f8 <__aeabi_dmul>
1a017096:	4652      	mov	r2, sl
1a017098:	4604      	mov	r4, r0
1a01709a:	460d      	mov	r5, r1
1a01709c:	465b      	mov	r3, fp
1a01709e:	4630      	mov	r0, r6
1a0170a0:	4639      	mov	r1, r7
1a0170a2:	f7fc fca9 	bl	1a0139f8 <__aeabi_dmul>
1a0170a6:	4602      	mov	r2, r0
1a0170a8:	460b      	mov	r3, r1
1a0170aa:	4620      	mov	r0, r4
1a0170ac:	4629      	mov	r1, r5
1a0170ae:	f7fc faef 	bl	1a013690 <__aeabi_dsub>
1a0170b2:	4602      	mov	r2, r0
1a0170b4:	460b      	mov	r3, r1
1a0170b6:	4640      	mov	r0, r8
1a0170b8:	4649      	mov	r1, r9
1a0170ba:	f7fc fae9 	bl	1a013690 <__aeabi_dsub>
1a0170be:	4602      	mov	r2, r0
1a0170c0:	460b      	mov	r3, r1
1a0170c2:	2000      	movs	r0, #0
1a0170c4:	4955      	ldr	r1, [pc, #340]	; (1a01721c <__kernel_cos+0x23c>)
1a0170c6:	f7fc fae3 	bl	1a013690 <__aeabi_dsub>
1a0170ca:	b005      	add	sp, #20
1a0170cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0170d0:	4602      	mov	r2, r0
1a0170d2:	460b      	mov	r3, r1
1a0170d4:	f7fc fc90 	bl	1a0139f8 <__aeabi_dmul>
1a0170d8:	a341      	add	r3, pc, #260	; (adr r3, 1a0171e0 <__kernel_cos+0x200>)
1a0170da:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0170de:	4604      	mov	r4, r0
1a0170e0:	460d      	mov	r5, r1
1a0170e2:	f7fc fc89 	bl	1a0139f8 <__aeabi_dmul>
1a0170e6:	a340      	add	r3, pc, #256	; (adr r3, 1a0171e8 <__kernel_cos+0x208>)
1a0170e8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0170ec:	f7fc fad2 	bl	1a013694 <__adddf3>
1a0170f0:	4622      	mov	r2, r4
1a0170f2:	462b      	mov	r3, r5
1a0170f4:	f7fc fc80 	bl	1a0139f8 <__aeabi_dmul>
1a0170f8:	a33d      	add	r3, pc, #244	; (adr r3, 1a0171f0 <__kernel_cos+0x210>)
1a0170fa:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0170fe:	f7fc fac7 	bl	1a013690 <__aeabi_dsub>
1a017102:	4622      	mov	r2, r4
1a017104:	462b      	mov	r3, r5
1a017106:	f7fc fc77 	bl	1a0139f8 <__aeabi_dmul>
1a01710a:	a33b      	add	r3, pc, #236	; (adr r3, 1a0171f8 <__kernel_cos+0x218>)
1a01710c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017110:	f7fc fac0 	bl	1a013694 <__adddf3>
1a017114:	4622      	mov	r2, r4
1a017116:	462b      	mov	r3, r5
1a017118:	f7fc fc6e 	bl	1a0139f8 <__aeabi_dmul>
1a01711c:	a338      	add	r3, pc, #224	; (adr r3, 1a017200 <__kernel_cos+0x220>)
1a01711e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017122:	f7fc fab5 	bl	1a013690 <__aeabi_dsub>
1a017126:	4622      	mov	r2, r4
1a017128:	462b      	mov	r3, r5
1a01712a:	f7fc fc65 	bl	1a0139f8 <__aeabi_dmul>
1a01712e:	a336      	add	r3, pc, #216	; (adr r3, 1a017208 <__kernel_cos+0x228>)
1a017130:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017134:	f7fc faae 	bl	1a013694 <__adddf3>
1a017138:	462b      	mov	r3, r5
1a01713a:	4622      	mov	r2, r4
1a01713c:	f7fc fc5c 	bl	1a0139f8 <__aeabi_dmul>
1a017140:	4b37      	ldr	r3, [pc, #220]	; (1a017220 <__kernel_cos+0x240>)
1a017142:	4598      	cmp	r8, r3
1a017144:	e9cd 0100 	strd	r0, r1, [sp]
1a017148:	dd97      	ble.n	1a01707a <__kernel_cos+0x9a>
1a01714a:	4b36      	ldr	r3, [pc, #216]	; (1a017224 <__kernel_cos+0x244>)
1a01714c:	4598      	cmp	r8, r3
1a01714e:	dc39      	bgt.n	1a0171c4 <__kernel_cos+0x1e4>
1a017150:	f5a8 1300 	sub.w	r3, r8, #2097152	; 0x200000
1a017154:	2200      	movs	r2, #0
1a017156:	2000      	movs	r0, #0
1a017158:	4930      	ldr	r1, [pc, #192]	; (1a01721c <__kernel_cos+0x23c>)
1a01715a:	4690      	mov	r8, r2
1a01715c:	4699      	mov	r9, r3
1a01715e:	f7fc fa97 	bl	1a013690 <__aeabi_dsub>
1a017162:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a017166:	2200      	movs	r2, #0
1a017168:	4b2b      	ldr	r3, [pc, #172]	; (1a017218 <__kernel_cos+0x238>)
1a01716a:	4620      	mov	r0, r4
1a01716c:	4629      	mov	r1, r5
1a01716e:	f7fc fc43 	bl	1a0139f8 <__aeabi_dmul>
1a017172:	4642      	mov	r2, r8
1a017174:	464b      	mov	r3, r9
1a017176:	f7fc fa8b 	bl	1a013690 <__aeabi_dsub>
1a01717a:	e9dd 2300 	ldrd	r2, r3, [sp]
1a01717e:	4680      	mov	r8, r0
1a017180:	4689      	mov	r9, r1
1a017182:	4620      	mov	r0, r4
1a017184:	4629      	mov	r1, r5
1a017186:	f7fc fc37 	bl	1a0139f8 <__aeabi_dmul>
1a01718a:	4652      	mov	r2, sl
1a01718c:	4604      	mov	r4, r0
1a01718e:	460d      	mov	r5, r1
1a017190:	465b      	mov	r3, fp
1a017192:	4630      	mov	r0, r6
1a017194:	4639      	mov	r1, r7
1a017196:	f7fc fc2f 	bl	1a0139f8 <__aeabi_dmul>
1a01719a:	4602      	mov	r2, r0
1a01719c:	460b      	mov	r3, r1
1a01719e:	4620      	mov	r0, r4
1a0171a0:	4629      	mov	r1, r5
1a0171a2:	f7fc fa75 	bl	1a013690 <__aeabi_dsub>
1a0171a6:	4602      	mov	r2, r0
1a0171a8:	460b      	mov	r3, r1
1a0171aa:	4640      	mov	r0, r8
1a0171ac:	4649      	mov	r1, r9
1a0171ae:	f7fc fa6f 	bl	1a013690 <__aeabi_dsub>
1a0171b2:	4602      	mov	r2, r0
1a0171b4:	460b      	mov	r3, r1
1a0171b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a0171ba:	f7fc fa69 	bl	1a013690 <__aeabi_dsub>
1a0171be:	b005      	add	sp, #20
1a0171c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0171c4:	ed9f 7b12 	vldr	d7, [pc, #72]	; 1a017210 <__kernel_cos+0x230>
1a0171c8:	f04f 0800 	mov.w	r8, #0
1a0171cc:	ed8d 7b02 	vstr	d7, [sp, #8]
1a0171d0:	f8df 9054 	ldr.w	r9, [pc, #84]	; 1a017228 <__kernel_cos+0x248>
1a0171d4:	e7c7      	b.n	1a017166 <__kernel_cos+0x186>
1a0171d6:	4911      	ldr	r1, [pc, #68]	; (1a01721c <__kernel_cos+0x23c>)
1a0171d8:	2000      	movs	r0, #0
1a0171da:	b005      	add	sp, #20
1a0171dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0171e0:	be8838d4 	.word	0xbe8838d4
1a0171e4:	bda8fae9 	.word	0xbda8fae9
1a0171e8:	bdb4b1c4 	.word	0xbdb4b1c4
1a0171ec:	3e21ee9e 	.word	0x3e21ee9e
1a0171f0:	809c52ad 	.word	0x809c52ad
1a0171f4:	3e927e4f 	.word	0x3e927e4f
1a0171f8:	19cb1590 	.word	0x19cb1590
1a0171fc:	3efa01a0 	.word	0x3efa01a0
1a017200:	16c15177 	.word	0x16c15177
1a017204:	3f56c16c 	.word	0x3f56c16c
1a017208:	5555554c 	.word	0x5555554c
1a01720c:	3fa55555 	.word	0x3fa55555
1a017210:	00000000 	.word	0x00000000
1a017214:	3fe70000 	.word	0x3fe70000
1a017218:	3fe00000 	.word	0x3fe00000
1a01721c:	3ff00000 	.word	0x3ff00000
1a017220:	3fd33332 	.word	0x3fd33332
1a017224:	3fe90000 	.word	0x3fe90000
1a017228:	3fd20000 	.word	0x3fd20000
1a01722c:	ffffffff 	.word	0xffffffff

1a017230 <__kernel_rem_pio2>:
1a017230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a017234:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
1a017238:	4c7d      	ldr	r4, [pc, #500]	; (1a017430 <__kernel_rem_pio2+0x200>)
1a01723a:	9ea4      	ldr	r6, [sp, #656]	; 0x290
1a01723c:	4d7d      	ldr	r5, [pc, #500]	; (1a017434 <__kernel_rem_pio2+0x204>)
1a01723e:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
1a017242:	9407      	str	r4, [sp, #28]
1a017244:	4626      	mov	r6, r4
1a017246:	1ed4      	subs	r4, r2, #3
1a017248:	fb85 7504 	smull	r7, r5, r5, r4
1a01724c:	17e4      	asrs	r4, r4, #31
1a01724e:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
1a017252:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
1a017256:	461d      	mov	r5, r3
1a017258:	930a      	str	r3, [sp, #40]	; 0x28
1a01725a:	1c63      	adds	r3, r4, #1
1a01725c:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
1a017260:	3d01      	subs	r5, #1
1a017262:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a017266:	9306      	str	r3, [sp, #24]
1a017268:	462b      	mov	r3, r5
1a01726a:	940b      	str	r4, [sp, #44]	; 0x2c
1a01726c:	9500      	str	r5, [sp, #0]
1a01726e:	1b65      	subs	r5, r4, r5
1a017270:	18f4      	adds	r4, r6, r3
1a017272:	9003      	str	r0, [sp, #12]
1a017274:	9108      	str	r1, [sp, #32]
1a017276:	d416      	bmi.n	1a0172a6 <__kernel_rem_pio2+0x76>
1a017278:	442c      	add	r4, r5
1a01727a:	3401      	adds	r4, #1
1a01727c:	ae22      	add	r6, sp, #136	; 0x88
1a01727e:	9fa5      	ldr	r7, [sp, #660]	; 0x294
1a017280:	e008      	b.n	1a017294 <__kernel_rem_pio2+0x64>
1a017282:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
1a017286:	f7fc fb51 	bl	1a01392c <__aeabi_i2d>
1a01728a:	3501      	adds	r5, #1
1a01728c:	42a5      	cmp	r5, r4
1a01728e:	e8e6 0102 	strd	r0, r1, [r6], #8
1a017292:	d008      	beq.n	1a0172a6 <__kernel_rem_pio2+0x76>
1a017294:	2d00      	cmp	r5, #0
1a017296:	daf4      	bge.n	1a017282 <__kernel_rem_pio2+0x52>
1a017298:	3501      	adds	r5, #1
1a01729a:	2000      	movs	r0, #0
1a01729c:	2100      	movs	r1, #0
1a01729e:	42a5      	cmp	r5, r4
1a0172a0:	e8e6 0102 	strd	r0, r1, [r6], #8
1a0172a4:	d1f6      	bne.n	1a017294 <__kernel_rem_pio2+0x64>
1a0172a6:	9b07      	ldr	r3, [sp, #28]
1a0172a8:	2b00      	cmp	r3, #0
1a0172aa:	f2c0 83b4 	blt.w	1a017a16 <__kernel_rem_pio2+0x7e6>
1a0172ae:	9b07      	ldr	r3, [sp, #28]
1a0172b0:	f103 0b01 	add.w	fp, r3, #1
1a0172b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0172b6:	a922      	add	r1, sp, #136	; 0x88
1a0172b8:	00db      	lsls	r3, r3, #3
1a0172ba:	461a      	mov	r2, r3
1a0172bc:	eb01 0903 	add.w	r9, r1, r3
1a0172c0:	9304      	str	r3, [sp, #16]
1a0172c2:	9b03      	ldr	r3, [sp, #12]
1a0172c4:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
1a0172c8:	4619      	mov	r1, r3
1a0172ca:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
1a0172ce:	eb01 0802 	add.w	r8, r1, r2
1a0172d2:	9b00      	ldr	r3, [sp, #0]
1a0172d4:	2b00      	cmp	r3, #0
1a0172d6:	f2c0 8187 	blt.w	1a0175e8 <__kernel_rem_pio2+0x3b8>
1a0172da:	9c03      	ldr	r4, [sp, #12]
1a0172dc:	464d      	mov	r5, r9
1a0172de:	2600      	movs	r6, #0
1a0172e0:	2700      	movs	r7, #0
1a0172e2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
1a0172e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
1a0172ea:	f7fc fb85 	bl	1a0139f8 <__aeabi_dmul>
1a0172ee:	4602      	mov	r2, r0
1a0172f0:	460b      	mov	r3, r1
1a0172f2:	4630      	mov	r0, r6
1a0172f4:	4639      	mov	r1, r7
1a0172f6:	f7fc f9cd 	bl	1a013694 <__adddf3>
1a0172fa:	4544      	cmp	r4, r8
1a0172fc:	4606      	mov	r6, r0
1a0172fe:	460f      	mov	r7, r1
1a017300:	d1ef      	bne.n	1a0172e2 <__kernel_rem_pio2+0xb2>
1a017302:	e8ea 6702 	strd	r6, r7, [sl], #8
1a017306:	45da      	cmp	sl, fp
1a017308:	f109 0908 	add.w	r9, r9, #8
1a01730c:	d1e1      	bne.n	1a0172d2 <__kernel_rem_pio2+0xa2>
1a01730e:	9907      	ldr	r1, [sp, #28]
1a017310:	9804      	ldr	r0, [sp, #16]
1a017312:	9c03      	ldr	r4, [sp, #12]
1a017314:	9104      	str	r1, [sp, #16]
1a017316:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
1a01731a:	3b02      	subs	r3, #2
1a01731c:	009b      	lsls	r3, r3, #2
1a01731e:	4420      	add	r0, r4
1a017320:	1d1a      	adds	r2, r3, #4
1a017322:	4683      	mov	fp, r0
1a017324:	a80e      	add	r0, sp, #56	; 0x38
1a017326:	4402      	add	r2, r0
1a017328:	4403      	add	r3, r0
1a01732a:	920d      	str	r2, [sp, #52]	; 0x34
1a01732c:	930c      	str	r3, [sp, #48]	; 0x30
1a01732e:	9a04      	ldr	r2, [sp, #16]
1a017330:	a99a      	add	r1, sp, #616	; 0x268
1a017332:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
1a017336:	2a00      	cmp	r2, #0
1a017338:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
1a01733c:	dd29      	ble.n	1a017392 <__kernel_rem_pio2+0x162>
1a01733e:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
1a017342:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
1a017346:	f10d 0934 	add.w	r9, sp, #52	; 0x34
1a01734a:	2200      	movs	r2, #0
1a01734c:	4b3a      	ldr	r3, [pc, #232]	; (1a017438 <__kernel_rem_pio2+0x208>)
1a01734e:	4620      	mov	r0, r4
1a017350:	4629      	mov	r1, r5
1a017352:	f7fc fb51 	bl	1a0139f8 <__aeabi_dmul>
1a017356:	f7fc fde9 	bl	1a013f2c <__aeabi_d2iz>
1a01735a:	f7fc fae7 	bl	1a01392c <__aeabi_i2d>
1a01735e:	2200      	movs	r2, #0
1a017360:	4b36      	ldr	r3, [pc, #216]	; (1a01743c <__kernel_rem_pio2+0x20c>)
1a017362:	4606      	mov	r6, r0
1a017364:	460f      	mov	r7, r1
1a017366:	f7fc fb47 	bl	1a0139f8 <__aeabi_dmul>
1a01736a:	4602      	mov	r2, r0
1a01736c:	460b      	mov	r3, r1
1a01736e:	4620      	mov	r0, r4
1a017370:	4629      	mov	r1, r5
1a017372:	f7fc f98d 	bl	1a013690 <__aeabi_dsub>
1a017376:	f7fc fdd9 	bl	1a013f2c <__aeabi_d2iz>
1a01737a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
1a01737e:	f849 0f04 	str.w	r0, [r9, #4]!
1a017382:	4639      	mov	r1, r7
1a017384:	4630      	mov	r0, r6
1a017386:	f7fc f985 	bl	1a013694 <__adddf3>
1a01738a:	45d0      	cmp	r8, sl
1a01738c:	4604      	mov	r4, r0
1a01738e:	460d      	mov	r5, r1
1a017390:	d1db      	bne.n	1a01734a <__kernel_rem_pio2+0x11a>
1a017392:	f8dd 9018 	ldr.w	r9, [sp, #24]
1a017396:	4620      	mov	r0, r4
1a017398:	4629      	mov	r1, r5
1a01739a:	464a      	mov	r2, r9
1a01739c:	f001 f810 	bl	1a0183c0 <scalbn>
1a0173a0:	2200      	movs	r2, #0
1a0173a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a0173a6:	4604      	mov	r4, r0
1a0173a8:	460d      	mov	r5, r1
1a0173aa:	f7fc fb25 	bl	1a0139f8 <__aeabi_dmul>
1a0173ae:	f7fd ff13 	bl	1a0151d8 <floor>
1a0173b2:	2200      	movs	r2, #0
1a0173b4:	4b22      	ldr	r3, [pc, #136]	; (1a017440 <__kernel_rem_pio2+0x210>)
1a0173b6:	f7fc fb1f 	bl	1a0139f8 <__aeabi_dmul>
1a0173ba:	4602      	mov	r2, r0
1a0173bc:	460b      	mov	r3, r1
1a0173be:	4620      	mov	r0, r4
1a0173c0:	4629      	mov	r1, r5
1a0173c2:	f7fc f965 	bl	1a013690 <__aeabi_dsub>
1a0173c6:	460d      	mov	r5, r1
1a0173c8:	4604      	mov	r4, r0
1a0173ca:	f7fc fdaf 	bl	1a013f2c <__aeabi_d2iz>
1a0173ce:	4680      	mov	r8, r0
1a0173d0:	f7fc faac 	bl	1a01392c <__aeabi_i2d>
1a0173d4:	460b      	mov	r3, r1
1a0173d6:	4602      	mov	r2, r0
1a0173d8:	4629      	mov	r1, r5
1a0173da:	4620      	mov	r0, r4
1a0173dc:	f7fc f958 	bl	1a013690 <__aeabi_dsub>
1a0173e0:	464b      	mov	r3, r9
1a0173e2:	2b00      	cmp	r3, #0
1a0173e4:	4606      	mov	r6, r0
1a0173e6:	460f      	mov	r7, r1
1a0173e8:	f340 80e4 	ble.w	1a0175b4 <__kernel_rem_pio2+0x384>
1a0173ec:	9a04      	ldr	r2, [sp, #16]
1a0173ee:	a90e      	add	r1, sp, #56	; 0x38
1a0173f0:	3a01      	subs	r2, #1
1a0173f2:	f1c9 0318 	rsb	r3, r9, #24
1a0173f6:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
1a0173fa:	fa45 f103 	asr.w	r1, r5, r3
1a0173fe:	fa01 f303 	lsl.w	r3, r1, r3
1a017402:	a80e      	add	r0, sp, #56	; 0x38
1a017404:	1aeb      	subs	r3, r5, r3
1a017406:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
1a01740a:	f1c9 0517 	rsb	r5, r9, #23
1a01740e:	4488      	add	r8, r1
1a017410:	fa43 f505 	asr.w	r5, r3, r5
1a017414:	2d00      	cmp	r5, #0
1a017416:	dd40      	ble.n	1a01749a <__kernel_rem_pio2+0x26a>
1a017418:	9b04      	ldr	r3, [sp, #16]
1a01741a:	2b00      	cmp	r3, #0
1a01741c:	f108 0801 	add.w	r8, r8, #1
1a017420:	f340 82c3 	ble.w	1a0179aa <__kernel_rem_pio2+0x77a>
1a017424:	2200      	movs	r2, #0
1a017426:	4614      	mov	r4, r2
1a017428:	a90d      	add	r1, sp, #52	; 0x34
1a01742a:	9804      	ldr	r0, [sp, #16]
1a01742c:	46ae      	mov	lr, r5
1a01742e:	e011      	b.n	1a017454 <__kernel_rem_pio2+0x224>
1a017430:	1a01b0e4 	.word	0x1a01b0e4
1a017434:	2aaaaaab 	.word	0x2aaaaaab
1a017438:	3e700000 	.word	0x3e700000
1a01743c:	41700000 	.word	0x41700000
1a017440:	40200000 	.word	0x40200000
1a017444:	f1c3 7580 	rsb	r5, r3, #16777216	; 0x1000000
1a017448:	b10b      	cbz	r3, 1a01744e <__kernel_rem_pio2+0x21e>
1a01744a:	600d      	str	r5, [r1, #0]
1a01744c:	2401      	movs	r4, #1
1a01744e:	3201      	adds	r2, #1
1a017450:	4290      	cmp	r0, r2
1a017452:	dd0d      	ble.n	1a017470 <__kernel_rem_pio2+0x240>
1a017454:	f851 3f04 	ldr.w	r3, [r1, #4]!
1a017458:	2c00      	cmp	r4, #0
1a01745a:	d0f3      	beq.n	1a017444 <__kernel_rem_pio2+0x214>
1a01745c:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
1a017460:	3201      	adds	r2, #1
1a017462:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
1a017466:	4290      	cmp	r0, r2
1a017468:	600b      	str	r3, [r1, #0]
1a01746a:	f04f 0401 	mov.w	r4, #1
1a01746e:	dcf1      	bgt.n	1a017454 <__kernel_rem_pio2+0x224>
1a017470:	4675      	mov	r5, lr
1a017472:	9b06      	ldr	r3, [sp, #24]
1a017474:	2b00      	cmp	r3, #0
1a017476:	dd0e      	ble.n	1a017496 <__kernel_rem_pio2+0x266>
1a017478:	2b01      	cmp	r3, #1
1a01747a:	f000 80a3 	beq.w	1a0175c4 <__kernel_rem_pio2+0x394>
1a01747e:	2b02      	cmp	r3, #2
1a017480:	d109      	bne.n	1a017496 <__kernel_rem_pio2+0x266>
1a017482:	9b04      	ldr	r3, [sp, #16]
1a017484:	1e5a      	subs	r2, r3, #1
1a017486:	ab0e      	add	r3, sp, #56	; 0x38
1a017488:	a90e      	add	r1, sp, #56	; 0x38
1a01748a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a01748e:	f3c3 0315 	ubfx	r3, r3, #0, #22
1a017492:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
1a017496:	2d02      	cmp	r5, #2
1a017498:	d074      	beq.n	1a017584 <__kernel_rem_pio2+0x354>
1a01749a:	2200      	movs	r2, #0
1a01749c:	2300      	movs	r3, #0
1a01749e:	4630      	mov	r0, r6
1a0174a0:	4639      	mov	r1, r7
1a0174a2:	f7fc fd11 	bl	1a013ec8 <__aeabi_dcmpeq>
1a0174a6:	2800      	cmp	r0, #0
1a0174a8:	f000 8245 	beq.w	1a017936 <__kernel_rem_pio2+0x706>
1a0174ac:	9a04      	ldr	r2, [sp, #16]
1a0174ae:	9b07      	ldr	r3, [sp, #28]
1a0174b0:	1e50      	subs	r0, r2, #1
1a0174b2:	4283      	cmp	r3, r0
1a0174b4:	dc10      	bgt.n	1a0174d8 <__kernel_rem_pio2+0x2a8>
1a0174b6:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
1a0174ba:	3b01      	subs	r3, #1
1a0174bc:	aa0e      	add	r2, sp, #56	; 0x38
1a0174be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1a0174c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1a0174c4:	2200      	movs	r2, #0
1a0174c6:	f853 1904 	ldr.w	r1, [r3], #-4
1a0174ca:	42a3      	cmp	r3, r4
1a0174cc:	ea42 0201 	orr.w	r2, r2, r1
1a0174d0:	d1f9      	bne.n	1a0174c6 <__kernel_rem_pio2+0x296>
1a0174d2:	2a00      	cmp	r2, #0
1a0174d4:	f040 80a4 	bne.w	1a017620 <__kernel_rem_pio2+0x3f0>
1a0174d8:	9b07      	ldr	r3, [sp, #28]
1a0174da:	aa0e      	add	r2, sp, #56	; 0x38
1a0174dc:	3b01      	subs	r3, #1
1a0174de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0174e2:	2b00      	cmp	r3, #0
1a0174e4:	f040 825f 	bne.w	1a0179a6 <__kernel_rem_pio2+0x776>
1a0174e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0174ea:	2301      	movs	r3, #1
1a0174ec:	f852 1904 	ldr.w	r1, [r2], #-4
1a0174f0:	3301      	adds	r3, #1
1a0174f2:	2900      	cmp	r1, #0
1a0174f4:	d0fa      	beq.n	1a0174ec <__kernel_rem_pio2+0x2bc>
1a0174f6:	9a04      	ldr	r2, [sp, #16]
1a0174f8:	18d3      	adds	r3, r2, r3
1a0174fa:	f102 0a01 	add.w	sl, r2, #1
1a0174fe:	459a      	cmp	sl, r3
1a017500:	9309      	str	r3, [sp, #36]	; 0x24
1a017502:	dc3c      	bgt.n	1a01757e <__kernel_rem_pio2+0x34e>
1a017504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a017506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a017508:	9909      	ldr	r1, [sp, #36]	; 0x24
1a01750a:	eb0a 0903 	add.w	r9, sl, r3
1a01750e:	9b04      	ldr	r3, [sp, #16]
1a017510:	4698      	mov	r8, r3
1a017512:	4490      	add	r8, r2
1a017514:	188b      	adds	r3, r1, r2
1a017516:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
1a01751a:	9aa5      	ldr	r2, [sp, #660]	; 0x294
1a01751c:	f109 39ff 	add.w	r9, r9, #4294967295
1a017520:	eb02 0989 	add.w	r9, r2, r9, lsl #2
1a017524:	aa22      	add	r2, sp, #136	; 0x88
1a017526:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a01752a:	9304      	str	r3, [sp, #16]
1a01752c:	ab72      	add	r3, sp, #456	; 0x1c8
1a01752e:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
1a017532:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
1a017536:	f859 0f04 	ldr.w	r0, [r9, #4]!
1a01753a:	f7fc f9f7 	bl	1a01392c <__aeabi_i2d>
1a01753e:	9b00      	ldr	r3, [sp, #0]
1a017540:	2b00      	cmp	r3, #0
1a017542:	e8e8 0102 	strd	r0, r1, [r8], #8
1a017546:	f04f 0600 	mov.w	r6, #0
1a01754a:	f04f 0700 	mov.w	r7, #0
1a01754e:	db11      	blt.n	1a017574 <__kernel_rem_pio2+0x344>
1a017550:	9c03      	ldr	r4, [sp, #12]
1a017552:	4645      	mov	r5, r8
1a017554:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
1a017558:	e8f4 0102 	ldrd	r0, r1, [r4], #8
1a01755c:	f7fc fa4c 	bl	1a0139f8 <__aeabi_dmul>
1a017560:	4602      	mov	r2, r0
1a017562:	460b      	mov	r3, r1
1a017564:	4630      	mov	r0, r6
1a017566:	4639      	mov	r1, r7
1a017568:	f7fc f894 	bl	1a013694 <__adddf3>
1a01756c:	455c      	cmp	r4, fp
1a01756e:	4606      	mov	r6, r0
1a017570:	460f      	mov	r7, r1
1a017572:	d1ef      	bne.n	1a017554 <__kernel_rem_pio2+0x324>
1a017574:	9b04      	ldr	r3, [sp, #16]
1a017576:	4598      	cmp	r8, r3
1a017578:	e8ea 6702 	strd	r6, r7, [sl], #8
1a01757c:	d1db      	bne.n	1a017536 <__kernel_rem_pio2+0x306>
1a01757e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a017580:	9304      	str	r3, [sp, #16]
1a017582:	e6d4      	b.n	1a01732e <__kernel_rem_pio2+0xfe>
1a017584:	4632      	mov	r2, r6
1a017586:	463b      	mov	r3, r7
1a017588:	2000      	movs	r0, #0
1a01758a:	49b1      	ldr	r1, [pc, #708]	; (1a017850 <__kernel_rem_pio2+0x620>)
1a01758c:	f7fc f880 	bl	1a013690 <__aeabi_dsub>
1a017590:	4606      	mov	r6, r0
1a017592:	460f      	mov	r7, r1
1a017594:	2c00      	cmp	r4, #0
1a017596:	d080      	beq.n	1a01749a <__kernel_rem_pio2+0x26a>
1a017598:	9a06      	ldr	r2, [sp, #24]
1a01759a:	49ad      	ldr	r1, [pc, #692]	; (1a017850 <__kernel_rem_pio2+0x620>)
1a01759c:	2000      	movs	r0, #0
1a01759e:	f000 ff0f 	bl	1a0183c0 <scalbn>
1a0175a2:	4602      	mov	r2, r0
1a0175a4:	460b      	mov	r3, r1
1a0175a6:	4630      	mov	r0, r6
1a0175a8:	4639      	mov	r1, r7
1a0175aa:	f7fc f871 	bl	1a013690 <__aeabi_dsub>
1a0175ae:	4606      	mov	r6, r0
1a0175b0:	460f      	mov	r7, r1
1a0175b2:	e772      	b.n	1a01749a <__kernel_rem_pio2+0x26a>
1a0175b4:	d111      	bne.n	1a0175da <__kernel_rem_pio2+0x3aa>
1a0175b6:	9b04      	ldr	r3, [sp, #16]
1a0175b8:	aa0e      	add	r2, sp, #56	; 0x38
1a0175ba:	3b01      	subs	r3, #1
1a0175bc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
1a0175c0:	15ed      	asrs	r5, r5, #23
1a0175c2:	e727      	b.n	1a017414 <__kernel_rem_pio2+0x1e4>
1a0175c4:	9b04      	ldr	r3, [sp, #16]
1a0175c6:	1e5a      	subs	r2, r3, #1
1a0175c8:	ab0e      	add	r3, sp, #56	; 0x38
1a0175ca:	a90e      	add	r1, sp, #56	; 0x38
1a0175cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a0175d0:	f3c3 0316 	ubfx	r3, r3, #0, #23
1a0175d4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
1a0175d8:	e75d      	b.n	1a017496 <__kernel_rem_pio2+0x266>
1a0175da:	2200      	movs	r2, #0
1a0175dc:	4b9d      	ldr	r3, [pc, #628]	; (1a017854 <__kernel_rem_pio2+0x624>)
1a0175de:	f7fc fc91 	bl	1a013f04 <__aeabi_dcmpge>
1a0175e2:	b958      	cbnz	r0, 1a0175fc <__kernel_rem_pio2+0x3cc>
1a0175e4:	4605      	mov	r5, r0
1a0175e6:	e758      	b.n	1a01749a <__kernel_rem_pio2+0x26a>
1a0175e8:	2600      	movs	r6, #0
1a0175ea:	2700      	movs	r7, #0
1a0175ec:	e8ea 6702 	strd	r6, r7, [sl], #8
1a0175f0:	45da      	cmp	sl, fp
1a0175f2:	f109 0908 	add.w	r9, r9, #8
1a0175f6:	f47f ae6c 	bne.w	1a0172d2 <__kernel_rem_pio2+0xa2>
1a0175fa:	e688      	b.n	1a01730e <__kernel_rem_pio2+0xde>
1a0175fc:	9b04      	ldr	r3, [sp, #16]
1a0175fe:	2b00      	cmp	r3, #0
1a017600:	f108 0801 	add.w	r8, r8, #1
1a017604:	bfc8      	it	gt
1a017606:	2502      	movgt	r5, #2
1a017608:	f73f af0c 	bgt.w	1a017424 <__kernel_rem_pio2+0x1f4>
1a01760c:	4632      	mov	r2, r6
1a01760e:	463b      	mov	r3, r7
1a017610:	2000      	movs	r0, #0
1a017612:	498f      	ldr	r1, [pc, #572]	; (1a017850 <__kernel_rem_pio2+0x620>)
1a017614:	f7fc f83c 	bl	1a013690 <__aeabi_dsub>
1a017618:	2502      	movs	r5, #2
1a01761a:	4606      	mov	r6, r0
1a01761c:	460f      	mov	r7, r1
1a01761e:	e73c      	b.n	1a01749a <__kernel_rem_pio2+0x26a>
1a017620:	a90e      	add	r1, sp, #56	; 0x38
1a017622:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
1a017626:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
1a01762a:	9906      	ldr	r1, [sp, #24]
1a01762c:	9000      	str	r0, [sp, #0]
1a01762e:	3918      	subs	r1, #24
1a017630:	4602      	mov	r2, r0
1a017632:	9503      	str	r5, [sp, #12]
1a017634:	9106      	str	r1, [sp, #24]
1a017636:	b96b      	cbnz	r3, 1a017654 <__kernel_rem_pio2+0x424>
1a017638:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
1a01763c:	3b01      	subs	r3, #1
1a01763e:	a80e      	add	r0, sp, #56	; 0x38
1a017640:	eb00 0383 	add.w	r3, r0, r3, lsl #2
1a017644:	f853 0904 	ldr.w	r0, [r3], #-4
1a017648:	3a01      	subs	r2, #1
1a01764a:	3918      	subs	r1, #24
1a01764c:	2800      	cmp	r0, #0
1a01764e:	d0f9      	beq.n	1a017644 <__kernel_rem_pio2+0x414>
1a017650:	9200      	str	r2, [sp, #0]
1a017652:	9106      	str	r1, [sp, #24]
1a017654:	9a06      	ldr	r2, [sp, #24]
1a017656:	497e      	ldr	r1, [pc, #504]	; (1a017850 <__kernel_rem_pio2+0x620>)
1a017658:	2000      	movs	r0, #0
1a01765a:	f000 feb1 	bl	1a0183c0 <scalbn>
1a01765e:	9b00      	ldr	r3, [sp, #0]
1a017660:	2b00      	cmp	r3, #0
1a017662:	4604      	mov	r4, r0
1a017664:	460d      	mov	r5, r1
1a017666:	f2c0 81bc 	blt.w	1a0179e2 <__kernel_rem_pio2+0x7b2>
1a01766a:	00da      	lsls	r2, r3, #3
1a01766c:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
1a017670:	a90e      	add	r1, sp, #56	; 0x38
1a017672:	eb01 0683 	add.w	r6, r1, r3, lsl #2
1a017676:	eb08 0b02 	add.w	fp, r8, r2
1a01767a:	9206      	str	r2, [sp, #24]
1a01767c:	3604      	adds	r6, #4
1a01767e:	f10b 0708 	add.w	r7, fp, #8
1a017682:	f856 0d04 	ldr.w	r0, [r6, #-4]!
1a017686:	f7fc f951 	bl	1a01392c <__aeabi_i2d>
1a01768a:	4622      	mov	r2, r4
1a01768c:	462b      	mov	r3, r5
1a01768e:	f7fc f9b3 	bl	1a0139f8 <__aeabi_dmul>
1a017692:	2200      	movs	r2, #0
1a017694:	e967 0102 	strd	r0, r1, [r7, #-8]!
1a017698:	4b6f      	ldr	r3, [pc, #444]	; (1a017858 <__kernel_rem_pio2+0x628>)
1a01769a:	4620      	mov	r0, r4
1a01769c:	4629      	mov	r1, r5
1a01769e:	f7fc f9ab 	bl	1a0139f8 <__aeabi_dmul>
1a0176a2:	4547      	cmp	r7, r8
1a0176a4:	4604      	mov	r4, r0
1a0176a6:	460d      	mov	r5, r1
1a0176a8:	d1eb      	bne.n	1a017682 <__kernel_rem_pio2+0x452>
1a0176aa:	ac4a      	add	r4, sp, #296	; 0x128
1a0176ac:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0176b0:	9404      	str	r4, [sp, #16]
1a0176b2:	f04f 0a00 	mov.w	sl, #0
1a0176b6:	f1b9 0f00 	cmp.w	r9, #0
1a0176ba:	f2c0 8127 	blt.w	1a01790c <__kernel_rem_pio2+0x6dc>
1a0176be:	f8df 819c 	ldr.w	r8, [pc, #412]	; 1a01785c <__kernel_rem_pio2+0x62c>
1a0176c2:	465d      	mov	r5, fp
1a0176c4:	a360      	add	r3, pc, #384	; (adr r3, 1a017848 <__kernel_rem_pio2+0x618>)
1a0176c6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0176ca:	2600      	movs	r6, #0
1a0176cc:	2700      	movs	r7, #0
1a0176ce:	2400      	movs	r4, #0
1a0176d0:	e003      	b.n	1a0176da <__kernel_rem_pio2+0x4aa>
1a0176d2:	45a2      	cmp	sl, r4
1a0176d4:	db10      	blt.n	1a0176f8 <__kernel_rem_pio2+0x4c8>
1a0176d6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
1a0176da:	e8f5 0102 	ldrd	r0, r1, [r5], #8
1a0176de:	f7fc f98b 	bl	1a0139f8 <__aeabi_dmul>
1a0176e2:	4602      	mov	r2, r0
1a0176e4:	460b      	mov	r3, r1
1a0176e6:	4630      	mov	r0, r6
1a0176e8:	4639      	mov	r1, r7
1a0176ea:	f7fb ffd3 	bl	1a013694 <__adddf3>
1a0176ee:	3401      	adds	r4, #1
1a0176f0:	45a1      	cmp	r9, r4
1a0176f2:	4606      	mov	r6, r0
1a0176f4:	460f      	mov	r7, r1
1a0176f6:	daec      	bge.n	1a0176d2 <__kernel_rem_pio2+0x4a2>
1a0176f8:	9b04      	ldr	r3, [sp, #16]
1a0176fa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
1a0176fe:	f1ab 0b08 	sub.w	fp, fp, #8
1a017702:	e9c3 6700 	strd	r6, r7, [r3]
1a017706:	ab70      	add	r3, sp, #448	; 0x1c0
1a017708:	459b      	cmp	fp, r3
1a01770a:	f10a 0a01 	add.w	sl, sl, #1
1a01770e:	d1d2      	bne.n	1a0176b6 <__kernel_rem_pio2+0x486>
1a017710:	9ba4      	ldr	r3, [sp, #656]	; 0x290
1a017712:	9c04      	ldr	r4, [sp, #16]
1a017714:	2b03      	cmp	r3, #3
1a017716:	f200 808d 	bhi.w	1a017834 <__kernel_rem_pio2+0x604>
1a01771a:	e8df f013 	tbh	[pc, r3, lsl #1]
1a01771e:	00d9      	.short	0x00d9
1a017720:	00a100a1 	.word	0x00a100a1
1a017724:	0004      	.short	0x0004
1a017726:	9b00      	ldr	r3, [sp, #0]
1a017728:	2b00      	cmp	r3, #0
1a01772a:	f340 8157 	ble.w	1a0179dc <__kernel_rem_pio2+0x7ac>
1a01772e:	9b00      	ldr	r3, [sp, #0]
1a017730:	f103 5b00 	add.w	fp, r3, #536870912	; 0x20000000
1a017734:	9b06      	ldr	r3, [sp, #24]
1a017736:	f10b 3bff 	add.w	fp, fp, #4294967295
1a01773a:	18e2      	adds	r2, r4, r3
1a01773c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
1a017740:	e9d2 8900 	ldrd	r8, r9, [r2]
1a017744:	f103 0208 	add.w	r2, r3, #8
1a017748:	3310      	adds	r3, #16
1a01774a:	eb04 0a02 	add.w	sl, r4, r2
1a01774e:	18e5      	adds	r5, r4, r3
1a017750:	ed3a 7b02 	vldmdb	sl!, {d7}
1a017754:	4642      	mov	r2, r8
1a017756:	464b      	mov	r3, r9
1a017758:	ec51 0b17 	vmov	r0, r1, d7
1a01775c:	ed8d 7b04 	vstr	d7, [sp, #16]
1a017760:	f7fb ff98 	bl	1a013694 <__adddf3>
1a017764:	4606      	mov	r6, r0
1a017766:	460f      	mov	r7, r1
1a017768:	4602      	mov	r2, r0
1a01776a:	460b      	mov	r3, r1
1a01776c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a017770:	f7fb ff8e 	bl	1a013690 <__aeabi_dsub>
1a017774:	464b      	mov	r3, r9
1a017776:	4642      	mov	r2, r8
1a017778:	f7fb ff8c 	bl	1a013694 <__adddf3>
1a01777c:	e965 0102 	strd	r0, r1, [r5, #-8]!
1a017780:	ab4c      	add	r3, sp, #304	; 0x130
1a017782:	429d      	cmp	r5, r3
1a017784:	46b0      	mov	r8, r6
1a017786:	46b9      	mov	r9, r7
1a017788:	e9ca 6700 	strd	r6, r7, [sl]
1a01778c:	d1e0      	bne.n	1a017750 <__kernel_rem_pio2+0x520>
1a01778e:	9b00      	ldr	r3, [sp, #0]
1a017790:	2b01      	cmp	r3, #1
1a017792:	f340 8123 	ble.w	1a0179dc <__kernel_rem_pio2+0x7ac>
1a017796:	9b06      	ldr	r3, [sp, #24]
1a017798:	4423      	add	r3, r4
1a01779a:	ed93 7b00 	vldr	d7, [r3]
1a01779e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
1a0177a2:	f10b 0a10 	add.w	sl, fp, #16
1a0177a6:	ed8d 7b00 	vstr	d7, [sp]
1a0177aa:	44a2      	add	sl, r4
1a0177ac:	f10b 0b08 	add.w	fp, fp, #8
1a0177b0:	eb04 050b 	add.w	r5, r4, fp
1a0177b4:	46d0      	mov	r8, sl
1a0177b6:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
1a0177ba:	f8cd a010 	str.w	sl, [sp, #16]
1a0177be:	e975 9a02 	ldrd	r9, sl, [r5, #-8]!
1a0177c2:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0177c6:	464a      	mov	r2, r9
1a0177c8:	4653      	mov	r3, sl
1a0177ca:	f7fb ff63 	bl	1a013694 <__adddf3>
1a0177ce:	4606      	mov	r6, r0
1a0177d0:	460f      	mov	r7, r1
1a0177d2:	4602      	mov	r2, r0
1a0177d4:	460b      	mov	r3, r1
1a0177d6:	4648      	mov	r0, r9
1a0177d8:	4651      	mov	r1, sl
1a0177da:	f7fb ff59 	bl	1a013690 <__aeabi_dsub>
1a0177de:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0177e2:	f7fb ff57 	bl	1a013694 <__adddf3>
1a0177e6:	e968 0102 	strd	r0, r1, [r8, #-8]!
1a0177ea:	45c3      	cmp	fp, r8
1a0177ec:	e9cd 6700 	strd	r6, r7, [sp]
1a0177f0:	e9c5 6700 	strd	r6, r7, [r5]
1a0177f4:	d1e3      	bne.n	1a0177be <__kernel_rem_pio2+0x58e>
1a0177f6:	f8dd a010 	ldr.w	sl, [sp, #16]
1a0177fa:	2000      	movs	r0, #0
1a0177fc:	2100      	movs	r1, #0
1a0177fe:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
1a017802:	f7fb ff47 	bl	1a013694 <__adddf3>
1a017806:	45d3      	cmp	fp, sl
1a017808:	d1f9      	bne.n	1a0177fe <__kernel_rem_pio2+0x5ce>
1a01780a:	9b03      	ldr	r3, [sp, #12]
1a01780c:	2b00      	cmp	r3, #0
1a01780e:	f000 80ce 	beq.w	1a0179ae <__kernel_rem_pio2+0x77e>
1a017812:	6862      	ldr	r2, [r4, #4]
1a017814:	68e3      	ldr	r3, [r4, #12]
1a017816:	9f08      	ldr	r7, [sp, #32]
1a017818:	6825      	ldr	r5, [r4, #0]
1a01781a:	68a4      	ldr	r4, [r4, #8]
1a01781c:	603d      	str	r5, [r7, #0]
1a01781e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
1a017822:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
1a017826:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
1a01782a:	607a      	str	r2, [r7, #4]
1a01782c:	60fb      	str	r3, [r7, #12]
1a01782e:	60bc      	str	r4, [r7, #8]
1a017830:	6138      	str	r0, [r7, #16]
1a017832:	6179      	str	r1, [r7, #20]
1a017834:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a017836:	f003 0007 	and.w	r0, r3, #7
1a01783a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
1a01783e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a017842:	bf00      	nop
1a017844:	f3af 8000 	nop.w
1a017848:	40000000 	.word	0x40000000
1a01784c:	3ff921fb 	.word	0x3ff921fb
1a017850:	3ff00000 	.word	0x3ff00000
1a017854:	3fe00000 	.word	0x3fe00000
1a017858:	3e700000 	.word	0x3e700000
1a01785c:	1a01b100 	.word	0x1a01b100
1a017860:	9d06      	ldr	r5, [sp, #24]
1a017862:	3508      	adds	r5, #8
1a017864:	4425      	add	r5, r4
1a017866:	2000      	movs	r0, #0
1a017868:	2100      	movs	r1, #0
1a01786a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
1a01786e:	f7fb ff11 	bl	1a013694 <__adddf3>
1a017872:	42a5      	cmp	r5, r4
1a017874:	d1f9      	bne.n	1a01786a <__kernel_rem_pio2+0x63a>
1a017876:	9b03      	ldr	r3, [sp, #12]
1a017878:	2b00      	cmp	r3, #0
1a01787a:	d04a      	beq.n	1a017912 <__kernel_rem_pio2+0x6e2>
1a01787c:	9e08      	ldr	r6, [sp, #32]
1a01787e:	4602      	mov	r2, r0
1a017880:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a017884:	e886 000c 	stmia.w	r6, {r2, r3}
1a017888:	460b      	mov	r3, r1
1a01788a:	4602      	mov	r2, r0
1a01788c:	e9d4 0100 	ldrd	r0, r1, [r4]
1a017890:	f7fb fefe 	bl	1a013690 <__aeabi_dsub>
1a017894:	9b00      	ldr	r3, [sp, #0]
1a017896:	2b00      	cmp	r3, #0
1a017898:	dd0d      	ble.n	1a0178b6 <__kernel_rem_pio2+0x686>
1a01789a:	ad4c      	add	r5, sp, #304	; 0x130
1a01789c:	2401      	movs	r4, #1
1a01789e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
1a0178a2:	f7fb fef7 	bl	1a013694 <__adddf3>
1a0178a6:	9b00      	ldr	r3, [sp, #0]
1a0178a8:	3401      	adds	r4, #1
1a0178aa:	42a3      	cmp	r3, r4
1a0178ac:	daf7      	bge.n	1a01789e <__kernel_rem_pio2+0x66e>
1a0178ae:	9b03      	ldr	r3, [sp, #12]
1a0178b0:	2b00      	cmp	r3, #0
1a0178b2:	f000 80a5 	beq.w	1a017a00 <__kernel_rem_pio2+0x7d0>
1a0178b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a0178ba:	9908      	ldr	r1, [sp, #32]
1a0178bc:	4602      	mov	r2, r0
1a0178be:	e9c1 2302 	strd	r2, r3, [r1, #8]
1a0178c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0178c4:	f003 0007 	and.w	r0, r3, #7
1a0178c8:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
1a0178cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0178d0:	9b06      	ldr	r3, [sp, #24]
1a0178d2:	9d00      	ldr	r5, [sp, #0]
1a0178d4:	3308      	adds	r3, #8
1a0178d6:	2000      	movs	r0, #0
1a0178d8:	2100      	movs	r1, #0
1a0178da:	441c      	add	r4, r3
1a0178dc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
1a0178e0:	3d01      	subs	r5, #1
1a0178e2:	f7fb fed7 	bl	1a013694 <__adddf3>
1a0178e6:	1c6b      	adds	r3, r5, #1
1a0178e8:	d1f8      	bne.n	1a0178dc <__kernel_rem_pio2+0x6ac>
1a0178ea:	9b03      	ldr	r3, [sp, #12]
1a0178ec:	4602      	mov	r2, r0
1a0178ee:	2b00      	cmp	r3, #0
1a0178f0:	f000 808c 	beq.w	1a017a0c <__kernel_rem_pio2+0x7dc>
1a0178f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a0178f8:	9908      	ldr	r1, [sp, #32]
1a0178fa:	e9c1 2300 	strd	r2, r3, [r1]
1a0178fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a017900:	f003 0007 	and.w	r0, r3, #7
1a017904:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
1a017908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a01790c:	2600      	movs	r6, #0
1a01790e:	2700      	movs	r7, #0
1a017910:	e6f2      	b.n	1a0176f8 <__kernel_rem_pio2+0x4c8>
1a017912:	9b08      	ldr	r3, [sp, #32]
1a017914:	4602      	mov	r2, r0
1a017916:	e9c3 0100 	strd	r0, r1, [r3]
1a01791a:	460b      	mov	r3, r1
1a01791c:	e9d4 0100 	ldrd	r0, r1, [r4]
1a017920:	f7fb feb6 	bl	1a013690 <__aeabi_dsub>
1a017924:	9c00      	ldr	r4, [sp, #0]
1a017926:	2c00      	cmp	r4, #0
1a017928:	4602      	mov	r2, r0
1a01792a:	460b      	mov	r3, r1
1a01792c:	dcb5      	bgt.n	1a01789a <__kernel_rem_pio2+0x66a>
1a01792e:	9908      	ldr	r1, [sp, #32]
1a017930:	e9c1 2302 	strd	r2, r3, [r1, #8]
1a017934:	e7c5      	b.n	1a0178c2 <__kernel_rem_pio2+0x692>
1a017936:	4639      	mov	r1, r7
1a017938:	9f06      	ldr	r7, [sp, #24]
1a01793a:	9503      	str	r5, [sp, #12]
1a01793c:	427a      	negs	r2, r7
1a01793e:	4630      	mov	r0, r6
1a017940:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
1a017944:	f000 fd3c 	bl	1a0183c0 <scalbn>
1a017948:	2200      	movs	r2, #0
1a01794a:	4b38      	ldr	r3, [pc, #224]	; (1a017a2c <__kernel_rem_pio2+0x7fc>)
1a01794c:	4604      	mov	r4, r0
1a01794e:	460d      	mov	r5, r1
1a017950:	f7fc fad8 	bl	1a013f04 <__aeabi_dcmpge>
1a017954:	2800      	cmp	r0, #0
1a017956:	d036      	beq.n	1a0179c6 <__kernel_rem_pio2+0x796>
1a017958:	2200      	movs	r2, #0
1a01795a:	4b35      	ldr	r3, [pc, #212]	; (1a017a30 <__kernel_rem_pio2+0x800>)
1a01795c:	4620      	mov	r0, r4
1a01795e:	4629      	mov	r1, r5
1a017960:	f7fc f84a 	bl	1a0139f8 <__aeabi_dmul>
1a017964:	f7fc fae2 	bl	1a013f2c <__aeabi_d2iz>
1a017968:	4606      	mov	r6, r0
1a01796a:	f7fb ffdf 	bl	1a01392c <__aeabi_i2d>
1a01796e:	2200      	movs	r2, #0
1a017970:	4b2e      	ldr	r3, [pc, #184]	; (1a017a2c <__kernel_rem_pio2+0x7fc>)
1a017972:	f7fc f841 	bl	1a0139f8 <__aeabi_dmul>
1a017976:	4602      	mov	r2, r0
1a017978:	460b      	mov	r3, r1
1a01797a:	4620      	mov	r0, r4
1a01797c:	4629      	mov	r1, r5
1a01797e:	f7fb fe87 	bl	1a013690 <__aeabi_dsub>
1a017982:	f7fc fad3 	bl	1a013f2c <__aeabi_d2iz>
1a017986:	9904      	ldr	r1, [sp, #16]
1a017988:	460b      	mov	r3, r1
1a01798a:	3301      	adds	r3, #1
1a01798c:	461a      	mov	r2, r3
1a01798e:	9300      	str	r3, [sp, #0]
1a017990:	463b      	mov	r3, r7
1a017992:	3318      	adds	r3, #24
1a017994:	9306      	str	r3, [sp, #24]
1a017996:	460b      	mov	r3, r1
1a017998:	a90e      	add	r1, sp, #56	; 0x38
1a01799a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
1a01799e:	4613      	mov	r3, r2
1a0179a0:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
1a0179a4:	e656      	b.n	1a017654 <__kernel_rem_pio2+0x424>
1a0179a6:	2301      	movs	r3, #1
1a0179a8:	e5a5      	b.n	1a0174f6 <__kernel_rem_pio2+0x2c6>
1a0179aa:	2400      	movs	r4, #0
1a0179ac:	e561      	b.n	1a017472 <__kernel_rem_pio2+0x242>
1a0179ae:	e9d4 6700 	ldrd	r6, r7, [r4]
1a0179b2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a0179b6:	9d08      	ldr	r5, [sp, #32]
1a0179b8:	e9c5 0104 	strd	r0, r1, [r5, #16]
1a0179bc:	e9c5 6700 	strd	r6, r7, [r5]
1a0179c0:	e9c5 2302 	strd	r2, r3, [r5, #8]
1a0179c4:	e736      	b.n	1a017834 <__kernel_rem_pio2+0x604>
1a0179c6:	4629      	mov	r1, r5
1a0179c8:	4620      	mov	r0, r4
1a0179ca:	f7fc faaf 	bl	1a013f2c <__aeabi_d2iz>
1a0179ce:	9a04      	ldr	r2, [sp, #16]
1a0179d0:	9200      	str	r2, [sp, #0]
1a0179d2:	a90e      	add	r1, sp, #56	; 0x38
1a0179d4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
1a0179d8:	e63c      	b.n	1a017654 <__kernel_rem_pio2+0x424>
1a0179da:	ac4a      	add	r4, sp, #296	; 0x128
1a0179dc:	2000      	movs	r0, #0
1a0179de:	2100      	movs	r1, #0
1a0179e0:	e713      	b.n	1a01780a <__kernel_rem_pio2+0x5da>
1a0179e2:	9ba4      	ldr	r3, [sp, #656]	; 0x290
1a0179e4:	2b03      	cmp	r3, #3
1a0179e6:	f63f af25 	bhi.w	1a017834 <__kernel_rem_pio2+0x604>
1a0179ea:	a201      	add	r2, pc, #4	; (adr r2, 1a0179f0 <__kernel_rem_pio2+0x7c0>)
1a0179ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0179f0:	1a017a27 	.word	0x1a017a27
1a0179f4:	1a017a1f 	.word	0x1a017a1f
1a0179f8:	1a017a1f 	.word	0x1a017a1f
1a0179fc:	1a0179db 	.word	0x1a0179db
1a017a00:	460b      	mov	r3, r1
1a017a02:	9908      	ldr	r1, [sp, #32]
1a017a04:	4602      	mov	r2, r0
1a017a06:	e9c1 2302 	strd	r2, r3, [r1, #8]
1a017a0a:	e75a      	b.n	1a0178c2 <__kernel_rem_pio2+0x692>
1a017a0c:	460b      	mov	r3, r1
1a017a0e:	9908      	ldr	r1, [sp, #32]
1a017a10:	e9c1 2300 	strd	r2, r3, [r1]
1a017a14:	e773      	b.n	1a0178fe <__kernel_rem_pio2+0x6ce>
1a017a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a017a18:	00db      	lsls	r3, r3, #3
1a017a1a:	9304      	str	r3, [sp, #16]
1a017a1c:	e477      	b.n	1a01730e <__kernel_rem_pio2+0xde>
1a017a1e:	2000      	movs	r0, #0
1a017a20:	2100      	movs	r1, #0
1a017a22:	ac4a      	add	r4, sp, #296	; 0x128
1a017a24:	e727      	b.n	1a017876 <__kernel_rem_pio2+0x646>
1a017a26:	2000      	movs	r0, #0
1a017a28:	2100      	movs	r1, #0
1a017a2a:	e75e      	b.n	1a0178ea <__kernel_rem_pio2+0x6ba>
1a017a2c:	41700000 	.word	0x41700000
1a017a30:	3e700000 	.word	0x3e700000
1a017a34:	ffffffff 	.word	0xffffffff

1a017a38 <__kernel_sin>:
1a017a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a017a3c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
1a017a40:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
1a017a44:	b085      	sub	sp, #20
1a017a46:	4604      	mov	r4, r0
1a017a48:	460d      	mov	r5, r1
1a017a4a:	4690      	mov	r8, r2
1a017a4c:	4699      	mov	r9, r3
1a017a4e:	da04      	bge.n	1a017a5a <__kernel_sin+0x22>
1a017a50:	f7fc fa6c 	bl	1a013f2c <__aeabi_d2iz>
1a017a54:	2800      	cmp	r0, #0
1a017a56:	f000 8085 	beq.w	1a017b64 <__kernel_sin+0x12c>
1a017a5a:	4622      	mov	r2, r4
1a017a5c:	462b      	mov	r3, r5
1a017a5e:	4620      	mov	r0, r4
1a017a60:	4629      	mov	r1, r5
1a017a62:	f7fb ffc9 	bl	1a0139f8 <__aeabi_dmul>
1a017a66:	4606      	mov	r6, r0
1a017a68:	460f      	mov	r7, r1
1a017a6a:	4602      	mov	r2, r0
1a017a6c:	460b      	mov	r3, r1
1a017a6e:	4620      	mov	r0, r4
1a017a70:	4629      	mov	r1, r5
1a017a72:	f7fb ffc1 	bl	1a0139f8 <__aeabi_dmul>
1a017a76:	a341      	add	r3, pc, #260	; (adr r3, 1a017b7c <__kernel_sin+0x144>)
1a017a78:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017a7c:	4682      	mov	sl, r0
1a017a7e:	468b      	mov	fp, r1
1a017a80:	4630      	mov	r0, r6
1a017a82:	4639      	mov	r1, r7
1a017a84:	f7fb ffb8 	bl	1a0139f8 <__aeabi_dmul>
1a017a88:	a33e      	add	r3, pc, #248	; (adr r3, 1a017b84 <__kernel_sin+0x14c>)
1a017a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017a8e:	f7fb fdff 	bl	1a013690 <__aeabi_dsub>
1a017a92:	4632      	mov	r2, r6
1a017a94:	463b      	mov	r3, r7
1a017a96:	f7fb ffaf 	bl	1a0139f8 <__aeabi_dmul>
1a017a9a:	a33c      	add	r3, pc, #240	; (adr r3, 1a017b8c <__kernel_sin+0x154>)
1a017a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017aa0:	f7fb fdf8 	bl	1a013694 <__adddf3>
1a017aa4:	4632      	mov	r2, r6
1a017aa6:	463b      	mov	r3, r7
1a017aa8:	f7fb ffa6 	bl	1a0139f8 <__aeabi_dmul>
1a017aac:	a339      	add	r3, pc, #228	; (adr r3, 1a017b94 <__kernel_sin+0x15c>)
1a017aae:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017ab2:	f7fb fded 	bl	1a013690 <__aeabi_dsub>
1a017ab6:	4632      	mov	r2, r6
1a017ab8:	463b      	mov	r3, r7
1a017aba:	f7fb ff9d 	bl	1a0139f8 <__aeabi_dmul>
1a017abe:	a337      	add	r3, pc, #220	; (adr r3, 1a017b9c <__kernel_sin+0x164>)
1a017ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017ac4:	f7fb fde6 	bl	1a013694 <__adddf3>
1a017ac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a017aca:	e9cd 0100 	strd	r0, r1, [sp]
1a017ace:	b39b      	cbz	r3, 1a017b38 <__kernel_sin+0x100>
1a017ad0:	2200      	movs	r2, #0
1a017ad2:	4b29      	ldr	r3, [pc, #164]	; (1a017b78 <__kernel_sin+0x140>)
1a017ad4:	4640      	mov	r0, r8
1a017ad6:	4649      	mov	r1, r9
1a017ad8:	f7fb ff8e 	bl	1a0139f8 <__aeabi_dmul>
1a017adc:	e9dd 2300 	ldrd	r2, r3, [sp]
1a017ae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a017ae4:	4650      	mov	r0, sl
1a017ae6:	4659      	mov	r1, fp
1a017ae8:	f7fb ff86 	bl	1a0139f8 <__aeabi_dmul>
1a017aec:	4602      	mov	r2, r0
1a017aee:	460b      	mov	r3, r1
1a017af0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a017af4:	f7fb fdcc 	bl	1a013690 <__aeabi_dsub>
1a017af8:	4632      	mov	r2, r6
1a017afa:	463b      	mov	r3, r7
1a017afc:	f7fb ff7c 	bl	1a0139f8 <__aeabi_dmul>
1a017b00:	4642      	mov	r2, r8
1a017b02:	464b      	mov	r3, r9
1a017b04:	f7fb fdc4 	bl	1a013690 <__aeabi_dsub>
1a017b08:	a319      	add	r3, pc, #100	; (adr r3, 1a017b70 <__kernel_sin+0x138>)
1a017b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017b0e:	4606      	mov	r6, r0
1a017b10:	460f      	mov	r7, r1
1a017b12:	4650      	mov	r0, sl
1a017b14:	4659      	mov	r1, fp
1a017b16:	f7fb ff6f 	bl	1a0139f8 <__aeabi_dmul>
1a017b1a:	4602      	mov	r2, r0
1a017b1c:	460b      	mov	r3, r1
1a017b1e:	4630      	mov	r0, r6
1a017b20:	4639      	mov	r1, r7
1a017b22:	f7fb fdb7 	bl	1a013694 <__adddf3>
1a017b26:	4602      	mov	r2, r0
1a017b28:	460b      	mov	r3, r1
1a017b2a:	4620      	mov	r0, r4
1a017b2c:	4629      	mov	r1, r5
1a017b2e:	f7fb fdaf 	bl	1a013690 <__aeabi_dsub>
1a017b32:	b005      	add	sp, #20
1a017b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a017b38:	4602      	mov	r2, r0
1a017b3a:	460b      	mov	r3, r1
1a017b3c:	4630      	mov	r0, r6
1a017b3e:	4639      	mov	r1, r7
1a017b40:	f7fb ff5a 	bl	1a0139f8 <__aeabi_dmul>
1a017b44:	a30a      	add	r3, pc, #40	; (adr r3, 1a017b70 <__kernel_sin+0x138>)
1a017b46:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017b4a:	f7fb fda1 	bl	1a013690 <__aeabi_dsub>
1a017b4e:	4652      	mov	r2, sl
1a017b50:	465b      	mov	r3, fp
1a017b52:	f7fb ff51 	bl	1a0139f8 <__aeabi_dmul>
1a017b56:	4622      	mov	r2, r4
1a017b58:	462b      	mov	r3, r5
1a017b5a:	f7fb fd9b 	bl	1a013694 <__adddf3>
1a017b5e:	b005      	add	sp, #20
1a017b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a017b64:	4620      	mov	r0, r4
1a017b66:	4629      	mov	r1, r5
1a017b68:	b005      	add	sp, #20
1a017b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a017b6e:	bf00      	nop
1a017b70:	55555549 	.word	0x55555549
1a017b74:	3fc55555 	.word	0x3fc55555
1a017b78:	3fe00000 	.word	0x3fe00000
1a017b7c:	5acfd57c 	.word	0x5acfd57c
1a017b80:	3de5d93a 	.word	0x3de5d93a
1a017b84:	8a2b9ceb 	.word	0x8a2b9ceb
1a017b88:	3e5ae5e6 	.word	0x3e5ae5e6
1a017b8c:	57b1fe7d 	.word	0x57b1fe7d
1a017b90:	3ec71de3 	.word	0x3ec71de3
1a017b94:	19c161d5 	.word	0x19c161d5
1a017b98:	3f2a01a0 	.word	0x3f2a01a0
1a017b9c:	1110f8a6 	.word	0x1110f8a6
1a017ba0:	3f811111 	.word	0x3f811111

1a017ba4 <__kernel_cosf>:
1a017ba4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
1a017ba8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
1a017bac:	ee06 0a10 	vmov	s12, r0
1a017bb0:	ee06 1a90 	vmov	s13, r1
1a017bb4:	da2e      	bge.n	1a017c14 <__kernel_cosf+0x70>
1a017bb6:	eefd 7ac6 	vcvt.s32.f32	s15, s12
1a017bba:	ee17 3a90 	vmov	r3, s15
1a017bbe:	2b00      	cmp	r3, #0
1a017bc0:	d064      	beq.n	1a017c8c <__kernel_cosf+0xe8>
1a017bc2:	ee26 7a06 	vmul.f32	s14, s12, s12
1a017bc6:	eddf 3a34 	vldr	s7, [pc, #208]	; 1a017c98 <__kernel_cosf+0xf4>
1a017bca:	ed9f 4a34 	vldr	s8, [pc, #208]	; 1a017c9c <__kernel_cosf+0xf8>
1a017bce:	eddf 4a34 	vldr	s9, [pc, #208]	; 1a017ca0 <__kernel_cosf+0xfc>
1a017bd2:	ed9f 5a34 	vldr	s10, [pc, #208]	; 1a017ca4 <__kernel_cosf+0x100>
1a017bd6:	eddf 7a34 	vldr	s15, [pc, #208]	; 1a017ca8 <__kernel_cosf+0x104>
1a017bda:	eddf 5a34 	vldr	s11, [pc, #208]	; 1a017cac <__kernel_cosf+0x108>
1a017bde:	eea7 4a23 	vfma.f32	s8, s14, s7
1a017be2:	eee7 4a04 	vfma.f32	s9, s14, s8
1a017be6:	eea7 5a24 	vfma.f32	s10, s14, s9
1a017bea:	eee7 7a05 	vfma.f32	s15, s14, s10
1a017bee:	eee7 5a27 	vfma.f32	s11, s14, s15
1a017bf2:	ee65 5a87 	vmul.f32	s11, s11, s14
1a017bf6:	ee66 6ac6 	vnmul.f32	s13, s13, s12
1a017bfa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
1a017bfe:	eee7 6a25 	vfma.f32	s13, s14, s11
1a017c02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
1a017c06:	eed7 6a06 	vfnms.f32	s13, s14, s12
1a017c0a:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a017c0e:	ee17 0a90 	vmov	r0, s15
1a017c12:	4770      	bx	lr
1a017c14:	ee26 7a06 	vmul.f32	s14, s12, s12
1a017c18:	eddf 3a1f 	vldr	s7, [pc, #124]	; 1a017c98 <__kernel_cosf+0xf4>
1a017c1c:	ed9f 4a1f 	vldr	s8, [pc, #124]	; 1a017c9c <__kernel_cosf+0xf8>
1a017c20:	eddf 4a1f 	vldr	s9, [pc, #124]	; 1a017ca0 <__kernel_cosf+0xfc>
1a017c24:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 1a017ca4 <__kernel_cosf+0x100>
1a017c28:	eddf 7a1f 	vldr	s15, [pc, #124]	; 1a017ca8 <__kernel_cosf+0x104>
1a017c2c:	eddf 5a1f 	vldr	s11, [pc, #124]	; 1a017cac <__kernel_cosf+0x108>
1a017c30:	4a1f      	ldr	r2, [pc, #124]	; (1a017cb0 <__kernel_cosf+0x10c>)
1a017c32:	eea7 4a23 	vfma.f32	s8, s14, s7
1a017c36:	4293      	cmp	r3, r2
1a017c38:	eee7 4a04 	vfma.f32	s9, s14, s8
1a017c3c:	eea7 5a24 	vfma.f32	s10, s14, s9
1a017c40:	eee7 7a05 	vfma.f32	s15, s14, s10
1a017c44:	eee7 5a27 	vfma.f32	s11, s14, s15
1a017c48:	ee65 5a87 	vmul.f32	s11, s11, s14
1a017c4c:	ddd3      	ble.n	1a017bf6 <__kernel_cosf+0x52>
1a017c4e:	4a19      	ldr	r2, [pc, #100]	; (1a017cb4 <__kernel_cosf+0x110>)
1a017c50:	4293      	cmp	r3, r2
1a017c52:	dc16      	bgt.n	1a017c82 <__kernel_cosf+0xde>
1a017c54:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
1a017c58:	ee07 3a90 	vmov	s15, r3
1a017c5c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
1a017c60:	ee35 5a67 	vsub.f32	s10, s10, s15
1a017c64:	ee66 6ac6 	vnmul.f32	s13, s13, s12
1a017c68:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
1a017c6c:	eee7 6a25 	vfma.f32	s13, s14, s11
1a017c70:	eed7 7a06 	vfnms.f32	s15, s14, s12
1a017c74:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a017c78:	ee75 7a67 	vsub.f32	s15, s10, s15
1a017c7c:	ee17 0a90 	vmov	r0, s15
1a017c80:	4770      	bx	lr
1a017c82:	eeb6 5a07 	vmov.f32	s10, #103	; 0x3f380000  0.7187500
1a017c86:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
1a017c8a:	e7eb      	b.n	1a017c64 <__kernel_cosf+0xc0>
1a017c8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
1a017c90:	ee17 0a90 	vmov	r0, s15
1a017c94:	4770      	bx	lr
1a017c96:	bf00      	nop
1a017c98:	ad47d74e 	.word	0xad47d74e
1a017c9c:	310f74f6 	.word	0x310f74f6
1a017ca0:	b493f27c 	.word	0xb493f27c
1a017ca4:	37d00d01 	.word	0x37d00d01
1a017ca8:	bab60b61 	.word	0xbab60b61
1a017cac:	3d2aaaab 	.word	0x3d2aaaab
1a017cb0:	3e999999 	.word	0x3e999999
1a017cb4:	3f480000 	.word	0x3f480000

1a017cb8 <__kernel_rem_pio2f>:
1a017cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a017cbc:	ed2d 8b04 	vpush	{d8-d9}
1a017cc0:	b0d7      	sub	sp, #348	; 0x15c
1a017cc2:	1e5e      	subs	r6, r3, #1
1a017cc4:	4ca9      	ldr	r4, [pc, #676]	; (1a017f6c <__kernel_rem_pio2f+0x2b4>)
1a017cc6:	9d64      	ldr	r5, [sp, #400]	; 0x190
1a017cc8:	9302      	str	r3, [sp, #8]
1a017cca:	1ed3      	subs	r3, r2, #3
1a017ccc:	bf48      	it	mi
1a017cce:	1d13      	addmi	r3, r2, #4
1a017cd0:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
1a017cd4:	10db      	asrs	r3, r3, #3
1a017cd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a017cda:	f103 0901 	add.w	r9, r3, #1
1a017cde:	468a      	mov	sl, r1
1a017ce0:	19a9      	adds	r1, r5, r6
1a017ce2:	9303      	str	r3, [sp, #12]
1a017ce4:	4680      	mov	r8, r0
1a017ce6:	eba2 09c9 	sub.w	r9, r2, r9, lsl #3
1a017cea:	eba3 0306 	sub.w	r3, r3, r6
1a017cee:	d414      	bmi.n	1a017d1a <__kernel_rem_pio2f+0x62>
1a017cf0:	4419      	add	r1, r3
1a017cf2:	9865      	ldr	r0, [sp, #404]	; 0x194
1a017cf4:	3101      	adds	r1, #1
1a017cf6:	aa1a      	add	r2, sp, #104	; 0x68
1a017cf8:	2b00      	cmp	r3, #0
1a017cfa:	bfaa      	itet	ge
1a017cfc:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
1a017d00:	eddf 7a9b 	vldrlt	s15, [pc, #620]	; 1a017f70 <__kernel_rem_pio2f+0x2b8>
1a017d04:	ee07 4a90 	vmovge	s15, r4
1a017d08:	f103 0301 	add.w	r3, r3, #1
1a017d0c:	bfa8      	it	ge
1a017d0e:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
1a017d12:	428b      	cmp	r3, r1
1a017d14:	ece2 7a01 	vstmia	r2!, {s15}
1a017d18:	d1ee      	bne.n	1a017cf8 <__kernel_rem_pio2f+0x40>
1a017d1a:	2d00      	cmp	r5, #0
1a017d1c:	f2c0 82e9 	blt.w	1a0182f2 <__kernel_rem_pio2f+0x63a>
1a017d20:	9b02      	ldr	r3, [sp, #8]
1a017d22:	af42      	add	r7, sp, #264	; 0x108
1a017d24:	009c      	lsls	r4, r3, #2
1a017d26:	f105 0e01 	add.w	lr, r5, #1
1a017d2a:	ab1a      	add	r3, sp, #104	; 0x68
1a017d2c:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
1a017d30:	1918      	adds	r0, r3, r4
1a017d32:	eb08 0104 	add.w	r1, r8, r4
1a017d36:	2e00      	cmp	r6, #0
1a017d38:	f2c0 81d1 	blt.w	1a0180de <__kernel_rem_pio2f+0x426>
1a017d3c:	eddf 7a8c 	vldr	s15, [pc, #560]	; 1a017f70 <__kernel_rem_pio2f+0x2b8>
1a017d40:	4643      	mov	r3, r8
1a017d42:	4602      	mov	r2, r0
1a017d44:	ecf3 6a01 	vldmia	r3!, {s13}
1a017d48:	ed32 7a01 	vldmdb	r2!, {s14}
1a017d4c:	428b      	cmp	r3, r1
1a017d4e:	eee6 7a87 	vfma.f32	s15, s13, s14
1a017d52:	d1f7      	bne.n	1a017d44 <__kernel_rem_pio2f+0x8c>
1a017d54:	ece7 7a01 	vstmia	r7!, {s15}
1a017d58:	4577      	cmp	r7, lr
1a017d5a:	f100 0004 	add.w	r0, r0, #4
1a017d5e:	d1ea      	bne.n	1a017d36 <__kernel_rem_pio2f+0x7e>
1a017d60:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
1a017d64:	3b02      	subs	r3, #2
1a017d66:	009b      	lsls	r3, r3, #2
1a017d68:	aa06      	add	r2, sp, #24
1a017d6a:	1d1f      	adds	r7, r3, #4
1a017d6c:	eddf 8a82 	vldr	s17, [pc, #520]	; 1a017f78 <__kernel_rem_pio2f+0x2c0>
1a017d70:	ed9f 8a80 	vldr	s16, [pc, #512]	; 1a017f74 <__kernel_rem_pio2f+0x2bc>
1a017d74:	f8cd a014 	str.w	sl, [sp, #20]
1a017d78:	4413      	add	r3, r2
1a017d7a:	4444      	add	r4, r8
1a017d7c:	4417      	add	r7, r2
1a017d7e:	9304      	str	r3, [sp, #16]
1a017d80:	46ab      	mov	fp, r5
1a017d82:	ab56      	add	r3, sp, #344	; 0x158
1a017d84:	eb03 038b 	add.w	r3, r3, fp, lsl #2
1a017d88:	f1bb 0f00 	cmp.w	fp, #0
1a017d8c:	ed53 6a14 	vldr	s13, [r3, #-80]	; 0xffffffb0
1a017d90:	dd19      	ble.n	1a017dc6 <__kernel_rem_pio2f+0x10e>
1a017d92:	a942      	add	r1, sp, #264	; 0x108
1a017d94:	eb01 038b 	add.w	r3, r1, fp, lsl #2
1a017d98:	aa05      	add	r2, sp, #20
1a017d9a:	ee66 7aa8 	vmul.f32	s15, s13, s17
1a017d9e:	eeb0 7a66 	vmov.f32	s14, s13
1a017da2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a017da6:	ed33 6a01 	vldmdb	r3!, {s12}
1a017daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a017dae:	428b      	cmp	r3, r1
1a017db0:	eea7 7ac8 	vfms.f32	s14, s15, s16
1a017db4:	ee77 6a86 	vadd.f32	s13, s15, s12
1a017db8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
1a017dbc:	ee17 0a10 	vmov	r0, s14
1a017dc0:	f842 0f04 	str.w	r0, [r2, #4]!
1a017dc4:	d1e9      	bne.n	1a017d9a <__kernel_rem_pio2f+0xe2>
1a017dc6:	4649      	mov	r1, r9
1a017dc8:	ee16 0a90 	vmov	r0, s13
1a017dcc:	f000 fc54 	bl	1a018678 <scalbnf>
1a017dd0:	ee09 0a10 	vmov	s18, r0
1a017dd4:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
1a017dd8:	ee69 7a27 	vmul.f32	s15, s18, s15
1a017ddc:	ee17 0a90 	vmov	r0, s15
1a017de0:	f7fd fad2 	bl	1a015388 <floorf>
1a017de4:	ee07 0a10 	vmov	s14, r0
1a017de8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
1a017dec:	eea7 9a67 	vfms.f32	s18, s14, s15
1a017df0:	f1b9 0f00 	cmp.w	r9, #0
1a017df4:	eebd 7ac9 	vcvt.s32.f32	s14, s18
1a017df8:	eef0 7a49 	vmov.f32	s15, s18
1a017dfc:	eeb8 9ac7 	vcvt.f32.s32	s18, s14
1a017e00:	ee17 aa10 	vmov	sl, s14
1a017e04:	ee37 9ac9 	vsub.f32	s18, s15, s18
1a017e08:	f340 814b 	ble.w	1a0180a2 <__kernel_rem_pio2f+0x3ea>
1a017e0c:	f10b 30ff 	add.w	r0, fp, #4294967295
1a017e10:	aa06      	add	r2, sp, #24
1a017e12:	f1c9 0308 	rsb	r3, r9, #8
1a017e16:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
1a017e1a:	fa42 f103 	asr.w	r1, r2, r3
1a017e1e:	fa01 f303 	lsl.w	r3, r1, r3
1a017e22:	f10d 0e18 	add.w	lr, sp, #24
1a017e26:	1ad2      	subs	r2, r2, r3
1a017e28:	f1c9 0307 	rsb	r3, r9, #7
1a017e2c:	fa42 f303 	asr.w	r3, r2, r3
1a017e30:	f84e 2020 	str.w	r2, [lr, r0, lsl #2]
1a017e34:	448a      	add	sl, r1
1a017e36:	9301      	str	r3, [sp, #4]
1a017e38:	9b01      	ldr	r3, [sp, #4]
1a017e3a:	2b00      	cmp	r3, #0
1a017e3c:	dd36      	ble.n	1a017eac <__kernel_rem_pio2f+0x1f4>
1a017e3e:	f1bb 0f00 	cmp.w	fp, #0
1a017e42:	f10a 0a01 	add.w	sl, sl, #1
1a017e46:	f340 8227 	ble.w	1a018298 <__kernel_rem_pio2f+0x5e0>
1a017e4a:	2100      	movs	r1, #0
1a017e4c:	460a      	mov	r2, r1
1a017e4e:	a805      	add	r0, sp, #20
1a017e50:	46a6      	mov	lr, r4
1a017e52:	e007      	b.n	1a017e64 <__kernel_rem_pio2f+0x1ac>
1a017e54:	f5c3 7480 	rsb	r4, r3, #256	; 0x100
1a017e58:	b10b      	cbz	r3, 1a017e5e <__kernel_rem_pio2f+0x1a6>
1a017e5a:	6004      	str	r4, [r0, #0]
1a017e5c:	2201      	movs	r2, #1
1a017e5e:	3101      	adds	r1, #1
1a017e60:	458b      	cmp	fp, r1
1a017e62:	dd0b      	ble.n	1a017e7c <__kernel_rem_pio2f+0x1c4>
1a017e64:	f850 3f04 	ldr.w	r3, [r0, #4]!
1a017e68:	2a00      	cmp	r2, #0
1a017e6a:	d0f3      	beq.n	1a017e54 <__kernel_rem_pio2f+0x19c>
1a017e6c:	3101      	adds	r1, #1
1a017e6e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
1a017e72:	458b      	cmp	fp, r1
1a017e74:	6003      	str	r3, [r0, #0]
1a017e76:	f04f 0201 	mov.w	r2, #1
1a017e7a:	dcf3      	bgt.n	1a017e64 <__kernel_rem_pio2f+0x1ac>
1a017e7c:	4674      	mov	r4, lr
1a017e7e:	f1b9 0f00 	cmp.w	r9, #0
1a017e82:	dd10      	ble.n	1a017ea6 <__kernel_rem_pio2f+0x1ee>
1a017e84:	f1b9 0f01 	cmp.w	r9, #1
1a017e88:	f000 8114 	beq.w	1a0180b4 <__kernel_rem_pio2f+0x3fc>
1a017e8c:	f1b9 0f02 	cmp.w	r9, #2
1a017e90:	d109      	bne.n	1a017ea6 <__kernel_rem_pio2f+0x1ee>
1a017e92:	f10b 31ff 	add.w	r1, fp, #4294967295
1a017e96:	ab06      	add	r3, sp, #24
1a017e98:	a806      	add	r0, sp, #24
1a017e9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
1a017e9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a017ea2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
1a017ea6:	9b01      	ldr	r3, [sp, #4]
1a017ea8:	2b02      	cmp	r3, #2
1a017eaa:	d067      	beq.n	1a017f7c <__kernel_rem_pio2f+0x2c4>
1a017eac:	eeb5 9a40 	vcmp.f32	s18, #0.0
1a017eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a017eb4:	d176      	bne.n	1a017fa4 <__kernel_rem_pio2f+0x2ec>
1a017eb6:	f10b 3eff 	add.w	lr, fp, #4294967295
1a017eba:	4575      	cmp	r5, lr
1a017ebc:	dc0f      	bgt.n	1a017ede <__kernel_rem_pio2f+0x226>
1a017ebe:	f10b 4180 	add.w	r1, fp, #1073741824	; 0x40000000
1a017ec2:	3901      	subs	r1, #1
1a017ec4:	ab06      	add	r3, sp, #24
1a017ec6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
1a017eca:	2000      	movs	r0, #0
1a017ecc:	f851 3904 	ldr.w	r3, [r1], #-4
1a017ed0:	42b9      	cmp	r1, r7
1a017ed2:	ea40 0003 	orr.w	r0, r0, r3
1a017ed6:	d1f9      	bne.n	1a017ecc <__kernel_rem_pio2f+0x214>
1a017ed8:	2800      	cmp	r0, #0
1a017eda:	f040 8113 	bne.w	1a018104 <__kernel_rem_pio2f+0x44c>
1a017ede:	1e6b      	subs	r3, r5, #1
1a017ee0:	aa06      	add	r2, sp, #24
1a017ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a017ee6:	2b00      	cmp	r3, #0
1a017ee8:	f040 81d3 	bne.w	1a018292 <__kernel_rem_pio2f+0x5da>
1a017eec:	9b04      	ldr	r3, [sp, #16]
1a017eee:	f04f 0e01 	mov.w	lr, #1
1a017ef2:	f853 2904 	ldr.w	r2, [r3], #-4
1a017ef6:	f10e 0e01 	add.w	lr, lr, #1
1a017efa:	2a00      	cmp	r2, #0
1a017efc:	d0f9      	beq.n	1a017ef2 <__kernel_rem_pio2f+0x23a>
1a017efe:	44de      	add	lr, fp
1a017f00:	f10b 0c01 	add.w	ip, fp, #1
1a017f04:	45f4      	cmp	ip, lr
1a017f06:	dc2f      	bgt.n	1a017f68 <__kernel_rem_pio2f+0x2b0>
1a017f08:	9b03      	ldr	r3, [sp, #12]
1a017f0a:	9a02      	ldr	r2, [sp, #8]
1a017f0c:	eb0c 0003 	add.w	r0, ip, r3
1a017f10:	eb02 010b 	add.w	r1, r2, fp
1a017f14:	eb0e 0302 	add.w	r3, lr, r2
1a017f18:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a017f1c:	9a65      	ldr	r2, [sp, #404]	; 0x194
1a017f1e:	3801      	subs	r0, #1
1a017f20:	eb02 0080 	add.w	r0, r2, r0, lsl #2
1a017f24:	aa1a      	add	r2, sp, #104	; 0x68
1a017f26:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
1a017f2a:	ab42      	add	r3, sp, #264	; 0x108
1a017f2c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
1a017f30:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
1a017f34:	f850 3f04 	ldr.w	r3, [r0, #4]!
1a017f38:	ee07 3a90 	vmov	s15, r3
1a017f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a017f40:	2e00      	cmp	r6, #0
1a017f42:	ece1 7a01 	vstmia	r1!, {s15}
1a017f46:	eddf 7a0a 	vldr	s15, [pc, #40]	; 1a017f70 <__kernel_rem_pio2f+0x2b8>
1a017f4a:	db09      	blt.n	1a017f60 <__kernel_rem_pio2f+0x2a8>
1a017f4c:	4643      	mov	r3, r8
1a017f4e:	460a      	mov	r2, r1
1a017f50:	ecf3 6a01 	vldmia	r3!, {s13}
1a017f54:	ed32 7a01 	vldmdb	r2!, {s14}
1a017f58:	42a3      	cmp	r3, r4
1a017f5a:	eee6 7a87 	vfma.f32	s15, s13, s14
1a017f5e:	d1f7      	bne.n	1a017f50 <__kernel_rem_pio2f+0x298>
1a017f60:	4559      	cmp	r1, fp
1a017f62:	ecec 7a01 	vstmia	ip!, {s15}
1a017f66:	d1e5      	bne.n	1a017f34 <__kernel_rem_pio2f+0x27c>
1a017f68:	46f3      	mov	fp, lr
1a017f6a:	e70a      	b.n	1a017d82 <__kernel_rem_pio2f+0xca>
1a017f6c:	1a01b138 	.word	0x1a01b138
1a017f70:	00000000 	.word	0x00000000
1a017f74:	43800000 	.word	0x43800000
1a017f78:	3b800000 	.word	0x3b800000
1a017f7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
1a017f80:	ee37 9ac9 	vsub.f32	s18, s15, s18
1a017f84:	2a00      	cmp	r2, #0
1a017f86:	d091      	beq.n	1a017eac <__kernel_rem_pio2f+0x1f4>
1a017f88:	ee17 0a90 	vmov	r0, s15
1a017f8c:	4649      	mov	r1, r9
1a017f8e:	f000 fb73 	bl	1a018678 <scalbnf>
1a017f92:	ee07 0a90 	vmov	s15, r0
1a017f96:	ee39 9a67 	vsub.f32	s18, s18, s15
1a017f9a:	eeb5 9a40 	vcmp.f32	s18, #0.0
1a017f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a017fa2:	d088      	beq.n	1a017eb6 <__kernel_rem_pio2f+0x1fe>
1a017fa4:	f1c9 0100 	rsb	r1, r9, #0
1a017fa8:	ee19 0a10 	vmov	r0, s18
1a017fac:	ee09 aa90 	vmov	s19, sl
1a017fb0:	f8dd a014 	ldr.w	sl, [sp, #20]
1a017fb4:	f000 fb60 	bl	1a018678 <scalbnf>
1a017fb8:	ed5f 6a12 	vldr	s13, [pc, #-72]	; 1a017f74 <__kernel_rem_pio2f+0x2bc>
1a017fbc:	ee07 0a10 	vmov	s14, r0
1a017fc0:	eeb4 7ae6 	vcmpe.f32	s14, s13
1a017fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a017fc8:	f2c0 8171 	blt.w	1a0182ae <__kernel_rem_pio2f+0x5f6>
1a017fcc:	ed5f 7a16 	vldr	s15, [pc, #-88]	; 1a017f78 <__kernel_rem_pio2f+0x2c0>
1a017fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
1a017fd4:	a906      	add	r1, sp, #24
1a017fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a017fda:	f10b 0301 	add.w	r3, fp, #1
1a017fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a017fe2:	f109 0908 	add.w	r9, r9, #8
1a017fe6:	eea7 7ae6 	vfms.f32	s14, s15, s13
1a017fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a017fee:	eebd 7ac7 	vcvt.s32.f32	s14, s14
1a017ff2:	ee17 2a10 	vmov	r2, s14
1a017ff6:	f841 202b 	str.w	r2, [r1, fp, lsl #2]
1a017ffa:	ee17 2a90 	vmov	r2, s15
1a017ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a018002:	4649      	mov	r1, r9
1a018004:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
1a018008:	9302      	str	r3, [sp, #8]
1a01800a:	f000 fb35 	bl	1a018678 <scalbnf>
1a01800e:	9b02      	ldr	r3, [sp, #8]
1a018010:	2b00      	cmp	r3, #0
1a018012:	ee07 0a10 	vmov	s14, r0
1a018016:	f2c0 8156 	blt.w	1a0182c6 <__kernel_rem_pio2f+0x60e>
1a01801a:	009f      	lsls	r7, r3, #2
1a01801c:	ac42      	add	r4, sp, #264	; 0x108
1a01801e:	1d38      	adds	r0, r7, #4
1a018020:	eb04 0e07 	add.w	lr, r4, r7
1a018024:	aa06      	add	r2, sp, #24
1a018026:	ed5f 6a2c 	vldr	s13, [pc, #-176]	; 1a017f78 <__kernel_rem_pio2f+0x2c0>
1a01802a:	4410      	add	r0, r2
1a01802c:	f10e 0104 	add.w	r1, lr, #4
1a018030:	ed70 7a01 	vldmdb	r0!, {s15}
1a018034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a018038:	ee67 7a87 	vmul.f32	s15, s15, s14
1a01803c:	ee27 7a26 	vmul.f32	s14, s14, s13
1a018040:	ed61 7a01 	vstmdb	r1!, {s15}
1a018044:	42a1      	cmp	r1, r4
1a018046:	d1f3      	bne.n	1a018030 <__kernel_rem_pio2f+0x378>
1a018048:	f50d 7c82 	add.w	ip, sp, #260	; 0x104
1a01804c:	2600      	movs	r6, #0
1a01804e:	2d00      	cmp	r5, #0
1a018050:	f2c0 8111 	blt.w	1a018276 <__kernel_rem_pio2f+0x5be>
1a018054:	48ab      	ldr	r0, [pc, #684]	; (1a018304 <__kernel_rem_pio2f+0x64c>)
1a018056:	ed9f 7aac 	vldr	s14, [pc, #688]	; 1a018308 <__kernel_rem_pio2f+0x650>
1a01805a:	eddf 7aac 	vldr	s15, [pc, #688]	; 1a01830c <__kernel_rem_pio2f+0x654>
1a01805e:	4671      	mov	r1, lr
1a018060:	2200      	movs	r2, #0
1a018062:	e004      	b.n	1a01806e <__kernel_rem_pio2f+0x3b6>
1a018064:	4296      	cmp	r6, r2
1a018066:	db09      	blt.n	1a01807c <__kernel_rem_pio2f+0x3c4>
1a018068:	3004      	adds	r0, #4
1a01806a:	ed90 7a00 	vldr	s14, [r0]
1a01806e:	ecf1 6a01 	vldmia	r1!, {s13}
1a018072:	3201      	adds	r2, #1
1a018074:	4295      	cmp	r5, r2
1a018076:	eee6 7a87 	vfma.f32	s15, s13, s14
1a01807a:	daf3      	bge.n	1a018064 <__kernel_rem_pio2f+0x3ac>
1a01807c:	f1ae 0e04 	sub.w	lr, lr, #4
1a018080:	aa56      	add	r2, sp, #344	; 0x158
1a018082:	eb02 0286 	add.w	r2, r2, r6, lsl #2
1a018086:	45f4      	cmp	ip, lr
1a018088:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
1a01808c:	f106 0601 	add.w	r6, r6, #1
1a018090:	d1dd      	bne.n	1a01804e <__kernel_rem_pio2f+0x396>
1a018092:	9a64      	ldr	r2, [sp, #400]	; 0x190
1a018094:	2a03      	cmp	r2, #3
1a018096:	f200 80ab 	bhi.w	1a0181f0 <__kernel_rem_pio2f+0x538>
1a01809a:	e8df f002 	tbb	[pc, r2]
1a01809e:	b2d9      	.short	0xb2d9
1a0180a0:	4db2      	.short	0x4db2
1a0180a2:	d112      	bne.n	1a0180ca <__kernel_rem_pio2f+0x412>
1a0180a4:	f10b 33ff 	add.w	r3, fp, #4294967295
1a0180a8:	aa06      	add	r2, sp, #24
1a0180aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a0180ae:	1213      	asrs	r3, r2, #8
1a0180b0:	9301      	str	r3, [sp, #4]
1a0180b2:	e6c1      	b.n	1a017e38 <__kernel_rem_pio2f+0x180>
1a0180b4:	f10b 31ff 	add.w	r1, fp, #4294967295
1a0180b8:	ab06      	add	r3, sp, #24
1a0180ba:	a806      	add	r0, sp, #24
1a0180bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
1a0180c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a0180c4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
1a0180c8:	e6ed      	b.n	1a017ea6 <__kernel_rem_pio2f+0x1ee>
1a0180ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
1a0180ce:	eeb4 9ae7 	vcmpe.f32	s18, s15
1a0180d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0180d6:	da0c      	bge.n	1a0180f2 <__kernel_rem_pio2f+0x43a>
1a0180d8:	2300      	movs	r3, #0
1a0180da:	9301      	str	r3, [sp, #4]
1a0180dc:	e6e6      	b.n	1a017eac <__kernel_rem_pio2f+0x1f4>
1a0180de:	eddf 7a8b 	vldr	s15, [pc, #556]	; 1a01830c <__kernel_rem_pio2f+0x654>
1a0180e2:	ece7 7a01 	vstmia	r7!, {s15}
1a0180e6:	4577      	cmp	r7, lr
1a0180e8:	f100 0004 	add.w	r0, r0, #4
1a0180ec:	f47f ae23 	bne.w	1a017d36 <__kernel_rem_pio2f+0x7e>
1a0180f0:	e636      	b.n	1a017d60 <__kernel_rem_pio2f+0xa8>
1a0180f2:	f1bb 0f00 	cmp.w	fp, #0
1a0180f6:	f10a 0a01 	add.w	sl, sl, #1
1a0180fa:	f340 80f3 	ble.w	1a0182e4 <__kernel_rem_pio2f+0x62c>
1a0180fe:	2302      	movs	r3, #2
1a018100:	9301      	str	r3, [sp, #4]
1a018102:	e6a2      	b.n	1a017e4a <__kernel_rem_pio2f+0x192>
1a018104:	aa06      	add	r2, sp, #24
1a018106:	ee09 aa90 	vmov	s19, sl
1a01810a:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
1a01810e:	f8dd a014 	ldr.w	sl, [sp, #20]
1a018112:	4673      	mov	r3, lr
1a018114:	f1a9 0908 	sub.w	r9, r9, #8
1a018118:	2900      	cmp	r1, #0
1a01811a:	f47f af72 	bne.w	1a018002 <__kernel_rem_pio2f+0x34a>
1a01811e:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
1a018122:	3901      	subs	r1, #1
1a018124:	eb02 0181 	add.w	r1, r2, r1, lsl #2
1a018128:	f851 2904 	ldr.w	r2, [r1], #-4
1a01812c:	3b01      	subs	r3, #1
1a01812e:	f1a9 0908 	sub.w	r9, r9, #8
1a018132:	2a00      	cmp	r2, #0
1a018134:	d0f8      	beq.n	1a018128 <__kernel_rem_pio2f+0x470>
1a018136:	e764      	b.n	1a018002 <__kernel_rem_pio2f+0x34a>
1a018138:	2b00      	cmp	r3, #0
1a01813a:	f340 80c1 	ble.w	1a0182c0 <__kernel_rem_pio2f+0x608>
1a01813e:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
1a018142:	3901      	subs	r1, #1
1a018144:	0088      	lsls	r0, r1, #2
1a018146:	aa56      	add	r2, sp, #344	; 0x158
1a018148:	19d5      	adds	r5, r2, r7
1a01814a:	1d04      	adds	r4, r0, #4
1a01814c:	aa2e      	add	r2, sp, #184	; 0xb8
1a01814e:	3008      	adds	r0, #8
1a018150:	ed15 7a28 	vldr	s14, [r5, #-160]	; 0xffffff60
1a018154:	4414      	add	r4, r2
1a018156:	4410      	add	r0, r2
1a018158:	ad2f      	add	r5, sp, #188	; 0xbc
1a01815a:	ed74 7a01 	vldmdb	r4!, {s15}
1a01815e:	ee77 6a87 	vadd.f32	s13, s15, s14
1a018162:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a018166:	ee77 7a87 	vadd.f32	s15, s15, s14
1a01816a:	eeb0 7a66 	vmov.f32	s14, s13
1a01816e:	ed60 7a01 	vstmdb	r0!, {s15}
1a018172:	42a8      	cmp	r0, r5
1a018174:	edc4 6a00 	vstr	s13, [r4]
1a018178:	d1ef      	bne.n	1a01815a <__kernel_rem_pio2f+0x4a2>
1a01817a:	2b01      	cmp	r3, #1
1a01817c:	f340 80a0 	ble.w	1a0182c0 <__kernel_rem_pio2f+0x608>
1a018180:	0089      	lsls	r1, r1, #2
1a018182:	ab56      	add	r3, sp, #344	; 0x158
1a018184:	441f      	add	r7, r3
1a018186:	f101 0008 	add.w	r0, r1, #8
1a01818a:	ab2e      	add	r3, sp, #184	; 0xb8
1a01818c:	4418      	add	r0, r3
1a01818e:	3104      	adds	r1, #4
1a018190:	ed17 7a28 	vldr	s14, [r7, #-160]	; 0xffffff60
1a018194:	440b      	add	r3, r1
1a018196:	ac30      	add	r4, sp, #192	; 0xc0
1a018198:	4601      	mov	r1, r0
1a01819a:	ed73 7a01 	vldmdb	r3!, {s15}
1a01819e:	ee77 6a27 	vadd.f32	s13, s14, s15
1a0181a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a0181a6:	ee77 7a87 	vadd.f32	s15, s15, s14
1a0181aa:	eeb0 7a66 	vmov.f32	s14, s13
1a0181ae:	ed61 7a01 	vstmdb	r1!, {s15}
1a0181b2:	428c      	cmp	r4, r1
1a0181b4:	edc3 6a00 	vstr	s13, [r3]
1a0181b8:	d1ef      	bne.n	1a01819a <__kernel_rem_pio2f+0x4e2>
1a0181ba:	eddf 7a54 	vldr	s15, [pc, #336]	; 1a01830c <__kernel_rem_pio2f+0x654>
1a0181be:	ed30 7a01 	vldmdb	r0!, {s14}
1a0181c2:	4284      	cmp	r4, r0
1a0181c4:	ee77 7a87 	vadd.f32	s15, s15, s14
1a0181c8:	d1f9      	bne.n	1a0181be <__kernel_rem_pio2f+0x506>
1a0181ca:	9b01      	ldr	r3, [sp, #4]
1a0181cc:	2b00      	cmp	r3, #0
1a0181ce:	d065      	beq.n	1a01829c <__kernel_rem_pio2f+0x5e4>
1a0181d0:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
1a0181d4:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
1a0181d8:	eef1 7a67 	vneg.f32	s15, s15
1a0181dc:	eef1 6a66 	vneg.f32	s13, s13
1a0181e0:	eeb1 7a47 	vneg.f32	s14, s14
1a0181e4:	edca 7a02 	vstr	s15, [sl, #8]
1a0181e8:	edca 6a00 	vstr	s13, [sl]
1a0181ec:	ed8a 7a01 	vstr	s14, [sl, #4]
1a0181f0:	ee19 3a90 	vmov	r3, s19
1a0181f4:	f003 0007 	and.w	r0, r3, #7
1a0181f8:	b057      	add	sp, #348	; 0x15c
1a0181fa:	ecbd 8b04 	vpop	{d8-d9}
1a0181fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a018202:	1d39      	adds	r1, r7, #4
1a018204:	a82e      	add	r0, sp, #184	; 0xb8
1a018206:	eddf 7a41 	vldr	s15, [pc, #260]	; 1a01830c <__kernel_rem_pio2f+0x654>
1a01820a:	4401      	add	r1, r0
1a01820c:	ed31 7a01 	vldmdb	r1!, {s14}
1a018210:	4281      	cmp	r1, r0
1a018212:	ee77 7a87 	vadd.f32	s15, s15, s14
1a018216:	d1f9      	bne.n	1a01820c <__kernel_rem_pio2f+0x554>
1a018218:	9a01      	ldr	r2, [sp, #4]
1a01821a:	b37a      	cbz	r2, 1a01827c <__kernel_rem_pio2f+0x5c4>
1a01821c:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
1a018220:	eeb1 7a67 	vneg.f32	s14, s15
1a018224:	2b00      	cmp	r3, #0
1a018226:	ee76 7ae7 	vsub.f32	s15, s13, s15
1a01822a:	ed8a 7a00 	vstr	s14, [sl]
1a01822e:	dd0a      	ble.n	1a018246 <__kernel_rem_pio2f+0x58e>
1a018230:	a82f      	add	r0, sp, #188	; 0xbc
1a018232:	2101      	movs	r1, #1
1a018234:	ecb0 7a01 	vldmia	r0!, {s14}
1a018238:	3101      	adds	r1, #1
1a01823a:	428b      	cmp	r3, r1
1a01823c:	ee77 7a87 	vadd.f32	s15, s15, s14
1a018240:	daf8      	bge.n	1a018234 <__kernel_rem_pio2f+0x57c>
1a018242:	9b01      	ldr	r3, [sp, #4]
1a018244:	b10b      	cbz	r3, 1a01824a <__kernel_rem_pio2f+0x592>
1a018246:	eef1 7a67 	vneg.f32	s15, s15
1a01824a:	edca 7a01 	vstr	s15, [sl, #4]
1a01824e:	e7cf      	b.n	1a0181f0 <__kernel_rem_pio2f+0x538>
1a018250:	aa56      	add	r2, sp, #344	; 0x158
1a018252:	19d1      	adds	r1, r2, r7
1a018254:	eddf 7a2d 	vldr	s15, [pc, #180]	; 1a01830c <__kernel_rem_pio2f+0x654>
1a018258:	399c      	subs	r1, #156	; 0x9c
1a01825a:	ed31 7a01 	vldmdb	r1!, {s14}
1a01825e:	3b01      	subs	r3, #1
1a018260:	1c5a      	adds	r2, r3, #1
1a018262:	ee77 7a87 	vadd.f32	s15, s15, s14
1a018266:	d1f8      	bne.n	1a01825a <__kernel_rem_pio2f+0x5a2>
1a018268:	9b01      	ldr	r3, [sp, #4]
1a01826a:	b10b      	cbz	r3, 1a018270 <__kernel_rem_pio2f+0x5b8>
1a01826c:	eef1 7a67 	vneg.f32	s15, s15
1a018270:	edca 7a00 	vstr	s15, [sl]
1a018274:	e7bc      	b.n	1a0181f0 <__kernel_rem_pio2f+0x538>
1a018276:	eddf 7a25 	vldr	s15, [pc, #148]	; 1a01830c <__kernel_rem_pio2f+0x654>
1a01827a:	e6ff      	b.n	1a01807c <__kernel_rem_pio2f+0x3c4>
1a01827c:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
1a018280:	edca 7a00 	vstr	s15, [sl]
1a018284:	2b00      	cmp	r3, #0
1a018286:	ee77 7a67 	vsub.f32	s15, s14, s15
1a01828a:	dcd1      	bgt.n	1a018230 <__kernel_rem_pio2f+0x578>
1a01828c:	edca 7a01 	vstr	s15, [sl, #4]
1a018290:	e7ae      	b.n	1a0181f0 <__kernel_rem_pio2f+0x538>
1a018292:	f04f 0e01 	mov.w	lr, #1
1a018296:	e632      	b.n	1a017efe <__kernel_rem_pio2f+0x246>
1a018298:	2200      	movs	r2, #0
1a01829a:	e5f0      	b.n	1a017e7e <__kernel_rem_pio2f+0x1c6>
1a01829c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
1a01829e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
1a0182a0:	edca 7a02 	vstr	s15, [sl, #8]
1a0182a4:	f8ca 2000 	str.w	r2, [sl]
1a0182a8:	f8ca 3004 	str.w	r3, [sl, #4]
1a0182ac:	e7a0      	b.n	1a0181f0 <__kernel_rem_pio2f+0x538>
1a0182ae:	eebd 7ac7 	vcvt.s32.f32	s14, s14
1a0182b2:	a906      	add	r1, sp, #24
1a0182b4:	ee17 2a10 	vmov	r2, s14
1a0182b8:	465b      	mov	r3, fp
1a0182ba:	f841 202b 	str.w	r2, [r1, fp, lsl #2]
1a0182be:	e6a0      	b.n	1a018002 <__kernel_rem_pio2f+0x34a>
1a0182c0:	eddf 7a12 	vldr	s15, [pc, #72]	; 1a01830c <__kernel_rem_pio2f+0x654>
1a0182c4:	e781      	b.n	1a0181ca <__kernel_rem_pio2f+0x512>
1a0182c6:	9a64      	ldr	r2, [sp, #400]	; 0x190
1a0182c8:	2a03      	cmp	r2, #3
1a0182ca:	d891      	bhi.n	1a0181f0 <__kernel_rem_pio2f+0x538>
1a0182cc:	a101      	add	r1, pc, #4	; (adr r1, 1a0182d4 <__kernel_rem_pio2f+0x61c>)
1a0182ce:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
1a0182d2:	bf00      	nop
1a0182d4:	1a0182ff 	.word	0x1a0182ff
1a0182d8:	1a0182f9 	.word	0x1a0182f9
1a0182dc:	1a0182f9 	.word	0x1a0182f9
1a0182e0:	1a0182c1 	.word	0x1a0182c1
1a0182e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
1a0182e8:	2302      	movs	r3, #2
1a0182ea:	ee37 9ac9 	vsub.f32	s18, s15, s18
1a0182ee:	9301      	str	r3, [sp, #4]
1a0182f0:	e5dc      	b.n	1a017eac <__kernel_rem_pio2f+0x1f4>
1a0182f2:	9b02      	ldr	r3, [sp, #8]
1a0182f4:	009c      	lsls	r4, r3, #2
1a0182f6:	e533      	b.n	1a017d60 <__kernel_rem_pio2f+0xa8>
1a0182f8:	eddf 7a04 	vldr	s15, [pc, #16]	; 1a01830c <__kernel_rem_pio2f+0x654>
1a0182fc:	e78c      	b.n	1a018218 <__kernel_rem_pio2f+0x560>
1a0182fe:	eddf 7a03 	vldr	s15, [pc, #12]	; 1a01830c <__kernel_rem_pio2f+0x654>
1a018302:	e7b1      	b.n	1a018268 <__kernel_rem_pio2f+0x5b0>
1a018304:	1a01b144 	.word	0x1a01b144
1a018308:	3fc90000 	.word	0x3fc90000
1a01830c:	00000000 	.word	0x00000000

1a018310 <__kernel_sinf>:
1a018310:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
1a018314:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
1a018318:	ee07 0a90 	vmov	s15, r0
1a01831c:	ee06 1a10 	vmov	s12, r1
1a018320:	da04      	bge.n	1a01832c <__kernel_sinf+0x1c>
1a018322:	eebd 7ae7 	vcvt.s32.f32	s14, s15
1a018326:	ee17 3a10 	vmov	r3, s14
1a01832a:	b323      	cbz	r3, 1a018376 <__kernel_sinf+0x66>
1a01832c:	ee27 7aa7 	vmul.f32	s14, s15, s15
1a018330:	ed9f 4a17 	vldr	s8, [pc, #92]	; 1a018390 <__kernel_sinf+0x80>
1a018334:	eddf 4a17 	vldr	s9, [pc, #92]	; 1a018394 <__kernel_sinf+0x84>
1a018338:	ed9f 5a17 	vldr	s10, [pc, #92]	; 1a018398 <__kernel_sinf+0x88>
1a01833c:	eddf 5a17 	vldr	s11, [pc, #92]	; 1a01839c <__kernel_sinf+0x8c>
1a018340:	eddf 6a17 	vldr	s13, [pc, #92]	; 1a0183a0 <__kernel_sinf+0x90>
1a018344:	eee7 4a04 	vfma.f32	s9, s14, s8
1a018348:	ee27 4a87 	vmul.f32	s8, s15, s14
1a01834c:	eea7 5a24 	vfma.f32	s10, s14, s9
1a018350:	eee7 5a05 	vfma.f32	s11, s14, s10
1a018354:	eee7 6a25 	vfma.f32	s13, s14, s11
1a018358:	b182      	cbz	r2, 1a01837c <__kernel_sinf+0x6c>
1a01835a:	ee66 6ac4 	vnmul.f32	s13, s13, s8
1a01835e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
1a018362:	eee6 6a25 	vfma.f32	s13, s12, s11
1a018366:	eddf 5a0f 	vldr	s11, [pc, #60]	; 1a0183a4 <__kernel_sinf+0x94>
1a01836a:	ee97 6a26 	vfnms.f32	s12, s14, s13
1a01836e:	eea4 6a25 	vfma.f32	s12, s8, s11
1a018372:	ee77 7ac6 	vsub.f32	s15, s15, s12
1a018376:	ee17 0a90 	vmov	r0, s15
1a01837a:	4770      	bx	lr
1a01837c:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 1a0183a8 <__kernel_sinf+0x98>
1a018380:	eea7 6a26 	vfma.f32	s12, s14, s13
1a018384:	eee4 7a06 	vfma.f32	s15, s8, s12
1a018388:	ee17 0a90 	vmov	r0, s15
1a01838c:	4770      	bx	lr
1a01838e:	bf00      	nop
1a018390:	2f2ec9d3 	.word	0x2f2ec9d3
1a018394:	b2d72f34 	.word	0xb2d72f34
1a018398:	3638ef1b 	.word	0x3638ef1b
1a01839c:	b9500d01 	.word	0xb9500d01
1a0183a0:	3c088889 	.word	0x3c088889
1a0183a4:	3e2aaaab 	.word	0x3e2aaaab
1a0183a8:	be2aaaab 	.word	0xbe2aaaab

1a0183ac <matherr>:
1a0183ac:	2000      	movs	r0, #0
1a0183ae:	4770      	bx	lr

1a0183b0 <nan>:
1a0183b0:	2000      	movs	r0, #0
1a0183b2:	4901      	ldr	r1, [pc, #4]	; (1a0183b8 <nan+0x8>)
1a0183b4:	4770      	bx	lr
1a0183b6:	bf00      	nop
1a0183b8:	7ff80000 	.word	0x7ff80000
1a0183bc:	ffffffff 	.word	0xffffffff

1a0183c0 <scalbn>:
1a0183c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0183c2:	f3c1 560a 	ubfx	r6, r1, #20, #11
1a0183c6:	4604      	mov	r4, r0
1a0183c8:	460d      	mov	r5, r1
1a0183ca:	460b      	mov	r3, r1
1a0183cc:	4617      	mov	r7, r2
1a0183ce:	bb06      	cbnz	r6, 1a018412 <scalbn+0x52>
1a0183d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a0183d4:	4303      	orrs	r3, r0
1a0183d6:	d025      	beq.n	1a018424 <scalbn+0x64>
1a0183d8:	2200      	movs	r2, #0
1a0183da:	4b35      	ldr	r3, [pc, #212]	; (1a0184b0 <scalbn+0xf0>)
1a0183dc:	f7fb fb0c 	bl	1a0139f8 <__aeabi_dmul>
1a0183e0:	4a34      	ldr	r2, [pc, #208]	; (1a0184b4 <scalbn+0xf4>)
1a0183e2:	4297      	cmp	r7, r2
1a0183e4:	4604      	mov	r4, r0
1a0183e6:	460d      	mov	r5, r1
1a0183e8:	460b      	mov	r3, r1
1a0183ea:	db2a      	blt.n	1a018442 <scalbn+0x82>
1a0183ec:	f3c1 560a 	ubfx	r6, r1, #20, #11
1a0183f0:	3e36      	subs	r6, #54	; 0x36
1a0183f2:	443e      	add	r6, r7
1a0183f4:	f240 72fe 	movw	r2, #2046	; 0x7fe
1a0183f8:	4296      	cmp	r6, r2
1a0183fa:	dc28      	bgt.n	1a01844e <scalbn+0x8e>
1a0183fc:	2e00      	cmp	r6, #0
1a0183fe:	dd12      	ble.n	1a018426 <scalbn+0x66>
1a018400:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
1a018404:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
1a018408:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
1a01840c:	4620      	mov	r0, r4
1a01840e:	4629      	mov	r1, r5
1a018410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a018412:	f240 72ff 	movw	r2, #2047	; 0x7ff
1a018416:	4296      	cmp	r6, r2
1a018418:	d1eb      	bne.n	1a0183f2 <scalbn+0x32>
1a01841a:	4602      	mov	r2, r0
1a01841c:	460b      	mov	r3, r1
1a01841e:	f7fb f939 	bl	1a013694 <__adddf3>
1a018422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a018424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a018426:	f116 0f35 	cmn.w	r6, #53	; 0x35
1a01842a:	da1d      	bge.n	1a018468 <scalbn+0xa8>
1a01842c:	f24c 3350 	movw	r3, #50000	; 0xc350
1a018430:	429f      	cmp	r7, r3
1a018432:	4622      	mov	r2, r4
1a018434:	462b      	mov	r3, r5
1a018436:	dc25      	bgt.n	1a018484 <scalbn+0xc4>
1a018438:	a119      	add	r1, pc, #100	; (adr r1, 1a0184a0 <scalbn+0xe0>)
1a01843a:	e9d1 0100 	ldrd	r0, r1, [r1]
1a01843e:	f000 f99b 	bl	1a018778 <copysign>
1a018442:	a317      	add	r3, pc, #92	; (adr r3, 1a0184a0 <scalbn+0xe0>)
1a018444:	e9d3 2300 	ldrd	r2, r3, [r3]
1a018448:	f7fb fad6 	bl	1a0139f8 <__aeabi_dmul>
1a01844c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a01844e:	4622      	mov	r2, r4
1a018450:	462b      	mov	r3, r5
1a018452:	a115      	add	r1, pc, #84	; (adr r1, 1a0184a8 <scalbn+0xe8>)
1a018454:	e9d1 0100 	ldrd	r0, r1, [r1]
1a018458:	f000 f98e 	bl	1a018778 <copysign>
1a01845c:	a312      	add	r3, pc, #72	; (adr r3, 1a0184a8 <scalbn+0xe8>)
1a01845e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a018462:	f7fb fac9 	bl	1a0139f8 <__aeabi_dmul>
1a018466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a018468:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
1a01846c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
1a018470:	3636      	adds	r6, #54	; 0x36
1a018472:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
1a018476:	4620      	mov	r0, r4
1a018478:	4629      	mov	r1, r5
1a01847a:	2200      	movs	r2, #0
1a01847c:	4b0e      	ldr	r3, [pc, #56]	; (1a0184b8 <scalbn+0xf8>)
1a01847e:	f7fb fabb 	bl	1a0139f8 <__aeabi_dmul>
1a018482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a018484:	a108      	add	r1, pc, #32	; (adr r1, 1a0184a8 <scalbn+0xe8>)
1a018486:	e9d1 0100 	ldrd	r0, r1, [r1]
1a01848a:	f000 f975 	bl	1a018778 <copysign>
1a01848e:	a306      	add	r3, pc, #24	; (adr r3, 1a0184a8 <scalbn+0xe8>)
1a018490:	e9d3 2300 	ldrd	r2, r3, [r3]
1a018494:	f7fb fab0 	bl	1a0139f8 <__aeabi_dmul>
1a018498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a01849a:	bf00      	nop
1a01849c:	f3af 8000 	nop.w
1a0184a0:	c2f8f359 	.word	0xc2f8f359
1a0184a4:	01a56e1f 	.word	0x01a56e1f
1a0184a8:	8800759c 	.word	0x8800759c
1a0184ac:	7e37e43c 	.word	0x7e37e43c
1a0184b0:	43500000 	.word	0x43500000
1a0184b4:	ffff3cb0 	.word	0xffff3cb0
1a0184b8:	3c900000 	.word	0x3c900000

1a0184bc <atanf>:
1a0184bc:	b538      	push	{r3, r4, r5, lr}
1a0184be:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
1a0184c2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
1a0184c6:	ee07 0a90 	vmov	s15, r0
1a0184ca:	4605      	mov	r5, r0
1a0184cc:	db0d      	blt.n	1a0184ea <atanf+0x2e>
1a0184ce:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
1a0184d2:	dc5c      	bgt.n	1a01858e <atanf+0xd2>
1a0184d4:	eddf 7a55 	vldr	s15, [pc, #340]	; 1a01862c <atanf+0x170>
1a0184d8:	ed9f 7a55 	vldr	s14, [pc, #340]	; 1a018630 <atanf+0x174>
1a0184dc:	2800      	cmp	r0, #0
1a0184de:	bfd8      	it	le
1a0184e0:	eef0 7a47 	vmovle.f32	s15, s14
1a0184e4:	ee17 0a90 	vmov	r0, s15
1a0184e8:	bd38      	pop	{r3, r4, r5, pc}
1a0184ea:	4b52      	ldr	r3, [pc, #328]	; (1a018634 <atanf+0x178>)
1a0184ec:	429c      	cmp	r4, r3
1a0184ee:	dc61      	bgt.n	1a0185b4 <atanf+0xf8>
1a0184f0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
1a0184f4:	db50      	blt.n	1a018598 <atanf+0xdc>
1a0184f6:	f04f 33ff 	mov.w	r3, #4294967295
1a0184fa:	ee67 5aa7 	vmul.f32	s11, s15, s15
1a0184fe:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 1a018638 <atanf+0x17c>
1a018502:	ed9f 2a4e 	vldr	s4, [pc, #312]	; 1a01863c <atanf+0x180>
1a018506:	ed9f 3a4e 	vldr	s6, [pc, #312]	; 1a018640 <atanf+0x184>
1a01850a:	eddf 1a4e 	vldr	s3, [pc, #312]	; 1a018644 <atanf+0x188>
1a01850e:	eddf 2a4e 	vldr	s5, [pc, #312]	; 1a018648 <atanf+0x18c>
1a018512:	ed9f 4a4e 	vldr	s8, [pc, #312]	; 1a01864c <atanf+0x190>
1a018516:	eddf 3a4e 	vldr	s7, [pc, #312]	; 1a018650 <atanf+0x194>
1a01851a:	ed9f 5a4e 	vldr	s10, [pc, #312]	; 1a018654 <atanf+0x198>
1a01851e:	eddf 4a4e 	vldr	s9, [pc, #312]	; 1a018658 <atanf+0x19c>
1a018522:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 1a01865c <atanf+0x1a0>
1a018526:	eddf 6a4e 	vldr	s13, [pc, #312]	; 1a018660 <atanf+0x1a4>
1a01852a:	ee25 7aa5 	vmul.f32	s14, s11, s11
1a01852e:	1c5a      	adds	r2, r3, #1
1a018530:	eea7 2a01 	vfma.f32	s4, s14, s2
1a018534:	eee7 2a21 	vfma.f32	s5, s14, s3
1a018538:	eea7 3a02 	vfma.f32	s6, s14, s4
1a01853c:	eee7 3a22 	vfma.f32	s7, s14, s5
1a018540:	eea7 4a03 	vfma.f32	s8, s14, s6
1a018544:	eee7 4a23 	vfma.f32	s9, s14, s7
1a018548:	eea7 5a04 	vfma.f32	s10, s14, s8
1a01854c:	eee7 6a24 	vfma.f32	s13, s14, s9
1a018550:	eea7 6a05 	vfma.f32	s12, s14, s10
1a018554:	ee26 7a87 	vmul.f32	s14, s13, s14
1a018558:	ee66 6a25 	vmul.f32	s13, s12, s11
1a01855c:	d041      	beq.n	1a0185e2 <atanf+0x126>
1a01855e:	4a41      	ldr	r2, [pc, #260]	; (1a018664 <atanf+0x1a8>)
1a018560:	4941      	ldr	r1, [pc, #260]	; (1a018668 <atanf+0x1ac>)
1a018562:	009b      	lsls	r3, r3, #2
1a018564:	441a      	add	r2, r3
1a018566:	ee76 6a87 	vadd.f32	s13, s13, s14
1a01856a:	ed92 7a00 	vldr	s14, [r2]
1a01856e:	ee97 7aa6 	vfnms.f32	s14, s15, s13
1a018572:	440b      	add	r3, r1
1a018574:	2d00      	cmp	r5, #0
1a018576:	edd3 6a00 	vldr	s13, [r3]
1a01857a:	ee77 7a67 	vsub.f32	s15, s14, s15
1a01857e:	ee76 7ae7 	vsub.f32	s15, s13, s15
1a018582:	bfb8      	it	lt
1a018584:	eef1 7a67 	vneglt.f32	s15, s15
1a018588:	ee17 0a90 	vmov	r0, s15
1a01858c:	bd38      	pop	{r3, r4, r5, pc}
1a01858e:	ee77 7aa7 	vadd.f32	s15, s15, s15
1a018592:	ee17 0a90 	vmov	r0, s15
1a018596:	bd38      	pop	{r3, r4, r5, pc}
1a018598:	ed9f 7a34 	vldr	s14, [pc, #208]	; 1a01866c <atanf+0x1b0>
1a01859c:	ee37 7a87 	vadd.f32	s14, s15, s14
1a0185a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
1a0185a4:	eeb4 7ae6 	vcmpe.f32	s14, s13
1a0185a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0185ac:	dda3      	ble.n	1a0184f6 <atanf+0x3a>
1a0185ae:	ee17 0a90 	vmov	r0, s15
1a0185b2:	bd38      	pop	{r3, r4, r5, pc}
1a0185b4:	f7fc fee4 	bl	1a015380 <fabsf>
1a0185b8:	4b2d      	ldr	r3, [pc, #180]	; (1a018670 <atanf+0x1b4>)
1a0185ba:	429c      	cmp	r4, r3
1a0185bc:	ee07 0a10 	vmov	s14, r0
1a0185c0:	dc14      	bgt.n	1a0185ec <atanf+0x130>
1a0185c2:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
1a0185c6:	429c      	cmp	r4, r3
1a0185c8:	dc25      	bgt.n	1a018616 <atanf+0x15a>
1a0185ca:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
1a0185ce:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
1a0185d2:	eee7 6a27 	vfma.f32	s13, s14, s15
1a0185d6:	2300      	movs	r3, #0
1a0185d8:	ee37 7a27 	vadd.f32	s14, s14, s15
1a0185dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
1a0185e0:	e78b      	b.n	1a0184fa <atanf+0x3e>
1a0185e2:	ee76 6a87 	vadd.f32	s13, s13, s14
1a0185e6:	eee7 7ae6 	vfms.f32	s15, s15, s13
1a0185ea:	e77b      	b.n	1a0184e4 <atanf+0x28>
1a0185ec:	4b21      	ldr	r3, [pc, #132]	; (1a018674 <atanf+0x1b8>)
1a0185ee:	429c      	cmp	r4, r3
1a0185f0:	dc0b      	bgt.n	1a01860a <atanf+0x14e>
1a0185f2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
1a0185f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
1a0185fa:	eee7 6a27 	vfma.f32	s13, s14, s15
1a0185fe:	2302      	movs	r3, #2
1a018600:	ee37 7a67 	vsub.f32	s14, s14, s15
1a018604:	eec7 7a26 	vdiv.f32	s15, s14, s13
1a018608:	e777      	b.n	1a0184fa <atanf+0x3e>
1a01860a:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
1a01860e:	eec6 7a87 	vdiv.f32	s15, s13, s14
1a018612:	2303      	movs	r3, #3
1a018614:	e771      	b.n	1a0184fa <atanf+0x3e>
1a018616:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
1a01861a:	ee77 6a67 	vsub.f32	s13, s14, s15
1a01861e:	ee37 7a27 	vadd.f32	s14, s14, s15
1a018622:	2301      	movs	r3, #1
1a018624:	eec6 7a87 	vdiv.f32	s15, s13, s14
1a018628:	e767      	b.n	1a0184fa <atanf+0x3e>
1a01862a:	bf00      	nop
1a01862c:	3fc90fdb 	.word	0x3fc90fdb
1a018630:	bfc90fdb 	.word	0xbfc90fdb
1a018634:	3edfffff 	.word	0x3edfffff
1a018638:	3c8569d7 	.word	0x3c8569d7
1a01863c:	3d4bda59 	.word	0x3d4bda59
1a018640:	3d886b35 	.word	0x3d886b35
1a018644:	bd15a221 	.word	0xbd15a221
1a018648:	bd6ef16b 	.word	0xbd6ef16b
1a01864c:	3dba2e6e 	.word	0x3dba2e6e
1a018650:	bd9d8795 	.word	0xbd9d8795
1a018654:	3e124925 	.word	0x3e124925
1a018658:	bde38e38 	.word	0xbde38e38
1a01865c:	3eaaaaab 	.word	0x3eaaaaab
1a018660:	be4ccccd 	.word	0xbe4ccccd
1a018664:	1a01b170 	.word	0x1a01b170
1a018668:	1a01b180 	.word	0x1a01b180
1a01866c:	7149f2ca 	.word	0x7149f2ca
1a018670:	3f97ffff 	.word	0x3f97ffff
1a018674:	401bffff 	.word	0x401bffff

1a018678 <scalbnf>:
1a018678:	b500      	push	{lr}
1a01867a:	ed2d 8b02 	vpush	{d8}
1a01867e:	b083      	sub	sp, #12
1a018680:	9001      	str	r0, [sp, #4]
1a018682:	9b01      	ldr	r3, [sp, #4]
1a018684:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
1a018688:	d023      	beq.n	1a0186d2 <scalbnf+0x5a>
1a01868a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
1a01868e:	d215      	bcs.n	1a0186bc <scalbnf+0x44>
1a018690:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
1a018694:	d326      	bcc.n	1a0186e4 <scalbnf+0x6c>
1a018696:	0dd2      	lsrs	r2, r2, #23
1a018698:	440a      	add	r2, r1
1a01869a:	2afe      	cmp	r2, #254	; 0xfe
1a01869c:	dc3c      	bgt.n	1a018718 <scalbnf+0xa0>
1a01869e:	2a00      	cmp	r2, #0
1a0186a0:	dd30      	ble.n	1a018704 <scalbnf+0x8c>
1a0186a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
1a0186a6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
1a0186aa:	ee07 3a90 	vmov	s15, r3
1a0186ae:	ee17 0a90 	vmov	r0, s15
1a0186b2:	b003      	add	sp, #12
1a0186b4:	ecbd 8b02 	vpop	{d8}
1a0186b8:	f85d fb04 	ldr.w	pc, [sp], #4
1a0186bc:	ee07 0a90 	vmov	s15, r0
1a0186c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
1a0186c4:	ee17 0a90 	vmov	r0, s15
1a0186c8:	b003      	add	sp, #12
1a0186ca:	ecbd 8b02 	vpop	{d8}
1a0186ce:	f85d fb04 	ldr.w	pc, [sp], #4
1a0186d2:	eddd 7a01 	vldr	s15, [sp, #4]
1a0186d6:	ee17 0a90 	vmov	r0, s15
1a0186da:	b003      	add	sp, #12
1a0186dc:	ecbd 8b02 	vpop	{d8}
1a0186e0:	f85d fb04 	ldr.w	pc, [sp], #4
1a0186e4:	ed9d 7a01 	vldr	s14, [sp, #4]
1a0186e8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 1a018764 <scalbnf+0xec>
1a0186ec:	4b1e      	ldr	r3, [pc, #120]	; (1a018768 <scalbnf+0xf0>)
1a0186ee:	ee67 7a27 	vmul.f32	s15, s14, s15
1a0186f2:	4299      	cmp	r1, r3
1a0186f4:	edcd 7a01 	vstr	s15, [sp, #4]
1a0186f8:	db20      	blt.n	1a01873c <scalbnf+0xc4>
1a0186fa:	9b01      	ldr	r3, [sp, #4]
1a0186fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
1a018700:	3a19      	subs	r2, #25
1a018702:	e7c9      	b.n	1a018698 <scalbnf+0x20>
1a018704:	f112 0f16 	cmn.w	r2, #22
1a018708:	da1f      	bge.n	1a01874a <scalbnf+0xd2>
1a01870a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a01870e:	4299      	cmp	r1, r3
1a018710:	dc02      	bgt.n	1a018718 <scalbnf+0xa0>
1a018712:	ed9f 8a16 	vldr	s16, [pc, #88]	; 1a01876c <scalbnf+0xf4>
1a018716:	e001      	b.n	1a01871c <scalbnf+0xa4>
1a018718:	ed9f 8a15 	vldr	s16, [pc, #84]	; 1a018770 <scalbnf+0xf8>
1a01871c:	9901      	ldr	r1, [sp, #4]
1a01871e:	ee18 0a10 	vmov	r0, s16
1a018722:	f000 f831 	bl	1a018788 <copysignf>
1a018726:	ee07 0a90 	vmov	s15, r0
1a01872a:	ee67 7a88 	vmul.f32	s15, s15, s16
1a01872e:	ee17 0a90 	vmov	r0, s15
1a018732:	b003      	add	sp, #12
1a018734:	ecbd 8b02 	vpop	{d8}
1a018738:	f85d fb04 	ldr.w	pc, [sp], #4
1a01873c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 1a01876c <scalbnf+0xf4>
1a018740:	ed9d 7a01 	vldr	s14, [sp, #4]
1a018744:	ee67 7a27 	vmul.f32	s15, s14, s15
1a018748:	e7bc      	b.n	1a0186c4 <scalbnf+0x4c>
1a01874a:	3219      	adds	r2, #25
1a01874c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
1a018750:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
1a018754:	ed9f 7a07 	vldr	s14, [pc, #28]	; 1a018774 <scalbnf+0xfc>
1a018758:	ee07 3a90 	vmov	s15, r3
1a01875c:	ee67 7a87 	vmul.f32	s15, s15, s14
1a018760:	e7b0      	b.n	1a0186c4 <scalbnf+0x4c>
1a018762:	bf00      	nop
1a018764:	4c000000 	.word	0x4c000000
1a018768:	ffff3cb0 	.word	0xffff3cb0
1a01876c:	0da24260 	.word	0x0da24260
1a018770:	7149f2ca 	.word	0x7149f2ca
1a018774:	33000000 	.word	0x33000000

1a018778 <copysign>:
1a018778:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1a01877c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
1a018780:	ea42 0103 	orr.w	r1, r2, r3
1a018784:	4770      	bx	lr
1a018786:	bf00      	nop

1a018788 <copysignf>:
1a018788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a01878c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a018790:	4308      	orrs	r0, r1
1a018792:	4770      	bx	lr

1a018794 <__errno>:
1a018794:	4b01      	ldr	r3, [pc, #4]	; (1a01879c <__errno+0x8>)
1a018796:	6818      	ldr	r0, [r3, #0]
1a018798:	4770      	bx	lr
1a01879a:	bf00      	nop
1a01879c:	100864e0 	.word	0x100864e0
1a0187a0:	313a3232 	.word	0x313a3232
1a0187a4:	37323a36 	.word	0x37323a36
1a0187a8:	00000000 	.word	0x00000000
1a0187ac:	000a6425 	.word	0x000a6425
1a0187b0:	4c504d65 	.word	0x4c504d65
1a0187b4:	312e3520 	.word	0x312e3520
1a0187b8:	00000000 	.word	0x00000000
1a0187bc:	00582520 	.word	0x00582520
1a0187c0:	00642520 	.word	0x00642520
1a0187c4:	6425532d 	.word	0x6425532d
1a0187c8:	00000000 	.word	0x00000000
1a0187cc:	0a642520 	.word	0x0a642520
1a0187d0:	00000000 	.word	0x00000000
1a0187d4:	0a582520 	.word	0x0a582520
1a0187d8:	00000000 	.word	0x00000000
1a0187dc:	20732520 	.word	0x20732520
1a0187e0:	000a6425 	.word	0x000a6425
1a0187e4:	6425532d 	.word	0x6425532d
1a0187e8:	20642520 	.word	0x20642520
1a0187ec:	000a6425 	.word	0x000a6425
1a0187f0:	3e3e3e3e 	.word	0x3e3e3e3e
1a0187f4:	0000003e 	.word	0x0000003e
1a0187f8:	00003c3c 	.word	0x00003c3c
1a0187fc:	6425532d 	.word	0x6425532d
1a018800:	0a752520 	.word	0x0a752520
1a018804:	00000000 	.word	0x00000000
1a018808:	6425532d 	.word	0x6425532d
1a01880c:	0a312d20 	.word	0x0a312d20
1a018810:	00000000 	.word	0x00000000
1a018814:	2030532d 	.word	0x2030532d
1a018818:	000a7525 	.word	0x000a7525
1a01881c:	2030532d 	.word	0x2030532d
1a018820:	000a312d 	.word	0x000a312d
1a018824:	6425532d 	.word	0x6425532d
1a018828:	20642520 	.word	0x20642520
1a01882c:	25206425 	.word	0x25206425
1a018830:	64252064 	.word	0x64252064
1a018834:	0000000a 	.word	0x0000000a
1a018838:	6425532d 	.word	0x6425532d
1a01883c:	20752520 	.word	0x20752520
1a018840:	000a7525 	.word	0x000a7525
1a018844:	6425532d 	.word	0x6425532d
1a018848:	0a642520 	.word	0x0a642520
1a01884c:	ffffff00 	.word	0xffffff00

1a018850 <OscRateIn>:
1a018850:	00b71b00                                ....

1a018854 <ExtRateIn>:
1a018854:	00000000 5644450a 33342d53 002c3733     .....EDVS-4337,.
1a018864:	42454420 00004755 2e305620 00302e37      DEBUG.. V0.7.0.
1a018874:	554d4920 00000000 4f425020 00000054      IMU.... PBOT...
1a018884:	6c754a20 20392020 36313032 3232202c      Jul  9 2016, 22
1a018894:	3a36313a 000a3832 74737953 43206d65     :16:28..System C
1a0188a4:	6b636f6c 3325203a 7a484d64 7531203b     lock: %3dMHz; 1u
1a0188b4:	76652073 20746e65 656d6974 73657220     s event time res
1a0188c4:	74756c6f 0a6e6f69 00000000 70707553     olution.....Supp
1a0188d4:	6574726f 6f432064 6e616d6d 0a3a7364     orted Commands:.
1a0188e4:	00000000 2f2b4520 2020202d 20202020     .... E+/-       
1a0188f4:	20202020 20202020 2d202020 616e6520                - ena
1a018904:	2f656c62 61736964 20656c62 6e657665     ble/disable even
1a018914:	65732074 6e69646e 00000a67 78452120     t sending... !Ex
1a018924:	20202020 20202020 20202020 20202020                     
1a018934:	2d202020 65707320 79666963 65766520        - specify eve
1a018944:	6420746e 20617461 6d726f66 202c7461     nt data format, 
1a018954:	20453f3f 73206f74 20776f68 6974706f     ??E to show opti
1a018964:	0a736e6f 00000000 54452120 20202078     ons..... !ETx   
1a018974:	20202020 20202020 20202020 2d202020                    -
1a018984:	74657320 72756320 746e6572 6d697420      set current tim
1a018994:	61747365 7420706d 2078206f 66656428     estamp to x (def
1a0189a4:	746c7561 2930203a 0000000a 54452120     ault: 0).... !ET
1a0189b4:	20202b4d 20202020 20202020 20202020     M+              
1a0189c4:	2d202020 6e797320 74206863 73656d69        - synch times
1a0189d4:	706d6174 616d202c 72657473 646f6d20     tamp, master mod
1a0189e4:	6f202c65 75707475 63612074 65766974     e, output active
1a0189f4:	0000000a 54452120 2020304d 20202020     .... !ETM0      
1a018a04:	20202020 20202020 2d202020 6e797320                - syn
1a018a14:	74206863 73656d69 706d6174 616d202c     ch timestamp, ma
1a018a24:	72657473 646f6d20 6f202c65 75707475     ster mode, outpu
1a018a34:	74732074 6570706f 00000a64 54452120     t stopped... !ET
1a018a44:	20202053 20202020 20202020 20202020     S               
1a018a54:	2d202020 6e797320 74206863 73656d69        - synch times
1a018a64:	706d6174 6c73202c 20657661 65646f6d     tamp, slave mode
1a018a74:	0000000a 54452120 20202049 20202020     .... !ETI       
1a018a84:	20202020 20202020 2d202020 6e697320                - sin
1a018a94:	20656c67 69746572 202c616e 65206f6e     gle retina, no e
1a018aa4:	72657478 206c616e 636e7973 6f6d2068     xternal synch mo
1a018ab4:	000a6564 5b422120 31312d30 20783d5d     de.. !B[0-11]=x 
1a018ac4:	20202020 20202020 2d202020 74657320                - set
1a018ad4:	61696220 65722073 74736967 74207265      bias register t
1a018ae4:	6176206f 0a65756c 00000000 46422120     o value..... !BF
1a018af4:	20202020 20202020 20202020 20202020                     
1a018b04:	2d202020 6e657320 69622064 73207361        - send bias s
1a018b14:	69747465 2073676e 44206f74 28205356     ettings to DVS (
1a018b24:	73756c66 000a2968 44422120 20202078     flush).. !BDx   
1a018b34:	20202020 20202020 20202020 2d202020                    -
1a018b44:	6c657320 20746365 20646e61 73756c66      select and flus
1a018b54:	72702068 66656465 64656e69 61696220     h predefined bia
1a018b64:	65732073 0a782074 00000000 78423f20     s set x..... ?Bx
1a018b74:	20202020 20202020 20202020 20202020                     
1a018b84:	2d202020 74656720 61696220 65722073        - get bias re
1a018b94:	74736967 78207265 72756320 746e6572     gister x current
1a018ba4:	6c617620 000a6575 5b4c2120 2c312c30      value.. !L[0,1,
1a018bb4:	20205d32 20202020 20202020 2d202020     2]             -
1a018bc4:	44454c20 66666f20 2f6e6f2f 6e696c62      LED off/on/blin
1a018bd4:	676e696b 0000000a 3d552120 20202078     king.... !U=x   
1a018be4:	20202020 20202020 20202020 2d202020                    -
1a018bf4:	74657320 75616220 61722064 74206574      set baud rate t
1a018c04:	0a78206f 00000000 5b552120 2c312c30     o x..... !U[0,1,
1a018c14:	20205d32 20202020 20202020 2d202020     2]             -
1a018c24:	52415520 63652054 6d206f68 2065646f      UART echo mode 
1a018c34:	6e6f6e28 63202c65 722d646d 796c7065     (none, cmd-reply
1a018c44:	6c61202c 000a296c 2b532120 20702c62     , all).. !S+b,p 
1a018c54:	20202020 20202020 20202020 2d202020                    -
1a018c64:	616e6520 20656c62 736e6573 2073726f      enable sensors 
1a018c74:	65727473 6e696d61 3f202c67 7420533f     streaming, ??S t
1a018c84:	6873206f 6f20776f 6f697470 000a736e     o show options..
1a018c94:	2d532120 205d625b 20202020 20202020      !S-[b]         
1a018ca4:	20202020 2d202020 73696420 656c6261            - disable
1a018cb4:	6e657320 73726f73 72747320 696d6165      sensors streami
1a018cc4:	202c676e 20533f3f 73206f74 20776f68     ng, ??S to show 
1a018cd4:	6974706f 0a736e6f 00000000 62533f20     options..... ?Sb
1a018ce4:	20202020 20202020 20202020 20202020                     
1a018cf4:	2d202020 74656720 6e657320 20726f73        - get sensor 
1a018d04:	64616572 7374756f 63636120 6964726f     readouts accordi
1a018d14:	7420676e 6962206f 70616d74 000a6220     ng to bitmap b..
1a018d24:	533f3f20 20202020 20202020 20202020      ??S            
1a018d34:	20202020 2d202020 74696220 2070616d            - bitmap 
1a018d44:	706f2062 6e6f6974 00000a73 20205220     b options... R  
1a018d54:	20202020 20202020 20202020 20202020                     
1a018d64:	2d202020 73657220 62207465 6472616f        - reset board
1a018d74:	0000000a 20205020 20202020 20202020     .... P          
1a018d84:	20202020 20202020 2d202020 746e6520                - ent
1a018d94:	72207265 6f727065 6d617267 676e696d     er reprogramming
1a018da4:	646f6d20 00000a65 2b4d2120 20202d2f      mode... !M+/-  
1a018db4:	20202020 20202020 20202020 2d202020                    -
1a018dc4:	616e6520 2f656c62 61736964 20656c62      enable/disable 
1a018dd4:	6f746f6d 72642072 72657669 0000000a     motor driver....
1a018de4:	434d3f20 312c305b 2020205d 20202020      ?MC[0,1]       
1a018df4:	20202020 2d202020 74656720 746f6d20            - get mot
1a018e04:	5020726f 63204449 72746e6f 656c6c6f     or PID controlle
1a018e14:	61672072 0a736e69 00000000 434d2120     r gains..... !MC
1a018e24:	312c305b 2c703d5d 20642c69 20202020     [0,1]=p,i,d     
1a018e34:	2d202020 74657320 746f6d20 5020726f        - set motor P
1a018e44:	63204449 72746e6f 656c6c6f 61672072     ID controller ga
1a018e54:	0a736e69 00000000 504d2120 312c305b     ins..... !MP[0,1
1a018e64:	20783d5d 20202020 20202020 2d202020     ]=x            -
1a018e74:	74657320 746f6d20 5020726f 70204d57      set motor PWM p
1a018e84:	6f697265 6e692064 63696d20 65736f72     eriod in microse
1a018e94:	646e6f63 00000a73 5b4d2120 5d312c30     conds... !M[0,1]
1a018ea4:	5d255b3d 20202078 20202020 2d202020     =[%]x          -
1a018eb4:	74657320 746f6d20 6420726f 20797475      set motor duty 
1a018ec4:	74646977 6e692068 63696d20 65736f72     width in microse
1a018ed4:	646e6f63 255b2073 2e2e3020 5d303031     conds [% 0..100]
1a018ee4:	0000000a 564d2120 312c305b 305b3d5d     .... !MV[0,1]=[0
1a018ef4:	3030312d 2020205d 2d202020 74657320     -100]      - set
1a018f04:	746f6d20 7620726f 636f6c65 20797469      motor velocity 
1a018f14:	746e6928 616e7265 2d50206c 746e6f63     (internal P-cont
1a018f24:	6c6c6f72 66207265 5020726f 42687375     roller for PushB
1a018f34:	0a29746f 00000000 444d2120 312c305b     ot)..... !MD[0,1
1a018f44:	255b3d5d 2020205d 20202020 2d202020     ]=[%]          -
1a018f54:	74657320 746f6d20 6420726f 20797475      set motor duty 
1a018f64:	74646977 73202c68 20776f6c 61636564     width, slow deca
1a018f74:	255b2079 2e2e3020 5d303031 0000000a     y [% 0..100]....
1a018f84:	564d2120 2c305b44 783d5d31 20202020      !MVD[0,1]=x    
1a018f94:	20202020 2d202020 74657320 746f6d20            - set mot
1a018fa4:	6420726f 20797475 6f6c6576 79746963     or duty velocity
1a018fb4:	6c73202c 6420776f 79616365 0000000a     , slow decay....
1a018fc4:	5b502120 2c422c41 783d5d43 20202020      !P[A,B,C]=x    
1a018fd4:	20202020 2d202020 74657320 6d697420            - set tim
1a018fe4:	62207265 20657361 69726570 6920646f     er base period i
1a018ff4:	696d206e 736f7263 6e6f6365 000a7364     n microseconds..
1a019004:	5b502120 2c422c41 305b5d43 3d5d312c      !P[A,B,C][0,1]=
1a019014:	785d255b 2d202020 74657320 6d697420     [%]x   - set tim
1a019024:	63207265 6e6e6168 77206c65 68746469     er channel width
1a019034:	206e6920 7263696d 6365736f 73646e6f      in microseconds
1a019044:	20255b20 312e2e30 0a5d3030 00000000      [% 0..100].....
1a019054:	2b542120 20202d2f 20202020 20202020      !T+/-          
1a019064:	20202020 2d202020 616e6520 2f656c62            - enable/
1a019074:	61736964 20656c62 6c616552 6d695420     disable Real Tim
1a019084:	6c432065 206b636f 43545228 00000a29     e Clock (RTC)...
1a019094:	79542120 2d797979 642d6d6d 68682064      !Tyyyy-mm-dd hh
1a0190a4:	3a6d6d3a 2d207373 74657320 43545220     :mm:ss - set RTC
1a0190b4:	6d697420 00000a65 20543f20 20202020      time... ?T     
1a0190c4:	20202020 20202020 20202020 2d202020                    -
1a0190d4:	74656720 43545220 6d697420 00000a65      get RTC time...
1a0190e4:	203f3f20 20202020 20202020 20202020      ??             
1a0190f4:	20202020 2d202020 73696420 79616c70            - display
1a019104:	68742820 20297369 706c6568 6e656d20      (this) help men
1a019114:	00000a75 7473694c 20666f20 69617661     u...List of avai
1a019124:	6c62616c 76652065 20746e65 61746164     lable event data
1a019134:	726f6620 7374616d 00000a3a 30452120      formats:... !E0
1a019144:	2d202020 62203220 73657479 72657020        - 2 bytes per
1a019154:	65766520 202c746e 616e6962 203a7972      event, binary: 
1a019164:	79797931 79797979 7878702e 78787878     1yyyyyyy.pxxxxxx
1a019174:	64282078 75616665 0a29746c 00000000     x (default).....
1a019184:	31452120 2d202020 2e2e3320 79622036      !E1   - 3..6 by
1a019194:	20736574 20726570 6e657665 31202c74     tes per event, 1
1a0191a4:	20342e2e 65747962 65642073 2d61746c     ..4 bytes delta-
1a0191b4:	656d6974 6d617473 37282070 73746962     timestamp (7bits
1a0191c4:	63616520 000a2968 32452120 2d202020      each).. !E2   -
1a0191d4:	62203420 73657479 72657020 65766520      4 bytes per eve
1a0191e4:	2820746e 21207361 66203045 6f6c6c6f     nt (as !E0 follo
1a0191f4:	20646577 31207962 74696236 6d697420     wed by 16bit tim
1a019204:	61747365 0a29706d 00000000 33452120     estamp)..... !E3
1a019214:	2d202020 62203520 73657479 72657020        - 5 bytes per
1a019224:	65766520 2820746e 21207361 66203045      event (as !E0 f
1a019234:	6f6c6c6f 20646577 32207962 74696234     ollowed by 24bit
1a019244:	6d697420 61747365 0a29706d 00000000      timestamp).....
1a019254:	34452120 2d202020 62203620 73657479      !E4   - 6 bytes
1a019264:	72657020 65766520 2820746e 21207361      per event (as !
1a019274:	66203045 6f6c6c6f 20646577 33207962     E0 followed by 3
1a019284:	74696232 6d697420 61747365 0a29706d     2bit timestamp).
1a019294:	00000000 65764520 74207972 73656d69     .... Every times
1a0192a4:	706d6174 73616820 73753120 73657220     tamp has 1us res
1a0192b4:	74756c6f 0a6e6f69 00000000 6c746942     olution.....Bitl
1a0192c4:	20747369 20726f66 69617661 6c62616c     ist for availabl
1a0192d4:	65732065 726f736e 000a3a73 74694220     e sensors:.. Bit
1a0192e4:	63654420 6c61562d 4e206575 20656d61      Dec-Value Name 
1a0192f4:	20202020 61562023 7365756c 65442020         # Values  De
1a019304:	69726373 6f697470 00000a6e 20203020     scription... 0  
1a019314:	20203120 20202020 42202020 45545441      1         BATTE
1a019324:	20205952 20202020 31202020 61722020     RY         1  ra
1a019334:	61622077 72657474 6f762079 6761746c     w battery voltag
1a019344:	656c2065 206c6576 2e2e3028 39393939     e level (0..9999
1a019354:	00000a29 20203120 20203220 20202020     )... 1   2      
1a019364:	41202020 43204344 4e4e4148 20304c45        ADC CHANNEL0 
1a019374:	31202020 61722020 44412077 65722043        1  raw ADC re
1a019384:	6e696461 72662067 70206d6f 32206e69     ading from pin 2
1a019394:	2e302820 3230312e 000a2933 20203220      (0..1023).. 2  
1a0193a4:	20203420 20202020 41202020 43204344      4         ADC C
1a0193b4:	4e4e4148 20314c45 31202020 61722020     HANNEL1    1  ra
1a0193c4:	44412077 65722043 6e696461 72662067     w ADC reading fr
1a0193d4:	70206d6f 33206e69 2e302820 3230312e     om pin 3 (0..102
1a0193e4:	000a2933 20203320 20203820 20202020     3).. 3   8      
1a0193f4:	41202020 43204344 4e4e4148 20324c45        ADC CHANNEL2 
1a019404:	31202020 61722020 44412077 65722043        1  raw ADC re
1a019414:	6e696461 72662067 70206d6f 34206e69     ading from pin 4
1a019424:	2e302820 3230312e 000a2933 20203420      (0..1023).. 4  
1a019434:	20363120 20202020 41202020 43204344      16        ADC C
1a019444:	4e4e4148 20334c45 31202020 61722020     HANNEL3    1  ra
1a019454:	44412077 65722043 6e696461 72662067     w ADC reading fr
1a019464:	70206d6f 35206e69 2e302820 3230312e     om pin 5 (0..102
1a019474:	000a2933 20203520 20323320 20202020     3).. 5   32     
1a019484:	41202020 43204344 4e4e4148 20344c45        ADC CHANNEL4 
1a019494:	31202020 61722020 44412077 65722043        1  raw ADC re
1a0194a4:	6e696461 72662067 70206d6f 36206e69     ading from pin 6
1a0194b4:	2e302820 3230312e 000a2933 20203620      (0..1023).. 6  
1a0194c4:	20343620 20202020 41202020 43204344      64        ADC C
1a0194d4:	4e4e4148 20354c45 31202020 61722020     HANNEL5    1  ra
1a0194e4:	44412077 65722043 6e696461 72662067     w ADC reading fr
1a0194f4:	70206d6f 37206e69 2e302820 3230312e     om pin 7 (0..102
1a019504:	000a2933 20203720 38323120 20202020     3).. 7   128    
1a019514:	52202020 47205741 204f5259 20202020        RAW GYRO     
1a019524:	33202020 61722020 79672077 63736f72        3  raw gyrosc
1a019534:	2065706f 61746164 726f6620 61203320     ope data for 3 a
1a019544:	20736978 2d2f2b28 36373233 000a2938     xis (+/-32768)..
1a019554:	20203820 36353220 20202020 52202020      8   256       R
1a019564:	41205741 4c454343 20202020 33202020     AW ACCEL       3
1a019574:	61722020 63612077 656c6563 656d6f72       raw accelerome
1a019584:	20726574 61746164 726f6620 61203320     ter data for 3 a
1a019594:	20736978 2d2f2b28 36373233 000a2938     xis (+/-32768)..
1a0195a4:	20203920 32313520 20202020 52202020      9   512       R
1a0195b4:	43205741 41504d4f 20205353 33202020     AW COMPASS     3
1a0195c4:	61722020 616d2077 74656e67 76206369       raw magnetic v
1a0195d4:	65756c61 6f662073 20332072 73697861     alues for 3 axis
1a0195e4:	2f2b2820 3930342d 000a2936 20303120      (+/-4096).. 10 
1a0195f4:	32303120 20202034 43202020 47204c41      1024      CAL G
1a019604:	204f5259 20202020 33202020 79672020     YRO        3  gy
1a019614:	63736f72 2065706f 61746164 206e6920     roscope data in 
1a019624:	20737064 20363151 48206e69 000a5845     dps Q16 in HEX..
1a019634:	20313120 34303220 20202038 43202020      11  2048      C
1a019644:	41204c41 4c454343 20202020 33202020     AL ACCEL       3
1a019654:	63612020 656c6563 656d6f72 20726574       accelerometer 
1a019664:	61746164 206e6920 20732767 20363151     data in g's Q16 
1a019674:	48206e69 000a5845 20323120 39303420     in HEX.. 12  409
1a019684:	20202036 43202020 43204c41 41504d4f     6      CAL COMPA
1a019694:	20205353 33202020 616d2020 74656e67     SS     3  magnet
1a0196a4:	76206369 65756c61 6e692073 63696d20     ic values in mic
1a0196b4:	65746f72 73616c73 36315120 206e6920     roteslas Q16 in 
1a0196c4:	0a584548 00000000 20333120 39313820     HEX..... 13  819
1a0196d4:	20202032 51202020 54524155 494e5245     2      QUARTERNI
1a0196e4:	20204e4f 34202020 20392020 73697861     ON     4  9 axis
1a0196f4:	61757120 72657472 6e6f696e 30335120      quarternion Q30
1a019704:	206e6920 0a584548 00000000 20343120      in HEX..... 14 
1a019714:	33363120 20203438 45202020 52454c55      16384     EULER
1a019724:	474e4120 2053454c 34202020 75652020      ANGLES    4  eu
1a019734:	2072656c 6c676e61 69207365 6564206e     ler angles in de
1a019744:	65657267 33512073 6e692030 58454820     grees Q30 in HEX
1a019754:	0000000a 20353120 37323320 20203836     .... 15  32768  
1a019764:	52202020 5441544f 204e4f49 5254414d        ROTATION MATR
1a019774:	39205849 6f722020 69746174 6d206e6f     IX 9  rotation m
1a019784:	69727461 33512078 6e692030 58454820     atrix Q30 in HEX
1a019794:	0000000a 20363120 35353620 20203633     .... 16  65536  
1a0197a4:	48202020 49444145 2020474e 20202020        HEADING      
1a0197b4:	31202020 65682020 6e696461 6e692067        1  heading in
1a0197c4:	67656420 73656572 36315120 206e6920      degrees Q16 in 
1a0197d4:	0a584548 00000000 20373120 31333120     HEX..... 17  131
1a0197e4:	20323730 4c202020 41454e49 43412052     072    LINEAR AC
1a0197f4:	204c4543 33202020 696c2020 7261656e     CEL    3  linear
1a019804:	63636120 69206c65 2f6d206e 20325e73      accel in m/s^2 
1a019814:	616f6c46 6e692074 58454820 0000000a     Float in HEX....
1a019824:	20383120 32363220 20343431 49202020      18  262144    I
1a019834:	5320554d 55544154 20202053 32202020     MU STATUS      2
1a019844:	4d492020 74732055 73757461 65742820       IMU status (te
1a019854:	7265706d 72757461 6e612065 69742064     mperature and ti
1a019864:	7473656d 29706d61 0000000a 20393120     mestamp).... 19 
1a019874:	34323520 20383832 50202020 53204d57      524288    PWM S
1a019884:	414e4749 2020534c 34202020 75632020     IGNALS     4  cu
1a019894:	6e657272 20796c74 20746573 204d5750     rrently set PWM 
1a0198a4:	79747564 63796320 6620656c 6120726f     duty cycle for a
1a0198b4:	32206c6c 746f6d20 0a73726f 00000000     ll 2 motors.....
1a0198c4:	20303220 34303120 36373538 4d202020      20  1048576   M
1a0198d4:	524f544f 52554320 544e4552 32202053     OTOR CURRENTS  2
1a0198e4:	6f6d2020 20726f74 72727563 73746e65       motor currents
1a0198f4:	6f726620 6874206d 6f6d2065 20726f74      from the motor 
1a019904:	76697264 000a7265 20313220 39303220     driver.. 21  209
1a019914:	32353137 45202020 544e4556 41522053     7152   EVENTS RA
1a019924:	20204554 31202020 76452020 20746e65     TE     1  Event 
1a019934:	65746172 72657020 63657320 20646e6f     rate per second 
1a019944:	2e2e3028 30303031 29303030 0000000a     (0..1000000)....
1a019954:	20383220 38363220 34353334 4d203635      28  268435456 M
1a019964:	524f544f 4e455320 53524f53 32202020     OTOR SENSORS   2
1a019974:	68772020 206c6565 6b636974 756f6320       wheel tick cou
1a019984:	7265746e 0000000a 6425422d 0a64253d     nter....-B%d=%d.
1a019994:	00000000 6425452d 0000000a 30434d2d     ....-E%d....-MC0
1a0199a4:	2c642520 252c6425 00000a64 31434d2d      %d,%d,%d...-MC1
1a0199b4:	2c642520 252c6425 00000a64 3a746547      %d,%d,%d...Get:
1a0199c4:	72617020 676e6973 72726520 000a726f      parsing error..
1a0199d4:	3025542d 252d6434 2d643230 64323025     -T%04d-%02d-%02d
1a0199e4:	32302520 30253a64 253a6432 0a643230      %02d:%02d:%02d.
1a0199f4:	00000000 6c616e41 6f20676f 75707475     ....Analog outpu
1a019a04:	68732074 646c756f 20656220 77746562     t should be betw
1a019a14:	206e6565 312d305b 5d333230 0000000a     een [0-1023]....
1a019a24:	0a46422d 00000000 2544422d 00000a63     -BF.....-BD%c...
1a019a34:	656c6553 64207463 75616665 6220746c     Select default b
1a019a44:	20736169 3a746573 72617020 676e6973     ias set: parsing
1a019a54:	72726520 000a726f 5354452d 0000000a      error..-ETS....
1a019a64:	4d54452d 00000a30 4d54452d 00000a2b     -ETM0...-ETM+...
1a019a74:	4954452d 0000000a 3a746553 72617020     -ETI....Set: par
1a019a84:	676e6973 72726520 000a726f 6f727245     sing error..Erro
1a019a94:	65732072 6e697474 6f6d2067 20726f74     r setting motor 
1a019aa4:	65657073 00000a64 6f727245 65732072     speed...Error se
1a019ab4:	6e697474 6f632067 6f72746e 72656c6c     tting controller
1a019ac4:	44495020 0000000a 6f727245 65732072      PID....Error se
1a019ad4:	6e697474 6f6d2067 20726f74 0a4d5750     tting motor PWM.
1a019ae4:	00000000 6f727245 65732072 6e697474     ....Error settin
1a019af4:	6f6d2067 20726f74 65646f6d 0000000a     g motor mode....
1a019b04:	6f727245 65732072 6e697474 6f6d2067     Error setting mo
1a019b14:	20726f74 74646977 00000a68 6f727245     tor width...Erro
1a019b24:	65732072 6e697474 57502067 7564204d     r setting PWM du
1a019b34:	79637974 0a656c63 00000000 6f727245     tycycle.....Erro
1a019b44:	65732072 6e697474 57502067 6977204d     r setting PWM wi
1a019b54:	0a687464 00000000 6f727245 65732072     dth.....Error se
1a019b64:	6e697474 57502067 7266204d 65757165     tting PWM freque
1a019b74:	0a79636e 00000000 6e616843 206c656e     ncy.....Channel 
1a019b84:	20746f6e 6f636572 7a696e67 000a6465     not recognized..
1a019b94:	0a2b542d 00000000 0a2d542d 00000000     -T+.....-T-.....
1a019ba4:	6e6f7257 6f662067 74616d72 0000000a     Wrong format....
1a019bb4:	20435452 20746f6e 62616e65 0a64656c     RTC not enabled.
1a019bc4:	00000000 74697753 6e696863 61422067     ....Switching Ba
1a019bd4:	52206475 20657461 25206f74 61422064     ud Rate to %d Ba
1a019be4:	0a216475 00000000 6c696146 74206465     ud!.....Failed t
1a019bf4:	7773206f 68637469 75614220 61522064     o switch Baud Ra
1a019c04:	74206574 6425206f 75614220 000a2164     te to %d Baud!..
1a019c14:	00000a3f 25206325 ffff0063 62616e55     ?...%c %c...Unab
1a019c24:	7420656c 6461206f 65662064 72757461     le to add featur
1a019c34:	61632065 61626c6c 61206b63 6f742073     e callback as to
1a019c44:	616d206f 7720796e 20657265 65726c61     o many were alre
1a019c54:	20796461 69676572 72657473 000a6465     ady registered..
1a019c64:	004c504d 257c7325 64257c73 74657220     MPL.%s|%s|%d ret
1a019c74:	696e7275 2520676e 00000a64 4d2f2e2e     urning %d...../M
1a019c84:	6f69746f 6972446e 2f726576 696c6c6d     otionDriver/mlli
1a019c94:	6d2f6574 632e6c70 ffffff00              te/mpl.c....

1a019ca0 <__func__.4633>:
1a019ca0:	5f766e69 74696e69 6c706d5f ffffff00     inv_init_mpl....

1a019cb0 <__func__.4641>:
1a019cb0:	5f766e69 72617473 706d5f74 ffff006c     inv_start_mpl...

1a019cc0 <reg>:
1a019cc0:	0c1a1975 1c1b236a 201f0000 3b437472     u...j#..... rtC;
1a019cd0:	3a393841 376c6b00 6d24066f 2625706e     A89:.kl7o.$mnp%&
1a019ce0:	2a292827 67646334 ffff0149              '()*4cdgI...

1a019cec <hw>:
1a019cec:	04000068 01540076 0100fdf7 ffff2666     h...v.T.....f&..

1a019cfc <test>:
1a019cfc:	00000083 00000800 18000100 00050032     ............2...
1a019d0c:	41200000 42d20000 3e0f5c29 3e99999a     .. A...B)\.>...>
1a019d1c:	3f733333 3e0f5c29 78352325 2325203a     33s?)\.>%#5x: %#
1a019d2c:	0a0d7835 00000000 706d6f43 20737361     5x......Compass 
1a019d3c:	20746f6e 6e756f66 000a2e64              not found...

1a019d48 <dmp_memory>:
1a019d48:	00700000 24000000 02000000 00000300     ..p....$........
1a019d58:	54006500 0000efff 0b0080fa 01008212     .e.T............
1a019d68:	c3300c03 e98c8c0e 0240d514 8e0f7113     ..0.......@..q..
1a019d78:	83f88338 83f80030 83f88e25 83f80030     8...0...%...0...
1a019d88:	ffffffff d6a9fe0f 00040024 a179821a     ........$.....y.
1a019d98:	3c000000 0000ffff 00001000 a26f8338     ...<........8.o.
1a019da8:	30033e00 00000040 09e3ca02 0000803e     .>.0@.......>...
1a019db8:	00000020 00000000 00000040 00000060      .......@...`...
1a019dc8:	00000c00 6e180c00 92060000 dfc0160a     .......n........
1a019dd8:	5602ffff 77d38cfd 96c4e1ff aabec5e0     ...V...w........
1a019de8:	00000000 2b0bffff 57160000 59030000     .......+...W...Y
1a019df8:	00000040 fa1d0000 1d6c0200 00000000     @.........l.....
1a019e08:	ebdfff3f b6b33e00 78220d00 3c2f0000     ?....>...."x../<
1a019e18:	00000000 b5421900 a2390000 65b30000     ......B...9....e
1a019e28:	c99f0ed9 344ccf1d 00000030 00000050     ......L40...P...
1a019e38:	e87ab63b 00006400 0000c800 00000000     ;.z..d..........
1a019e48:	00000010 92fa0010 5e220010 9f220d00     .........."^..".
1a019e58:	00000100 00003200 000046ff 0000d463     .....2...F..c...
1a019e68:	00000010 0000d604 0000cc04 0000cc04     ................
1a019e78:	72100000 40000000 00000000 00000000     ...r...@........
1a019e88:	02000600 07000500 00000000 00006400     .............d..
1a019e98:	00000000 05000000 64000500 00002000     ...........d. ..
	...
1a019eb0:	00400000 00030000 32000000 000098f8     ..@........2....
1a019ec0:	000065ff 00000f83 00fc9bff 00000000     .e..............
	...
1a019ef4:	00100000 00000040 06000000 6ab20000     ....@..........j
1a019f04:	00000200 83fb0100 00006800 00fcd900     .........h......
1a019f14:	83fff17c 00000000 00006500 e8036400     |........e...d..
1a019f24:	28006400 25000000 00000000 0000a016     .d.(...%........
1a019f34:	00100000 00100000 00002f00 f4010000     ........./......
1a019f44:	00100000 00002800 8145ffff 72faffff     .....(....E....r
	...
1a019f5c:	05004400 c6ba0500 a2784700 01000000     .D.......Gx.....
1a019f6c:	00000000 00060000 14000000 4d250000     ..............%M
1a019f7c:	6d702f00 ae050000 d0020c00 00000000     ./pm............
	...
1a019f98:	00001b00 00000000 00000000 00000000     ................
1a019fa8:	00006400 00000800 00000000 00000000     .d..............
	...
1a01a008:	00001b00 00000000 00000000 0e000e00     ................
1a01a018:	c70a0000 00000400 32000000 9cffffff     ...........2....
1a01a028:	2b0b0000 02000000 01000000 64000000     ...+...........d
1a01a038:	0000e5ff 00000000 00000000 00000000     ................
1a01a048:	01000000 00000000 00000100 00000000     ................
1a01a058:	00800100 00800100 00800100 d3262400     .............$&.
	...
1a01a070:	10000600 3c009600 00000000 00000000     .......<........
	...
1a01a088:	684e0a0c 0977cfcd 59671650 82ce19c6     ..Nh..w.P.gY....
	...
1a01a0b0:	0084d717 00000003 00000000 00000000     ................
1a01a0c0:	9d8f93c7 191c1b1e 00000000 00000000     ................
	...
1a01a0e0:	85180302 00400000 03000000 03000000     ......@.........
	...
1a01a0f8:	00000040 00000000 00000000 00000000     @...............
	...
1a01a12c:	7edf7d67 552e9072 88e6f64c 00000000     g}.~r..UL.......
	...
1a01a148:	b8b4dcd8 abb9d8b0 b3faf8f3 9e8ebbb7     ................
1a01a158:	f532f1ae b8b4f11b f19780b0 dfdfdfa9     ..2.............
1a01a168:	dfdfdfaa cdc5aaf2 c90ca9c7 a9f1972c     ............,...
1a01a178:	66462689 a99989b2 b07d552d 96a88ab0     .&Ff....-U}.....
1a01a188:	f1765636 b2b4a3ba a8b8c080 83b21197     6Vv.............
1a01a198:	f0a3ba98 10440824 b9b21864 f18398b4     ....$.D.d.......
1a01a1a8:	7d5529a3 a3b1b5ba 00f09383 b2f55028     .)U}........(P..
1a01a1b8:	9383aab6 f17c5428 9382a3b9 daa2ba61     ....(T|.....a...
1a01a1c8:	81dbdfde f5aeb99a f1706860 dfa2bada     ........`hp.....
1a01a1d8:	faa2bad9 9282a3b9 a2ba31db f8a2bad9     .........1......
1a01a1e8:	d0a485df 83adbbc1 b8c7c5c2 dfdfdfa2     ................
1a01a1f8:	dfdfa0ba f1d8d8df 8db3aab8 350d98b4     ...............5
1a01a208:	bab6b25d 19968caf 0ea79f8f 9ab41e16     ]...............
1a01a218:	2c87aab8 a4ba7c54 91b68ab0 b2765632     ...,T|......2Vv.
1a01a228:	c8a49484 b8d8cd08 99f1b0b4 552da882     ..............-U
1a01a238:	0ea8987d 2ca21e16 a4927c54 78502cf0     }......,T|...,Px
1a01a248:	98a884f1 d8fccdc4 fca8db0d bad9f32d     ............-...
1a01a258:	badaf8a6 bad8dea6 9686b6b2 c8f3d0a6     ................
1a01a268:	c8a6da41 b4b0d8f8 92a882b8 88542cf5     A............,T.
1a01a278:	d935f198 f1d818f4 f9f8d0a2 c7d984a8     ..5.............
1a01a288:	83f8f8df 69dfdac5 d8c183df f11401f4     .......i........
1a01a298:	a84e82a8 d111f384 92d9f582 f1889728     ..N.........(...
1a01a2a8:	1c1cf409 f3a884d8 d9d1f9c0 29f18297     ...............)
1a01a2b8:	f3d80df4 d9d1f9f9 03c2f482 1adfded8     ................
1a01a2c8:	faa2f1d8 9884a8f9 f8dfc7d9 c783f8f8     ................
1a01a2d8:	df69dfda d8c383f8 f11401f4 2e82a898     ..i.............
1a01a2e8:	11f384a8 d9f582d1 88975092 1cf409f1     .........P......
1a01a2f8:	f3a884d8 d1f9f8c0 f18297d9 d80df449     ............I...
1a01a308:	d1f9f9f3 c4f482d9 dfded803 88adf1d8     ................
1a01a318:	09a8cc98 9282d9f9 f17cf5a8 94cf3a88     ..........|..:..
1a01a328:	db986e4a adda3169 d8f9def2 f2a89587     Jn..i1..........
1a01a338:	a5dad121 d917f4f9 d08eaef1 82aec3c0     !...............
1a01a348:	a8c384c6 a5c89585 f1c0f288 f10e01f4     ................
1a01a358:	c6a89e8e 54f5563e f47288f1 98f11501     ....>V.T..r.....
1a01a368:	f56e8545 88049e8e 5a9842f1 88069e8e     E.n......B.Z....
1a01a378:	1c01f469 111e98f1 04f5d008 02971ef1     i...............
1a01a388:	25369802 85d9f9db dac1f3a5 dff3a585     ..6%............
1a01a398:	a89585d8 a5da09f3 9282d8fa f178f5a8     ..............x.
1a01a3a8:	9f841a88 21988826 f31df4da 399f87d8     ....&..!.......9
1a01a3b8:	dfd9afd1 f4f9fbdf fad8f30c f9daf8d0     ................
1a01a3c8:	d9dfd0f9 0bf4d8f9 9f87f3d8 d9afd139     ............9...
1a01a3d8:	1df4dfdf fcfad8f3 f9f969a8 dedad0af     .........i......
1a01a3e8:	8ff8d9fa ccf1a89f 45db98f3 d0dfafd9     ...........E....
1a01a3f8:	8ff1d8f8 f3caa89f afda0988 d8f8cb8f     ................
1a01a408:	8d97adf2 dfa5d90c f3a6baf9 f212f4fa     ................
1a01a418:	d10d95d8 f3a6bad9 f2a5dafa f3a6bac1     ................
1a01a428:	baf1d8df 9686b6b2 f3cad0a6 cba6da49     ............I...
1a01a438:	b4b0d8f8 84add8b8 f1dfc0f2 a8c3cb8f     ................
1a01a448:	9686b6b2 c3cbc1c8 88b4b0f3 db21a898     ..............!.
1a01a458:	719d8d71 d9219585 d8faf2ad 28a89785     q..q..!........(
1a01a468:	d808f4d9 da298df2 f2d905f4 f2c2a485     ......).........
1a01a478:	948da8d8 f4d9d101 87d8f211 0af4d821     ............!...
1a01a488:	9884f2d8 d101c8a8 d811f4d9 bbc8a4f3     ................
1a01a498:	def2d0af f8f8f8f8 f8f8f8f8 f6b8f1d8     ................
1a01a4a8:	8ab0b9b5 3cdea395 d8f8d9a3 f8d9a35c     .......<....\...
1a01a4b8:	d9a37cd8 f9f8d8f8 dfd9a5d1 b1d8fada     .|..............
1a01a4c8:	d9f73085 30f8d8de d8dedaad 998cb4f2     .0.....0........
1a01a4d8:	7d552da3 dfdf83a0 a091b5df fbd929f6     .-U}.........)..
1a01a4e8:	29fca0d8 a0d8fad9 f8d951d0 d951fcd8     ...).....Q....Q.
1a01a4f8:	d979d8f9 d0a0d8fb fad979fc f9f9a1d8     ..y......y......
1a01a508:	a0f9f9f9 dfdfdfda f8f8a1d8 acf8f8f8     ................
1a01a518:	deadf8de 2cac9383 a8f17c54 f6dfdfdf     .......,T|......
1a01a528:	a0da2c9d dbfad9df a8d8f82d d0a0da50     .,......-...P...
1a01a538:	f8d0d9de 55dbf8f8 78a8d8f8 dfd0a0da     .......U...x....
1a01a548:	f8fad0d9 dbf8f8f8 9cd8f87d 30f58ca8     ........}......0
1a01a558:	d0d938db d0a0dfde a8d8dfde d958db48     .8..........H.X.
1a01a568:	a0ded0df d8ded0df 70db68a8 a0dfdfd9     .........h.p....
1a01a578:	f1d8dfdf 2c9088a8 a8987c54 d1385cd0     .......,T|...\8.
1a01a588:	8caef2da b0d8f9df c1c1a887 c6a888b1     ................
1a01a598:	36daf9f9 daf9a8d8 f9a8d836 a8d836da     ...6....6....6..
1a01a5a8:	d836daf9 36daf9a8 9d8df7d8 da18f8ad     ..6....6........
1a01a5b8:	d8dfaef2 30faadf7 f9dea4d9 deaef2d8     .......0........
1a01a5c8:	a783f9fa c7c5c3d9 a79b88f1 def7ad7a     ............z...
1a01a5d8:	84f8a4df 97a70894 f2ae00f3 88a41998     ................
1a01a5e8:	8894a3c6 f2df32f6 09db9383 dfaaf2d9     .....2..........
1a01a5f8:	f8aed8d8 f3dad1f9 f1a7dea4 d87a9b88     ..............z.
1a01a608:	ae9484f3 aadaf919 a8d8dff1 c5c3c081     ................
1a01a618:	8392a3c7 dead28f6 a3d8f8d9 f8d9ad50     .....(......P...
1a01a628:	ad78a3d8 f8d8f8d9 daa1d1f9 c7c5c3de     ..x.............
1a01a638:	9481a1d8 b0f218f8 c5c3ac89 b8d8f1c7     ................
1a01a648:	8697b0b4 069b31a8 97ab0799 f09b8828     .....1......(...
1a01a658:	4014200c f0b8b4b0 289a8aa8 9bb77850     . .@.......(Px..
1a01a668:	795129a8 44597024 48643869 abbbf131     .)Qy$pYDi8dH1...
1a01a678:	542c0088 8bb3f07c 2804a8b8 b0f17850     ..,T|......(Px..
1a01a688:	2697b488 bb9859a8 028bb3ab b0664626     ...&.Y......&Ff.
1a01a698:	9c8af0b8 795129a8 7951298b 5970248a     .....)Qy.)Qy.$pY
1a01a6a8:	7158208b 3869448a 6840398b 3148648a     . Xq.Di8.9@h.dH1
1a01a6b8:	6049308b 00acf188 f07c542c 2804a88c     .0I`....,T|....(
1a01a6c8:	88f17850 59a82697 028cac98 f0664626     Px...&.Y....&Ff.
1a01a6d8:	29a89c89 70247951 38694459 a9314864     ...)Qy$pYDi8dH1.
1a01a6e8:	59200988 3811ab70 19a86940 8c604831     .. Yp..8@i..1H`.
1a01a6f8:	5c413ca8 f1007c20 86199887 7e766ea8     .<A\ |.......nv~
1a01a708:	2d8899a9 b1d87d55 dfa3b9b5 d0aedfdf     ...-U}..........
1a01a718:	ded0aadf f9f8abf2 c487b0d9 dfdff1aa     ................
1a01a728:	dfdfafbb f1b1d8b9 608e97a3 f284b0df     ...........`....
1a01a738:	d9f9f8c8 8593d8de 83b14af1 83b508a3     .........J......
1a01a748:	b710089a f1d8109f b0aebab0 b6b2c28a     ................
1a01a758:	fbf19e8e d81df4d9 f10cd9f9 adf8f8d8     ................
1a01a768:	fbaed961 f10cf4d8 adf8f8d8 fbaed919     a...............
1a01a778:	16f4d8df adf8d8f1 f4d9618d 9cf5acf4     .........a......
1a01a788:	2bdf8d9c faaeb6ba d80bf4f8 f8d0aef1     ...+............
1a01a798:	aeda51ad d8f1f8fa a3b6b1b9 b9089c83     .Q..............
1a01a7a8:	b59a83b1 30fdc0aa 109fb783 f2938bb5     .......0........
1a01a7b8:	abd10202 f1d8deda abba80b0 84b2c3c0     ................
1a01a7c8:	b1d8c3c1 a38bf3b9 b409b691 b0deabd9     ................
1a01a7d8:	a3b99c87 8bb3f1dd 8b8b8b8b a3a387b0     ................
1a01a7e8:	8bb2a3a3 a3f29bb6 a3a3a3a3 a3a3a3a3     ................
1a01a7f8:	87b0f1a3 f3a39ab5 dca3a39b b9dfacba     ................
1a01a808:	a3a3a3a3 a3a3a3a3 a3a3a3a3 a3a3a3a3     ................
1a01a818:	bbd8d8d8 aaf1b7b3 d9ffdaf9 28aa9a80     ...............(
1a01a828:	a79880b4 8797b720 f08866a8 90f15179     .... ....f..yQ..
1a01a838:	a70c872c 93629781 607171f0 29019485     ,.....b..qq`...)
1a01a848:	a5907951 6c4c28f1 18950c87 83a37885     Qy...(Ll.....x..
1a01a858:	6c4c2890 f3d86c88 f20082a2 1992a810     .(Ll.l..........
1a01a868:	d9f2a280 88f1d826 48d94da8 39a896d8     ....&....M.H...9
1a01a878:	d83cd980 39a88095 d99886a6 a787da2c     ..<....9....,...
1a01a888:	89a8d82c 80a91995 a8d838d9 80a93989     ,........8...9..
1a01a898:	a8d83cda 9039a82e a8d80cd9 d9983195     .<....9......1..
1a01a8a8:	09a8d80c 01d8ffd9 95d8ffda 26daa939     ............9..&
1a01a8b8:	a890d8ff a899890d 21988010 89d82eda     ...........!....
1a01a8c8:	8031a899 a8d82eda 80319686 a8d82eda     ..1.......1.....
1a01a8d8:	da803187 82a8d82e 8041f392 d82ed9f1     .1........A.....
1a01a8e8:	19f382a8 2ed9f180 f3ac82d8 2280a2c0     ..............."
1a01a8f8:	a72ea6f1 9822a92e acda29a8 a2d8ffde     ......"..)......
1a01a908:	a9f12af2 a892822e a68031f2 00d9f196     .*.......1......
1a01a918:	0c9c8cac d0deac30 8cd8ffde 10d0ac9c     ....0...........
1a01a928:	9280deac 824cf2a2 f2caf1a8 8896f135     ......L.....5...
1a01a938:	d800d9a6 fffffff1 006ccd4c 002cc90c     ........L.l...,.
1a01a948:	00765636 00664626 c4abf2fe dfdff1aa     6Vv.&Ff.........
1a01a958:	dfdfafbb 8db3aab8 350d98b4 0000005d     ...........5]...
1a01a968:	aaaaaab8 c5c388b0 000000c7 f3b9b1d8     ................
1a01a978:	b691a38b 00d9b409 f3b9b1da b691a38b     ................
1a01a988:	ffdab4da 4c504d65 312e3520 ffffff00     ....eMPL 5.1....

1a01a998 <periph_to_base>:
1a01a998:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a01a9a8:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a01a9b8:	000100e0 01000100 01200003 00060120     .......... . ...
1a01a9c8:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a01a9d8:	01820013 00120182 01a201a2 01c20011     ................
1a01a9e8:	001001c2 01e201e2 0202000f 000e0202     ................
1a01a9f8:	02220222 0223000d 001c0223 08040201     "."...#.#.......
1a01aa08:	0f0f0f03 ffff00ff                       ........

1a01aa10 <InitClkStates>:
1a01aa10:	00010100 00010909 0001090a 01010701     ................
1a01aa20:	00010902 00010906 0101090c 0001090d     ................
1a01aa30:	0001090e 0001090f 00010910 00010911     ................
1a01aa40:	00010912 00010913 00011114 00011119     ................
1a01aa50:	0001111a 0001111b                       ........

1a01aa58 <_ctype_>:
1a01aa58:	20202000 20202020 28282020 20282828     .         ((((( 
1a01aa68:	20202020 20202020 20202020 20202020                     
1a01aa78:	10108820 10101010 10101010 10101010      ...............
1a01aa88:	04040410 04040404 10040404 10101010     ................
1a01aa98:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a01aaa8:	01010101 01010101 01010101 10101010     ................
1a01aab8:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a01aac8:	02020202 02020202 02020202 10101010     ................
1a01aad8:	00000020 00000000 00000000 00000000      ...............
	...
1a01ab58:	ffffff00 ffffffff                       ........

1a01ab60 <atanlo>:
1a01ab60:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
1a01ab70:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

1a01ab80 <atanhi>:
1a01ab80:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
1a01ab90:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
1a01aba0:	736f6361 ffffff00 00676f6c 74727173     acos....log.sqrt
1a01abb0:	ffffff00 736f6361 ffff0066 74727173     ....acosf...sqrt
1a01abc0:	ffff0066                                f...

1a01abc4 <npio2_hw>:
1a01abc4:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
1a01abd4:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
1a01abe4:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
1a01abf4:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
1a01ac04:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
1a01ac14:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
1a01ac24:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
1a01ac34:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

1a01ac44 <two_over_pi>:
1a01ac44:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
1a01ac54:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
1a01ac64:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
1a01ac74:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
1a01ac84:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
1a01ac94:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
1a01aca4:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
1a01acb4:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
1a01acc4:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
1a01acd4:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
1a01ace4:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
1a01acf4:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
1a01ad04:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
1a01ad14:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
1a01ad24:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
1a01ad34:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
1a01ad44:	0060e27b 00c08c6b                       {.`.k...

1a01ad4c <npio2_hw>:
1a01ad4c:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
1a01ad5c:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
1a01ad6c:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
1a01ad7c:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
1a01ad8c:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
1a01ad9c:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
1a01adac:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
1a01adbc:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

1a01adcc <two_over_pi>:
1a01adcc:	000000a2 000000f9 00000083 0000006e     ............n...
1a01addc:	0000004e 00000044 00000015 00000029     N...D.......)...
1a01adec:	000000fc 00000027 00000057 000000d1     ....'...W.......
1a01adfc:	000000f5 00000034 000000dd 000000c0     ....4...........
1a01ae0c:	000000db 00000062 00000095 00000099     ....b...........
1a01ae1c:	0000003c 00000043 00000090 00000041     <...C.......A...
1a01ae2c:	000000fe 00000051 00000063 000000ab     ....Q...c.......
1a01ae3c:	000000de 000000bb 000000c5 00000061     ............a...
1a01ae4c:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
1a01ae5c:	00000042 0000004d 000000d2 000000e0     B...M...........
1a01ae6c:	00000006 00000049 0000002e 000000ea     ....I...........
1a01ae7c:	00000009 000000d1 00000092 0000001c     ................
1a01ae8c:	000000fe 0000001d 000000eb 0000001c     ................
1a01ae9c:	000000b1 00000029 000000a7 0000003e     ....).......>...
1a01aeac:	000000e8 00000082 00000035 000000f5     ........5.......
1a01aebc:	0000002e 000000bb 00000044 00000084     ........D.......
1a01aecc:	000000e9 0000009c 00000070 00000026     ........p...&...
1a01aedc:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
1a01aeec:	00000039 00000091 000000d6 00000039     9...........9...
1a01aefc:	00000083 00000053 00000039 000000f4     ....S...9.......
1a01af0c:	0000009c 00000084 0000005f 0000008b     ........_.......
1a01af1c:	000000bd 000000f9 00000028 0000003b     ........(...;...
1a01af2c:	0000001f 000000f8 00000097 000000ff     ................
1a01af3c:	000000de 00000005 00000098 0000000f     ................
1a01af4c:	000000ef 0000002f 00000011 0000008b     ..../...........
1a01af5c:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
1a01af6c:	0000006d 00000036 0000007e 000000cf     m...6...~.......
1a01af7c:	00000027 000000cb 00000009 000000b7     '...............
1a01af8c:	0000004f 00000046 0000003f 00000066     O...F...?...f...
1a01af9c:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
1a01afac:	00000075 00000027 000000ba 000000c7     u...'...........
1a01afbc:	000000eb 000000e5 000000f1 0000007b     ............{...
1a01afcc:	0000003d 00000007 00000039 000000f7     =.......9.......
1a01afdc:	0000008a 00000052 00000092 000000ea     ....R...........
1a01afec:	0000006b 000000fb 0000005f 000000b1     k......._.......
1a01affc:	0000001f 0000008d 0000005d 00000008     ........].......
1a01b00c:	00000056 00000003 00000030 00000046     V.......0...F...
1a01b01c:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
1a01b02c:	000000f0 000000cf 000000bc 00000020     ............ ...
1a01b03c:	0000009a 000000f4 00000036 0000001d     ........6.......
1a01b04c:	000000a9 000000e3 00000091 00000061     ............a...
1a01b05c:	0000005e 000000e6 0000001b 00000008     ^...............
1a01b06c:	00000065 00000099 00000085 0000005f     e..........._...
1a01b07c:	00000014 000000a0 00000068 00000040     ........h...@...
1a01b08c:	0000008d 000000ff 000000d8 00000080     ................
1a01b09c:	0000004d 00000073 00000027 00000031     M...s...'...1...
1a01b0ac:	00000006 00000006 00000015 00000056     ............V...
1a01b0bc:	000000ca 00000073 000000a8 000000c9     ....s...........
1a01b0cc:	00000060 000000e2 0000007b 000000c0     `.......{.......
1a01b0dc:	0000008c 0000006b                       ....k...

1a01b0e4 <init_jk>:
1a01b0e4:	00000002 00000003 00000004 00000006     ................
1a01b0f4:	ffffffff                                ....

1a01b0f8 <PIo2>:
1a01b0f8:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
1a01b108:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
1a01b118:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
1a01b128:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

1a01b138 <init_jk>:
1a01b138:	00000004 00000007 00000009              ............

1a01b144 <PIo2>:
1a01b144:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
1a01b154:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
1a01b164:	1fc40000 1bc60000 17440000              ..........D.

1a01b170 <atanlo>:
1a01b170:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

1a01b180 <atanhi>:
1a01b180:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?
1a01b190:	00000043                                C...
