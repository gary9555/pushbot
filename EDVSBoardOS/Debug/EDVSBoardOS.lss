
EDVSBoardOS.axf:     file format elf32-littlearm


Disassembly of section .text.core_m0app_text:

1a040000 <__core_m0app_START__>:
1a040000:	20008400 	.word	0x20008400
1a040004:	1a040219 	.word	0x1a040219
1a040008:	1a0401e9 	.word	0x1a0401e9
1a04000c:	1a0401f1 	.word	0x1a0401f1
	...
1a04002c:	1a0401f9 	.word	0x1a0401f9
	...
1a040038:	1a040201 	.word	0x1a040201
1a04003c:	1a040209 	.word	0x1a040209
1a040040:	1a040211 	.word	0x1a040211
1a040044:	1a040211 	.word	0x1a040211
1a040048:	1a040211 	.word	0x1a040211
1a04004c:	00000000 	.word	0x00000000
1a040050:	1a040211 	.word	0x1a040211
1a040054:	1a040211 	.word	0x1a040211
1a040058:	1a040211 	.word	0x1a040211
1a04005c:	1a040211 	.word	0x1a040211
1a040060:	1a040211 	.word	0x1a040211
1a040064:	1a040211 	.word	0x1a040211
1a040068:	1a040211 	.word	0x1a040211
1a04006c:	1a040211 	.word	0x1a040211
1a040070:	1a040211 	.word	0x1a040211
1a040074:	1a040211 	.word	0x1a040211
1a040078:	1a040211 	.word	0x1a040211
1a04007c:	1a040211 	.word	0x1a040211
1a040080:	1a040211 	.word	0x1a040211
1a040084:	1a040211 	.word	0x1a040211
1a040088:	1a040211 	.word	0x1a040211
1a04008c:	1a040211 	.word	0x1a040211
1a040090:	1a040211 	.word	0x1a040211
1a040094:	1a040211 	.word	0x1a040211
1a040098:	1a040211 	.word	0x1a040211
1a04009c:	1a040211 	.word	0x1a040211
1a0400a0:	1a040211 	.word	0x1a040211
1a0400a4:	1a040211 	.word	0x1a040211
1a0400a8:	1a040211 	.word	0x1a040211
1a0400ac:	1a040211 	.word	0x1a040211
1a0400b0:	1a040211 	.word	0x1a040211
1a0400b4:	1a040211 	.word	0x1a040211
1a0400b8:	1a040211 	.word	0x1a040211
1a0400bc:	1a040211 	.word	0x1a040211
1a0400c0:	1a040490 	.word	0x1a040490
1a0400c4:	20008000 	.word	0x20008000
1a0400c8:	00000270 	.word	0x00000270
1a0400cc:	1a040490 	.word	0x1a040490
1a0400d0:	10086014 	.word	0x10086014
1a0400d4:	00000000 	.word	0x00000000
1a0400d8:	1a040490 	.word	0x1a040490
1a0400dc:	10002014 	.word	0x10002014
1a0400e0:	00000000 	.word	0x00000000
1a0400e4:	1a040490 	.word	0x1a040490
1a0400e8:	10080000 	.word	0x10080000
1a0400ec:	00000000 	.word	0x00000000
1a0400f0:	1a040490 	.word	0x1a040490
1a0400f4:	10000000 	.word	0x10000000
1a0400f8:	00000000 	.word	0x00000000
1a0400fc:	1a040490 	.word	0x1a040490
1a040100:	10086010 	.word	0x10086010
1a040104:	00000000 	.word	0x00000000
1a040108:	1a040490 	.word	0x1a040490
1a04010c:	20000000 	.word	0x20000000
1a040110:	00000000 	.word	0x00000000
1a040114:	1a040490 	.word	0x1a040490
1a040118:	20008400 	.word	0x20008400
1a04011c:	00000000 	.word	0x00000000
1a040120:	1a040490 	.word	0x1a040490
1a040124:	2000c000 	.word	0x2000c000
1a040128:	00000000 	.word	0x00000000
1a04012c:	20008270 	.word	0x20008270
1a040130:	00000000 	.word	0x00000000
1a040134:	10086014 	.word	0x10086014
1a040138:	00000000 	.word	0x00000000
1a04013c:	10002014 	.word	0x10002014
1a040140:	00000000 	.word	0x00000000
1a040144:	10080000 	.word	0x10080000
1a040148:	00000000 	.word	0x00000000
1a04014c:	10000000 	.word	0x10000000
1a040150:	00000000 	.word	0x00000000
1a040154:	10086010 	.word	0x10086010
1a040158:	00000000 	.word	0x00000000
1a04015c:	20000000 	.word	0x20000000
1a040160:	00000000 	.word	0x00000000
1a040164:	20008400 	.word	0x20008400
1a040168:	00000000 	.word	0x00000000
1a04016c:	2000c000 	.word	0x2000c000
1a040170:	00000000 	.word	0x00000000
1a040174:	b088b580 	.word	0xb088b580
1a040178:	60f8af00 	.word	0x60f8af00
1a04017c:	607a60b9 	.word	0x607a60b9
1a040180:	61fb68bb 	.word	0x61fb68bb
1a040184:	61bb68fb 	.word	0x61bb68fb
1a040188:	617b2300 	.word	0x617b2300
1a04018c:	69fbe00a 	.word	0x69fbe00a
1a040190:	61fa1d1a 	.word	0x61fa1d1a
1a040194:	1d1169ba 	.word	0x1d1169ba
1a040198:	681261b9 	.word	0x681261b9
1a04019c:	697b601a 	.word	0x697b601a
1a0401a0:	617b3304 	.word	0x617b3304
1a0401a4:	687b697a 	.word	0x687b697a
1a0401a8:	d3f0429a 	.word	0xd3f0429a
1a0401ac:	46bd46c0 	.word	0x46bd46c0
1a0401b0:	bd80b008 	.word	0xbd80b008
1a0401b4:	b084b580 	.word	0xb084b580
1a0401b8:	6078af00 	.word	0x6078af00
1a0401bc:	687b6039 	.word	0x687b6039
1a0401c0:	230060fb 	.word	0x230060fb
1a0401c4:	e00760bb 	.word	0xe00760bb
1a0401c8:	1d1a68fb 	.word	0x1d1a68fb
1a0401cc:	220060fa 	.word	0x220060fa
1a0401d0:	68bb601a 	.word	0x68bb601a
1a0401d4:	60bb3304 	.word	0x60bb3304
1a0401d8:	683b68ba 	.word	0x683b68ba
1a0401dc:	d3f3429a 	.word	0xd3f3429a
1a0401e0:	46bd46c0 	.word	0x46bd46c0
1a0401e4:	bd80b004 	.word	0xbd80b004
1a0401e8:	af00b580 	.word	0xaf00b580
1a0401ec:	46c0e7fe 	.word	0x46c0e7fe
1a0401f0:	af00b580 	.word	0xaf00b580
1a0401f4:	46c0e7fe 	.word	0x46c0e7fe
1a0401f8:	af00b580 	.word	0xaf00b580
1a0401fc:	46c0e7fe 	.word	0x46c0e7fe
1a040200:	af00b580 	.word	0xaf00b580
1a040204:	46c0e7fe 	.word	0x46c0e7fe
1a040208:	af00b580 	.word	0xaf00b580
1a04020c:	46c0e7fe 	.word	0x46c0e7fe
1a040210:	af00b580 	.word	0xaf00b580
1a040214:	46c0e7fe 	.word	0x46c0e7fe
1a040218:	b086b580 	.word	0xb086b580
1a04021c:	4b1caf00 	.word	0x4b1caf00
1a040220:	4a1c613b 	.word	0x4a1c613b
1a040224:	601a693b 	.word	0x601a693b
1a040228:	617b4b1b 	.word	0x617b4b1b
1a04022c:	697be014 	.word	0x697be014
1a040230:	617a1d1a 	.word	0x617a1d1a
1a040234:	60fb681b 	.word	0x60fb681b
1a040238:	1d1a697b 	.word	0x1d1a697b
1a04023c:	681b617a 	.word	0x681b617a
1a040240:	697b60bb 	.word	0x697b60bb
1a040244:	617a1d1a 	.word	0x617a1d1a
1a040248:	607b681b 	.word	0x607b681b
1a04024c:	68b9687a 	.word	0x68b9687a
1a040250:	001868fb 	.word	0x001868fb
1a040254:	ff8ef7ff 	.word	0xff8ef7ff
1a040258:	4b10697a 	.word	0x4b10697a
1a04025c:	d3e6429a 	.word	0xd3e6429a
1a040260:	697be00f 	.word	0x697be00f
1a040264:	617a1d1a 	.word	0x617a1d1a
1a040268:	60bb681b 	.word	0x60bb681b
1a04026c:	1d1a697b 	.word	0x1d1a697b
1a040270:	681b617a 	.word	0x681b617a
1a040274:	687a607b 	.word	0x687a607b
1a040278:	001168bb 	.word	0x001168bb
1a04027c:	f7ff0018 	.word	0xf7ff0018
1a040280:	697aff99 	.word	0x697aff99
1a040284:	429a4b06 	.word	0x429a4b06
1a040288:	f000d3eb 	.word	0xf000d3eb
1a04028c:	e7fef8f9 	.word	0xe7fef8f9
1a040290:	40043404 	.word	0x40043404
1a040294:	1a040000 	.word	0x1a040000
1a040298:	1a0400c0 	.word	0x1a0400c0
1a04029c:	1a04012c 	.word	0x1a04012c
1a0402a0:	1a040174 	.word	0x1a040174
1a0402a4:	b084b580 	.word	0xb084b580
1a0402a8:	60f8af00 	.word	0x60f8af00
1a0402ac:	1dfb60b9 	.word	0x1dfb60b9
1a0402b0:	1dfb701a 	.word	0x1dfb701a
1a0402b4:	68f9781b 	.word	0x68f9781b
1a0402b8:	015268ba 	.word	0x015268ba
1a0402bc:	5cd3188a 	.word	0x5cd3188a
1a0402c0:	1e5ab2db 	.word	0x1e5ab2db
1a0402c4:	b2db4193 	.word	0xb2db4193
1a0402c8:	46bd0018 	.word	0x46bd0018
1a0402cc:	bd80b004 	.word	0xbd80b004
1a0402d0:	b082b580 	.word	0xb082b580
1a0402d4:	6078af00 	.word	0x6078af00
1a0402d8:	1cfb000a 	.word	0x1cfb000a
1a0402dc:	1cfb701a 	.word	0x1cfb701a
1a0402e0:	687b781a 	.word	0x687b781a
1a0402e4:	01092184 	.word	0x01092184
1a0402e8:	4462468c 	.word	0x4462468c
1a0402ec:	58d30092 	.word	0x58d30092
1a0402f0:	46bd0018 	.word	0x46bd0018
1a0402f4:	bd80b002 	.word	0xbd80b002
1a0402f8:	b082b580 	.word	0xb082b580
1a0402fc:	6078af00 	.word	0x6078af00
1a040300:	00110008 	.word	0x00110008
1a040304:	1c021cfb 	.word	0x1c021cfb
1a040308:	1cbb701a 	.word	0x1cbb701a
1a04030c:	701a1c0a 	.word	0x701a1c0a
1a040310:	781a1cfb 	.word	0x781a1cfb
1a040314:	781b1cbb 	.word	0x781b1cbb
1a040318:	40992101 	.word	0x40992101
1a04031c:	0019000b 	.word	0x0019000b
1a040320:	2088687b 	.word	0x2088687b
1a040324:	46840100 	.word	0x46840100
1a040328:	00924462 	.word	0x00924462
1a04032c:	46c050d1 	.word	0x46c050d1
1a040330:	b00246bd 	.word	0xb00246bd
1a040334:	46c0bd80 	.word	0x46c0bd80
1a040338:	b082b580 	.word	0xb082b580
1a04033c:	6078af00 	.word	0x6078af00
1a040340:	00110008 	.word	0x00110008
1a040344:	1c021cfb 	.word	0x1c021cfb
1a040348:	1cbb701a 	.word	0x1cbb701a
1a04034c:	701a1c0a 	.word	0x701a1c0a
1a040350:	781a1cfb 	.word	0x781a1cfb
1a040354:	781b1cbb 	.word	0x781b1cbb
1a040358:	40992101 	.word	0x40992101
1a04035c:	0019000b 	.word	0x0019000b
1a040360:	208a687b 	.word	0x208a687b
1a040364:	46840100 	.word	0x46840100
1a040368:	00924462 	.word	0x00924462
1a04036c:	46c050d1 	.word	0x46c050d1
1a040370:	b00246bd 	.word	0xb00246bd
1a040374:	46c0bd80 	.word	0x46c0bd80
1a040378:	b082b580 	.word	0xb082b580
1a04037c:	6078af00 	.word	0x6078af00
1a040380:	1cfb000a 	.word	0x1cfb000a
1a040384:	1cfb701a 	.word	0x1cfb701a
1a040388:	b25b781b 	.word	0xb25b781b
1a04038c:	330a687a 	.word	0x330a687a
1a040390:	18d3009b 	.word	0x18d3009b
1a040394:	681b3304 	.word	0x681b3304
1a040398:	46bd0018 	.word	0x46bd0018
1a04039c:	bd80b002 	.word	0xbd80b002
1a0403a0:	b082b580 	.word	0xb082b580
1a0403a4:	6078af00 	.word	0x6078af00
1a0403a8:	1cfb000a 	.word	0x1cfb000a
1a0403ac:	687b701a 	.word	0x687b701a
1a0403b0:	589a4a0b 	.word	0x589a4a0b
1a0403b4:	23806879 	.word	0x23806879
1a0403b8:	188a015b 	.word	0x188a015b
1a0403bc:	1cfa18d3 	.word	0x1cfa18d3
1a0403c0:	701a7812 	.word	0x701a7812
1a0403c4:	4a06687b 	.word	0x4a06687b
1a0403c8:	3301589b 	.word	0x3301589b
1a0403cc:	0d1a051b 	.word	0x0d1a051b
1a0403d0:	4903687b 	.word	0x4903687b
1a0403d4:	46c0505a 	.word	0x46c0505a
1a0403d8:	b00246bd 	.word	0xb00246bd
1a0403dc:	46c0bd80 	.word	0x46c0bd80
1a0403e0:	00002008 	.word	0x00002008
1a0403e4:	b084b580 	.word	0xb084b580
1a0403e8:	6078af00 	.word	0x6078af00
1a0403ec:	4a0c687b 	.word	0x4a0c687b
1a0403f0:	687a589b 	.word	0x687a589b
1a0403f4:	b2da5cd3 	.word	0xb2da5cd3
1a0403f8:	18fb230f 	.word	0x18fb230f
1a0403fc:	687b701a 	.word	0x687b701a
1a040400:	589b4a07 	.word	0x589b4a07
1a040404:	051b3301 	.word	0x051b3301
1a040408:	687b0d1a 	.word	0x687b0d1a
1a04040c:	505a4904 	.word	0x505a4904
1a040410:	18fb230f 	.word	0x18fb230f
1a040414:	b2db781b 	.word	0xb2db781b
1a040418:	46bd0018 	.word	0x46bd0018
1a04041c:	bd80b004 	.word	0xbd80b004
1a040420:	00002004 	.word	0x00002004
1a040424:	b082b580 	.word	0xb082b580
1a040428:	6078af00 	.word	0x6078af00
1a04042c:	4a07687b 	.word	0x4a07687b
1a040430:	6879589a 	.word	0x6879589a
1a040434:	019b2380 	.word	0x019b2380
1a040438:	1ad358cb 	.word	0x1ad358cb
1a04043c:	41931e5a 	.word	0x41931e5a
1a040440:	0018b2db 	.word	0x0018b2db
1a040444:	b00246bd 	.word	0xb00246bd
1a040448:	46c0bd80 	.word	0x46c0bd80
1a04044c:	00002004 	.word	0x00002004
1a040450:	b082b580 	.word	0xb082b580
1a040454:	6078af00 	.word	0x6078af00
1a040458:	4a06687b 	.word	0x4a06687b
1a04045c:	687b589a 	.word	0x687b589a
1a040460:	585b4905 	.word	0x585b4905
1a040464:	3b011ad3 	.word	0x3b011ad3
1a040468:	0d1b051b 	.word	0x0d1b051b
1a04046c:	46bd0018 	.word	0x46bd0018
1a040470:	bd80b002 	.word	0xbd80b002
1a040474:	0000200c 	.word	0x0000200c
1a040478:	00002008 	.word	0x00002008
1a04047c:	ffffffff 	.word	0xffffffff
1a040480:	4802b401 	.word	0x4802b401
1a040484:	bc014684 	.word	0xbc014684
1a040488:	bf004760 	.word	0xbf004760
1a04048c:	20008001 	.word	0x20008001

Disassembly of section .text.core_m0app_data:

1a040490 <__start_data_core_m0app>:
1a040490:	b089b590 	.word	0xb089b590
1a040494:	4b68af00 	.word	0x4b68af00
1a040498:	601a2201 	.word	0x601a2201
1a04049c:	21014b67 	.word	0x21014b67
1a0404a0:	f0000018 	.word	0xf0000018
1a0404a4:	0003f8f5 	.word	0x0003f8f5
1a0404a8:	69fb61fb 	.word	0x69fb61fb
1a0404ac:	4b63617b 	.word	0x4b63617b
1a0404b0:	00182101 	.word	0x00182101
1a0404b4:	f8ecf000 	.word	0xf8ecf000
1a0404b8:	617b0003 	.word	0x617b0003
1a0404bc:	69fb697a 	.word	0x69fb697a
1a0404c0:	d04b429a 	.word	0xd04b429a
1a0404c4:	21034b5e 	.word	0x21034b5e
1a0404c8:	f0000018 	.word	0xf0000018
1a0404cc:	0003f8f9 	.word	0x0003f8f9
1a0404d0:	230eb29a 	.word	0x230eb29a
1a0404d4:	045218fb 	.word	0x045218fb
1a0404d8:	801a0c52 	.word	0x801a0c52
1a0404dc:	4a5a4b59 	.word	0x4a5a4b59
1a0404e0:	1c5a589b 	.word	0x1c5a589b
1a0404e4:	49584b57 	.word	0x49584b57
1a0404e8:	4b56505a 	.word	0x4b56505a
1a0404ec:	589b4a57 	.word	0x589b4a57
1a0404f0:	051b3301 	.word	0x051b3301
1a0404f4:	60bb0d1b 	.word	0x60bb0d1b
1a0404f8:	4a554b52 	.word	0x4a554b52
1a0404fc:	68bb589a 	.word	0x68bb589a
1a040500:	051b1ad3 	.word	0x051b1ad3
1a040504:	607b0d1b 	.word	0x607b0d1b
1a040508:	2b03687b 	.word	0x2b03687b
1a04050c:	e000dc10 	.word	0xe000dc10
1a040510:	4a4c46c0 	.word	0x4a4c46c0
1a040514:	01db23c0 	.word	0x01db23c0
1a040518:	2b0058d3 	.word	0x2b0058d3
1a04051c:	4b49d1f8 	.word	0x4b49d1f8
1a040520:	589b4a4b 	.word	0x589b4a4b
1a040524:	051b3301 	.word	0x051b3301
1a040528:	4b460d1a 	.word	0x4b460d1a
1a04052c:	505a4948 	.word	0x505a4948
1a040530:	68ba4b44 	.word	0x68ba4b44
1a040534:	01892180 	.word	0x01892180
1a040538:	4462468c 	.word	0x4462468c
1a04053c:	210e0052 	.word	0x210e0052
1a040540:	88091879 	.word	0x88091879
1a040544:	4b3f52d1 	.word	0x4b3f52d1
1a040548:	009268ba 	.word	0x009268ba
1a04054c:	50d16979 	.word	0x50d16979
1a040550:	493e4b3c 	.word	0x493e4b3c
1a040554:	505a68ba 	.word	0x505a68ba
1a040558:	61fb697b 	.word	0x61fb697b
1a04055c:	22084b38 	.word	0x22084b38
1a040560:	00182101 	.word	0x00182101
1a040564:	f8a4f000 	.word	0xf8a4f000
1a040568:	001a0003 	.word	0x001a0003
1a04056c:	40532301 	.word	0x40532301
1a040570:	2b00b2db 	.word	0x2b00b2db
1a040574:	4b37d01a 	.word	0x4b37d01a
1a040578:	2220695b 	.word	0x2220695b
1a04057c:	d0154013 	.word	0xd0154013
1a040580:	61bb230f 	.word	0x61bb230f
1a040584:	4c33e009 	.word	0x4c33e009
1a040588:	00184b33 	.word	0x00184b33
1a04058c:	f8b0f000 	.word	0xf8b0f000
1a040590:	60230003 	.word	0x60230003
1a040594:	3b0169bb 	.word	0x3b0169bb
1a040598:	4b2f61bb 	.word	0x4b2f61bb
1a04059c:	f0000018 	.word	0xf0000018
1a0405a0:	1e03f89f 	.word	0x1e03f89f
1a0405a4:	69bbd002 	.word	0x69bbd002
1a0405a8:	d1ec2b00 	.word	0xd1ec2b00
1a0405ac:	695b4b29 	.word	0x695b4b29
1a0405b0:	40132201 	.word	0x40132201
1a0405b4:	4b28d026 	.word	0x4b28d026
1a0405b8:	f0000018 	.word	0xf0000018
1a0405bc:	0003f859 	.word	0x0003f859
1a0405c0:	693b613b 	.word	0x693b613b
1a0405c4:	d01d2b00 	.word	0xd01d2b00
1a0405c8:	681b4b22 	.word	0x681b4b22
1a0405cc:	4b22b2da 	.word	0x4b22b2da
1a0405d0:	00180011 	.word	0x00180011
1a0405d4:	f87cf000 	.word	0xf87cf000
1a0405d8:	2b80693b 	.word	0x2b80693b
1a0405dc:	4b18d80c 	.word	0x4b18d80c
1a0405e0:	2100220a 	.word	0x2100220a
1a0405e4:	f0000018 	.word	0xf0000018
1a0405e8:	4b15f85b 	.word	0x4b15f85b
1a0405ec:	21002201 	.word	0x21002201
1a0405f0:	f0000018 	.word	0xf0000018
1a0405f4:	e005f845 	.word	0xe005f845
1a0405f8:	220a4b11 	.word	0x220a4b11
1a0405fc:	00182100 	.word	0x00182100
1a040600:	f83ef000 	.word	0xf83ef000
1a040604:	6bdb4b15 	.word	0x6bdb4b15
1a040608:	40132204 	.word	0x40132204
1a04060c:	4b13d002 	.word	0x4b13d002
1a040610:	63da4a13 	.word	0x63da4a13
1a040614:	6bdb4b13 	.word	0x6bdb4b13
1a040618:	40132204 	.word	0x40132204
1a04061c:	4b11d002 	.word	0x4b11d002
1a040620:	63da4a11 	.word	0x63da4a11
1a040624:	6bdb4b11 	.word	0x6bdb4b11
1a040628:	40132204 	.word	0x40132204
1a04062c:	e73ed100 	.word	0xe73ed100
1a040630:	4a0d4b0e 	.word	0x4a0d4b0e
1a040634:	e73a63da 	.word	0xe73a63da
1a040638:	10086010 	.word	0x10086010
1a04063c:	40085000 	.word	0x40085000
1a040640:	400f4000 	.word	0x400f4000
1a040644:	10080000 	.word	0x10080000
1a040648:	0000600c 	.word	0x0000600c
1a04064c:	00006004 	.word	0x00006004
1a040650:	00006008 	.word	0x00006008
1a040654:	40081000 	.word	0x40081000
1a040658:	10000000 	.word	0x10000000
1a04065c:	40084000 	.word	0x40084000
1a040660:	00000619 	.word	0x00000619
1a040664:	400c3000 	.word	0x400c3000
1a040668:	00000253 	.word	0x00000253
1a04066c:	400c4000 	.word	0x400c4000
1a040670:	4802b401 	.word	0x4802b401
1a040674:	bc014684 	.word	0xbc014684
1a040678:	bf004760 	.word	0xbf004760
1a04067c:	1a040451 	.word	0x1a040451
1a040680:	4802b401 	.word	0x4802b401
1a040684:	bc014684 	.word	0xbc014684
1a040688:	bf004760 	.word	0xbf004760
1a04068c:	1a040339 	.word	0x1a040339
1a040690:	4802b401 	.word	0x4802b401
1a040694:	bc014684 	.word	0xbc014684
1a040698:	bf004760 	.word	0xbf004760
1a04069c:	1a040379 	.word	0x1a040379
1a0406a0:	4802b401 	.word	0x4802b401
1a0406a4:	bc014684 	.word	0xbc014684
1a0406a8:	bf004760 	.word	0xbf004760
1a0406ac:	1a0402f9 	.word	0x1a0402f9
1a0406b0:	4802b401 	.word	0x4802b401
1a0406b4:	bc014684 	.word	0xbc014684
1a0406b8:	bf004760 	.word	0xbf004760
1a0406bc:	1a0402a5 	.word	0x1a0402a5
1a0406c0:	4802b401 	.word	0x4802b401
1a0406c4:	bc014684 	.word	0xbc014684
1a0406c8:	bf004760 	.word	0xbf004760
1a0406cc:	1a0402d1 	.word	0x1a0402d1
1a0406d0:	4802b401 	.word	0x4802b401
1a0406d4:	bc014684 	.word	0xbc014684
1a0406d8:	bf004760 	.word	0xbf004760
1a0406dc:	1a0403a1 	.word	0x1a0403a1
1a0406e0:	4802b401 	.word	0x4802b401
1a0406e4:	bc014684 	.word	0xbc014684
1a0406e8:	bf004760 	.word	0xbf004760
1a0406ec:	1a040425 	.word	0x1a040425
1a0406f0:	4802b401 	.word	0x4802b401
1a0406f4:	bc014684 	.word	0xbc014684
1a0406f8:	bf004760 	.word	0xbf004760
1a0406fc:	1a0403e5 	.word	0x1a0403e5

Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	1008a000 1a00118d 1a0001c9 1a0001cb     ................
1a000010:	1a0001cd 1a0001cf 1a0001d1 00000000     ................
	...
1a00002c:	1a0001d3 1a0001d5 00000000 1a0001d7     ................
1a00003c:	1a00472d 1a0001db 1a0001db 1a0001db     -G..............
1a00004c:	00000000 1a0001db 1a0001db 1a0001db     ................
1a00005c:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a00006c:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a00007c:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a00008c:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a00009c:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a0000ac:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a0000bc:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a0000cc:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a0000dc:	1a0001db 1a0001db 1a0001db 1a0001db     ................
1a0000ec:	1a0001db 00000000 1a0001db 1a0001db     ................
1a0000fc:	1a0001db 00000000 1a0001db 1a0001db     ................
1a00010c:	1a0001db 1a0001db                       ........

1a000114 <__data_section_table>:
1a000114:	1a01b298 	.word	0x1a01b298
1a000118:	10086018 	.word	0x10086018
1a00011c:	000004cc 	.word	0x000004cc
1a000120:	1a01b294 	.word	0x1a01b294
1a000124:	20008000 	.word	0x20008000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a01b294 	.word	0x1a01b294
1a000130:	10002014 	.word	0x10002014
1a000134:	00000000 	.word	0x00000000
1a000138:	1a01b294 	.word	0x1a01b294
1a00013c:	10080000 	.word	0x10080000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a01b294 	.word	0x1a01b294
1a000148:	10000000 	.word	0x10000000
1a00014c:	00000000 	.word	0x00000000
1a000150:	1a01b294 	.word	0x1a01b294
1a000154:	10086010 	.word	0x10086010
1a000158:	00000004 	.word	0x00000004
1a00015c:	1a01b298 	.word	0x1a01b298
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	1a01b298 	.word	0x1a01b298
1a00016c:	20008400 	.word	0x20008400
1a000170:	00000000 	.word	0x00000000
1a000174:	1a01b298 	.word	0x1a01b298
1a000178:	2000c000 	.word	0x2000c000
1a00017c:	00000000 	.word	0x00000000

1a000180 <__bss_section_table>:
1a000180:	100864e8 	.word	0x100864e8
1a000184:	00001c14 	.word	0x00001c14
1a000188:	20008000 	.word	0x20008000
1a00018c:	00000000 	.word	0x00000000
1a000190:	10002014 	.word	0x10002014
1a000194:	00000000 	.word	0x00000000
1a000198:	10080000 	.word	0x10080000
1a00019c:	00000000 	.word	0x00000000
1a0001a0:	10000000 	.word	0x10000000
1a0001a4:	00000000 	.word	0x00000000
1a0001a8:	10086014 	.word	0x10086014
1a0001ac:	00000000 	.word	0x00000000
1a0001b0:	20000000 	.word	0x20000000
1a0001b4:	00000000 	.word	0x00000000
1a0001b8:	8400      	strh	r0, [r0, #32]
1a0001ba:	2000      	movs	r0, #0
1a0001bc:	0000      	movs	r0, r0
1a0001be:	0000      	.short	0x0000
1a0001c0:	c000      	stmia	r0!, {}
1a0001c2:	2000      	.short	0x2000
1a0001c4:	0000      	movs	r0, r0
	...

1a0001c8 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a0001c8:	Address 0x1a0001c8 is out of bounds.


1a0001ca <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a0001ca:	e7fe      	b.n	1a0001ca <HardFault_Handler>

1a0001cc <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a0001cc:	Address 0x1a0001cc is out of bounds.


1a0001ce <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a0001ce:	e7fe      	b.n	1a0001ce <BusFault_Handler>

1a0001d0 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a0001d0:	e7fe      	b.n	1a0001d0 <UsageFault_Handler>

1a0001d2 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a0001d2:	e7fe      	.short	0xe7fe

1a0001d4 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a0001d4:	e7fe      	b.n	1a0001d4 <DebugMon_Handler>

1a0001d6 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a0001d6:	e7fe      	.short	0xe7fe
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a0001d8:	e7fe      	b.n	1a0001d8 <PendSV_Handler+0x2>

1a0001da <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001da:	e7fe      	.short	0xe7fe

1a0001dc <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001dc:	b510      	push	{r4, lr}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001de:	460b      	.short	0x460b
        *pulDest++ = *pulSrc++;
1a0001e0:	1a40      	subs	r0, r0, r1
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001e2:	1a5c      	.short	0x1a5c
1a0001e4:	42a2      	cmp	r2, r4
1a0001e6:	d903      	.short	0xd903
        *pulDest++ = *pulSrc++;
1a0001e8:	58c4      	ldr	r4, [r0, r3]
1a0001ea:	f843      	.short	0xf843
1a0001ec:	4b04      	ldr	r3, [pc, #16]	; (1a000200 <bss_init+0xe>)
1a0001ee:	e7f8      	.short	0xe7f8
}
1a0001f0:	bd10      	pop	{r4, pc}

1a0001f2 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
1a0001f2:	b510      	.short	0xb510
    unsigned int *pulDest = (unsigned int*) start;
1a0001f4:	4603      	mov	r3, r0
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
1a0001f6:	2400      	.short	0x2400

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001f8:	1a1a      	subs	r2, r3, r0
1a0001fa:	4291      	.short	0x4291
1a0001fc:	d902      	bls.n	1a000204 <bss_init+0x12>
        *pulDest++ = 0;
1a0001fe:	f843      	.short	0xf843
1a000200:	4b04      	ldr	r3, [pc, #16]	; (1a000214 <bss_init+0x22>)
1a000202:	e7f9      	.short	0xe7f9
}
1a000204:	bd10      	pop	{r4, pc}
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff      	.short	0xffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffffffff 	.word	0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffffffff 	.word	0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffffffff 	.word	0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffffffff 	.word	0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffffffff 	.word	0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffffffff 	.word	0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffffffff 	.word	0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffffffff 	.word	0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffffffff 	.word	0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffffffff 	.word	0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffffffff 	.word	0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffffffff 	.word	0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffffffff 	.word	0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffffffff 	.word	0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffffffff 	.word	0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffffffff 	.word	0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffffffff 	.word	0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffffffff 	.word	0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffffffff 	.word	0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffffffff 	.word	0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffffffff 	.word	0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffffffff 	.word	0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffffffff 	.word	0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffffffff 	.word	0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <Chip_SCU_PinMuxSet>:
 * @return	Nothing
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a000300:	b480      	push	{r7}
1a000302:	b083      	sub	sp, #12
1a000304:	af00      	add	r7, sp, #0
1a000306:	4603      	mov	r3, r0
1a000308:	71fb      	strb	r3, [r7, #7]
1a00030a:	460b      	mov	r3, r1
1a00030c:	71bb      	strb	r3, [r7, #6]
1a00030e:	4613      	mov	r3, r2
1a000310:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000312:	4807      	ldr	r0, [pc, #28]	; (1a000330 <Chip_SCU_PinMuxSet+0x30>)
1a000314:	79f9      	ldrb	r1, [r7, #7]
1a000316:	79bb      	ldrb	r3, [r7, #6]
1a000318:	88ba      	ldrh	r2, [r7, #4]
1a00031a:	0149      	lsls	r1, r1, #5
1a00031c:	f840440b 	.word	0xf840440b
1a000320:	2023      	movs	r0, #35	; 0x23
}
1a000322:	bf00      	.short	0xbf00
1a000324:	370c      	adds	r7, #12
1a000326:	46bd      	mov	sp, r7
1a000328:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00032c:	4770      	bx	lr
1a00032e:	bf00      	nop
1a000330:	6000      	str	r0, [r0, #0]
1a000332:	4008      	ands	r0, r1

1a000334 <Chip_GPIO_SetPinDIROutput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a000334:	b480      	push	{r7}
1a000336:	b083      	sub	sp, #12
1a000338:	af00      	add	r7, sp, #0
1a00033a:	6078      	str	r0, [r7, #4]
1a00033c:	70fb460b 	.word	0x70fb460b
1a000340:	4613      	mov	r3, r2
1a000342:	70bb      	.short	0x70bb
	pGPIO->DIR[port] |= 1UL << pin;
1a000344:	78fa      	ldrb	r2, [r7, #3]
1a000346:	78f9      	ldrb	r1, [r7, #3]
1a000348:	687b      	ldr	r3, [r7, #4]
1a00034a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a00034e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a000352:	78bb      	ldrb	r3, [r7, #2]
1a000354:	2001      	movs	r0, #1
1a000356:	fa00 f303 	lsl.w	r3, r0, r3
1a00035a:	4319      	.short	0x4319
1a00035c:	687b      	ldr	r3, [r7, #4]
1a00035e:	f502      	.short	0xf502
1a000360:	6200      	str	r0, [r0, #32]
1a000362:	f843      	.short	0xf843
1a000364:	1022      	asrs	r2, r4, #32
}
1a000366:	bf00      	nop
1a000368:	46bd370c 	.word	0x46bd370c
1a00036c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000370:	bf004770 	.word	0xbf004770

1a000374 <Chip_GPIO_SetPinOutHigh>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a000374:	b480      	push	{r7}
1a000376:	b083      	.short	0xb083
1a000378:	af00      	add	r7, sp, #0
1a00037a:	6078      	str	r0, [r7, #4]
1a00037c:	460b      	mov	r3, r1
1a00037e:	70fb      	.short	0x70fb
1a000380:	4613      	mov	r3, r2
1a000382:	70bb      	.short	0x70bb
	pGPIO->SET[port] = (1 << pin);
1a000384:	78fa      	ldrb	r2, [r7, #3]
1a000386:	78bb      	.short	0x78bb
1a000388:	2101      	movs	r1, #1
1a00038a:	fa01      	.short	0xfa01
1a00038c:	f303 4619 	ssat	r6, #26, r3, lsl #16
1a000390:	f502687b 	.word	0xf502687b
1a000394:	6208      	str	r0, [r1, #32]
1a000396:	f843      	.short	0xf843
1a000398:	1022      	asrs	r2, r4, #32
}
1a00039a:	bf00      	.short	0xbf00
1a00039c:	370c      	adds	r7, #12
1a00039e:	46bd      	mov	sp, r7
1a0003a0:	7b04f85d 	.word	0x7b04f85d
1a0003a4:	4770      	bx	lr
1a0003a6:	bf00      	nop

1a0003a8 <Chip_GPIO_SetPinOutLow>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a0003a8:	b480      	push	{r7}
1a0003aa:	b083      	sub	sp, #12
1a0003ac:	af00      	add	r7, sp, #0
1a0003ae:	6078      	.short	0x6078
1a0003b0:	460b      	mov	r3, r1
1a0003b2:	70fb      	.short	0x70fb
1a0003b4:	4613      	mov	r3, r2
1a0003b6:	70bb      	.short	0x70bb
	pGPIO->CLR[port] = (1 << pin);
1a0003b8:	78fa      	ldrb	r2, [r7, #3]
1a0003ba:	78bb      	.short	0x78bb
1a0003bc:	2101      	movs	r1, #1
1a0003be:	fa01 f303 	lsl.w	r3, r1, r3
1a0003c2:	4619      	mov	r1, r3
1a0003c4:	687b      	ldr	r3, [r7, #4]
1a0003c6:	f502      	.short	0xf502
1a0003c8:	620a      	str	r2, [r1, #32]
1a0003ca:	f843      	.short	0xf843
1a0003cc:	1022      	asrs	r2, r4, #32
}
1a0003ce:	bf00      	.short	0xbf00
1a0003d0:	370c      	adds	r7, #12
1a0003d2:	46bd      	.short	0x46bd
1a0003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0003d8:	bf004770 	.word	0xbf004770

1a0003dc <Chip_TIMER_Enable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @return	Nothing
 * @note	Enables the timer to start counting.
 */
STATIC INLINE void Chip_TIMER_Enable(LPC_TIMER_T *pTMR)
{
1a0003dc:	b480      	push	{r7}
1a0003de:	b083      	.short	0xb083
1a0003e0:	af00      	add	r7, sp, #0
1a0003e2:	6078      	.short	0x6078
	pTMR->TCR |= TIMER_ENABLE;
1a0003e4:	687b      	ldr	r3, [r7, #4]
1a0003e6:	685b      	.short	0x685b
1a0003e8:	f043 0201 	orr.w	r2, r3, #1
1a0003ec:	605a687b 	.word	0x605a687b
}
1a0003f0:	bf00      	nop
1a0003f2:	370c      	adds	r7, #12
1a0003f4:	f85d46bd 	.word	0xf85d46bd
1a0003f8:	7b04      	ldrb	r4, [r0, #12]
1a0003fa:	4770      	.short	0x4770

1a0003fc <Chip_TIMER_PrescaleSet>:
 * @param	prescale	: Prescale value to set the prescale register to
 * @return	Nothing
 * @note	Sets the prescale count value.
 */
STATIC INLINE void Chip_TIMER_PrescaleSet(LPC_TIMER_T *pTMR, uint32_t prescale)
{
1a0003fc:	b480      	push	{r7}
1a0003fe:	b083      	.short	0xb083
1a000400:	af00      	add	r7, sp, #0
1a000402:	6078      	.short	0x6078
1a000404:	6039      	str	r1, [r7, #0]
	pTMR->PR = prescale;
1a000406:	687b      	.short	0x687b
1a000408:	683a      	ldr	r2, [r7, #0]
1a00040a:	60da      	.short	0x60da
}
1a00040c:	bf00      	nop
1a00040e:	370c      	.short	0x370c
1a000410:	46bd      	mov	sp, r7
1a000412:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000416:	4770      	.short	0x4770

1a000418 <Chip_TIMER_MatchDisableInt>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchDisableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a000418:	b480      	push	{r7}
1a00041a:	b083      	.short	0xb083
1a00041c:	af00      	add	r7, sp, #0
1a00041e:	6078      	str	r0, [r7, #4]
1a000420:	70fb460b 	.word	0x70fb460b
	pTMR->MCR &= ~TIMER_INT_ON_MATCH(matchnum);
1a000424:	687b      	ldr	r3, [r7, #4]
1a000426:	6959      	.short	0x6959
1a000428:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a00042c:	4613      	mov	r3, r2
1a00042e:	005b      	lsls	r3, r3, #1
1a000430:	4413      	add	r3, r2
1a000432:	2201      	movs	r2, #1
1a000434:	f303fa02 	.word	0xf303fa02
1a000438:	43db      	mvns	r3, r3
1a00043a:	ea01 0203 	and.w	r2, r1, r3
1a00043e:	687b      	ldr	r3, [r7, #4]
1a000440:	615a      	str	r2, [r3, #20]
}
1a000442:	bf00      	.short	0xbf00
1a000444:	370c      	adds	r7, #12
1a000446:	46bd      	mov	sp, r7
1a000448:	7b04f85d 	.word	0x7b04f85d
1a00044c:	4770      	bx	lr
1a00044e:	bf00      	.short	0xbf00

1a000450 <Chip_TIMER_ResetOnMatchDisable>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_ResetOnMatchDisable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a000450:	b480      	push	{r7}
1a000452:	b083      	.short	0xb083
1a000454:	af00      	add	r7, sp, #0
1a000456:	6078      	.short	0x6078
1a000458:	460b      	mov	r3, r1
1a00045a:	70fb      	.short	0x70fb
	pTMR->MCR &= ~TIMER_RESET_ON_MATCH(matchnum);
1a00045c:	687b      	ldr	r3, [r7, #4]
1a00045e:	6959      	.short	0x6959
1a000460:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a000464:	005b4613 	.word	0x005b4613
1a000468:	4413      	add	r3, r2
1a00046a:	3301      	.short	0x3301
1a00046c:	2201      	movs	r2, #1
1a00046e:	fa02 f303 	lsl.w	r3, r2, r3
1a000472:	43db      	.short	0x43db
1a000474:	ea01 0203 	and.w	r2, r1, r3
1a000478:	687b      	ldr	r3, [r7, #4]
1a00047a:	615a      	.short	0x615a
}
1a00047c:	bf00      	nop
1a00047e:	370c      	.short	0x370c
1a000480:	46bd      	mov	sp, r7
1a000482:	f85d      	.short	0xf85d
1a000484:	7b04      	ldrb	r4, [r0, #12]
1a000486:	4770      	.short	0x4770

1a000488 <Chip_TIMER_StopOnMatchDisable>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_StopOnMatchDisable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a000488:	b480      	push	{r7}
1a00048a:	b083      	sub	sp, #12
1a00048c:	af00      	add	r7, sp, #0
1a00048e:	6078      	.short	0x6078
1a000490:	460b      	mov	r3, r1
1a000492:	70fb      	.short	0x70fb
	pTMR->MCR &= ~TIMER_STOP_ON_MATCH(matchnum);
1a000494:	687b      	ldr	r3, [r7, #4]
1a000496:	6959      	.short	0x6959
1a000498:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a00049c:	005b4613 	.word	0x005b4613
1a0004a0:	4413      	add	r3, r2
1a0004a2:	3302      	.short	0x3302
1a0004a4:	2201      	movs	r2, #1
1a0004a6:	fa02      	.short	0xfa02
1a0004a8:	f303 43db 	ssat	r3, #28, r3, lsl #19
1a0004ac:	0203ea01 	.word	0x0203ea01
1a0004b0:	687b      	ldr	r3, [r7, #4]
1a0004b2:	615a      	str	r2, [r3, #20]
}
1a0004b4:	370cbf00 	.word	0x370cbf00
1a0004b8:	46bd      	mov	sp, r7
1a0004ba:	f85d      	.short	0xf85d
1a0004bc:	7b04      	ldrb	r4, [r0, #12]
1a0004be:	4770      	.short	0x4770

1a0004c0 <Chip_TIMER_CaptureRisingEdgeDisable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @param	capnum	: Capture signal/register to use
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_CaptureRisingEdgeDisable(LPC_TIMER_T *pTMR, int8_t capnum)
{
1a0004c0:	b480      	push	{r7}
1a0004c2:	b083      	.short	0xb083
1a0004c4:	af00      	add	r7, sp, #0
1a0004c6:	6078      	.short	0x6078
1a0004c8:	460b      	mov	r3, r1
1a0004ca:	70fb      	.short	0x70fb
	pTMR->CCR &= ~TIMER_CAP_RISING(capnum);
1a0004cc:	687b      	ldr	r3, [r7, #4]
1a0004ce:	6a99      	.short	0x6a99
1a0004d0:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a0004d4:	005b4613 	.word	0x005b4613
1a0004d8:	4413      	add	r3, r2
1a0004da:	2201      	.short	0x2201
1a0004dc:	fa02 f303 	lsl.w	r3, r2, r3
1a0004e0:	ea0143db 	.word	0xea0143db
1a0004e4:	0203      	lsls	r3, r0, #8
1a0004e6:	687b      	.short	0x687b
1a0004e8:	629a      	str	r2, [r3, #40]	; 0x28
}
1a0004ea:	bf00      	.short	0xbf00
1a0004ec:	370c      	adds	r7, #12
1a0004ee:	46bd      	.short	0x46bd
1a0004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0004f4:	bf004770 	.word	0xbf004770

1a0004f8 <Chip_TIMER_CaptureFallingEdgeEnable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @param	capnum	: Capture signal/register to use
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_CaptureFallingEdgeEnable(LPC_TIMER_T *pTMR, int8_t capnum)
{
1a0004f8:	b480      	push	{r7}
1a0004fa:	b083      	.short	0xb083
1a0004fc:	af00      	add	r7, sp, #0
1a0004fe:	6078      	.short	0x6078
1a000500:	460b      	mov	r3, r1
1a000502:	70fb      	.short	0x70fb
	pTMR->CCR |= TIMER_CAP_FALLING(capnum);
1a000504:	687b      	ldr	r3, [r7, #4]
1a000506:	6a99      	.short	0x6a99
1a000508:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a00050c:	005b4613 	.word	0x005b4613
1a000510:	4413      	add	r3, r2
1a000512:	3301      	.short	0x3301
1a000514:	2201      	movs	r2, #1
1a000516:	fa02      	.short	0xfa02
1a000518:	f303 ea41 			; <UNDEFINED> instruction: 0xf303ea41
1a00051c:	0203      	lsls	r3, r0, #8
1a00051e:	687b      	.short	0x687b
1a000520:	629a      	str	r2, [r3, #40]	; 0x28
}
1a000522:	bf00      	.short	0xbf00
1a000524:	370c      	adds	r7, #12
1a000526:	46bd      	.short	0x46bd
1a000528:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00052c:	bf004770 	.word	0xbf004770

1a000530 <Chip_TIMER_CaptureDisableInt>:
 * @param	pTMR	: Pointer to timer IP register address
 * @param	capnum	: Capture signal/register to use
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_CaptureDisableInt(LPC_TIMER_T *pTMR, int8_t capnum)
{
1a000530:	b480      	push	{r7}
1a000532:	b083      	.short	0xb083
1a000534:	af00      	add	r7, sp, #0
1a000536:	6078      	str	r0, [r7, #4]
1a000538:	460b      	mov	r3, r1
1a00053a:	70fb      	.short	0x70fb
	pTMR->CCR &= ~TIMER_INT_ON_CAP(capnum);
1a00053c:	687b      	ldr	r3, [r7, #4]
1a00053e:	6a99      	.short	0x6a99
1a000540:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a000544:	005b4613 	.word	0x005b4613
1a000548:	4413      	add	r3, r2
1a00054a:	3302      	.short	0x3302
1a00054c:	2201      	movs	r2, #1
1a00054e:	fa02      	.short	0xfa02
1a000550:	f303 43db 	ssat	r3, #28, r3, lsl #19
1a000554:	0203ea01 	.word	0x0203ea01
1a000558:	687b      	ldr	r3, [r7, #4]
1a00055a:	629a      	.short	0x629a
}
1a00055c:	bf00      	nop
1a00055e:	370c      	.short	0x370c
1a000560:	46bd      	mov	sp, r7
1a000562:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000566:	4770      	.short	0x4770

1a000568 <DVS128InitTimer>:
uint32_t eDVSProcessingMode;

//Using the NOINIT macros allows the flashed image size to be greatly reduced.
__NOINIT(RAM4) volatile struct eventRingBuffer events;

void DVS128InitTimer() {
1a000568:	b580      	push	{r7, lr}
1a00056a:	af00      	.short	0xaf00
	// *****************************************************************************
	// ** initialize Timer 1 (system main clock)
	// *****************************************************************************
	Chip_TIMER_Init(LPC_TIMER1);
1a00056c:	4815      	ldr	r0, [pc, #84]	; (1a0005c4 <DVS128InitTimer+0x5c>)
1a00056e:	f012      	.short	0xf012
1a000570:	ff0f 21bf 	veor	d2, d31, d31
	Chip_TIMER_PrescaleSet(LPC_TIMER1, 191);	// prescaler: run at 1Mhz!
1a000574:	f7ff4813 	.word	0xf7ff4813
1a000578:	ff41 2101 	vrhadd.u8	d18, d1, d1
	Chip_TIMER_MatchDisableInt(LPC_TIMER1, TIMER_CAPTURE_CHANNEL);
1a00057c:	f7ff4811 	.word	0xf7ff4811
1a000580:	ff4b 2101 	vrhadd.u8	d18, d11, d1
	Chip_TIMER_ResetOnMatchDisable(LPC_TIMER1, TIMER_CAPTURE_CHANNEL);
1a000584:	f7ff480f 	.word	0xf7ff480f
1a000588:	ff63 2101 	vrhadd.u32	d18, d3, d1
	Chip_TIMER_StopOnMatchDisable(LPC_TIMER1, TIMER_CAPTURE_CHANNEL);
1a00058c:	f7ff480d 	.word	0xf7ff480d
1a000590:	ff7b 2101 	vrhadd.u<illegal width 64>	d18, d11, d1

	Chip_TIMER_CaptureRisingEdgeDisable(LPC_TIMER1, TIMER_CAPTURE_CHANNEL);
1a000594:	480b      	ldr	r0, [pc, #44]	; (1a0005c4 <DVS128InitTimer+0x5c>)
1a000596:	f7ff      	.short	0xf7ff
1a000598:	ff93 2101 	vaddw.u16	q1, <illegal reg q1.5>, d1
	Chip_TIMER_CaptureFallingEdgeEnable(LPC_TIMER1, TIMER_CAPTURE_CHANNEL);
1a00059c:	4809      	ldr	r0, [pc, #36]	; (1a0005c4 <DVS128InitTimer+0x5c>)
1a00059e:	f7ff ffab 	bl	1a0004f8 <Chip_TIMER_CaptureFallingEdgeEnable>
	Chip_TIMER_CaptureDisableInt(LPC_TIMER1, TIMER_CAPTURE_CHANNEL);
1a0005a2:	2101      	.short	0x2101
1a0005a4:	4807      	ldr	r0, [pc, #28]	; (1a0005c4 <DVS128InitTimer+0x5c>)
1a0005a6:	f7ff      	.short	0xf7ff
1a0005a8:	ffc3 224d 	vmlal.u<illegal width 8>	q9, d3, d1[3]

	// set P5.1 to capture register CAP1_1
	Chip_SCU_PinMuxSet(PORT_DVS_REQUEST, PIN_DVS_REQUEST, MD_BUK | MD_EZI | FUNC5);
1a0005ac:	2101      	movs	r1, #1
1a0005ae:	2005      	.short	0x2005
1a0005b0:	f7ff fea6 	bl	1a000300 <Chip_SCU_PinMuxSet>

	//Select the capture input pin in the Global Input Multiplexer Array
	LPC_GIMA->CAP0_IN[1][1] = (uint32_t) (0x2 << 4);
1a0005b4:	4b04      	ldr	r3, [pc, #16]	; (1a0005c8 <DVS128InitTimer+0x60>)
1a0005b6:	2220      	.short	0x2220
1a0005b8:	615a      	str	r2, [r3, #20]

	Chip_TIMER_Enable(LPC_TIMER1);  //Enable timer1
1a0005ba:	4802      	ldr	r0, [pc, #8]	; (1a0005c4 <DVS128InitTimer+0x5c>)
1a0005bc:	ff0ef7ff 	.word	0xff0ef7ff
}
1a0005c0:	bf00      	nop
1a0005c2:	bd80      	.short	0xbd80
1a0005c4:	5000      	str	r0, [r0, r0]
1a0005c6:	4008      	.short	0x4008
1a0005c8:	7000      	strb	r0, [r0, #0]
1a0005ca:	400c      	.short	0x400c

1a0005cc <DVS128ChipInit>:

// *****************************************************************************
void DVS128ChipInit(void) {
1a0005cc:	b580      	push	{r7, lr}
1a0005ce:	af00      	.short	0xaf00
	memset((void*) &events, 0, sizeof(struct eventRingBuffer));
1a0005d0:	f246 0210 	movw	r2, #24592	; 0x6010
1a0005d4:	48662100 	.word	0x48662100
1a0005d8:	f014 fc02 	bl	1a014de0 <memset>
	DVS128InitTimer();
1a0005dc:	f7ff ffc4 	bl	1a000568 <DVS128InitTimer>
	// *****************************************************************************
	eDVSProcessingMode = 0;
1a0005e0:	22004b64 	.word	0x22004b64
1a0005e4:	601a      	str	r2, [r3, #0]
	eDVSDataFormat = EDVS_DATA_FORMAT_DEFAULT;
1a0005e6:	4b64      	.short	0x4b64
1a0005e8:	2200      	movs	r2, #0
1a0005ea:	601a      	.short	0x601a

	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, GPIO_PORT_RX_DEFAULT_GND, GPIO_PIN_RX_DEFAULT_GND);	// set to ground
1a0005ec:	2200      	movs	r2, #0
1a0005ee:	2102      	.short	0x2102
1a0005f0:	4862      	ldr	r0, [pc, #392]	; (1a00077c <DVS128ChipInit+0x1b0>)
1a0005f2:	f7ff      	.short	0xf7ff
1a0005f4:	fed9 2200 	cdp2	2, 13, cr2, cr9, cr0, {0}
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, GPIO_PORT_RX_DEFAULT_GND, GPIO_PIN_RX_DEFAULT_GND); /* set P4.0 as output */
1a0005f8:	48602102 	.word	0x48602102
1a0005fc:	f7ff fe9a 	bl	1a000334 <Chip_GPIO_SetPinDIROutput>
	Chip_SCU_PinMuxSet(PORT_RX_DEFAULT_GND, PIN_RX_DEFAULT_GND, MD_PLN_FAST | FUNC0);
1a000600:	210022f0 	.word	0x210022f0
1a000604:	2004      	movs	r0, #4
1a000606:	f7ff fe7b 	bl	1a000300 <Chip_SCU_PinMuxSet>

	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, GPIO_PORT_RESET_DVS, GPIO_PIN_RESET_DVS); /* set P2.11 as output */
1a00060a:	220b      	movs	r2, #11
1a00060c:	485b2101 	.word	0x485b2101
1a000610:	f7ff fe90 	bl	1a000334 <Chip_GPIO_SetPinDIROutput>
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, GPIO_PORT_RESET_DVS, GPIO_PIN_RESET_DVS); // DVS array reset to high
1a000614:	2101220b 	.word	0x2101220b
1a000618:	4858      	ldr	r0, [pc, #352]	; (1a00077c <DVS128ChipInit+0x1b0>)
1a00061a:	f7ff      	.short	0xf7ff
1a00061c:	feab 22f0 	mcr2	2, 5, r2, cr11, cr0, {7}
	Chip_SCU_PinMuxSet(PORT_RESET_DVS, PIN_RESET_DVS, MD_PLN_FAST | FUNC0);
1a000620:	2002210b 	.word	0x2002210b
1a000624:	f7ff fe6c 	bl	1a000300 <Chip_SCU_PinMuxSet>

	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, GPIO_PORT_DVS_OE, GPIO_PIN_DVS_OE); /* set P2.9 as output */
1a000628:	2100220e 	.word	0x2100220e
1a00062c:	4853      	ldr	r0, [pc, #332]	; (1a00077c <DVS128ChipInit+0x1b0>)
1a00062e:	f7ff      	.short	0xf7ff
1a000630:	fe81 220e 	cdp2	2, 8, cr2, cr1, cr14, {0}
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, GPIO_PORT_DVS_OE, GPIO_PIN_DVS_OE); // Enable DVS outputs
1a000634:	2100      	movs	r1, #0
1a000636:	4851      	ldr	r0, [pc, #324]	; (1a00077c <DVS128ChipInit+0x1b0>)
1a000638:	feb6f7ff 	.word	0xfeb6f7ff
	Chip_SCU_PinMuxSet(PORT_DVS_OE, PIN_DVS_OE, MD_PLN_FAST | FUNC0);
1a00063c:	22f0      	movs	r2, #240	; 0xf0
1a00063e:	210a      	.short	0x210a
1a000640:	2002      	movs	r0, #2
1a000642:	f7ff      	.short	0xf7ff
1a000644:	fe5d 2248 	cdp2	2, 5, cr2, cr13, cr8, {2}

	// let DVS handshake itself (REQ -> ACK)
	// set ACK as input
	Chip_SCU_PinMuxSet(PORT_DVS_ACKN, PIN_DVS_ACKN, MD_BUK | MD_EZI | FUNC0);
1a000648:	20072107 	.word	0x20072107
1a00064c:	f7ff fe58 	bl	1a000300 <Chip_SCU_PinMuxSet>

	Chip_SCU_PinMuxSet(PORT_BIAS_LATCH, PIN_BIAS_LATCH, MD_PLN_FAST | FUNC0);
1a000650:	210c22f0 	.word	0x210c22f0
1a000654:	2002      	movs	r0, #2
1a000656:	f7ff      	.short	0xf7ff
1a000658:	fe53 220c 	cdp2	2, 5, cr2, cr3, cr12, {0}
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, GPIO_PORT_BIAS_LATCH, GPIO_PIN_BIAS_LATCH);// set pins to bias setup as outputs
1a00065c:	48472101 	.word	0x48472101
1a000660:	f7ff fe88 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, GPIO_PORT_BIAS_LATCH, GPIO_PIN_BIAS_LATCH); /* set P2.12 as output */
1a000664:	220c      	movs	r2, #12
1a000666:	2101      	movs	r1, #1
1a000668:	f7ff4844 	.word	0xf7ff4844
1a00066c:	fe63 22f4 	mcr2	2, 3, r2, cr3, cr4, {7}

	Chip_SCU_PinMuxSet(PORT_BIAS_DATA, PIN_BIAS_DATA, MD_PLN_FAST | FUNC4);
1a000670:	20032107 	.word	0x20032107
1a000674:	f7ff fe44 	bl	1a000300 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(PORT_BIAS_CLOCK, PIN_BIAS_CLOCK, MD_PLN_FAST | FUNC0);
1a000678:	210522f0 	.word	0x210522f0
1a00067c:	2003      	movs	r0, #3
1a00067e:	f7ff      	.short	0xf7ff
1a000680:	fe3f 220a 	cdp2	2, 3, cr2, cr15, cr10, {0}
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, GPIO_PORT_BIAS_DATA, GPIO_PIN_BIAS_DATA);
1a000684:	483d2105 	.word	0x483d2105
1a000688:	f7ff fe8e 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, GPIO_PORT_BIAS_CLOCK, GPIO_PIN_BIAS_CLOCK);
1a00068c:	2101220f 	.word	0x2101220f
1a000690:	483a      	ldr	r0, [pc, #232]	; (1a00077c <DVS128ChipInit+0x1b0>)
1a000692:	f7ff      	.short	0xf7ff
1a000694:	fe89 220a 	cdp2	2, 8, cr2, cr9, cr10, {0}
	/* set P3.4 and P3.7 as output */
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, GPIO_PORT_BIAS_DATA, GPIO_PIN_BIAS_DATA);
1a000698:	48382105 	.word	0x48382105
1a00069c:	f7ff fe4a 	bl	1a000334 <Chip_GPIO_SetPinDIROutput>
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, GPIO_PORT_BIAS_CLOCK, GPIO_PIN_BIAS_CLOCK);
1a0006a0:	2101220f 	.word	0x2101220f
1a0006a4:	4835      	ldr	r0, [pc, #212]	; (1a00077c <DVS128ChipInit+0x1b0>)
1a0006a6:	f7ff      	.short	0xf7ff
1a0006a8:	fe45 220b 	cdp2	2, 4, cr2, cr5, cr11, {0}

	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, GPIO_PORT_RESET_DVS, GPIO_PIN_RESET_DVS); // DVS array reset to low
1a0006ac:	48332101 	.word	0x48332101
1a0006b0:	f7ff fe7a 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
	timerDelayMs(10); 	 								// 10ms delay
1a0006b4:	f006200a 	.word	0xf006200a
1a0006b8:	f823 220b 	strh.w	r2, [r3, <undefined>]
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, GPIO_PORT_RESET_DVS, GPIO_PIN_RESET_DVS); // DVS array reset to high
1a0006bc:	482f2101 	.word	0x482f2101
1a0006c0:	f7ff fe58 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
	timerDelayMs(1); 	 								// 1ms delay
1a0006c4:	f0062001 	.word	0xf0062001
1a0006c8:	f81b 2248 	ldrb.w	r2, [fp, <undefined>]

	Chip_SCU_PinMuxSet(PORT_EVENT_X, PIN_EVENT_X0, MD_BUK | MD_EZI | FUNC0);
1a0006cc:	20062101 	.word	0x20062101
1a0006d0:	f7ff fe16 	bl	1a000300 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(PORT_EVENT_X, PIN_EVENT_X1, MD_BUK | MD_EZI | FUNC0);
1a0006d4:	21022248 	.word	0x21022248
1a0006d8:	2006      	movs	r0, #6
1a0006da:	f7ff      	.short	0xf7ff
1a0006dc:	fe11 2248 	cdp2	2, 1, cr2, cr1, cr8, {2}
	Chip_SCU_PinMuxSet(PORT_EVENT_X, PIN_EVENT_X2, MD_BUK | MD_EZI | FUNC0);
1a0006e0:	20062103 	.word	0x20062103
1a0006e4:	f7ff fe0c 	bl	1a000300 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(PORT_EVENT_X, PIN_EVENT_X3, MD_BUK | MD_EZI | FUNC0);
1a0006e8:	21042248 	.word	0x21042248
1a0006ec:	2006      	movs	r0, #6
1a0006ee:	f7ff      	.short	0xf7ff
1a0006f0:	fe07 2248 	cdp2	2, 0, cr2, cr7, cr8, {2}
	Chip_SCU_PinMuxSet(PORT_EVENT_X, PIN_EVENT_X4, MD_BUK | MD_EZI | FUNC0);
1a0006f4:	20062105 	.word	0x20062105
1a0006f8:	f7ff fe02 	bl	1a000300 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(PORT_EVENT_X, PIN_EVENT_X5, MD_BUK | MD_EZI | FUNC0);
1a0006fc:	21092248 	.word	0x21092248
1a000700:	2006      	movs	r0, #6
1a000702:	f7ff      	.short	0xf7ff
1a000704:	fdfd 2248 	ldc2l	2, cr2, [sp, #288]!	; 0x120
	Chip_SCU_PinMuxSet(PORT_EVENT_X, PIN_EVENT_X6, MD_BUK | MD_EZI | FUNC0);
1a000708:	2006210a 	.word	0x2006210a
1a00070c:	f7ff fdf8 	bl	1a000300 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(PORT_EVENT_X, PIN_EVENT_P, MD_BUK | MD_EZI | FUNC0);
1a000710:	210b2248 	.word	0x210b2248
1a000714:	2006      	movs	r0, #6
1a000716:	f7ff      	.short	0xf7ff
1a000718:	fdf3 2248 	ldc2l	2, cr2, [r3, #288]!	; 0x120

	Chip_SCU_PinMuxSet(PORT_EVENT_Y, PIN_EVENT_Y0, MD_BUK | MD_EZI | FUNC0);
1a00071c:	20072100 	.word	0x20072100
1a000720:	f7ff fdee 	bl	1a000300 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(PORT_EVENT_Y, PIN_EVENT_Y1, MD_BUK | MD_EZI | FUNC0);
1a000724:	21012248 	.word	0x21012248
1a000728:	2007      	movs	r0, #7
1a00072a:	f7ff      	.short	0xf7ff
1a00072c:	fde9 2248 	stc2l	2, cr2, [r9, #288]!	; 0x120
	Chip_SCU_PinMuxSet(PORT_EVENT_Y, PIN_EVENT_Y2, MD_BUK | MD_EZI | FUNC0);
1a000730:	20072102 	.word	0x20072102
1a000734:	f7ff fde4 	bl	1a000300 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(PORT_EVENT_Y, PIN_EVENT_Y3, MD_BUK | MD_EZI | FUNC0);
1a000738:	21032248 	.word	0x21032248
1a00073c:	2007      	movs	r0, #7
1a00073e:	f7ff      	.short	0xf7ff
1a000740:	fddf 2248 	ldc2l	2, cr2, [pc, #288]	; 1a000864 <DVS128BiasLoadDefaultSet+0x8c>
	Chip_SCU_PinMuxSet(PORT_EVENT_Y, PIN_EVENT_Y4, MD_BUK | MD_EZI | FUNC0);
1a000744:	20072104 	.word	0x20072104
1a000748:	f7ff fdda 	bl	1a000300 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(PORT_EVENT_Y, PIN_EVENT_Y5, MD_BUK | MD_EZI | FUNC0);
1a00074c:	21052248 	.word	0x21052248
1a000750:	2007      	movs	r0, #7
1a000752:	f7ff fdd5 	bl	1a000300 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(PORT_EVENT_Y, PIN_EVENT_Y6, MD_BUK | MD_EZI | FUNC0);
1a000756:	2248      	.short	0x2248
1a000758:	2106      	movs	r1, #6
1a00075a:	2007      	.short	0x2007
1a00075c:	f7ff fdd0 	bl	1a000300 <Chip_SCU_PinMuxSet>

	DVS128BiasLoadDefaultSet(DEFAULT_BIAS_SET);	// load default bias settings
1a000760:	f0002005 	.word	0xf0002005
1a000764:	f839 2001 	ldrh.w	r2, [r9, r1]
	DVS128BiasFlush(1);					// transfer bias settings to chip
1a000768:	f974f000 	.word	0xf974f000

}
1a00076c:	bf00      	nop
1a00076e:	bd80      	.short	0xbd80
1a000770:	0000      	movs	r0, r0
1a000772:	1008      	.short	0x1008
1a000774:	743c      	strb	r4, [r7, #16]
1a000776:	1008      	.short	0x1008
1a000778:	651c      	str	r4, [r3, #80]	; 0x50
1a00077a:	1008      	.short	0x1008
1a00077c:	4000      	ands	r0, r0
1a00077e:	400f      	.short	0x400f

1a000780 <DVS128BiasSet>:

// *****************************************************************************

// *****************************************************************************
void DVS128BiasSet(uint32_t biasID, uint32_t biasValue) {
1a000780:	b480      	push	{r7}
1a000782:	b083      	.short	0xb083
1a000784:	af00      	add	r7, sp, #0
1a000786:	6078      	.short	0x6078
1a000788:	6039      	str	r1, [r7, #0]
	if (biasID < 12) {
1a00078a:	687b      	.short	0x687b
1a00078c:	2b0b      	cmp	r3, #11
1a00078e:	d804      	.short	0xd804
		biasMatrix[biasID] = biasValue;
1a000790:	4905      	ldr	r1, [pc, #20]	; (1a0007a8 <DVS128BiasSet+0x28>)
1a000792:	687b      	.short	0x687b
1a000794:	683a      	ldr	r2, [r7, #0]
1a000796:	f841      	.short	0xf841
1a000798:	2023      	movs	r0, #35	; 0x23
	}
}
1a00079a:	bf00      	.short	0xbf00
1a00079c:	370c      	adds	r7, #12
1a00079e:	46bd      	.short	0x46bd
1a0007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0007a4:	4770      	bx	lr
1a0007a6:	bf00      	.short	0xbf00
1a0007a8:	64e8      	str	r0, [r5, #76]	; 0x4c
1a0007aa:	1008      	.short	0x1008

1a0007ac <DVS128BiasGet>:
// *****************************************************************************
uint32_t DVS128BiasGet(uint32_t biasID) {
1a0007ac:	b480      	push	{r7}
1a0007ae:	b083      	.short	0xb083
1a0007b0:	af00      	add	r7, sp, #0
1a0007b2:	6078      	.short	0x6078
	if (biasID < 12) {
1a0007b4:	687b      	ldr	r3, [r7, #4]
1a0007b6:	2b0b      	.short	0x2b0b
1a0007b8:	d804      	bhi.n	1a0007c4 <DVS128BiasGet+0x18>
		return (biasMatrix[biasID]);
1a0007ba:	4a06      	.short	0x4a06
1a0007bc:	687b      	ldr	r3, [r7, #4]
1a0007be:	f852      	.short	0xf852
1a0007c0:	3023      	adds	r0, #35	; 0x23
1a0007c2:	e000      	.short	0xe000
	}
	return (0);
1a0007c4:	2300      	movs	r3, #0
}
1a0007c6:	4618      	.short	0x4618
1a0007c8:	370c      	adds	r7, #12
1a0007ca:	46bd      	.short	0x46bd
1a0007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0007d0:	bf004770 	.word	0xbf004770
1a0007d4:	64e8      	str	r0, [r5, #76]	; 0x4c
1a0007d6:	1008      	asrs	r0, r1, #32

1a0007d8 <DVS128BiasLoadDefaultSet>:

// *****************************************************************************
void DVS128BiasLoadDefaultSet(uint32_t biasSetID) {
1a0007d8:	b083b480 	.word	0xb083b480
1a0007dc:	af00      	add	r7, sp, #0
1a0007de:	6078      	.short	0x6078

	switch (biasSetID) {
1a0007e0:	687b      	ldr	r3, [r7, #4]
1a0007e2:	2b05      	.short	0x2b05
1a0007e4:	f200 810d 	bhi.w	1a000a02 <DVS128BiasLoadDefaultSet+0x22a>
1a0007e8:	f852a201 	.word	0xf852a201
1a0007ec:	f023 bf00 	b.w	1a0245f0 <__exidx_end+0x935c>
1a0007f0:	1a000809 	.word	0x1a000809
1a0007f4:	085d      	lsrs	r5, r3, #1
1a0007f6:	1a00      	.short	0x1a00
1a0007f8:	08b1      	lsrs	r1, r6, #2
1a0007fa:	1a00      	.short	0x1a00
1a0007fc:	0907      	lsrs	r7, r0, #4
1a0007fe:	1a00      	.short	0x1a00
1a000800:	0959      	lsrs	r1, r3, #5
1a000802:	1a00      	.short	0x1a00
1a000804:	09af      	lsrs	r7, r5, #6
1a000806:	1a00      	.short	0x1a00

	case 0: // 12 bias values of 24 bits each 								BIAS_DEFAULT
		biasMatrix[0] = 1067; // 0x00042B,	  		// Tmpdiff128.IPot.cas
1a000808:	4b81      	ldr	r3, [pc, #516]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a00080a:	f240      	.short	0xf240
1a00080c:	422b      	tst	r3, r5
1a00080e:	601a      	.short	0x601a
		biasMatrix[1] = 12316; // 0x00301C,			// Tmpdiff128.IPot.injGnd
1a000810:	4b7f      	ldr	r3, [pc, #508]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a000812:	f243      	.short	0xf243
1a000814:	021c      	lsls	r4, r3, #8
1a000816:	605a      	.short	0x605a
		biasMatrix[2] = 16777215; // 0xFFFFFF,			// Tmpdiff128.IPot.reqPd
1a000818:	4b7d      	ldr	r3, [pc, #500]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a00081a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
1a00081e:	609a      	str	r2, [r3, #8]
		biasMatrix[3] = 5579732; // 0x5523D4,			// Tmpdiff128.IPot.puX
1a000820:	4b7b      	ldr	r3, [pc, #492]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a000822:	4a7c      	ldr	r2, [pc, #496]	; (1a000a14 <DVS128BiasLoadDefaultSet+0x23c>)
1a000824:	60da      	str	r2, [r3, #12]
		biasMatrix[4] = 151; // 0x000097,			// Tmpdiff128.IPot.diffOff
1a000826:	4b7a      	ldr	r3, [pc, #488]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a000828:	2297      	movs	r2, #151	; 0x97
1a00082a:	611a      	str	r2, [r3, #16]
		biasMatrix[5] = 427594; // 0x06864A,			// Tmpdiff128.IPot.req
1a00082c:	4b78      	ldr	r3, [pc, #480]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a00082e:	4a7a      	ldr	r2, [pc, #488]	; (1a000a18 <DVS128BiasLoadDefaultSet+0x240>)
1a000830:	615a      	str	r2, [r3, #20]
		biasMatrix[6] = 0; // 0x000000,			// Tmpdiff128.IPot.refr
1a000832:	4b77      	ldr	r3, [pc, #476]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a000834:	2200      	movs	r2, #0
1a000836:	619a      	str	r2, [r3, #24]
		biasMatrix[7] = 16777215; // 0xFFFFFF,			// Tmpdiff128.IPot.puY
1a000838:	4b75      	ldr	r3, [pc, #468]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a00083a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
1a00083e:	61da      	str	r2, [r3, #28]
		biasMatrix[8] = 296253; // 0x04853D,			// Tmpdiff128.IPot.diffOn
1a000840:	4b73      	ldr	r3, [pc, #460]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a000842:	4a76      	.short	0x4a76
1a000844:	621a      	str	r2, [r3, #32]
		biasMatrix[9] = 3624; // 0x000E28,			// Tmpdiff128.IPot.diff
1a000846:	4b72      	.short	0x4b72
1a000848:	f640 6228 	movw	r2, #3624	; 0xe28
1a00084c:	4b70625a 	.word	0x4b70625a
		biasMatrix[10] = 39; // 0x000027,			// Tmpdiff128.IPot.foll
1a000850:	2227      	movs	r2, #39	; 0x27
1a000852:	629a      	.short	0x629a
		biasMatrix[11] = 4; // 0x000004			// Tmpdiff128.IPot.Pr
1a000854:	4b6e      	ldr	r3, [pc, #440]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a000856:	2204      	.short	0x2204
1a000858:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
1a00085a:	e0d2      	.short	0xe0d2

	case 1: // 12 bias values of 24 bits each 								BIAS_BRAGFOST
		biasMatrix[0] = 1067;	  		// Tmpdiff128.IPot.cas
1a00085c:	4b6c      	ldr	r3, [pc, #432]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a00085e:	f240      	.short	0xf240
1a000860:	422b      	tst	r3, r5
1a000862:	601a      	.short	0x601a
		biasMatrix[1] = 12316;			// Tmpdiff128.IPot.injGnd
1a000864:	4b6a      	ldr	r3, [pc, #424]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a000866:	f243      	.short	0xf243
1a000868:	021c      	lsls	r4, r3, #8
1a00086a:	605a      	.short	0x605a
		biasMatrix[2] = 16777215;			// Tmpdiff128.IPot.reqPd
1a00086c:	4b68      	ldr	r3, [pc, #416]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a00086e:	f06f      	.short	0xf06f
1a000870:	427f      	negs	r7, r7
1a000872:	609a      	.short	0x609a
		biasMatrix[3] = 5579731;			// Tmpdiff128.IPot.puX
1a000874:	4b66      	ldr	r3, [pc, #408]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a000876:	4a6a      	.short	0x4a6a
1a000878:	60da      	str	r2, [r3, #12]
		biasMatrix[4] = 60;			// Tmpdiff128.IPot.diffOff
1a00087a:	4b65      	.short	0x4b65
1a00087c:	223c      	movs	r2, #60	; 0x3c
1a00087e:	611a      	.short	0x611a
		biasMatrix[5] = 427594;			// Tmpdiff128.IPot.req
1a000880:	4b63      	ldr	r3, [pc, #396]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a000882:	4a65      	.short	0x4a65
1a000884:	615a      	str	r2, [r3, #20]
		biasMatrix[6] = 0;			// Tmpdiff128.IPot.refr
1a000886:	4b62      	.short	0x4b62
1a000888:	2200      	movs	r2, #0
1a00088a:	619a      	.short	0x619a
		biasMatrix[7] = 16777215;			// Tmpdiff128.IPot.puY
1a00088c:	4b60      	ldr	r3, [pc, #384]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a00088e:	f06f      	.short	0xf06f
1a000890:	427f      	negs	r7, r7
1a000892:	61da      	.short	0x61da
		biasMatrix[8] = 567391;			// Tmpdiff128.IPot.diffOn
1a000894:	4b5e      	ldr	r3, [pc, #376]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a000896:	4a63      	.short	0x4a63
1a000898:	621a      	str	r2, [r3, #32]
		biasMatrix[9] = 6831;			// Tmpdiff128.IPot.diff
1a00089a:	4b5d      	.short	0x4b5d
1a00089c:	f641 22af 	movw	r2, #6831	; 0x1aaf
1a0008a0:	4b5b625a 	.word	0x4b5b625a
		biasMatrix[10] = 39;			// Tmpdiff128.IPot.foll
1a0008a4:	2227      	movs	r2, #39	; 0x27
1a0008a6:	629a      	.short	0x629a
		biasMatrix[11] = 4;			// Tmpdiff128.IPot.Pr
1a0008a8:	4b59      	ldr	r3, [pc, #356]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0008aa:	2204      	.short	0x2204
1a0008ac:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
1a0008ae:	e0a8      	.short	0xe0a8

	case 2: // 12 bias values of 24 bits each 								BIAS_FAST
		biasMatrix[0] = 1966;	  		// Tmpdiff128.IPot.cas
1a0008b0:	4b57      	ldr	r3, [pc, #348]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0008b2:	f240      	.short	0xf240
1a0008b4:	72ae      	strb	r6, [r5, #10]
1a0008b6:	601a      	.short	0x601a
		biasMatrix[1] = 1137667;			// Tmpdiff128.IPot.injGnd
1a0008b8:	4b55      	ldr	r3, [pc, #340]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0008ba:	4a5b      	.short	0x4a5b
1a0008bc:	605a      	str	r2, [r3, #4]
		biasMatrix[2] = 16777215;			// Tmpdiff128.IPot.reqPd
1a0008be:	4b54      	.short	0x4b54
1a0008c0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
1a0008c4:	609a      	str	r2, [r3, #8]
		biasMatrix[3] = 8053457;			// Tmpdiff128.IPot.puX
1a0008c6:	4b52      	.short	0x4b52
1a0008c8:	4a58      	ldr	r2, [pc, #352]	; (1a000a2c <DVS128BiasLoadDefaultSet+0x254>)
1a0008ca:	60da      	.short	0x60da
		biasMatrix[4] = 133;			// Tmpdiff128.IPot.diffOff
1a0008cc:	4b50      	ldr	r3, [pc, #320]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0008ce:	2285      	.short	0x2285
1a0008d0:	611a      	str	r2, [r3, #16]
		biasMatrix[5] = 160712;			// Tmpdiff128.IPot.req
1a0008d2:	4b4f      	.short	0x4b4f
1a0008d4:	4a56      	ldr	r2, [pc, #344]	; (1a000a30 <DVS128BiasLoadDefaultSet+0x258>)
1a0008d6:	615a      	.short	0x615a
		biasMatrix[6] = 944;			// Tmpdiff128.IPot.refr
1a0008d8:	4b4d      	ldr	r3, [pc, #308]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0008da:	f44f      	.short	0xf44f
1a0008dc:	726c      	strb	r4, [r5, #9]
1a0008de:	619a      	.short	0x619a
		biasMatrix[7] = 16777215;			// Tmpdiff128.IPot.puY
1a0008e0:	4b4b      	ldr	r3, [pc, #300]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0008e2:	f06f      	.short	0xf06f
1a0008e4:	427f      	negs	r7, r7
1a0008e6:	61da      	.short	0x61da
		biasMatrix[8] = 205255;			// Tmpdiff128.IPot.diffOn
1a0008e8:	4b49      	ldr	r3, [pc, #292]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0008ea:	4a52      	.short	0x4a52
1a0008ec:	621a      	str	r2, [r3, #32]
		biasMatrix[9] = 3207;			// Tmpdiff128.IPot.diff
1a0008ee:	4b48      	ldr	r3, [pc, #288]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0008f0:	4287f640 	.word	0x4287f640
1a0008f4:	625a      	str	r2, [r3, #36]	; 0x24
		biasMatrix[10] = 278;			// Tmpdiff128.IPot.foll
1a0008f6:	4b46      	.short	0x4b46
1a0008f8:	f44f 728b 	mov.w	r2, #278	; 0x116
1a0008fc:	4b44629a 	.word	0x4b44629a
		biasMatrix[11] = 217;			// Tmpdiff128.IPot.Pr
1a000900:	22d9      	movs	r2, #217	; 0xd9
1a000902:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
1a000904:	e07d      	b.n	1a000a02 <DVS128BiasLoadDefaultSet+0x22a>

	case 3: // 12 bias values of 24 bits each 								BIAS_STEREO_PAIR
		biasMatrix[0] = 1966;
1a000906:	4b42      	.short	0x4b42
1a000908:	f240 72ae 	movw	r2, #1966	; 0x7ae
1a00090c:	601a      	str	r2, [r3, #0]
		biasMatrix[1] = 1135792;
1a00090e:	4b40      	.short	0x4b40
1a000910:	4a49      	ldr	r2, [pc, #292]	; (1a000a38 <DVS128BiasLoadDefaultSet+0x260>)
1a000912:	605a      	str	r2, [r3, #4]
		biasMatrix[2] = 16769632;
1a000914:	4a494b3e 	.word	0x4a494b3e
1a000918:	609a      	str	r2, [r3, #8]
		biasMatrix[3] = 8061894;
1a00091a:	4b3d      	ldr	r3, [pc, #244]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a00091c:	60da4a48 	.word	0x60da4a48
		biasMatrix[4] = 133;
1a000920:	4b3b      	ldr	r3, [pc, #236]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a000922:	2285      	.short	0x2285
1a000924:	611a      	str	r2, [r3, #16]
		biasMatrix[5] = 160703;
1a000926:	4b3a      	.short	0x4b3a
1a000928:	4a46      	ldr	r2, [pc, #280]	; (1a000a44 <DVS128BiasLoadDefaultSet+0x26c>)
1a00092a:	615a      	str	r2, [r3, #20]
		biasMatrix[6] = 935;
1a00092c:	f2404b38 	.word	0xf2404b38
1a000930:	32a7      	adds	r2, #167	; 0xa7
1a000932:	619a      	.short	0x619a
		biasMatrix[7] = 16769632;
1a000934:	4b36      	ldr	r3, [pc, #216]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a000936:	4a41      	.short	0x4a41
1a000938:	61da      	str	r2, [r3, #28]
		biasMatrix[8] = 205244;
1a00093a:	4b35      	.short	0x4b35
1a00093c:	4a42      	ldr	r2, [pc, #264]	; (1a000a48 <DVS128BiasLoadDefaultSet+0x270>)
1a00093e:	621a      	.short	0x621a
		biasMatrix[9] = 3207;
1a000940:	4b33      	ldr	r3, [pc, #204]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a000942:	f640      	.short	0xf640
1a000944:	4287      	cmp	r7, r0
1a000946:	625a      	.short	0x625a
		biasMatrix[10] = 267;
1a000948:	4b31      	ldr	r3, [pc, #196]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a00094a:	f240      	.short	0xf240
1a00094c:	120b      	asrs	r3, r1, #8
1a00094e:	629a      	.short	0x629a
		biasMatrix[11] = 217;
1a000950:	4b2f      	ldr	r3, [pc, #188]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a000952:	22d9      	.short	0x22d9
1a000954:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
1a000956:	e054      	.short	0xe054

	case 4: // 12 bias values of 24 bits each 								BIAS_MINI_DVS
		biasMatrix[0] = 1966;
1a000958:	4b2d      	ldr	r3, [pc, #180]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a00095a:	f240 72ae 	movw	r2, #1966	; 0x7ae
1a00095e:	601a      	str	r2, [r3, #0]
		biasMatrix[1] = 1137667;
1a000960:	4a314b2b 	.word	0x4a314b2b
1a000964:	605a      	str	r2, [r3, #4]
		biasMatrix[2] = 16777215;
1a000966:	4b2a      	.short	0x4b2a
1a000968:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
1a00096c:	4b28609a 	.word	0x4b28609a
		biasMatrix[3] = 8053458;
1a000970:	4a36      	ldr	r2, [pc, #216]	; (1a000a4c <DVS128BiasLoadDefaultSet+0x274>)
1a000972:	60da      	.short	0x60da
		biasMatrix[4] = 62;
1a000974:	4b26      	ldr	r3, [pc, #152]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a000976:	223e      	.short	0x223e
1a000978:	611a      	str	r2, [r3, #16]
		biasMatrix[5] = 160712;
1a00097a:	4b25      	.short	0x4b25
1a00097c:	4a2c      	ldr	r2, [pc, #176]	; (1a000a30 <DVS128BiasLoadDefaultSet+0x258>)
1a00097e:	615a      	.short	0x615a
		biasMatrix[6] = 944;
1a000980:	4b23      	ldr	r3, [pc, #140]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a000982:	f44f      	.short	0xf44f
1a000984:	726c      	strb	r4, [r5, #9]
1a000986:	619a      	str	r2, [r3, #24]
		biasMatrix[7] = 16777215;
1a000988:	4b21      	ldr	r3, [pc, #132]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a00098a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
1a00098e:	61da      	.short	0x61da
		biasMatrix[8] = 480988;
1a000990:	4b1f      	ldr	r3, [pc, #124]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a000992:	4a2f      	.short	0x4a2f
1a000994:	621a      	str	r2, [r3, #32]
		biasMatrix[9] = 3207;
1a000996:	4b1e      	.short	0x4b1e
1a000998:	f640 4287 	movw	r2, #3207	; 0xc87
1a00099c:	625a      	str	r2, [r3, #36]	; 0x24
		biasMatrix[10] = 278;
1a00099e:	4b1c      	ldr	r3, [pc, #112]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0009a0:	f44f 728b 	mov.w	r2, #278	; 0x116
1a0009a4:	629a      	str	r2, [r3, #40]	; 0x28
		biasMatrix[11] = 217;
1a0009a6:	4b1a      	ldr	r3, [pc, #104]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0009a8:	22d9      	movs	r2, #217	; 0xd9
1a0009aa:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
1a0009ac:	e029      	b.n	1a000a02 <DVS128BiasLoadDefaultSet+0x22a>

	case 5: // 12 bias values of 24 bits each 								BIAS_BRAGFOST - on/off balanced
		biasMatrix[0] = 1067;	  		// Tmpdiff128.IPot.cas
1a0009ae:	4b18      	ldr	r3, [pc, #96]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0009b0:	f240 422b 	movw	r2, #1067	; 0x42b
1a0009b4:	601a      	str	r2, [r3, #0]
		biasMatrix[1] = 12316;			// Tmpdiff128.IPot.injGnd
1a0009b6:	4b16      	ldr	r3, [pc, #88]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0009b8:	f243 021c 	movw	r2, #12316	; 0x301c
1a0009bc:	605a      	str	r2, [r3, #4]
		biasMatrix[2] = 16777215;			// Tmpdiff128.IPot.reqPd
1a0009be:	4b14      	ldr	r3, [pc, #80]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0009c0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
1a0009c4:	609a      	str	r2, [r3, #8]
		biasMatrix[3] = 5579731;			// Tmpdiff128.IPot.puX
1a0009c6:	4b12      	ldr	r3, [pc, #72]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0009c8:	60da4a15 	.word	0x60da4a15
		biasMatrix[4] = 60;			// Tmpdiff128.IPot.diffOff
1a0009cc:	4b10      	ldr	r3, [pc, #64]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0009ce:	223c      	.short	0x223c
1a0009d0:	611a      	str	r2, [r3, #16]
		biasMatrix[5] = 427594;			// Tmpdiff128.IPot.req
1a0009d2:	4b0f      	.short	0x4b0f
1a0009d4:	4a10      	ldr	r2, [pc, #64]	; (1a000a18 <DVS128BiasLoadDefaultSet+0x240>)
1a0009d6:	615a      	.short	0x615a
		biasMatrix[6] = 0;			// Tmpdiff128.IPot.refr
1a0009d8:	4b0d      	ldr	r3, [pc, #52]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0009da:	2200      	movs	r2, #0
1a0009dc:	4b0c619a 	.word	0x4b0c619a
		biasMatrix[7] = 16777215;			// Tmpdiff128.IPot.puY
1a0009e0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
1a0009e4:	4b0a61da 	.word	0x4b0a61da
		biasMatrix[8] = 567391;			// Tmpdiff128.IPot.diffOn
1a0009e8:	4a0e      	ldr	r2, [pc, #56]	; (1a000a24 <DVS128BiasLoadDefaultSet+0x24c>)
1a0009ea:	621a      	.short	0x621a
		biasMatrix[9] = 19187;			// Tmpdiff128.IPot.diff
1a0009ec:	4b08      	ldr	r3, [pc, #32]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0009ee:	f644 22f3 	movw	r2, #19187	; 0x4af3
1a0009f2:	625a      	.short	0x625a
		biasMatrix[10] = 39;			// Tmpdiff128.IPot.foll
1a0009f4:	4b06      	ldr	r3, [pc, #24]	; (1a000a10 <DVS128BiasLoadDefaultSet+0x238>)
1a0009f6:	2227      	.short	0x2227
1a0009f8:	629a      	str	r2, [r3, #40]	; 0x28
		biasMatrix[11] = 4;			// Tmpdiff128.IPot.Pr
1a0009fa:	4b05      	.short	0x4b05
1a0009fc:	2204      	movs	r2, #4
1a0009fe:	62da      	.short	0x62da
		break;
1a000a00:	bf00      	nop

	}
}
1a000a02:	bf00      	.short	0xbf00
1a000a04:	370c      	adds	r7, #12
1a000a06:	46bd      	mov	sp, r7
1a000a08:	7b04f85d 	.word	0x7b04f85d
1a000a0c:	4770      	bx	lr
1a000a0e:	bf00      	nop
1a000a10:	100864e8 	.word	0x100864e8
1a000a14:	23d4      	movs	r3, #212	; 0xd4
1a000a16:	0055      	lsls	r5, r2, #1
1a000a18:	0006864a 	.word	0x0006864a
1a000a1c:	853d      	strh	r5, [r7, #40]	; 0x28
1a000a1e:	0004      	movs	r4, r0
1a000a20:	005523d3 	.word	0x005523d3
1a000a24:	a85f      	add	r0, sp, #380	; 0x17c
1a000a26:	0008      	movs	r0, r1
1a000a28:	00115c03 	.word	0x00115c03
1a000a2c:	e2d1      	b.n	1a000fd2 <DVS128BiasFlush+0x57e>
1a000a2e:	007a      	lsls	r2, r7, #1
1a000a30:	000273c8 	.word	0x000273c8
1a000a34:	21c7      	movs	r1, #199	; 0xc7
1a000a36:	0003      	.short	0x0003
1a000a38:	54b0      	strb	r0, [r6, r2]
1a000a3a:	0011      	.short	0x0011
1a000a3c:	e260      	b.n	1a000f00 <DVS128BiasFlush+0x4ac>
1a000a3e:	00ff      	.short	0x00ff
1a000a40:	03c6      	lsls	r6, r0, #15
1a000a42:	007b      	.short	0x007b
1a000a44:	73bf      	strb	r7, [r7, #14]
1a000a46:	0002      	.short	0x0002
1a000a48:	21bc      	movs	r1, #188	; 0xbc
1a000a4a:	0003      	.short	0x0003
1a000a4c:	e2d2      	b.n	1a000ff4 <DVS128BiasFlush+0x5a0>
1a000a4e:	007a      	.short	0x007a
1a000a50:	56dc      	ldrsb	r4, [r3, r3]
1a000a52:	0007      	.short	0x0007

1a000a54 <DVS128BiasFlush>:
						Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,GPIO_PORT_BIAS_CLOCK, GPIO_PIN_BIAS_CLOCK);\
						timerDelayUs(1);\
						Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,GPIO_PORT_BIAS_CLOCK, GPIO_PIN_BIAS_CLOCK);\
						timerDelayUs(1); }

void DVS128BiasFlush(uint32_t multiplier) {
1a000a54:	b580      	push	{r7, lr}
1a000a56:	b084      	.short	0xb084
1a000a58:	af00      	add	r7, sp, #0
1a000a5a:	6078      	str	r0, [r7, #4]
	uint32_t biasIndex, currentBias;

	for (biasIndex = 0; biasIndex < 12; biasIndex++) {
1a000a5c:	2300      	movs	r3, #0
1a000a5e:	60fb      	str	r3, [r7, #12]
1a000a60:	e31a      	b.n	1a001098 <DVS128BiasFlush+0x644>
		currentBias = biasMatrix[biasIndex];
1a000a62:	4abe      	ldr	r2, [pc, #760]	; (1a000d5c <DVS128BiasFlush+0x308>)
1a000a64:	68fb      	ldr	r3, [r7, #12]
1a000a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000a6a:	60bb      	str	r3, [r7, #8]

		currentBias *= multiplier;
1a000a6c:	68bb      	ldr	r3, [r7, #8]
1a000a6e:	687a      	ldr	r2, [r7, #4]
1a000a70:	fb02 f303 	mul.w	r3, r2, r3
1a000a74:	60bb      	str	r3, [r7, #8]
		if (currentBias > 0xFFFFFF)
1a000a76:	68bb      	.short	0x68bb
1a000a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1a000a7c:	f06fd302 	.word	0xf06fd302
			currentBias = 0xFFFFFF;
1a000a80:	437f      	muls	r7, r7
1a000a82:	60bb      	.short	0x60bb

		BOUT(currentBias & 0x800000);
1a000a84:	68bb      	ldr	r3, [r7, #8]
1a000a86:	f403      	.short	0xf403
1a000a88:	0300      	lsls	r0, r0, #12
1a000a8a:	2b00      	cmp	r3, #0
1a000a8c:	d005      	beq.n	1a000a9a <DVS128BiasFlush+0x46>
1a000a8e:	220a      	.short	0x220a
1a000a90:	2105      	movs	r1, #5
1a000a92:	48b3      	ldr	r0, [pc, #716]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000a94:	f7ff fc6e 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000a98:	e004      	b.n	1a000aa4 <DVS128BiasFlush+0x50>
1a000a9a:	220a      	.short	0x220a
1a000a9c:	2105      	movs	r1, #5
1a000a9e:	48b0      	.short	0x48b0
1a000aa0:	f7ff fc82 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000aa4:	220f      	movs	r2, #15
1a000aa6:	2101      	movs	r1, #1
1a000aa8:	48ad      	ldr	r0, [pc, #692]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000aaa:	f7ff fc63 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000aae:	2001      	movs	r0, #1
1a000ab0:	f005 fdea 	bl	1a006688 <timerDelayUs>
1a000ab4:	220f      	movs	r2, #15
1a000ab6:	2101      	movs	r1, #1
1a000ab8:	48a9      	ldr	r0, [pc, #676]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000aba:	f7ff fc75 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000abe:	2001      	movs	r0, #1
1a000ac0:	f005 fde2 	bl	1a006688 <timerDelayUs>
		BOUT(currentBias & 0x400000);
1a000ac4:	f40368bb 	.word	0xf40368bb
1a000ac8:	0380      	lsls	r0, r0, #14
1a000aca:	2b00      	.short	0x2b00
1a000acc:	d005      	beq.n	1a000ada <DVS128BiasFlush+0x86>
1a000ace:	220a      	.short	0x220a
1a000ad0:	2105      	movs	r1, #5
1a000ad2:	48a3      	.short	0x48a3
1a000ad4:	f7ff fc4e 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000ad8:	220ae004 	.word	0x220ae004
1a000adc:	2105      	movs	r1, #5
1a000ade:	48a0      	ldr	r0, [pc, #640]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000ae0:	f7ff fc62 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000ae4:	220f      	movs	r2, #15
1a000ae6:	2101      	.short	0x2101
1a000ae8:	489d      	ldr	r0, [pc, #628]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000aea:	f7ff      	.short	0xf7ff
1a000aec:	fc43 2001 	mcrr2	0, 0, r2, r3, cr1
1a000af0:	fdcaf005 	.word	0xfdcaf005
1a000af4:	220f      	movs	r2, #15
1a000af6:	2101      	.short	0x2101
1a000af8:	4899      	ldr	r0, [pc, #612]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000afa:	f7ff      	.short	0xf7ff
1a000afc:	fc55 2001 	mrrc2	0, 0, r2, r5, cr1
1a000b00:	fdc2f005 	.word	0xfdc2f005
		BOUT(currentBias & 0x200000);
1a000b04:	68bb      	ldr	r3, [r7, #8]
1a000b06:	f403      	.short	0xf403
1a000b08:	1300      	asrs	r0, r0, #12
1a000b0a:	2b00      	.short	0x2b00
1a000b0c:	d005      	beq.n	1a000b1a <DVS128BiasFlush+0xc6>
1a000b0e:	220a      	.short	0x220a
1a000b10:	2105      	movs	r1, #5
1a000b12:	4893      	.short	0x4893
1a000b14:	f7ff fc2e 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000b18:	220ae004 	.word	0x220ae004
1a000b1c:	2105      	movs	r1, #5
1a000b1e:	4890      	.short	0x4890
1a000b20:	f7ff fc42 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000b24:	2101220f 	.word	0x2101220f
1a000b28:	488d      	ldr	r0, [pc, #564]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000b2a:	f7ff      	.short	0xf7ff
1a000b2c:	fc23 2001 	stc2	0, cr2, [r3], #-4
1a000b30:	fdaaf005 	.word	0xfdaaf005
1a000b34:	220f      	movs	r2, #15
1a000b36:	2101      	.short	0x2101
1a000b38:	4889      	ldr	r0, [pc, #548]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000b3a:	f7ff      	.short	0xf7ff
1a000b3c:	fc35 2001 	ldc2	0, cr2, [r5], #-4
1a000b40:	f005 fda2 	bl	1a006688 <timerDelayUs>
		BOUT(currentBias & 0x100000);
1a000b44:	68bb      	ldr	r3, [r7, #8]
1a000b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
1a000b4a:	2b00      	cmp	r3, #0
1a000b4c:	220ad005 	.word	0x220ad005
1a000b50:	2105      	movs	r1, #5
1a000b52:	4883      	.short	0x4883
1a000b54:	f7ff fc0e 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000b58:	220ae004 	.word	0x220ae004
1a000b5c:	2105      	movs	r1, #5
1a000b5e:	4880      	.short	0x4880
1a000b60:	f7ff fc22 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000b64:	2101220f 	.word	0x2101220f
1a000b68:	487d      	ldr	r0, [pc, #500]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000b6a:	f7ff      	.short	0xf7ff
1a000b6c:	fc03 2001 	stc2	0, cr2, [r3], {1}
1a000b70:	fd8af005 	.word	0xfd8af005
1a000b74:	220f      	movs	r2, #15
1a000b76:	2101      	movs	r1, #1
1a000b78:	4879      	ldr	r0, [pc, #484]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000b7a:	f7ff fc15 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000b7e:	2001      	movs	r0, #1
1a000b80:	f005 fd82 	bl	1a006688 <timerDelayUs>

		BOUT(currentBias & 0x80000);
1a000b84:	f40368bb 	.word	0xf40368bb
1a000b88:	2300      	movs	r3, #0
1a000b8a:	2b00      	cmp	r3, #0
1a000b8c:	d005      	beq.n	1a000b9a <DVS128BiasFlush+0x146>
1a000b8e:	220a      	movs	r2, #10
1a000b90:	48732105 	.word	0x48732105
1a000b94:	f7ff fbee 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000b98:	220ae004 	.word	0x220ae004
1a000b9c:	2105      	movs	r1, #5
1a000b9e:	4870      	.short	0x4870
1a000ba0:	f7ff fc02 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000ba4:	2101220f 	.word	0x2101220f
1a000ba8:	486d      	ldr	r0, [pc, #436]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000baa:	f7ff      	.short	0xf7ff
1a000bac:	fbe3 2001 	umlal	r2, r0, r3, r1
1a000bb0:	fd6af005 	.word	0xfd6af005
1a000bb4:	220f      	movs	r2, #15
1a000bb6:	2101      	.short	0x2101
1a000bb8:	4869      	ldr	r0, [pc, #420]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000bba:	f7ff      	.short	0xf7ff
1a000bbc:	fbf5 2001 			; <UNDEFINED> instruction: 0xfbf52001
1a000bc0:	f005 fd62 	bl	1a006688 <timerDelayUs>
		BOUT(currentBias & 0x40000);
1a000bc4:	68bb      	ldr	r3, [r7, #8]
1a000bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
1a000bca:	2b00      	cmp	r3, #0
1a000bcc:	d005      	beq.n	1a000bda <DVS128BiasFlush+0x186>
1a000bce:	220a      	movs	r2, #10
1a000bd0:	2105      	movs	r1, #5
1a000bd2:	4863      	ldr	r0, [pc, #396]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000bd4:	f7ff fbce 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000bd8:	e004      	b.n	1a000be4 <DVS128BiasFlush+0x190>
1a000bda:	220a      	movs	r2, #10
1a000bdc:	2105      	movs	r1, #5
1a000bde:	4860      	ldr	r0, [pc, #384]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000be0:	f7ff fbe2 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000be4:	220f      	movs	r2, #15
1a000be6:	2101      	movs	r1, #1
1a000be8:	485d      	ldr	r0, [pc, #372]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000bea:	f7ff fbc3 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000bee:	2001      	movs	r0, #1
1a000bf0:	f005 fd4a 	bl	1a006688 <timerDelayUs>
1a000bf4:	220f      	movs	r2, #15
1a000bf6:	2101      	movs	r1, #1
1a000bf8:	4859      	ldr	r0, [pc, #356]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000bfa:	f7ff fbd5 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000bfe:	2001      	movs	r0, #1
1a000c00:	f005 fd42 	bl	1a006688 <timerDelayUs>
		BOUT(currentBias & 0x20000);
1a000c04:	68bb      	ldr	r3, [r7, #8]
1a000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
1a000c0a:	2b00      	cmp	r3, #0
1a000c0c:	d005      	beq.n	1a000c1a <DVS128BiasFlush+0x1c6>
1a000c0e:	220a      	movs	r2, #10
1a000c10:	2105      	movs	r1, #5
1a000c12:	4853      	ldr	r0, [pc, #332]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000c14:	f7ff fbae 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000c18:	e004      	b.n	1a000c24 <DVS128BiasFlush+0x1d0>
1a000c1a:	220a      	movs	r2, #10
1a000c1c:	2105      	movs	r1, #5
1a000c1e:	4850      	ldr	r0, [pc, #320]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000c20:	f7ff fbc2 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000c24:	220f      	movs	r2, #15
1a000c26:	2101      	movs	r1, #1
1a000c28:	484d      	ldr	r0, [pc, #308]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000c2a:	f7ff fba3 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000c2e:	2001      	movs	r0, #1
1a000c30:	f005 fd2a 	bl	1a006688 <timerDelayUs>
1a000c34:	220f      	movs	r2, #15
1a000c36:	2101      	movs	r1, #1
1a000c38:	4849      	ldr	r0, [pc, #292]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000c3a:	f7ff fbb5 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000c3e:	2001      	movs	r0, #1
1a000c40:	f005 fd22 	bl	1a006688 <timerDelayUs>
		BOUT(currentBias & 0x10000);
1a000c44:	68bb      	ldr	r3, [r7, #8]
1a000c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
1a000c4a:	2b00      	cmp	r3, #0
1a000c4c:	d005      	beq.n	1a000c5a <DVS128BiasFlush+0x206>
1a000c4e:	220a      	movs	r2, #10
1a000c50:	2105      	movs	r1, #5
1a000c52:	4843      	ldr	r0, [pc, #268]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000c54:	f7ff fb8e 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000c58:	e004      	b.n	1a000c64 <DVS128BiasFlush+0x210>
1a000c5a:	220a      	movs	r2, #10
1a000c5c:	2105      	movs	r1, #5
1a000c5e:	4840      	ldr	r0, [pc, #256]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000c60:	f7ff fba2 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000c64:	220f      	movs	r2, #15
1a000c66:	2101      	movs	r1, #1
1a000c68:	483d      	ldr	r0, [pc, #244]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000c6a:	f7ff fb83 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000c6e:	2001      	movs	r0, #1
1a000c70:	f005 fd0a 	bl	1a006688 <timerDelayUs>
1a000c74:	220f      	movs	r2, #15
1a000c76:	2101      	movs	r1, #1
1a000c78:	4839      	ldr	r0, [pc, #228]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000c7a:	f7ff fb95 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000c7e:	2001      	movs	r0, #1
1a000c80:	f005 fd02 	bl	1a006688 <timerDelayUs>

		BOUT(currentBias & 0x8000);
1a000c84:	68bb      	ldr	r3, [r7, #8]
1a000c86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
1a000c8a:	2b00      	cmp	r3, #0
1a000c8c:	d005      	beq.n	1a000c9a <DVS128BiasFlush+0x246>
1a000c8e:	220a      	movs	r2, #10
1a000c90:	2105      	movs	r1, #5
1a000c92:	4833      	ldr	r0, [pc, #204]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000c94:	f7ff fb6e 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000c98:	e004      	b.n	1a000ca4 <DVS128BiasFlush+0x250>
1a000c9a:	220a      	movs	r2, #10
1a000c9c:	2105      	movs	r1, #5
1a000c9e:	4830      	ldr	r0, [pc, #192]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000ca0:	f7ff fb82 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000ca4:	220f      	movs	r2, #15
1a000ca6:	2101      	movs	r1, #1
1a000ca8:	482d      	ldr	r0, [pc, #180]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000caa:	f7ff fb63 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000cae:	2001      	movs	r0, #1
1a000cb0:	f005 fcea 	bl	1a006688 <timerDelayUs>
1a000cb4:	220f      	movs	r2, #15
1a000cb6:	2101      	movs	r1, #1
1a000cb8:	4829      	ldr	r0, [pc, #164]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000cba:	f7ff fb75 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000cbe:	2001      	movs	r0, #1
1a000cc0:	f005 fce2 	bl	1a006688 <timerDelayUs>
		BOUT(currentBias & 0x4000);
1a000cc4:	68bb      	ldr	r3, [r7, #8]
1a000cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
1a000cca:	2b00      	cmp	r3, #0
1a000ccc:	d005      	beq.n	1a000cda <DVS128BiasFlush+0x286>
1a000cce:	220a      	movs	r2, #10
1a000cd0:	2105      	movs	r1, #5
1a000cd2:	4823      	ldr	r0, [pc, #140]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000cd4:	f7ff fb4e 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000cd8:	e004      	b.n	1a000ce4 <DVS128BiasFlush+0x290>
1a000cda:	220a      	movs	r2, #10
1a000cdc:	2105      	movs	r1, #5
1a000cde:	4820      	ldr	r0, [pc, #128]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000ce0:	f7ff fb62 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000ce4:	220f      	movs	r2, #15
1a000ce6:	2101      	movs	r1, #1
1a000ce8:	481d      	ldr	r0, [pc, #116]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000cea:	f7ff fb43 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000cee:	2001      	movs	r0, #1
1a000cf0:	f005 fcca 	bl	1a006688 <timerDelayUs>
1a000cf4:	220f      	movs	r2, #15
1a000cf6:	2101      	movs	r1, #1
1a000cf8:	4819      	ldr	r0, [pc, #100]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000cfa:	f7ff fb55 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000cfe:	2001      	movs	r0, #1
1a000d00:	f005 fcc2 	bl	1a006688 <timerDelayUs>
		BOUT(currentBias & 0x2000);
1a000d04:	68bb      	ldr	r3, [r7, #8]
1a000d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
1a000d0a:	2b00      	cmp	r3, #0
1a000d0c:	d005      	beq.n	1a000d1a <DVS128BiasFlush+0x2c6>
1a000d0e:	220a      	movs	r2, #10
1a000d10:	2105      	movs	r1, #5
1a000d12:	4813      	ldr	r0, [pc, #76]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000d14:	f7ff fb2e 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000d18:	e004      	b.n	1a000d24 <DVS128BiasFlush+0x2d0>
1a000d1a:	220a      	movs	r2, #10
1a000d1c:	2105      	movs	r1, #5
1a000d1e:	4810      	ldr	r0, [pc, #64]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000d20:	f7ff fb42 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000d24:	220f      	movs	r2, #15
1a000d26:	2101      	movs	r1, #1
1a000d28:	480d      	ldr	r0, [pc, #52]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000d2a:	f7ff fb23 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000d2e:	2001      	movs	r0, #1
1a000d30:	f005 fcaa 	bl	1a006688 <timerDelayUs>
1a000d34:	220f      	movs	r2, #15
1a000d36:	2101      	movs	r1, #1
1a000d38:	4809      	ldr	r0, [pc, #36]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000d3a:	f7ff fb35 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000d3e:	2001      	movs	r0, #1
1a000d40:	f005 fca2 	bl	1a006688 <timerDelayUs>
		BOUT(currentBias & 0x1000);
1a000d44:	68bb      	ldr	r3, [r7, #8]
1a000d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
1a000d4a:	2b00      	cmp	r3, #0
1a000d4c:	d00a      	beq.n	1a000d64 <DVS128BiasFlush+0x310>
1a000d4e:	220a      	movs	r2, #10
1a000d50:	2105      	movs	r1, #5
1a000d52:	4803      	ldr	r0, [pc, #12]	; (1a000d60 <DVS128BiasFlush+0x30c>)
1a000d54:	f7ff fb0e 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000d58:	e009      	b.n	1a000d6e <DVS128BiasFlush+0x31a>
1a000d5a:	bf00      	nop
1a000d5c:	100864e8 	.word	0x100864e8
1a000d60:	400f4000 	.word	0x400f4000
1a000d64:	220a      	movs	r2, #10
1a000d66:	2105      	movs	r1, #5
1a000d68:	48be      	ldr	r0, [pc, #760]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000d6a:	f7ff fb1d 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000d6e:	220f      	movs	r2, #15
1a000d70:	2101      	movs	r1, #1
1a000d72:	48bc      	ldr	r0, [pc, #752]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000d74:	f7ff fafe 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000d78:	2001      	movs	r0, #1
1a000d7a:	f005 fc85 	bl	1a006688 <timerDelayUs>
1a000d7e:	220f      	movs	r2, #15
1a000d80:	2101      	movs	r1, #1
1a000d82:	48b8      	ldr	r0, [pc, #736]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000d84:	f7ff fb10 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000d88:	2001      	movs	r0, #1
1a000d8a:	f005 fc7d 	bl	1a006688 <timerDelayUs>

		BOUT(currentBias & 0x800);
1a000d8e:	68bb      	ldr	r3, [r7, #8]
1a000d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
1a000d94:	2b00      	cmp	r3, #0
1a000d96:	d005      	beq.n	1a000da4 <DVS128BiasFlush+0x350>
1a000d98:	220a      	movs	r2, #10
1a000d9a:	2105      	movs	r1, #5
1a000d9c:	48b1      	ldr	r0, [pc, #708]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000d9e:	f7ff fae9 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000da2:	e004      	b.n	1a000dae <DVS128BiasFlush+0x35a>
1a000da4:	220a      	movs	r2, #10
1a000da6:	2105      	movs	r1, #5
1a000da8:	48ae      	ldr	r0, [pc, #696]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000daa:	f7ff fafd 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000dae:	220f      	movs	r2, #15
1a000db0:	2101      	movs	r1, #1
1a000db2:	48ac      	ldr	r0, [pc, #688]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000db4:	f7ff fade 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000db8:	2001      	movs	r0, #1
1a000dba:	f005 fc65 	bl	1a006688 <timerDelayUs>
1a000dbe:	220f      	movs	r2, #15
1a000dc0:	2101      	movs	r1, #1
1a000dc2:	48a8      	ldr	r0, [pc, #672]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000dc4:	f7ff faf0 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000dc8:	2001      	movs	r0, #1
1a000dca:	f005 fc5d 	bl	1a006688 <timerDelayUs>
		BOUT(currentBias & 0x400);
1a000dce:	68bb      	ldr	r3, [r7, #8]
1a000dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
1a000dd4:	2b00      	cmp	r3, #0
1a000dd6:	d005      	beq.n	1a000de4 <DVS128BiasFlush+0x390>
1a000dd8:	220a      	movs	r2, #10
1a000dda:	2105      	movs	r1, #5
1a000ddc:	48a1      	ldr	r0, [pc, #644]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000dde:	f7ff fac9 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000de2:	e004      	b.n	1a000dee <DVS128BiasFlush+0x39a>
1a000de4:	220a      	movs	r2, #10
1a000de6:	2105      	movs	r1, #5
1a000de8:	489e      	ldr	r0, [pc, #632]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000dea:	f7ff fadd 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000dee:	220f      	movs	r2, #15
1a000df0:	2101      	movs	r1, #1
1a000df2:	489c      	ldr	r0, [pc, #624]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000df4:	f7ff fabe 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000df8:	2001      	movs	r0, #1
1a000dfa:	f005 fc45 	bl	1a006688 <timerDelayUs>
1a000dfe:	220f      	movs	r2, #15
1a000e00:	2101      	movs	r1, #1
1a000e02:	4898      	ldr	r0, [pc, #608]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000e04:	f7ff fad0 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000e08:	2001      	movs	r0, #1
1a000e0a:	f005 fc3d 	bl	1a006688 <timerDelayUs>
		BOUT(currentBias & 0x200);
1a000e0e:	68bb      	ldr	r3, [r7, #8]
1a000e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
1a000e14:	2b00      	cmp	r3, #0
1a000e16:	d005      	beq.n	1a000e24 <DVS128BiasFlush+0x3d0>
1a000e18:	220a      	movs	r2, #10
1a000e1a:	2105      	movs	r1, #5
1a000e1c:	4891      	ldr	r0, [pc, #580]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000e1e:	f7ff faa9 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000e22:	e004      	b.n	1a000e2e <DVS128BiasFlush+0x3da>
1a000e24:	220a      	movs	r2, #10
1a000e26:	2105      	movs	r1, #5
1a000e28:	488e      	ldr	r0, [pc, #568]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000e2a:	f7ff fabd 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000e2e:	220f      	movs	r2, #15
1a000e30:	2101      	movs	r1, #1
1a000e32:	488c      	ldr	r0, [pc, #560]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000e34:	f7ff fa9e 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000e38:	2001      	movs	r0, #1
1a000e3a:	f005 fc25 	bl	1a006688 <timerDelayUs>
1a000e3e:	220f      	movs	r2, #15
1a000e40:	2101      	movs	r1, #1
1a000e42:	4888      	ldr	r0, [pc, #544]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000e44:	f7ff fab0 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000e48:	2001      	movs	r0, #1
1a000e4a:	f005 fc1d 	bl	1a006688 <timerDelayUs>
		BOUT(currentBias & 0x100);
1a000e4e:	68bb      	ldr	r3, [r7, #8]
1a000e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a000e54:	2b00      	cmp	r3, #0
1a000e56:	d005      	beq.n	1a000e64 <DVS128BiasFlush+0x410>
1a000e58:	220a      	movs	r2, #10
1a000e5a:	2105      	movs	r1, #5
1a000e5c:	4881      	ldr	r0, [pc, #516]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000e5e:	f7ff fa89 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000e62:	e004      	b.n	1a000e6e <DVS128BiasFlush+0x41a>
1a000e64:	220a      	movs	r2, #10
1a000e66:	2105      	movs	r1, #5
1a000e68:	487e      	ldr	r0, [pc, #504]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000e6a:	f7ff fa9d 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000e6e:	220f      	movs	r2, #15
1a000e70:	2101      	movs	r1, #1
1a000e72:	487c      	ldr	r0, [pc, #496]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000e74:	f7ff fa7e 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000e78:	2001      	movs	r0, #1
1a000e7a:	f005 fc05 	bl	1a006688 <timerDelayUs>
1a000e7e:	220f      	movs	r2, #15
1a000e80:	2101      	movs	r1, #1
1a000e82:	4878      	ldr	r0, [pc, #480]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000e84:	f7ff fa90 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000e88:	2001      	movs	r0, #1
1a000e8a:	f005 fbfd 	bl	1a006688 <timerDelayUs>

		BOUT(currentBias & 0x80);
1a000e8e:	68bb      	ldr	r3, [r7, #8]
1a000e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
1a000e94:	2b00      	cmp	r3, #0
1a000e96:	d005      	beq.n	1a000ea4 <DVS128BiasFlush+0x450>
1a000e98:	220a      	movs	r2, #10
1a000e9a:	2105      	movs	r1, #5
1a000e9c:	4871      	ldr	r0, [pc, #452]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000e9e:	f7ff fa69 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000ea2:	e004      	b.n	1a000eae <DVS128BiasFlush+0x45a>
1a000ea4:	220a      	movs	r2, #10
1a000ea6:	2105      	movs	r1, #5
1a000ea8:	486e      	ldr	r0, [pc, #440]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000eaa:	f7ff fa7d 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000eae:	220f      	movs	r2, #15
1a000eb0:	2101      	movs	r1, #1
1a000eb2:	486c      	ldr	r0, [pc, #432]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000eb4:	f7ff fa5e 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000eb8:	2001      	movs	r0, #1
1a000eba:	f005 fbe5 	bl	1a006688 <timerDelayUs>
1a000ebe:	220f      	movs	r2, #15
1a000ec0:	2101      	movs	r1, #1
1a000ec2:	4868      	ldr	r0, [pc, #416]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000ec4:	f7ff fa70 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000ec8:	2001      	movs	r0, #1
1a000eca:	f005 fbdd 	bl	1a006688 <timerDelayUs>
		BOUT(currentBias & 0x40);
1a000ece:	68bb      	ldr	r3, [r7, #8]
1a000ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a000ed4:	2b00      	cmp	r3, #0
1a000ed6:	d005      	beq.n	1a000ee4 <DVS128BiasFlush+0x490>
1a000ed8:	220a      	movs	r2, #10
1a000eda:	2105      	movs	r1, #5
1a000edc:	4861      	ldr	r0, [pc, #388]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000ede:	f7ff fa49 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000ee2:	e004      	b.n	1a000eee <DVS128BiasFlush+0x49a>
1a000ee4:	220a      	movs	r2, #10
1a000ee6:	2105      	movs	r1, #5
1a000ee8:	485e      	ldr	r0, [pc, #376]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000eea:	f7ff fa5d 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000eee:	220f      	movs	r2, #15
1a000ef0:	2101      	movs	r1, #1
1a000ef2:	485c      	ldr	r0, [pc, #368]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000ef4:	f7ff fa3e 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000ef8:	2001      	movs	r0, #1
1a000efa:	f005 fbc5 	bl	1a006688 <timerDelayUs>
1a000efe:	220f      	movs	r2, #15
1a000f00:	2101      	movs	r1, #1
1a000f02:	4858      	ldr	r0, [pc, #352]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000f04:	f7ff fa50 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000f08:	2001      	movs	r0, #1
1a000f0a:	f005 fbbd 	bl	1a006688 <timerDelayUs>
		BOUT(currentBias & 0x20);
1a000f0e:	68bb      	ldr	r3, [r7, #8]
1a000f10:	f003 0320 	and.w	r3, r3, #32
1a000f14:	2b00      	cmp	r3, #0
1a000f16:	d005      	beq.n	1a000f24 <DVS128BiasFlush+0x4d0>
1a000f18:	220a      	movs	r2, #10
1a000f1a:	2105      	movs	r1, #5
1a000f1c:	4851      	ldr	r0, [pc, #324]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000f1e:	f7ff fa29 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000f22:	e004      	b.n	1a000f2e <DVS128BiasFlush+0x4da>
1a000f24:	220a      	movs	r2, #10
1a000f26:	2105      	movs	r1, #5
1a000f28:	484e      	ldr	r0, [pc, #312]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000f2a:	f7ff fa3d 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000f2e:	220f      	movs	r2, #15
1a000f30:	2101      	movs	r1, #1
1a000f32:	484c      	ldr	r0, [pc, #304]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000f34:	f7ff fa1e 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000f38:	2001      	movs	r0, #1
1a000f3a:	f005 fba5 	bl	1a006688 <timerDelayUs>
1a000f3e:	220f      	movs	r2, #15
1a000f40:	2101      	movs	r1, #1
1a000f42:	4848      	ldr	r0, [pc, #288]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000f44:	f7ff fa30 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000f48:	2001      	movs	r0, #1
1a000f4a:	f005 fb9d 	bl	1a006688 <timerDelayUs>
		BOUT(currentBias & 0x10);
1a000f4e:	68bb      	ldr	r3, [r7, #8]
1a000f50:	f003 0310 	and.w	r3, r3, #16
1a000f54:	2b00      	cmp	r3, #0
1a000f56:	d005      	beq.n	1a000f64 <DVS128BiasFlush+0x510>
1a000f58:	220a      	movs	r2, #10
1a000f5a:	2105      	movs	r1, #5
1a000f5c:	4841      	ldr	r0, [pc, #260]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000f5e:	f7ff fa09 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000f62:	e004      	b.n	1a000f6e <DVS128BiasFlush+0x51a>
1a000f64:	220a      	movs	r2, #10
1a000f66:	2105      	movs	r1, #5
1a000f68:	483e      	ldr	r0, [pc, #248]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000f6a:	f7ff fa1d 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000f6e:	220f      	movs	r2, #15
1a000f70:	2101      	movs	r1, #1
1a000f72:	483c      	ldr	r0, [pc, #240]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000f74:	f7ff f9fe 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000f78:	2001      	movs	r0, #1
1a000f7a:	f005 fb85 	bl	1a006688 <timerDelayUs>
1a000f7e:	220f      	movs	r2, #15
1a000f80:	2101      	movs	r1, #1
1a000f82:	4838      	ldr	r0, [pc, #224]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000f84:	f7ff fa10 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000f88:	2001      	movs	r0, #1
1a000f8a:	f005 fb7d 	bl	1a006688 <timerDelayUs>

		BOUT(currentBias & 0x8);
1a000f8e:	68bb      	ldr	r3, [r7, #8]
1a000f90:	f003 0308 	and.w	r3, r3, #8
1a000f94:	2b00      	cmp	r3, #0
1a000f96:	d005      	beq.n	1a000fa4 <DVS128BiasFlush+0x550>
1a000f98:	220a      	movs	r2, #10
1a000f9a:	2105      	movs	r1, #5
1a000f9c:	4831      	ldr	r0, [pc, #196]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000f9e:	f7ff f9e9 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000fa2:	e004      	b.n	1a000fae <DVS128BiasFlush+0x55a>
1a000fa4:	220a      	movs	r2, #10
1a000fa6:	2105      	movs	r1, #5
1a000fa8:	482e      	ldr	r0, [pc, #184]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000faa:	f7ff f9fd 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000fae:	220f      	movs	r2, #15
1a000fb0:	2101      	movs	r1, #1
1a000fb2:	482c      	ldr	r0, [pc, #176]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000fb4:	f7ff f9de 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000fb8:	2001      	movs	r0, #1
1a000fba:	f005 fb65 	bl	1a006688 <timerDelayUs>
1a000fbe:	220f      	movs	r2, #15
1a000fc0:	2101      	movs	r1, #1
1a000fc2:	4828      	ldr	r0, [pc, #160]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000fc4:	f7ff f9f0 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000fc8:	2001      	movs	r0, #1
1a000fca:	f005 fb5d 	bl	1a006688 <timerDelayUs>
		BOUT(currentBias & 0x4);
1a000fce:	68bb      	ldr	r3, [r7, #8]
1a000fd0:	f003 0304 	and.w	r3, r3, #4
1a000fd4:	2b00      	cmp	r3, #0
1a000fd6:	d005      	beq.n	1a000fe4 <DVS128BiasFlush+0x590>
1a000fd8:	220a      	movs	r2, #10
1a000fda:	2105      	movs	r1, #5
1a000fdc:	4821      	ldr	r0, [pc, #132]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000fde:	f7ff f9c9 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000fe2:	e004      	b.n	1a000fee <DVS128BiasFlush+0x59a>
1a000fe4:	220a      	movs	r2, #10
1a000fe6:	2105      	movs	r1, #5
1a000fe8:	481e      	ldr	r0, [pc, #120]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000fea:	f7ff f9dd 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a000fee:	220f      	movs	r2, #15
1a000ff0:	2101      	movs	r1, #1
1a000ff2:	481c      	ldr	r0, [pc, #112]	; (1a001064 <DVS128BiasFlush+0x610>)
1a000ff4:	f7ff f9be 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a000ff8:	2001      	movs	r0, #1
1a000ffa:	f005 fb45 	bl	1a006688 <timerDelayUs>
1a000ffe:	220f      	movs	r2, #15
1a001000:	2101      	movs	r1, #1
1a001002:	4818      	ldr	r0, [pc, #96]	; (1a001064 <DVS128BiasFlush+0x610>)
1a001004:	f7ff f9d0 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a001008:	2001      	movs	r0, #1
1a00100a:	f005 fb3d 	bl	1a006688 <timerDelayUs>
		BOUT(currentBias & 0x2);
1a00100e:	68bb      	ldr	r3, [r7, #8]
1a001010:	f003 0302 	and.w	r3, r3, #2
1a001014:	2b00      	cmp	r3, #0
1a001016:	d005      	beq.n	1a001024 <DVS128BiasFlush+0x5d0>
1a001018:	220a      	movs	r2, #10
1a00101a:	2105      	movs	r1, #5
1a00101c:	4811      	ldr	r0, [pc, #68]	; (1a001064 <DVS128BiasFlush+0x610>)
1a00101e:	f7ff f9a9 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a001022:	e004      	b.n	1a00102e <DVS128BiasFlush+0x5da>
1a001024:	220a      	movs	r2, #10
1a001026:	2105      	movs	r1, #5
1a001028:	480e      	ldr	r0, [pc, #56]	; (1a001064 <DVS128BiasFlush+0x610>)
1a00102a:	f7ff f9bd 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a00102e:	220f      	movs	r2, #15
1a001030:	2101      	movs	r1, #1
1a001032:	480c      	ldr	r0, [pc, #48]	; (1a001064 <DVS128BiasFlush+0x610>)
1a001034:	f7ff f99e 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a001038:	2001      	movs	r0, #1
1a00103a:	f005 fb25 	bl	1a006688 <timerDelayUs>
1a00103e:	220f      	movs	r2, #15
1a001040:	2101      	movs	r1, #1
1a001042:	4808      	ldr	r0, [pc, #32]	; (1a001064 <DVS128BiasFlush+0x610>)
1a001044:	f7ff f9b0 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a001048:	2001      	movs	r0, #1
1a00104a:	f005 fb1d 	bl	1a006688 <timerDelayUs>
		BOUT(currentBias & 0x1);
1a00104e:	68bb      	ldr	r3, [r7, #8]
1a001050:	f003 0301 	and.w	r3, r3, #1
1a001054:	2b00      	cmp	r3, #0
1a001056:	d007      	beq.n	1a001068 <DVS128BiasFlush+0x614>
1a001058:	220a      	movs	r2, #10
1a00105a:	2105      	movs	r1, #5
1a00105c:	4801      	ldr	r0, [pc, #4]	; (1a001064 <DVS128BiasFlush+0x610>)
1a00105e:	f7ff f989 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a001062:	e006      	b.n	1a001072 <DVS128BiasFlush+0x61e>
1a001064:	400f4000 	.word	0x400f4000
1a001068:	220a      	movs	r2, #10
1a00106a:	2105      	movs	r1, #5
1a00106c:	4816      	ldr	r0, [pc, #88]	; (1a0010c8 <DVS128BiasFlush+0x674>)
1a00106e:	f7ff f99b 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a001072:	220f      	movs	r2, #15
1a001074:	2101      	movs	r1, #1
1a001076:	4814      	ldr	r0, [pc, #80]	; (1a0010c8 <DVS128BiasFlush+0x674>)
1a001078:	f7ff f97c 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>
1a00107c:	2001      	movs	r0, #1
1a00107e:	f005 fb03 	bl	1a006688 <timerDelayUs>
1a001082:	220f      	movs	r2, #15
1a001084:	2101      	movs	r1, #1
1a001086:	4810      	ldr	r0, [pc, #64]	; (1a0010c8 <DVS128BiasFlush+0x674>)
1a001088:	f7ff f98e 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
1a00108c:	2001      	movs	r0, #1
1a00108e:	f005 fafb 	bl	1a006688 <timerDelayUs>
						timerDelayUs(1); }

void DVS128BiasFlush(uint32_t multiplier) {
	uint32_t biasIndex, currentBias;

	for (biasIndex = 0; biasIndex < 12; biasIndex++) {
1a001092:	68fb      	ldr	r3, [r7, #12]
1a001094:	3301      	adds	r3, #1
1a001096:	60fb      	str	r3, [r7, #12]
1a001098:	68fb      	ldr	r3, [r7, #12]
1a00109a:	2b0b      	cmp	r3, #11
1a00109c:	f67f ace1 	bls.w	1a000a62 <DVS128BiasFlush+0xe>
		BOUT(currentBias & 0x2);
		BOUT(currentBias & 0x1);

	}  // end of biasIndexclocking

	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, GPIO_PORT_BIAS_DATA, GPIO_PIN_BIAS_DATA); // set data pin to low just to have the same output all the time
1a0010a0:	220a      	movs	r2, #10
1a0010a2:	2105      	movs	r1, #5
1a0010a4:	4808      	ldr	r0, [pc, #32]	; (1a0010c8 <DVS128BiasFlush+0x674>)
1a0010a6:	f7ff f97f 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>

// trigger latch to push bias data to bias generators
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, GPIO_PORT_BIAS_LATCH, GPIO_PIN_BIAS_LATCH);
1a0010aa:	220c      	movs	r2, #12
1a0010ac:	2101      	movs	r1, #1
1a0010ae:	4806      	ldr	r0, [pc, #24]	; (1a0010c8 <DVS128BiasFlush+0x674>)
1a0010b0:	f7ff f97a 	bl	1a0003a8 <Chip_GPIO_SetPinOutLow>
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, GPIO_PORT_BIAS_LATCH, GPIO_PIN_BIAS_LATCH);
1a0010b4:	220c      	movs	r2, #12
1a0010b6:	2101      	movs	r1, #1
1a0010b8:	4803      	ldr	r0, [pc, #12]	; (1a0010c8 <DVS128BiasFlush+0x674>)
1a0010ba:	f7ff f95b 	bl	1a000374 <Chip_GPIO_SetPinOutHigh>

}
1a0010be:	bf00      	nop
1a0010c0:	3710      	adds	r7, #16
1a0010c2:	46bd      	mov	sp, r7
1a0010c4:	bd80      	pop	{r7, pc}
1a0010c6:	bf00      	nop
1a0010c8:	400f4000 	.word	0x400f4000

1a0010cc <startSlave>:
#endif

/*******************************************************************
 * Static function to Release SLAVE processor from reset
 *******************************************************************/
static void startSlave(void) {
1a0010cc:	b480      	push	{r7}
1a0010ce:	b083      	sub	sp, #12
1a0010d0:	af00      	add	r7, sp, #0

	volatile uint32_t u32REG, u32Val;

	/* Release Slave from reset, first read status */
	/* Notice, this is a read only register !!! */
	u32REG = RGU_RESET_ACTIVE_STATUS1;
1a0010d2:	4b0d      	ldr	r3, [pc, #52]	; (1a001108 <startSlave+0x3c>)
1a0010d4:	681b      	ldr	r3, [r3, #0]
1a0010d6:	607b      	str	r3, [r7, #4]

	/* If the M0 is being held in reset, release it */
	/* 1 = no reset, 0 = reset */
	while (!(u32REG & (1u << 24))) {
1a0010d8:	e00a      	b.n	1a0010f0 <startSlave+0x24>
		u32Val = (~(u32REG) & (~(1 << 24)));
1a0010da:	687b      	ldr	r3, [r7, #4]
1a0010dc:	43db      	mvns	r3, r3
1a0010de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
1a0010e2:	603b      	str	r3, [r7, #0]
		RGU_RESET_CTRL1 = u32Val;
1a0010e4:	4a09      	ldr	r2, [pc, #36]	; (1a00110c <startSlave+0x40>)
1a0010e6:	683b      	ldr	r3, [r7, #0]
1a0010e8:	6013      	str	r3, [r2, #0]
		u32REG = RGU_RESET_ACTIVE_STATUS1;
1a0010ea:	4b07      	ldr	r3, [pc, #28]	; (1a001108 <startSlave+0x3c>)
1a0010ec:	681b      	ldr	r3, [r3, #0]
1a0010ee:	607b      	str	r3, [r7, #4]
	/* Notice, this is a read only register !!! */
	u32REG = RGU_RESET_ACTIVE_STATUS1;

	/* If the M0 is being held in reset, release it */
	/* 1 = no reset, 0 = reset */
	while (!(u32REG & (1u << 24))) {
1a0010f0:	687b      	ldr	r3, [r7, #4]
1a0010f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
1a0010f6:	2b00      	cmp	r3, #0
1a0010f8:	d0ef      	beq.n	1a0010da <startSlave+0xe>
		u32Val = (~(u32REG) & (~(1 << 24)));
		RGU_RESET_CTRL1 = u32Val;
		u32REG = RGU_RESET_ACTIVE_STATUS1;
	};

}
1a0010fa:	bf00      	nop
1a0010fc:	370c      	adds	r7, #12
1a0010fe:	46bd      	mov	sp, r7
1a001100:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001104:	4770      	bx	lr
1a001106:	bf00      	nop
1a001108:	40053154 	.word	0x40053154
1a00110c:	40053104 	.word	0x40053104

1a001110 <haltSlave>:

/*******************************************************************
 * Static function to put the SLAVE processor back in reset
 *******************************************************************/
void haltSlave(void) {
1a001110:	b480      	push	{r7}
1a001112:	b083      	sub	sp, #12
1a001114:	af00      	add	r7, sp, #0

	volatile uint32_t u32REG, u32Val;
	/* Check if M0 is reset by reading status */
	u32REG = RGU_RESET_ACTIVE_STATUS1;
1a001116:	4b0d      	ldr	r3, [pc, #52]	; (1a00114c <haltSlave+0x3c>)
1a001118:	681b      	ldr	r3, [r3, #0]
1a00111a:	607b      	str	r3, [r7, #4]

	/* If the M0 has reset not asserted, halt it... */
	/* in u32REG, status register, 1 = no reset */
	while ((u32REG & (1u << 24))) {
1a00111c:	e00a      	b.n	1a001134 <haltSlave+0x24>
		u32Val = ((~u32REG) | (1 << 24));
1a00111e:	687b      	ldr	r3, [r7, #4]
1a001120:	43db      	mvns	r3, r3
1a001122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
1a001126:	603b      	str	r3, [r7, #0]
		RGU_RESET_CTRL1 = u32Val;
1a001128:	4a09      	ldr	r2, [pc, #36]	; (1a001150 <haltSlave+0x40>)
1a00112a:	683b      	ldr	r3, [r7, #0]
1a00112c:	6013      	str	r3, [r2, #0]
		u32REG = RGU_RESET_ACTIVE_STATUS1;
1a00112e:	4b07      	ldr	r3, [pc, #28]	; (1a00114c <haltSlave+0x3c>)
1a001130:	681b      	ldr	r3, [r3, #0]
1a001132:	607b      	str	r3, [r7, #4]
	/* Check if M0 is reset by reading status */
	u32REG = RGU_RESET_ACTIVE_STATUS1;

	/* If the M0 has reset not asserted, halt it... */
	/* in u32REG, status register, 1 = no reset */
	while ((u32REG & (1u << 24))) {
1a001134:	687b      	ldr	r3, [r7, #4]
1a001136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
1a00113a:	2b00      	cmp	r3, #0
1a00113c:	d1ef      	bne.n	1a00111e <haltSlave+0xe>
		u32Val = ((~u32REG) | (1 << 24));
		RGU_RESET_CTRL1 = u32Val;
		u32REG = RGU_RESET_ACTIVE_STATUS1;
	}
}
1a00113e:	bf00      	nop
1a001140:	370c      	adds	r7, #12
1a001142:	46bd      	mov	sp, r7
1a001144:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001148:	4770      	bx	lr
1a00114a:	bf00      	nop
1a00114c:	40053154 	.word	0x40053154
1a001150:	40053104 	.word	0x40053104

1a001154 <cr_start_m0>:

/*******************************************************************
 * Function to start required CM0 slave cpu executing
 *******************************************************************/
void cr_start_m0(uint8_t *CM0image_start) {
1a001154:	b580      	push	{r7, lr}
1a001156:	b082      	sub	sp, #8
1a001158:	af00      	add	r7, sp, #0
1a00115a:	6078      	str	r0, [r7, #4]

	// Make sure M0 is not running
	haltSlave();
1a00115c:	f7ff ffd8 	bl	1a001110 <haltSlave>

	// Set M0's vector table to point to start of M0 image
	CREG_M0APPMEMMAP = (uint32_t) CM0image_start;
1a001160:	4a08      	ldr	r2, [pc, #32]	; (1a001184 <cr_start_m0+0x30>)
1a001162:	687b      	ldr	r3, [r7, #4]
1a001164:	6013      	str	r3, [r2, #0]
	__core_m0_has_started__ = 0; //the M0 will set this variable to 1
1a001166:	4b08      	ldr	r3, [pc, #32]	; (1a001188 <cr_start_m0+0x34>)
1a001168:	2200      	movs	r2, #0
1a00116a:	601a      	str	r2, [r3, #0]
#if LOW_POWER_MODE
	NVIC_EnableIRQ(M0APP_IRQn);
#endif
	// Release M0 from reset
	startSlave();
1a00116c:	f7ff ffae 	bl	1a0010cc <startSlave>
	while (!__core_m0_has_started__) {
1a001170:	bf00      	nop
1a001172:	4b05      	ldr	r3, [pc, #20]	; (1a001188 <cr_start_m0+0x34>)
1a001174:	681b      	ldr	r3, [r3, #0]
1a001176:	2b00      	cmp	r3, #0
1a001178:	d0fb      	beq.n	1a001172 <cr_start_m0+0x1e>
		;//Wait for the M0 to be ready
	}
}
1a00117a:	bf00      	nop
1a00117c:	3708      	adds	r7, #8
1a00117e:	46bd      	mov	sp, r7
1a001180:	bd80      	pop	{r7, pc}
1a001182:	bf00      	nop
1a001184:	40043404 	.word	0x40043404
1a001188:	10086010 	.word	0x10086010

1a00118c <ResetISR>:
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a00118c:	b538      	push	{r3, r4, r5, lr}
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a00118e:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001190:	4b15      	ldr	r3, [pc, #84]	; (1a0011e8 <ResetISR+0x5c>)
1a001192:	4a16      	ldr	r2, [pc, #88]	; (1a0011ec <ResetISR+0x60>)
1a001194:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a001196:	4a16      	ldr	r2, [pc, #88]	; (1a0011f0 <ResetISR+0x64>)
1a001198:	605a      	str	r2, [r3, #4]

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00119a:	4a16      	ldr	r2, [pc, #88]	; (1a0011f4 <ResetISR+0x68>)
1a00119c:	f04f 33ff 	mov.w	r3, #4294967295
1a0011a0:	6013      	str	r3, [r2, #0]
1a0011a2:	6053      	str	r3, [r2, #4]
1a0011a4:	6093      	str	r3, [r2, #8]
1a0011a6:	60d3      	str	r3, [r2, #12]
1a0011a8:	6113      	str	r3, [r2, #16]
1a0011aa:	6153      	str	r3, [r2, #20]
1a0011ac:	6193      	str	r3, [r2, #24]
1a0011ae:	61d3      	str	r3, [r2, #28]
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a0011b0:	b662      	cpsie	i
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a0011b2:	4c11      	ldr	r4, [pc, #68]	; (1a0011f8 <ResetISR+0x6c>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a0011b4:	4d11      	ldr	r5, [pc, #68]	; (1a0011fc <ResetISR+0x70>)
1a0011b6:	42ac      	cmp	r4, r5
1a0011b8:	d207      	bcs.n	1a0011ca <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
1a0011ba:	e894 0003 	ldmia.w	r4, {r0, r1}
1a0011be:	340c      	adds	r4, #12
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0011c0:	f854 2c04 	ldr.w	r2, [r4, #-4]
1a0011c4:	f7ff f80a 	bl	1a0001dc <data_init>
1a0011c8:	e7f5      	b.n	1a0011b6 <ResetISR+0x2a>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a0011ca:	4d0d      	ldr	r5, [pc, #52]	; (1a001200 <ResetISR+0x74>)
1a0011cc:	42ac      	cmp	r4, r5
1a0011ce:	d206      	bcs.n	1a0011de <ResetISR+0x52>
        ExeAddr = *SectionTableAddr++;
1a0011d0:	f854 0b08 	ldr.w	r0, [r4], #8
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a0011d4:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a0011d8:	f7ff f80b 	bl	1a0001f2 <bss_init>
1a0011dc:	e7f6      	b.n	1a0011cc <ResetISR+0x40>
        *pSCB_VTOR = (unsigned int) g_pfnVectors;
    }
#endif

#if defined (__USE_LPCOPEN)
    SystemInit();
1a0011de:	f003 fbd9 	bl	1a004994 <SystemInit>
    // Call C++ library initialisation
    //
    __libc_init_array();
#endif

    main();
1a0011e2:	f000 f99d 	bl	1a001520 <main>
1a0011e6:	e7fe      	b.n	1a0011e6 <ResetISR+0x5a>
1a0011e8:	40053100 	.word	0x40053100
1a0011ec:	10df1000 	.word	0x10df1000
1a0011f0:	01dff7ff 	.word	0x01dff7ff
1a0011f4:	e000e280 	.word	0xe000e280
1a0011f8:	1a000114 	.word	0x1a000114
1a0011fc:	1a000180 	.word	0x1a000180
1a001200:	1a0001c8 	.word	0x1a0001c8

1a001204 <Chip_SCU_PinMuxSet>:
 * @return	Nothing
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a001204:	b480      	push	{r7}
1a001206:	b083      	sub	sp, #12
1a001208:	af00      	add	r7, sp, #0
1a00120a:	4603      	mov	r3, r0
1a00120c:	71fb      	strb	r3, [r7, #7]
1a00120e:	460b      	mov	r3, r1
1a001210:	71bb      	strb	r3, [r7, #6]
1a001212:	4613      	mov	r3, r2
1a001214:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001216:	4807      	ldr	r0, [pc, #28]	; (1a001234 <Chip_SCU_PinMuxSet+0x30>)
1a001218:	79f9      	ldrb	r1, [r7, #7]
1a00121a:	79bb      	ldrb	r3, [r7, #6]
1a00121c:	88ba      	ldrh	r2, [r7, #4]
1a00121e:	0149      	lsls	r1, r1, #5
1a001220:	440b      	add	r3, r1
1a001222:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a001226:	bf00      	nop
1a001228:	370c      	adds	r7, #12
1a00122a:	46bd      	mov	sp, r7
1a00122c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001230:	4770      	bx	lr
1a001232:	bf00      	nop
1a001234:	40086000 	.word	0x40086000

1a001238 <Chip_GPIO_SetPinDIROutput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a001238:	b480      	push	{r7}
1a00123a:	b083      	sub	sp, #12
1a00123c:	af00      	add	r7, sp, #0
1a00123e:	6078      	str	r0, [r7, #4]
1a001240:	460b      	mov	r3, r1
1a001242:	70fb      	strb	r3, [r7, #3]
1a001244:	4613      	mov	r3, r2
1a001246:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] |= 1UL << pin;
1a001248:	78fa      	ldrb	r2, [r7, #3]
1a00124a:	78f9      	ldrb	r1, [r7, #3]
1a00124c:	687b      	ldr	r3, [r7, #4]
1a00124e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a001252:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a001256:	78bb      	ldrb	r3, [r7, #2]
1a001258:	2001      	movs	r0, #1
1a00125a:	fa00 f303 	lsl.w	r3, r0, r3
1a00125e:	4319      	orrs	r1, r3
1a001260:	687b      	ldr	r3, [r7, #4]
1a001262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a00126a:	bf00      	nop
1a00126c:	370c      	adds	r7, #12
1a00126e:	46bd      	mov	sp, r7
1a001270:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001274:	4770      	bx	lr
1a001276:	bf00      	nop

1a001278 <Chip_GPIO_SetPinOutHigh>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a001278:	b480      	push	{r7}
1a00127a:	b083      	sub	sp, #12
1a00127c:	af00      	add	r7, sp, #0
1a00127e:	6078      	str	r0, [r7, #4]
1a001280:	460b      	mov	r3, r1
1a001282:	70fb      	strb	r3, [r7, #3]
1a001284:	4613      	mov	r3, r2
1a001286:	70bb      	strb	r3, [r7, #2]
	pGPIO->SET[port] = (1 << pin);
1a001288:	78fa      	ldrb	r2, [r7, #3]
1a00128a:	78bb      	ldrb	r3, [r7, #2]
1a00128c:	2101      	movs	r1, #1
1a00128e:	fa01 f303 	lsl.w	r3, r1, r3
1a001292:	4619      	mov	r1, r3
1a001294:	687b      	ldr	r3, [r7, #4]
1a001296:	f502 6208 	add.w	r2, r2, #2176	; 0x880
1a00129a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a00129e:	bf00      	nop
1a0012a0:	370c      	adds	r7, #12
1a0012a2:	46bd      	mov	sp, r7
1a0012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0012a8:	4770      	bx	lr
1a0012aa:	bf00      	nop

1a0012ac <Chip_GPIO_SetPinOutLow>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a0012ac:	b480      	push	{r7}
1a0012ae:	b083      	sub	sp, #12
1a0012b0:	af00      	add	r7, sp, #0
1a0012b2:	6078      	str	r0, [r7, #4]
1a0012b4:	460b      	mov	r3, r1
1a0012b6:	70fb      	strb	r3, [r7, #3]
1a0012b8:	4613      	mov	r3, r2
1a0012ba:	70bb      	strb	r3, [r7, #2]
	pGPIO->CLR[port] = (1 << pin);
1a0012bc:	78fa      	ldrb	r2, [r7, #3]
1a0012be:	78bb      	ldrb	r3, [r7, #2]
1a0012c0:	2101      	movs	r1, #1
1a0012c2:	fa01 f303 	lsl.w	r3, r1, r3
1a0012c6:	4619      	mov	r1, r3
1a0012c8:	687b      	ldr	r3, [r7, #4]
1a0012ca:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
1a0012ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a0012d2:	bf00      	nop
1a0012d4:	370c      	adds	r7, #12
1a0012d6:	46bd      	mov	sp, r7
1a0012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0012dc:	4770      	bx	lr
1a0012de:	bf00      	nop

1a0012e0 <ExtraPinsInit>:
#define FTDI_RESET_PIN_GPIO  		(2)
#define FTDI_RESET_PORT  			(1)
#define FTDI_RESET_PIN  			(15)


void ExtraPinsInit(void) {
1a0012e0:	b580      	push	{r7, lr}
1a0012e2:	af00      	add	r7, sp, #0
	toggleLed0 = 0;
1a0012e4:	4b21      	ldr	r3, [pc, #132]	; (1a00136c <ExtraPinsInit+0x8c>)
1a0012e6:	2200      	movs	r2, #0
1a0012e8:	601a      	str	r2, [r3, #0]
	ledBlinking = 0;
1a0012ea:	4b21      	ldr	r3, [pc, #132]	; (1a001370 <ExtraPinsInit+0x90>)
1a0012ec:	2200      	movs	r2, #0
1a0012ee:	701a      	strb	r2, [r3, #0]
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, VBAT_GND_PORT_GPIO, VBAT_GND_PIN_GPIO); /* set P1.17 as output */
1a0012f0:	220c      	movs	r2, #12
1a0012f2:	2100      	movs	r1, #0
1a0012f4:	481f      	ldr	r0, [pc, #124]	; (1a001374 <ExtraPinsInit+0x94>)
1a0012f6:	f7ff ff9f 	bl	1a001238 <Chip_GPIO_SetPinDIROutput>
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, VBAT_GND_PORT_GPIO, VBAT_GND_PIN_GPIO); //drive to ground
1a0012fa:	220c      	movs	r2, #12
1a0012fc:	2100      	movs	r1, #0
1a0012fe:	481d      	ldr	r0, [pc, #116]	; (1a001374 <ExtraPinsInit+0x94>)
1a001300:	f7ff ffd4 	bl	1a0012ac <Chip_GPIO_SetPinOutLow>
	Chip_SCU_PinMuxSet(VBAT_GND_PORT, VBAT_GND_PIN, MD_PLN_FAST | FUNC0);
1a001304:	22f0      	movs	r2, #240	; 0xf0
1a001306:	2111      	movs	r1, #17
1a001308:	2001      	movs	r0, #1
1a00130a:	f7ff ff7b 	bl	1a001204 <Chip_SCU_PinMuxSet>

	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, FTDI_RESET_PORT_GPIO, FTDI_RESET_PIN_GPIO); //enable the FTDI
1a00130e:	2202      	movs	r2, #2
1a001310:	2100      	movs	r1, #0
1a001312:	4818      	ldr	r0, [pc, #96]	; (1a001374 <ExtraPinsInit+0x94>)
1a001314:	f7ff ffb0 	bl	1a001278 <Chip_GPIO_SetPinOutHigh>
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, FTDI_RESET_PORT_GPIO, FTDI_RESET_PIN_GPIO); /* set P1.15 as output */
1a001318:	2202      	movs	r2, #2
1a00131a:	2100      	movs	r1, #0
1a00131c:	4815      	ldr	r0, [pc, #84]	; (1a001374 <ExtraPinsInit+0x94>)
1a00131e:	f7ff ff8b 	bl	1a001238 <Chip_GPIO_SetPinDIROutput>
	Chip_SCU_PinMuxSet(FTDI_RESET_PORT, FTDI_RESET_PIN, MD_PLN_FAST | FUNC0);
1a001322:	22f0      	movs	r2, #240	; 0xf0
1a001324:	210f      	movs	r1, #15
1a001326:	2001      	movs	r0, #1
1a001328:	f7ff ff6c 	bl	1a001204 <Chip_SCU_PinMuxSet>

	// set P0.0 as output
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, LED0_PORT_GPIO, LED0_PIN_GPIO); //Turn on the LED
1a00132c:	2200      	movs	r2, #0
1a00132e:	2100      	movs	r1, #0
1a001330:	4810      	ldr	r0, [pc, #64]	; (1a001374 <ExtraPinsInit+0x94>)
1a001332:	f7ff ffbb 	bl	1a0012ac <Chip_GPIO_SetPinOutLow>
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, LED0_PORT_GPIO, LED0_PIN_GPIO);
1a001336:	2200      	movs	r2, #0
1a001338:	2100      	movs	r1, #0
1a00133a:	480e      	ldr	r0, [pc, #56]	; (1a001374 <ExtraPinsInit+0x94>)
1a00133c:	f7ff ff7c 	bl	1a001238 <Chip_GPIO_SetPinDIROutput>
	Chip_SCU_PinMuxSet(LED0_PORT, LED0_PIN, MD_PLN_FAST | FUNC0);
1a001340:	22f0      	movs	r2, #240	; 0xf0
1a001342:	2100      	movs	r1, #0
1a001344:	2000      	movs	r0, #0
1a001346:	f7ff ff5d 	bl	1a001204 <Chip_SCU_PinMuxSet>

	// set P0.1 as output
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, LED1_PORT_GPIO, LED1_PIN_GPIO); // Keep it Off
1a00134a:	2201      	movs	r2, #1
1a00134c:	2100      	movs	r1, #0
1a00134e:	4809      	ldr	r0, [pc, #36]	; (1a001374 <ExtraPinsInit+0x94>)
1a001350:	f7ff ff92 	bl	1a001278 <Chip_GPIO_SetPinOutHigh>
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, LED1_PORT_GPIO, LED1_PIN_GPIO);
1a001354:	2201      	movs	r2, #1
1a001356:	2100      	movs	r1, #0
1a001358:	4806      	ldr	r0, [pc, #24]	; (1a001374 <ExtraPinsInit+0x94>)
1a00135a:	f7ff ff6d 	bl	1a001238 <Chip_GPIO_SetPinDIROutput>
	Chip_SCU_PinMuxSet(LED1_PORT, LED1_PIN, MD_PLN_FAST | FUNC0);
1a00135e:	22f0      	movs	r2, #240	; 0xf0
1a001360:	2101      	movs	r1, #1
1a001362:	2000      	movs	r0, #0
1a001364:	f7ff ff4e 	bl	1a001204 <Chip_SCU_PinMuxSet>
}
1a001368:	bf00      	nop
1a00136a:	bd80      	pop	{r7, pc}
1a00136c:	10086520 	.word	0x10086520
1a001370:	10086524 	.word	0x10086524
1a001374:	400f4000 	.word	0x400f4000

1a001378 <Chip_GPIO_SetPinOutHigh>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a001378:	b480      	push	{r7}
1a00137a:	b083      	sub	sp, #12
1a00137c:	af00      	add	r7, sp, #0
1a00137e:	6078      	str	r0, [r7, #4]
1a001380:	460b      	mov	r3, r1
1a001382:	70fb      	strb	r3, [r7, #3]
1a001384:	4613      	mov	r3, r2
1a001386:	70bb      	strb	r3, [r7, #2]
	pGPIO->SET[port] = (1 << pin);
1a001388:	78fa      	ldrb	r2, [r7, #3]
1a00138a:	78bb      	ldrb	r3, [r7, #2]
1a00138c:	2101      	movs	r1, #1
1a00138e:	fa01 f303 	lsl.w	r3, r1, r3
1a001392:	4619      	mov	r1, r3
1a001394:	687b      	ldr	r3, [r7, #4]
1a001396:	f502 6208 	add.w	r2, r2, #2176	; 0x880
1a00139a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a00139e:	bf00      	nop
1a0013a0:	370c      	adds	r7, #12
1a0013a2:	46bd      	mov	sp, r7
1a0013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0013a8:	4770      	bx	lr
1a0013aa:	bf00      	nop

1a0013ac <Chip_GPIO_SetPinOutLow>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a0013ac:	b480      	push	{r7}
1a0013ae:	b083      	sub	sp, #12
1a0013b0:	af00      	add	r7, sp, #0
1a0013b2:	6078      	str	r0, [r7, #4]
1a0013b4:	460b      	mov	r3, r1
1a0013b6:	70fb      	strb	r3, [r7, #3]
1a0013b8:	4613      	mov	r3, r2
1a0013ba:	70bb      	strb	r3, [r7, #2]
	pGPIO->CLR[port] = (1 << pin);
1a0013bc:	78fa      	ldrb	r2, [r7, #3]
1a0013be:	78bb      	ldrb	r3, [r7, #2]
1a0013c0:	2101      	movs	r1, #1
1a0013c2:	fa01 f303 	lsl.w	r3, r1, r3
1a0013c6:	4619      	mov	r1, r3
1a0013c8:	687b      	ldr	r3, [r7, #4]
1a0013ca:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
1a0013ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a0013d2:	bf00      	nop
1a0013d4:	370c      	adds	r7, #12
1a0013d6:	46bd      	mov	sp, r7
1a0013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0013dc:	4770      	bx	lr
1a0013de:	bf00      	nop

1a0013e0 <Chip_GPIO_SetPinToggle>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinToggle(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a0013e0:	b480      	push	{r7}
1a0013e2:	b083      	sub	sp, #12
1a0013e4:	af00      	add	r7, sp, #0
1a0013e6:	6078      	str	r0, [r7, #4]
1a0013e8:	460b      	mov	r3, r1
1a0013ea:	70fb      	strb	r3, [r7, #3]
1a0013ec:	4613      	mov	r3, r2
1a0013ee:	70bb      	strb	r3, [r7, #2]
	pGPIO->NOT[port] = (1 << pin);
1a0013f0:	78fa      	ldrb	r2, [r7, #3]
1a0013f2:	78bb      	ldrb	r3, [r7, #2]
1a0013f4:	2101      	movs	r1, #1
1a0013f6:	fa01 f303 	lsl.w	r3, r1, r3
1a0013fa:	4619      	mov	r1, r3
1a0013fc:	687b      	ldr	r3, [r7, #4]
1a0013fe:	f502 620c 	add.w	r2, r2, #2240	; 0x8c0
1a001402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a001406:	bf00      	nop
1a001408:	370c      	adds	r7, #12
1a00140a:	46bd      	mov	sp, r7
1a00140c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001410:	4770      	bx	lr
1a001412:	bf00      	nop

1a001414 <bytesReceived>:

static inline uint8_t bytesToSend(volatile struct uart_hal * uart) {
	return uart->txBufferReadPointer != uart->txBufferWritePointer;
}

static inline uint8_t bytesReceived(volatile struct uart_hal * uart) {
1a001414:	b480      	push	{r7}
1a001416:	b083      	sub	sp, #12
1a001418:	af00      	add	r7, sp, #0
1a00141a:	6078      	str	r0, [r7, #4]
	return uart->rxBufferReadPointer != uart->rxBufferWritePointer;
1a00141c:	687b      	ldr	r3, [r7, #4]
1a00141e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a001422:	330c      	adds	r3, #12
1a001424:	681a      	ldr	r2, [r3, #0]
1a001426:	687b      	ldr	r3, [r7, #4]
1a001428:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a00142c:	3308      	adds	r3, #8
1a00142e:	681b      	ldr	r3, [r3, #0]
1a001430:	429a      	cmp	r2, r3
1a001432:	bf14      	ite	ne
1a001434:	2301      	movne	r3, #1
1a001436:	2300      	moveq	r3, #0
1a001438:	b2db      	uxtb	r3, r3
}
1a00143a:	4618      	mov	r0, r3
1a00143c:	370c      	adds	r7, #12
1a00143e:	46bd      	mov	sp, r7
1a001440:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001444:	4770      	bx	lr
1a001446:	bf00      	nop

1a001448 <popByteFromReceptionBuffer>:
static inline volatile uint8_t popByteFromReceptionBuffer(volatile struct uart_hal * uart) {
1a001448:	b480      	push	{r7}
1a00144a:	b085      	sub	sp, #20
1a00144c:	af00      	add	r7, sp, #0
1a00144e:	6078      	str	r0, [r7, #4]
	volatile uint8_t ret = uart->rxBuffer[uart->rxBufferReadPointer];
1a001450:	687b      	ldr	r3, [r7, #4]
1a001452:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a001456:	330c      	adds	r3, #12
1a001458:	681b      	ldr	r3, [r3, #0]
1a00145a:	687a      	ldr	r2, [r7, #4]
1a00145c:	4413      	add	r3, r2
1a00145e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001462:	781b      	ldrb	r3, [r3, #0]
1a001464:	b2db      	uxtb	r3, r3
1a001466:	73fb      	strb	r3, [r7, #15]
	uart->rxBufferReadPointer = (uart->rxBufferReadPointer + 1) & RX_BUFFER_MASK;
1a001468:	687b      	ldr	r3, [r7, #4]
1a00146a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a00146e:	330c      	adds	r3, #12
1a001470:	681b      	ldr	r3, [r3, #0]
1a001472:	3301      	adds	r3, #1
1a001474:	f3c3 020b 	ubfx	r2, r3, #0, #12
1a001478:	687b      	ldr	r3, [r7, #4]
1a00147a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a00147e:	330c      	adds	r3, #12
1a001480:	601a      	str	r2, [r3, #0]
	return ret;
1a001482:	7bfb      	ldrb	r3, [r7, #15]
1a001484:	b2db      	uxtb	r3, r3
}
1a001486:	4618      	mov	r0, r3
1a001488:	3714      	adds	r7, #20
1a00148a:	46bd      	mov	sp, r7
1a00148c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001490:	4770      	bx	lr
1a001492:	bf00      	nop

1a001494 <LED0SetOn>:
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, LED0_PORT_GPIO, LED0_PIN_GPIO); //Turn on the LED
}
/**
 * It enables the green LED
 */
static inline void LED0SetOn(void) {
1a001494:	b580      	push	{r7, lr}
1a001496:	af00      	add	r7, sp, #0
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, LED0_PORT_GPIO, LED0_PIN_GPIO); //Turn off the LED
1a001498:	2200      	movs	r2, #0
1a00149a:	2100      	movs	r1, #0
1a00149c:	4802      	ldr	r0, [pc, #8]	; (1a0014a8 <LED0SetOn+0x14>)
1a00149e:	f7ff ff85 	bl	1a0013ac <Chip_GPIO_SetPinOutLow>
}
1a0014a2:	bf00      	nop
1a0014a4:	bd80      	pop	{r7, pc}
1a0014a6:	bf00      	nop
1a0014a8:	400f4000 	.word	0x400f4000

1a0014ac <LED0Toggle>:
/**
 * It toggles the green LED
 */
static inline void LED0Toggle(void) {
1a0014ac:	b580      	push	{r7, lr}
1a0014ae:	af00      	add	r7, sp, #0
	Chip_GPIO_SetPinToggle(LPC_GPIO_PORT, LED0_PORT_GPIO, LED0_PIN_GPIO); //Toggle the LED
1a0014b0:	2200      	movs	r2, #0
1a0014b2:	2100      	movs	r1, #0
1a0014b4:	4802      	ldr	r0, [pc, #8]	; (1a0014c0 <LED0Toggle+0x14>)
1a0014b6:	f7ff ff93 	bl	1a0013e0 <Chip_GPIO_SetPinToggle>
}
1a0014ba:	bf00      	nop
1a0014bc:	bd80      	pop	{r7, pc}
1a0014be:	bf00      	nop
1a0014c0:	400f4000 	.word	0x400f4000

1a0014c4 <LED1SetOff>:
/**
 * It disables the red LED
 */
static inline void LED1SetOff(void) {
1a0014c4:	b580      	push	{r7, lr}
1a0014c6:	af00      	add	r7, sp, #0
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, LED1_PORT_GPIO, LED1_PIN_GPIO); //Turn on the LED
1a0014c8:	2201      	movs	r2, #1
1a0014ca:	2100      	movs	r1, #0
1a0014cc:	4802      	ldr	r0, [pc, #8]	; (1a0014d8 <LED1SetOff+0x14>)
1a0014ce:	f7ff ff53 	bl	1a001378 <Chip_GPIO_SetPinOutHigh>
}
1a0014d2:	bf00      	nop
1a0014d4:	bd80      	pop	{r7, pc}
1a0014d6:	bf00      	nop
1a0014d8:	400f4000 	.word	0x400f4000

1a0014dc <LED1SetOn>:
/**
 * It enables the red LED
 */
static inline void LED1SetOn(void) {
1a0014dc:	b580      	push	{r7, lr}
1a0014de:	af00      	add	r7, sp, #0
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, LED1_PORT_GPIO, LED1_PIN_GPIO); //Turn off the LED
1a0014e0:	2201      	movs	r2, #1
1a0014e2:	2100      	movs	r1, #0
1a0014e4:	4802      	ldr	r0, [pc, #8]	; (1a0014f0 <LED1SetOn+0x14>)
1a0014e6:	f7ff ff61 	bl	1a0013ac <Chip_GPIO_SetPinOutLow>
}
1a0014ea:	bf00      	nop
1a0014ec:	bd80      	pop	{r7, pc}
1a0014ee:	bf00      	nop
1a0014f0:	400f4000 	.word	0x400f4000

1a0014f4 <LED0SetBlinking>:
}
/**
 * It enables or disables the automatic 0.5Hz green LED blinking.
 * @param flag ENABLE or DISABLE
 */
static inline void LED0SetBlinking(uint8_t flag) {
1a0014f4:	b480      	push	{r7}
1a0014f6:	b083      	sub	sp, #12
1a0014f8:	af00      	add	r7, sp, #0
1a0014fa:	4603      	mov	r3, r0
1a0014fc:	71fb      	strb	r3, [r7, #7]
	ledBlinking = flag ? 1 : 0;
1a0014fe:	79fb      	ldrb	r3, [r7, #7]
1a001500:	2b00      	cmp	r3, #0
1a001502:	bf14      	ite	ne
1a001504:	2301      	movne	r3, #1
1a001506:	2300      	moveq	r3, #0
1a001508:	b2db      	uxtb	r3, r3
1a00150a:	461a      	mov	r2, r3
1a00150c:	4b03      	ldr	r3, [pc, #12]	; (1a00151c <LED0SetBlinking+0x28>)
1a00150e:	701a      	strb	r2, [r3, #0]
}
1a001510:	bf00      	nop
1a001512:	370c      	adds	r7, #12
1a001514:	46bd      	mov	sp, r7
1a001516:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00151a:	4770      	bx	lr
1a00151c:	10086524 	.word	0x10086524

1a001520 <main>:

RTC_TIME_T buildTime; //Holds the build time to set the RTC after enabling it

//#define NEED_EVENT

int main(void) {
1a001520:	b5b0      	push	{r4, r5, r7, lr}
1a001522:	b08a      	sub	sp, #40	; 0x28
1a001524:	af00      	add	r7, sp, #0
	uint32_t DVSEventPointer;
	uint32_t DVSEventTimeLow;
	uint16_t DVSEvent;
	uint32_t timeStampMemory = 0, timeStampDelta = 0;
#endif
	ExtraPinsInit();
1a001526:	f7ff fedb 	bl	1a0012e0 <ExtraPinsInit>
	disablePeripherals();
1a00152a:	f005 f979 	bl	1a006820 <disablePeripherals>
	Chip_RIT_Init(LPC_RITIMER);
1a00152e:	48a9      	ldr	r0, [pc, #676]	; (1a0017d4 <main+0x2b4>)
1a001530:	f011 fdca 	bl	1a0130c8 <Chip_RIT_Init>
	RTC_TIME_T build = { .time = { BUILD_SEC_INT, BUILD_MIN_INT, BUILD_HOUR_INT, BUILD_DAY_INT, 0, 1, BUILD_MONTH_INT,
1a001534:	4ba8      	ldr	r3, [pc, #672]	; (1a0017d8 <main+0x2b8>)
1a001536:	781b      	ldrb	r3, [r3, #0]
1a001538:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
1a00153c:	4613      	mov	r3, r2
1a00153e:	009b      	lsls	r3, r3, #2
1a001540:	4413      	add	r3, r2
1a001542:	005b      	lsls	r3, r3, #1
1a001544:	461a      	mov	r2, r3
1a001546:	4ba5      	ldr	r3, [pc, #660]	; (1a0017dc <main+0x2bc>)
1a001548:	781b      	ldrb	r3, [r3, #0]
1a00154a:	3b30      	subs	r3, #48	; 0x30
1a00154c:	4413      	add	r3, r2
1a00154e:	607b      	str	r3, [r7, #4]
1a001550:	2332      	movs	r3, #50	; 0x32
1a001552:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
1a001556:	4613      	mov	r3, r2
1a001558:	009b      	lsls	r3, r3, #2
1a00155a:	4413      	add	r3, r2
1a00155c:	005b      	lsls	r3, r3, #1
1a00155e:	461a      	mov	r2, r3
1a001560:	2339      	movs	r3, #57	; 0x39
1a001562:	3b30      	subs	r3, #48	; 0x30
1a001564:	4413      	add	r3, r2
1a001566:	60bb      	str	r3, [r7, #8]
1a001568:	2331      	movs	r3, #49	; 0x31
1a00156a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
1a00156e:	4613      	mov	r3, r2
1a001570:	009b      	lsls	r3, r3, #2
1a001572:	4413      	add	r3, r2
1a001574:	005b      	lsls	r3, r3, #1
1a001576:	461a      	mov	r2, r3
1a001578:	2337      	movs	r3, #55	; 0x37
1a00157a:	3b30      	subs	r3, #48	; 0x30
1a00157c:	4413      	add	r3, r2
1a00157e:	60fb      	str	r3, [r7, #12]
1a001580:	2320      	movs	r3, #32
1a001582:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
1a001586:	4613      	mov	r3, r2
1a001588:	009b      	lsls	r3, r3, #2
1a00158a:	4413      	add	r3, r2
1a00158c:	005b      	lsls	r3, r3, #1
1a00158e:	461a      	mov	r2, r3
1a001590:	2334      	movs	r3, #52	; 0x34
1a001592:	3b30      	subs	r3, #48	; 0x30
1a001594:	4413      	add	r3, r2
1a001596:	613b      	str	r3, [r7, #16]
1a001598:	2300      	movs	r3, #0
1a00159a:	617b      	str	r3, [r7, #20]
1a00159c:	2301      	movs	r3, #1
1a00159e:	61bb      	str	r3, [r7, #24]
1a0015a0:	234a      	movs	r3, #74	; 0x4a
1a0015a2:	2b4f      	cmp	r3, #79	; 0x4f
1a0015a4:	d005      	beq.n	1a0015b2 <main+0x92>
1a0015a6:	234a      	movs	r3, #74	; 0x4a
1a0015a8:	2b4e      	cmp	r3, #78	; 0x4e
1a0015aa:	d002      	beq.n	1a0015b2 <main+0x92>
1a0015ac:	234a      	movs	r3, #74	; 0x4a
1a0015ae:	2b44      	cmp	r3, #68	; 0x44
1a0015b0:	d101      	bne.n	1a0015b6 <main+0x96>
1a0015b2:	2201      	movs	r2, #1
1a0015b4:	e000      	b.n	1a0015b8 <main+0x98>
1a0015b6:	2200      	movs	r2, #0
1a0015b8:	4613      	mov	r3, r2
1a0015ba:	009b      	lsls	r3, r3, #2
1a0015bc:	4413      	add	r3, r2
1a0015be:	005b      	lsls	r3, r3, #1
1a0015c0:	461a      	mov	r2, r3
1a0015c2:	234a      	movs	r3, #74	; 0x4a
1a0015c4:	2b4a      	cmp	r3, #74	; 0x4a
1a0015c6:	d105      	bne.n	1a0015d4 <main+0xb4>
1a0015c8:	2375      	movs	r3, #117	; 0x75
1a0015ca:	2b61      	cmp	r3, #97	; 0x61
1a0015cc:	d102      	bne.n	1a0015d4 <main+0xb4>
1a0015ce:	236c      	movs	r3, #108	; 0x6c
1a0015d0:	2b6e      	cmp	r3, #110	; 0x6e
1a0015d2:	d056      	beq.n	1a001682 <main+0x162>
1a0015d4:	234a      	movs	r3, #74	; 0x4a
1a0015d6:	2b46      	cmp	r3, #70	; 0x46
1a0015d8:	d051      	beq.n	1a00167e <main+0x15e>
1a0015da:	234a      	movs	r3, #74	; 0x4a
1a0015dc:	2b4d      	cmp	r3, #77	; 0x4d
1a0015de:	d105      	bne.n	1a0015ec <main+0xcc>
1a0015e0:	2375      	movs	r3, #117	; 0x75
1a0015e2:	2b61      	cmp	r3, #97	; 0x61
1a0015e4:	d102      	bne.n	1a0015ec <main+0xcc>
1a0015e6:	236c      	movs	r3, #108	; 0x6c
1a0015e8:	2b72      	cmp	r3, #114	; 0x72
1a0015ea:	d046      	beq.n	1a00167a <main+0x15a>
1a0015ec:	234a      	movs	r3, #74	; 0x4a
1a0015ee:	2b41      	cmp	r3, #65	; 0x41
1a0015f0:	d102      	bne.n	1a0015f8 <main+0xd8>
1a0015f2:	2375      	movs	r3, #117	; 0x75
1a0015f4:	2b70      	cmp	r3, #112	; 0x70
1a0015f6:	d03e      	beq.n	1a001676 <main+0x156>
1a0015f8:	234a      	movs	r3, #74	; 0x4a
1a0015fa:	2b4d      	cmp	r3, #77	; 0x4d
1a0015fc:	d105      	bne.n	1a00160a <main+0xea>
1a0015fe:	2375      	movs	r3, #117	; 0x75
1a001600:	2b61      	cmp	r3, #97	; 0x61
1a001602:	d102      	bne.n	1a00160a <main+0xea>
1a001604:	236c      	movs	r3, #108	; 0x6c
1a001606:	2b79      	cmp	r3, #121	; 0x79
1a001608:	d033      	beq.n	1a001672 <main+0x152>
1a00160a:	234a      	movs	r3, #74	; 0x4a
1a00160c:	2b4a      	cmp	r3, #74	; 0x4a
1a00160e:	d105      	bne.n	1a00161c <main+0xfc>
1a001610:	2375      	movs	r3, #117	; 0x75
1a001612:	2b75      	cmp	r3, #117	; 0x75
1a001614:	d102      	bne.n	1a00161c <main+0xfc>
1a001616:	236c      	movs	r3, #108	; 0x6c
1a001618:	2b6e      	cmp	r3, #110	; 0x6e
1a00161a:	d028      	beq.n	1a00166e <main+0x14e>
1a00161c:	234a      	movs	r3, #74	; 0x4a
1a00161e:	2b4a      	cmp	r3, #74	; 0x4a
1a001620:	d105      	bne.n	1a00162e <main+0x10e>
1a001622:	2375      	movs	r3, #117	; 0x75
1a001624:	2b75      	cmp	r3, #117	; 0x75
1a001626:	d102      	bne.n	1a00162e <main+0x10e>
1a001628:	236c      	movs	r3, #108	; 0x6c
1a00162a:	2b6c      	cmp	r3, #108	; 0x6c
1a00162c:	d01d      	beq.n	1a00166a <main+0x14a>
1a00162e:	234a      	movs	r3, #74	; 0x4a
1a001630:	2b41      	cmp	r3, #65	; 0x41
1a001632:	d102      	bne.n	1a00163a <main+0x11a>
1a001634:	2375      	movs	r3, #117	; 0x75
1a001636:	2b75      	cmp	r3, #117	; 0x75
1a001638:	d015      	beq.n	1a001666 <main+0x146>
1a00163a:	234a      	movs	r3, #74	; 0x4a
1a00163c:	2b53      	cmp	r3, #83	; 0x53
1a00163e:	d010      	beq.n	1a001662 <main+0x142>
1a001640:	234a      	movs	r3, #74	; 0x4a
1a001642:	2b4f      	cmp	r3, #79	; 0x4f
1a001644:	d00b      	beq.n	1a00165e <main+0x13e>
1a001646:	234a      	movs	r3, #74	; 0x4a
1a001648:	2b4e      	cmp	r3, #78	; 0x4e
1a00164a:	d006      	beq.n	1a00165a <main+0x13a>
1a00164c:	234a      	movs	r3, #74	; 0x4a
1a00164e:	2b44      	cmp	r3, #68	; 0x44
1a001650:	d101      	bne.n	1a001656 <main+0x136>
1a001652:	2302      	movs	r3, #2
1a001654:	e016      	b.n	1a001684 <main+0x164>
1a001656:	230f      	movs	r3, #15
1a001658:	e014      	b.n	1a001684 <main+0x164>
1a00165a:	2301      	movs	r3, #1
1a00165c:	e012      	b.n	1a001684 <main+0x164>
1a00165e:	2300      	movs	r3, #0
1a001660:	e010      	b.n	1a001684 <main+0x164>
1a001662:	2309      	movs	r3, #9
1a001664:	e00e      	b.n	1a001684 <main+0x164>
1a001666:	2308      	movs	r3, #8
1a001668:	e00c      	b.n	1a001684 <main+0x164>
1a00166a:	2307      	movs	r3, #7
1a00166c:	e00a      	b.n	1a001684 <main+0x164>
1a00166e:	2306      	movs	r3, #6
1a001670:	e008      	b.n	1a001684 <main+0x164>
1a001672:	2305      	movs	r3, #5
1a001674:	e006      	b.n	1a001684 <main+0x164>
1a001676:	2304      	movs	r3, #4
1a001678:	e004      	b.n	1a001684 <main+0x164>
1a00167a:	2303      	movs	r3, #3
1a00167c:	e002      	b.n	1a001684 <main+0x164>
1a00167e:	2302      	movs	r3, #2
1a001680:	e000      	b.n	1a001684 <main+0x164>
1a001682:	2301      	movs	r3, #1
1a001684:	4413      	add	r3, r2
1a001686:	61fb      	str	r3, [r7, #28]
	BUILD_YEAR_INT } };
1a001688:	2332      	movs	r3, #50	; 0x32
1a00168a:	3b30      	subs	r3, #48	; 0x30
1a00168c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001690:	fb02 f203 	mul.w	r2, r2, r3
1a001694:	2330      	movs	r3, #48	; 0x30
1a001696:	3b30      	subs	r3, #48	; 0x30
1a001698:	2164      	movs	r1, #100	; 0x64
1a00169a:	fb01 f303 	mul.w	r3, r1, r3
1a00169e:	18d1      	adds	r1, r2, r3
1a0016a0:	2331      	movs	r3, #49	; 0x31
1a0016a2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
1a0016a6:	4613      	mov	r3, r2
1a0016a8:	009b      	lsls	r3, r3, #2
1a0016aa:	4413      	add	r3, r2
1a0016ac:	005b      	lsls	r3, r3, #1
1a0016ae:	18ca      	adds	r2, r1, r3
1a0016b0:	2336      	movs	r3, #54	; 0x36
1a0016b2:	3b30      	subs	r3, #48	; 0x30
1a0016b4:	4413      	add	r3, r2
	uint32_t timeStampMemory = 0, timeStampDelta = 0;
#endif
	ExtraPinsInit();
	disablePeripherals();
	Chip_RIT_Init(LPC_RITIMER);
	RTC_TIME_T build = { .time = { BUILD_SEC_INT, BUILD_MIN_INT, BUILD_HOUR_INT, BUILD_DAY_INT, 0, 1, BUILD_MONTH_INT,
1a0016b6:	623b      	str	r3, [r7, #32]
	BUILD_YEAR_INT } };
	buildTime = build;
1a0016b8:	4b49      	ldr	r3, [pc, #292]	; (1a0017e0 <main+0x2c0>)
1a0016ba:	461d      	mov	r5, r3
1a0016bc:	1d3c      	adds	r4, r7, #4
1a0016be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a0016c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a0016c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a0016c6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	//This should be one of the first initializations routines to run.
	sensorsInit();
1a0016ca:	f002 fdb1 	bl	1a004230 <sensorsInit>
	DVS128ChipInit();
1a0016ce:	f7fe ff7d 	bl	1a0005cc <DVS128ChipInit>
	DacInit();
1a0016d2:	f003 f949 	bl	1a004968 <DacInit>
	UARTInit(LPC_UART, BAUD_RATE_DEFAULT); /* baud rate setting */
1a0016d6:	4943      	ldr	r1, [pc, #268]	; (1a0017e4 <main+0x2c4>)
1a0016d8:	4843      	ldr	r0, [pc, #268]	; (1a0017e8 <main+0x2c8>)
1a0016da:	f003 fc15 	bl	1a004f08 <UARTInit>
	initMotors();
1a0016de:	f000 fe5d 	bl	1a00239c <initMotors>
	PWMInit();
1a0016e2:	f001 ff17 	bl	1a003514 <PWMInit>
#if USE_IMU_DATA
	timerDelayMs(100);
1a0016e6:	2064      	movs	r0, #100	; 0x64
1a0016e8:	f005 f80a 	bl	1a006700 <timerDelayMs>
	MPU9105Init();
1a0016ec:	f001 fad2 	bl	1a002c94 <MPU9105Init>
#endif
#if USE_SDCARD
	SDCardInit();
#endif
#if USE_PUSHBOT
	MiniRobInit();
1a0016f0:	f001 fd4c 	bl	1a00318c <MiniRobInit>
#ifdef TEST_RUN
	test();
	//This will not return
#endif

	LED1SetOn();
1a0016f4:	f7ff fef2 	bl	1a0014dc <LED1SetOn>
	// Start M0APP slave processor
	cr_start_m0(&__core_m0app_START__);
1a0016f8:	483c      	ldr	r0, [pc, #240]	; (1a0017ec <main+0x2cc>)
1a0016fa:	f7ff fd2b 	bl	1a001154 <cr_start_m0>
	LED1SetOff();
1a0016fe:	f7ff fee1 	bl	1a0014c4 <LED1SetOff>

	LED0SetOn();
1a001702:	f7ff fec7 	bl	1a001494 <LED0SetOn>
	LED0SetBlinking(ENABLE);
1a001706:	2001      	movs	r0, #1
1a001708:	f7ff fef4 	bl	1a0014f4 <LED0SetBlinking>
	UARTShowVersion();
1a00170c:	f003 fc80 	bl	1a005010 <UARTShowVersion>
	for (;;) {
		if (ledBlinking && toggleLed0) {
1a001710:	4b37      	ldr	r3, [pc, #220]	; (1a0017f0 <main+0x2d0>)
1a001712:	781b      	ldrb	r3, [r3, #0]
1a001714:	2b00      	cmp	r3, #0
1a001716:	d010      	beq.n	1a00173a <main+0x21a>
1a001718:	4b36      	ldr	r3, [pc, #216]	; (1a0017f4 <main+0x2d4>)
1a00171a:	681b      	ldr	r3, [r3, #0]
1a00171c:	2b00      	cmp	r3, #0
1a00171e:	d00c      	beq.n	1a00173a <main+0x21a>
			LED0Toggle();
1a001720:	f7ff fec4 	bl	1a0014ac <LED0Toggle>
			toggleLed0 = 0;
1a001724:	4b33      	ldr	r3, [pc, #204]	; (1a0017f4 <main+0x2d4>)
1a001726:	2200      	movs	r2, #0
1a001728:	601a      	str	r2, [r3, #0]
		}
		// *****************************************************************************
		//    UARTIterate();
		// *****************************************************************************
		while (bytesReceived(&uart)) {  // incoming char available?
1a00172a:	e006      	b.n	1a00173a <main+0x21a>
			UART0ParseNewChar(popByteFromReceptionBuffer(&uart));
1a00172c:	4832      	ldr	r0, [pc, #200]	; (1a0017f8 <main+0x2d8>)
1a00172e:	f7ff fe8b 	bl	1a001448 <popByteFromReceptionBuffer>
1a001732:	4603      	mov	r3, r0
1a001734:	4618      	mov	r0, r3
1a001736:	f004 ff0d 	bl	1a006554 <UART0ParseNewChar>
			toggleLed0 = 0;
		}
		// *****************************************************************************
		//    UARTIterate();
		// *****************************************************************************
		while (bytesReceived(&uart)) {  // incoming char available?
1a00173a:	482f      	ldr	r0, [pc, #188]	; (1a0017f8 <main+0x2d8>)
1a00173c:	f7ff fe6a 	bl	1a001414 <bytesReceived>
1a001740:	4603      	mov	r3, r0
1a001742:	2b00      	cmp	r3, #0
1a001744:	d1f2      	bne.n	1a00172c <main+0x20c>
			UART0ParseNewChar(popByteFromReceptionBuffer(&uart));
		}
#if USE_IMU_DATA
		updateIMUData();
1a001746:	f001 fa1d 	bl	1a002b84 <updateIMUData>
#endif
#if USE_PUSHBOT
		refreshMiniRobSensors();
1a00174a:	f001 fc6f 	bl	1a00302c <refreshMiniRobSensors>
		if (motor0.updateRequired) {
1a00174e:	4b2b      	ldr	r3, [pc, #172]	; (1a0017fc <main+0x2dc>)
1a001750:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a001754:	b2db      	uxtb	r3, r3
1a001756:	2b00      	cmp	r3, #0
1a001758:	d006      	beq.n	1a001768 <main+0x248>
			motor0.updateRequired = 0;
1a00175a:	4b28      	ldr	r3, [pc, #160]	; (1a0017fc <main+0x2dc>)
1a00175c:	2200      	movs	r2, #0
1a00175e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			updateMotorController(MOTOR0);
1a001762:	2000      	movs	r0, #0
1a001764:	f000 faa8 	bl	1a001cb8 <updateMotorController>
		}
		if (motor1.updateRequired) {
1a001768:	4b25      	ldr	r3, [pc, #148]	; (1a001800 <main+0x2e0>)
1a00176a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a00176e:	b2db      	uxtb	r3, r3
1a001770:	2b00      	cmp	r3, #0
1a001772:	d006      	beq.n	1a001782 <main+0x262>
			motor1.updateRequired = 0;
1a001774:	4b22      	ldr	r3, [pc, #136]	; (1a001800 <main+0x2e0>)
1a001776:	2200      	movs	r2, #0
1a001778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			updateMotorController(MOTOR1);
1a00177c:	2001      	movs	r0, #1
1a00177e:	f000 fa9b 	bl	1a001cb8 <updateMotorController>
		}
#endif
		if (sensorRefreshRequested) {
1a001782:	4b20      	ldr	r3, [pc, #128]	; (1a001804 <main+0x2e4>)
1a001784:	781b      	ldrb	r3, [r3, #0]
1a001786:	b2db      	uxtb	r3, r3
1a001788:	2b00      	cmp	r3, #0
1a00178a:	d0c1      	beq.n	1a001710 <main+0x1f0>
			sensorRefreshRequested = 0;
1a00178c:	4b1d      	ldr	r3, [pc, #116]	; (1a001804 <main+0x2e4>)
1a00178e:	2200      	movs	r2, #0
1a001790:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sensorsEnabledCounter; ++i) {
1a001792:	2300      	movs	r3, #0
1a001794:	627b      	str	r3, [r7, #36]	; 0x24
1a001796:	e016      	b.n	1a0017c6 <main+0x2a6>
				if (enabledSensors[i]->triggered) {
1a001798:	4a1b      	ldr	r2, [pc, #108]	; (1a001808 <main+0x2e8>)
1a00179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a00179c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0017a0:	785b      	ldrb	r3, [r3, #1]
1a0017a2:	b2db      	uxtb	r3, r3
1a0017a4:	2b00      	cmp	r3, #0
1a0017a6:	d00b      	beq.n	1a0017c0 <main+0x2a0>
					enabledSensors[i]->refresh();
1a0017a8:	4a17      	ldr	r2, [pc, #92]	; (1a001808 <main+0x2e8>)
1a0017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0017ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0017b0:	691b      	ldr	r3, [r3, #16]
1a0017b2:	4798      	blx	r3
					enabledSensors[i]->triggered = 0;
1a0017b4:	4a14      	ldr	r2, [pc, #80]	; (1a001808 <main+0x2e8>)
1a0017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0017b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0017bc:	2200      	movs	r2, #0
1a0017be:	705a      	strb	r2, [r3, #1]
			updateMotorController(MOTOR1);
		}
#endif
		if (sensorRefreshRequested) {
			sensorRefreshRequested = 0;
			for (int i = 0; i < sensorsEnabledCounter; ++i) {
1a0017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0017c2:	3301      	adds	r3, #1
1a0017c4:	627b      	str	r3, [r7, #36]	; 0x24
1a0017c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1a0017c8:	4b10      	ldr	r3, [pc, #64]	; (1a00180c <main+0x2ec>)
1a0017ca:	681b      	ldr	r3, [r3, #0]
1a0017cc:	429a      	cmp	r2, r3
1a0017ce:	d3e3      	bcc.n	1a001798 <main+0x278>
				sdcard.bytesWrittenPerSecond += sdcard.bytesWritten;
				sdcard.fileBufferIndex = 0;
			}
		}
#endif
	}
1a0017d0:	e79e      	b.n	1a001710 <main+0x1f0>
1a0017d2:	bf00      	nop
1a0017d4:	400c0000 	.word	0x400c0000
1a0017d8:	1a0188ae 	.word	0x1a0188ae
1a0017dc:	1a0188af 	.word	0x1a0188af
1a0017e0:	10087440 	.word	0x10087440
1a0017e4:	003d0900 	.word	0x003d0900
1a0017e8:	40081000 	.word	0x40081000
1a0017ec:	1a040000 	.word	0x1a040000
1a0017f0:	10086524 	.word	0x10086524
1a0017f4:	10086520 	.word	0x10086520
1a0017f8:	10000000 	.word	0x10000000
1a0017fc:	1008749c 	.word	0x1008749c
1a001800:	10087460 	.word	0x10087460
1a001804:	10087568 	.word	0x10087568
1a001808:	100877ec 	.word	0x100877ec
1a00180c:	1008786c 	.word	0x1008786c

1a001810 <Chip_SCU_PinMuxSet>:
 * @return	Nothing
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a001810:	b480      	push	{r7}
1a001812:	b083      	sub	sp, #12
1a001814:	af00      	add	r7, sp, #0
1a001816:	4603      	mov	r3, r0
1a001818:	71fb      	strb	r3, [r7, #7]
1a00181a:	460b      	mov	r3, r1
1a00181c:	71bb      	strb	r3, [r7, #6]
1a00181e:	4613      	mov	r3, r2
1a001820:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001822:	4807      	ldr	r0, [pc, #28]	; (1a001840 <Chip_SCU_PinMuxSet+0x30>)
1a001824:	79f9      	ldrb	r1, [r7, #7]
1a001826:	79bb      	ldrb	r3, [r7, #6]
1a001828:	88ba      	ldrh	r2, [r7, #4]
1a00182a:	0149      	lsls	r1, r1, #5
1a00182c:	440b      	add	r3, r1
1a00182e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a001832:	bf00      	nop
1a001834:	370c      	adds	r7, #12
1a001836:	46bd      	mov	sp, r7
1a001838:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00183c:	4770      	bx	lr
1a00183e:	bf00      	nop
1a001840:	40086000 	.word	0x40086000

1a001844 <Chip_GPIO_SetPinDIROutput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a001844:	b480      	push	{r7}
1a001846:	b083      	sub	sp, #12
1a001848:	af00      	add	r7, sp, #0
1a00184a:	6078      	str	r0, [r7, #4]
1a00184c:	460b      	mov	r3, r1
1a00184e:	70fb      	strb	r3, [r7, #3]
1a001850:	4613      	mov	r3, r2
1a001852:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] |= 1UL << pin;
1a001854:	78fa      	ldrb	r2, [r7, #3]
1a001856:	78f9      	ldrb	r1, [r7, #3]
1a001858:	687b      	ldr	r3, [r7, #4]
1a00185a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a00185e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a001862:	78bb      	ldrb	r3, [r7, #2]
1a001864:	2001      	movs	r0, #1
1a001866:	fa00 f303 	lsl.w	r3, r0, r3
1a00186a:	4319      	orrs	r1, r3
1a00186c:	687b      	ldr	r3, [r7, #4]
1a00186e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a001876:	bf00      	nop
1a001878:	370c      	adds	r7, #12
1a00187a:	46bd      	mov	sp, r7
1a00187c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001880:	4770      	bx	lr
1a001882:	bf00      	nop

1a001884 <Chip_GPIO_SetPinDIRInput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a001884:	b480      	push	{r7}
1a001886:	b083      	sub	sp, #12
1a001888:	af00      	add	r7, sp, #0
1a00188a:	6078      	str	r0, [r7, #4]
1a00188c:	460b      	mov	r3, r1
1a00188e:	70fb      	strb	r3, [r7, #3]
1a001890:	4613      	mov	r3, r2
1a001892:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a001894:	78fa      	ldrb	r2, [r7, #3]
1a001896:	78f9      	ldrb	r1, [r7, #3]
1a001898:	687b      	ldr	r3, [r7, #4]
1a00189a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a00189e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a0018a2:	78bb      	ldrb	r3, [r7, #2]
1a0018a4:	2001      	movs	r0, #1
1a0018a6:	fa00 f303 	lsl.w	r3, r0, r3
1a0018aa:	43db      	mvns	r3, r3
1a0018ac:	4019      	ands	r1, r3
1a0018ae:	687b      	ldr	r3, [r7, #4]
1a0018b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0018b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a0018b8:	bf00      	nop
1a0018ba:	370c      	adds	r7, #12
1a0018bc:	46bd      	mov	sp, r7
1a0018be:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0018c2:	4770      	bx	lr

1a0018c4 <Chip_GPIO_SetPinOutHigh>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a0018c4:	b480      	push	{r7}
1a0018c6:	b083      	sub	sp, #12
1a0018c8:	af00      	add	r7, sp, #0
1a0018ca:	6078      	str	r0, [r7, #4]
1a0018cc:	460b      	mov	r3, r1
1a0018ce:	70fb      	strb	r3, [r7, #3]
1a0018d0:	4613      	mov	r3, r2
1a0018d2:	70bb      	strb	r3, [r7, #2]
	pGPIO->SET[port] = (1 << pin);
1a0018d4:	78fa      	ldrb	r2, [r7, #3]
1a0018d6:	78bb      	ldrb	r3, [r7, #2]
1a0018d8:	2101      	movs	r1, #1
1a0018da:	fa01 f303 	lsl.w	r3, r1, r3
1a0018de:	4619      	mov	r1, r3
1a0018e0:	687b      	ldr	r3, [r7, #4]
1a0018e2:	f502 6208 	add.w	r2, r2, #2176	; 0x880
1a0018e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a0018ea:	bf00      	nop
1a0018ec:	370c      	adds	r7, #12
1a0018ee:	46bd      	mov	sp, r7
1a0018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0018f4:	4770      	bx	lr
1a0018f6:	bf00      	nop

1a0018f8 <Chip_GPIO_SetPinOutLow>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a0018f8:	b480      	push	{r7}
1a0018fa:	b083      	sub	sp, #12
1a0018fc:	af00      	add	r7, sp, #0
1a0018fe:	6078      	str	r0, [r7, #4]
1a001900:	460b      	mov	r3, r1
1a001902:	70fb      	strb	r3, [r7, #3]
1a001904:	4613      	mov	r3, r2
1a001906:	70bb      	strb	r3, [r7, #2]
	pGPIO->CLR[port] = (1 << pin);
1a001908:	78fa      	ldrb	r2, [r7, #3]
1a00190a:	78bb      	ldrb	r3, [r7, #2]
1a00190c:	2101      	movs	r1, #1
1a00190e:	fa01 f303 	lsl.w	r3, r1, r3
1a001912:	4619      	mov	r1, r3
1a001914:	687b      	ldr	r3, [r7, #4]
1a001916:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
1a00191a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a00191e:	bf00      	nop
1a001920:	370c      	adds	r7, #12
1a001922:	46bd      	mov	sp, r7
1a001924:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001928:	4770      	bx	lr
1a00192a:	bf00      	nop

1a00192c <updateMotorPWMPeriod>:
struct motor_status motor0;
struct motor_status motor1;

static uint32_t motorDriverEnabled;

uint32_t updateMotorPWMPeriod(uint32_t motor, uint32_t period) {
1a00192c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00192e:	b085      	sub	sp, #20
1a001930:	af00      	add	r7, sp, #0
1a001932:	6078      	str	r0, [r7, #4]
1a001934:	6039      	str	r1, [r7, #0]
	if (period == 0) {
1a001936:	683b      	ldr	r3, [r7, #0]
1a001938:	2b00      	cmp	r3, #0
1a00193a:	d101      	bne.n	1a001940 <updateMotorPWMPeriod+0x14>
		return 1;
1a00193c:	2301      	movs	r3, #1
1a00193e:	e058      	b.n	1a0019f2 <updateMotorPWMPeriod+0xc6>
	}
	uint64_t calculatedLimit = (((uint64_t) period * Chip_Clock_GetRate(CLK_APB1_MOTOCON)) / 1000000ULL);
1a001940:	683b      	ldr	r3, [r7, #0]
1a001942:	461d      	mov	r5, r3
1a001944:	f04f 0600 	mov.w	r6, #0
1a001948:	2021      	movs	r0, #33	; 0x21
1a00194a:	f010 fe4d 	bl	1a0125e8 <Chip_Clock_GetRate>
1a00194e:	4603      	mov	r3, r0
1a001950:	f04f 0400 	mov.w	r4, #0
1a001954:	fb03 f106 	mul.w	r1, r3, r6
1a001958:	fb05 f204 	mul.w	r2, r5, r4
1a00195c:	440a      	add	r2, r1
1a00195e:	fba5 0103 	umull	r0, r1, r5, r3
1a001962:	1853      	adds	r3, r2, r1
1a001964:	4619      	mov	r1, r3
1a001966:	4a25      	ldr	r2, [pc, #148]	; (1a0019fc <updateMotorPWMPeriod+0xd0>)
1a001968:	f04f 0300 	mov.w	r3, #0
1a00196c:	f012 ff24 	bl	1a0147b8 <__aeabi_uldivmod>
1a001970:	4603      	mov	r3, r0
1a001972:	460c      	mov	r4, r1
1a001974:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if (calculatedLimit & 0xFFFFFFFF00000000ULL) { //Check for overflow
1a001978:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
1a00197c:	f04f 0100 	mov.w	r1, #0
1a001980:	f04f 32ff 	mov.w	r2, #4294967295
1a001984:	ea03 0301 	and.w	r3, r3, r1
1a001988:	ea04 0402 	and.w	r4, r4, r2
1a00198c:	4323      	orrs	r3, r4
1a00198e:	d001      	beq.n	1a001994 <updateMotorPWMPeriod+0x68>
		return 1;
1a001990:	2301      	movs	r3, #1
1a001992:	e02e      	b.n	1a0019f2 <updateMotorPWMPeriod+0xc6>
	}
	if (motor == MOTOR0) {
1a001994:	687b      	ldr	r3, [r7, #4]
1a001996:	2b00      	cmp	r3, #0
1a001998:	d112      	bne.n	1a0019c0 <updateMotorPWMPeriod+0x94>
		LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL] = (uint32_t) calculatedLimit;
1a00199a:	4a19      	ldr	r2, [pc, #100]	; (1a001a00 <updateMotorPWMPeriod+0xd4>)
1a00199c:	68bb      	ldr	r3, [r7, #8]
1a00199e:	62d3      	str	r3, [r2, #44]	; 0x2c
#if USE_PUSHBOT
		motor0.velocityWindUpGuard = calculatedLimit / motor0.proportionalGain;
1a0019a0:	4b18      	ldr	r3, [pc, #96]	; (1a001a04 <updateMotorPWMPeriod+0xd8>)
1a0019a2:	69db      	ldr	r3, [r3, #28]
1a0019a4:	ea4f 74e3 	mov.w	r4, r3, asr #31
1a0019a8:	461a      	mov	r2, r3
1a0019aa:	4623      	mov	r3, r4
1a0019ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
1a0019b0:	f012 ff02 	bl	1a0147b8 <__aeabi_uldivmod>
1a0019b4:	4603      	mov	r3, r0
1a0019b6:	460c      	mov	r4, r1
1a0019b8:	461a      	mov	r2, r3
1a0019ba:	4b12      	ldr	r3, [pc, #72]	; (1a001a04 <updateMotorPWMPeriod+0xd8>)
1a0019bc:	631a      	str	r2, [r3, #48]	; 0x30
1a0019be:	e017      	b.n	1a0019f0 <updateMotorPWMPeriod+0xc4>
#endif
	} else if (motor == MOTOR1) {
1a0019c0:	687b      	ldr	r3, [r7, #4]
1a0019c2:	2b01      	cmp	r3, #1
1a0019c4:	d112      	bne.n	1a0019ec <updateMotorPWMPeriod+0xc0>
		LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL] = (uint32_t) calculatedLimit;
1a0019c6:	4a0e      	ldr	r2, [pc, #56]	; (1a001a00 <updateMotorPWMPeriod+0xd4>)
1a0019c8:	68bb      	ldr	r3, [r7, #8]
1a0019ca:	6293      	str	r3, [r2, #40]	; 0x28
#if USE_PUSHBOT
		motor1.velocityWindUpGuard = calculatedLimit / motor1.proportionalGain;
1a0019cc:	4b0e      	ldr	r3, [pc, #56]	; (1a001a08 <updateMotorPWMPeriod+0xdc>)
1a0019ce:	69db      	ldr	r3, [r3, #28]
1a0019d0:	ea4f 74e3 	mov.w	r4, r3, asr #31
1a0019d4:	461a      	mov	r2, r3
1a0019d6:	4623      	mov	r3, r4
1a0019d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
1a0019dc:	f012 feec 	bl	1a0147b8 <__aeabi_uldivmod>
1a0019e0:	4603      	mov	r3, r0
1a0019e2:	460c      	mov	r4, r1
1a0019e4:	461a      	mov	r2, r3
1a0019e6:	4b08      	ldr	r3, [pc, #32]	; (1a001a08 <updateMotorPWMPeriod+0xdc>)
1a0019e8:	631a      	str	r2, [r3, #48]	; 0x30
1a0019ea:	e001      	b.n	1a0019f0 <updateMotorPWMPeriod+0xc4>
#endif
	} else {
		return 1;
1a0019ec:	2301      	movs	r3, #1
1a0019ee:	e000      	b.n	1a0019f2 <updateMotorPWMPeriod+0xc6>
	}
	return 0;
1a0019f0:	2300      	movs	r3, #0
}
1a0019f2:	4618      	mov	r0, r3
1a0019f4:	3714      	adds	r7, #20
1a0019f6:	46bd      	mov	sp, r7
1a0019f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0019fa:	bf00      	nop
1a0019fc:	000f4240 	.word	0x000f4240
1a001a00:	400a0000 	.word	0x400a0000
1a001a04:	1008749c 	.word	0x1008749c
1a001a08:	10087460 	.word	0x10087460

1a001a0c <updateMotorMode>:
uint32_t updateMotorMode(uint32_t motor, uint32_t mode) {
1a001a0c:	b480      	push	{r7}
1a001a0e:	b083      	sub	sp, #12
1a001a10:	af00      	add	r7, sp, #0
1a001a12:	6078      	str	r0, [r7, #4]
1a001a14:	6039      	str	r1, [r7, #0]
	if (motor == MOTOR0) {
1a001a16:	687b      	ldr	r3, [r7, #4]
1a001a18:	2b00      	cmp	r3, #0
1a001a1a:	d103      	bne.n	1a001a24 <updateMotorMode+0x18>
		motor0.controlMode = mode;
1a001a1c:	4a09      	ldr	r2, [pc, #36]	; (1a001a44 <updateMotorMode+0x38>)
1a001a1e:	683b      	ldr	r3, [r7, #0]
1a001a20:	60d3      	str	r3, [r2, #12]
1a001a22:	e008      	b.n	1a001a36 <updateMotorMode+0x2a>
	} else if (motor == MOTOR1) {
1a001a24:	687b      	ldr	r3, [r7, #4]
1a001a26:	2b01      	cmp	r3, #1
1a001a28:	d103      	bne.n	1a001a32 <updateMotorMode+0x26>
		motor1.controlMode = mode;
1a001a2a:	4a07      	ldr	r2, [pc, #28]	; (1a001a48 <updateMotorMode+0x3c>)
1a001a2c:	683b      	ldr	r3, [r7, #0]
1a001a2e:	60d3      	str	r3, [r2, #12]
1a001a30:	e001      	b.n	1a001a36 <updateMotorMode+0x2a>
	} else {
		return 1;
1a001a32:	2301      	movs	r3, #1
1a001a34:	e000      	b.n	1a001a38 <updateMotorMode+0x2c>
	}
	return 0;
1a001a36:	2300      	movs	r3, #0
}
1a001a38:	4618      	mov	r0, r3
1a001a3a:	370c      	adds	r7, #12
1a001a3c:	46bd      	mov	sp, r7
1a001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001a42:	4770      	bx	lr
1a001a44:	1008749c 	.word	0x1008749c
1a001a48:	10087460 	.word	0x10087460

1a001a4c <getMotorDutycycle>:

int32_t getMotorDutycycle(uint32_t motor) {
1a001a4c:	b480      	push	{r7}
1a001a4e:	b083      	sub	sp, #12
1a001a50:	af00      	add	r7, sp, #0
1a001a52:	6078      	str	r0, [r7, #4]
	if (motor == MOTOR0) {
1a001a54:	687b      	ldr	r3, [r7, #4]
1a001a56:	2b00      	cmp	r3, #0
1a001a58:	d109      	bne.n	1a001a6e <getMotorDutycycle+0x22>
		return (motor0.currentDutycycle * 100) / (int32_t) LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL];
1a001a5a:	4b0f      	ldr	r3, [pc, #60]	; (1a001a98 <getMotorDutycycle+0x4c>)
1a001a5c:	681b      	ldr	r3, [r3, #0]
1a001a5e:	2264      	movs	r2, #100	; 0x64
1a001a60:	fb02 f303 	mul.w	r3, r2, r3
1a001a64:	4a0d      	ldr	r2, [pc, #52]	; (1a001a9c <getMotorDutycycle+0x50>)
1a001a66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001a68:	fb93 f3f2 	sdiv	r3, r3, r2
1a001a6c:	e00d      	b.n	1a001a8a <getMotorDutycycle+0x3e>
	} else if (motor == MOTOR1) {
1a001a6e:	687b      	ldr	r3, [r7, #4]
1a001a70:	2b01      	cmp	r3, #1
1a001a72:	d109      	bne.n	1a001a88 <getMotorDutycycle+0x3c>
		return (motor1.currentDutycycle * 100) / (int32_t) LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL];
1a001a74:	4b0a      	ldr	r3, [pc, #40]	; (1a001aa0 <getMotorDutycycle+0x54>)
1a001a76:	681b      	ldr	r3, [r3, #0]
1a001a78:	2264      	movs	r2, #100	; 0x64
1a001a7a:	fb02 f303 	mul.w	r3, r2, r3
1a001a7e:	4a07      	ldr	r2, [pc, #28]	; (1a001a9c <getMotorDutycycle+0x50>)
1a001a80:	6a92      	ldr	r2, [r2, #40]	; 0x28
1a001a82:	fb93 f3f2 	sdiv	r3, r3, r2
1a001a86:	e000      	b.n	1a001a8a <getMotorDutycycle+0x3e>
	}
	return 0;
1a001a88:	2300      	movs	r3, #0
}
1a001a8a:	4618      	mov	r0, r3
1a001a8c:	370c      	adds	r7, #12
1a001a8e:	46bd      	mov	sp, r7
1a001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001a94:	4770      	bx	lr
1a001a96:	bf00      	nop
1a001a98:	1008749c 	.word	0x1008749c
1a001a9c:	400a0000 	.word	0x400a0000
1a001aa0:	10087460 	.word	0x10087460

1a001aa4 <getMotorWidth>:

int32_t getMotorWidth(uint32_t motor) {
1a001aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001aa8:	b089      	sub	sp, #36	; 0x24
1a001aaa:	af00      	add	r7, sp, #0
1a001aac:	60f8      	str	r0, [r7, #12]
	if (motor == MOTOR0) {
1a001aae:	68f8      	ldr	r0, [r7, #12]
1a001ab0:	2800      	cmp	r0, #0
1a001ab2:	d13b      	bne.n	1a001b2c <getMotorWidth+0x88>
		int64_t period = ((int64_t) motor0.currentDutycycle * 1000000LL)
1a001ab4:	4b3e      	ldr	r3, [pc, #248]	; (1a001bb0 <getMotorWidth+0x10c>)
1a001ab6:	681b      	ldr	r3, [r3, #0]
1a001ab8:	461d      	mov	r5, r3
1a001aba:	ea4f 76e5 	mov.w	r6, r5, asr #31
1a001abe:	462b      	mov	r3, r5
1a001ac0:	4634      	mov	r4, r6
1a001ac2:	0260      	lsls	r0, r4, #9
1a001ac4:	6078      	str	r0, [r7, #4]
1a001ac6:	6878      	ldr	r0, [r7, #4]
1a001ac8:	ea40 50d3 	orr.w	r0, r0, r3, lsr #23
1a001acc:	6078      	str	r0, [r7, #4]
1a001ace:	025b      	lsls	r3, r3, #9
1a001ad0:	603b      	str	r3, [r7, #0]
1a001ad2:	e9d7 3400 	ldrd	r3, r4, [r7]
1a001ad6:	0162      	lsls	r2, r4, #5
1a001ad8:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
1a001adc:	0159      	lsls	r1, r3, #5
1a001ade:	1ac9      	subs	r1, r1, r3
1a001ae0:	eb62 0204 	sbc.w	r2, r2, r4
1a001ae4:	1949      	adds	r1, r1, r5
1a001ae6:	eb42 0206 	adc.w	r2, r2, r6
1a001aea:	ea4f 1982 	mov.w	r9, r2, lsl #6
1a001aee:	ea49 6991 	orr.w	r9, r9, r1, lsr #26
1a001af2:	ea4f 1881 	mov.w	r8, r1, lsl #6
1a001af6:	ebb8 0801 	subs.w	r8, r8, r1
1a001afa:	eb69 0902 	sbc.w	r9, r9, r2
1a001afe:	eb18 0305 	adds.w	r3, r8, r5
1a001b02:	eb49 0406 	adc.w	r4, r9, r6
1a001b06:	4625      	mov	r5, r4
1a001b08:	461c      	mov	r4, r3
				/ (int64_t) Chip_Clock_GetRate(CLK_APB1_MOTOCON);
1a001b0a:	2021      	movs	r0, #33	; 0x21
1a001b0c:	f010 fd6c 	bl	1a0125e8 <Chip_Clock_GetRate>
1a001b10:	4603      	mov	r3, r0
1a001b12:	461a      	mov	r2, r3
1a001b14:	f04f 0300 	mov.w	r3, #0
	return 0;
}

int32_t getMotorWidth(uint32_t motor) {
	if (motor == MOTOR0) {
		int64_t period = ((int64_t) motor0.currentDutycycle * 1000000LL)
1a001b18:	4620      	mov	r0, r4
1a001b1a:	4629      	mov	r1, r5
1a001b1c:	f012 fdfc 	bl	1a014718 <__aeabi_ldivmod>
1a001b20:	4603      	mov	r3, r0
1a001b22:	460c      	mov	r4, r1
1a001b24:	e9c7 3406 	strd	r3, r4, [r7, #24]
				/ (int64_t) Chip_Clock_GetRate(CLK_APB1_MOTOCON);
		return (int32_t) period;
1a001b28:	69bb      	ldr	r3, [r7, #24]
1a001b2a:	e03c      	b.n	1a001ba6 <getMotorWidth+0x102>
	} else if (motor == MOTOR1) {
1a001b2c:	68fa      	ldr	r2, [r7, #12]
1a001b2e:	2a01      	cmp	r2, #1
1a001b30:	d137      	bne.n	1a001ba2 <getMotorWidth+0xfe>
		int64_t period = ((int64_t) motor1.currentDutycycle * 1000000LL)
1a001b32:	4a20      	ldr	r2, [pc, #128]	; (1a001bb4 <getMotorWidth+0x110>)
1a001b34:	6812      	ldr	r2, [r2, #0]
1a001b36:	4690      	mov	r8, r2
1a001b38:	ea4f 79e8 	mov.w	r9, r8, asr #31
1a001b3c:	4641      	mov	r1, r8
1a001b3e:	464a      	mov	r2, r9
1a001b40:	ea4f 2b42 	mov.w	fp, r2, lsl #9
1a001b44:	ea4b 5bd1 	orr.w	fp, fp, r1, lsr #23
1a001b48:	ea4f 2a41 	mov.w	sl, r1, lsl #9
1a001b4c:	4651      	mov	r1, sl
1a001b4e:	465a      	mov	r2, fp
1a001b50:	0154      	lsls	r4, r2, #5
1a001b52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
1a001b56:	014b      	lsls	r3, r1, #5
1a001b58:	1a5b      	subs	r3, r3, r1
1a001b5a:	eb64 0402 	sbc.w	r4, r4, r2
1a001b5e:	eb13 0308 	adds.w	r3, r3, r8
1a001b62:	eb44 0409 	adc.w	r4, r4, r9
1a001b66:	01a6      	lsls	r6, r4, #6
1a001b68:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
1a001b6c:	019d      	lsls	r5, r3, #6
1a001b6e:	1aed      	subs	r5, r5, r3
1a001b70:	eb66 0604 	sbc.w	r6, r6, r4
1a001b74:	eb15 0308 	adds.w	r3, r5, r8
1a001b78:	eb46 0409 	adc.w	r4, r6, r9
1a001b7c:	4625      	mov	r5, r4
1a001b7e:	461c      	mov	r4, r3
				/ (int64_t) Chip_Clock_GetRate(CLK_APB1_MOTOCON);
1a001b80:	2021      	movs	r0, #33	; 0x21
1a001b82:	f010 fd31 	bl	1a0125e8 <Chip_Clock_GetRate>
1a001b86:	4603      	mov	r3, r0
1a001b88:	461a      	mov	r2, r3
1a001b8a:	f04f 0300 	mov.w	r3, #0
	if (motor == MOTOR0) {
		int64_t period = ((int64_t) motor0.currentDutycycle * 1000000LL)
				/ (int64_t) Chip_Clock_GetRate(CLK_APB1_MOTOCON);
		return (int32_t) period;
	} else if (motor == MOTOR1) {
		int64_t period = ((int64_t) motor1.currentDutycycle * 1000000LL)
1a001b8e:	4620      	mov	r0, r4
1a001b90:	4629      	mov	r1, r5
1a001b92:	f012 fdc1 	bl	1a014718 <__aeabi_ldivmod>
1a001b96:	4603      	mov	r3, r0
1a001b98:	460c      	mov	r4, r1
1a001b9a:	e9c7 3404 	strd	r3, r4, [r7, #16]
				/ (int64_t) Chip_Clock_GetRate(CLK_APB1_MOTOCON);
		return (int32_t) period;
1a001b9e:	693b      	ldr	r3, [r7, #16]
1a001ba0:	e001      	b.n	1a001ba6 <getMotorWidth+0x102>
	}
	return -1;
1a001ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
1a001ba6:	4618      	mov	r0, r3
1a001ba8:	3724      	adds	r7, #36	; 0x24
1a001baa:	46bd      	mov	sp, r7
1a001bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001bb0:	1008749c 	.word	0x1008749c
1a001bb4:	10087460 	.word	0x10087460

1a001bb8 <updateMotorPID>:

#if USE_PUSHBOT
#include "pushbot.h"

uint32_t updateMotorPID(uint32_t motor, int32_t pGain, int32_t iGain, int32_t dGain) {
1a001bb8:	b480      	push	{r7}
1a001bba:	b085      	sub	sp, #20
1a001bbc:	af00      	add	r7, sp, #0
1a001bbe:	60f8      	str	r0, [r7, #12]
1a001bc0:	60b9      	str	r1, [r7, #8]
1a001bc2:	607a      	str	r2, [r7, #4]
1a001bc4:	603b      	str	r3, [r7, #0]
	if (motor == MOTOR0) {
1a001bc6:	68fb      	ldr	r3, [r7, #12]
1a001bc8:	2b00      	cmp	r3, #0
1a001bca:	d109      	bne.n	1a001be0 <updateMotorPID+0x28>
		motor0.proportionalGain = pGain;
1a001bcc:	4a0f      	ldr	r2, [pc, #60]	; (1a001c0c <updateMotorPID+0x54>)
1a001bce:	68bb      	ldr	r3, [r7, #8]
1a001bd0:	61d3      	str	r3, [r2, #28]
		motor0.integralGain = iGain;
1a001bd2:	4a0e      	ldr	r2, [pc, #56]	; (1a001c0c <updateMotorPID+0x54>)
1a001bd4:	687b      	ldr	r3, [r7, #4]
1a001bd6:	6213      	str	r3, [r2, #32]
		motor0.derivativeGain = dGain;
1a001bd8:	4a0c      	ldr	r2, [pc, #48]	; (1a001c0c <updateMotorPID+0x54>)
1a001bda:	683b      	ldr	r3, [r7, #0]
1a001bdc:	6253      	str	r3, [r2, #36]	; 0x24
1a001bde:	e00e      	b.n	1a001bfe <updateMotorPID+0x46>
	} else if (motor == MOTOR1) {
1a001be0:	68fb      	ldr	r3, [r7, #12]
1a001be2:	2b01      	cmp	r3, #1
1a001be4:	d109      	bne.n	1a001bfa <updateMotorPID+0x42>
		motor1.proportionalGain = pGain;
1a001be6:	4a0a      	ldr	r2, [pc, #40]	; (1a001c10 <updateMotorPID+0x58>)
1a001be8:	68bb      	ldr	r3, [r7, #8]
1a001bea:	61d3      	str	r3, [r2, #28]
		motor1.integralGain = iGain;
1a001bec:	4a08      	ldr	r2, [pc, #32]	; (1a001c10 <updateMotorPID+0x58>)
1a001bee:	687b      	ldr	r3, [r7, #4]
1a001bf0:	6213      	str	r3, [r2, #32]
		motor1.derivativeGain = dGain;
1a001bf2:	4a07      	ldr	r2, [pc, #28]	; (1a001c10 <updateMotorPID+0x58>)
1a001bf4:	683b      	ldr	r3, [r7, #0]
1a001bf6:	6253      	str	r3, [r2, #36]	; 0x24
1a001bf8:	e001      	b.n	1a001bfe <updateMotorPID+0x46>
	} else {
		return 1;
1a001bfa:	2301      	movs	r3, #1
1a001bfc:	e000      	b.n	1a001c00 <updateMotorPID+0x48>
	}
	return 0;
1a001bfe:	2300      	movs	r3, #0
}
1a001c00:	4618      	mov	r0, r3
1a001c02:	3714      	adds	r7, #20
1a001c04:	46bd      	mov	sp, r7
1a001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001c0a:	4770      	bx	lr
1a001c0c:	1008749c 	.word	0x1008749c
1a001c10:	10087460 	.word	0x10087460

1a001c14 <updateMotorVelocity>:
#define MAX_SPEED	100
uint32_t updateMotorVelocity(uint32_t motor, int32_t speed) {
1a001c14:	b480      	push	{r7}
1a001c16:	b083      	sub	sp, #12
1a001c18:	af00      	add	r7, sp, #0
1a001c1a:	6078      	str	r0, [r7, #4]
1a001c1c:	6039      	str	r1, [r7, #0]
	if (speed > MAX_SPEED) {
1a001c1e:	683b      	ldr	r3, [r7, #0]
1a001c20:	2b64      	cmp	r3, #100	; 0x64
1a001c22:	dd02      	ble.n	1a001c2a <updateMotorVelocity+0x16>
		speed = MAX_SPEED;
1a001c24:	2364      	movs	r3, #100	; 0x64
1a001c26:	603b      	str	r3, [r7, #0]
1a001c28:	e006      	b.n	1a001c38 <updateMotorVelocity+0x24>
	} else if (speed < -MAX_SPEED) {
1a001c2a:	683b      	ldr	r3, [r7, #0]
1a001c2c:	f113 0f64 	cmn.w	r3, #100	; 0x64
1a001c30:	da02      	bge.n	1a001c38 <updateMotorVelocity+0x24>
		speed = -MAX_SPEED;
1a001c32:	f06f 0363 	mvn.w	r3, #99	; 0x63
1a001c36:	603b      	str	r3, [r7, #0]
	}

	if (motor == MOTOR0) {
1a001c38:	687b      	ldr	r3, [r7, #4]
1a001c3a:	2b00      	cmp	r3, #0
1a001c3c:	d113      	bne.n	1a001c66 <updateMotorVelocity+0x52>
		motor0.controllerWindUpGuard = 0;
1a001c3e:	4b1a      	ldr	r3, [pc, #104]	; (1a001ca8 <updateMotorVelocity+0x94>)
1a001c40:	2200      	movs	r2, #0
1a001c42:	635a      	str	r2, [r3, #52]	; 0x34
		motor0.requestedVelocity = speed;
1a001c44:	4a18      	ldr	r2, [pc, #96]	; (1a001ca8 <updateMotorVelocity+0x94>)
1a001c46:	683b      	ldr	r3, [r7, #0]
1a001c48:	6153      	str	r3, [r2, #20]
		//leftWheel.wheelStatus = 0;
		if (motor0.controlMode & DIRECT_MODE) {
1a001c4a:	4b17      	ldr	r3, [pc, #92]	; (1a001ca8 <updateMotorVelocity+0x94>)
1a001c4c:	68db      	ldr	r3, [r3, #12]
1a001c4e:	f003 0301 	and.w	r3, r3, #1
1a001c52:	2b00      	cmp	r3, #0
1a001c54:	d003      	beq.n	1a001c5e <updateMotorVelocity+0x4a>
			motor0.requestedPosition = leftWheel.wheelStatus;
1a001c56:	4b15      	ldr	r3, [pc, #84]	; (1a001cac <updateMotorVelocity+0x98>)
1a001c58:	681b      	ldr	r3, [r3, #0]
1a001c5a:	4a13      	ldr	r2, [pc, #76]	; (1a001ca8 <updateMotorVelocity+0x94>)
1a001c5c:	6193      	str	r3, [r2, #24]
		}
		motor0.controlMode = VELOCITY_MODE;
1a001c5e:	4b12      	ldr	r3, [pc, #72]	; (1a001ca8 <updateMotorVelocity+0x94>)
1a001c60:	2202      	movs	r2, #2
1a001c62:	60da      	str	r2, [r3, #12]
1a001c64:	e018      	b.n	1a001c98 <updateMotorVelocity+0x84>
	} else if (motor == MOTOR1) {
1a001c66:	687b      	ldr	r3, [r7, #4]
1a001c68:	2b01      	cmp	r3, #1
1a001c6a:	d113      	bne.n	1a001c94 <updateMotorVelocity+0x80>
		motor1.controllerWindUpGuard = 0;
1a001c6c:	4b10      	ldr	r3, [pc, #64]	; (1a001cb0 <updateMotorVelocity+0x9c>)
1a001c6e:	2200      	movs	r2, #0
1a001c70:	635a      	str	r2, [r3, #52]	; 0x34
		motor1.requestedVelocity = speed;
1a001c72:	4a0f      	ldr	r2, [pc, #60]	; (1a001cb0 <updateMotorVelocity+0x9c>)
1a001c74:	683b      	ldr	r3, [r7, #0]
1a001c76:	6153      	str	r3, [r2, #20]
		//rightWheel.wheelStatus = 0;
		if (motor1.controlMode & DIRECT_MODE) {
1a001c78:	4b0d      	ldr	r3, [pc, #52]	; (1a001cb0 <updateMotorVelocity+0x9c>)
1a001c7a:	68db      	ldr	r3, [r3, #12]
1a001c7c:	f003 0301 	and.w	r3, r3, #1
1a001c80:	2b00      	cmp	r3, #0
1a001c82:	d003      	beq.n	1a001c8c <updateMotorVelocity+0x78>
			motor1.requestedPosition = rightWheel.wheelStatus;
1a001c84:	4b0b      	ldr	r3, [pc, #44]	; (1a001cb4 <updateMotorVelocity+0xa0>)
1a001c86:	681b      	ldr	r3, [r3, #0]
1a001c88:	4a09      	ldr	r2, [pc, #36]	; (1a001cb0 <updateMotorVelocity+0x9c>)
1a001c8a:	6193      	str	r3, [r2, #24]
		}
		motor1.controlMode = VELOCITY_MODE;
1a001c8c:	4b08      	ldr	r3, [pc, #32]	; (1a001cb0 <updateMotorVelocity+0x9c>)
1a001c8e:	2202      	movs	r2, #2
1a001c90:	60da      	str	r2, [r3, #12]
1a001c92:	e001      	b.n	1a001c98 <updateMotorVelocity+0x84>
	} else {
		return 1;
1a001c94:	2301      	movs	r3, #1
1a001c96:	e000      	b.n	1a001c9a <updateMotorVelocity+0x86>
	}
	return 0;
1a001c98:	2300      	movs	r3, #0
}
1a001c9a:	4618      	mov	r0, r3
1a001c9c:	370c      	adds	r7, #12
1a001c9e:	46bd      	mov	sp, r7
1a001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001ca4:	4770      	bx	lr
1a001ca6:	bf00      	nop
1a001ca8:	1008749c 	.word	0x1008749c
1a001cac:	100874d8 	.word	0x100874d8
1a001cb0:	10087460 	.word	0x10087460
1a001cb4:	100874e4 	.word	0x100874e4

1a001cb8 <updateMotorController>:

uint32_t updateMotorController(uint32_t motor) {
1a001cb8:	b580      	push	{r7, lr}
1a001cba:	b086      	sub	sp, #24
1a001cbc:	af00      	add	r7, sp, #0
1a001cbe:	6078      	str	r0, [r7, #4]
	if (motor == MOTOR0) {
1a001cc0:	687b      	ldr	r3, [r7, #4]
1a001cc2:	2b00      	cmp	r3, #0
1a001cc4:	d16f      	bne.n	1a001da6 <updateMotorController+0xee>
		if (motor0.velocityPrescalerCounter == 0) {
1a001cc6:	4b75      	ldr	r3, [pc, #468]	; (1a001e9c <updateMotorController+0x1e4>)
1a001cc8:	8a5b      	ldrh	r3, [r3, #18]
1a001cca:	2b00      	cmp	r3, #0
1a001ccc:	d10b      	bne.n	1a001ce6 <updateMotorController+0x2e>
			motor0.velocityPrescalerCounter = motor0.velocityPrescaler;
1a001cce:	4b73      	ldr	r3, [pc, #460]	; (1a001e9c <updateMotorController+0x1e4>)
1a001cd0:	8a1a      	ldrh	r2, [r3, #16]
1a001cd2:	4b72      	ldr	r3, [pc, #456]	; (1a001e9c <updateMotorController+0x1e4>)
1a001cd4:	825a      	strh	r2, [r3, #18]
			motor0.requestedPosition += motor0.requestedVelocity;
1a001cd6:	4b71      	ldr	r3, [pc, #452]	; (1a001e9c <updateMotorController+0x1e4>)
1a001cd8:	699a      	ldr	r2, [r3, #24]
1a001cda:	4b70      	ldr	r3, [pc, #448]	; (1a001e9c <updateMotorController+0x1e4>)
1a001cdc:	695b      	ldr	r3, [r3, #20]
1a001cde:	4413      	add	r3, r2
1a001ce0:	4a6e      	ldr	r2, [pc, #440]	; (1a001e9c <updateMotorController+0x1e4>)
1a001ce2:	6193      	str	r3, [r2, #24]
1a001ce4:	e005      	b.n	1a001cf2 <updateMotorController+0x3a>
		} else {
			motor0.velocityPrescalerCounter--;
1a001ce6:	4b6d      	ldr	r3, [pc, #436]	; (1a001e9c <updateMotorController+0x1e4>)
1a001ce8:	8a5b      	ldrh	r3, [r3, #18]
1a001cea:	3b01      	subs	r3, #1
1a001cec:	b29a      	uxth	r2, r3
1a001cee:	4b6b      	ldr	r3, [pc, #428]	; (1a001e9c <updateMotorController+0x1e4>)
1a001cf0:	825a      	strh	r2, [r3, #18]
		}
		int32_t error = motor0.requestedPosition - leftWheel.wheelStatus;
1a001cf2:	4b6a      	ldr	r3, [pc, #424]	; (1a001e9c <updateMotorController+0x1e4>)
1a001cf4:	699a      	ldr	r2, [r3, #24]
1a001cf6:	4b6a      	ldr	r3, [pc, #424]	; (1a001ea0 <updateMotorController+0x1e8>)
1a001cf8:	681b      	ldr	r3, [r3, #0]
1a001cfa:	1ad3      	subs	r3, r2, r3
1a001cfc:	60fb      	str	r3, [r7, #12]
		//Check for a windup error
		if (error > motor0.velocityWindUpGuard) {
1a001cfe:	4b67      	ldr	r3, [pc, #412]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
1a001d02:	68fb      	ldr	r3, [r7, #12]
1a001d04:	429a      	cmp	r2, r3
1a001d06:	da07      	bge.n	1a001d18 <updateMotorController+0x60>
			motor0.requestedPosition = leftWheel.wheelStatus + motor0.velocityWindUpGuard;
1a001d08:	4b65      	ldr	r3, [pc, #404]	; (1a001ea0 <updateMotorController+0x1e8>)
1a001d0a:	681a      	ldr	r2, [r3, #0]
1a001d0c:	4b63      	ldr	r3, [pc, #396]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001d10:	4413      	add	r3, r2
1a001d12:	4a62      	ldr	r2, [pc, #392]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d14:	6193      	str	r3, [r2, #24]
1a001d16:	e00c      	b.n	1a001d32 <updateMotorController+0x7a>
		} else if (error < -motor0.velocityWindUpGuard) {
1a001d18:	4b60      	ldr	r3, [pc, #384]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001d1c:	425a      	negs	r2, r3
1a001d1e:	68fb      	ldr	r3, [r7, #12]
1a001d20:	429a      	cmp	r2, r3
1a001d22:	dd06      	ble.n	1a001d32 <updateMotorController+0x7a>
			motor0.requestedPosition = leftWheel.wheelStatus - motor0.velocityWindUpGuard;
1a001d24:	4b5e      	ldr	r3, [pc, #376]	; (1a001ea0 <updateMotorController+0x1e8>)
1a001d26:	681a      	ldr	r2, [r3, #0]
1a001d28:	4b5c      	ldr	r3, [pc, #368]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001d2c:	1ad3      	subs	r3, r2, r3
1a001d2e:	4a5b      	ldr	r2, [pc, #364]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d30:	6193      	str	r3, [r2, #24]
		}
		motor0.errorIntegral += error;
1a001d32:	4b5a      	ldr	r3, [pc, #360]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001d36:	68fb      	ldr	r3, [r7, #12]
1a001d38:	4413      	add	r3, r2
1a001d3a:	4a58      	ldr	r2, [pc, #352]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d3c:	62d3      	str	r3, [r2, #44]	; 0x2c
		if (motor0.errorIntegral > motor0.controllerWindUpGuard) {
1a001d3e:	4b57      	ldr	r3, [pc, #348]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001d42:	4b56      	ldr	r3, [pc, #344]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a001d46:	429a      	cmp	r2, r3
1a001d48:	dd04      	ble.n	1a001d54 <updateMotorController+0x9c>
			motor0.errorIntegral = motor0.controllerWindUpGuard;
1a001d4a:	4b54      	ldr	r3, [pc, #336]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a001d4e:	4a53      	ldr	r2, [pc, #332]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d50:	62d3      	str	r3, [r2, #44]	; 0x2c
1a001d52:	e00a      	b.n	1a001d6a <updateMotorController+0xb2>
		} else if (error < -motor0.velocityWindUpGuard) {
1a001d54:	4b51      	ldr	r3, [pc, #324]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001d58:	425a      	negs	r2, r3
1a001d5a:	68fb      	ldr	r3, [r7, #12]
1a001d5c:	429a      	cmp	r2, r3
1a001d5e:	dd04      	ble.n	1a001d6a <updateMotorController+0xb2>
			motor0.errorIntegral = -motor0.controllerWindUpGuard;
1a001d60:	4b4e      	ldr	r3, [pc, #312]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a001d64:	425b      	negs	r3, r3
1a001d66:	4a4d      	ldr	r2, [pc, #308]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d68:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		motor0.lastError = error;
1a001d6a:	4a4c      	ldr	r2, [pc, #304]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d6c:	68fb      	ldr	r3, [r7, #12]
1a001d6e:	6293      	str	r3, [r2, #40]	; 0x28
		int32_t control = motor0.proportionalGain * error + motor0.derivativeGain * (error - motor0.lastError)
1a001d70:	4b4a      	ldr	r3, [pc, #296]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d72:	69db      	ldr	r3, [r3, #28]
1a001d74:	68fa      	ldr	r2, [r7, #12]
1a001d76:	fb02 f203 	mul.w	r2, r2, r3
1a001d7a:	4b48      	ldr	r3, [pc, #288]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a001d7e:	4947      	ldr	r1, [pc, #284]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d80:	6a89      	ldr	r1, [r1, #40]	; 0x28
1a001d82:	68f8      	ldr	r0, [r7, #12]
1a001d84:	1a41      	subs	r1, r0, r1
1a001d86:	fb01 f303 	mul.w	r3, r1, r3
1a001d8a:	441a      	add	r2, r3
				+ motor0.integralGain * motor0.errorIntegral;
1a001d8c:	4b43      	ldr	r3, [pc, #268]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d8e:	6a1b      	ldr	r3, [r3, #32]
1a001d90:	4942      	ldr	r1, [pc, #264]	; (1a001e9c <updateMotorController+0x1e4>)
1a001d92:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001d94:	fb01 f303 	mul.w	r3, r1, r3
			motor0.errorIntegral = motor0.controllerWindUpGuard;
		} else if (error < -motor0.velocityWindUpGuard) {
			motor0.errorIntegral = -motor0.controllerWindUpGuard;
		}
		motor0.lastError = error;
		int32_t control = motor0.proportionalGain * error + motor0.derivativeGain * (error - motor0.lastError)
1a001d98:	4413      	add	r3, r2
1a001d9a:	60bb      	str	r3, [r7, #8]
				+ motor0.integralGain * motor0.errorIntegral;
		updateMotorWidth(MOTOR0, control);
1a001d9c:	68b9      	ldr	r1, [r7, #8]
1a001d9e:	2000      	movs	r0, #0
1a001da0:	f000 fa06 	bl	1a0021b0 <updateMotorWidth>
1a001da4:	e074      	b.n	1a001e90 <updateMotorController+0x1d8>
	} else if (motor == MOTOR1) {
1a001da6:	687b      	ldr	r3, [r7, #4]
1a001da8:	2b01      	cmp	r3, #1
1a001daa:	d16f      	bne.n	1a001e8c <updateMotorController+0x1d4>
		if (motor1.velocityPrescalerCounter == 0) {
1a001dac:	4b3d      	ldr	r3, [pc, #244]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001dae:	8a5b      	ldrh	r3, [r3, #18]
1a001db0:	2b00      	cmp	r3, #0
1a001db2:	d10b      	bne.n	1a001dcc <updateMotorController+0x114>
			motor1.velocityPrescalerCounter = motor1.velocityPrescaler;
1a001db4:	4b3b      	ldr	r3, [pc, #236]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001db6:	8a1a      	ldrh	r2, [r3, #16]
1a001db8:	4b3a      	ldr	r3, [pc, #232]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001dba:	825a      	strh	r2, [r3, #18]
			motor1.requestedPosition += motor1.requestedVelocity;
1a001dbc:	4b39      	ldr	r3, [pc, #228]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001dbe:	699a      	ldr	r2, [r3, #24]
1a001dc0:	4b38      	ldr	r3, [pc, #224]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001dc2:	695b      	ldr	r3, [r3, #20]
1a001dc4:	4413      	add	r3, r2
1a001dc6:	4a37      	ldr	r2, [pc, #220]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001dc8:	6193      	str	r3, [r2, #24]
1a001dca:	e005      	b.n	1a001dd8 <updateMotorController+0x120>
		} else {
			motor1.velocityPrescalerCounter--;
1a001dcc:	4b35      	ldr	r3, [pc, #212]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001dce:	8a5b      	ldrh	r3, [r3, #18]
1a001dd0:	3b01      	subs	r3, #1
1a001dd2:	b29a      	uxth	r2, r3
1a001dd4:	4b33      	ldr	r3, [pc, #204]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001dd6:	825a      	strh	r2, [r3, #18]
		}
		int32_t error = motor1.requestedPosition - rightWheel.wheelStatus;
1a001dd8:	4b32      	ldr	r3, [pc, #200]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001dda:	699a      	ldr	r2, [r3, #24]
1a001ddc:	4b32      	ldr	r3, [pc, #200]	; (1a001ea8 <updateMotorController+0x1f0>)
1a001dde:	681b      	ldr	r3, [r3, #0]
1a001de0:	1ad3      	subs	r3, r2, r3
1a001de2:	617b      	str	r3, [r7, #20]
		//Check for a windup error
		if (error > motor1.velocityWindUpGuard) {
1a001de4:	4b2f      	ldr	r3, [pc, #188]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
1a001de8:	697b      	ldr	r3, [r7, #20]
1a001dea:	429a      	cmp	r2, r3
1a001dec:	da07      	bge.n	1a001dfe <updateMotorController+0x146>
			motor1.requestedPosition = rightWheel.wheelStatus + motor1.velocityWindUpGuard;
1a001dee:	4b2e      	ldr	r3, [pc, #184]	; (1a001ea8 <updateMotorController+0x1f0>)
1a001df0:	681a      	ldr	r2, [r3, #0]
1a001df2:	4b2c      	ldr	r3, [pc, #176]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001df6:	4413      	add	r3, r2
1a001df8:	4a2a      	ldr	r2, [pc, #168]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001dfa:	6193      	str	r3, [r2, #24]
1a001dfc:	e00c      	b.n	1a001e18 <updateMotorController+0x160>
		} else if (error < -motor1.velocityWindUpGuard) {
1a001dfe:	4b29      	ldr	r3, [pc, #164]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001e02:	425a      	negs	r2, r3
1a001e04:	697b      	ldr	r3, [r7, #20]
1a001e06:	429a      	cmp	r2, r3
1a001e08:	dd06      	ble.n	1a001e18 <updateMotorController+0x160>
			motor1.requestedPosition = rightWheel.wheelStatus - motor1.velocityWindUpGuard;
1a001e0a:	4b27      	ldr	r3, [pc, #156]	; (1a001ea8 <updateMotorController+0x1f0>)
1a001e0c:	681a      	ldr	r2, [r3, #0]
1a001e0e:	4b25      	ldr	r3, [pc, #148]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001e12:	1ad3      	subs	r3, r2, r3
1a001e14:	4a23      	ldr	r2, [pc, #140]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e16:	6193      	str	r3, [r2, #24]
		}
		motor1.errorIntegral += error;
1a001e18:	4b22      	ldr	r3, [pc, #136]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001e1c:	697b      	ldr	r3, [r7, #20]
1a001e1e:	4413      	add	r3, r2
1a001e20:	4a20      	ldr	r2, [pc, #128]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e22:	62d3      	str	r3, [r2, #44]	; 0x2c
		if (motor1.errorIntegral > motor1.controllerWindUpGuard) {
1a001e24:	4b1f      	ldr	r3, [pc, #124]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001e28:	4b1e      	ldr	r3, [pc, #120]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a001e2c:	429a      	cmp	r2, r3
1a001e2e:	dd04      	ble.n	1a001e3a <updateMotorController+0x182>
			motor1.errorIntegral = motor1.controllerWindUpGuard;
1a001e30:	4b1c      	ldr	r3, [pc, #112]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a001e34:	4a1b      	ldr	r2, [pc, #108]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e36:	62d3      	str	r3, [r2, #44]	; 0x2c
1a001e38:	e00a      	b.n	1a001e50 <updateMotorController+0x198>
		} else if (error < -motor1.velocityWindUpGuard) {
1a001e3a:	4b1a      	ldr	r3, [pc, #104]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001e3e:	425a      	negs	r2, r3
1a001e40:	697b      	ldr	r3, [r7, #20]
1a001e42:	429a      	cmp	r2, r3
1a001e44:	dd04      	ble.n	1a001e50 <updateMotorController+0x198>
			motor1.errorIntegral = -motor1.controllerWindUpGuard;
1a001e46:	4b17      	ldr	r3, [pc, #92]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a001e4a:	425b      	negs	r3, r3
1a001e4c:	4a15      	ldr	r2, [pc, #84]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e4e:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		motor1.lastError = error;
1a001e50:	4a14      	ldr	r2, [pc, #80]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e52:	697b      	ldr	r3, [r7, #20]
1a001e54:	6293      	str	r3, [r2, #40]	; 0x28
		int32_t control = motor1.proportionalGain * error + motor1.derivativeGain * (error - motor1.lastError)
1a001e56:	4b13      	ldr	r3, [pc, #76]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e58:	69db      	ldr	r3, [r3, #28]
1a001e5a:	697a      	ldr	r2, [r7, #20]
1a001e5c:	fb02 f203 	mul.w	r2, r2, r3
1a001e60:	4b10      	ldr	r3, [pc, #64]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a001e64:	490f      	ldr	r1, [pc, #60]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e66:	6a89      	ldr	r1, [r1, #40]	; 0x28
1a001e68:	6978      	ldr	r0, [r7, #20]
1a001e6a:	1a41      	subs	r1, r0, r1
1a001e6c:	fb01 f303 	mul.w	r3, r1, r3
1a001e70:	441a      	add	r2, r3
				+ motor1.integralGain * motor1.errorIntegral;
1a001e72:	4b0c      	ldr	r3, [pc, #48]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e74:	6a1b      	ldr	r3, [r3, #32]
1a001e76:	490b      	ldr	r1, [pc, #44]	; (1a001ea4 <updateMotorController+0x1ec>)
1a001e78:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001e7a:	fb01 f303 	mul.w	r3, r1, r3
			motor1.errorIntegral = motor1.controllerWindUpGuard;
		} else if (error < -motor1.velocityWindUpGuard) {
			motor1.errorIntegral = -motor1.controllerWindUpGuard;
		}
		motor1.lastError = error;
		int32_t control = motor1.proportionalGain * error + motor1.derivativeGain * (error - motor1.lastError)
1a001e7e:	4413      	add	r3, r2
1a001e80:	613b      	str	r3, [r7, #16]
				+ motor1.integralGain * motor1.errorIntegral;
		updateMotorWidth(MOTOR1, control);
1a001e82:	6939      	ldr	r1, [r7, #16]
1a001e84:	2001      	movs	r0, #1
1a001e86:	f000 f993 	bl	1a0021b0 <updateMotorWidth>
1a001e8a:	e001      	b.n	1a001e90 <updateMotorController+0x1d8>
	} else {
		return 1;
1a001e8c:	2301      	movs	r3, #1
1a001e8e:	e000      	b.n	1a001e92 <updateMotorController+0x1da>
	}
	return 0;
1a001e90:	2300      	movs	r3, #0
}
1a001e92:	4618      	mov	r0, r3
1a001e94:	3718      	adds	r7, #24
1a001e96:	46bd      	mov	sp, r7
1a001e98:	bd80      	pop	{r7, pc}
1a001e9a:	bf00      	nop
1a001e9c:	1008749c 	.word	0x1008749c
1a001ea0:	100874d8 	.word	0x100874d8
1a001ea4:	10087460 	.word	0x10087460
1a001ea8:	100874e4 	.word	0x100874e4

1a001eac <updateMotorVelocityDecay>:

uint32_t updateMotorVelocityDecay(uint32_t motor, int32_t speed) {
1a001eac:	b580      	push	{r7, lr}
1a001eae:	b082      	sub	sp, #8
1a001eb0:	af00      	add	r7, sp, #0
1a001eb2:	6078      	str	r0, [r7, #4]
1a001eb4:	6039      	str	r1, [r7, #0]
	if (updateMotorVelocity(motor, speed)) {
1a001eb6:	6839      	ldr	r1, [r7, #0]
1a001eb8:	6878      	ldr	r0, [r7, #4]
1a001eba:	f7ff feab 	bl	1a001c14 <updateMotorVelocity>
1a001ebe:	4603      	mov	r3, r0
1a001ec0:	2b00      	cmp	r3, #0
1a001ec2:	d001      	beq.n	1a001ec8 <updateMotorVelocityDecay+0x1c>
		return 1;
1a001ec4:	2301      	movs	r3, #1
1a001ec6:	e014      	b.n	1a001ef2 <updateMotorVelocityDecay+0x46>
	}
	if (motor == MOTOR0) {
1a001ec8:	687b      	ldr	r3, [r7, #4]
1a001eca:	2b00      	cmp	r3, #0
1a001ecc:	d103      	bne.n	1a001ed6 <updateMotorVelocityDecay+0x2a>
		motor0.decayCounter = 10;
1a001ece:	4b0b      	ldr	r3, [pc, #44]	; (1a001efc <updateMotorVelocityDecay+0x50>)
1a001ed0:	220a      	movs	r2, #10
1a001ed2:	609a      	str	r2, [r3, #8]
1a001ed4:	e008      	b.n	1a001ee8 <updateMotorVelocityDecay+0x3c>
	} else if (motor == MOTOR1) {
1a001ed6:	687b      	ldr	r3, [r7, #4]
1a001ed8:	2b01      	cmp	r3, #1
1a001eda:	d103      	bne.n	1a001ee4 <updateMotorVelocityDecay+0x38>
		motor1.decayCounter = 10;
1a001edc:	4b08      	ldr	r3, [pc, #32]	; (1a001f00 <updateMotorVelocityDecay+0x54>)
1a001ede:	220a      	movs	r2, #10
1a001ee0:	609a      	str	r2, [r3, #8]
1a001ee2:	e001      	b.n	1a001ee8 <updateMotorVelocityDecay+0x3c>
	} else {
		return 1;
1a001ee4:	2301      	movs	r3, #1
1a001ee6:	e004      	b.n	1a001ef2 <updateMotorVelocityDecay+0x46>
	}
	return updateMotorMode(motor, DECAY_MODE | VELOCITY_MODE);
1a001ee8:	2106      	movs	r1, #6
1a001eea:	6878      	ldr	r0, [r7, #4]
1a001eec:	f7ff fd8e 	bl	1a001a0c <updateMotorMode>
1a001ef0:	4603      	mov	r3, r0
}
1a001ef2:	4618      	mov	r0, r3
1a001ef4:	3708      	adds	r7, #8
1a001ef6:	46bd      	mov	sp, r7
1a001ef8:	bd80      	pop	{r7, pc}
1a001efa:	bf00      	nop
1a001efc:	1008749c 	.word	0x1008749c
1a001f00:	10087460 	.word	0x10087460

1a001f04 <updateMotorDutyCycleDecay>:

#endif

uint32_t updateMotorDutyCycleDecay(uint32_t motor, int32_t duty_cycle) {
1a001f04:	b580      	push	{r7, lr}
1a001f06:	b084      	sub	sp, #16
1a001f08:	af00      	add	r7, sp, #0
1a001f0a:	6078      	str	r0, [r7, #4]
1a001f0c:	6039      	str	r1, [r7, #0]
	if (duty_cycle > 100) {
1a001f0e:	683b      	ldr	r3, [r7, #0]
1a001f10:	2b64      	cmp	r3, #100	; 0x64
1a001f12:	dd02      	ble.n	1a001f1a <updateMotorDutyCycleDecay+0x16>
		duty_cycle = 100;
1a001f14:	2364      	movs	r3, #100	; 0x64
1a001f16:	603b      	str	r3, [r7, #0]
1a001f18:	e006      	b.n	1a001f28 <updateMotorDutyCycleDecay+0x24>
	} else if (duty_cycle < -100) {
1a001f1a:	683b      	ldr	r3, [r7, #0]
1a001f1c:	f113 0f64 	cmn.w	r3, #100	; 0x64
1a001f20:	da02      	bge.n	1a001f28 <updateMotorDutyCycleDecay+0x24>
		duty_cycle = -100;
1a001f22:	f06f 0363 	mvn.w	r3, #99	; 0x63
1a001f26:	603b      	str	r3, [r7, #0]
	}
//This cast from uint32_t to int32_t is safe
	if (motor == MOTOR0) {
1a001f28:	687b      	ldr	r3, [r7, #4]
1a001f2a:	2b00      	cmp	r3, #0
1a001f2c:	d112      	bne.n	1a001f54 <updateMotorDutyCycleDecay+0x50>
		int32_t lim = (int32_t) LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL];
1a001f2e:	4b17      	ldr	r3, [pc, #92]	; (1a001f8c <updateMotorDutyCycleDecay+0x88>)
1a001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001f32:	60fb      	str	r3, [r7, #12]
		return updateMotorWidthDecay(MOTOR0, ((duty_cycle * lim) / 100));
1a001f34:	683b      	ldr	r3, [r7, #0]
1a001f36:	68fa      	ldr	r2, [r7, #12]
1a001f38:	fb02 f303 	mul.w	r3, r2, r3
1a001f3c:	4a14      	ldr	r2, [pc, #80]	; (1a001f90 <updateMotorDutyCycleDecay+0x8c>)
1a001f3e:	fb82 1203 	smull	r1, r2, r2, r3
1a001f42:	1152      	asrs	r2, r2, #5
1a001f44:	17db      	asrs	r3, r3, #31
1a001f46:	1ad3      	subs	r3, r2, r3
1a001f48:	4619      	mov	r1, r3
1a001f4a:	2000      	movs	r0, #0
1a001f4c:	f000 f85e 	bl	1a00200c <updateMotorWidthDecay>
1a001f50:	4603      	mov	r3, r0
1a001f52:	e016      	b.n	1a001f82 <updateMotorDutyCycleDecay+0x7e>
	} else if (motor == MOTOR1) {
1a001f54:	687b      	ldr	r3, [r7, #4]
1a001f56:	2b01      	cmp	r3, #1
1a001f58:	d112      	bne.n	1a001f80 <updateMotorDutyCycleDecay+0x7c>
		int32_t lim = (int32_t) LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL];
1a001f5a:	4b0c      	ldr	r3, [pc, #48]	; (1a001f8c <updateMotorDutyCycleDecay+0x88>)
1a001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1a001f5e:	60bb      	str	r3, [r7, #8]
		return updateMotorWidthDecay(MOTOR1, ((duty_cycle * lim) / 100));
1a001f60:	683b      	ldr	r3, [r7, #0]
1a001f62:	68ba      	ldr	r2, [r7, #8]
1a001f64:	fb02 f303 	mul.w	r3, r2, r3
1a001f68:	4a09      	ldr	r2, [pc, #36]	; (1a001f90 <updateMotorDutyCycleDecay+0x8c>)
1a001f6a:	fb82 1203 	smull	r1, r2, r2, r3
1a001f6e:	1152      	asrs	r2, r2, #5
1a001f70:	17db      	asrs	r3, r3, #31
1a001f72:	1ad3      	subs	r3, r2, r3
1a001f74:	4619      	mov	r1, r3
1a001f76:	2001      	movs	r0, #1
1a001f78:	f000 f848 	bl	1a00200c <updateMotorWidthDecay>
1a001f7c:	4603      	mov	r3, r0
1a001f7e:	e000      	b.n	1a001f82 <updateMotorDutyCycleDecay+0x7e>
	}
	return 1;
1a001f80:	2301      	movs	r3, #1
}
1a001f82:	4618      	mov	r0, r3
1a001f84:	3710      	adds	r7, #16
1a001f86:	46bd      	mov	sp, r7
1a001f88:	bd80      	pop	{r7, pc}
1a001f8a:	bf00      	nop
1a001f8c:	400a0000 	.word	0x400a0000
1a001f90:	51eb851f 	.word	0x51eb851f

1a001f94 <updateMotorWidthUsDecay>:

uint32_t updateMotorWidthUsDecay(uint32_t motor, int32_t widthUs) {
1a001f94:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001f96:	b085      	sub	sp, #20
1a001f98:	af00      	add	r7, sp, #0
1a001f9a:	6078      	str	r0, [r7, #4]
1a001f9c:	6039      	str	r1, [r7, #0]
	uint64_t calculatedWidth = (((uint64_t) widthUs * Chip_Clock_GetRate(CLK_APB1_MOTOCON)) / 1000000ULL);
1a001f9e:	683b      	ldr	r3, [r7, #0]
1a001fa0:	461d      	mov	r5, r3
1a001fa2:	ea4f 76e5 	mov.w	r6, r5, asr #31
1a001fa6:	2021      	movs	r0, #33	; 0x21
1a001fa8:	f010 fb1e 	bl	1a0125e8 <Chip_Clock_GetRate>
1a001fac:	4603      	mov	r3, r0
1a001fae:	f04f 0400 	mov.w	r4, #0
1a001fb2:	fb03 f106 	mul.w	r1, r3, r6
1a001fb6:	fb05 f204 	mul.w	r2, r5, r4
1a001fba:	440a      	add	r2, r1
1a001fbc:	fba5 0103 	umull	r0, r1, r5, r3
1a001fc0:	1853      	adds	r3, r2, r1
1a001fc2:	4619      	mov	r1, r3
1a001fc4:	4a10      	ldr	r2, [pc, #64]	; (1a002008 <updateMotorWidthUsDecay+0x74>)
1a001fc6:	f04f 0300 	mov.w	r3, #0
1a001fca:	f012 fbf5 	bl	1a0147b8 <__aeabi_uldivmod>
1a001fce:	4603      	mov	r3, r0
1a001fd0:	460c      	mov	r4, r1
1a001fd2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if (calculatedWidth & 0xFFFFFFFF00000000ULL) { //Check for overflow
1a001fd6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
1a001fda:	f04f 0100 	mov.w	r1, #0
1a001fde:	f04f 32ff 	mov.w	r2, #4294967295
1a001fe2:	ea03 0301 	and.w	r3, r3, r1
1a001fe6:	ea04 0402 	and.w	r4, r4, r2
1a001fea:	4323      	orrs	r3, r4
1a001fec:	d001      	beq.n	1a001ff2 <updateMotorWidthUsDecay+0x5e>
		return 1;
1a001fee:	2301      	movs	r3, #1
1a001ff0:	e005      	b.n	1a001ffe <updateMotorWidthUsDecay+0x6a>
	}
	return updateMotorWidthDecay(motor, calculatedWidth);
1a001ff2:	68bb      	ldr	r3, [r7, #8]
1a001ff4:	4619      	mov	r1, r3
1a001ff6:	6878      	ldr	r0, [r7, #4]
1a001ff8:	f000 f808 	bl	1a00200c <updateMotorWidthDecay>
1a001ffc:	4603      	mov	r3, r0
}
1a001ffe:	4618      	mov	r0, r3
1a002000:	3714      	adds	r7, #20
1a002002:	46bd      	mov	sp, r7
1a002004:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002006:	bf00      	nop
1a002008:	000f4240 	.word	0x000f4240

1a00200c <updateMotorWidthDecay>:

uint32_t updateMotorWidthDecay(uint32_t motor, int32_t width) {
1a00200c:	b580      	push	{r7, lr}
1a00200e:	b084      	sub	sp, #16
1a002010:	af00      	add	r7, sp, #0
1a002012:	6078      	str	r0, [r7, #4]
1a002014:	6039      	str	r1, [r7, #0]
	int32_t lim = 0;
1a002016:	2300      	movs	r3, #0
1a002018:	60fb      	str	r3, [r7, #12]
	if (motor == MOTOR0) {
1a00201a:	687b      	ldr	r3, [r7, #4]
1a00201c:	2b00      	cmp	r3, #0
1a00201e:	d103      	bne.n	1a002028 <updateMotorWidthDecay+0x1c>
		lim = (int32_t) LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL];
1a002020:	4b1e      	ldr	r3, [pc, #120]	; (1a00209c <updateMotorWidthDecay+0x90>)
1a002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002024:	60fb      	str	r3, [r7, #12]
1a002026:	e002      	b.n	1a00202e <updateMotorWidthDecay+0x22>
	} else {
		lim = (int32_t) LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL];
1a002028:	4b1c      	ldr	r3, [pc, #112]	; (1a00209c <updateMotorWidthDecay+0x90>)
1a00202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1a00202c:	60fb      	str	r3, [r7, #12]
	}

	if (width > lim) {
1a00202e:	683a      	ldr	r2, [r7, #0]
1a002030:	68fb      	ldr	r3, [r7, #12]
1a002032:	429a      	cmp	r2, r3
1a002034:	dd02      	ble.n	1a00203c <updateMotorWidthDecay+0x30>
		width = lim;
1a002036:	68fb      	ldr	r3, [r7, #12]
1a002038:	603b      	str	r3, [r7, #0]
1a00203a:	e007      	b.n	1a00204c <updateMotorWidthDecay+0x40>
	} else if (width < -lim) {
1a00203c:	68fb      	ldr	r3, [r7, #12]
1a00203e:	425a      	negs	r2, r3
1a002040:	683b      	ldr	r3, [r7, #0]
1a002042:	429a      	cmp	r2, r3
1a002044:	dd02      	ble.n	1a00204c <updateMotorWidthDecay+0x40>
		width = -lim;
1a002046:	68fb      	ldr	r3, [r7, #12]
1a002048:	425b      	negs	r3, r3
1a00204a:	603b      	str	r3, [r7, #0]
	}
	if (motor == MOTOR0) {
1a00204c:	687b      	ldr	r3, [r7, #4]
1a00204e:	2b00      	cmp	r3, #0
1a002050:	d106      	bne.n	1a002060 <updateMotorWidthDecay+0x54>
		motor0.decayCounter = 10;
1a002052:	4b13      	ldr	r3, [pc, #76]	; (1a0020a0 <updateMotorWidthDecay+0x94>)
1a002054:	220a      	movs	r2, #10
1a002056:	609a      	str	r2, [r3, #8]
		motor0.requestedWidth = width;
1a002058:	4a11      	ldr	r2, [pc, #68]	; (1a0020a0 <updateMotorWidthDecay+0x94>)
1a00205a:	683b      	ldr	r3, [r7, #0]
1a00205c:	6053      	str	r3, [r2, #4]
1a00205e:	e00b      	b.n	1a002078 <updateMotorWidthDecay+0x6c>
	} else if (motor == MOTOR1) {
1a002060:	687b      	ldr	r3, [r7, #4]
1a002062:	2b01      	cmp	r3, #1
1a002064:	d106      	bne.n	1a002074 <updateMotorWidthDecay+0x68>
		motor1.decayCounter = 10;
1a002066:	4b0f      	ldr	r3, [pc, #60]	; (1a0020a4 <updateMotorWidthDecay+0x98>)
1a002068:	220a      	movs	r2, #10
1a00206a:	609a      	str	r2, [r3, #8]
		motor1.requestedWidth = width;
1a00206c:	4a0d      	ldr	r2, [pc, #52]	; (1a0020a4 <updateMotorWidthDecay+0x98>)
1a00206e:	683b      	ldr	r3, [r7, #0]
1a002070:	6053      	str	r3, [r2, #4]
1a002072:	e001      	b.n	1a002078 <updateMotorWidthDecay+0x6c>
	} else {
		return 1;
1a002074:	2301      	movs	r3, #1
1a002076:	e00d      	b.n	1a002094 <updateMotorWidthDecay+0x88>
	}
	if (updateMotorWidth(motor, width)) {
1a002078:	6839      	ldr	r1, [r7, #0]
1a00207a:	6878      	ldr	r0, [r7, #4]
1a00207c:	f000 f898 	bl	1a0021b0 <updateMotorWidth>
1a002080:	4603      	mov	r3, r0
1a002082:	2b00      	cmp	r3, #0
1a002084:	d001      	beq.n	1a00208a <updateMotorWidthDecay+0x7e>
		return 1;
1a002086:	2301      	movs	r3, #1
1a002088:	e004      	b.n	1a002094 <updateMotorWidthDecay+0x88>
	}
	return updateMotorMode(motor, DECAY_MODE | DIRECT_MODE);
1a00208a:	2105      	movs	r1, #5
1a00208c:	6878      	ldr	r0, [r7, #4]
1a00208e:	f7ff fcbd 	bl	1a001a0c <updateMotorMode>
1a002092:	4603      	mov	r3, r0
}
1a002094:	4618      	mov	r0, r3
1a002096:	3710      	adds	r7, #16
1a002098:	46bd      	mov	sp, r7
1a00209a:	bd80      	pop	{r7, pc}
1a00209c:	400a0000 	.word	0x400a0000
1a0020a0:	1008749c 	.word	0x1008749c
1a0020a4:	10087460 	.word	0x10087460

1a0020a8 <updateMotorDutyCycle>:

uint32_t updateMotorDutyCycle(uint32_t motor, int32_t duty_cycle) {
1a0020a8:	b580      	push	{r7, lr}
1a0020aa:	b084      	sub	sp, #16
1a0020ac:	af00      	add	r7, sp, #0
1a0020ae:	6078      	str	r0, [r7, #4]
1a0020b0:	6039      	str	r1, [r7, #0]
	if (duty_cycle > 100) {
1a0020b2:	683b      	ldr	r3, [r7, #0]
1a0020b4:	2b64      	cmp	r3, #100	; 0x64
1a0020b6:	dd02      	ble.n	1a0020be <updateMotorDutyCycle+0x16>
		duty_cycle = 100;
1a0020b8:	2364      	movs	r3, #100	; 0x64
1a0020ba:	603b      	str	r3, [r7, #0]
1a0020bc:	e006      	b.n	1a0020cc <updateMotorDutyCycle+0x24>
	} else if (duty_cycle < -100) {
1a0020be:	683b      	ldr	r3, [r7, #0]
1a0020c0:	f113 0f64 	cmn.w	r3, #100	; 0x64
1a0020c4:	da02      	bge.n	1a0020cc <updateMotorDutyCycle+0x24>
		duty_cycle = -100;
1a0020c6:	f06f 0363 	mvn.w	r3, #99	; 0x63
1a0020ca:	603b      	str	r3, [r7, #0]
	}
//This cast from uint32_t to int32_t is safe
	if (motor == MOTOR0) {
1a0020cc:	687b      	ldr	r3, [r7, #4]
1a0020ce:	2b00      	cmp	r3, #0
1a0020d0:	d112      	bne.n	1a0020f8 <updateMotorDutyCycle+0x50>
		int32_t lim = (int32_t) LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL];
1a0020d2:	4b17      	ldr	r3, [pc, #92]	; (1a002130 <updateMotorDutyCycle+0x88>)
1a0020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0020d6:	60fb      	str	r3, [r7, #12]
		return updateMotorWidth(motor, ((duty_cycle * lim) / 100));
1a0020d8:	683b      	ldr	r3, [r7, #0]
1a0020da:	68fa      	ldr	r2, [r7, #12]
1a0020dc:	fb02 f303 	mul.w	r3, r2, r3
1a0020e0:	4a14      	ldr	r2, [pc, #80]	; (1a002134 <updateMotorDutyCycle+0x8c>)
1a0020e2:	fb82 1203 	smull	r1, r2, r2, r3
1a0020e6:	1152      	asrs	r2, r2, #5
1a0020e8:	17db      	asrs	r3, r3, #31
1a0020ea:	1ad3      	subs	r3, r2, r3
1a0020ec:	4619      	mov	r1, r3
1a0020ee:	6878      	ldr	r0, [r7, #4]
1a0020f0:	f000 f85e 	bl	1a0021b0 <updateMotorWidth>
1a0020f4:	4603      	mov	r3, r0
1a0020f6:	e016      	b.n	1a002126 <updateMotorDutyCycle+0x7e>
	} else if (motor == MOTOR1) {
1a0020f8:	687b      	ldr	r3, [r7, #4]
1a0020fa:	2b01      	cmp	r3, #1
1a0020fc:	d112      	bne.n	1a002124 <updateMotorDutyCycle+0x7c>
		int32_t lim = (int32_t) LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL];
1a0020fe:	4b0c      	ldr	r3, [pc, #48]	; (1a002130 <updateMotorDutyCycle+0x88>)
1a002100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1a002102:	60bb      	str	r3, [r7, #8]
		return updateMotorWidth(motor, ((duty_cycle * lim) / 100));
1a002104:	683b      	ldr	r3, [r7, #0]
1a002106:	68ba      	ldr	r2, [r7, #8]
1a002108:	fb02 f303 	mul.w	r3, r2, r3
1a00210c:	4a09      	ldr	r2, [pc, #36]	; (1a002134 <updateMotorDutyCycle+0x8c>)
1a00210e:	fb82 1203 	smull	r1, r2, r2, r3
1a002112:	1152      	asrs	r2, r2, #5
1a002114:	17db      	asrs	r3, r3, #31
1a002116:	1ad3      	subs	r3, r2, r3
1a002118:	4619      	mov	r1, r3
1a00211a:	6878      	ldr	r0, [r7, #4]
1a00211c:	f000 f848 	bl	1a0021b0 <updateMotorWidth>
1a002120:	4603      	mov	r3, r0
1a002122:	e000      	b.n	1a002126 <updateMotorDutyCycle+0x7e>
	}
	return 1;
1a002124:	2301      	movs	r3, #1
}
1a002126:	4618      	mov	r0, r3
1a002128:	3710      	adds	r7, #16
1a00212a:	46bd      	mov	sp, r7
1a00212c:	bd80      	pop	{r7, pc}
1a00212e:	bf00      	nop
1a002130:	400a0000 	.word	0x400a0000
1a002134:	51eb851f 	.word	0x51eb851f

1a002138 <updateMotorWidthUs>:
uint32_t updateMotorWidthUs(uint32_t motor, int32_t widthUs) {
1a002138:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00213a:	b085      	sub	sp, #20
1a00213c:	af00      	add	r7, sp, #0
1a00213e:	6078      	str	r0, [r7, #4]
1a002140:	6039      	str	r1, [r7, #0]
	uint64_t calculatedWidth = (((uint64_t) widthUs * Chip_Clock_GetRate(CLK_APB1_MOTOCON)) / 1000000ULL);
1a002142:	683b      	ldr	r3, [r7, #0]
1a002144:	461d      	mov	r5, r3
1a002146:	ea4f 76e5 	mov.w	r6, r5, asr #31
1a00214a:	2021      	movs	r0, #33	; 0x21
1a00214c:	f010 fa4c 	bl	1a0125e8 <Chip_Clock_GetRate>
1a002150:	4603      	mov	r3, r0
1a002152:	f04f 0400 	mov.w	r4, #0
1a002156:	fb03 f106 	mul.w	r1, r3, r6
1a00215a:	fb05 f204 	mul.w	r2, r5, r4
1a00215e:	440a      	add	r2, r1
1a002160:	fba5 0103 	umull	r0, r1, r5, r3
1a002164:	1853      	adds	r3, r2, r1
1a002166:	4619      	mov	r1, r3
1a002168:	4a10      	ldr	r2, [pc, #64]	; (1a0021ac <updateMotorWidthUs+0x74>)
1a00216a:	f04f 0300 	mov.w	r3, #0
1a00216e:	f012 fb23 	bl	1a0147b8 <__aeabi_uldivmod>
1a002172:	4603      	mov	r3, r0
1a002174:	460c      	mov	r4, r1
1a002176:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if (calculatedWidth & 0xFFFFFFFF00000000ULL) { //Check for overflow
1a00217a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
1a00217e:	f04f 0100 	mov.w	r1, #0
1a002182:	f04f 32ff 	mov.w	r2, #4294967295
1a002186:	ea03 0301 	and.w	r3, r3, r1
1a00218a:	ea04 0402 	and.w	r4, r4, r2
1a00218e:	4323      	orrs	r3, r4
1a002190:	d001      	beq.n	1a002196 <updateMotorWidthUs+0x5e>
		return 1;
1a002192:	2301      	movs	r3, #1
1a002194:	e005      	b.n	1a0021a2 <updateMotorWidthUs+0x6a>
	}
	return updateMotorWidth(motor, calculatedWidth);
1a002196:	68bb      	ldr	r3, [r7, #8]
1a002198:	4619      	mov	r1, r3
1a00219a:	6878      	ldr	r0, [r7, #4]
1a00219c:	f000 f808 	bl	1a0021b0 <updateMotorWidth>
1a0021a0:	4603      	mov	r3, r0
}
1a0021a2:	4618      	mov	r0, r3
1a0021a4:	3714      	adds	r7, #20
1a0021a6:	46bd      	mov	sp, r7
1a0021a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0021aa:	bf00      	nop
1a0021ac:	000f4240 	.word	0x000f4240

1a0021b0 <updateMotorWidth>:

uint32_t updateMotorWidth(uint32_t motor, int32_t width) {
1a0021b0:	b580      	push	{r7, lr}
1a0021b2:	b084      	sub	sp, #16
1a0021b4:	af00      	add	r7, sp, #0
1a0021b6:	6078      	str	r0, [r7, #4]
1a0021b8:	6039      	str	r1, [r7, #0]
	if (motor == MOTOR0) {
1a0021ba:	687b      	ldr	r3, [r7, #4]
1a0021bc:	2b00      	cmp	r3, #0
1a0021be:	d15b      	bne.n	1a002278 <updateMotorWidth+0xc8>
		int32_t lim = (int32_t) LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL];
1a0021c0:	4b60      	ldr	r3, [pc, #384]	; (1a002344 <updateMotorWidth+0x194>)
1a0021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0021c4:	60bb      	str	r3, [r7, #8]
		if (width > lim) {
1a0021c6:	683a      	ldr	r2, [r7, #0]
1a0021c8:	68bb      	ldr	r3, [r7, #8]
1a0021ca:	429a      	cmp	r2, r3
1a0021cc:	dd02      	ble.n	1a0021d4 <updateMotorWidth+0x24>
			width = lim;
1a0021ce:	68bb      	ldr	r3, [r7, #8]
1a0021d0:	603b      	str	r3, [r7, #0]
1a0021d2:	e007      	b.n	1a0021e4 <updateMotorWidth+0x34>
		} else if (width < -lim) {
1a0021d4:	68bb      	ldr	r3, [r7, #8]
1a0021d6:	425a      	negs	r2, r3
1a0021d8:	683b      	ldr	r3, [r7, #0]
1a0021da:	429a      	cmp	r2, r3
1a0021dc:	dd02      	ble.n	1a0021e4 <updateMotorWidth+0x34>
			width = -lim;
1a0021de:	68bb      	ldr	r3, [r7, #8]
1a0021e0:	425b      	negs	r3, r3
1a0021e2:	603b      	str	r3, [r7, #0]
		}
		motor0.currentDutycycle = width;
1a0021e4:	4a58      	ldr	r2, [pc, #352]	; (1a002348 <updateMotorWidth+0x198>)
1a0021e6:	683b      	ldr	r3, [r7, #0]
1a0021e8:	6013      	str	r3, [r2, #0]
		if (width == 0) {
1a0021ea:	683b      	ldr	r3, [r7, #0]
1a0021ec:	2b00      	cmp	r3, #0
1a0021ee:	d114      	bne.n	1a00221a <updateMotorWidth+0x6a>
			//Brake
			Chip_SCU_PinMuxSet(MOTOR0_PWM_1_PORT, MOTOR0_PWM_1_PIN, MD_PLN_FAST | FUNC0);
1a0021f0:	22f0      	movs	r2, #240	; 0xf0
1a0021f2:	2107      	movs	r1, #7
1a0021f4:	2005      	movs	r0, #5
1a0021f6:	f7ff fb0b 	bl	1a001810 <Chip_SCU_PinMuxSet>
			Chip_SCU_PinMuxSet(MOTOR0_PWM_2_PORT, MOTOR0_PWM_2_PIN, MD_PLN_FAST | FUNC0);
1a0021fa:	22f0      	movs	r2, #240	; 0xf0
1a0021fc:	2100      	movs	r1, #0
1a0021fe:	2005      	movs	r0, #5
1a002200:	f7ff fb06 	bl	1a001810 <Chip_SCU_PinMuxSet>
			Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR0_PWM_1_PORT_GPIO, MOTOR0_PWM_1_PIN_GPIO);
1a002204:	2207      	movs	r2, #7
1a002206:	2102      	movs	r1, #2
1a002208:	4850      	ldr	r0, [pc, #320]	; (1a00234c <updateMotorWidth+0x19c>)
1a00220a:	f7ff fb5b 	bl	1a0018c4 <Chip_GPIO_SetPinOutHigh>
			Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR0_PWM_2_PORT_GPIO, MOTOR0_PWM_2_PIN_GPIO);
1a00220e:	2209      	movs	r2, #9
1a002210:	2102      	movs	r1, #2
1a002212:	484e      	ldr	r0, [pc, #312]	; (1a00234c <updateMotorWidth+0x19c>)
1a002214:	f7ff fb56 	bl	1a0018c4 <Chip_GPIO_SetPinOutHigh>
1a002218:	e08f      	b.n	1a00233a <updateMotorWidth+0x18a>
		}
		//Moving forward
		else if (width > 0) {
1a00221a:	683b      	ldr	r3, [r7, #0]
1a00221c:	2b00      	cmp	r3, #0
1a00221e:	dd15      	ble.n	1a00224c <updateMotorWidth+0x9c>
			Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR0_PWM_1_PORT_GPIO, MOTOR0_PWM_1_PIN_GPIO);
1a002220:	2207      	movs	r2, #7
1a002222:	2102      	movs	r1, #2
1a002224:	4849      	ldr	r0, [pc, #292]	; (1a00234c <updateMotorWidth+0x19c>)
1a002226:	f7ff fb4d 	bl	1a0018c4 <Chip_GPIO_SetPinOutHigh>
			LPC_MCPWM->MAT[MOTOR0_PWM_CHANNEL] = LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL] - width;
1a00222a:	4946      	ldr	r1, [pc, #280]	; (1a002344 <updateMotorWidth+0x194>)
1a00222c:	4b45      	ldr	r3, [pc, #276]	; (1a002344 <updateMotorWidth+0x194>)
1a00222e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002230:	683b      	ldr	r3, [r7, #0]
1a002232:	1ad3      	subs	r3, r2, r3
1a002234:	638b      	str	r3, [r1, #56]	; 0x38
			Chip_SCU_PinMuxSet(MOTOR0_PWM_1_PORT, MOTOR0_PWM_1_PIN, MD_PLN_FAST | FUNC0);
1a002236:	22f0      	movs	r2, #240	; 0xf0
1a002238:	2107      	movs	r1, #7
1a00223a:	2005      	movs	r0, #5
1a00223c:	f7ff fae8 	bl	1a001810 <Chip_SCU_PinMuxSet>
			Chip_SCU_PinMuxSet(MOTOR0_PWM_2_PORT, MOTOR0_PWM_2_PIN, MD_PLN_FAST | FUNC1);
1a002240:	22f1      	movs	r2, #241	; 0xf1
1a002242:	2100      	movs	r1, #0
1a002244:	2005      	movs	r0, #5
1a002246:	f7ff fae3 	bl	1a001810 <Chip_SCU_PinMuxSet>
1a00224a:	e076      	b.n	1a00233a <updateMotorWidth+0x18a>
		} //Moving backwards
		else {
			width = -width;
1a00224c:	683b      	ldr	r3, [r7, #0]
1a00224e:	425b      	negs	r3, r3
1a002250:	603b      	str	r3, [r7, #0]
			//Speed is negative
			Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR0_PWM_2_PORT_GPIO, MOTOR0_PWM_2_PIN_GPIO);
1a002252:	2209      	movs	r2, #9
1a002254:	2102      	movs	r1, #2
1a002256:	483d      	ldr	r0, [pc, #244]	; (1a00234c <updateMotorWidth+0x19c>)
1a002258:	f7ff fb34 	bl	1a0018c4 <Chip_GPIO_SetPinOutHigh>
			LPC_MCPWM->MAT[MOTOR0_PWM_CHANNEL] = width;
1a00225c:	4a39      	ldr	r2, [pc, #228]	; (1a002344 <updateMotorWidth+0x194>)
1a00225e:	683b      	ldr	r3, [r7, #0]
1a002260:	6393      	str	r3, [r2, #56]	; 0x38
			Chip_SCU_PinMuxSet(MOTOR0_PWM_1_PORT, MOTOR0_PWM_1_PIN, MD_PLN_FAST | FUNC1);
1a002262:	22f1      	movs	r2, #241	; 0xf1
1a002264:	2107      	movs	r1, #7
1a002266:	2005      	movs	r0, #5
1a002268:	f7ff fad2 	bl	1a001810 <Chip_SCU_PinMuxSet>
			Chip_SCU_PinMuxSet(MOTOR0_PWM_2_PORT, MOTOR0_PWM_2_PIN, MD_PLN_FAST | FUNC0);
1a00226c:	22f0      	movs	r2, #240	; 0xf0
1a00226e:	2100      	movs	r1, #0
1a002270:	2005      	movs	r0, #5
1a002272:	f7ff facd 	bl	1a001810 <Chip_SCU_PinMuxSet>
1a002276:	e060      	b.n	1a00233a <updateMotorWidth+0x18a>

		}
	} else if (motor == MOTOR1) {
1a002278:	687b      	ldr	r3, [r7, #4]
1a00227a:	2b01      	cmp	r3, #1
1a00227c:	d15b      	bne.n	1a002336 <updateMotorWidth+0x186>
		int32_t lim = (int32_t) LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL];
1a00227e:	4b31      	ldr	r3, [pc, #196]	; (1a002344 <updateMotorWidth+0x194>)
1a002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1a002282:	60fb      	str	r3, [r7, #12]
		if (width > lim) {
1a002284:	683a      	ldr	r2, [r7, #0]
1a002286:	68fb      	ldr	r3, [r7, #12]
1a002288:	429a      	cmp	r2, r3
1a00228a:	dd02      	ble.n	1a002292 <updateMotorWidth+0xe2>
			width = lim;
1a00228c:	68fb      	ldr	r3, [r7, #12]
1a00228e:	603b      	str	r3, [r7, #0]
1a002290:	e007      	b.n	1a0022a2 <updateMotorWidth+0xf2>
		} else if (width < -lim) {
1a002292:	68fb      	ldr	r3, [r7, #12]
1a002294:	425a      	negs	r2, r3
1a002296:	683b      	ldr	r3, [r7, #0]
1a002298:	429a      	cmp	r2, r3
1a00229a:	dd02      	ble.n	1a0022a2 <updateMotorWidth+0xf2>
			width = -lim;
1a00229c:	68fb      	ldr	r3, [r7, #12]
1a00229e:	425b      	negs	r3, r3
1a0022a0:	603b      	str	r3, [r7, #0]
		}
		motor1.currentDutycycle = width;
1a0022a2:	4a2b      	ldr	r2, [pc, #172]	; (1a002350 <updateMotorWidth+0x1a0>)
1a0022a4:	683b      	ldr	r3, [r7, #0]
1a0022a6:	6013      	str	r3, [r2, #0]
		if (width == 0) {
1a0022a8:	683b      	ldr	r3, [r7, #0]
1a0022aa:	2b00      	cmp	r3, #0
1a0022ac:	d114      	bne.n	1a0022d8 <updateMotorWidth+0x128>
			//Brake
			Chip_SCU_PinMuxSet(MOTOR1_PWM_1_PORT, MOTOR1_PWM_1_PIN, MD_PLN_FAST | FUNC0);
1a0022ae:	22f0      	movs	r2, #240	; 0xf0
1a0022b0:	2105      	movs	r1, #5
1a0022b2:	2005      	movs	r0, #5
1a0022b4:	f7ff faac 	bl	1a001810 <Chip_SCU_PinMuxSet>
			Chip_SCU_PinMuxSet(MOTOR1_PWM_2_PORT, MOTOR1_PWM_2_PIN, MD_PLN_FAST | FUNC0);
1a0022b8:	22f0      	movs	r2, #240	; 0xf0
1a0022ba:	2106      	movs	r1, #6
1a0022bc:	2005      	movs	r0, #5
1a0022be:	f7ff faa7 	bl	1a001810 <Chip_SCU_PinMuxSet>
			Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR1_PWM_1_PORT_GPIO, MOTOR1_PWM_1_PIN_GPIO);
1a0022c2:	220e      	movs	r2, #14
1a0022c4:	2102      	movs	r1, #2
1a0022c6:	4821      	ldr	r0, [pc, #132]	; (1a00234c <updateMotorWidth+0x19c>)
1a0022c8:	f7ff fafc 	bl	1a0018c4 <Chip_GPIO_SetPinOutHigh>
			Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR1_PWM_2_PORT_GPIO, MOTOR1_PWM_2_PIN_GPIO);
1a0022cc:	220f      	movs	r2, #15
1a0022ce:	2102      	movs	r1, #2
1a0022d0:	481e      	ldr	r0, [pc, #120]	; (1a00234c <updateMotorWidth+0x19c>)
1a0022d2:	f7ff faf7 	bl	1a0018c4 <Chip_GPIO_SetPinOutHigh>
1a0022d6:	e030      	b.n	1a00233a <updateMotorWidth+0x18a>
		}
		//Moving forward
		else if (width > 0) {
1a0022d8:	683b      	ldr	r3, [r7, #0]
1a0022da:	2b00      	cmp	r3, #0
1a0022dc:	dd15      	ble.n	1a00230a <updateMotorWidth+0x15a>
			Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR1_PWM_1_PORT_GPIO, MOTOR1_PWM_1_PIN_GPIO);
1a0022de:	220e      	movs	r2, #14
1a0022e0:	2102      	movs	r1, #2
1a0022e2:	481a      	ldr	r0, [pc, #104]	; (1a00234c <updateMotorWidth+0x19c>)
1a0022e4:	f7ff faee 	bl	1a0018c4 <Chip_GPIO_SetPinOutHigh>
			LPC_MCPWM->MAT[MOTOR1_PWM_CHANNEL] = LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL] - width;
1a0022e8:	4916      	ldr	r1, [pc, #88]	; (1a002344 <updateMotorWidth+0x194>)
1a0022ea:	4b16      	ldr	r3, [pc, #88]	; (1a002344 <updateMotorWidth+0x194>)
1a0022ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
1a0022ee:	683b      	ldr	r3, [r7, #0]
1a0022f0:	1ad3      	subs	r3, r2, r3
1a0022f2:	634b      	str	r3, [r1, #52]	; 0x34
			Chip_SCU_PinMuxSet(MOTOR1_PWM_1_PORT, MOTOR1_PWM_1_PIN, MD_PLN_FAST | FUNC0);
1a0022f4:	22f0      	movs	r2, #240	; 0xf0
1a0022f6:	2105      	movs	r1, #5
1a0022f8:	2005      	movs	r0, #5
1a0022fa:	f7ff fa89 	bl	1a001810 <Chip_SCU_PinMuxSet>
			Chip_SCU_PinMuxSet(MOTOR1_PWM_2_PORT, MOTOR1_PWM_2_PIN, MD_PLN_FAST | FUNC1);
1a0022fe:	22f1      	movs	r2, #241	; 0xf1
1a002300:	2106      	movs	r1, #6
1a002302:	2005      	movs	r0, #5
1a002304:	f7ff fa84 	bl	1a001810 <Chip_SCU_PinMuxSet>
1a002308:	e017      	b.n	1a00233a <updateMotorWidth+0x18a>
		} //Moving backwards
		else {
			width = -width;
1a00230a:	683b      	ldr	r3, [r7, #0]
1a00230c:	425b      	negs	r3, r3
1a00230e:	603b      	str	r3, [r7, #0]
			//Speed is negative
			Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR1_PWM_2_PORT_GPIO, MOTOR1_PWM_2_PIN_GPIO);
1a002310:	220f      	movs	r2, #15
1a002312:	2102      	movs	r1, #2
1a002314:	480d      	ldr	r0, [pc, #52]	; (1a00234c <updateMotorWidth+0x19c>)
1a002316:	f7ff fad5 	bl	1a0018c4 <Chip_GPIO_SetPinOutHigh>
			LPC_MCPWM->MAT[MOTOR1_PWM_CHANNEL] = width;
1a00231a:	4a0a      	ldr	r2, [pc, #40]	; (1a002344 <updateMotorWidth+0x194>)
1a00231c:	683b      	ldr	r3, [r7, #0]
1a00231e:	6353      	str	r3, [r2, #52]	; 0x34
			Chip_SCU_PinMuxSet(MOTOR1_PWM_1_PORT, MOTOR1_PWM_1_PIN, MD_PLN_FAST | FUNC1);
1a002320:	22f1      	movs	r2, #241	; 0xf1
1a002322:	2105      	movs	r1, #5
1a002324:	2005      	movs	r0, #5
1a002326:	f7ff fa73 	bl	1a001810 <Chip_SCU_PinMuxSet>
			Chip_SCU_PinMuxSet(MOTOR1_PWM_2_PORT, MOTOR1_PWM_2_PIN, MD_PLN_FAST | FUNC0);
1a00232a:	22f0      	movs	r2, #240	; 0xf0
1a00232c:	2106      	movs	r1, #6
1a00232e:	2005      	movs	r0, #5
1a002330:	f7ff fa6e 	bl	1a001810 <Chip_SCU_PinMuxSet>
1a002334:	e001      	b.n	1a00233a <updateMotorWidth+0x18a>
		}
	} else {
		return 1;
1a002336:	2301      	movs	r3, #1
1a002338:	e000      	b.n	1a00233c <updateMotorWidth+0x18c>
	}
	return 0;
1a00233a:	2300      	movs	r3, #0

}
1a00233c:	4618      	mov	r0, r3
1a00233e:	3710      	adds	r7, #16
1a002340:	46bd      	mov	sp, r7
1a002342:	bd80      	pop	{r7, pc}
1a002344:	400a0000 	.word	0x400a0000
1a002348:	1008749c 	.word	0x1008749c
1a00234c:	400f4000 	.word	0x400f4000
1a002350:	10087460 	.word	0x10087460

1a002354 <enableMotorDriver>:

void enableMotorDriver(uint8_t enable) {
1a002354:	b580      	push	{r7, lr}
1a002356:	b082      	sub	sp, #8
1a002358:	af00      	add	r7, sp, #0
1a00235a:	4603      	mov	r3, r0
1a00235c:	71fb      	strb	r3, [r7, #7]
	motorDriverEnabled = enable;
1a00235e:	79fb      	ldrb	r3, [r7, #7]
1a002360:	4a0c      	ldr	r2, [pc, #48]	; (1a002394 <enableMotorDriver+0x40>)
1a002362:	6013      	str	r3, [r2, #0]
	if (enable) {
1a002364:	79fb      	ldrb	r3, [r7, #7]
1a002366:	2b00      	cmp	r3, #0
1a002368:	d008      	beq.n	1a00237c <enableMotorDriver+0x28>
		motorDriverEnabled = 1;
1a00236a:	4b0a      	ldr	r3, [pc, #40]	; (1a002394 <enableMotorDriver+0x40>)
1a00236c:	2201      	movs	r2, #1
1a00236e:	601a      	str	r2, [r3, #0]
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR_DRIVER_ENABLE_PORT_GPIO, MOTOR_DRIVER_ENABLE_PIN_GPIO);
1a002370:	2205      	movs	r2, #5
1a002372:	2100      	movs	r1, #0
1a002374:	4808      	ldr	r0, [pc, #32]	; (1a002398 <enableMotorDriver+0x44>)
1a002376:	f7ff faa5 	bl	1a0018c4 <Chip_GPIO_SetPinOutHigh>
	} else {
		motorDriverEnabled = 0;
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, MOTOR_DRIVER_ENABLE_PORT_GPIO, MOTOR_DRIVER_ENABLE_PIN_GPIO);
	}
}
1a00237a:	e007      	b.n	1a00238c <enableMotorDriver+0x38>
	motorDriverEnabled = enable;
	if (enable) {
		motorDriverEnabled = 1;
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR_DRIVER_ENABLE_PORT_GPIO, MOTOR_DRIVER_ENABLE_PIN_GPIO);
	} else {
		motorDriverEnabled = 0;
1a00237c:	4b05      	ldr	r3, [pc, #20]	; (1a002394 <enableMotorDriver+0x40>)
1a00237e:	2200      	movs	r2, #0
1a002380:	601a      	str	r2, [r3, #0]
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, MOTOR_DRIVER_ENABLE_PORT_GPIO, MOTOR_DRIVER_ENABLE_PIN_GPIO);
1a002382:	2205      	movs	r2, #5
1a002384:	2100      	movs	r1, #0
1a002386:	4804      	ldr	r0, [pc, #16]	; (1a002398 <enableMotorDriver+0x44>)
1a002388:	f7ff fab6 	bl	1a0018f8 <Chip_GPIO_SetPinOutLow>
	}
}
1a00238c:	bf00      	nop
1a00238e:	3708      	adds	r7, #8
1a002390:	46bd      	mov	sp, r7
1a002392:	bd80      	pop	{r7, pc}
1a002394:	10086528 	.word	0x10086528
1a002398:	400f4000 	.word	0x400f4000

1a00239c <initMotors>:

void initMotors(void) {
1a00239c:	b580      	push	{r7, lr}
1a00239e:	af00      	add	r7, sp, #0
	Chip_Clock_Enable(CLK_APB1_MOTOCON);
1a0023a0:	2021      	movs	r0, #33	; 0x21
1a0023a2:	f010 f8ab 	bl	1a0124fc <Chip_Clock_Enable>

	LPC_MCPWM->CAP_CLR = MCPWM_CAPCLR_CAP(0) | MCPWM_CAPCLR_CAP(1) | MCPWM_CAPCLR_CAP(2);
1a0023a6:	4b6c      	ldr	r3, [pc, #432]	; (1a002558 <initMotors+0x1bc>)
1a0023a8:	2207      	movs	r2, #7
1a0023aa:	675a      	str	r2, [r3, #116]	; 0x74

	LPC_MCPWM->INTF_CLR =
1a0023ac:	4b6a      	ldr	r3, [pc, #424]	; (1a002558 <initMotors+0x1bc>)
1a0023ae:	f240 7277 	movw	r2, #1911	; 0x777
1a0023b2:	671a      	str	r2, [r3, #112]	; 0x70
			MCPWM_INT_ILIM(
					0) | MCPWM_INT_ILIM(1) | MCPWM_INT_ILIM(2) | MCPWM_INT_IMAT(0) | MCPWM_INT_IMAT(1) | MCPWM_INT_IMAT(2) | MCPWM_INT_ICAP(0) | MCPWM_INT_ICAP(1) | MCPWM_INT_ICAP(2);

	LPC_MCPWM->INTEN_CLR =
1a0023b4:	4b68      	ldr	r3, [pc, #416]	; (1a002558 <initMotors+0x1bc>)
1a0023b6:	f240 7277 	movw	r2, #1911	; 0x777
1a0023ba:	659a      	str	r2, [r3, #88]	; 0x58
			MCPWM_INT_ILIM(
					0) | MCPWM_INT_ILIM(1) | MCPWM_INT_ILIM(2) | MCPWM_INT_IMAT(0) | MCPWM_INT_IMAT(1) | MCPWM_INT_IMAT(2) | MCPWM_INT_ICAP(0) | MCPWM_INT_ICAP(1) | MCPWM_INT_ICAP(2);
	LPC_MCPWM->CON_CLR = MCPWM_CON_CENTER(MOTOR0_PWM_CHANNEL) | MCPWM_CON_CENTER(MOTOR1_PWM_CHANNEL);
1a0023bc:	4b66      	ldr	r3, [pc, #408]	; (1a002558 <initMotors+0x1bc>)
1a0023be:	4a67      	ldr	r2, [pc, #412]	; (1a00255c <initMotors+0x1c0>)
1a0023c0:	609a      	str	r2, [r3, #8]
	LPC_MCPWM->CON_CLR = MCPWM_CON_POLAR(MOTOR0_PWM_CHANNEL) | MCPWM_CON_POLAR(MOTOR1_PWM_CHANNEL);
1a0023c2:	4b65      	ldr	r3, [pc, #404]	; (1a002558 <initMotors+0x1bc>)
1a0023c4:	4a66      	ldr	r2, [pc, #408]	; (1a002560 <initMotors+0x1c4>)
1a0023c6:	609a      	str	r2, [r3, #8]
	LPC_MCPWM->CON_CLR = MCPWM_CON_DTE(MOTOR0_PWM_CHANNEL) | MCPWM_CON_DTE(MOTOR1_PWM_CHANNEL);
1a0023c8:	4b63      	ldr	r3, [pc, #396]	; (1a002558 <initMotors+0x1bc>)
1a0023ca:	4a66      	ldr	r2, [pc, #408]	; (1a002564 <initMotors+0x1c8>)
1a0023cc:	609a      	str	r2, [r3, #8]
	LPC_MCPWM->CON_CLR = MCPWM_CON_DISUP(MOTOR0_PWM_CHANNEL) | MCPWM_CON_DISUP(MOTOR1_PWM_CHANNEL);
1a0023ce:	4b62      	ldr	r3, [pc, #392]	; (1a002558 <initMotors+0x1bc>)
1a0023d0:	4a65      	ldr	r2, [pc, #404]	; (1a002568 <initMotors+0x1cc>)
1a0023d2:	609a      	str	r2, [r3, #8]

	LPC_MCPWM->TC[MOTOR0_PWM_CHANNEL] = 0;
1a0023d4:	4b60      	ldr	r3, [pc, #384]	; (1a002558 <initMotors+0x1bc>)
1a0023d6:	2200      	movs	r2, #0
1a0023d8:	621a      	str	r2, [r3, #32]
	LPC_MCPWM->TC[MOTOR1_PWM_CHANNEL] = 0;
1a0023da:	4b5f      	ldr	r3, [pc, #380]	; (1a002558 <initMotors+0x1bc>)
1a0023dc:	2200      	movs	r2, #0
1a0023de:	61da      	str	r2, [r3, #28]
	LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL] = BASE_PWM_DIVIDER; //192MHz/25KHz = 7680
1a0023e0:	4b5d      	ldr	r3, [pc, #372]	; (1a002558 <initMotors+0x1bc>)
1a0023e2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
1a0023e6:	62da      	str	r2, [r3, #44]	; 0x2c
	LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL] = BASE_PWM_DIVIDER; //192MHz/25KHz = 7680
1a0023e8:	4b5b      	ldr	r3, [pc, #364]	; (1a002558 <initMotors+0x1bc>)
1a0023ea:	f44f 5216 	mov.w	r2, #9600	; 0x2580
1a0023ee:	629a      	str	r2, [r3, #40]	; 0x28
	LPC_MCPWM->MAT[MOTOR0_PWM_CHANNEL] = BASE_PWM_DIVIDER;
1a0023f0:	4b59      	ldr	r3, [pc, #356]	; (1a002558 <initMotors+0x1bc>)
1a0023f2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
1a0023f6:	639a      	str	r2, [r3, #56]	; 0x38
	LPC_MCPWM->MAT[MOTOR1_PWM_CHANNEL] = BASE_PWM_DIVIDER;
1a0023f8:	4b57      	ldr	r3, [pc, #348]	; (1a002558 <initMotors+0x1bc>)
1a0023fa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
1a0023fe:	635a      	str	r2, [r3, #52]	; 0x34

	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR0_PWM_1_PORT_GPIO, MOTOR0_PWM_1_PIN_GPIO);
1a002400:	2207      	movs	r2, #7
1a002402:	2102      	movs	r1, #2
1a002404:	4859      	ldr	r0, [pc, #356]	; (1a00256c <initMotors+0x1d0>)
1a002406:	f7ff fa5d 	bl	1a0018c4 <Chip_GPIO_SetPinOutHigh>
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR1_PWM_1_PORT_GPIO, MOTOR1_PWM_1_PIN_GPIO);
1a00240a:	220e      	movs	r2, #14
1a00240c:	2102      	movs	r1, #2
1a00240e:	4857      	ldr	r0, [pc, #348]	; (1a00256c <initMotors+0x1d0>)
1a002410:	f7ff fa58 	bl	1a0018c4 <Chip_GPIO_SetPinOutHigh>
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR0_PWM_2_PORT_GPIO, MOTOR0_PWM_2_PIN_GPIO);
1a002414:	2209      	movs	r2, #9
1a002416:	2102      	movs	r1, #2
1a002418:	4854      	ldr	r0, [pc, #336]	; (1a00256c <initMotors+0x1d0>)
1a00241a:	f7ff fa53 	bl	1a0018c4 <Chip_GPIO_SetPinOutHigh>
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, MOTOR1_PWM_2_PORT_GPIO, MOTOR1_PWM_2_PIN_GPIO);
1a00241e:	220f      	movs	r2, #15
1a002420:	2102      	movs	r1, #2
1a002422:	4852      	ldr	r0, [pc, #328]	; (1a00256c <initMotors+0x1d0>)
1a002424:	f7ff fa4e 	bl	1a0018c4 <Chip_GPIO_SetPinOutHigh>
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, MOTOR0_PWM_1_PORT_GPIO, MOTOR0_PWM_1_PIN_GPIO);
1a002428:	2207      	movs	r2, #7
1a00242a:	2102      	movs	r1, #2
1a00242c:	484f      	ldr	r0, [pc, #316]	; (1a00256c <initMotors+0x1d0>)
1a00242e:	f7ff fa09 	bl	1a001844 <Chip_GPIO_SetPinDIROutput>
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, MOTOR1_PWM_1_PORT_GPIO, MOTOR1_PWM_1_PIN_GPIO);
1a002432:	220e      	movs	r2, #14
1a002434:	2102      	movs	r1, #2
1a002436:	484d      	ldr	r0, [pc, #308]	; (1a00256c <initMotors+0x1d0>)
1a002438:	f7ff fa04 	bl	1a001844 <Chip_GPIO_SetPinDIROutput>
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, MOTOR0_PWM_2_PORT_GPIO, MOTOR0_PWM_2_PIN_GPIO);
1a00243c:	2209      	movs	r2, #9
1a00243e:	2102      	movs	r1, #2
1a002440:	484a      	ldr	r0, [pc, #296]	; (1a00256c <initMotors+0x1d0>)
1a002442:	f7ff f9ff 	bl	1a001844 <Chip_GPIO_SetPinDIROutput>
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, MOTOR1_PWM_2_PORT_GPIO, MOTOR1_PWM_2_PIN_GPIO);
1a002446:	220f      	movs	r2, #15
1a002448:	2102      	movs	r1, #2
1a00244a:	4848      	ldr	r0, [pc, #288]	; (1a00256c <initMotors+0x1d0>)
1a00244c:	f7ff f9fa 	bl	1a001844 <Chip_GPIO_SetPinDIROutput>
	Chip_SCU_PinMuxSet(MOTOR0_PWM_1_PORT, MOTOR0_PWM_1_PIN, MD_PLN_FAST | FUNC0);
1a002450:	22f0      	movs	r2, #240	; 0xf0
1a002452:	2107      	movs	r1, #7
1a002454:	2005      	movs	r0, #5
1a002456:	f7ff f9db 	bl	1a001810 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(MOTOR1_PWM_1_PORT, MOTOR1_PWM_1_PIN, MD_PLN_FAST | FUNC0);
1a00245a:	22f0      	movs	r2, #240	; 0xf0
1a00245c:	2105      	movs	r1, #5
1a00245e:	2005      	movs	r0, #5
1a002460:	f7ff f9d6 	bl	1a001810 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(MOTOR0_PWM_2_PORT, MOTOR0_PWM_2_PIN, MD_PLN_FAST | FUNC0);
1a002464:	22f0      	movs	r2, #240	; 0xf0
1a002466:	2100      	movs	r1, #0
1a002468:	2005      	movs	r0, #5
1a00246a:	f7ff f9d1 	bl	1a001810 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(MOTOR1_PWM_2_PORT, MOTOR1_PWM_2_PIN, MD_PLN_FAST | FUNC0);
1a00246e:	22f0      	movs	r2, #240	; 0xf0
1a002470:	2106      	movs	r1, #6
1a002472:	2005      	movs	r0, #5
1a002474:	f7ff f9cc 	bl	1a001810 <Chip_SCU_PinMuxSet>

	motorDriverEnabled = 0;
1a002478:	4b3d      	ldr	r3, [pc, #244]	; (1a002570 <initMotors+0x1d4>)
1a00247a:	2200      	movs	r2, #0
1a00247c:	601a      	str	r2, [r3, #0]
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, MOTOR_DRIVER_ENABLE_PORT_GPIO, MOTOR_DRIVER_ENABLE_PIN_GPIO);
1a00247e:	2205      	movs	r2, #5
1a002480:	2100      	movs	r1, #0
1a002482:	483a      	ldr	r0, [pc, #232]	; (1a00256c <initMotors+0x1d0>)
1a002484:	f7ff f9de 	bl	1a001844 <Chip_GPIO_SetPinDIROutput>
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, MOTOR_DRIVER_ENABLE_PORT_GPIO, MOTOR_DRIVER_ENABLE_PIN_GPIO);
1a002488:	2205      	movs	r2, #5
1a00248a:	2100      	movs	r1, #0
1a00248c:	4837      	ldr	r0, [pc, #220]	; (1a00256c <initMotors+0x1d0>)
1a00248e:	f7ff fa33 	bl	1a0018f8 <Chip_GPIO_SetPinOutLow>
	Chip_SCU_PinMuxSet(MOTOR_DRIVER_ENABLE_PORT, MOTOR_DRIVER_ENABLE_PIN, MD_PLN_FAST | FUNC0);
1a002492:	22f0      	movs	r2, #240	; 0xf0
1a002494:	2106      	movs	r1, #6
1a002496:	2006      	movs	r0, #6
1a002498:	f7ff f9ba 	bl	1a001810 <Chip_SCU_PinMuxSet>

	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, MOTOR_DRIVER_FAULT_PORT_GPIO, MOTOR_DRIVER_FAULT_PIN_GPIO);
1a00249c:	220d      	movs	r2, #13
1a00249e:	2100      	movs	r1, #0
1a0024a0:	4832      	ldr	r0, [pc, #200]	; (1a00256c <initMotors+0x1d0>)
1a0024a2:	f7ff f9ef 	bl	1a001884 <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(MOTOR_DRIVER_FAULT_PORT, MOTOR_DRIVER_FAULT_PIN, MD_BUK | MD_EZI | FUNC0);
1a0024a6:	2248      	movs	r2, #72	; 0x48
1a0024a8:	2112      	movs	r1, #18
1a0024aa:	2001      	movs	r0, #1
1a0024ac:	f7ff f9b0 	bl	1a001810 <Chip_SCU_PinMuxSet>

	LPC_MCPWM->CON_SET = MCPWM_CON_RUN(MOTOR1_PWM_CHANNEL) | MCPWM_CON_RUN(MOTOR0_PWM_CHANNEL);
1a0024b0:	4b29      	ldr	r3, [pc, #164]	; (1a002558 <initMotors+0x1bc>)
1a0024b2:	4a30      	ldr	r2, [pc, #192]	; (1a002574 <initMotors+0x1d8>)
1a0024b4:	605a      	str	r2, [r3, #4]
//Initialize the control structure
	memset(&motor0, 0, sizeof(struct motor_status));
1a0024b6:	223c      	movs	r2, #60	; 0x3c
1a0024b8:	2100      	movs	r1, #0
1a0024ba:	482f      	ldr	r0, [pc, #188]	; (1a002578 <initMotors+0x1dc>)
1a0024bc:	f012 fc90 	bl	1a014de0 <memset>
	memset(&motor1, 0, sizeof(struct motor_status));
1a0024c0:	223c      	movs	r2, #60	; 0x3c
1a0024c2:	2100      	movs	r1, #0
1a0024c4:	482d      	ldr	r0, [pc, #180]	; (1a00257c <initMotors+0x1e0>)
1a0024c6:	f012 fc8b 	bl	1a014de0 <memset>

	motor0.controlMode = DIRECT_MODE;
1a0024ca:	4b2b      	ldr	r3, [pc, #172]	; (1a002578 <initMotors+0x1dc>)
1a0024cc:	2201      	movs	r2, #1
1a0024ce:	60da      	str	r2, [r3, #12]
	motor1.controlMode = DIRECT_MODE;
1a0024d0:	4b2a      	ldr	r3, [pc, #168]	; (1a00257c <initMotors+0x1e0>)
1a0024d2:	2201      	movs	r2, #1
1a0024d4:	60da      	str	r2, [r3, #12]
#if USE_PUSHBOT
	motor0.velocityPrescaler = 20;
1a0024d6:	4b28      	ldr	r3, [pc, #160]	; (1a002578 <initMotors+0x1dc>)
1a0024d8:	2214      	movs	r2, #20
1a0024da:	821a      	strh	r2, [r3, #16]
	motor1.velocityPrescaler = 20;
1a0024dc:	4b27      	ldr	r3, [pc, #156]	; (1a00257c <initMotors+0x1e0>)
1a0024de:	2214      	movs	r2, #20
1a0024e0:	821a      	strh	r2, [r3, #16]
	motor0.proportionalGain = 80;
1a0024e2:	4b25      	ldr	r3, [pc, #148]	; (1a002578 <initMotors+0x1dc>)
1a0024e4:	2250      	movs	r2, #80	; 0x50
1a0024e6:	61da      	str	r2, [r3, #28]
	motor1.proportionalGain = 80;
1a0024e8:	4b24      	ldr	r3, [pc, #144]	; (1a00257c <initMotors+0x1e0>)
1a0024ea:	2250      	movs	r2, #80	; 0x50
1a0024ec:	61da      	str	r2, [r3, #28]
	motor0.derivativeGain = 0;
1a0024ee:	4b22      	ldr	r3, [pc, #136]	; (1a002578 <initMotors+0x1dc>)
1a0024f0:	2200      	movs	r2, #0
1a0024f2:	625a      	str	r2, [r3, #36]	; 0x24
	motor1.derivativeGain = 0;
1a0024f4:	4b21      	ldr	r3, [pc, #132]	; (1a00257c <initMotors+0x1e0>)
1a0024f6:	2200      	movs	r2, #0
1a0024f8:	625a      	str	r2, [r3, #36]	; 0x24
	motor0.velocityWindUpGuard = ( LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL] / motor0.proportionalGain) * 20;
1a0024fa:	4b17      	ldr	r3, [pc, #92]	; (1a002558 <initMotors+0x1bc>)
1a0024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0024fe:	4a1e      	ldr	r2, [pc, #120]	; (1a002578 <initMotors+0x1dc>)
1a002500:	69d2      	ldr	r2, [r2, #28]
1a002502:	fbb3 f2f2 	udiv	r2, r3, r2
1a002506:	4613      	mov	r3, r2
1a002508:	009b      	lsls	r3, r3, #2
1a00250a:	4413      	add	r3, r2
1a00250c:	009b      	lsls	r3, r3, #2
1a00250e:	461a      	mov	r2, r3
1a002510:	4b19      	ldr	r3, [pc, #100]	; (1a002578 <initMotors+0x1dc>)
1a002512:	631a      	str	r2, [r3, #48]	; 0x30
	motor1.velocityWindUpGuard = ( LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL] / motor1.proportionalGain) * 20;
1a002514:	4b10      	ldr	r3, [pc, #64]	; (1a002558 <initMotors+0x1bc>)
1a002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1a002518:	4a18      	ldr	r2, [pc, #96]	; (1a00257c <initMotors+0x1e0>)
1a00251a:	69d2      	ldr	r2, [r2, #28]
1a00251c:	fbb3 f2f2 	udiv	r2, r3, r2
1a002520:	4613      	mov	r3, r2
1a002522:	009b      	lsls	r3, r3, #2
1a002524:	4413      	add	r3, r2
1a002526:	009b      	lsls	r3, r3, #2
1a002528:	461a      	mov	r2, r3
1a00252a:	4b14      	ldr	r3, [pc, #80]	; (1a00257c <initMotors+0x1e0>)
1a00252c:	631a      	str	r2, [r3, #48]	; 0x30
	motor0.controllerWindUpGuard = LPC_MCPWM->LIM[MOTOR0_PWM_CHANNEL] / 10;
1a00252e:	4b0a      	ldr	r3, [pc, #40]	; (1a002558 <initMotors+0x1bc>)
1a002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002532:	4a13      	ldr	r2, [pc, #76]	; (1a002580 <initMotors+0x1e4>)
1a002534:	fba2 2303 	umull	r2, r3, r2, r3
1a002538:	08db      	lsrs	r3, r3, #3
1a00253a:	461a      	mov	r2, r3
1a00253c:	4b0e      	ldr	r3, [pc, #56]	; (1a002578 <initMotors+0x1dc>)
1a00253e:	635a      	str	r2, [r3, #52]	; 0x34
	motor1.controllerWindUpGuard = LPC_MCPWM->LIM[MOTOR1_PWM_CHANNEL] / 10;
1a002540:	4b05      	ldr	r3, [pc, #20]	; (1a002558 <initMotors+0x1bc>)
1a002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1a002544:	4a0e      	ldr	r2, [pc, #56]	; (1a002580 <initMotors+0x1e4>)
1a002546:	fba2 2303 	umull	r2, r3, r2, r3
1a00254a:	08db      	lsrs	r3, r3, #3
1a00254c:	461a      	mov	r2, r3
1a00254e:	4b0b      	ldr	r3, [pc, #44]	; (1a00257c <initMotors+0x1e0>)
1a002550:	635a      	str	r2, [r3, #52]	; 0x34
#endif
}
1a002552:	bf00      	nop
1a002554:	bd80      	pop	{r7, pc}
1a002556:	bf00      	nop
1a002558:	400a0000 	.word	0x400a0000
1a00255c:	00020200 	.word	0x00020200
1a002560:	00040400 	.word	0x00040400
1a002564:	00080800 	.word	0x00080800
1a002568:	00101000 	.word	0x00101000
1a00256c:	400f4000 	.word	0x400f4000
1a002570:	10086528 	.word	0x10086528
1a002574:	00010100 	.word	0x00010100
1a002578:	1008749c 	.word	0x1008749c
1a00257c:	10087460 	.word	0x10087460
1a002580:	cccccccd 	.word	0xcccccccd

1a002584 <Chip_SCU_PinMuxSet>:
 * @return	Nothing
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a002584:	b480      	push	{r7}
1a002586:	b083      	sub	sp, #12
1a002588:	af00      	add	r7, sp, #0
1a00258a:	4603      	mov	r3, r0
1a00258c:	71fb      	strb	r3, [r7, #7]
1a00258e:	460b      	mov	r3, r1
1a002590:	71bb      	strb	r3, [r7, #6]
1a002592:	4613      	mov	r3, r2
1a002594:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002596:	4807      	ldr	r0, [pc, #28]	; (1a0025b4 <Chip_SCU_PinMuxSet+0x30>)
1a002598:	79f9      	ldrb	r1, [r7, #7]
1a00259a:	79bb      	ldrb	r3, [r7, #6]
1a00259c:	88ba      	ldrh	r2, [r7, #4]
1a00259e:	0149      	lsls	r1, r1, #5
1a0025a0:	440b      	add	r3, r1
1a0025a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a0025a6:	bf00      	nop
1a0025a8:	370c      	adds	r7, #12
1a0025aa:	46bd      	mov	sp, r7
1a0025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0025b0:	4770      	bx	lr
1a0025b2:	bf00      	nop
1a0025b4:	40086000 	.word	0x40086000

1a0025b8 <Chip_GPIO_ReadPortBit>:
 * @param	pin		: GPIO pin to read
 * @return	true of the GPIO is high, false if low
 * @note	It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
1a0025b8:	b480      	push	{r7}
1a0025ba:	b085      	sub	sp, #20
1a0025bc:	af00      	add	r7, sp, #0
1a0025be:	60f8      	str	r0, [r7, #12]
1a0025c0:	60b9      	str	r1, [r7, #8]
1a0025c2:	4613      	mov	r3, r2
1a0025c4:	71fb      	strb	r3, [r7, #7]
	return (bool) pGPIO->B[port][pin];
1a0025c6:	79fb      	ldrb	r3, [r7, #7]
1a0025c8:	68f9      	ldr	r1, [r7, #12]
1a0025ca:	68ba      	ldr	r2, [r7, #8]
1a0025cc:	0152      	lsls	r2, r2, #5
1a0025ce:	440a      	add	r2, r1
1a0025d0:	4413      	add	r3, r2
1a0025d2:	781b      	ldrb	r3, [r3, #0]
1a0025d4:	b2db      	uxtb	r3, r3
1a0025d6:	2b00      	cmp	r3, #0
1a0025d8:	bf14      	ite	ne
1a0025da:	2301      	movne	r3, #1
1a0025dc:	2300      	moveq	r3, #0
1a0025de:	b2db      	uxtb	r3, r3
}
1a0025e0:	4618      	mov	r0, r3
1a0025e2:	3714      	adds	r7, #20
1a0025e4:	46bd      	mov	sp, r7
1a0025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0025ea:	4770      	bx	lr

1a0025ec <Chip_GPIO_SetPinDIRInput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a0025ec:	b480      	push	{r7}
1a0025ee:	b083      	sub	sp, #12
1a0025f0:	af00      	add	r7, sp, #0
1a0025f2:	6078      	str	r0, [r7, #4]
1a0025f4:	460b      	mov	r3, r1
1a0025f6:	70fb      	strb	r3, [r7, #3]
1a0025f8:	4613      	mov	r3, r2
1a0025fa:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0025fc:	78fa      	ldrb	r2, [r7, #3]
1a0025fe:	78f9      	ldrb	r1, [r7, #3]
1a002600:	687b      	ldr	r3, [r7, #4]
1a002602:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a002606:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a00260a:	78bb      	ldrb	r3, [r7, #2]
1a00260c:	2001      	movs	r0, #1
1a00260e:	fa00 f303 	lsl.w	r3, r0, r3
1a002612:	43db      	mvns	r3, r3
1a002614:	4019      	ands	r1, r3
1a002616:	687b      	ldr	r3, [r7, #4]
1a002618:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00261c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a002620:	bf00      	nop
1a002622:	370c      	adds	r7, #12
1a002624:	46bd      	mov	sp, r7
1a002626:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00262a:	4770      	bx	lr

1a00262c <fixedpt_str>:
 * be returned, meaning there will be invalid, bogus digits outside the
 * specified precisions.
 */
static inline void
fixedpt_str(fixedpt A, char *str, int max_dec, bool decimal_point)
{
1a00262c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002630:	b092      	sub	sp, #72	; 0x48
1a002632:	af00      	add	r7, sp, #0
1a002634:	60f8      	str	r0, [r7, #12]
1a002636:	60b9      	str	r1, [r7, #8]
1a002638:	607a      	str	r2, [r7, #4]
1a00263a:	70fb      	strb	r3, [r7, #3]
	int ndec = 0, slen = 0;
1a00263c:	2300      	movs	r3, #0
1a00263e:	647b      	str	r3, [r7, #68]	; 0x44
1a002640:	2300      	movs	r3, #0
1a002642:	643b      	str	r3, [r7, #64]	; 0x40
	char tmp[12] = {0};
1a002644:	f107 0314 	add.w	r3, r7, #20
1a002648:	2200      	movs	r2, #0
1a00264a:	601a      	str	r2, [r3, #0]
1a00264c:	605a      	str	r2, [r3, #4]
1a00264e:	609a      	str	r2, [r3, #8]
	fixedptud fr, ip;
	const fixedptud one = (fixedptud)1 << FIXEDPT_BITS;
1a002650:	f04f 0300 	mov.w	r3, #0
1a002654:	f04f 0401 	mov.w	r4, #1
1a002658:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	const fixedptud mask = one - 1;
1a00265c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
1a002660:	f113 33ff 	adds.w	r3, r3, #4294967295
1a002664:	f144 34ff 	adc.w	r4, r4, #4294967295
1a002668:	e9c7 3408 	strd	r3, r4, [r7, #32]

	if (max_dec == -1)
1a00266c:	687b      	ldr	r3, [r7, #4]
1a00266e:	f1b3 3fff 	cmp.w	r3, #4294967295
1a002672:	d102      	bne.n	1a00267a <fixedpt_str+0x4e>
#if FIXEDPT_BITS == 32
		max_dec = 2;
1a002674:	2302      	movs	r3, #2
1a002676:	607b      	str	r3, [r7, #4]
1a002678:	e005      	b.n	1a002686 <fixedpt_str+0x5a>
#elif FIXEDPT_BITS == 64
		max_dec = 10;
#else
#error Invalid width
#endif
	else if (max_dec == -2)
1a00267a:	687b      	ldr	r3, [r7, #4]
1a00267c:	f113 0f02 	cmn.w	r3, #2
1a002680:	d101      	bne.n	1a002686 <fixedpt_str+0x5a>
		max_dec = 15;
1a002682:	230f      	movs	r3, #15
1a002684:	607b      	str	r3, [r7, #4]

	if (A < 0) {
1a002686:	68fb      	ldr	r3, [r7, #12]
1a002688:	2b00      	cmp	r3, #0
1a00268a:	da0a      	bge.n	1a0026a2 <fixedpt_str+0x76>
		str[slen++] = '-';
1a00268c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a00268e:	1c5a      	adds	r2, r3, #1
1a002690:	643a      	str	r2, [r7, #64]	; 0x40
1a002692:	461a      	mov	r2, r3
1a002694:	68bb      	ldr	r3, [r7, #8]
1a002696:	4413      	add	r3, r2
1a002698:	222d      	movs	r2, #45	; 0x2d
1a00269a:	701a      	strb	r2, [r3, #0]
		A *= -1;
1a00269c:	68fb      	ldr	r3, [r7, #12]
1a00269e:	425b      	negs	r3, r3
1a0026a0:	60fb      	str	r3, [r7, #12]
	}

	ip = fixedpt_toint(A);
1a0026a2:	68fb      	ldr	r3, [r7, #12]
1a0026a4:	141b      	asrs	r3, r3, #16
1a0026a6:	ea4f 74e3 	mov.w	r4, r3, asr #31
1a0026aa:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	do {
		tmp[ndec++] = '0' + ip % 10;
1a0026ae:	6c7c      	ldr	r4, [r7, #68]	; 0x44
1a0026b0:	1c63      	adds	r3, r4, #1
1a0026b2:	647b      	str	r3, [r7, #68]	; 0x44
1a0026b4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
1a0026b8:	f04f 020a 	mov.w	r2, #10
1a0026bc:	f04f 0300 	mov.w	r3, #0
1a0026c0:	f012 f87a 	bl	1a0147b8 <__aeabi_uldivmod>
1a0026c4:	b2d3      	uxtb	r3, r2
1a0026c6:	3330      	adds	r3, #48	; 0x30
1a0026c8:	b2da      	uxtb	r2, r3
1a0026ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
1a0026ce:	4423      	add	r3, r4
1a0026d0:	f803 2c34 	strb.w	r2, [r3, #-52]
		ip /= 10;
1a0026d4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
1a0026d8:	f04f 020a 	mov.w	r2, #10
1a0026dc:	f04f 0300 	mov.w	r3, #0
1a0026e0:	f012 f86a 	bl	1a0147b8 <__aeabi_uldivmod>
1a0026e4:	4603      	mov	r3, r0
1a0026e6:	460c      	mov	r4, r1
1a0026e8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	} while (ip != 0);
1a0026ec:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
1a0026f0:	4323      	orrs	r3, r4
1a0026f2:	d1dc      	bne.n	1a0026ae <fixedpt_str+0x82>

	while (ndec > 0)
1a0026f4:	e00e      	b.n	1a002714 <fixedpt_str+0xe8>
		str[slen++] = tmp[--ndec];
1a0026f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a0026f8:	1c5a      	adds	r2, r3, #1
1a0026fa:	643a      	str	r2, [r7, #64]	; 0x40
1a0026fc:	461a      	mov	r2, r3
1a0026fe:	68bb      	ldr	r3, [r7, #8]
1a002700:	4413      	add	r3, r2
1a002702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1a002704:	3a01      	subs	r2, #1
1a002706:	647a      	str	r2, [r7, #68]	; 0x44
1a002708:	f107 0114 	add.w	r1, r7, #20
1a00270c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1a00270e:	440a      	add	r2, r1
1a002710:	7812      	ldrb	r2, [r2, #0]
1a002712:	701a      	strb	r2, [r3, #0]
	do {
		tmp[ndec++] = '0' + ip % 10;
		ip /= 10;
	} while (ip != 0);

	while (ndec > 0)
1a002714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a002716:	2b00      	cmp	r3, #0
1a002718:	dced      	bgt.n	1a0026f6 <fixedpt_str+0xca>
		str[slen++] = tmp[--ndec];
	if (decimal_point)
1a00271a:	78fb      	ldrb	r3, [r7, #3]
1a00271c:	2b00      	cmp	r3, #0
1a00271e:	d007      	beq.n	1a002730 <fixedpt_str+0x104>
	str[slen++] = '.';
1a002720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a002722:	1c5a      	adds	r2, r3, #1
1a002724:	643a      	str	r2, [r7, #64]	; 0x40
1a002726:	461a      	mov	r2, r3
1a002728:	68bb      	ldr	r3, [r7, #8]
1a00272a:	4413      	add	r3, r2
1a00272c:	222e      	movs	r2, #46	; 0x2e
1a00272e:	701a      	strb	r2, [r3, #0]

	fr = (fixedpt_fracpart(A) << FIXEDPT_WBITS) & mask;
1a002730:	68fb      	ldr	r3, [r7, #12]
1a002732:	041b      	lsls	r3, r3, #16
1a002734:	4619      	mov	r1, r3
1a002736:	ea4f 72e1 	mov.w	r2, r1, asr #31
1a00273a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
1a00273e:	ea03 0301 	and.w	r3, r3, r1
1a002742:	ea04 0402 	and.w	r4, r4, r2
1a002746:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	do {
		fr = (fr & mask) * 10;
1a00274a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
1a00274e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
1a002752:	ea03 0301 	and.w	r3, r3, r1
1a002756:	ea04 0402 	and.w	r4, r4, r2
1a00275a:	18db      	adds	r3, r3, r3
1a00275c:	eb44 0404 	adc.w	r4, r4, r4
1a002760:	00a6      	lsls	r6, r4, #2
1a002762:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
1a002766:	009d      	lsls	r5, r3, #2
1a002768:	195b      	adds	r3, r3, r5
1a00276a:	eb44 0406 	adc.w	r4, r4, r6
1a00276e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

		str[slen++] = '0' + (fr >> FIXEDPT_BITS) % 10;
1a002772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a002774:	1c5a      	adds	r2, r3, #1
1a002776:	643a      	str	r2, [r7, #64]	; 0x40
1a002778:	461a      	mov	r2, r3
1a00277a:	68bb      	ldr	r3, [r7, #8]
1a00277c:	eb03 0a02 	add.w	sl, r3, r2
1a002780:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
1a002784:	46a0      	mov	r8, r4
1a002786:	f04f 0900 	mov.w	r9, #0
1a00278a:	f04f 020a 	mov.w	r2, #10
1a00278e:	f04f 0300 	mov.w	r3, #0
1a002792:	4640      	mov	r0, r8
1a002794:	4649      	mov	r1, r9
1a002796:	f012 f80f 	bl	1a0147b8 <__aeabi_uldivmod>
1a00279a:	461c      	mov	r4, r3
1a00279c:	4613      	mov	r3, r2
1a00279e:	b2db      	uxtb	r3, r3
1a0027a0:	3330      	adds	r3, #48	; 0x30
1a0027a2:	b2db      	uxtb	r3, r3
1a0027a4:	f88a 3000 	strb.w	r3, [sl]
		ndec++;
1a0027a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a0027aa:	3301      	adds	r3, #1
1a0027ac:	647b      	str	r3, [r7, #68]	; 0x44
	} while (fr != 0 && ndec < max_dec);
1a0027ae:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
1a0027b2:	4323      	orrs	r3, r4
1a0027b4:	d003      	beq.n	1a0027be <fixedpt_str+0x192>
1a0027b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1a0027b8:	687b      	ldr	r3, [r7, #4]
1a0027ba:	429a      	cmp	r2, r3
1a0027bc:	dbc5      	blt.n	1a00274a <fixedpt_str+0x11e>

	if (ndec > 1 && str[slen-1] == '0')
1a0027be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a0027c0:	2b01      	cmp	r3, #1
1a0027c2:	dd0d      	ble.n	1a0027e0 <fixedpt_str+0x1b4>
1a0027c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a0027c6:	3b01      	subs	r3, #1
1a0027c8:	68ba      	ldr	r2, [r7, #8]
1a0027ca:	4413      	add	r3, r2
1a0027cc:	781b      	ldrb	r3, [r3, #0]
1a0027ce:	2b30      	cmp	r3, #48	; 0x30
1a0027d0:	d106      	bne.n	1a0027e0 <fixedpt_str+0x1b4>
		str[slen-1] = '\0'; /* cut off trailing 0 */
1a0027d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a0027d4:	3b01      	subs	r3, #1
1a0027d6:	68ba      	ldr	r2, [r7, #8]
1a0027d8:	4413      	add	r3, r2
1a0027da:	2200      	movs	r2, #0
1a0027dc:	701a      	strb	r2, [r3, #0]
1a0027de:	e004      	b.n	1a0027ea <fixedpt_str+0x1be>
	else
		str[slen] = '\0';
1a0027e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a0027e2:	68ba      	ldr	r2, [r7, #8]
1a0027e4:	4413      	add	r3, r2
1a0027e6:	2200      	movs	r2, #0
1a0027e8:	701a      	strb	r2, [r3, #0]
}
1a0027ea:	bf00      	nop
1a0027ec:	3748      	adds	r7, #72	; 0x48
1a0027ee:	46bd      	mov	sp, r7
1a0027f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

1a0027f4 <fixedpt_cstr>:

/* Converts the given fixedpt number into a string, using a static
 * (non-threadsafe) string buffer */
static inline char*
fixedpt_cstr(const fixedpt A, const int max_dec,const bool decimal_point )
{
1a0027f4:	b580      	push	{r7, lr}
1a0027f6:	b084      	sub	sp, #16
1a0027f8:	af00      	add	r7, sp, #0
1a0027fa:	60f8      	str	r0, [r7, #12]
1a0027fc:	60b9      	str	r1, [r7, #8]
1a0027fe:	4613      	mov	r3, r2
1a002800:	71fb      	strb	r3, [r7, #7]
	static char str[25];

	fixedpt_str(A, str, max_dec, decimal_point);
1a002802:	79fb      	ldrb	r3, [r7, #7]
1a002804:	68ba      	ldr	r2, [r7, #8]
1a002806:	4904      	ldr	r1, [pc, #16]	; (1a002818 <fixedpt_cstr+0x24>)
1a002808:	68f8      	ldr	r0, [r7, #12]
1a00280a:	f7ff ff0f 	bl	1a00262c <fixedpt_str>
	return (str);
1a00280e:	4b02      	ldr	r3, [pc, #8]	; (1a002818 <fixedpt_cstr+0x24>)
}
1a002810:	4618      	mov	r0, r3
1a002812:	3710      	adds	r7, #16
1a002814:	46bd      	mov	sp, r7
1a002816:	bd80      	pop	{r7, pc}
1a002818:	10086560 	.word	0x10086560

1a00281c <printLongHexData>:

static struct platform_data_s compass_pdata = { .orientation = { 0, 1, 0, 1, 0, 0, 0, 0, -1 } };

#define MAX_NUMBER_STRING_SIZE 32

static void printLongHexData(long *data, int length) {
1a00281c:	b580      	push	{r7, lr}
1a00281e:	b084      	sub	sp, #16
1a002820:	af00      	add	r7, sp, #0
1a002822:	6078      	str	r0, [r7, #4]
1a002824:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; ++i) {
1a002826:	2300      	movs	r3, #0
1a002828:	60fb      	str	r3, [r7, #12]
1a00282a:	e00b      	b.n	1a002844 <printLongHexData+0x28>
		xprintf(" %X", data[i]);
1a00282c:	68fb      	ldr	r3, [r7, #12]
1a00282e:	009b      	lsls	r3, r3, #2
1a002830:	687a      	ldr	r2, [r7, #4]
1a002832:	4413      	add	r3, r2
1a002834:	681b      	ldr	r3, [r3, #0]
1a002836:	4619      	mov	r1, r3
1a002838:	4806      	ldr	r0, [pc, #24]	; (1a002854 <printLongHexData+0x38>)
1a00283a:	f004 fa23 	bl	1a006c84 <xprintf>
static struct platform_data_s compass_pdata = { .orientation = { 0, 1, 0, 1, 0, 0, 0, 0, -1 } };

#define MAX_NUMBER_STRING_SIZE 32

static void printLongHexData(long *data, int length) {
	for (int i = 0; i < length; ++i) {
1a00283e:	68fb      	ldr	r3, [r7, #12]
1a002840:	3301      	adds	r3, #1
1a002842:	60fb      	str	r3, [r7, #12]
1a002844:	68fa      	ldr	r2, [r7, #12]
1a002846:	683b      	ldr	r3, [r7, #0]
1a002848:	429a      	cmp	r2, r3
1a00284a:	dbef      	blt.n	1a00282c <printLongHexData+0x10>
		xprintf(" %X", data[i]);
	}
}
1a00284c:	bf00      	nop
1a00284e:	3710      	adds	r7, #16
1a002850:	46bd      	mov	sp, r7
1a002852:	bd80      	pop	{r7, pc}
1a002854:	1a0188c0 	.word	0x1a0188c0

1a002858 <printShortData>:

static void printShortData(short *data, int length) {
1a002858:	b580      	push	{r7, lr}
1a00285a:	b084      	sub	sp, #16
1a00285c:	af00      	add	r7, sp, #0
1a00285e:	6078      	str	r0, [r7, #4]
1a002860:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; ++i) {
1a002862:	2300      	movs	r3, #0
1a002864:	60fb      	str	r3, [r7, #12]
1a002866:	e00c      	b.n	1a002882 <printShortData+0x2a>
		xprintf(" %d", data[i]);
1a002868:	68fb      	ldr	r3, [r7, #12]
1a00286a:	005b      	lsls	r3, r3, #1
1a00286c:	687a      	ldr	r2, [r7, #4]
1a00286e:	4413      	add	r3, r2
1a002870:	881b      	ldrh	r3, [r3, #0]
1a002872:	b21b      	sxth	r3, r3
1a002874:	4619      	mov	r1, r3
1a002876:	4807      	ldr	r0, [pc, #28]	; (1a002894 <printShortData+0x3c>)
1a002878:	f004 fa04 	bl	1a006c84 <xprintf>
		xprintf(" %X", data[i]);
	}
}

static void printShortData(short *data, int length) {
	for (int i = 0; i < length; ++i) {
1a00287c:	68fb      	ldr	r3, [r7, #12]
1a00287e:	3301      	adds	r3, #1
1a002880:	60fb      	str	r3, [r7, #12]
1a002882:	68fa      	ldr	r2, [r7, #12]
1a002884:	683b      	ldr	r3, [r7, #0]
1a002886:	429a      	cmp	r2, r3
1a002888:	dbee      	blt.n	1a002868 <printShortData+0x10>
		xprintf(" %d", data[i]);
	}
}
1a00288a:	bf00      	nop
1a00288c:	3710      	adds	r7, #16
1a00288e:	46bd      	mov	sp, r7
1a002890:	bd80      	pop	{r7, pc}
1a002892:	bf00      	nop
1a002894:	1a0188c4 	.word	0x1a0188c4

1a002898 <readFromMpl>:
};

/* ---------------------------------------------------------------------------*/
/* Get data from MPL.
 */
static void readFromMpl(uint8_t sensorId) {
1a002898:	b580      	push	{r7, lr}
1a00289a:	b092      	sub	sp, #72	; 0x48
1a00289c:	af00      	add	r7, sp, #0
1a00289e:	4603      	mov	r3, r0
1a0028a0:	71fb      	strb	r3, [r7, #7]
	long data[9];
	int8_t accuracy;
	inv_time_t timestamp;

	xprintf("-S%d", sensorId);
1a0028a2:	79fb      	ldrb	r3, [r7, #7]
1a0028a4:	4619      	mov	r1, r3
1a0028a6:	487d      	ldr	r0, [pc, #500]	; (1a002a9c <readFromMpl+0x204>)
1a0028a8:	f004 f9ec 	bl	1a006c84 <xprintf>
	switch (sensorId) {
1a0028ac:	79fb      	ldrb	r3, [r7, #7]
1a0028ae:	3b07      	subs	r3, #7
1a0028b0:	2b0b      	cmp	r3, #11
1a0028b2:	f200 80ef 	bhi.w	1a002a94 <readFromMpl+0x1fc>
1a0028b6:	a201      	add	r2, pc, #4	; (adr r2, 1a0028bc <readFromMpl+0x24>)
1a0028b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0028bc:	1a0028ed 	.word	0x1a0028ed
1a0028c0:	1a0028fd 	.word	0x1a0028fd
1a0028c4:	1a00290d 	.word	0x1a00290d
1a0028c8:	1a00291d 	.word	0x1a00291d
1a0028cc:	1a002947 	.word	0x1a002947
1a0028d0:	1a00296d 	.word	0x1a00296d
1a0028d4:	1a002993 	.word	0x1a002993
1a0028d8:	1a0029b9 	.word	0x1a0029b9
1a0028dc:	1a0029df 	.word	0x1a0029df
1a0028e0:	1a002a05 	.word	0x1a002a05
1a0028e4:	1a002a23 	.word	0x1a002a23
1a0028e8:	1a002a77 	.word	0x1a002a77
	case RAW_GYRO: {
		printShortData(gyrometer_data, 3);
1a0028ec:	2103      	movs	r1, #3
1a0028ee:	486c      	ldr	r0, [pc, #432]	; (1a002aa0 <readFromMpl+0x208>)
1a0028f0:	f7ff ffb2 	bl	1a002858 <printShortData>
		xputc('\n');
1a0028f4:	200a      	movs	r0, #10
1a0028f6:	f004 f813 	bl	1a006920 <xputc>
		break;
1a0028fa:	e0cb      	b.n	1a002a94 <readFromMpl+0x1fc>
	}
	case RAW_ACCEL: {
		printShortData(accelerometer_data, 3);
1a0028fc:	2103      	movs	r1, #3
1a0028fe:	4869      	ldr	r0, [pc, #420]	; (1a002aa4 <readFromMpl+0x20c>)
1a002900:	f7ff ffaa 	bl	1a002858 <printShortData>
		xputc('\n');
1a002904:	200a      	movs	r0, #10
1a002906:	f004 f80b 	bl	1a006920 <xputc>
		break;
1a00290a:	e0c3      	b.n	1a002a94 <readFromMpl+0x1fc>
	}
	case RAW_COMPASS: {
		printShortData(magnometer_data, 3);
1a00290c:	2103      	movs	r1, #3
1a00290e:	4866      	ldr	r0, [pc, #408]	; (1a002aa8 <readFromMpl+0x210>)
1a002910:	f7ff ffa2 	bl	1a002858 <printShortData>
		xputc('\n');
1a002914:	200a      	movs	r0, #10
1a002916:	f004 f803 	bl	1a006920 <xputc>
		break;
1a00291a:	e0bb      	b.n	1a002a94 <readFromMpl+0x1fc>
	}
	case CAL_GYRO: {
		inv_get_sensor_type_gyro(data, &accuracy, &timestamp);
1a00291c:	f107 0218 	add.w	r2, r7, #24
1a002920:	f107 011f 	add.w	r1, r7, #31
1a002924:	f107 0320 	add.w	r3, r7, #32
1a002928:	4618      	mov	r0, r3
1a00292a:	f006 fcb5 	bl	1a009298 <inv_get_sensor_type_gyro>
		printLongHexData(data, 3);
1a00292e:	f107 0320 	add.w	r3, r7, #32
1a002932:	2103      	movs	r1, #3
1a002934:	4618      	mov	r0, r3
1a002936:	f7ff ff71 	bl	1a00281c <printLongHexData>
		xprintf(" %d\n", timestamp);
1a00293a:	69bb      	ldr	r3, [r7, #24]
1a00293c:	4619      	mov	r1, r3
1a00293e:	485b      	ldr	r0, [pc, #364]	; (1a002aac <readFromMpl+0x214>)
1a002940:	f004 f9a0 	bl	1a006c84 <xprintf>
		break;
1a002944:	e0a6      	b.n	1a002a94 <readFromMpl+0x1fc>
	}
	case CAL_ACCEL: {
		inv_get_sensor_type_accel(data, &accuracy, &timestamp);
1a002946:	f107 0218 	add.w	r2, r7, #24
1a00294a:	f107 011f 	add.w	r1, r7, #31
1a00294e:	f107 0320 	add.w	r3, r7, #32
1a002952:	4618      	mov	r0, r3
1a002954:	f006 fc86 	bl	1a009264 <inv_get_sensor_type_accel>
		printLongHexData(data, 3);
1a002958:	f107 0320 	add.w	r3, r7, #32
1a00295c:	2103      	movs	r1, #3
1a00295e:	4618      	mov	r0, r3
1a002960:	f7ff ff5c 	bl	1a00281c <printLongHexData>
		xputc('\n');
1a002964:	200a      	movs	r0, #10
1a002966:	f003 ffdb 	bl	1a006920 <xputc>
		break;
1a00296a:	e093      	b.n	1a002a94 <readFromMpl+0x1fc>
	}
	case CAL_COMPASS: {
		inv_get_sensor_type_compass(data, &accuracy, &timestamp);
1a00296c:	f107 0218 	add.w	r2, r7, #24
1a002970:	f107 011f 	add.w	r1, r7, #31
1a002974:	f107 0320 	add.w	r3, r7, #32
1a002978:	4618      	mov	r0, r3
1a00297a:	f006 fca7 	bl	1a0092cc <inv_get_sensor_type_compass>
		printLongHexData(data, 3);
1a00297e:	f107 0320 	add.w	r3, r7, #32
1a002982:	2103      	movs	r1, #3
1a002984:	4618      	mov	r0, r3
1a002986:	f7ff ff49 	bl	1a00281c <printLongHexData>
		xputc('\n');
1a00298a:	200a      	movs	r0, #10
1a00298c:	f003 ffc8 	bl	1a006920 <xputc>
		break;
1a002990:	e080      	b.n	1a002a94 <readFromMpl+0x1fc>
	}
	case QUARTERNION: {
		inv_get_sensor_type_quat(data, &accuracy, &timestamp);
1a002992:	f107 0218 	add.w	r2, r7, #24
1a002996:	f107 011f 	add.w	r1, r7, #31
1a00299a:	f107 0320 	add.w	r3, r7, #32
1a00299e:	4618      	mov	r0, r3
1a0029a0:	f006 fcae 	bl	1a009300 <inv_get_sensor_type_quat>
		printLongHexData(data, 4);
1a0029a4:	f107 0320 	add.w	r3, r7, #32
1a0029a8:	2104      	movs	r1, #4
1a0029aa:	4618      	mov	r0, r3
1a0029ac:	f7ff ff36 	bl	1a00281c <printLongHexData>
		xputc('\n');
1a0029b0:	200a      	movs	r0, #10
1a0029b2:	f003 ffb5 	bl	1a006920 <xputc>
		break;
1a0029b6:	e06d      	b.n	1a002a94 <readFromMpl+0x1fc>
	}
	case EULER_ANGLES: {
		inv_get_sensor_type_euler(data, &accuracy, &timestamp);
1a0029b8:	f107 0218 	add.w	r2, r7, #24
1a0029bc:	f107 011f 	add.w	r1, r7, #31
1a0029c0:	f107 0320 	add.w	r3, r7, #32
1a0029c4:	4618      	mov	r0, r3
1a0029c6:	f006 fd3b 	bl	1a009440 <inv_get_sensor_type_euler>
		printLongHexData(data, 4);
1a0029ca:	f107 0320 	add.w	r3, r7, #32
1a0029ce:	2104      	movs	r1, #4
1a0029d0:	4618      	mov	r0, r3
1a0029d2:	f7ff ff23 	bl	1a00281c <printLongHexData>
		xputc('\n');
1a0029d6:	200a      	movs	r0, #10
1a0029d8:	f003 ffa2 	bl	1a006920 <xputc>
		break;
1a0029dc:	e05a      	b.n	1a002a94 <readFromMpl+0x1fc>
	}
	case ROTATION_MATRIX: {
		inv_get_sensor_type_rot_mat(data, &accuracy, &timestamp);
1a0029de:	f107 0218 	add.w	r2, r7, #24
1a0029e2:	f107 011f 	add.w	r1, r7, #31
1a0029e6:	f107 0320 	add.w	r3, r7, #32
1a0029ea:	4618      	mov	r0, r3
1a0029ec:	f006 fea8 	bl	1a009740 <inv_get_sensor_type_rot_mat>
		printLongHexData(data, 9);
1a0029f0:	f107 0320 	add.w	r3, r7, #32
1a0029f4:	2109      	movs	r1, #9
1a0029f6:	4618      	mov	r0, r3
1a0029f8:	f7ff ff10 	bl	1a00281c <printLongHexData>
		xputc('\n');
1a0029fc:	200a      	movs	r0, #10
1a0029fe:	f003 ff8f 	bl	1a006920 <xputc>
		break;
1a002a02:	e047      	b.n	1a002a94 <readFromMpl+0x1fc>
	}
	case HEADING: {
		inv_get_sensor_type_heading(data, &accuracy, &timestamp);
1a002a04:	f107 0218 	add.w	r2, r7, #24
1a002a08:	f107 011f 	add.w	r1, r7, #31
1a002a0c:	f107 0320 	add.w	r3, r7, #32
1a002a10:	4618      	mov	r0, r3
1a002a12:	f006 fc91 	bl	1a009338 <inv_get_sensor_type_heading>
		xprintf(" %X\n", data[0]);
1a002a16:	6a3b      	ldr	r3, [r7, #32]
1a002a18:	4619      	mov	r1, r3
1a002a1a:	4825      	ldr	r0, [pc, #148]	; (1a002ab0 <readFromMpl+0x218>)
1a002a1c:	f004 f932 	bl	1a006c84 <xprintf>
		break;
1a002a20:	e038      	b.n	1a002a94 <readFromMpl+0x1fc>
	}
	case LINEAR_ACCEL: {
		float float_data[3] = { 0 };
1a002a22:	f107 030c 	add.w	r3, r7, #12
1a002a26:	2200      	movs	r2, #0
1a002a28:	601a      	str	r2, [r3, #0]
1a002a2a:	605a      	str	r2, [r3, #4]
1a002a2c:	609a      	str	r2, [r3, #8]
		inv_get_sensor_type_linear_acceleration(float_data, &accuracy, &timestamp);
1a002a2e:	f107 0218 	add.w	r2, r7, #24
1a002a32:	f107 011f 	add.w	r1, r7, #31
1a002a36:	f107 030c 	add.w	r3, r7, #12
1a002a3a:	4618      	mov	r0, r3
1a002a3c:	f005 f89e 	bl	1a007b7c <inv_get_sensor_type_linear_acceleration>
		union ufloat converter;
		for (int i = 0; i < 3; ++i) {
1a002a40:	2300      	movs	r3, #0
1a002a42:	647b      	str	r3, [r7, #68]	; 0x44
1a002a44:	e00f      	b.n	1a002a66 <readFromMpl+0x1ce>
			converter.f = float_data[i];
1a002a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a002a48:	009b      	lsls	r3, r3, #2
1a002a4a:	f107 0248 	add.w	r2, r7, #72	; 0x48
1a002a4e:	4413      	add	r3, r2
1a002a50:	3b3c      	subs	r3, #60	; 0x3c
1a002a52:	681b      	ldr	r3, [r3, #0]
1a002a54:	60bb      	str	r3, [r7, #8]
			xprintf(" %X", converter.u);
1a002a56:	68bb      	ldr	r3, [r7, #8]
1a002a58:	4619      	mov	r1, r3
1a002a5a:	4816      	ldr	r0, [pc, #88]	; (1a002ab4 <readFromMpl+0x21c>)
1a002a5c:	f004 f912 	bl	1a006c84 <xprintf>
	}
	case LINEAR_ACCEL: {
		float float_data[3] = { 0 };
		inv_get_sensor_type_linear_acceleration(float_data, &accuracy, &timestamp);
		union ufloat converter;
		for (int i = 0; i < 3; ++i) {
1a002a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a002a62:	3301      	adds	r3, #1
1a002a64:	647b      	str	r3, [r7, #68]	; 0x44
1a002a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a002a68:	2b02      	cmp	r3, #2
1a002a6a:	ddec      	ble.n	1a002a46 <readFromMpl+0x1ae>
			converter.f = float_data[i];
			xprintf(" %X", converter.u);
		}
		xputc('\n');
1a002a6c:	200a      	movs	r0, #10
1a002a6e:	f003 ff57 	bl	1a006920 <xputc>
		break;
1a002a72:	bf00      	nop
1a002a74:	e00e      	b.n	1a002a94 <readFromMpl+0x1fc>
	}
	case STATUS: {
		xprintf(" %s %d\n", fixedpt_cstr(temperature, 3, false), sensor_timestamp);
1a002a76:	4b10      	ldr	r3, [pc, #64]	; (1a002ab8 <readFromMpl+0x220>)
1a002a78:	681b      	ldr	r3, [r3, #0]
1a002a7a:	2200      	movs	r2, #0
1a002a7c:	2103      	movs	r1, #3
1a002a7e:	4618      	mov	r0, r3
1a002a80:	f7ff feb8 	bl	1a0027f4 <fixedpt_cstr>
1a002a84:	4601      	mov	r1, r0
1a002a86:	4b0d      	ldr	r3, [pc, #52]	; (1a002abc <readFromMpl+0x224>)
1a002a88:	681b      	ldr	r3, [r3, #0]
1a002a8a:	461a      	mov	r2, r3
1a002a8c:	480c      	ldr	r0, [pc, #48]	; (1a002ac0 <readFromMpl+0x228>)
1a002a8e:	f004 f8f9 	bl	1a006c84 <xprintf>
		break;
1a002a92:	bf00      	nop
	}
	}
}
1a002a94:	bf00      	nop
1a002a96:	3748      	adds	r7, #72	; 0x48
1a002a98:	46bd      	mov	sp, r7
1a002a9a:	bd80      	pop	{r7, pc}
1a002a9c:	1a0188c8 	.word	0x1a0188c8
1a002aa0:	10086530 	.word	0x10086530
1a002aa4:	10086538 	.word	0x10086538
1a002aa8:	10086540 	.word	0x10086540
1a002aac:	1a0188d0 	.word	0x1a0188d0
1a002ab0:	1a0188d8 	.word	0x1a0188d8
1a002ab4:	1a0188c0 	.word	0x1a0188c0
1a002ab8:	1008652c 	.word	0x1008652c
1a002abc:	10086558 	.word	0x10086558
1a002ac0:	1a0188e0 	.word	0x1a0188e0

1a002ac4 <RawGyroReport>:

void RawGyroReport() {
1a002ac4:	b580      	push	{r7, lr}
1a002ac6:	af00      	add	r7, sp, #0
	readFromMpl(RAW_GYRO);
1a002ac8:	2007      	movs	r0, #7
1a002aca:	f7ff fee5 	bl	1a002898 <readFromMpl>
}
1a002ace:	bf00      	nop
1a002ad0:	bd80      	pop	{r7, pc}
1a002ad2:	bf00      	nop

1a002ad4 <RawAccelerometerReport>:
void RawAccelerometerReport() {
1a002ad4:	b580      	push	{r7, lr}
1a002ad6:	af00      	add	r7, sp, #0
	readFromMpl(RAW_ACCEL);
1a002ad8:	2008      	movs	r0, #8
1a002ada:	f7ff fedd 	bl	1a002898 <readFromMpl>

}
1a002ade:	bf00      	nop
1a002ae0:	bd80      	pop	{r7, pc}
1a002ae2:	bf00      	nop

1a002ae4 <RawCompassReport>:
void RawCompassReport() {
1a002ae4:	b580      	push	{r7, lr}
1a002ae6:	af00      	add	r7, sp, #0
	readFromMpl(RAW_COMPASS);
1a002ae8:	2009      	movs	r0, #9
1a002aea:	f7ff fed5 	bl	1a002898 <readFromMpl>
}
1a002aee:	bf00      	nop
1a002af0:	bd80      	pop	{r7, pc}
1a002af2:	bf00      	nop

1a002af4 <CalGyroReport>:

void CalGyroReport() {
1a002af4:	b580      	push	{r7, lr}
1a002af6:	af00      	add	r7, sp, #0
	readFromMpl(CAL_GYRO);
1a002af8:	200a      	movs	r0, #10
1a002afa:	f7ff fecd 	bl	1a002898 <readFromMpl>
}
1a002afe:	bf00      	nop
1a002b00:	bd80      	pop	{r7, pc}
1a002b02:	bf00      	nop

1a002b04 <CalAccelerometerReport>:

void CalAccelerometerReport() {
1a002b04:	b580      	push	{r7, lr}
1a002b06:	af00      	add	r7, sp, #0
	readFromMpl(CAL_ACCEL);
1a002b08:	200b      	movs	r0, #11
1a002b0a:	f7ff fec5 	bl	1a002898 <readFromMpl>
}
1a002b0e:	bf00      	nop
1a002b10:	bd80      	pop	{r7, pc}
1a002b12:	bf00      	nop

1a002b14 <CalCompassReport>:

void CalCompassReport() {
1a002b14:	b580      	push	{r7, lr}
1a002b16:	af00      	add	r7, sp, #0
	readFromMpl(CAL_COMPASS);
1a002b18:	200c      	movs	r0, #12
1a002b1a:	f7ff febd 	bl	1a002898 <readFromMpl>
}
1a002b1e:	bf00      	nop
1a002b20:	bd80      	pop	{r7, pc}
1a002b22:	bf00      	nop

1a002b24 <IMUStatusReport>:
void IMUStatusReport() {
1a002b24:	b580      	push	{r7, lr}
1a002b26:	af00      	add	r7, sp, #0
	readFromMpl(STATUS);
1a002b28:	2012      	movs	r0, #18
1a002b2a:	f7ff feb5 	bl	1a002898 <readFromMpl>
}
1a002b2e:	bf00      	nop
1a002b30:	bd80      	pop	{r7, pc}
1a002b32:	bf00      	nop

1a002b34 <QuaternionReport>:

void QuaternionReport() {
1a002b34:	b580      	push	{r7, lr}
1a002b36:	af00      	add	r7, sp, #0
	readFromMpl(QUARTERNION);
1a002b38:	200d      	movs	r0, #13
1a002b3a:	f7ff fead 	bl	1a002898 <readFromMpl>
}
1a002b3e:	bf00      	nop
1a002b40:	bd80      	pop	{r7, pc}
1a002b42:	bf00      	nop

1a002b44 <EulerAnglesReport>:

void EulerAnglesReport() {
1a002b44:	b580      	push	{r7, lr}
1a002b46:	af00      	add	r7, sp, #0
	readFromMpl(EULER_ANGLES);
1a002b48:	200e      	movs	r0, #14
1a002b4a:	f7ff fea5 	bl	1a002898 <readFromMpl>
}
1a002b4e:	bf00      	nop
1a002b50:	bd80      	pop	{r7, pc}
1a002b52:	bf00      	nop

1a002b54 <RotationMatrixReport>:

void RotationMatrixReport() {
1a002b54:	b580      	push	{r7, lr}
1a002b56:	af00      	add	r7, sp, #0
	readFromMpl(ROTATION_MATRIX);
1a002b58:	200f      	movs	r0, #15
1a002b5a:	f7ff fe9d 	bl	1a002898 <readFromMpl>
}
1a002b5e:	bf00      	nop
1a002b60:	bd80      	pop	{r7, pc}
1a002b62:	bf00      	nop

1a002b64 <HeadingReport>:

void HeadingReport() {
1a002b64:	b580      	push	{r7, lr}
1a002b66:	af00      	add	r7, sp, #0
	readFromMpl(HEADING);
1a002b68:	2010      	movs	r0, #16
1a002b6a:	f7ff fe95 	bl	1a002898 <readFromMpl>
}
1a002b6e:	bf00      	nop
1a002b70:	bd80      	pop	{r7, pc}
1a002b72:	bf00      	nop

1a002b74 <LinearAccelReport>:

void LinearAccelReport() {
1a002b74:	b580      	push	{r7, lr}
1a002b76:	af00      	add	r7, sp, #0
	readFromMpl(LINEAR_ACCEL);
1a002b78:	2011      	movs	r0, #17
1a002b7a:	f7ff fe8d 	bl	1a002898 <readFromMpl>
}
1a002b7e:	bf00      	nop
1a002b80:	bd80      	pop	{r7, pc}
1a002b82:	bf00      	nop

1a002b84 <updateIMUData>:

void updateIMUData() {
1a002b84:	b580      	push	{r7, lr}
1a002b86:	b088      	sub	sp, #32
1a002b88:	af02      	add	r7, sp, #8

	short sensors;
	unsigned char more;
	if (mpuEnabled && Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, MPU_INT_GND_PORT_GPIO, MPU_INT_GND_PIN_GPIO)) {
1a002b8a:	4b3a      	ldr	r3, [pc, #232]	; (1a002c74 <updateIMUData+0xf0>)
1a002b8c:	781b      	ldrb	r3, [r3, #0]
1a002b8e:	2b00      	cmp	r3, #0
1a002b90:	d06d      	beq.n	1a002c6e <updateIMUData+0xea>
1a002b92:	2208      	movs	r2, #8
1a002b94:	2105      	movs	r1, #5
1a002b96:	4838      	ldr	r0, [pc, #224]	; (1a002c78 <updateIMUData+0xf4>)
1a002b98:	f7ff fd0e 	bl	1a0025b8 <Chip_GPIO_ReadPortBit>
1a002b9c:	4603      	mov	r3, r0
1a002b9e:	2b00      	cmp	r3, #0
1a002ba0:	d065      	beq.n	1a002c6e <updateIMUData+0xea>
		if (dmp_read_fifo(gyrometer_data, accelerometer_data, quaternion, &sensor_timestamp, &sensors, &more)) {
1a002ba2:	f107 030d 	add.w	r3, r7, #13
1a002ba6:	9301      	str	r3, [sp, #4]
1a002ba8:	f107 030e 	add.w	r3, r7, #14
1a002bac:	9300      	str	r3, [sp, #0]
1a002bae:	4b33      	ldr	r3, [pc, #204]	; (1a002c7c <updateIMUData+0xf8>)
1a002bb0:	4a33      	ldr	r2, [pc, #204]	; (1a002c80 <updateIMUData+0xfc>)
1a002bb2:	4934      	ldr	r1, [pc, #208]	; (1a002c84 <updateIMUData+0x100>)
1a002bb4:	4834      	ldr	r0, [pc, #208]	; (1a002c88 <updateIMUData+0x104>)
1a002bb6:	f008 ffa3 	bl	1a00bb00 <dmp_read_fifo>
1a002bba:	4603      	mov	r3, r0
1a002bbc:	2b00      	cmp	r3, #0
1a002bbe:	d156      	bne.n	1a002c6e <updateIMUData+0xea>
			return;
		}
		/* Push the new data to the MPL. */
		inv_build_gyro(gyrometer_data, sensor_timestamp);
1a002bc0:	4b2e      	ldr	r3, [pc, #184]	; (1a002c7c <updateIMUData+0xf8>)
1a002bc2:	681b      	ldr	r3, [r3, #0]
1a002bc4:	4619      	mov	r1, r3
1a002bc6:	4830      	ldr	r0, [pc, #192]	; (1a002c88 <updateIMUData+0x104>)
1a002bc8:	f004 fbdc 	bl	1a007384 <inv_build_gyro>
		mpu_get_temperature(&temperature, &sensor_timestamp);
1a002bcc:	492b      	ldr	r1, [pc, #172]	; (1a002c7c <updateIMUData+0xf8>)
1a002bce:	482f      	ldr	r0, [pc, #188]	; (1a002c8c <updateIMUData+0x108>)
1a002bd0:	f007 f84e 	bl	1a009c70 <mpu_get_temperature>
		inv_build_temp(temperature, sensor_timestamp);
1a002bd4:	4b2d      	ldr	r3, [pc, #180]	; (1a002c8c <updateIMUData+0x108>)
1a002bd6:	681a      	ldr	r2, [r3, #0]
1a002bd8:	4b28      	ldr	r3, [pc, #160]	; (1a002c7c <updateIMUData+0xf8>)
1a002bda:	681b      	ldr	r3, [r3, #0]
1a002bdc:	4619      	mov	r1, r3
1a002bde:	4610      	mov	r0, r2
1a002be0:	f004 fc68 	bl	1a0074b4 <inv_build_temp>
		long converter[3];
		for (int i = 0; i < 3; i++) {
1a002be4:	2300      	movs	r3, #0
1a002be6:	617b      	str	r3, [r7, #20]
1a002be8:	e00e      	b.n	1a002c08 <updateIMUData+0x84>
			converter[i] = accelerometer_data[i];
1a002bea:	4a26      	ldr	r2, [pc, #152]	; (1a002c84 <updateIMUData+0x100>)
1a002bec:	697b      	ldr	r3, [r7, #20]
1a002bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
1a002bf2:	b21a      	sxth	r2, r3
1a002bf4:	697b      	ldr	r3, [r7, #20]
1a002bf6:	009b      	lsls	r3, r3, #2
1a002bf8:	f107 0118 	add.w	r1, r7, #24
1a002bfc:	440b      	add	r3, r1
1a002bfe:	f843 2c18 	str.w	r2, [r3, #-24]
		/* Push the new data to the MPL. */
		inv_build_gyro(gyrometer_data, sensor_timestamp);
		mpu_get_temperature(&temperature, &sensor_timestamp);
		inv_build_temp(temperature, sensor_timestamp);
		long converter[3];
		for (int i = 0; i < 3; i++) {
1a002c02:	697b      	ldr	r3, [r7, #20]
1a002c04:	3301      	adds	r3, #1
1a002c06:	617b      	str	r3, [r7, #20]
1a002c08:	697b      	ldr	r3, [r7, #20]
1a002c0a:	2b02      	cmp	r3, #2
1a002c0c:	dded      	ble.n	1a002bea <updateIMUData+0x66>
			converter[i] = accelerometer_data[i];
		}
		inv_build_accel(converter, 0, sensor_timestamp);
1a002c0e:	4b1b      	ldr	r3, [pc, #108]	; (1a002c7c <updateIMUData+0xf8>)
1a002c10:	681a      	ldr	r2, [r3, #0]
1a002c12:	463b      	mov	r3, r7
1a002c14:	2100      	movs	r1, #0
1a002c16:	4618      	mov	r0, r3
1a002c18:	f004 fb52 	bl	1a0072c0 <inv_build_accel>
		inv_build_quat(quaternion, 0, sensor_timestamp);
1a002c1c:	4b17      	ldr	r3, [pc, #92]	; (1a002c7c <updateIMUData+0xf8>)
1a002c1e:	681b      	ldr	r3, [r3, #0]
1a002c20:	461a      	mov	r2, r3
1a002c22:	2100      	movs	r1, #0
1a002c24:	4816      	ldr	r0, [pc, #88]	; (1a002c80 <updateIMUData+0xfc>)
1a002c26:	f004 fc69 	bl	1a0074fc <inv_build_quat>
		for (int i = 0; i < 3; i++) {
1a002c2a:	2300      	movs	r3, #0
1a002c2c:	613b      	str	r3, [r7, #16]
1a002c2e:	e00e      	b.n	1a002c4e <updateIMUData+0xca>
			converter[i] = magnometer_data[i];
1a002c30:	4a17      	ldr	r2, [pc, #92]	; (1a002c90 <updateIMUData+0x10c>)
1a002c32:	693b      	ldr	r3, [r7, #16]
1a002c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
1a002c38:	b21a      	sxth	r2, r3
1a002c3a:	693b      	ldr	r3, [r7, #16]
1a002c3c:	009b      	lsls	r3, r3, #2
1a002c3e:	f107 0118 	add.w	r1, r7, #24
1a002c42:	440b      	add	r3, r1
1a002c44:	f843 2c18 	str.w	r2, [r3, #-24]
		for (int i = 0; i < 3; i++) {
			converter[i] = accelerometer_data[i];
		}
		inv_build_accel(converter, 0, sensor_timestamp);
		inv_build_quat(quaternion, 0, sensor_timestamp);
		for (int i = 0; i < 3; i++) {
1a002c48:	693b      	ldr	r3, [r7, #16]
1a002c4a:	3301      	adds	r3, #1
1a002c4c:	613b      	str	r3, [r7, #16]
1a002c4e:	693b      	ldr	r3, [r7, #16]
1a002c50:	2b02      	cmp	r3, #2
1a002c52:	dded      	ble.n	1a002c30 <updateIMUData+0xac>
			converter[i] = magnometer_data[i];
		}
		mpu_get_compass_reg(magnometer_data, &sensor_timestamp);
1a002c54:	4909      	ldr	r1, [pc, #36]	; (1a002c7c <updateIMUData+0xf8>)
1a002c56:	480e      	ldr	r0, [pc, #56]	; (1a002c90 <updateIMUData+0x10c>)
1a002c58:	f008 f93e 	bl	1a00aed8 <mpu_get_compass_reg>
		inv_build_compass((long*) magnometer_data, 0, sensor_timestamp);
1a002c5c:	4b07      	ldr	r3, [pc, #28]	; (1a002c7c <updateIMUData+0xf8>)
1a002c5e:	681b      	ldr	r3, [r3, #0]
1a002c60:	461a      	mov	r2, r3
1a002c62:	2100      	movs	r1, #0
1a002c64:	480a      	ldr	r0, [pc, #40]	; (1a002c90 <updateIMUData+0x10c>)
1a002c66:	f004 fbb3 	bl	1a0073d0 <inv_build_compass>
		inv_execute_on_data();
1a002c6a:	f004 fd17 	bl	1a00769c <inv_execute_on_data>
	}
}
1a002c6e:	3718      	adds	r7, #24
1a002c70:	46bd      	mov	sp, r7
1a002c72:	bd80      	pop	{r7, pc}
1a002c74:	1008655c 	.word	0x1008655c
1a002c78:	400f4000 	.word	0x400f4000
1a002c7c:	10086558 	.word	0x10086558
1a002c80:	10086548 	.word	0x10086548
1a002c84:	10086538 	.word	0x10086538
1a002c88:	10086530 	.word	0x10086530
1a002c8c:	1008652c 	.word	0x1008652c
1a002c90:	10086540 	.word	0x10086540

1a002c94 <MPU9105Init>:

void MPU9105Init() {
1a002c94:	b580      	push	{r7, lr}
1a002c96:	b082      	sub	sp, #8
1a002c98:	af00      	add	r7, sp, #0
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, MPU_INT_GND_PORT_GPIO, MPU_INT_GND_PIN_GPIO);
1a002c9a:	2208      	movs	r2, #8
1a002c9c:	2105      	movs	r1, #5
1a002c9e:	4877      	ldr	r0, [pc, #476]	; (1a002e7c <MPU9105Init+0x1e8>)
1a002ca0:	f7ff fca4 	bl	1a0025ec <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(MPU_INT_GND_PORT, MPU_INT_GND_PIN,
1a002ca4:	225c      	movs	r2, #92	; 0x5c
1a002ca6:	2101      	movs	r1, #1
1a002ca8:	2003      	movs	r0, #3
1a002caa:	f7ff fc6b 	bl	1a002584 <Chip_SCU_PinMuxSet>
	SCU_MODE_INBUFF_EN | SCU_MODE_FUNC4 | SCU_MODE_PULLDOWN);
	mpuEnabled = false;
1a002cae:	4b74      	ldr	r3, [pc, #464]	; (1a002e80 <MPU9105Init+0x1ec>)
1a002cb0:	2200      	movs	r2, #0
1a002cb2:	701a      	strb	r2, [r3, #0]
	Chip_I2C_Init(I2C0);
1a002cb4:	2000      	movs	r0, #0
1a002cb6:	f00f ffa3 	bl	1a012c00 <Chip_I2C_Init>
	Chip_I2C_SetClockRate(I2C0, FAST_MODE_BAUD);
1a002cba:	4972      	ldr	r1, [pc, #456]	; (1a002e84 <MPU9105Init+0x1f0>)
1a002cbc:	2000      	movs	r0, #0
1a002cbe:	f00f ffd3 	bl	1a012c68 <Chip_I2C_SetClockRate>
	Chip_I2C_SetMasterEventHandler(I2C0, Chip_I2C_EventHandlerPolling);
1a002cc2:	4971      	ldr	r1, [pc, #452]	; (1a002e88 <MPU9105Init+0x1f4>)
1a002cc4:	2000      	movs	r0, #0
1a002cc6:	f010 f803 	bl	1a012cd0 <Chip_I2C_SetMasterEventHandler>
	LPC_SCU->SFSI2C0 = SFSI2C0_CONFIGURE_STANDARD_FAST_MODE_PLUS;
1a002cca:	4b70      	ldr	r3, [pc, #448]	; (1a002e8c <MPU9105Init+0x1f8>)
1a002ccc:	f640 4208 	movw	r2, #3080	; 0xc08
1a002cd0:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

	/* Set up gyro.
	 * Every function preceded by mpu_ is a driver function and can be found
	 * in inv_mpu.h.
	 */
	if (mpu_init(NULL)) {
1a002cd4:	2000      	movs	r0, #0
1a002cd6:	f006 fe99 	bl	1a009a0c <mpu_init>
1a002cda:	4603      	mov	r3, r0
1a002cdc:	2b00      	cmp	r3, #0
1a002cde:	d003      	beq.n	1a002ce8 <MPU9105Init+0x54>
		Chip_I2C_DeInit(I2C0);
1a002ce0:	2000      	movs	r0, #0
1a002ce2:	f00f ffa7 	bl	1a012c34 <Chip_I2C_DeInit>
1a002ce6:	e0c5      	b.n	1a002e74 <MPU9105Init+0x1e0>
		return;
	}

	if (inv_init_mpl()) {
1a002ce8:	f005 fefc 	bl	1a008ae4 <inv_init_mpl>
		//TODO: handle this failure
	}
	/* Compute 6-axis and 9-axis quaternions. */
	inv_enable_quaternion();
1a002cec:	f00e fe94 	bl	1a011a18 <inv_enable_quaternion>
	inv_enable_9x_sensor_fusion();
1a002cf0:	f00d f8e6 	bl	1a00fec0 <inv_enable_9x_sensor_fusion>
	inv_9x_fusion_use_timestamps(1);
1a002cf4:	2001      	movs	r0, #1
1a002cf6:	f00d f8db 	bl	1a00feb0 <inv_9x_fusion_use_timestamps>

	/* Update gyro biases when not in motion.
	 */
	inv_enable_fast_nomot();
1a002cfa:	f00c fd95 	bl	1a00f828 <inv_enable_fast_nomot>

	/* Update gyro biases when temperature changes. */
	inv_enable_gyro_tc();
1a002cfe:	f00d fb6f 	bl	1a0103e0 <inv_enable_gyro_tc>

	/* This algorithm updates the accel biases when in motion. A more accurate
	 * bias measurement can be made when running the self-test but this algorithm
	 * can be enabled if the self-test can't be executed in your application.
	 */
	inv_enable_in_use_auto_calibration();
1a002d02:	f009 fe99 	bl	1a00ca38 <inv_enable_in_use_auto_calibration>
	/* Compass calibration algorithms. */
	inv_enable_vector_compass_cal();
1a002d06:	f00c f819 	bl	1a00ed3c <inv_enable_vector_compass_cal>
	inv_enable_magnetic_disturbance();
1a002d0a:	f00d febb 	bl	1a010a84 <inv_enable_magnetic_disturbance>
	/* If you need to estimate your heading before the compass is calibrated,
	 * enable this algorithm. It becomes useless after a good figure-eight is
	 * detected, so we'll just leave it out to save memory.
	 *
	 */
	inv_enable_heading_from_gyro();
1a002d0e:	f00d fe75 	bl	1a0109fc <inv_enable_heading_from_gyro>

	/* Allows use of the MPL APIs in read_from_mpl. */
	inv_enable_eMPL_outputs();
1a002d12:	f006 fdff 	bl	1a009914 <inv_enable_eMPL_outputs>

	inv_start_mpl();
1a002d16:	f005 ff21 	bl	1a008b5c <inv_start_mpl>

	/* Get/set hardware configuration. Start gyro. */
	/* Wake up all sensors. */
	mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1a002d1a:	2079      	movs	r0, #121	; 0x79
1a002d1c:	f007 fb98 	bl	1a00a450 <mpu_set_sensors>
	/* Push both gyro and accel data into the FIFO. */
	mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1a002d20:	2078      	movs	r0, #120	; 0x78
1a002d22:	f007 fb43 	bl	1a00a3ac <mpu_configure_fifo>

	mpu_set_sample_rate(DEFAULT_MPU_HZ);
1a002d26:	2028      	movs	r0, #40	; 0x28
1a002d28:	f007 fa92 	bl	1a00a250 <mpu_set_sample_rate>

	/* The compass sampling rate can be less than the gyro/accel sampling rate.
	 * Use this function for proper power management.
	 */
	mpu_set_compass_sample_rate(DEFAULT_MPU_HZ);
1a002d2c:	2028      	movs	r0, #40	; 0x28
1a002d2e:	f007 fafd 	bl	1a00a32c <mpu_set_compass_sample_rate>
	unsigned char accel_fsr = 0;
1a002d32:	2300      	movs	r3, #0
1a002d34:	71fb      	strb	r3, [r7, #7]
	unsigned short gyro_rate = 0, gyro_fsr = 0, compass_fsr = 0;
1a002d36:	2300      	movs	r3, #0
1a002d38:	80bb      	strh	r3, [r7, #4]
1a002d3a:	2300      	movs	r3, #0
1a002d3c:	807b      	strh	r3, [r7, #2]
1a002d3e:	2300      	movs	r3, #0
1a002d40:	803b      	strh	r3, [r7, #0]
	/* Read back configuration in case it was set improperly. */
	mpu_get_sample_rate(&gyro_rate);
1a002d42:	1d3b      	adds	r3, r7, #4
1a002d44:	4618      	mov	r0, r3
1a002d46:	f007 fa69 	bl	1a00a21c <mpu_get_sample_rate>
	mpu_get_gyro_fsr(&gyro_fsr);
1a002d4a:	1cbb      	adds	r3, r7, #2
1a002d4c:	4618      	mov	r0, r3
1a002d4e:	f007 f8ef 	bl	1a009f30 <mpu_get_gyro_fsr>
	mpu_get_accel_fsr(&accel_fsr);
1a002d52:	1dfb      	adds	r3, r7, #7
1a002d54:	4618      	mov	r0, r3
1a002d56:	f007 f971 	bl	1a00a03c <mpu_get_accel_fsr>
	mpu_get_compass_fsr(&compass_fsr);
1a002d5a:	463b      	mov	r3, r7
1a002d5c:	4618      	mov	r0, r3
1a002d5e:	f008 f943 	bl	1a00afe8 <mpu_get_compass_fsr>

	/* Sync driver configuration with MPL. */
	/* Sample rate expected in microseconds. */
	inv_set_gyro_sample_rate(1000000L / gyro_rate);
1a002d62:	88bb      	ldrh	r3, [r7, #4]
1a002d64:	461a      	mov	r2, r3
1a002d66:	4b4a      	ldr	r3, [pc, #296]	; (1a002e90 <MPU9105Init+0x1fc>)
1a002d68:	fb93 f3f2 	sdiv	r3, r3, r2
1a002d6c:	4618      	mov	r0, r3
1a002d6e:	f004 f81b 	bl	1a006da8 <inv_set_gyro_sample_rate>
	inv_set_accel_sample_rate(1000000L / gyro_rate);
1a002d72:	88bb      	ldrh	r3, [r7, #4]
1a002d74:	461a      	mov	r2, r3
1a002d76:	4b46      	ldr	r3, [pc, #280]	; (1a002e90 <MPU9105Init+0x1fc>)
1a002d78:	fb93 f3f2 	sdiv	r3, r3, r2
1a002d7c:	4618      	mov	r0, r3
1a002d7e:	f004 f839 	bl	1a006df4 <inv_set_accel_sample_rate>

	/* The compass rate is independent of the gyro and accel rates. As long as
	 * inv_set_compass_sample_rate is called with the correct value, the 9-axis
	 * fusion algorithm's compass correction gain will work properly.
	 */
	inv_set_compass_sample_rate(1000000L / gyro_rate);
1a002d82:	88bb      	ldrh	r3, [r7, #4]
1a002d84:	461a      	mov	r2, r3
1a002d86:	4b42      	ldr	r3, [pc, #264]	; (1a002e90 <MPU9105Init+0x1fc>)
1a002d88:	fb93 f3f2 	sdiv	r3, r3, r2
1a002d8c:	4618      	mov	r0, r3
1a002d8e:	f004 f859 	bl	1a006e44 <inv_set_compass_sample_rate>

	/* Set chip-to-body orientation matrix.
	 * Set hardware units to dps/g's/degrees scaling factor.
	 */
	inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long) gyro_fsr << 15);
1a002d92:	4840      	ldr	r0, [pc, #256]	; (1a002e94 <MPU9105Init+0x200>)
1a002d94:	f005 fdce 	bl	1a008934 <inv_orientation_matrix_to_scalar>
1a002d98:	4603      	mov	r3, r0
1a002d9a:	461a      	mov	r2, r3
1a002d9c:	887b      	ldrh	r3, [r7, #2]
1a002d9e:	03db      	lsls	r3, r3, #15
1a002da0:	4619      	mov	r1, r3
1a002da2:	4610      	mov	r0, r2
1a002da4:	f003 fff0 	bl	1a006d88 <inv_set_gyro_orientation_and_scale>
	inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
1a002da8:	483a      	ldr	r0, [pc, #232]	; (1a002e94 <MPU9105Init+0x200>)
1a002daa:	f005 fdc3 	bl	1a008934 <inv_orientation_matrix_to_scalar>
1a002dae:	4603      	mov	r3, r0
1a002db0:	461a      	mov	r2, r3
			(long) accel_fsr << 15);
1a002db2:	79fb      	ldrb	r3, [r7, #7]

	/* Set chip-to-body orientation matrix.
	 * Set hardware units to dps/g's/degrees scaling factor.
	 */
	inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long) gyro_fsr << 15);
	inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
1a002db4:	03db      	lsls	r3, r3, #15
1a002db6:	4619      	mov	r1, r3
1a002db8:	4610      	mov	r0, r2
1a002dba:	f004 f8ed 	bl	1a006f98 <inv_set_accel_orientation_and_scale>
			(long) accel_fsr << 15);
	inv_set_compass_orientation_and_scale(inv_orientation_matrix_to_scalar(compass_pdata.orientation),
1a002dbe:	4836      	ldr	r0, [pc, #216]	; (1a002e98 <MPU9105Init+0x204>)
1a002dc0:	f005 fdb8 	bl	1a008934 <inv_orientation_matrix_to_scalar>
1a002dc4:	4603      	mov	r3, r0
1a002dc6:	461a      	mov	r2, r3
			(long) compass_fsr << 15);
1a002dc8:	883b      	ldrh	r3, [r7, #0]
	 * Set hardware units to dps/g's/degrees scaling factor.
	 */
	inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long) gyro_fsr << 15);
	inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
			(long) accel_fsr << 15);
	inv_set_compass_orientation_and_scale(inv_orientation_matrix_to_scalar(compass_pdata.orientation),
1a002dca:	03db      	lsls	r3, r3, #15
1a002dcc:	4619      	mov	r1, r3
1a002dce:	4610      	mov	r0, r2
1a002dd0:	f004 f8f2 	bl	1a006fb8 <inv_set_compass_orientation_and_scale>
			(long) compass_fsr << 15);
	mpu_set_int_level(0);
1a002dd4:	2000      	movs	r0, #0
1a002dd6:	f007 fd5d 	bl	1a00a894 <mpu_set_int_level>
	mpu_set_int_latched(ENABLE);
1a002dda:	2001      	movs	r0, #1
1a002ddc:	f007 fd6c 	bl	1a00a8b8 <mpu_set_int_latched>

	dmp_load_motion_driver_firmware();
1a002de0:	f008 f914 	bl	1a00b00c <dmp_load_motion_driver_firmware>
	dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));
1a002de4:	482b      	ldr	r0, [pc, #172]	; (1a002e94 <MPU9105Init+0x200>)
1a002de6:	f005 fda5 	bl	1a008934 <inv_orientation_matrix_to_scalar>
1a002dea:	4603      	mov	r3, r0
1a002dec:	4618      	mov	r0, r3
1a002dee:	f008 f91d 	bl	1a00b02c <dmp_set_orientation>
	 * then the interrupts will be at 200Hz even if fifo rate
	 * is set at a different rate. To avoid this issue include the DMP_FEATURE_TAP
	 *
	 *  DMP sensor fusion works only with gyro at +-2000dps and accel +-2G
	 */
	dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
1a002df2:	f240 1073 	movw	r0, #371	; 0x173
1a002df6:	f008 fc93 	bl	1a00b720 <dmp_enable_feature>
	DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |
	DMP_FEATURE_GYRO_CAL);
	dmp_set_fifo_rate(DEFAULT_MPU_HZ);
1a002dfa:	2028      	movs	r0, #40	; 0x28
1a002dfc:	f008 f9fc 	bl	1a00b1f8 <dmp_set_fifo_rate>
	mpu_set_dmp_state(ENABLE);
1a002e00:	2001      	movs	r0, #1
1a002e02:	f007 febf 	bl	1a00ab84 <mpu_set_dmp_state>
	Chip_I2C_SetClockRate(I2C0, FAST_MODE_PLUS_BAUD);
1a002e06:	4922      	ldr	r1, [pc, #136]	; (1a002e90 <MPU9105Init+0x1fc>)
1a002e08:	2000      	movs	r0, #0
1a002e0a:	f00f ff2d 	bl	1a012c68 <Chip_I2C_SetClockRate>
	mpuEnabled = true;
1a002e0e:	4b1c      	ldr	r3, [pc, #112]	; (1a002e80 <MPU9105Init+0x1ec>)
1a002e10:	2201      	movs	r2, #1
1a002e12:	701a      	strb	r2, [r3, #0]

	//Register the sensors
	sensorsTimers[STATUS].refresh = IMUStatusReport;
1a002e14:	4b21      	ldr	r3, [pc, #132]	; (1a002e9c <MPU9105Init+0x208>)
1a002e16:	4a22      	ldr	r2, [pc, #136]	; (1a002ea0 <MPU9105Init+0x20c>)
1a002e18:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	sensorsTimers[RAW_ACCEL].refresh = RawAccelerometerReport;
1a002e1c:	4b1f      	ldr	r3, [pc, #124]	; (1a002e9c <MPU9105Init+0x208>)
1a002e1e:	4a21      	ldr	r2, [pc, #132]	; (1a002ea4 <MPU9105Init+0x210>)
1a002e20:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	sensorsTimers[RAW_GYRO].refresh = RawGyroReport;
1a002e24:	4b1d      	ldr	r3, [pc, #116]	; (1a002e9c <MPU9105Init+0x208>)
1a002e26:	4a20      	ldr	r2, [pc, #128]	; (1a002ea8 <MPU9105Init+0x214>)
1a002e28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	sensorsTimers[RAW_COMPASS].refresh = RawCompassReport;
1a002e2c:	4b1b      	ldr	r3, [pc, #108]	; (1a002e9c <MPU9105Init+0x208>)
1a002e2e:	4a1f      	ldr	r2, [pc, #124]	; (1a002eac <MPU9105Init+0x218>)
1a002e30:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	sensorsTimers[CAL_ACCEL].refresh = CalAccelerometerReport;
1a002e34:	4b19      	ldr	r3, [pc, #100]	; (1a002e9c <MPU9105Init+0x208>)
1a002e36:	4a1e      	ldr	r2, [pc, #120]	; (1a002eb0 <MPU9105Init+0x21c>)
1a002e38:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	sensorsTimers[CAL_GYRO].refresh = CalGyroReport;
1a002e3c:	4b17      	ldr	r3, [pc, #92]	; (1a002e9c <MPU9105Init+0x208>)
1a002e3e:	4a1d      	ldr	r2, [pc, #116]	; (1a002eb4 <MPU9105Init+0x220>)
1a002e40:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	sensorsTimers[CAL_COMPASS].refresh = CalCompassReport;
1a002e44:	4b15      	ldr	r3, [pc, #84]	; (1a002e9c <MPU9105Init+0x208>)
1a002e46:	4a1c      	ldr	r2, [pc, #112]	; (1a002eb8 <MPU9105Init+0x224>)
1a002e48:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	sensorsTimers[QUARTERNION].refresh = QuaternionReport;
1a002e4c:	4b13      	ldr	r3, [pc, #76]	; (1a002e9c <MPU9105Init+0x208>)
1a002e4e:	4a1b      	ldr	r2, [pc, #108]	; (1a002ebc <MPU9105Init+0x228>)
1a002e50:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	sensorsTimers[EULER_ANGLES].refresh = EulerAnglesReport;
1a002e54:	4b11      	ldr	r3, [pc, #68]	; (1a002e9c <MPU9105Init+0x208>)
1a002e56:	4a1a      	ldr	r2, [pc, #104]	; (1a002ec0 <MPU9105Init+0x22c>)
1a002e58:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	sensorsTimers[ROTATION_MATRIX].refresh = RotationMatrixReport;
1a002e5c:	4b0f      	ldr	r3, [pc, #60]	; (1a002e9c <MPU9105Init+0x208>)
1a002e5e:	4a19      	ldr	r2, [pc, #100]	; (1a002ec4 <MPU9105Init+0x230>)
1a002e60:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	sensorsTimers[HEADING].refresh = HeadingReport;
1a002e64:	4b0d      	ldr	r3, [pc, #52]	; (1a002e9c <MPU9105Init+0x208>)
1a002e66:	4a18      	ldr	r2, [pc, #96]	; (1a002ec8 <MPU9105Init+0x234>)
1a002e68:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	sensorsTimers[LINEAR_ACCEL].refresh = LinearAccelReport;
1a002e6c:	4b0b      	ldr	r3, [pc, #44]	; (1a002e9c <MPU9105Init+0x208>)
1a002e6e:	4a17      	ldr	r2, [pc, #92]	; (1a002ecc <MPU9105Init+0x238>)
1a002e70:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
}
1a002e74:	3708      	adds	r7, #8
1a002e76:	46bd      	mov	sp, r7
1a002e78:	bd80      	pop	{r7, pc}
1a002e7a:	bf00      	nop
1a002e7c:	400f4000 	.word	0x400f4000
1a002e80:	1008655c 	.word	0x1008655c
1a002e84:	00061a80 	.word	0x00061a80
1a002e88:	1a012ba1 	.word	0x1a012ba1
1a002e8c:	40086000 	.word	0x40086000
1a002e90:	000f4240 	.word	0x000f4240
1a002e94:	1008601c 	.word	0x1008601c
1a002e98:	10086028 	.word	0x10086028
1a002e9c:	1008756c 	.word	0x1008756c
1a002ea0:	1a002b25 	.word	0x1a002b25
1a002ea4:	1a002ad5 	.word	0x1a002ad5
1a002ea8:	1a002ac5 	.word	0x1a002ac5
1a002eac:	1a002ae5 	.word	0x1a002ae5
1a002eb0:	1a002b05 	.word	0x1a002b05
1a002eb4:	1a002af5 	.word	0x1a002af5
1a002eb8:	1a002b15 	.word	0x1a002b15
1a002ebc:	1a002b35 	.word	0x1a002b35
1a002ec0:	1a002b45 	.word	0x1a002b45
1a002ec4:	1a002b55 	.word	0x1a002b55
1a002ec8:	1a002b65 	.word	0x1a002b65
1a002ecc:	1a002b75 	.word	0x1a002b75

1a002ed0 <i2c_write>:

void disableIMU(void) {

}
int i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t length, uint8_t const *data) {
1a002ed0:	b580      	push	{r7, lr}
1a002ed2:	b088      	sub	sp, #32
1a002ed4:	af00      	add	r7, sp, #0
1a002ed6:	603b      	str	r3, [r7, #0]
1a002ed8:	4603      	mov	r3, r0
1a002eda:	71fb      	strb	r3, [r7, #7]
1a002edc:	460b      	mov	r3, r1
1a002ede:	71bb      	strb	r3, [r7, #6]
1a002ee0:	4613      	mov	r3, r2
1a002ee2:	717b      	strb	r3, [r7, #5]
	uint8_t i2cTxBuffer[20]; //Arbitrary value;
	if (length > sizeof(i2cTxBuffer) - 1) {
1a002ee4:	797b      	ldrb	r3, [r7, #5]
1a002ee6:	2b13      	cmp	r3, #19
1a002ee8:	d902      	bls.n	1a002ef0 <i2c_write+0x20>
		return -1; //This is bad
1a002eea:	f04f 33ff 	mov.w	r3, #4294967295
1a002eee:	e019      	b.n	1a002f24 <i2c_write+0x54>
	}
	i2cTxBuffer[0] = reg_addr;
1a002ef0:	79bb      	ldrb	r3, [r7, #6]
1a002ef2:	733b      	strb	r3, [r7, #12]
	memcpy(i2cTxBuffer + 1, data, length);
1a002ef4:	f107 030c 	add.w	r3, r7, #12
1a002ef8:	3301      	adds	r3, #1
1a002efa:	797a      	ldrb	r2, [r7, #5]
1a002efc:	6839      	ldr	r1, [r7, #0]
1a002efe:	4618      	mov	r0, r3
1a002f00:	f011 fe70 	bl	1a014be4 <memcpy>
	if (!Chip_I2C_MasterSend(I2C0, slave_addr, i2cTxBuffer, length + 1)) {
1a002f04:	797b      	ldrb	r3, [r7, #5]
1a002f06:	3301      	adds	r3, #1
1a002f08:	b2db      	uxtb	r3, r3
1a002f0a:	f107 020c 	add.w	r2, r7, #12
1a002f0e:	79f9      	ldrb	r1, [r7, #7]
1a002f10:	2000      	movs	r0, #0
1a002f12:	f00f ff51 	bl	1a012db8 <Chip_I2C_MasterSend>
1a002f16:	4603      	mov	r3, r0
1a002f18:	2b00      	cmp	r3, #0
1a002f1a:	d102      	bne.n	1a002f22 <i2c_write+0x52>
		return -1; //This is bad
1a002f1c:	f04f 33ff 	mov.w	r3, #4294967295
1a002f20:	e000      	b.n	1a002f24 <i2c_write+0x54>
	}
	return 0;
1a002f22:	2300      	movs	r3, #0
}
1a002f24:	4618      	mov	r0, r3
1a002f26:	3720      	adds	r7, #32
1a002f28:	46bd      	mov	sp, r7
1a002f2a:	bd80      	pop	{r7, pc}

1a002f2c <i2c_read>:

int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t length, uint8_t *data) {
1a002f2c:	b580      	push	{r7, lr}
1a002f2e:	b084      	sub	sp, #16
1a002f30:	af02      	add	r7, sp, #8
1a002f32:	603b      	str	r3, [r7, #0]
1a002f34:	4603      	mov	r3, r0
1a002f36:	71fb      	strb	r3, [r7, #7]
1a002f38:	460b      	mov	r3, r1
1a002f3a:	71bb      	strb	r3, [r7, #6]
1a002f3c:	4613      	mov	r3, r2
1a002f3e:	717b      	strb	r3, [r7, #5]
	if (!Chip_I2C_MasterCmdRead(I2C0, slave_addr, reg_addr, data, length)) {
1a002f40:	797b      	ldrb	r3, [r7, #5]
1a002f42:	79ba      	ldrb	r2, [r7, #6]
1a002f44:	79f9      	ldrb	r1, [r7, #7]
1a002f46:	9300      	str	r3, [sp, #0]
1a002f48:	683b      	ldr	r3, [r7, #0]
1a002f4a:	2000      	movs	r0, #0
1a002f4c:	f00f ff6e 	bl	1a012e2c <Chip_I2C_MasterCmdRead>
1a002f50:	4603      	mov	r3, r0
1a002f52:	2b00      	cmp	r3, #0
1a002f54:	d102      	bne.n	1a002f5c <i2c_read+0x30>
		return -1; //This is bad
1a002f56:	f04f 33ff 	mov.w	r3, #4294967295
1a002f5a:	e000      	b.n	1a002f5e <i2c_read+0x32>
	}
	return 0;
1a002f5c:	2300      	movs	r3, #0
}
1a002f5e:	4618      	mov	r0, r3
1a002f60:	3708      	adds	r7, #8
1a002f62:	46bd      	mov	sp, r7
1a002f64:	bd80      	pop	{r7, pc}
1a002f66:	bf00      	nop

1a002f68 <_MLPrintLog>:

/**
 * Stubs for the MPL library
 */

int _MLPrintLog(int priority, const char *tag, const char *fmt, ...) {
1a002f68:	b40c      	push	{r2, r3}
1a002f6a:	b480      	push	{r7}
1a002f6c:	b083      	sub	sp, #12
1a002f6e:	af00      	add	r7, sp, #0
1a002f70:	6078      	str	r0, [r7, #4]
1a002f72:	6039      	str	r1, [r7, #0]
	return 0;
1a002f74:	2300      	movs	r3, #0
}
1a002f76:	4618      	mov	r0, r3
1a002f78:	370c      	adds	r7, #12
1a002f7a:	46bd      	mov	sp, r7
1a002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002f80:	b002      	add	sp, #8
1a002f82:	4770      	bx	lr

1a002f84 <Chip_SCU_PinMuxSet>:
 * @return	Nothing
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a002f84:	b480      	push	{r7}
1a002f86:	b083      	sub	sp, #12
1a002f88:	af00      	add	r7, sp, #0
1a002f8a:	4603      	mov	r3, r0
1a002f8c:	71fb      	strb	r3, [r7, #7]
1a002f8e:	460b      	mov	r3, r1
1a002f90:	71bb      	strb	r3, [r7, #6]
1a002f92:	4613      	mov	r3, r2
1a002f94:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002f96:	4807      	ldr	r0, [pc, #28]	; (1a002fb4 <Chip_SCU_PinMuxSet+0x30>)
1a002f98:	79f9      	ldrb	r1, [r7, #7]
1a002f9a:	79bb      	ldrb	r3, [r7, #6]
1a002f9c:	88ba      	ldrh	r2, [r7, #4]
1a002f9e:	0149      	lsls	r1, r1, #5
1a002fa0:	440b      	add	r3, r1
1a002fa2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a002fa6:	bf00      	nop
1a002fa8:	370c      	adds	r7, #12
1a002faa:	46bd      	mov	sp, r7
1a002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002fb0:	4770      	bx	lr
1a002fb2:	bf00      	nop
1a002fb4:	40086000 	.word	0x40086000

1a002fb8 <Chip_GPIO_ReadPortBit>:
 * @param	pin		: GPIO pin to read
 * @return	true of the GPIO is high, false if low
 * @note	It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
1a002fb8:	b480      	push	{r7}
1a002fba:	b085      	sub	sp, #20
1a002fbc:	af00      	add	r7, sp, #0
1a002fbe:	60f8      	str	r0, [r7, #12]
1a002fc0:	60b9      	str	r1, [r7, #8]
1a002fc2:	4613      	mov	r3, r2
1a002fc4:	71fb      	strb	r3, [r7, #7]
	return (bool) pGPIO->B[port][pin];
1a002fc6:	79fb      	ldrb	r3, [r7, #7]
1a002fc8:	68f9      	ldr	r1, [r7, #12]
1a002fca:	68ba      	ldr	r2, [r7, #8]
1a002fcc:	0152      	lsls	r2, r2, #5
1a002fce:	440a      	add	r2, r1
1a002fd0:	4413      	add	r3, r2
1a002fd2:	781b      	ldrb	r3, [r3, #0]
1a002fd4:	b2db      	uxtb	r3, r3
1a002fd6:	2b00      	cmp	r3, #0
1a002fd8:	bf14      	ite	ne
1a002fda:	2301      	movne	r3, #1
1a002fdc:	2300      	moveq	r3, #0
1a002fde:	b2db      	uxtb	r3, r3
}
1a002fe0:	4618      	mov	r0, r3
1a002fe2:	3714      	adds	r7, #20
1a002fe4:	46bd      	mov	sp, r7
1a002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002fea:	4770      	bx	lr

1a002fec <Chip_GPIO_SetPinDIRInput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a002fec:	b480      	push	{r7}
1a002fee:	b083      	sub	sp, #12
1a002ff0:	af00      	add	r7, sp, #0
1a002ff2:	6078      	str	r0, [r7, #4]
1a002ff4:	460b      	mov	r3, r1
1a002ff6:	70fb      	strb	r3, [r7, #3]
1a002ff8:	4613      	mov	r3, r2
1a002ffa:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002ffc:	78fa      	ldrb	r2, [r7, #3]
1a002ffe:	78f9      	ldrb	r1, [r7, #3]
1a003000:	687b      	ldr	r3, [r7, #4]
1a003002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a003006:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a00300a:	78bb      	ldrb	r3, [r7, #2]
1a00300c:	2001      	movs	r0, #1
1a00300e:	fa00 f303 	lsl.w	r3, r0, r3
1a003012:	43db      	mvns	r3, r3
1a003014:	4019      	ands	r1, r3
1a003016:	687b      	ldr	r3, [r7, #4]
1a003018:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00301c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a003020:	bf00      	nop
1a003022:	370c      	adds	r7, #12
1a003024:	46bd      	mov	sp, r7
1a003026:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00302a:	4770      	bx	lr

1a00302c <refreshMiniRobSensors>:

#if LOW_POWER_MODE
#warning Sensor readings must be wrong!
#endif

void refreshMiniRobSensors() {
1a00302c:	b580      	push	{r7, lr}
1a00302e:	b082      	sub	sp, #8
1a003030:	af00      	add	r7, sp, #0
	uint32_t currentState;
	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_A_PORT_GPIO, LEFT_SENSOR_A_PIN_GPIO)) {
1a003032:	2202      	movs	r2, #2
1a003034:	2102      	movs	r1, #2
1a003036:	4849      	ldr	r0, [pc, #292]	; (1a00315c <refreshMiniRobSensors+0x130>)
1a003038:	f7ff ffbe 	bl	1a002fb8 <Chip_GPIO_ReadPortBit>
1a00303c:	4603      	mov	r3, r0
1a00303e:	2b00      	cmp	r3, #0
1a003040:	d00c      	beq.n	1a00305c <refreshMiniRobSensors+0x30>
		currentState = Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO) ? 2 : 3;
1a003042:	220c      	movs	r2, #12
1a003044:	2105      	movs	r1, #5
1a003046:	4845      	ldr	r0, [pc, #276]	; (1a00315c <refreshMiniRobSensors+0x130>)
1a003048:	f7ff ffb6 	bl	1a002fb8 <Chip_GPIO_ReadPortBit>
1a00304c:	4603      	mov	r3, r0
1a00304e:	2b00      	cmp	r3, #0
1a003050:	d001      	beq.n	1a003056 <refreshMiniRobSensors+0x2a>
1a003052:	2302      	movs	r3, #2
1a003054:	e000      	b.n	1a003058 <refreshMiniRobSensors+0x2c>
1a003056:	2303      	movs	r3, #3
1a003058:	607b      	str	r3, [r7, #4]
1a00305a:	e006      	b.n	1a00306a <refreshMiniRobSensors+0x3e>
	} else {
		currentState = Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO) ? 1 : 0;
1a00305c:	220c      	movs	r2, #12
1a00305e:	2105      	movs	r1, #5
1a003060:	483e      	ldr	r0, [pc, #248]	; (1a00315c <refreshMiniRobSensors+0x130>)
1a003062:	f7ff ffa9 	bl	1a002fb8 <Chip_GPIO_ReadPortBit>
1a003066:	4603      	mov	r3, r0
1a003068:	607b      	str	r3, [r7, #4]
	}
	if (currentState == ((leftWheel.previousState + 1) & 0x3)) {
1a00306a:	4b3d      	ldr	r3, [pc, #244]	; (1a003160 <refreshMiniRobSensors+0x134>)
1a00306c:	891b      	ldrh	r3, [r3, #8]
1a00306e:	3301      	adds	r3, #1
1a003070:	f003 0203 	and.w	r2, r3, #3
1a003074:	687b      	ldr	r3, [r7, #4]
1a003076:	429a      	cmp	r2, r3
1a003078:	d105      	bne.n	1a003086 <refreshMiniRobSensors+0x5a>
		leftWheel.wheelStatus++;
1a00307a:	4b39      	ldr	r3, [pc, #228]	; (1a003160 <refreshMiniRobSensors+0x134>)
1a00307c:	681b      	ldr	r3, [r3, #0]
1a00307e:	3301      	adds	r3, #1
1a003080:	4a37      	ldr	r2, [pc, #220]	; (1a003160 <refreshMiniRobSensors+0x134>)
1a003082:	6013      	str	r3, [r2, #0]
1a003084:	e019      	b.n	1a0030ba <refreshMiniRobSensors+0x8e>
	} else if (leftWheel.previousState == ((currentState + 1) & 0x3)) {
1a003086:	4b36      	ldr	r3, [pc, #216]	; (1a003160 <refreshMiniRobSensors+0x134>)
1a003088:	891b      	ldrh	r3, [r3, #8]
1a00308a:	461a      	mov	r2, r3
1a00308c:	687b      	ldr	r3, [r7, #4]
1a00308e:	3301      	adds	r3, #1
1a003090:	f003 0303 	and.w	r3, r3, #3
1a003094:	429a      	cmp	r2, r3
1a003096:	d105      	bne.n	1a0030a4 <refreshMiniRobSensors+0x78>
		leftWheel.wheelStatus--;
1a003098:	4b31      	ldr	r3, [pc, #196]	; (1a003160 <refreshMiniRobSensors+0x134>)
1a00309a:	681b      	ldr	r3, [r3, #0]
1a00309c:	3b01      	subs	r3, #1
1a00309e:	4a30      	ldr	r2, [pc, #192]	; (1a003160 <refreshMiniRobSensors+0x134>)
1a0030a0:	6013      	str	r3, [r2, #0]
1a0030a2:	e00a      	b.n	1a0030ba <refreshMiniRobSensors+0x8e>
	} else if (currentState != leftWheel.previousState) {
1a0030a4:	4b2e      	ldr	r3, [pc, #184]	; (1a003160 <refreshMiniRobSensors+0x134>)
1a0030a6:	891b      	ldrh	r3, [r3, #8]
1a0030a8:	461a      	mov	r2, r3
1a0030aa:	687b      	ldr	r3, [r7, #4]
1a0030ac:	429a      	cmp	r2, r3
1a0030ae:	d004      	beq.n	1a0030ba <refreshMiniRobSensors+0x8e>
		leftWheel.errorCount++;
1a0030b0:	4b2b      	ldr	r3, [pc, #172]	; (1a003160 <refreshMiniRobSensors+0x134>)
1a0030b2:	685b      	ldr	r3, [r3, #4]
1a0030b4:	3301      	adds	r3, #1
1a0030b6:	4a2a      	ldr	r2, [pc, #168]	; (1a003160 <refreshMiniRobSensors+0x134>)
1a0030b8:	6053      	str	r3, [r2, #4]
	}
	leftWheel.previousState = currentState;
1a0030ba:	687b      	ldr	r3, [r7, #4]
1a0030bc:	b29a      	uxth	r2, r3
1a0030be:	4b28      	ldr	r3, [pc, #160]	; (1a003160 <refreshMiniRobSensors+0x134>)
1a0030c0:	811a      	strh	r2, [r3, #8]

	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_A_PORT_GPIO, RIGHT_SENSOR_A_PIN_GPIO)) {
1a0030c2:	2205      	movs	r2, #5
1a0030c4:	2102      	movs	r1, #2
1a0030c6:	4825      	ldr	r0, [pc, #148]	; (1a00315c <refreshMiniRobSensors+0x130>)
1a0030c8:	f7ff ff76 	bl	1a002fb8 <Chip_GPIO_ReadPortBit>
1a0030cc:	4603      	mov	r3, r0
1a0030ce:	2b00      	cmp	r3, #0
1a0030d0:	d00c      	beq.n	1a0030ec <refreshMiniRobSensors+0xc0>
		currentState = Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO) ? 2 : 3;
1a0030d2:	2206      	movs	r2, #6
1a0030d4:	2102      	movs	r1, #2
1a0030d6:	4821      	ldr	r0, [pc, #132]	; (1a00315c <refreshMiniRobSensors+0x130>)
1a0030d8:	f7ff ff6e 	bl	1a002fb8 <Chip_GPIO_ReadPortBit>
1a0030dc:	4603      	mov	r3, r0
1a0030de:	2b00      	cmp	r3, #0
1a0030e0:	d001      	beq.n	1a0030e6 <refreshMiniRobSensors+0xba>
1a0030e2:	2302      	movs	r3, #2
1a0030e4:	e000      	b.n	1a0030e8 <refreshMiniRobSensors+0xbc>
1a0030e6:	2303      	movs	r3, #3
1a0030e8:	607b      	str	r3, [r7, #4]
1a0030ea:	e006      	b.n	1a0030fa <refreshMiniRobSensors+0xce>
	} else {
		currentState = Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO) ? 1 : 0;
1a0030ec:	2206      	movs	r2, #6
1a0030ee:	2102      	movs	r1, #2
1a0030f0:	481a      	ldr	r0, [pc, #104]	; (1a00315c <refreshMiniRobSensors+0x130>)
1a0030f2:	f7ff ff61 	bl	1a002fb8 <Chip_GPIO_ReadPortBit>
1a0030f6:	4603      	mov	r3, r0
1a0030f8:	607b      	str	r3, [r7, #4]
	}
	if (currentState == ((rightWheel.previousState + 1) & 0x3)) {
1a0030fa:	4b1a      	ldr	r3, [pc, #104]	; (1a003164 <refreshMiniRobSensors+0x138>)
1a0030fc:	891b      	ldrh	r3, [r3, #8]
1a0030fe:	3301      	adds	r3, #1
1a003100:	f003 0203 	and.w	r2, r3, #3
1a003104:	687b      	ldr	r3, [r7, #4]
1a003106:	429a      	cmp	r2, r3
1a003108:	d105      	bne.n	1a003116 <refreshMiniRobSensors+0xea>
		rightWheel.wheelStatus++;
1a00310a:	4b16      	ldr	r3, [pc, #88]	; (1a003164 <refreshMiniRobSensors+0x138>)
1a00310c:	681b      	ldr	r3, [r3, #0]
1a00310e:	3301      	adds	r3, #1
1a003110:	4a14      	ldr	r2, [pc, #80]	; (1a003164 <refreshMiniRobSensors+0x138>)
1a003112:	6013      	str	r3, [r2, #0]
1a003114:	e019      	b.n	1a00314a <refreshMiniRobSensors+0x11e>
	} else if (rightWheel.previousState == ((currentState + 1) & 0x3)) {
1a003116:	4b13      	ldr	r3, [pc, #76]	; (1a003164 <refreshMiniRobSensors+0x138>)
1a003118:	891b      	ldrh	r3, [r3, #8]
1a00311a:	461a      	mov	r2, r3
1a00311c:	687b      	ldr	r3, [r7, #4]
1a00311e:	3301      	adds	r3, #1
1a003120:	f003 0303 	and.w	r3, r3, #3
1a003124:	429a      	cmp	r2, r3
1a003126:	d105      	bne.n	1a003134 <refreshMiniRobSensors+0x108>
		rightWheel.wheelStatus--;
1a003128:	4b0e      	ldr	r3, [pc, #56]	; (1a003164 <refreshMiniRobSensors+0x138>)
1a00312a:	681b      	ldr	r3, [r3, #0]
1a00312c:	3b01      	subs	r3, #1
1a00312e:	4a0d      	ldr	r2, [pc, #52]	; (1a003164 <refreshMiniRobSensors+0x138>)
1a003130:	6013      	str	r3, [r2, #0]
1a003132:	e00a      	b.n	1a00314a <refreshMiniRobSensors+0x11e>
	} else if (currentState != rightWheel.previousState) {
1a003134:	4b0b      	ldr	r3, [pc, #44]	; (1a003164 <refreshMiniRobSensors+0x138>)
1a003136:	891b      	ldrh	r3, [r3, #8]
1a003138:	461a      	mov	r2, r3
1a00313a:	687b      	ldr	r3, [r7, #4]
1a00313c:	429a      	cmp	r2, r3
1a00313e:	d004      	beq.n	1a00314a <refreshMiniRobSensors+0x11e>
		rightWheel.errorCount++;
1a003140:	4b08      	ldr	r3, [pc, #32]	; (1a003164 <refreshMiniRobSensors+0x138>)
1a003142:	685b      	ldr	r3, [r3, #4]
1a003144:	3301      	adds	r3, #1
1a003146:	4a07      	ldr	r2, [pc, #28]	; (1a003164 <refreshMiniRobSensors+0x138>)
1a003148:	6053      	str	r3, [r2, #4]
	}
	rightWheel.previousState = currentState;
1a00314a:	687b      	ldr	r3, [r7, #4]
1a00314c:	b29a      	uxth	r2, r3
1a00314e:	4b05      	ldr	r3, [pc, #20]	; (1a003164 <refreshMiniRobSensors+0x138>)
1a003150:	811a      	strh	r2, [r3, #8]
}
1a003152:	bf00      	nop
1a003154:	3708      	adds	r7, #8
1a003156:	46bd      	mov	sp, r7
1a003158:	bd80      	pop	{r7, pc}
1a00315a:	bf00      	nop
1a00315c:	400f4000 	.word	0x400f4000
1a003160:	100874d8 	.word	0x100874d8
1a003164:	100874e4 	.word	0x100874e4

1a003168 <reportValues>:

void reportValues() {
1a003168:	b580      	push	{r7, lr}
1a00316a:	af00      	add	r7, sp, #0
	xprintf("-S%d %d %d\n", MOTOR_SENSORS, leftWheel.wheelStatus, rightWheel.wheelStatus);
1a00316c:	4b04      	ldr	r3, [pc, #16]	; (1a003180 <reportValues+0x18>)
1a00316e:	681a      	ldr	r2, [r3, #0]
1a003170:	4b04      	ldr	r3, [pc, #16]	; (1a003184 <reportValues+0x1c>)
1a003172:	681b      	ldr	r3, [r3, #0]
1a003174:	211c      	movs	r1, #28
1a003176:	4804      	ldr	r0, [pc, #16]	; (1a003188 <reportValues+0x20>)
1a003178:	f003 fd84 	bl	1a006c84 <xprintf>
}
1a00317c:	bf00      	nop
1a00317e:	bd80      	pop	{r7, pc}
1a003180:	100874d8 	.word	0x100874d8
1a003184:	100874e4 	.word	0x100874e4
1a003188:	1a0188e8 	.word	0x1a0188e8

1a00318c <MiniRobInit>:

void MiniRobInit() {
1a00318c:	b580      	push	{r7, lr}
1a00318e:	af00      	add	r7, sp, #0
//Register init function
	sensorsTimers[MOTOR_SENSORS].refresh = reportValues;
1a003190:	4b3b      	ldr	r3, [pc, #236]	; (1a003280 <MiniRobInit+0xf4>)
1a003192:	4a3c      	ldr	r2, [pc, #240]	; (1a003284 <MiniRobInit+0xf8>)
1a003194:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240

	leftWheel.wheelStatus = 0;
1a003198:	4b3b      	ldr	r3, [pc, #236]	; (1a003288 <MiniRobInit+0xfc>)
1a00319a:	2200      	movs	r2, #0
1a00319c:	601a      	str	r2, [r3, #0]
	leftWheel.errorCount = 0;
1a00319e:	4b3a      	ldr	r3, [pc, #232]	; (1a003288 <MiniRobInit+0xfc>)
1a0031a0:	2200      	movs	r2, #0
1a0031a2:	605a      	str	r2, [r3, #4]

	rightWheel.wheelStatus = 0;
1a0031a4:	4b39      	ldr	r3, [pc, #228]	; (1a00328c <MiniRobInit+0x100>)
1a0031a6:	2200      	movs	r2, #0
1a0031a8:	601a      	str	r2, [r3, #0]
	rightWheel.errorCount = 0;
1a0031aa:	4b38      	ldr	r3, [pc, #224]	; (1a00328c <MiniRobInit+0x100>)
1a0031ac:	2200      	movs	r2, #0
1a0031ae:	605a      	str	r2, [r3, #4]

	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, RIGHT_SENSOR_A_PORT_GPIO, RIGHT_SENSOR_A_PIN_GPIO);
1a0031b0:	2205      	movs	r2, #5
1a0031b2:	2102      	movs	r1, #2
1a0031b4:	4836      	ldr	r0, [pc, #216]	; (1a003290 <MiniRobInit+0x104>)
1a0031b6:	f7ff ff19 	bl	1a002fec <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(RIGHT_SENSOR_A_PORT, RIGHT_SENSOR_A_PIN, SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | FUNC0);
1a0031ba:	2240      	movs	r2, #64	; 0x40
1a0031bc:	2105      	movs	r1, #5
1a0031be:	2004      	movs	r0, #4
1a0031c0:	f7ff fee0 	bl	1a002f84 <Chip_SCU_PinMuxSet>

	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO);
1a0031c4:	2206      	movs	r2, #6
1a0031c6:	2102      	movs	r1, #2
1a0031c8:	4831      	ldr	r0, [pc, #196]	; (1a003290 <MiniRobInit+0x104>)
1a0031ca:	f7ff ff0f 	bl	1a002fec <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(RIGHT_SENSOR_B_PORT, RIGHT_SENSOR_B_PIN, SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | FUNC0);
1a0031ce:	2240      	movs	r2, #64	; 0x40
1a0031d0:	2106      	movs	r1, #6
1a0031d2:	2004      	movs	r0, #4
1a0031d4:	f7ff fed6 	bl	1a002f84 <Chip_SCU_PinMuxSet>

	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, LEFT_SENSOR_A_PORT_GPIO, LEFT_SENSOR_A_PIN_GPIO);
1a0031d8:	2202      	movs	r2, #2
1a0031da:	2102      	movs	r1, #2
1a0031dc:	482c      	ldr	r0, [pc, #176]	; (1a003290 <MiniRobInit+0x104>)
1a0031de:	f7ff ff05 	bl	1a002fec <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(LEFT_SENSOR_A_PORT, LEFT_SENSOR_A_PIN, SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | FUNC0);
1a0031e2:	2240      	movs	r2, #64	; 0x40
1a0031e4:	2102      	movs	r1, #2
1a0031e6:	2004      	movs	r0, #4
1a0031e8:	f7ff fecc 	bl	1a002f84 <Chip_SCU_PinMuxSet>

	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO);
1a0031ec:	220c      	movs	r2, #12
1a0031ee:	2105      	movs	r1, #5
1a0031f0:	4827      	ldr	r0, [pc, #156]	; (1a003290 <MiniRobInit+0x104>)
1a0031f2:	f7ff fefb 	bl	1a002fec <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(LEFT_SENSOR_B_PORT, LEFT_SENSOR_B_PIN, SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | FUNC0);
1a0031f6:	2240      	movs	r2, #64	; 0x40
1a0031f8:	2108      	movs	r1, #8
1a0031fa:	2004      	movs	r0, #4
1a0031fc:	f7ff fec2 	bl	1a002f84 <Chip_SCU_PinMuxSet>

	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_A_PORT_GPIO, LEFT_SENSOR_A_PIN_GPIO)) {
1a003200:	2202      	movs	r2, #2
1a003202:	2102      	movs	r1, #2
1a003204:	4822      	ldr	r0, [pc, #136]	; (1a003290 <MiniRobInit+0x104>)
1a003206:	f7ff fed7 	bl	1a002fb8 <Chip_GPIO_ReadPortBit>
1a00320a:	4603      	mov	r3, r0
1a00320c:	2b00      	cmp	r3, #0
1a00320e:	d00d      	beq.n	1a00322c <MiniRobInit+0xa0>
		leftWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO) ? 2 : 3;
1a003210:	220c      	movs	r2, #12
1a003212:	2105      	movs	r1, #5
1a003214:	481e      	ldr	r0, [pc, #120]	; (1a003290 <MiniRobInit+0x104>)
1a003216:	f7ff fecf 	bl	1a002fb8 <Chip_GPIO_ReadPortBit>
1a00321a:	4603      	mov	r3, r0

	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO);
	Chip_SCU_PinMuxSet(LEFT_SENSOR_B_PORT, LEFT_SENSOR_B_PIN, SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | FUNC0);

	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_A_PORT_GPIO, LEFT_SENSOR_A_PIN_GPIO)) {
		leftWheel.previousState =
1a00321c:	2b00      	cmp	r3, #0
1a00321e:	d001      	beq.n	1a003224 <MiniRobInit+0x98>
1a003220:	2202      	movs	r2, #2
1a003222:	e000      	b.n	1a003226 <MiniRobInit+0x9a>
1a003224:	2203      	movs	r2, #3
1a003226:	4b18      	ldr	r3, [pc, #96]	; (1a003288 <MiniRobInit+0xfc>)
1a003228:	811a      	strh	r2, [r3, #8]
1a00322a:	e008      	b.n	1a00323e <MiniRobInit+0xb2>
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO) ? 2 : 3;
	} else {
		leftWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO) ? 1 : 0;
1a00322c:	220c      	movs	r2, #12
1a00322e:	2105      	movs	r1, #5
1a003230:	4817      	ldr	r0, [pc, #92]	; (1a003290 <MiniRobInit+0x104>)
1a003232:	f7ff fec1 	bl	1a002fb8 <Chip_GPIO_ReadPortBit>
1a003236:	4603      	mov	r3, r0

	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_A_PORT_GPIO, LEFT_SENSOR_A_PIN_GPIO)) {
		leftWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO) ? 2 : 3;
	} else {
		leftWheel.previousState =
1a003238:	b29a      	uxth	r2, r3
1a00323a:	4b13      	ldr	r3, [pc, #76]	; (1a003288 <MiniRobInit+0xfc>)
1a00323c:	811a      	strh	r2, [r3, #8]
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO) ? 1 : 0;
	}

	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_A_PORT_GPIO, RIGHT_SENSOR_A_PIN_GPIO)) {
1a00323e:	2205      	movs	r2, #5
1a003240:	2102      	movs	r1, #2
1a003242:	4813      	ldr	r0, [pc, #76]	; (1a003290 <MiniRobInit+0x104>)
1a003244:	f7ff feb8 	bl	1a002fb8 <Chip_GPIO_ReadPortBit>
1a003248:	4603      	mov	r3, r0
1a00324a:	2b00      	cmp	r3, #0
1a00324c:	d00d      	beq.n	1a00326a <MiniRobInit+0xde>
		rightWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO) ? 2 : 3;
1a00324e:	2206      	movs	r2, #6
1a003250:	2102      	movs	r1, #2
1a003252:	480f      	ldr	r0, [pc, #60]	; (1a003290 <MiniRobInit+0x104>)
1a003254:	f7ff feb0 	bl	1a002fb8 <Chip_GPIO_ReadPortBit>
1a003258:	4603      	mov	r3, r0
		leftWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, LEFT_SENSOR_B_PORT_GPIO, LEFT_SENSOR_B_PIN_GPIO) ? 1 : 0;
	}

	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_A_PORT_GPIO, RIGHT_SENSOR_A_PIN_GPIO)) {
		rightWheel.previousState =
1a00325a:	2b00      	cmp	r3, #0
1a00325c:	d001      	beq.n	1a003262 <MiniRobInit+0xd6>
1a00325e:	2202      	movs	r2, #2
1a003260:	e000      	b.n	1a003264 <MiniRobInit+0xd8>
1a003262:	2203      	movs	r2, #3
1a003264:	4b09      	ldr	r3, [pc, #36]	; (1a00328c <MiniRobInit+0x100>)
1a003266:	811a      	strh	r2, [r3, #8]
	} else {
		rightWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO) ? 1 : 0;
	}

}
1a003268:	e008      	b.n	1a00327c <MiniRobInit+0xf0>
	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_A_PORT_GPIO, RIGHT_SENSOR_A_PIN_GPIO)) {
		rightWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO) ? 2 : 3;
	} else {
		rightWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO) ? 1 : 0;
1a00326a:	2206      	movs	r2, #6
1a00326c:	2102      	movs	r1, #2
1a00326e:	4808      	ldr	r0, [pc, #32]	; (1a003290 <MiniRobInit+0x104>)
1a003270:	f7ff fea2 	bl	1a002fb8 <Chip_GPIO_ReadPortBit>
1a003274:	4603      	mov	r3, r0

	if (Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_A_PORT_GPIO, RIGHT_SENSOR_A_PIN_GPIO)) {
		rightWheel.previousState =
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO) ? 2 : 3;
	} else {
		rightWheel.previousState =
1a003276:	b29a      	uxth	r2, r3
1a003278:	4b04      	ldr	r3, [pc, #16]	; (1a00328c <MiniRobInit+0x100>)
1a00327a:	811a      	strh	r2, [r3, #8]
				Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, RIGHT_SENSOR_B_PORT_GPIO, RIGHT_SENSOR_B_PIN_GPIO) ? 1 : 0;
	}

}
1a00327c:	bf00      	nop
1a00327e:	bd80      	pop	{r7, pc}
1a003280:	1008756c 	.word	0x1008756c
1a003284:	1a003169 	.word	0x1a003169
1a003288:	100874d8 	.word	0x100874d8
1a00328c:	100874e4 	.word	0x100874e4
1a003290:	400f4000 	.word	0x400f4000

1a003294 <Chip_SCU_PinMuxSet>:
 * @return	Nothing
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a003294:	b480      	push	{r7}
1a003296:	b083      	sub	sp, #12
1a003298:	af00      	add	r7, sp, #0
1a00329a:	4603      	mov	r3, r0
1a00329c:	71fb      	strb	r3, [r7, #7]
1a00329e:	460b      	mov	r3, r1
1a0032a0:	71bb      	strb	r3, [r7, #6]
1a0032a2:	4613      	mov	r3, r2
1a0032a4:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0032a6:	4807      	ldr	r0, [pc, #28]	; (1a0032c4 <Chip_SCU_PinMuxSet+0x30>)
1a0032a8:	79f9      	ldrb	r1, [r7, #7]
1a0032aa:	79bb      	ldrb	r3, [r7, #6]
1a0032ac:	88ba      	ldrh	r2, [r7, #4]
1a0032ae:	0149      	lsls	r1, r1, #5
1a0032b0:	440b      	add	r3, r1
1a0032b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a0032b6:	bf00      	nop
1a0032b8:	370c      	adds	r7, #12
1a0032ba:	46bd      	mov	sp, r7
1a0032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0032c0:	4770      	bx	lr
1a0032c2:	bf00      	nop
1a0032c4:	40086000 	.word	0x40086000

1a0032c8 <Chip_GPIO_SetPinDIROutput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a0032c8:	b480      	push	{r7}
1a0032ca:	b083      	sub	sp, #12
1a0032cc:	af00      	add	r7, sp, #0
1a0032ce:	6078      	str	r0, [r7, #4]
1a0032d0:	460b      	mov	r3, r1
1a0032d2:	70fb      	strb	r3, [r7, #3]
1a0032d4:	4613      	mov	r3, r2
1a0032d6:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] |= 1UL << pin;
1a0032d8:	78fa      	ldrb	r2, [r7, #3]
1a0032da:	78f9      	ldrb	r1, [r7, #3]
1a0032dc:	687b      	ldr	r3, [r7, #4]
1a0032de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a0032e2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a0032e6:	78bb      	ldrb	r3, [r7, #2]
1a0032e8:	2001      	movs	r0, #1
1a0032ea:	fa00 f303 	lsl.w	r3, r0, r3
1a0032ee:	4319      	orrs	r1, r3
1a0032f0:	687b      	ldr	r3, [r7, #4]
1a0032f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0032f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a0032fa:	bf00      	nop
1a0032fc:	370c      	adds	r7, #12
1a0032fe:	46bd      	mov	sp, r7
1a003300:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003304:	4770      	bx	lr
1a003306:	bf00      	nop

1a003308 <Chip_GPIO_SetPinDIRInput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a003308:	b480      	push	{r7}
1a00330a:	b083      	sub	sp, #12
1a00330c:	af00      	add	r7, sp, #0
1a00330e:	6078      	str	r0, [r7, #4]
1a003310:	460b      	mov	r3, r1
1a003312:	70fb      	strb	r3, [r7, #3]
1a003314:	4613      	mov	r3, r2
1a003316:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a003318:	78fa      	ldrb	r2, [r7, #3]
1a00331a:	78f9      	ldrb	r1, [r7, #3]
1a00331c:	687b      	ldr	r3, [r7, #4]
1a00331e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a003322:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a003326:	78bb      	ldrb	r3, [r7, #2]
1a003328:	2001      	movs	r0, #1
1a00332a:	fa00 f303 	lsl.w	r3, r0, r3
1a00332e:	43db      	mvns	r3, r3
1a003330:	4019      	ands	r1, r3
1a003332:	687b      	ldr	r3, [r7, #4]
1a003334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a00333c:	bf00      	nop
1a00333e:	370c      	adds	r7, #12
1a003340:	46bd      	mov	sp, r7
1a003342:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003346:	4770      	bx	lr

1a003348 <Chip_GPIO_SetPinOutHigh>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a003348:	b480      	push	{r7}
1a00334a:	b083      	sub	sp, #12
1a00334c:	af00      	add	r7, sp, #0
1a00334e:	6078      	str	r0, [r7, #4]
1a003350:	460b      	mov	r3, r1
1a003352:	70fb      	strb	r3, [r7, #3]
1a003354:	4613      	mov	r3, r2
1a003356:	70bb      	strb	r3, [r7, #2]
	pGPIO->SET[port] = (1 << pin);
1a003358:	78fa      	ldrb	r2, [r7, #3]
1a00335a:	78bb      	ldrb	r3, [r7, #2]
1a00335c:	2101      	movs	r1, #1
1a00335e:	fa01 f303 	lsl.w	r3, r1, r3
1a003362:	4619      	mov	r1, r3
1a003364:	687b      	ldr	r3, [r7, #4]
1a003366:	f502 6208 	add.w	r2, r2, #2176	; 0x880
1a00336a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a00336e:	bf00      	nop
1a003370:	370c      	adds	r7, #12
1a003372:	46bd      	mov	sp, r7
1a003374:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003378:	4770      	bx	lr
1a00337a:	bf00      	nop

1a00337c <Chip_GPIO_SetPinOutLow>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a00337c:	b480      	push	{r7}
1a00337e:	b083      	sub	sp, #12
1a003380:	af00      	add	r7, sp, #0
1a003382:	6078      	str	r0, [r7, #4]
1a003384:	460b      	mov	r3, r1
1a003386:	70fb      	strb	r3, [r7, #3]
1a003388:	4613      	mov	r3, r2
1a00338a:	70bb      	strb	r3, [r7, #2]
	pGPIO->CLR[port] = (1 << pin);
1a00338c:	78fa      	ldrb	r2, [r7, #3]
1a00338e:	78bb      	ldrb	r3, [r7, #2]
1a003390:	2101      	movs	r1, #1
1a003392:	fa01 f303 	lsl.w	r3, r1, r3
1a003396:	4619      	mov	r1, r3
1a003398:	687b      	ldr	r3, [r7, #4]
1a00339a:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
1a00339e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a0033a2:	bf00      	nop
1a0033a4:	370c      	adds	r7, #12
1a0033a6:	46bd      	mov	sp, r7
1a0033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0033ac:	4770      	bx	lr
1a0033ae:	bf00      	nop

1a0033b0 <Chip_TIMER_Enable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @return	Nothing
 * @note	Enables the timer to start counting.
 */
STATIC INLINE void Chip_TIMER_Enable(LPC_TIMER_T *pTMR)
{
1a0033b0:	b480      	push	{r7}
1a0033b2:	b083      	sub	sp, #12
1a0033b4:	af00      	add	r7, sp, #0
1a0033b6:	6078      	str	r0, [r7, #4]
	pTMR->TCR |= TIMER_ENABLE;
1a0033b8:	687b      	ldr	r3, [r7, #4]
1a0033ba:	685b      	ldr	r3, [r3, #4]
1a0033bc:	f043 0201 	orr.w	r2, r3, #1
1a0033c0:	687b      	ldr	r3, [r7, #4]
1a0033c2:	605a      	str	r2, [r3, #4]
}
1a0033c4:	bf00      	nop
1a0033c6:	370c      	adds	r7, #12
1a0033c8:	46bd      	mov	sp, r7
1a0033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0033ce:	4770      	bx	lr

1a0033d0 <Chip_TIMER_Disable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @return	Nothing
 * @note	Disables the timer to stop counting.
 */
STATIC INLINE void Chip_TIMER_Disable(LPC_TIMER_T *pTMR)
{
1a0033d0:	b480      	push	{r7}
1a0033d2:	b083      	sub	sp, #12
1a0033d4:	af00      	add	r7, sp, #0
1a0033d6:	6078      	str	r0, [r7, #4]
	pTMR->TCR &= ~TIMER_ENABLE;
1a0033d8:	687b      	ldr	r3, [r7, #4]
1a0033da:	685b      	ldr	r3, [r3, #4]
1a0033dc:	f023 0201 	bic.w	r2, r3, #1
1a0033e0:	687b      	ldr	r3, [r7, #4]
1a0033e2:	605a      	str	r2, [r3, #4]
}
1a0033e4:	bf00      	nop
1a0033e6:	370c      	adds	r7, #12
1a0033e8:	46bd      	mov	sp, r7
1a0033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0033ee:	4770      	bx	lr

1a0033f0 <Chip_TIMER_PrescaleSet>:
 * @param	prescale	: Prescale value to set the prescale register to
 * @return	Nothing
 * @note	Sets the prescale count value.
 */
STATIC INLINE void Chip_TIMER_PrescaleSet(LPC_TIMER_T *pTMR, uint32_t prescale)
{
1a0033f0:	b480      	push	{r7}
1a0033f2:	b083      	sub	sp, #12
1a0033f4:	af00      	add	r7, sp, #0
1a0033f6:	6078      	str	r0, [r7, #4]
1a0033f8:	6039      	str	r1, [r7, #0]
	pTMR->PR = prescale;
1a0033fa:	687b      	ldr	r3, [r7, #4]
1a0033fc:	683a      	ldr	r2, [r7, #0]
1a0033fe:	60da      	str	r2, [r3, #12]
}
1a003400:	bf00      	nop
1a003402:	370c      	adds	r7, #12
1a003404:	46bd      	mov	sp, r7
1a003406:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00340a:	4770      	bx	lr

1a00340c <Chip_TIMER_SetMatch>:
 * @param	matchval	: Match value for the selected match count
 * @return	Nothing
 * @note	Sets one of the timer match values.
 */
STATIC INLINE void Chip_TIMER_SetMatch(LPC_TIMER_T *pTMR, int8_t matchnum, uint32_t matchval)
{
1a00340c:	b480      	push	{r7}
1a00340e:	b085      	sub	sp, #20
1a003410:	af00      	add	r7, sp, #0
1a003412:	60f8      	str	r0, [r7, #12]
1a003414:	460b      	mov	r3, r1
1a003416:	607a      	str	r2, [r7, #4]
1a003418:	72fb      	strb	r3, [r7, #11]
	pTMR->MR[matchnum] = matchval;
1a00341a:	f997 200b 	ldrsb.w	r2, [r7, #11]
1a00341e:	68fb      	ldr	r3, [r7, #12]
1a003420:	3206      	adds	r2, #6
1a003422:	6879      	ldr	r1, [r7, #4]
1a003424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a003428:	bf00      	nop
1a00342a:	3714      	adds	r7, #20
1a00342c:	46bd      	mov	sp, r7
1a00342e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003432:	4770      	bx	lr

1a003434 <Chip_TIMER_MatchDisableInt>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchDisableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a003434:	b480      	push	{r7}
1a003436:	b083      	sub	sp, #12
1a003438:	af00      	add	r7, sp, #0
1a00343a:	6078      	str	r0, [r7, #4]
1a00343c:	460b      	mov	r3, r1
1a00343e:	70fb      	strb	r3, [r7, #3]
	pTMR->MCR &= ~TIMER_INT_ON_MATCH(matchnum);
1a003440:	687b      	ldr	r3, [r7, #4]
1a003442:	6959      	ldr	r1, [r3, #20]
1a003444:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a003448:	4613      	mov	r3, r2
1a00344a:	005b      	lsls	r3, r3, #1
1a00344c:	4413      	add	r3, r2
1a00344e:	2201      	movs	r2, #1
1a003450:	fa02 f303 	lsl.w	r3, r2, r3
1a003454:	43db      	mvns	r3, r3
1a003456:	ea01 0203 	and.w	r2, r1, r3
1a00345a:	687b      	ldr	r3, [r7, #4]
1a00345c:	615a      	str	r2, [r3, #20]
}
1a00345e:	bf00      	nop
1a003460:	370c      	adds	r7, #12
1a003462:	46bd      	mov	sp, r7
1a003464:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003468:	4770      	bx	lr
1a00346a:	bf00      	nop

1a00346c <Chip_TIMER_ResetOnMatchEnable>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_ResetOnMatchEnable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a00346c:	b480      	push	{r7}
1a00346e:	b083      	sub	sp, #12
1a003470:	af00      	add	r7, sp, #0
1a003472:	6078      	str	r0, [r7, #4]
1a003474:	460b      	mov	r3, r1
1a003476:	70fb      	strb	r3, [r7, #3]
	pTMR->MCR |= TIMER_RESET_ON_MATCH(matchnum);
1a003478:	687b      	ldr	r3, [r7, #4]
1a00347a:	6959      	ldr	r1, [r3, #20]
1a00347c:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a003480:	4613      	mov	r3, r2
1a003482:	005b      	lsls	r3, r3, #1
1a003484:	4413      	add	r3, r2
1a003486:	3301      	adds	r3, #1
1a003488:	2201      	movs	r2, #1
1a00348a:	fa02 f303 	lsl.w	r3, r2, r3
1a00348e:	ea41 0203 	orr.w	r2, r1, r3
1a003492:	687b      	ldr	r3, [r7, #4]
1a003494:	615a      	str	r2, [r3, #20]
}
1a003496:	bf00      	nop
1a003498:	370c      	adds	r7, #12
1a00349a:	46bd      	mov	sp, r7
1a00349c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0034a0:	4770      	bx	lr
1a0034a2:	bf00      	nop

1a0034a4 <Chip_TIMER_ResetOnMatchDisable>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_ResetOnMatchDisable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a0034a4:	b480      	push	{r7}
1a0034a6:	b083      	sub	sp, #12
1a0034a8:	af00      	add	r7, sp, #0
1a0034aa:	6078      	str	r0, [r7, #4]
1a0034ac:	460b      	mov	r3, r1
1a0034ae:	70fb      	strb	r3, [r7, #3]
	pTMR->MCR &= ~TIMER_RESET_ON_MATCH(matchnum);
1a0034b0:	687b      	ldr	r3, [r7, #4]
1a0034b2:	6959      	ldr	r1, [r3, #20]
1a0034b4:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a0034b8:	4613      	mov	r3, r2
1a0034ba:	005b      	lsls	r3, r3, #1
1a0034bc:	4413      	add	r3, r2
1a0034be:	3301      	adds	r3, #1
1a0034c0:	2201      	movs	r2, #1
1a0034c2:	fa02 f303 	lsl.w	r3, r2, r3
1a0034c6:	43db      	mvns	r3, r3
1a0034c8:	ea01 0203 	and.w	r2, r1, r3
1a0034cc:	687b      	ldr	r3, [r7, #4]
1a0034ce:	615a      	str	r2, [r3, #20]
}
1a0034d0:	bf00      	nop
1a0034d2:	370c      	adds	r7, #12
1a0034d4:	46bd      	mov	sp, r7
1a0034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0034da:	4770      	bx	lr

1a0034dc <Chip_TIMER_StopOnMatchDisable>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_StopOnMatchDisable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a0034dc:	b480      	push	{r7}
1a0034de:	b083      	sub	sp, #12
1a0034e0:	af00      	add	r7, sp, #0
1a0034e2:	6078      	str	r0, [r7, #4]
1a0034e4:	460b      	mov	r3, r1
1a0034e6:	70fb      	strb	r3, [r7, #3]
	pTMR->MCR &= ~TIMER_STOP_ON_MATCH(matchnum);
1a0034e8:	687b      	ldr	r3, [r7, #4]
1a0034ea:	6959      	ldr	r1, [r3, #20]
1a0034ec:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a0034f0:	4613      	mov	r3, r2
1a0034f2:	005b      	lsls	r3, r3, #1
1a0034f4:	4413      	add	r3, r2
1a0034f6:	3302      	adds	r3, #2
1a0034f8:	2201      	movs	r2, #1
1a0034fa:	fa02 f303 	lsl.w	r3, r2, r3
1a0034fe:	43db      	mvns	r3, r3
1a003500:	ea01 0203 	and.w	r2, r1, r3
1a003504:	687b      	ldr	r3, [r7, #4]
1a003506:	615a      	str	r2, [r3, #20]
}
1a003508:	bf00      	nop
1a00350a:	370c      	adds	r7, #12
1a00350c:	46bd      	mov	sp, r7
1a00350e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003512:	4770      	bx	lr

1a003514 <PWMInit>:
	uint16_t timerChannel[2]; /* map output[0-1] to the timer match channel */
	uint16_t enabled[2];/*1 if the output is enable*/
	uint32_t period; /* base period of the timer in microseconds*/
} halTimers[3]; /*one instance for the each of the channels*/

void PWMInit(void) {
1a003514:	b580      	push	{r7, lr}
1a003516:	b082      	sub	sp, #8
1a003518:	af00      	add	r7, sp, #0
	halTimers[CHANNEL_A_TIMER_INDEX].timer = CHANNEL_A_TIMER;
1a00351a:	4ba0      	ldr	r3, [pc, #640]	; (1a00379c <PWMInit+0x288>)
1a00351c:	4aa0      	ldr	r2, [pc, #640]	; (1a0037a0 <PWMInit+0x28c>)
1a00351e:	601a      	str	r2, [r3, #0]
	halTimers[CHANNEL_A_TIMER_INDEX].port[0] = CHANNEL_A_0_PORT;
1a003520:	4b9e      	ldr	r3, [pc, #632]	; (1a00379c <PWMInit+0x288>)
1a003522:	2202      	movs	r2, #2
1a003524:	731a      	strb	r2, [r3, #12]
	halTimers[CHANNEL_A_TIMER_INDEX].port[1] = CHANNEL_A_1_PORT;
1a003526:	4b9d      	ldr	r3, [pc, #628]	; (1a00379c <PWMInit+0x288>)
1a003528:	2202      	movs	r2, #2
1a00352a:	735a      	strb	r2, [r3, #13]
	halTimers[CHANNEL_A_TIMER_INDEX].pin[0] = CHANNEL_A_0_PIN;
1a00352c:	4b9b      	ldr	r3, [pc, #620]	; (1a00379c <PWMInit+0x288>)
1a00352e:	2203      	movs	r2, #3
1a003530:	739a      	strb	r2, [r3, #14]
	halTimers[CHANNEL_A_TIMER_INDEX].pin[1] = CHANNEL_A_1_PIN;
1a003532:	4b9a      	ldr	r3, [pc, #616]	; (1a00379c <PWMInit+0x288>)
1a003534:	2204      	movs	r2, #4
1a003536:	73da      	strb	r2, [r3, #15]
	halTimers[CHANNEL_A_TIMER_INDEX].portGpio[0] = CHANNEL_A_0_PORT_GPIO;
1a003538:	4b98      	ldr	r3, [pc, #608]	; (1a00379c <PWMInit+0x288>)
1a00353a:	2205      	movs	r2, #5
1a00353c:	741a      	strb	r2, [r3, #16]
	halTimers[CHANNEL_A_TIMER_INDEX].portGpio[1] = CHANNEL_A_1_PORT_GPIO;
1a00353e:	4b97      	ldr	r3, [pc, #604]	; (1a00379c <PWMInit+0x288>)
1a003540:	2205      	movs	r2, #5
1a003542:	745a      	strb	r2, [r3, #17]
	halTimers[CHANNEL_A_TIMER_INDEX].pinGpio[0] = CHANNEL_A_0_PIN_GPIO;
1a003544:	4b95      	ldr	r3, [pc, #596]	; (1a00379c <PWMInit+0x288>)
1a003546:	2203      	movs	r2, #3
1a003548:	749a      	strb	r2, [r3, #18]
	halTimers[CHANNEL_A_TIMER_INDEX].pinGpio[1] = CHANNEL_A_1_PIN_GPIO;
1a00354a:	4b94      	ldr	r3, [pc, #592]	; (1a00379c <PWMInit+0x288>)
1a00354c:	2204      	movs	r2, #4
1a00354e:	74da      	strb	r2, [r3, #19]
	halTimers[CHANNEL_A_TIMER_INDEX].timerMode[0] = MD_PUP | FUNC6;
1a003550:	4b92      	ldr	r3, [pc, #584]	; (1a00379c <PWMInit+0x288>)
1a003552:	2206      	movs	r2, #6
1a003554:	831a      	strh	r2, [r3, #24]
	halTimers[CHANNEL_A_TIMER_INDEX].timerMode[1] = MD_PUP | FUNC6;
1a003556:	4b91      	ldr	r3, [pc, #580]	; (1a00379c <PWMInit+0x288>)
1a003558:	2206      	movs	r2, #6
1a00355a:	835a      	strh	r2, [r3, #26]
	halTimers[CHANNEL_A_TIMER_INDEX].gpioMode[0] = MD_PUP | FUNC4;
1a00355c:	4b8f      	ldr	r3, [pc, #572]	; (1a00379c <PWMInit+0x288>)
1a00355e:	2204      	movs	r2, #4
1a003560:	829a      	strh	r2, [r3, #20]
	halTimers[CHANNEL_A_TIMER_INDEX].gpioMode[1] = MD_PUP | FUNC4;
1a003562:	4b8e      	ldr	r3, [pc, #568]	; (1a00379c <PWMInit+0x288>)
1a003564:	2204      	movs	r2, #4
1a003566:	82da      	strh	r2, [r3, #22]
	halTimers[CHANNEL_A_TIMER_INDEX].timerChannel[0] = 0;
1a003568:	4b8c      	ldr	r3, [pc, #560]	; (1a00379c <PWMInit+0x288>)
1a00356a:	2200      	movs	r2, #0
1a00356c:	839a      	strh	r2, [r3, #28]
	halTimers[CHANNEL_A_TIMER_INDEX].timerChannel[1] = 1;
1a00356e:	4b8b      	ldr	r3, [pc, #556]	; (1a00379c <PWMInit+0x288>)
1a003570:	2201      	movs	r2, #1
1a003572:	83da      	strh	r2, [r3, #30]
	halTimers[CHANNEL_A_TIMER_INDEX].witdh[0] = 0;
1a003574:	4b89      	ldr	r3, [pc, #548]	; (1a00379c <PWMInit+0x288>)
1a003576:	2200      	movs	r2, #0
1a003578:	605a      	str	r2, [r3, #4]
	halTimers[CHANNEL_A_TIMER_INDEX].witdh[1] = 0;
1a00357a:	4b88      	ldr	r3, [pc, #544]	; (1a00379c <PWMInit+0x288>)
1a00357c:	2200      	movs	r2, #0
1a00357e:	609a      	str	r2, [r3, #8]
	halTimers[CHANNEL_A_TIMER_INDEX].enabled[0] = 0;
1a003580:	4b86      	ldr	r3, [pc, #536]	; (1a00379c <PWMInit+0x288>)
1a003582:	2200      	movs	r2, #0
1a003584:	841a      	strh	r2, [r3, #32]
	halTimers[CHANNEL_A_TIMER_INDEX].enabled[1] = 0;
1a003586:	4b85      	ldr	r3, [pc, #532]	; (1a00379c <PWMInit+0x288>)
1a003588:	2200      	movs	r2, #0
1a00358a:	845a      	strh	r2, [r3, #34]	; 0x22
	halTimers[CHANNEL_A_TIMER_INDEX].period = 0;
1a00358c:	4b83      	ldr	r3, [pc, #524]	; (1a00379c <PWMInit+0x288>)
1a00358e:	2200      	movs	r2, #0
1a003590:	625a      	str	r2, [r3, #36]	; 0x24
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, CHANNEL_A_0_PORT_GPIO, CHANNEL_A_0_PIN_GPIO);
1a003592:	2203      	movs	r2, #3
1a003594:	2105      	movs	r1, #5
1a003596:	4883      	ldr	r0, [pc, #524]	; (1a0037a4 <PWMInit+0x290>)
1a003598:	f7ff fef0 	bl	1a00337c <Chip_GPIO_SetPinOutLow>
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, CHANNEL_A_1_PORT_GPIO, CHANNEL_A_1_PIN_GPIO);
1a00359c:	2204      	movs	r2, #4
1a00359e:	2105      	movs	r1, #5
1a0035a0:	4880      	ldr	r0, [pc, #512]	; (1a0037a4 <PWMInit+0x290>)
1a0035a2:	f7ff feeb 	bl	1a00337c <Chip_GPIO_SetPinOutLow>
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_A_0_PORT_GPIO, CHANNEL_A_0_PIN_GPIO);
1a0035a6:	2203      	movs	r2, #3
1a0035a8:	2105      	movs	r1, #5
1a0035aa:	487e      	ldr	r0, [pc, #504]	; (1a0037a4 <PWMInit+0x290>)
1a0035ac:	f7ff feac 	bl	1a003308 <Chip_GPIO_SetPinDIRInput>
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_A_1_PORT_GPIO, CHANNEL_A_1_PIN_GPIO);
1a0035b0:	2204      	movs	r2, #4
1a0035b2:	2105      	movs	r1, #5
1a0035b4:	487b      	ldr	r0, [pc, #492]	; (1a0037a4 <PWMInit+0x290>)
1a0035b6:	f7ff fea7 	bl	1a003308 <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(CHANNEL_A_0_PORT, CHANNEL_A_0_PIN, halTimers[CHANNEL_A_TIMER_INDEX].gpioMode[0]);
1a0035ba:	4b78      	ldr	r3, [pc, #480]	; (1a00379c <PWMInit+0x288>)
1a0035bc:	8a9b      	ldrh	r3, [r3, #20]
1a0035be:	461a      	mov	r2, r3
1a0035c0:	2103      	movs	r1, #3
1a0035c2:	2002      	movs	r0, #2
1a0035c4:	f7ff fe66 	bl	1a003294 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(CHANNEL_A_1_PORT, CHANNEL_A_1_PIN, halTimers[CHANNEL_A_TIMER_INDEX].gpioMode[1]);
1a0035c8:	4b74      	ldr	r3, [pc, #464]	; (1a00379c <PWMInit+0x288>)
1a0035ca:	8adb      	ldrh	r3, [r3, #22]
1a0035cc:	461a      	mov	r2, r3
1a0035ce:	2104      	movs	r1, #4
1a0035d0:	2002      	movs	r0, #2
1a0035d2:	f7ff fe5f 	bl	1a003294 <Chip_SCU_PinMuxSet>

	halTimers[CHANNEL_B_TIMER_INDEX].timer = CHANNEL_B_TIMER;
1a0035d6:	4b71      	ldr	r3, [pc, #452]	; (1a00379c <PWMInit+0x288>)
1a0035d8:	4a73      	ldr	r2, [pc, #460]	; (1a0037a8 <PWMInit+0x294>)
1a0035da:	629a      	str	r2, [r3, #40]	; 0x28
	halTimers[CHANNEL_B_TIMER_INDEX].port[0] = CHANNEL_B_0_PORT;
1a0035dc:	4b6f      	ldr	r3, [pc, #444]	; (1a00379c <PWMInit+0x288>)
1a0035de:	2206      	movs	r2, #6
1a0035e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	halTimers[CHANNEL_B_TIMER_INDEX].port[1] = CHANNEL_B_1_PORT;
1a0035e4:	4b6d      	ldr	r3, [pc, #436]	; (1a00379c <PWMInit+0x288>)
1a0035e6:	2206      	movs	r2, #6
1a0035e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	halTimers[CHANNEL_B_TIMER_INDEX].pin[0] = CHANNEL_B_0_PIN;
1a0035ec:	4b6b      	ldr	r3, [pc, #428]	; (1a00379c <PWMInit+0x288>)
1a0035ee:	2207      	movs	r2, #7
1a0035f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	halTimers[CHANNEL_B_TIMER_INDEX].pin[1] = CHANNEL_B_1_PIN;
1a0035f4:	4b69      	ldr	r3, [pc, #420]	; (1a00379c <PWMInit+0x288>)
1a0035f6:	2208      	movs	r2, #8
1a0035f8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	halTimers[CHANNEL_B_TIMER_INDEX].portGpio[0] = CHANNEL_B_0_PORT_GPIO;
1a0035fc:	4b67      	ldr	r3, [pc, #412]	; (1a00379c <PWMInit+0x288>)
1a0035fe:	2205      	movs	r2, #5
1a003600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	halTimers[CHANNEL_B_TIMER_INDEX].portGpio[1] = CHANNEL_B_1_PORT_GPIO;
1a003604:	4b65      	ldr	r3, [pc, #404]	; (1a00379c <PWMInit+0x288>)
1a003606:	2205      	movs	r2, #5
1a003608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	halTimers[CHANNEL_B_TIMER_INDEX].pinGpio[0] = CHANNEL_B_0_PIN_GPIO;
1a00360c:	4b63      	ldr	r3, [pc, #396]	; (1a00379c <PWMInit+0x288>)
1a00360e:	220f      	movs	r2, #15
1a003610:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	halTimers[CHANNEL_B_TIMER_INDEX].pinGpio[1] = CHANNEL_B_1_PIN_GPIO;
1a003614:	4b61      	ldr	r3, [pc, #388]	; (1a00379c <PWMInit+0x288>)
1a003616:	2210      	movs	r2, #16
1a003618:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	halTimers[CHANNEL_B_TIMER_INDEX].timerMode[0] = MD_PUP | FUNC5;
1a00361c:	4b5f      	ldr	r3, [pc, #380]	; (1a00379c <PWMInit+0x288>)
1a00361e:	2205      	movs	r2, #5
1a003620:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	halTimers[CHANNEL_B_TIMER_INDEX].timerMode[1] = MD_PUP | FUNC5;
1a003624:	4b5d      	ldr	r3, [pc, #372]	; (1a00379c <PWMInit+0x288>)
1a003626:	2205      	movs	r2, #5
1a003628:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	halTimers[CHANNEL_B_TIMER_INDEX].gpioMode[0] = MD_PUP | FUNC4;
1a00362c:	4b5b      	ldr	r3, [pc, #364]	; (1a00379c <PWMInit+0x288>)
1a00362e:	2204      	movs	r2, #4
1a003630:	879a      	strh	r2, [r3, #60]	; 0x3c
	halTimers[CHANNEL_B_TIMER_INDEX].gpioMode[1] = MD_PUP | FUNC4;
1a003632:	4b5a      	ldr	r3, [pc, #360]	; (1a00379c <PWMInit+0x288>)
1a003634:	2204      	movs	r2, #4
1a003636:	87da      	strh	r2, [r3, #62]	; 0x3e
	halTimers[CHANNEL_B_TIMER_INDEX].timerChannel[0] = 0;
1a003638:	4b58      	ldr	r3, [pc, #352]	; (1a00379c <PWMInit+0x288>)
1a00363a:	2200      	movs	r2, #0
1a00363c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	halTimers[CHANNEL_B_TIMER_INDEX].timerChannel[1] = 1;
1a003640:	4b56      	ldr	r3, [pc, #344]	; (1a00379c <PWMInit+0x288>)
1a003642:	2201      	movs	r2, #1
1a003644:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	halTimers[CHANNEL_B_TIMER_INDEX].witdh[0] = 0;
1a003648:	4b54      	ldr	r3, [pc, #336]	; (1a00379c <PWMInit+0x288>)
1a00364a:	2200      	movs	r2, #0
1a00364c:	62da      	str	r2, [r3, #44]	; 0x2c
	halTimers[CHANNEL_B_TIMER_INDEX].witdh[1] = 0;
1a00364e:	4b53      	ldr	r3, [pc, #332]	; (1a00379c <PWMInit+0x288>)
1a003650:	2200      	movs	r2, #0
1a003652:	631a      	str	r2, [r3, #48]	; 0x30
	halTimers[CHANNEL_B_TIMER_INDEX].enabled[0] = 0;
1a003654:	4b51      	ldr	r3, [pc, #324]	; (1a00379c <PWMInit+0x288>)
1a003656:	2200      	movs	r2, #0
1a003658:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	halTimers[CHANNEL_B_TIMER_INDEX].enabled[1] = 0;
1a00365c:	4b4f      	ldr	r3, [pc, #316]	; (1a00379c <PWMInit+0x288>)
1a00365e:	2200      	movs	r2, #0
1a003660:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	halTimers[CHANNEL_B_TIMER_INDEX].period = 0;
1a003664:	4b4d      	ldr	r3, [pc, #308]	; (1a00379c <PWMInit+0x288>)
1a003666:	2200      	movs	r2, #0
1a003668:	64da      	str	r2, [r3, #76]	; 0x4c
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, CHANNEL_B_0_PORT_GPIO, CHANNEL_B_0_PIN_GPIO);
1a00366a:	220f      	movs	r2, #15
1a00366c:	2105      	movs	r1, #5
1a00366e:	484d      	ldr	r0, [pc, #308]	; (1a0037a4 <PWMInit+0x290>)
1a003670:	f7ff fe84 	bl	1a00337c <Chip_GPIO_SetPinOutLow>
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, CHANNEL_B_1_PORT_GPIO, CHANNEL_B_1_PIN_GPIO);
1a003674:	2210      	movs	r2, #16
1a003676:	2105      	movs	r1, #5
1a003678:	484a      	ldr	r0, [pc, #296]	; (1a0037a4 <PWMInit+0x290>)
1a00367a:	f7ff fe7f 	bl	1a00337c <Chip_GPIO_SetPinOutLow>
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_B_0_PORT_GPIO, CHANNEL_B_0_PIN_GPIO);
1a00367e:	220f      	movs	r2, #15
1a003680:	2105      	movs	r1, #5
1a003682:	4848      	ldr	r0, [pc, #288]	; (1a0037a4 <PWMInit+0x290>)
1a003684:	f7ff fe40 	bl	1a003308 <Chip_GPIO_SetPinDIRInput>
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_B_1_PORT_GPIO, CHANNEL_B_1_PIN_GPIO);
1a003688:	2210      	movs	r2, #16
1a00368a:	2105      	movs	r1, #5
1a00368c:	4845      	ldr	r0, [pc, #276]	; (1a0037a4 <PWMInit+0x290>)
1a00368e:	f7ff fe3b 	bl	1a003308 <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(CHANNEL_B_0_PORT, CHANNEL_B_0_PIN, halTimers[CHANNEL_B_TIMER_INDEX].gpioMode[0]);
1a003692:	4b42      	ldr	r3, [pc, #264]	; (1a00379c <PWMInit+0x288>)
1a003694:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
1a003696:	461a      	mov	r2, r3
1a003698:	2107      	movs	r1, #7
1a00369a:	2006      	movs	r0, #6
1a00369c:	f7ff fdfa 	bl	1a003294 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(CHANNEL_B_1_PORT, CHANNEL_B_1_PIN, halTimers[CHANNEL_B_TIMER_INDEX].gpioMode[1]);
1a0036a0:	4b3e      	ldr	r3, [pc, #248]	; (1a00379c <PWMInit+0x288>)
1a0036a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
1a0036a4:	461a      	mov	r2, r3
1a0036a6:	2108      	movs	r1, #8
1a0036a8:	2006      	movs	r0, #6
1a0036aa:	f7ff fdf3 	bl	1a003294 <Chip_SCU_PinMuxSet>

	halTimers[CHANNEL_C_TIMER_INDEX].timer = CHANNEL_C_TIMER;
1a0036ae:	4b3b      	ldr	r3, [pc, #236]	; (1a00379c <PWMInit+0x288>)
1a0036b0:	4a3e      	ldr	r2, [pc, #248]	; (1a0037ac <PWMInit+0x298>)
1a0036b2:	651a      	str	r2, [r3, #80]	; 0x50
	halTimers[CHANNEL_C_TIMER_INDEX].port[0] = CHANNEL_C_0_PORT;
1a0036b4:	4b39      	ldr	r3, [pc, #228]	; (1a00379c <PWMInit+0x288>)
1a0036b6:	2202      	movs	r2, #2
1a0036b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	halTimers[CHANNEL_C_TIMER_INDEX].port[1] = CHANNEL_C_1_PORT;
1a0036bc:	4b37      	ldr	r3, [pc, #220]	; (1a00379c <PWMInit+0x288>)
1a0036be:	2202      	movs	r2, #2
1a0036c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	halTimers[CHANNEL_C_TIMER_INDEX].pin[0] = CHANNEL_C_0_PIN;
1a0036c4:	4b35      	ldr	r3, [pc, #212]	; (1a00379c <PWMInit+0x288>)
1a0036c6:	2208      	movs	r2, #8
1a0036c8:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	halTimers[CHANNEL_C_TIMER_INDEX].pin[1] = CHANNEL_C_1_PIN;
1a0036cc:	4b33      	ldr	r3, [pc, #204]	; (1a00379c <PWMInit+0x288>)
1a0036ce:	2209      	movs	r2, #9
1a0036d0:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	halTimers[CHANNEL_C_TIMER_INDEX].portGpio[0] = CHANNEL_C_0_PORT_GPIO;
1a0036d4:	4b31      	ldr	r3, [pc, #196]	; (1a00379c <PWMInit+0x288>)
1a0036d6:	2205      	movs	r2, #5
1a0036d8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	halTimers[CHANNEL_C_TIMER_INDEX].portGpio[1] = CHANNEL_C_1_PORT_GPIO;
1a0036dc:	4b2f      	ldr	r3, [pc, #188]	; (1a00379c <PWMInit+0x288>)
1a0036de:	2201      	movs	r2, #1
1a0036e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	halTimers[CHANNEL_C_TIMER_INDEX].pinGpio[0] = CHANNEL_C_0_PIN_GPIO;
1a0036e4:	4b2d      	ldr	r3, [pc, #180]	; (1a00379c <PWMInit+0x288>)
1a0036e6:	2207      	movs	r2, #7
1a0036e8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	halTimers[CHANNEL_C_TIMER_INDEX].pinGpio[1] = CHANNEL_C_1_PIN_GPIO;
1a0036ec:	4b2b      	ldr	r3, [pc, #172]	; (1a00379c <PWMInit+0x288>)
1a0036ee:	220a      	movs	r2, #10
1a0036f0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	halTimers[CHANNEL_C_TIMER_INDEX].timerMode[0] = MD_PUP | FUNC1;
1a0036f4:	4b29      	ldr	r3, [pc, #164]	; (1a00379c <PWMInit+0x288>)
1a0036f6:	2201      	movs	r2, #1
1a0036f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	halTimers[CHANNEL_C_TIMER_INDEX].timerMode[1] = MD_PUP | FUNC1;
1a0036fc:	4b27      	ldr	r3, [pc, #156]	; (1a00379c <PWMInit+0x288>)
1a0036fe:	2201      	movs	r2, #1
1a003700:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	halTimers[CHANNEL_C_TIMER_INDEX].gpioMode[0] = MD_PUP | FUNC4;
1a003704:	4b25      	ldr	r3, [pc, #148]	; (1a00379c <PWMInit+0x288>)
1a003706:	2204      	movs	r2, #4
1a003708:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	halTimers[CHANNEL_C_TIMER_INDEX].gpioMode[1] = MD_PUP | FUNC0;
1a00370c:	4b23      	ldr	r3, [pc, #140]	; (1a00379c <PWMInit+0x288>)
1a00370e:	2200      	movs	r2, #0
1a003710:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	halTimers[CHANNEL_C_TIMER_INDEX].timerChannel[0] = 0;
1a003714:	4b21      	ldr	r3, [pc, #132]	; (1a00379c <PWMInit+0x288>)
1a003716:	2200      	movs	r2, #0
1a003718:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	halTimers[CHANNEL_C_TIMER_INDEX].timerChannel[1] = 3; // Special mapping for the Channel C_1
1a00371c:	4b1f      	ldr	r3, [pc, #124]	; (1a00379c <PWMInit+0x288>)
1a00371e:	2203      	movs	r2, #3
1a003720:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	halTimers[CHANNEL_C_TIMER_INDEX].witdh[0] = 0;
1a003724:	4b1d      	ldr	r3, [pc, #116]	; (1a00379c <PWMInit+0x288>)
1a003726:	2200      	movs	r2, #0
1a003728:	655a      	str	r2, [r3, #84]	; 0x54
	halTimers[CHANNEL_C_TIMER_INDEX].witdh[1] = 0;
1a00372a:	4b1c      	ldr	r3, [pc, #112]	; (1a00379c <PWMInit+0x288>)
1a00372c:	2200      	movs	r2, #0
1a00372e:	659a      	str	r2, [r3, #88]	; 0x58
	halTimers[CHANNEL_C_TIMER_INDEX].enabled[0] = 0;
1a003730:	4b1a      	ldr	r3, [pc, #104]	; (1a00379c <PWMInit+0x288>)
1a003732:	2200      	movs	r2, #0
1a003734:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	halTimers[CHANNEL_C_TIMER_INDEX].enabled[1] = 0;
1a003738:	4b18      	ldr	r3, [pc, #96]	; (1a00379c <PWMInit+0x288>)
1a00373a:	2200      	movs	r2, #0
1a00373c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	halTimers[CHANNEL_C_TIMER_INDEX].period = 0;
1a003740:	4b16      	ldr	r3, [pc, #88]	; (1a00379c <PWMInit+0x288>)
1a003742:	2200      	movs	r2, #0
1a003744:	675a      	str	r2, [r3, #116]	; 0x74
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, CHANNEL_C_0_PORT_GPIO, CHANNEL_C_0_PIN_GPIO);
1a003746:	2207      	movs	r2, #7
1a003748:	2105      	movs	r1, #5
1a00374a:	4816      	ldr	r0, [pc, #88]	; (1a0037a4 <PWMInit+0x290>)
1a00374c:	f7ff fe16 	bl	1a00337c <Chip_GPIO_SetPinOutLow>
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, CHANNEL_C_1_PORT_GPIO, CHANNEL_C_1_PIN_GPIO);
1a003750:	220a      	movs	r2, #10
1a003752:	2101      	movs	r1, #1
1a003754:	4813      	ldr	r0, [pc, #76]	; (1a0037a4 <PWMInit+0x290>)
1a003756:	f7ff fe11 	bl	1a00337c <Chip_GPIO_SetPinOutLow>
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_C_0_PORT_GPIO, CHANNEL_C_0_PIN_GPIO);
1a00375a:	2207      	movs	r2, #7
1a00375c:	2105      	movs	r1, #5
1a00375e:	4811      	ldr	r0, [pc, #68]	; (1a0037a4 <PWMInit+0x290>)
1a003760:	f7ff fdd2 	bl	1a003308 <Chip_GPIO_SetPinDIRInput>
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_C_1_PORT_GPIO, CHANNEL_C_1_PIN_GPIO);
1a003764:	220a      	movs	r2, #10
1a003766:	2101      	movs	r1, #1
1a003768:	480e      	ldr	r0, [pc, #56]	; (1a0037a4 <PWMInit+0x290>)
1a00376a:	f7ff fdcd 	bl	1a003308 <Chip_GPIO_SetPinDIRInput>
	Chip_SCU_PinMuxSet(CHANNEL_C_0_PORT, CHANNEL_C_0_PIN, halTimers[CHANNEL_C_TIMER_INDEX].gpioMode[0]);
1a00376e:	4b0b      	ldr	r3, [pc, #44]	; (1a00379c <PWMInit+0x288>)
1a003770:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
1a003774:	461a      	mov	r2, r3
1a003776:	2108      	movs	r1, #8
1a003778:	2002      	movs	r0, #2
1a00377a:	f7ff fd8b 	bl	1a003294 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(CHANNEL_C_1_PORT, CHANNEL_C_1_PIN, halTimers[CHANNEL_C_TIMER_INDEX].gpioMode[1]);
1a00377e:	4b07      	ldr	r3, [pc, #28]	; (1a00379c <PWMInit+0x288>)
1a003780:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
1a003784:	461a      	mov	r2, r3
1a003786:	2109      	movs	r1, #9
1a003788:	2002      	movs	r0, #2
1a00378a:	f7ff fd83 	bl	1a003294 <Chip_SCU_PinMuxSet>
	for (int i = 0; i < 3; ++i) {
1a00378e:	2300      	movs	r3, #0
1a003790:	607b      	str	r3, [r7, #4]
1a003792:	e07b      	b.n	1a00388c <PWMInit+0x378>
		for (int j = 0; j < 2; ++j) {
1a003794:	2300      	movs	r3, #0
1a003796:	603b      	str	r3, [r7, #0]
1a003798:	e072      	b.n	1a003880 <PWMInit+0x36c>
1a00379a:	bf00      	nop
1a00379c:	100874f0 	.word	0x100874f0
1a0037a0:	400c4000 	.word	0x400c4000
1a0037a4:	400f4000 	.word	0x400f4000
1a0037a8:	400c3000 	.word	0x400c3000
1a0037ac:	40084000 	.word	0x40084000
			Chip_TIMER_ResetOnMatchDisable(halTimers[i].timer, halTimers[i].timerChannel[j]);
1a0037b0:	493a      	ldr	r1, [pc, #232]	; (1a00389c <PWMInit+0x388>)
1a0037b2:	687a      	ldr	r2, [r7, #4]
1a0037b4:	4613      	mov	r3, r2
1a0037b6:	009b      	lsls	r3, r3, #2
1a0037b8:	4413      	add	r3, r2
1a0037ba:	00db      	lsls	r3, r3, #3
1a0037bc:	440b      	add	r3, r1
1a0037be:	6818      	ldr	r0, [r3, #0]
1a0037c0:	4936      	ldr	r1, [pc, #216]	; (1a00389c <PWMInit+0x388>)
1a0037c2:	687a      	ldr	r2, [r7, #4]
1a0037c4:	4613      	mov	r3, r2
1a0037c6:	009b      	lsls	r3, r3, #2
1a0037c8:	4413      	add	r3, r2
1a0037ca:	009b      	lsls	r3, r3, #2
1a0037cc:	683a      	ldr	r2, [r7, #0]
1a0037ce:	4413      	add	r3, r2
1a0037d0:	330c      	adds	r3, #12
1a0037d2:	005b      	lsls	r3, r3, #1
1a0037d4:	440b      	add	r3, r1
1a0037d6:	889b      	ldrh	r3, [r3, #4]
1a0037d8:	b2db      	uxtb	r3, r3
1a0037da:	b25b      	sxtb	r3, r3
1a0037dc:	4619      	mov	r1, r3
1a0037de:	f7ff fe61 	bl	1a0034a4 <Chip_TIMER_ResetOnMatchDisable>
			Chip_TIMER_StopOnMatchDisable(halTimers[i].timer, halTimers[i].timerChannel[j]);
1a0037e2:	492e      	ldr	r1, [pc, #184]	; (1a00389c <PWMInit+0x388>)
1a0037e4:	687a      	ldr	r2, [r7, #4]
1a0037e6:	4613      	mov	r3, r2
1a0037e8:	009b      	lsls	r3, r3, #2
1a0037ea:	4413      	add	r3, r2
1a0037ec:	00db      	lsls	r3, r3, #3
1a0037ee:	440b      	add	r3, r1
1a0037f0:	6818      	ldr	r0, [r3, #0]
1a0037f2:	492a      	ldr	r1, [pc, #168]	; (1a00389c <PWMInit+0x388>)
1a0037f4:	687a      	ldr	r2, [r7, #4]
1a0037f6:	4613      	mov	r3, r2
1a0037f8:	009b      	lsls	r3, r3, #2
1a0037fa:	4413      	add	r3, r2
1a0037fc:	009b      	lsls	r3, r3, #2
1a0037fe:	683a      	ldr	r2, [r7, #0]
1a003800:	4413      	add	r3, r2
1a003802:	330c      	adds	r3, #12
1a003804:	005b      	lsls	r3, r3, #1
1a003806:	440b      	add	r3, r1
1a003808:	889b      	ldrh	r3, [r3, #4]
1a00380a:	b2db      	uxtb	r3, r3
1a00380c:	b25b      	sxtb	r3, r3
1a00380e:	4619      	mov	r1, r3
1a003810:	f7ff fe64 	bl	1a0034dc <Chip_TIMER_StopOnMatchDisable>
			Chip_TIMER_MatchDisableInt(halTimers[i].timer, halTimers[i].timerChannel[j]);
1a003814:	4921      	ldr	r1, [pc, #132]	; (1a00389c <PWMInit+0x388>)
1a003816:	687a      	ldr	r2, [r7, #4]
1a003818:	4613      	mov	r3, r2
1a00381a:	009b      	lsls	r3, r3, #2
1a00381c:	4413      	add	r3, r2
1a00381e:	00db      	lsls	r3, r3, #3
1a003820:	440b      	add	r3, r1
1a003822:	6818      	ldr	r0, [r3, #0]
1a003824:	491d      	ldr	r1, [pc, #116]	; (1a00389c <PWMInit+0x388>)
1a003826:	687a      	ldr	r2, [r7, #4]
1a003828:	4613      	mov	r3, r2
1a00382a:	009b      	lsls	r3, r3, #2
1a00382c:	4413      	add	r3, r2
1a00382e:	009b      	lsls	r3, r3, #2
1a003830:	683a      	ldr	r2, [r7, #0]
1a003832:	4413      	add	r3, r2
1a003834:	330c      	adds	r3, #12
1a003836:	005b      	lsls	r3, r3, #1
1a003838:	440b      	add	r3, r1
1a00383a:	889b      	ldrh	r3, [r3, #4]
1a00383c:	b2db      	uxtb	r3, r3
1a00383e:	b25b      	sxtb	r3, r3
1a003840:	4619      	mov	r1, r3
1a003842:	f7ff fdf7 	bl	1a003434 <Chip_TIMER_MatchDisableInt>
			Chip_TIMER_ExtMatchControlSet(halTimers[i].timer, 1, TIMER_EXTMATCH_CLEAR, halTimers[i].timerChannel[j]);
1a003846:	4915      	ldr	r1, [pc, #84]	; (1a00389c <PWMInit+0x388>)
1a003848:	687a      	ldr	r2, [r7, #4]
1a00384a:	4613      	mov	r3, r2
1a00384c:	009b      	lsls	r3, r3, #2
1a00384e:	4413      	add	r3, r2
1a003850:	00db      	lsls	r3, r3, #3
1a003852:	440b      	add	r3, r1
1a003854:	6818      	ldr	r0, [r3, #0]
1a003856:	4911      	ldr	r1, [pc, #68]	; (1a00389c <PWMInit+0x388>)
1a003858:	687a      	ldr	r2, [r7, #4]
1a00385a:	4613      	mov	r3, r2
1a00385c:	009b      	lsls	r3, r3, #2
1a00385e:	4413      	add	r3, r2
1a003860:	009b      	lsls	r3, r3, #2
1a003862:	683a      	ldr	r2, [r7, #0]
1a003864:	4413      	add	r3, r2
1a003866:	330c      	adds	r3, #12
1a003868:	005b      	lsls	r3, r3, #1
1a00386a:	440b      	add	r3, r1
1a00386c:	889b      	ldrh	r3, [r3, #4]
1a00386e:	b2db      	uxtb	r3, r3
1a003870:	b25b      	sxtb	r3, r3
1a003872:	2201      	movs	r2, #1
1a003874:	2101      	movs	r1, #1
1a003876:	f00f fdc9 	bl	1a01340c <Chip_TIMER_ExtMatchControlSet>
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_C_0_PORT_GPIO, CHANNEL_C_0_PIN_GPIO);
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_C_1_PORT_GPIO, CHANNEL_C_1_PIN_GPIO);
	Chip_SCU_PinMuxSet(CHANNEL_C_0_PORT, CHANNEL_C_0_PIN, halTimers[CHANNEL_C_TIMER_INDEX].gpioMode[0]);
	Chip_SCU_PinMuxSet(CHANNEL_C_1_PORT, CHANNEL_C_1_PIN, halTimers[CHANNEL_C_TIMER_INDEX].gpioMode[1]);
	for (int i = 0; i < 3; ++i) {
		for (int j = 0; j < 2; ++j) {
1a00387a:	683b      	ldr	r3, [r7, #0]
1a00387c:	3301      	adds	r3, #1
1a00387e:	603b      	str	r3, [r7, #0]
1a003880:	683b      	ldr	r3, [r7, #0]
1a003882:	2b01      	cmp	r3, #1
1a003884:	dd94      	ble.n	1a0037b0 <PWMInit+0x29c>
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, CHANNEL_C_1_PORT_GPIO, CHANNEL_C_1_PIN_GPIO);
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_C_0_PORT_GPIO, CHANNEL_C_0_PIN_GPIO);
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CHANNEL_C_1_PORT_GPIO, CHANNEL_C_1_PIN_GPIO);
	Chip_SCU_PinMuxSet(CHANNEL_C_0_PORT, CHANNEL_C_0_PIN, halTimers[CHANNEL_C_TIMER_INDEX].gpioMode[0]);
	Chip_SCU_PinMuxSet(CHANNEL_C_1_PORT, CHANNEL_C_1_PIN, halTimers[CHANNEL_C_TIMER_INDEX].gpioMode[1]);
	for (int i = 0; i < 3; ++i) {
1a003886:	687b      	ldr	r3, [r7, #4]
1a003888:	3301      	adds	r3, #1
1a00388a:	607b      	str	r3, [r7, #4]
1a00388c:	687b      	ldr	r3, [r7, #4]
1a00388e:	2b02      	cmp	r3, #2
1a003890:	dd80      	ble.n	1a003794 <PWMInit+0x280>
			Chip_TIMER_MatchDisableInt(halTimers[i].timer, halTimers[i].timerChannel[j]);
			Chip_TIMER_ExtMatchControlSet(halTimers[i].timer, 1, TIMER_EXTMATCH_CLEAR, halTimers[i].timerChannel[j]);
		}
	}

}
1a003892:	bf00      	nop
1a003894:	3708      	adds	r7, #8
1a003896:	46bd      	mov	sp, r7
1a003898:	bd80      	pop	{r7, pc}
1a00389a:	bf00      	nop
1a00389c:	100874f0 	.word	0x100874f0

1a0038a0 <PWMSetPeriod>:

uint32_t PWMSetPeriod(uint8_t channel, uint32_t period) {
1a0038a0:	b590      	push	{r4, r7, lr}
1a0038a2:	b085      	sub	sp, #20
1a0038a4:	af00      	add	r7, sp, #0
1a0038a6:	4603      	mov	r3, r0
1a0038a8:	6039      	str	r1, [r7, #0]
1a0038aa:	71fb      	strb	r3, [r7, #7]
	if (channel > CHANNEL_C_TIMER_INDEX) {
1a0038ac:	79fb      	ldrb	r3, [r7, #7]
1a0038ae:	2b02      	cmp	r3, #2
1a0038b0:	d901      	bls.n	1a0038b6 <PWMSetPeriod+0x16>
		return 1;
1a0038b2:	2301      	movs	r3, #1
1a0038b4:	e134      	b.n	1a003b20 <PWMSetPeriod+0x280>
	}
	if (eDVSMode != EDVS_MODE_INTERNAL && channel == 0) {
1a0038b6:	4b9c      	ldr	r3, [pc, #624]	; (1a003b28 <PWMSetPeriod+0x288>)
1a0038b8:	781b      	ldrb	r3, [r3, #0]
1a0038ba:	2b00      	cmp	r3, #0
1a0038bc:	d004      	beq.n	1a0038c8 <PWMSetPeriod+0x28>
1a0038be:	79fb      	ldrb	r3, [r7, #7]
1a0038c0:	2b00      	cmp	r3, #0
1a0038c2:	d101      	bne.n	1a0038c8 <PWMSetPeriod+0x28>
		return 1; // channel 0 taken for master/slave mode
1a0038c4:	2301      	movs	r3, #1
1a0038c6:	e12b      	b.n	1a003b20 <PWMSetPeriod+0x280>
	}
	LPC_TIMER_T * timer = halTimers[channel].timer;
1a0038c8:	79fa      	ldrb	r2, [r7, #7]
1a0038ca:	4998      	ldr	r1, [pc, #608]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a0038cc:	4613      	mov	r3, r2
1a0038ce:	009b      	lsls	r3, r3, #2
1a0038d0:	4413      	add	r3, r2
1a0038d2:	00db      	lsls	r3, r3, #3
1a0038d4:	440b      	add	r3, r1
1a0038d6:	681b      	ldr	r3, [r3, #0]
1a0038d8:	60fb      	str	r3, [r7, #12]
	halTimers[channel].period = period;
1a0038da:	79fa      	ldrb	r2, [r7, #7]
1a0038dc:	4993      	ldr	r1, [pc, #588]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a0038de:	4613      	mov	r3, r2
1a0038e0:	009b      	lsls	r3, r3, #2
1a0038e2:	4413      	add	r3, r2
1a0038e4:	00db      	lsls	r3, r3, #3
1a0038e6:	440b      	add	r3, r1
1a0038e8:	3324      	adds	r3, #36	; 0x24
1a0038ea:	683a      	ldr	r2, [r7, #0]
1a0038ec:	601a      	str	r2, [r3, #0]
	/**
	 * If the period equal 0, the timer is disable and its outputs are set as GPIO and driven low.
	 */
	if (period == 0) {
1a0038ee:	683b      	ldr	r3, [r7, #0]
1a0038f0:	2b00      	cmp	r3, #0
1a0038f2:	f040 80b7 	bne.w	1a003a64 <PWMSetPeriod+0x1c4>
		Chip_TIMER_DeInit(timer); //Stop the timer
1a0038f6:	68f8      	ldr	r0, [r7, #12]
1a0038f8:	f00f fd5a 	bl	1a0133b0 <Chip_TIMER_DeInit>
		Chip_TIMER_SetMatch(timer, 2, 0);
1a0038fc:	2200      	movs	r2, #0
1a0038fe:	2102      	movs	r1, #2
1a003900:	68f8      	ldr	r0, [r7, #12]
1a003902:	f7ff fd83 	bl	1a00340c <Chip_TIMER_SetMatch>
		halTimers[channel].enabled[0] = DISABLE;
1a003906:	79fa      	ldrb	r2, [r7, #7]
1a003908:	4988      	ldr	r1, [pc, #544]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a00390a:	4613      	mov	r3, r2
1a00390c:	009b      	lsls	r3, r3, #2
1a00390e:	4413      	add	r3, r2
1a003910:	00db      	lsls	r3, r3, #3
1a003912:	440b      	add	r3, r1
1a003914:	3320      	adds	r3, #32
1a003916:	2200      	movs	r2, #0
1a003918:	801a      	strh	r2, [r3, #0]
		halTimers[channel].enabled[1] = DISABLE;
1a00391a:	79fa      	ldrb	r2, [r7, #7]
1a00391c:	4983      	ldr	r1, [pc, #524]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a00391e:	4613      	mov	r3, r2
1a003920:	009b      	lsls	r3, r3, #2
1a003922:	4413      	add	r3, r2
1a003924:	00db      	lsls	r3, r3, #3
1a003926:	440b      	add	r3, r1
1a003928:	3322      	adds	r3, #34	; 0x22
1a00392a:	2200      	movs	r2, #0
1a00392c:	801a      	strh	r2, [r3, #0]
		Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, halTimers[channel].portGpio[0], halTimers[channel].pinGpio[0]);
1a00392e:	79fa      	ldrb	r2, [r7, #7]
1a003930:	497e      	ldr	r1, [pc, #504]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a003932:	4613      	mov	r3, r2
1a003934:	009b      	lsls	r3, r3, #2
1a003936:	4413      	add	r3, r2
1a003938:	00db      	lsls	r3, r3, #3
1a00393a:	440b      	add	r3, r1
1a00393c:	3310      	adds	r3, #16
1a00393e:	7818      	ldrb	r0, [r3, #0]
1a003940:	79fa      	ldrb	r2, [r7, #7]
1a003942:	497a      	ldr	r1, [pc, #488]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a003944:	4613      	mov	r3, r2
1a003946:	009b      	lsls	r3, r3, #2
1a003948:	4413      	add	r3, r2
1a00394a:	00db      	lsls	r3, r3, #3
1a00394c:	440b      	add	r3, r1
1a00394e:	3312      	adds	r3, #18
1a003950:	781b      	ldrb	r3, [r3, #0]
1a003952:	461a      	mov	r2, r3
1a003954:	4601      	mov	r1, r0
1a003956:	4876      	ldr	r0, [pc, #472]	; (1a003b30 <PWMSetPeriod+0x290>)
1a003958:	f7ff fcd6 	bl	1a003308 <Chip_GPIO_SetPinDIRInput>
		Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, halTimers[channel].portGpio[1], halTimers[channel].pinGpio[1]);
1a00395c:	79fa      	ldrb	r2, [r7, #7]
1a00395e:	4973      	ldr	r1, [pc, #460]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a003960:	4613      	mov	r3, r2
1a003962:	009b      	lsls	r3, r3, #2
1a003964:	4413      	add	r3, r2
1a003966:	00db      	lsls	r3, r3, #3
1a003968:	440b      	add	r3, r1
1a00396a:	3311      	adds	r3, #17
1a00396c:	7818      	ldrb	r0, [r3, #0]
1a00396e:	79fa      	ldrb	r2, [r7, #7]
1a003970:	496e      	ldr	r1, [pc, #440]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a003972:	4613      	mov	r3, r2
1a003974:	009b      	lsls	r3, r3, #2
1a003976:	4413      	add	r3, r2
1a003978:	00db      	lsls	r3, r3, #3
1a00397a:	440b      	add	r3, r1
1a00397c:	3313      	adds	r3, #19
1a00397e:	781b      	ldrb	r3, [r3, #0]
1a003980:	461a      	mov	r2, r3
1a003982:	4601      	mov	r1, r0
1a003984:	486a      	ldr	r0, [pc, #424]	; (1a003b30 <PWMSetPeriod+0x290>)
1a003986:	f7ff fcbf 	bl	1a003308 <Chip_GPIO_SetPinDIRInput>
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, halTimers[channel].portGpio[0], halTimers[channel].pinGpio[0]);
1a00398a:	79fa      	ldrb	r2, [r7, #7]
1a00398c:	4967      	ldr	r1, [pc, #412]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a00398e:	4613      	mov	r3, r2
1a003990:	009b      	lsls	r3, r3, #2
1a003992:	4413      	add	r3, r2
1a003994:	00db      	lsls	r3, r3, #3
1a003996:	440b      	add	r3, r1
1a003998:	3310      	adds	r3, #16
1a00399a:	7818      	ldrb	r0, [r3, #0]
1a00399c:	79fa      	ldrb	r2, [r7, #7]
1a00399e:	4963      	ldr	r1, [pc, #396]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a0039a0:	4613      	mov	r3, r2
1a0039a2:	009b      	lsls	r3, r3, #2
1a0039a4:	4413      	add	r3, r2
1a0039a6:	00db      	lsls	r3, r3, #3
1a0039a8:	440b      	add	r3, r1
1a0039aa:	3312      	adds	r3, #18
1a0039ac:	781b      	ldrb	r3, [r3, #0]
1a0039ae:	461a      	mov	r2, r3
1a0039b0:	4601      	mov	r1, r0
1a0039b2:	485f      	ldr	r0, [pc, #380]	; (1a003b30 <PWMSetPeriod+0x290>)
1a0039b4:	f7ff fce2 	bl	1a00337c <Chip_GPIO_SetPinOutLow>
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, halTimers[channel].portGpio[1], halTimers[channel].pinGpio[1]);
1a0039b8:	79fa      	ldrb	r2, [r7, #7]
1a0039ba:	495c      	ldr	r1, [pc, #368]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a0039bc:	4613      	mov	r3, r2
1a0039be:	009b      	lsls	r3, r3, #2
1a0039c0:	4413      	add	r3, r2
1a0039c2:	00db      	lsls	r3, r3, #3
1a0039c4:	440b      	add	r3, r1
1a0039c6:	3311      	adds	r3, #17
1a0039c8:	7818      	ldrb	r0, [r3, #0]
1a0039ca:	79fa      	ldrb	r2, [r7, #7]
1a0039cc:	4957      	ldr	r1, [pc, #348]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a0039ce:	4613      	mov	r3, r2
1a0039d0:	009b      	lsls	r3, r3, #2
1a0039d2:	4413      	add	r3, r2
1a0039d4:	00db      	lsls	r3, r3, #3
1a0039d6:	440b      	add	r3, r1
1a0039d8:	3313      	adds	r3, #19
1a0039da:	781b      	ldrb	r3, [r3, #0]
1a0039dc:	461a      	mov	r2, r3
1a0039de:	4601      	mov	r1, r0
1a0039e0:	4853      	ldr	r0, [pc, #332]	; (1a003b30 <PWMSetPeriod+0x290>)
1a0039e2:	f7ff fccb 	bl	1a00337c <Chip_GPIO_SetPinOutLow>
		Chip_SCU_PinMuxSet(halTimers[channel].port[0], halTimers[channel].pin[0], halTimers[channel].gpioMode[0]);
1a0039e6:	79fa      	ldrb	r2, [r7, #7]
1a0039e8:	4950      	ldr	r1, [pc, #320]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a0039ea:	4613      	mov	r3, r2
1a0039ec:	009b      	lsls	r3, r3, #2
1a0039ee:	4413      	add	r3, r2
1a0039f0:	00db      	lsls	r3, r3, #3
1a0039f2:	440b      	add	r3, r1
1a0039f4:	330c      	adds	r3, #12
1a0039f6:	7818      	ldrb	r0, [r3, #0]
1a0039f8:	79fa      	ldrb	r2, [r7, #7]
1a0039fa:	494c      	ldr	r1, [pc, #304]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a0039fc:	4613      	mov	r3, r2
1a0039fe:	009b      	lsls	r3, r3, #2
1a003a00:	4413      	add	r3, r2
1a003a02:	00db      	lsls	r3, r3, #3
1a003a04:	440b      	add	r3, r1
1a003a06:	330e      	adds	r3, #14
1a003a08:	781c      	ldrb	r4, [r3, #0]
1a003a0a:	79fa      	ldrb	r2, [r7, #7]
1a003a0c:	4947      	ldr	r1, [pc, #284]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a003a0e:	4613      	mov	r3, r2
1a003a10:	009b      	lsls	r3, r3, #2
1a003a12:	4413      	add	r3, r2
1a003a14:	00db      	lsls	r3, r3, #3
1a003a16:	440b      	add	r3, r1
1a003a18:	3314      	adds	r3, #20
1a003a1a:	881b      	ldrh	r3, [r3, #0]
1a003a1c:	461a      	mov	r2, r3
1a003a1e:	4621      	mov	r1, r4
1a003a20:	f7ff fc38 	bl	1a003294 <Chip_SCU_PinMuxSet>
		Chip_SCU_PinMuxSet(halTimers[channel].port[1], halTimers[channel].pin[1], halTimers[channel].gpioMode[1]);
1a003a24:	79fa      	ldrb	r2, [r7, #7]
1a003a26:	4941      	ldr	r1, [pc, #260]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a003a28:	4613      	mov	r3, r2
1a003a2a:	009b      	lsls	r3, r3, #2
1a003a2c:	4413      	add	r3, r2
1a003a2e:	00db      	lsls	r3, r3, #3
1a003a30:	440b      	add	r3, r1
1a003a32:	330d      	adds	r3, #13
1a003a34:	7818      	ldrb	r0, [r3, #0]
1a003a36:	79fa      	ldrb	r2, [r7, #7]
1a003a38:	493c      	ldr	r1, [pc, #240]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a003a3a:	4613      	mov	r3, r2
1a003a3c:	009b      	lsls	r3, r3, #2
1a003a3e:	4413      	add	r3, r2
1a003a40:	00db      	lsls	r3, r3, #3
1a003a42:	440b      	add	r3, r1
1a003a44:	330f      	adds	r3, #15
1a003a46:	781c      	ldrb	r4, [r3, #0]
1a003a48:	79fa      	ldrb	r2, [r7, #7]
1a003a4a:	4938      	ldr	r1, [pc, #224]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a003a4c:	4613      	mov	r3, r2
1a003a4e:	009b      	lsls	r3, r3, #2
1a003a50:	4413      	add	r3, r2
1a003a52:	00db      	lsls	r3, r3, #3
1a003a54:	440b      	add	r3, r1
1a003a56:	3316      	adds	r3, #22
1a003a58:	881b      	ldrh	r3, [r3, #0]
1a003a5a:	461a      	mov	r2, r3
1a003a5c:	4621      	mov	r1, r4
1a003a5e:	f7ff fc19 	bl	1a003294 <Chip_SCU_PinMuxSet>
1a003a62:	e05c      	b.n	1a003b1e <PWMSetPeriod+0x27e>
		 * The channel match 2 is used as the controller of the base frequency.
		 * When there is a match on this channel, the timer is reset and the external match bit
		 * is set to 1.
		 * The M0 core is looking for this change and it sets the output of the channels to high.
		 */
		Chip_TIMER_Init(timer);
1a003a64:	68f8      	ldr	r0, [r7, #12]
1a003a66:	f00f fc93 	bl	1a013390 <Chip_TIMER_Init>
		Chip_TIMER_Disable(timer);
1a003a6a:	68f8      	ldr	r0, [r7, #12]
1a003a6c:	f7ff fcb0 	bl	1a0033d0 <Chip_TIMER_Disable>
		Chip_TIMER_Reset(timer);
1a003a70:	68f8      	ldr	r0, [r7, #12]
1a003a72:	f00f fcad 	bl	1a0133d0 <Chip_TIMER_Reset>
		/**
		 * The Main clock is running at 192Mhz so set the Prescaler in order to have
		 * a 1 Mhz timer. Timer_CLK = Main_CLK/ (PR+1)
		 */
		Chip_TIMER_PrescaleSet(timer, 191);
1a003a76:	21bf      	movs	r1, #191	; 0xbf
1a003a78:	68f8      	ldr	r0, [r7, #12]
1a003a7a:	f7ff fcb9 	bl	1a0033f0 <Chip_TIMER_PrescaleSet>
		Chip_TIMER_ResetOnMatchEnable(timer, 2);
1a003a7e:	2102      	movs	r1, #2
1a003a80:	68f8      	ldr	r0, [r7, #12]
1a003a82:	f7ff fcf3 	bl	1a00346c <Chip_TIMER_ResetOnMatchEnable>
		Chip_TIMER_StopOnMatchDisable(timer, 2);
1a003a86:	2102      	movs	r1, #2
1a003a88:	68f8      	ldr	r0, [r7, #12]
1a003a8a:	f7ff fd27 	bl	1a0034dc <Chip_TIMER_StopOnMatchDisable>
		Chip_TIMER_MatchDisableInt(timer, 2);
1a003a8e:	2102      	movs	r1, #2
1a003a90:	68f8      	ldr	r0, [r7, #12]
1a003a92:	f7ff fccf 	bl	1a003434 <Chip_TIMER_MatchDisableInt>
		Chip_TIMER_SetMatch(timer, 2, period);
1a003a96:	683a      	ldr	r2, [r7, #0]
1a003a98:	2102      	movs	r1, #2
1a003a9a:	68f8      	ldr	r0, [r7, #12]
1a003a9c:	f7ff fcb6 	bl	1a00340c <Chip_TIMER_SetMatch>
		//Reconfigure match channels!
		if (halTimers[channel].enabled[0]) {
1a003aa0:	79fa      	ldrb	r2, [r7, #7]
1a003aa2:	4922      	ldr	r1, [pc, #136]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a003aa4:	4613      	mov	r3, r2
1a003aa6:	009b      	lsls	r3, r3, #2
1a003aa8:	4413      	add	r3, r2
1a003aaa:	00db      	lsls	r3, r3, #3
1a003aac:	440b      	add	r3, r1
1a003aae:	3320      	adds	r3, #32
1a003ab0:	881b      	ldrh	r3, [r3, #0]
1a003ab2:	2b00      	cmp	r3, #0
1a003ab4:	d00d      	beq.n	1a003ad2 <PWMSetPeriod+0x232>
			PWMSetWidth(channel, 0, halTimers[channel].witdh[0]);
1a003ab6:	79fa      	ldrb	r2, [r7, #7]
1a003ab8:	491c      	ldr	r1, [pc, #112]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a003aba:	4613      	mov	r3, r2
1a003abc:	009b      	lsls	r3, r3, #2
1a003abe:	4413      	add	r3, r2
1a003ac0:	00db      	lsls	r3, r3, #3
1a003ac2:	440b      	add	r3, r1
1a003ac4:	3304      	adds	r3, #4
1a003ac6:	681a      	ldr	r2, [r3, #0]
1a003ac8:	79fb      	ldrb	r3, [r7, #7]
1a003aca:	2100      	movs	r1, #0
1a003acc:	4618      	mov	r0, r3
1a003ace:	f000 f86f 	bl	1a003bb0 <PWMSetWidth>
		}
		if (halTimers[channel].enabled[1]) {
1a003ad2:	79fa      	ldrb	r2, [r7, #7]
1a003ad4:	4915      	ldr	r1, [pc, #84]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a003ad6:	4613      	mov	r3, r2
1a003ad8:	009b      	lsls	r3, r3, #2
1a003ada:	4413      	add	r3, r2
1a003adc:	00db      	lsls	r3, r3, #3
1a003ade:	440b      	add	r3, r1
1a003ae0:	3322      	adds	r3, #34	; 0x22
1a003ae2:	881b      	ldrh	r3, [r3, #0]
1a003ae4:	2b00      	cmp	r3, #0
1a003ae6:	d00d      	beq.n	1a003b04 <PWMSetPeriod+0x264>
			PWMSetWidth(channel, 1, halTimers[channel].witdh[1]);
1a003ae8:	79fa      	ldrb	r2, [r7, #7]
1a003aea:	4910      	ldr	r1, [pc, #64]	; (1a003b2c <PWMSetPeriod+0x28c>)
1a003aec:	4613      	mov	r3, r2
1a003aee:	009b      	lsls	r3, r3, #2
1a003af0:	4413      	add	r3, r2
1a003af2:	00db      	lsls	r3, r3, #3
1a003af4:	440b      	add	r3, r1
1a003af6:	3308      	adds	r3, #8
1a003af8:	681a      	ldr	r2, [r3, #0]
1a003afa:	79fb      	ldrb	r3, [r7, #7]
1a003afc:	2101      	movs	r1, #1
1a003afe:	4618      	mov	r0, r3
1a003b00:	f000 f856 	bl	1a003bb0 <PWMSetWidth>
		}
		Chip_TIMER_ExtMatchControlSet(timer, 0, TIMER_EXTMATCH_SET, 2);
1a003b04:	2302      	movs	r3, #2
1a003b06:	2202      	movs	r2, #2
1a003b08:	2100      	movs	r1, #0
1a003b0a:	68f8      	ldr	r0, [r7, #12]
1a003b0c:	f00f fc7e 	bl	1a01340c <Chip_TIMER_ExtMatchControlSet>
		// Clear interrupt pending
		timer->IR = 0xFFFFFFFF;
1a003b10:	68fb      	ldr	r3, [r7, #12]
1a003b12:	f04f 32ff 	mov.w	r2, #4294967295
1a003b16:	601a      	str	r2, [r3, #0]
		Chip_TIMER_Enable(timer);
1a003b18:	68f8      	ldr	r0, [r7, #12]
1a003b1a:	f7ff fc49 	bl	1a0033b0 <Chip_TIMER_Enable>
	}
	return 0;
1a003b1e:	2300      	movs	r3, #0
}
1a003b20:	4618      	mov	r0, r3
1a003b22:	3714      	adds	r7, #20
1a003b24:	46bd      	mov	sp, r7
1a003b26:	bd90      	pop	{r4, r7, pc}
1a003b28:	10086518 	.word	0x10086518
1a003b2c:	100874f0 	.word	0x100874f0
1a003b30:	400f4000 	.word	0x400f4000

1a003b34 <PWMSetDutyCycle>:

uint32_t PWMSetDutyCycle(uint8_t channel, uint8_t output, uint32_t dutycycle) {
1a003b34:	b580      	push	{r7, lr}
1a003b36:	b082      	sub	sp, #8
1a003b38:	af00      	add	r7, sp, #0
1a003b3a:	4603      	mov	r3, r0
1a003b3c:	603a      	str	r2, [r7, #0]
1a003b3e:	71fb      	strb	r3, [r7, #7]
1a003b40:	460b      	mov	r3, r1
1a003b42:	71bb      	strb	r3, [r7, #6]
	if (output >= MAX_OUTPUTS || channel > CHANNEL_C_TIMER_INDEX) {
1a003b44:	79bb      	ldrb	r3, [r7, #6]
1a003b46:	2b01      	cmp	r3, #1
1a003b48:	d802      	bhi.n	1a003b50 <PWMSetDutyCycle+0x1c>
1a003b4a:	79fb      	ldrb	r3, [r7, #7]
1a003b4c:	2b02      	cmp	r3, #2
1a003b4e:	d901      	bls.n	1a003b54 <PWMSetDutyCycle+0x20>
		return 1;
1a003b50:	2301      	movs	r3, #1
1a003b52:	e023      	b.n	1a003b9c <PWMSetDutyCycle+0x68>
	}
	if (eDVSMode != EDVS_MODE_INTERNAL && channel == 0) {
1a003b54:	4b13      	ldr	r3, [pc, #76]	; (1a003ba4 <PWMSetDutyCycle+0x70>)
1a003b56:	781b      	ldrb	r3, [r3, #0]
1a003b58:	2b00      	cmp	r3, #0
1a003b5a:	d004      	beq.n	1a003b66 <PWMSetDutyCycle+0x32>
1a003b5c:	79fb      	ldrb	r3, [r7, #7]
1a003b5e:	2b00      	cmp	r3, #0
1a003b60:	d101      	bne.n	1a003b66 <PWMSetDutyCycle+0x32>
		return 1; // channel 0 taken for master/slave mode
1a003b62:	2301      	movs	r3, #1
1a003b64:	e01a      	b.n	1a003b9c <PWMSetDutyCycle+0x68>
	}
	if (dutycycle > 100) {
1a003b66:	683b      	ldr	r3, [r7, #0]
1a003b68:	2b64      	cmp	r3, #100	; 0x64
1a003b6a:	d901      	bls.n	1a003b70 <PWMSetDutyCycle+0x3c>
		dutycycle = 100;
1a003b6c:	2364      	movs	r3, #100	; 0x64
1a003b6e:	603b      	str	r3, [r7, #0]
	}
	return PWMSetWidth(channel, output, (dutycycle * halTimers[channel].period) / 100);
1a003b70:	79fa      	ldrb	r2, [r7, #7]
1a003b72:	490d      	ldr	r1, [pc, #52]	; (1a003ba8 <PWMSetDutyCycle+0x74>)
1a003b74:	4613      	mov	r3, r2
1a003b76:	009b      	lsls	r3, r3, #2
1a003b78:	4413      	add	r3, r2
1a003b7a:	00db      	lsls	r3, r3, #3
1a003b7c:	440b      	add	r3, r1
1a003b7e:	3324      	adds	r3, #36	; 0x24
1a003b80:	681b      	ldr	r3, [r3, #0]
1a003b82:	683a      	ldr	r2, [r7, #0]
1a003b84:	fb02 f303 	mul.w	r3, r2, r3
1a003b88:	4a08      	ldr	r2, [pc, #32]	; (1a003bac <PWMSetDutyCycle+0x78>)
1a003b8a:	fba2 2303 	umull	r2, r3, r2, r3
1a003b8e:	095a      	lsrs	r2, r3, #5
1a003b90:	79b9      	ldrb	r1, [r7, #6]
1a003b92:	79fb      	ldrb	r3, [r7, #7]
1a003b94:	4618      	mov	r0, r3
1a003b96:	f000 f80b 	bl	1a003bb0 <PWMSetWidth>
1a003b9a:	4603      	mov	r3, r0
}
1a003b9c:	4618      	mov	r0, r3
1a003b9e:	3708      	adds	r7, #8
1a003ba0:	46bd      	mov	sp, r7
1a003ba2:	bd80      	pop	{r7, pc}
1a003ba4:	10086518 	.word	0x10086518
1a003ba8:	100874f0 	.word	0x100874f0
1a003bac:	51eb851f 	.word	0x51eb851f

1a003bb0 <PWMSetWidth>:

uint32_t PWMSetWidth(uint8_t channel, uint8_t output, uint32_t width) {
1a003bb0:	b5b0      	push	{r4, r5, r7, lr}
1a003bb2:	b084      	sub	sp, #16
1a003bb4:	af00      	add	r7, sp, #0
1a003bb6:	4603      	mov	r3, r0
1a003bb8:	603a      	str	r2, [r7, #0]
1a003bba:	71fb      	strb	r3, [r7, #7]
1a003bbc:	460b      	mov	r3, r1
1a003bbe:	71bb      	strb	r3, [r7, #6]
	if (output >= MAX_OUTPUTS || channel > CHANNEL_C_TIMER_INDEX) {
1a003bc0:	79bb      	ldrb	r3, [r7, #6]
1a003bc2:	2b01      	cmp	r3, #1
1a003bc4:	d802      	bhi.n	1a003bcc <PWMSetWidth+0x1c>
1a003bc6:	79fb      	ldrb	r3, [r7, #7]
1a003bc8:	2b02      	cmp	r3, #2
1a003bca:	d901      	bls.n	1a003bd0 <PWMSetWidth+0x20>
		return 1;
1a003bcc:	2301      	movs	r3, #1
1a003bce:	e127      	b.n	1a003e20 <PWMSetWidth+0x270>
	}
	if (eDVSMode != EDVS_MODE_INTERNAL && channel == 0) {
1a003bd0:	4b95      	ldr	r3, [pc, #596]	; (1a003e28 <PWMSetWidth+0x278>)
1a003bd2:	781b      	ldrb	r3, [r3, #0]
1a003bd4:	2b00      	cmp	r3, #0
1a003bd6:	d004      	beq.n	1a003be2 <PWMSetWidth+0x32>
1a003bd8:	79fb      	ldrb	r3, [r7, #7]
1a003bda:	2b00      	cmp	r3, #0
1a003bdc:	d101      	bne.n	1a003be2 <PWMSetWidth+0x32>
		return 1; // channel 0 taken for master/slave mode
1a003bde:	2301      	movs	r3, #1
1a003be0:	e11e      	b.n	1a003e20 <PWMSetWidth+0x270>
	}
	LPC_TIMER_T * timer = halTimers[channel].timer;
1a003be2:	79fa      	ldrb	r2, [r7, #7]
1a003be4:	4991      	ldr	r1, [pc, #580]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003be6:	4613      	mov	r3, r2
1a003be8:	009b      	lsls	r3, r3, #2
1a003bea:	4413      	add	r3, r2
1a003bec:	00db      	lsls	r3, r3, #3
1a003bee:	440b      	add	r3, r1
1a003bf0:	681b      	ldr	r3, [r3, #0]
1a003bf2:	60fb      	str	r3, [r7, #12]
	halTimers[channel].witdh[output] = width;
1a003bf4:	79fa      	ldrb	r2, [r7, #7]
1a003bf6:	79b9      	ldrb	r1, [r7, #6]
1a003bf8:	488c      	ldr	r0, [pc, #560]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003bfa:	4613      	mov	r3, r2
1a003bfc:	009b      	lsls	r3, r3, #2
1a003bfe:	4413      	add	r3, r2
1a003c00:	005b      	lsls	r3, r3, #1
1a003c02:	440b      	add	r3, r1
1a003c04:	009b      	lsls	r3, r3, #2
1a003c06:	4403      	add	r3, r0
1a003c08:	683a      	ldr	r2, [r7, #0]
1a003c0a:	605a      	str	r2, [r3, #4]
	halTimers[channel].enabled[output] = ENABLE;
1a003c0c:	79fa      	ldrb	r2, [r7, #7]
1a003c0e:	79b9      	ldrb	r1, [r7, #6]
1a003c10:	4886      	ldr	r0, [pc, #536]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003c12:	4613      	mov	r3, r2
1a003c14:	009b      	lsls	r3, r3, #2
1a003c16:	4413      	add	r3, r2
1a003c18:	009b      	lsls	r3, r3, #2
1a003c1a:	440b      	add	r3, r1
1a003c1c:	3310      	adds	r3, #16
1a003c1e:	2201      	movs	r2, #1
1a003c20:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	/**
	 * Since we have to use the Core M0 to overcome hardware limitations
	 * when the width is 0 or bigger than the period of the wave,
	 * the output is set as GPIO and driven accordingly.
	 */
	if (width == 0) { //Set GPIO Low
1a003c24:	683b      	ldr	r3, [r7, #0]
1a003c26:	2b00      	cmp	r3, #0
1a003c28:	d15d      	bne.n	1a003ce6 <PWMSetWidth+0x136>
		Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, halTimers[channel].portGpio[output],
1a003c2a:	79fa      	ldrb	r2, [r7, #7]
1a003c2c:	79b9      	ldrb	r1, [r7, #6]
1a003c2e:	487f      	ldr	r0, [pc, #508]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003c30:	4613      	mov	r3, r2
1a003c32:	009b      	lsls	r3, r3, #2
1a003c34:	4413      	add	r3, r2
1a003c36:	00db      	lsls	r3, r3, #3
1a003c38:	4403      	add	r3, r0
1a003c3a:	440b      	add	r3, r1
1a003c3c:	3310      	adds	r3, #16
1a003c3e:	781c      	ldrb	r4, [r3, #0]
1a003c40:	79fa      	ldrb	r2, [r7, #7]
1a003c42:	79b9      	ldrb	r1, [r7, #6]
1a003c44:	4879      	ldr	r0, [pc, #484]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003c46:	4613      	mov	r3, r2
1a003c48:	009b      	lsls	r3, r3, #2
1a003c4a:	4413      	add	r3, r2
1a003c4c:	00db      	lsls	r3, r3, #3
1a003c4e:	4403      	add	r3, r0
1a003c50:	440b      	add	r3, r1
1a003c52:	3312      	adds	r3, #18
1a003c54:	781b      	ldrb	r3, [r3, #0]
1a003c56:	461a      	mov	r2, r3
1a003c58:	4621      	mov	r1, r4
1a003c5a:	4875      	ldr	r0, [pc, #468]	; (1a003e30 <PWMSetWidth+0x280>)
1a003c5c:	f7ff fb34 	bl	1a0032c8 <Chip_GPIO_SetPinDIROutput>
				halTimers[channel].pinGpio[output]);
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, halTimers[channel].portGpio[output], halTimers[channel].pinGpio[output]);
1a003c60:	79fa      	ldrb	r2, [r7, #7]
1a003c62:	79b9      	ldrb	r1, [r7, #6]
1a003c64:	4871      	ldr	r0, [pc, #452]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003c66:	4613      	mov	r3, r2
1a003c68:	009b      	lsls	r3, r3, #2
1a003c6a:	4413      	add	r3, r2
1a003c6c:	00db      	lsls	r3, r3, #3
1a003c6e:	4403      	add	r3, r0
1a003c70:	440b      	add	r3, r1
1a003c72:	3310      	adds	r3, #16
1a003c74:	781c      	ldrb	r4, [r3, #0]
1a003c76:	79fa      	ldrb	r2, [r7, #7]
1a003c78:	79b9      	ldrb	r1, [r7, #6]
1a003c7a:	486c      	ldr	r0, [pc, #432]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003c7c:	4613      	mov	r3, r2
1a003c7e:	009b      	lsls	r3, r3, #2
1a003c80:	4413      	add	r3, r2
1a003c82:	00db      	lsls	r3, r3, #3
1a003c84:	4403      	add	r3, r0
1a003c86:	440b      	add	r3, r1
1a003c88:	3312      	adds	r3, #18
1a003c8a:	781b      	ldrb	r3, [r3, #0]
1a003c8c:	461a      	mov	r2, r3
1a003c8e:	4621      	mov	r1, r4
1a003c90:	4867      	ldr	r0, [pc, #412]	; (1a003e30 <PWMSetWidth+0x280>)
1a003c92:	f7ff fb73 	bl	1a00337c <Chip_GPIO_SetPinOutLow>
		Chip_SCU_PinMuxSet(halTimers[channel].port[output], halTimers[channel].pin[output],
1a003c96:	79fa      	ldrb	r2, [r7, #7]
1a003c98:	79b9      	ldrb	r1, [r7, #6]
1a003c9a:	4864      	ldr	r0, [pc, #400]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003c9c:	4613      	mov	r3, r2
1a003c9e:	009b      	lsls	r3, r3, #2
1a003ca0:	4413      	add	r3, r2
1a003ca2:	00db      	lsls	r3, r3, #3
1a003ca4:	4403      	add	r3, r0
1a003ca6:	440b      	add	r3, r1
1a003ca8:	330c      	adds	r3, #12
1a003caa:	781c      	ldrb	r4, [r3, #0]
1a003cac:	79fa      	ldrb	r2, [r7, #7]
1a003cae:	79b9      	ldrb	r1, [r7, #6]
1a003cb0:	485e      	ldr	r0, [pc, #376]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003cb2:	4613      	mov	r3, r2
1a003cb4:	009b      	lsls	r3, r3, #2
1a003cb6:	4413      	add	r3, r2
1a003cb8:	00db      	lsls	r3, r3, #3
1a003cba:	4403      	add	r3, r0
1a003cbc:	440b      	add	r3, r1
1a003cbe:	330e      	adds	r3, #14
1a003cc0:	781d      	ldrb	r5, [r3, #0]
1a003cc2:	79fa      	ldrb	r2, [r7, #7]
1a003cc4:	79b9      	ldrb	r1, [r7, #6]
1a003cc6:	4859      	ldr	r0, [pc, #356]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003cc8:	4613      	mov	r3, r2
1a003cca:	009b      	lsls	r3, r3, #2
1a003ccc:	4413      	add	r3, r2
1a003cce:	009b      	lsls	r3, r3, #2
1a003cd0:	440b      	add	r3, r1
1a003cd2:	3308      	adds	r3, #8
1a003cd4:	005b      	lsls	r3, r3, #1
1a003cd6:	4403      	add	r3, r0
1a003cd8:	889b      	ldrh	r3, [r3, #4]
1a003cda:	461a      	mov	r2, r3
1a003cdc:	4629      	mov	r1, r5
1a003cde:	4620      	mov	r0, r4
1a003ce0:	f7ff fad8 	bl	1a003294 <Chip_SCU_PinMuxSet>
1a003ce4:	e09b      	b.n	1a003e1e <PWMSetWidth+0x26e>
				halTimers[channel].gpioMode[output]);
	} else if (width >= timer->MR[2]) { //Set GPIO High
1a003ce6:	68fb      	ldr	r3, [r7, #12]
1a003ce8:	6a1a      	ldr	r2, [r3, #32]
1a003cea:	683b      	ldr	r3, [r7, #0]
1a003cec:	429a      	cmp	r2, r3
1a003cee:	d85d      	bhi.n	1a003dac <PWMSetWidth+0x1fc>
		Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, halTimers[channel].portGpio[output],
1a003cf0:	79fa      	ldrb	r2, [r7, #7]
1a003cf2:	79b9      	ldrb	r1, [r7, #6]
1a003cf4:	484d      	ldr	r0, [pc, #308]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003cf6:	4613      	mov	r3, r2
1a003cf8:	009b      	lsls	r3, r3, #2
1a003cfa:	4413      	add	r3, r2
1a003cfc:	00db      	lsls	r3, r3, #3
1a003cfe:	4403      	add	r3, r0
1a003d00:	440b      	add	r3, r1
1a003d02:	3310      	adds	r3, #16
1a003d04:	781c      	ldrb	r4, [r3, #0]
1a003d06:	79fa      	ldrb	r2, [r7, #7]
1a003d08:	79b9      	ldrb	r1, [r7, #6]
1a003d0a:	4848      	ldr	r0, [pc, #288]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003d0c:	4613      	mov	r3, r2
1a003d0e:	009b      	lsls	r3, r3, #2
1a003d10:	4413      	add	r3, r2
1a003d12:	00db      	lsls	r3, r3, #3
1a003d14:	4403      	add	r3, r0
1a003d16:	440b      	add	r3, r1
1a003d18:	3312      	adds	r3, #18
1a003d1a:	781b      	ldrb	r3, [r3, #0]
1a003d1c:	461a      	mov	r2, r3
1a003d1e:	4621      	mov	r1, r4
1a003d20:	4843      	ldr	r0, [pc, #268]	; (1a003e30 <PWMSetWidth+0x280>)
1a003d22:	f7ff fad1 	bl	1a0032c8 <Chip_GPIO_SetPinDIROutput>
				halTimers[channel].pinGpio[output]);
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, halTimers[channel].portGpio[output], halTimers[channel].pinGpio[output]);
1a003d26:	79fa      	ldrb	r2, [r7, #7]
1a003d28:	79b9      	ldrb	r1, [r7, #6]
1a003d2a:	4840      	ldr	r0, [pc, #256]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003d2c:	4613      	mov	r3, r2
1a003d2e:	009b      	lsls	r3, r3, #2
1a003d30:	4413      	add	r3, r2
1a003d32:	00db      	lsls	r3, r3, #3
1a003d34:	4403      	add	r3, r0
1a003d36:	440b      	add	r3, r1
1a003d38:	3310      	adds	r3, #16
1a003d3a:	781c      	ldrb	r4, [r3, #0]
1a003d3c:	79fa      	ldrb	r2, [r7, #7]
1a003d3e:	79b9      	ldrb	r1, [r7, #6]
1a003d40:	483a      	ldr	r0, [pc, #232]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003d42:	4613      	mov	r3, r2
1a003d44:	009b      	lsls	r3, r3, #2
1a003d46:	4413      	add	r3, r2
1a003d48:	00db      	lsls	r3, r3, #3
1a003d4a:	4403      	add	r3, r0
1a003d4c:	440b      	add	r3, r1
1a003d4e:	3312      	adds	r3, #18
1a003d50:	781b      	ldrb	r3, [r3, #0]
1a003d52:	461a      	mov	r2, r3
1a003d54:	4621      	mov	r1, r4
1a003d56:	4836      	ldr	r0, [pc, #216]	; (1a003e30 <PWMSetWidth+0x280>)
1a003d58:	f7ff faf6 	bl	1a003348 <Chip_GPIO_SetPinOutHigh>
		Chip_SCU_PinMuxSet(halTimers[channel].port[output], halTimers[channel].pin[output],
1a003d5c:	79fa      	ldrb	r2, [r7, #7]
1a003d5e:	79b9      	ldrb	r1, [r7, #6]
1a003d60:	4832      	ldr	r0, [pc, #200]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003d62:	4613      	mov	r3, r2
1a003d64:	009b      	lsls	r3, r3, #2
1a003d66:	4413      	add	r3, r2
1a003d68:	00db      	lsls	r3, r3, #3
1a003d6a:	4403      	add	r3, r0
1a003d6c:	440b      	add	r3, r1
1a003d6e:	330c      	adds	r3, #12
1a003d70:	781c      	ldrb	r4, [r3, #0]
1a003d72:	79fa      	ldrb	r2, [r7, #7]
1a003d74:	79b9      	ldrb	r1, [r7, #6]
1a003d76:	482d      	ldr	r0, [pc, #180]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003d78:	4613      	mov	r3, r2
1a003d7a:	009b      	lsls	r3, r3, #2
1a003d7c:	4413      	add	r3, r2
1a003d7e:	00db      	lsls	r3, r3, #3
1a003d80:	4403      	add	r3, r0
1a003d82:	440b      	add	r3, r1
1a003d84:	330e      	adds	r3, #14
1a003d86:	781d      	ldrb	r5, [r3, #0]
1a003d88:	79fa      	ldrb	r2, [r7, #7]
1a003d8a:	79b9      	ldrb	r1, [r7, #6]
1a003d8c:	4827      	ldr	r0, [pc, #156]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003d8e:	4613      	mov	r3, r2
1a003d90:	009b      	lsls	r3, r3, #2
1a003d92:	4413      	add	r3, r2
1a003d94:	009b      	lsls	r3, r3, #2
1a003d96:	440b      	add	r3, r1
1a003d98:	3308      	adds	r3, #8
1a003d9a:	005b      	lsls	r3, r3, #1
1a003d9c:	4403      	add	r3, r0
1a003d9e:	889b      	ldrh	r3, [r3, #4]
1a003da0:	461a      	mov	r2, r3
1a003da2:	4629      	mov	r1, r5
1a003da4:	4620      	mov	r0, r4
1a003da6:	f7ff fa75 	bl	1a003294 <Chip_SCU_PinMuxSet>
1a003daa:	e038      	b.n	1a003e1e <PWMSetWidth+0x26e>
				halTimers[channel].gpioMode[output]);
	} else {
		Chip_TIMER_SetMatch(timer, halTimers[channel].timerChannel[output], width);
1a003dac:	79fa      	ldrb	r2, [r7, #7]
1a003dae:	79b9      	ldrb	r1, [r7, #6]
1a003db0:	481e      	ldr	r0, [pc, #120]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003db2:	4613      	mov	r3, r2
1a003db4:	009b      	lsls	r3, r3, #2
1a003db6:	4413      	add	r3, r2
1a003db8:	009b      	lsls	r3, r3, #2
1a003dba:	440b      	add	r3, r1
1a003dbc:	330c      	adds	r3, #12
1a003dbe:	005b      	lsls	r3, r3, #1
1a003dc0:	4403      	add	r3, r0
1a003dc2:	889b      	ldrh	r3, [r3, #4]
1a003dc4:	b2db      	uxtb	r3, r3
1a003dc6:	b25b      	sxtb	r3, r3
1a003dc8:	683a      	ldr	r2, [r7, #0]
1a003dca:	4619      	mov	r1, r3
1a003dcc:	68f8      	ldr	r0, [r7, #12]
1a003dce:	f7ff fb1d 	bl	1a00340c <Chip_TIMER_SetMatch>
		Chip_SCU_PinMuxSet(halTimers[channel].port[output], halTimers[channel].pin[output],
1a003dd2:	79fa      	ldrb	r2, [r7, #7]
1a003dd4:	79b9      	ldrb	r1, [r7, #6]
1a003dd6:	4815      	ldr	r0, [pc, #84]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003dd8:	4613      	mov	r3, r2
1a003dda:	009b      	lsls	r3, r3, #2
1a003ddc:	4413      	add	r3, r2
1a003dde:	00db      	lsls	r3, r3, #3
1a003de0:	4403      	add	r3, r0
1a003de2:	440b      	add	r3, r1
1a003de4:	330c      	adds	r3, #12
1a003de6:	781c      	ldrb	r4, [r3, #0]
1a003de8:	79fa      	ldrb	r2, [r7, #7]
1a003dea:	79b9      	ldrb	r1, [r7, #6]
1a003dec:	480f      	ldr	r0, [pc, #60]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003dee:	4613      	mov	r3, r2
1a003df0:	009b      	lsls	r3, r3, #2
1a003df2:	4413      	add	r3, r2
1a003df4:	00db      	lsls	r3, r3, #3
1a003df6:	4403      	add	r3, r0
1a003df8:	440b      	add	r3, r1
1a003dfa:	330e      	adds	r3, #14
1a003dfc:	781d      	ldrb	r5, [r3, #0]
1a003dfe:	79fa      	ldrb	r2, [r7, #7]
1a003e00:	79b9      	ldrb	r1, [r7, #6]
1a003e02:	480a      	ldr	r0, [pc, #40]	; (1a003e2c <PWMSetWidth+0x27c>)
1a003e04:	4613      	mov	r3, r2
1a003e06:	009b      	lsls	r3, r3, #2
1a003e08:	4413      	add	r3, r2
1a003e0a:	009b      	lsls	r3, r3, #2
1a003e0c:	440b      	add	r3, r1
1a003e0e:	330c      	adds	r3, #12
1a003e10:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
1a003e14:	461a      	mov	r2, r3
1a003e16:	4629      	mov	r1, r5
1a003e18:	4620      	mov	r0, r4
1a003e1a:	f7ff fa3b 	bl	1a003294 <Chip_SCU_PinMuxSet>
				halTimers[channel].timerMode[output]);
	}
	return 0;
1a003e1e:	2300      	movs	r3, #0
}
1a003e20:	4618      	mov	r0, r3
1a003e22:	3710      	adds	r7, #16
1a003e24:	46bd      	mov	sp, r7
1a003e26:	bdb0      	pop	{r4, r5, r7, pc}
1a003e28:	10086518 	.word	0x10086518
1a003e2c:	100874f0 	.word	0x100874f0
1a003e30:	400f4000 	.word	0x400f4000

1a003e34 <Chip_SCU_PinMuxSet>:
 * @return	Nothing
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a003e34:	b480      	push	{r7}
1a003e36:	b083      	sub	sp, #12
1a003e38:	af00      	add	r7, sp, #0
1a003e3a:	4603      	mov	r3, r0
1a003e3c:	71fb      	strb	r3, [r7, #7]
1a003e3e:	460b      	mov	r3, r1
1a003e40:	71bb      	strb	r3, [r7, #6]
1a003e42:	4613      	mov	r3, r2
1a003e44:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003e46:	4807      	ldr	r0, [pc, #28]	; (1a003e64 <Chip_SCU_PinMuxSet+0x30>)
1a003e48:	79f9      	ldrb	r1, [r7, #7]
1a003e4a:	79bb      	ldrb	r3, [r7, #6]
1a003e4c:	88ba      	ldrh	r2, [r7, #4]
1a003e4e:	0149      	lsls	r1, r1, #5
1a003e50:	440b      	add	r3, r1
1a003e52:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a003e56:	bf00      	nop
1a003e58:	370c      	adds	r7, #12
1a003e5a:	46bd      	mov	sp, r7
1a003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003e60:	4770      	bx	lr
1a003e62:	bf00      	nop
1a003e64:	40086000 	.word	0x40086000

1a003e68 <printADCRead>:
#endif

static ADC_CLOCK_SETUP_T adcConfig;
struct sensorTimer * enabledSensors[MAX_SENSORS];

STATIC INLINE void printADCRead(uint8_t sensorId, uint8_t channel) {
1a003e68:	b580      	push	{r7, lr}
1a003e6a:	b084      	sub	sp, #16
1a003e6c:	af00      	add	r7, sp, #0
1a003e6e:	4603      	mov	r3, r0
1a003e70:	460a      	mov	r2, r1
1a003e72:	71fb      	strb	r3, [r7, #7]
1a003e74:	4613      	mov	r3, r2
1a003e76:	71bb      	strb	r3, [r7, #6]
	uint16_t data;
	if (Chip_ADC_ReadValue(LPC_ADC1, channel, &data) == SUCCESS) {
1a003e78:	f107 020e 	add.w	r2, r7, #14
1a003e7c:	79bb      	ldrb	r3, [r7, #6]
1a003e7e:	4619      	mov	r1, r3
1a003e80:	480a      	ldr	r0, [pc, #40]	; (1a003eac <printADCRead+0x44>)
1a003e82:	f00d fea5 	bl	1a011bd0 <Chip_ADC_ReadValue>
1a003e86:	4603      	mov	r3, r0
1a003e88:	2b01      	cmp	r3, #1
1a003e8a:	d106      	bne.n	1a003e9a <printADCRead+0x32>
		xprintf("-S%d %u\n", sensorId, data);
1a003e8c:	79fb      	ldrb	r3, [r7, #7]
1a003e8e:	89fa      	ldrh	r2, [r7, #14]
1a003e90:	4619      	mov	r1, r3
1a003e92:	4807      	ldr	r0, [pc, #28]	; (1a003eb0 <printADCRead+0x48>)
1a003e94:	f002 fef6 	bl	1a006c84 <xprintf>
	} else {
		xprintf("-S%d -1\n", sensorId);
	}
}
1a003e98:	e004      	b.n	1a003ea4 <printADCRead+0x3c>
STATIC INLINE void printADCRead(uint8_t sensorId, uint8_t channel) {
	uint16_t data;
	if (Chip_ADC_ReadValue(LPC_ADC1, channel, &data) == SUCCESS) {
		xprintf("-S%d %u\n", sensorId, data);
	} else {
		xprintf("-S%d -1\n", sensorId);
1a003e9a:	79fb      	ldrb	r3, [r7, #7]
1a003e9c:	4619      	mov	r1, r3
1a003e9e:	4805      	ldr	r0, [pc, #20]	; (1a003eb4 <printADCRead+0x4c>)
1a003ea0:	f002 fef0 	bl	1a006c84 <xprintf>
	}
}
1a003ea4:	bf00      	nop
1a003ea6:	3710      	adds	r7, #16
1a003ea8:	46bd      	mov	sp, r7
1a003eaa:	bd80      	pop	{r7, pc}
1a003eac:	400e4000 	.word	0x400e4000
1a003eb0:	1a0188f4 	.word	0x1a0188f4
1a003eb4:	1a018900 	.word	0x1a018900

1a003eb8 <batteryInit>:

void batteryInit() {
1a003eb8:	b580      	push	{r7, lr}
1a003eba:	af00      	add	r7, sp, #0
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_START_NOW, ADC_TRIGGERMODE_RISING); //This must be before the burst cmd
1a003ebc:	2200      	movs	r2, #0
1a003ebe:	2101      	movs	r1, #1
1a003ec0:	4806      	ldr	r0, [pc, #24]	; (1a003edc <batteryInit+0x24>)
1a003ec2:	f00d fe97 	bl	1a011bf4 <Chip_ADC_SetStartMode>
	Chip_ADC_SetBurstCmd(LPC_ADC1, ENABLE);
1a003ec6:	2101      	movs	r1, #1
1a003ec8:	4804      	ldr	r0, [pc, #16]	; (1a003edc <batteryInit+0x24>)
1a003eca:	f00d fee7 	bl	1a011c9c <Chip_ADC_SetBurstCmd>
	Chip_ADC_EnableChannel(LPC_ADC1, 1, ENABLE);
1a003ece:	2201      	movs	r2, #1
1a003ed0:	2101      	movs	r1, #1
1a003ed2:	4802      	ldr	r0, [pc, #8]	; (1a003edc <batteryInit+0x24>)
1a003ed4:	f00d feb6 	bl	1a011c44 <Chip_ADC_EnableChannel>
}
1a003ed8:	bf00      	nop
1a003eda:	bd80      	pop	{r7, pc}
1a003edc:	400e4000 	.word	0x400e4000

1a003ee0 <batteryReport>:

#define VBAT_DIVISOR		(11)
void batteryReport() {
1a003ee0:	b580      	push	{r7, lr}
1a003ee2:	b082      	sub	sp, #8
1a003ee4:	af00      	add	r7, sp, #0
	uint16_t adcRead;
	if (Chip_ADC_ReadValue(LPC_ADC1, 1, &adcRead) == SUCCESS) {
1a003ee6:	1cbb      	adds	r3, r7, #2
1a003ee8:	461a      	mov	r2, r3
1a003eea:	2101      	movs	r1, #1
1a003eec:	480c      	ldr	r0, [pc, #48]	; (1a003f20 <batteryReport+0x40>)
1a003eee:	f00d fe6f 	bl	1a011bd0 <Chip_ADC_ReadValue>
1a003ef2:	4603      	mov	r3, r0
1a003ef4:	2b01      	cmp	r3, #1
1a003ef6:	d10c      	bne.n	1a003f12 <batteryReport+0x32>
		uint32_t data = (adcRead * 2800 * VBAT_DIVISOR) >> 10; //divide by 1024
1a003ef8:	887b      	ldrh	r3, [r7, #2]
1a003efa:	461a      	mov	r2, r3
1a003efc:	f647 0350 	movw	r3, #30800	; 0x7850
1a003f00:	fb03 f302 	mul.w	r3, r3, r2
1a003f04:	129b      	asrs	r3, r3, #10
1a003f06:	607b      	str	r3, [r7, #4]
		xprintf("-S0 %u\n", data);
1a003f08:	6879      	ldr	r1, [r7, #4]
1a003f0a:	4806      	ldr	r0, [pc, #24]	; (1a003f24 <batteryReport+0x44>)
1a003f0c:	f002 feba 	bl	1a006c84 <xprintf>
	} else {
		xputs("-S0 -1\n");
	}
}
1a003f10:	e002      	b.n	1a003f18 <batteryReport+0x38>
	uint16_t adcRead;
	if (Chip_ADC_ReadValue(LPC_ADC1, 1, &adcRead) == SUCCESS) {
		uint32_t data = (adcRead * 2800 * VBAT_DIVISOR) >> 10; //divide by 1024
		xprintf("-S0 %u\n", data);
	} else {
		xputs("-S0 -1\n");
1a003f12:	4805      	ldr	r0, [pc, #20]	; (1a003f28 <batteryReport+0x48>)
1a003f14:	f002 fd26 	bl	1a006964 <xputs>
	}
}
1a003f18:	bf00      	nop
1a003f1a:	3708      	adds	r7, #8
1a003f1c:	46bd      	mov	sp, r7
1a003f1e:	bd80      	pop	{r7, pc}
1a003f20:	400e4000 	.word	0x400e4000
1a003f24:	1a01890c 	.word	0x1a01890c
1a003f28:	1a018914 	.word	0x1a018914

1a003f2c <ADC0Init>:

void ADC0Init() {
1a003f2c:	b580      	push	{r7, lr}
1a003f2e:	af00      	add	r7, sp, #0
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_START_NOW, ADC_TRIGGERMODE_RISING); //This must be before the burst cmd
1a003f30:	2200      	movs	r2, #0
1a003f32:	2101      	movs	r1, #1
1a003f34:	4806      	ldr	r0, [pc, #24]	; (1a003f50 <ADC0Init+0x24>)
1a003f36:	f00d fe5d 	bl	1a011bf4 <Chip_ADC_SetStartMode>
	Chip_ADC_SetBurstCmd(LPC_ADC1, ENABLE);
1a003f3a:	2101      	movs	r1, #1
1a003f3c:	4804      	ldr	r0, [pc, #16]	; (1a003f50 <ADC0Init+0x24>)
1a003f3e:	f00d fead 	bl	1a011c9c <Chip_ADC_SetBurstCmd>
	Chip_ADC_EnableChannel(LPC_ADC1, 2, ENABLE);
1a003f42:	2201      	movs	r2, #1
1a003f44:	2102      	movs	r1, #2
1a003f46:	4802      	ldr	r0, [pc, #8]	; (1a003f50 <ADC0Init+0x24>)
1a003f48:	f00d fe7c 	bl	1a011c44 <Chip_ADC_EnableChannel>
}
1a003f4c:	bf00      	nop
1a003f4e:	bd80      	pop	{r7, pc}
1a003f50:	400e4000 	.word	0x400e4000

1a003f54 <ADC0Report>:
void ADC0Report() {
1a003f54:	b580      	push	{r7, lr}
1a003f56:	af00      	add	r7, sp, #0
	printADCRead(1, 2);
1a003f58:	2102      	movs	r1, #2
1a003f5a:	2001      	movs	r0, #1
1a003f5c:	f7ff ff84 	bl	1a003e68 <printADCRead>
}
1a003f60:	bf00      	nop
1a003f62:	bd80      	pop	{r7, pc}

1a003f64 <ADC1Init>:
void ADC1Init() {
1a003f64:	b580      	push	{r7, lr}
1a003f66:	af00      	add	r7, sp, #0
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_START_NOW, ADC_TRIGGERMODE_RISING); //This must be before the burst cmd
1a003f68:	2200      	movs	r2, #0
1a003f6a:	2101      	movs	r1, #1
1a003f6c:	4806      	ldr	r0, [pc, #24]	; (1a003f88 <ADC1Init+0x24>)
1a003f6e:	f00d fe41 	bl	1a011bf4 <Chip_ADC_SetStartMode>
	Chip_ADC_SetBurstCmd(LPC_ADC1, ENABLE);
1a003f72:	2101      	movs	r1, #1
1a003f74:	4804      	ldr	r0, [pc, #16]	; (1a003f88 <ADC1Init+0x24>)
1a003f76:	f00d fe91 	bl	1a011c9c <Chip_ADC_SetBurstCmd>
	Chip_ADC_EnableChannel(LPC_ADC1, 3, ENABLE);
1a003f7a:	2201      	movs	r2, #1
1a003f7c:	2103      	movs	r1, #3
1a003f7e:	4802      	ldr	r0, [pc, #8]	; (1a003f88 <ADC1Init+0x24>)
1a003f80:	f00d fe60 	bl	1a011c44 <Chip_ADC_EnableChannel>
}
1a003f84:	bf00      	nop
1a003f86:	bd80      	pop	{r7, pc}
1a003f88:	400e4000 	.word	0x400e4000

1a003f8c <ADC1Report>:
void ADC1Report() {
1a003f8c:	b580      	push	{r7, lr}
1a003f8e:	af00      	add	r7, sp, #0
	printADCRead(2, 3);
1a003f90:	2103      	movs	r1, #3
1a003f92:	2002      	movs	r0, #2
1a003f94:	f7ff ff68 	bl	1a003e68 <printADCRead>
}
1a003f98:	bf00      	nop
1a003f9a:	bd80      	pop	{r7, pc}

1a003f9c <ADC2Init>:

void ADC2Init() {
1a003f9c:	b580      	push	{r7, lr}
1a003f9e:	af00      	add	r7, sp, #0
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_START_NOW, ADC_TRIGGERMODE_RISING); //This must be before the burst cmd
1a003fa0:	2200      	movs	r2, #0
1a003fa2:	2101      	movs	r1, #1
1a003fa4:	4806      	ldr	r0, [pc, #24]	; (1a003fc0 <ADC2Init+0x24>)
1a003fa6:	f00d fe25 	bl	1a011bf4 <Chip_ADC_SetStartMode>
	Chip_ADC_SetBurstCmd(LPC_ADC1, ENABLE);
1a003faa:	2101      	movs	r1, #1
1a003fac:	4804      	ldr	r0, [pc, #16]	; (1a003fc0 <ADC2Init+0x24>)
1a003fae:	f00d fe75 	bl	1a011c9c <Chip_ADC_SetBurstCmd>
	Chip_ADC_EnableChannel(LPC_ADC1, 4, ENABLE);
1a003fb2:	2201      	movs	r2, #1
1a003fb4:	2104      	movs	r1, #4
1a003fb6:	4802      	ldr	r0, [pc, #8]	; (1a003fc0 <ADC2Init+0x24>)
1a003fb8:	f00d fe44 	bl	1a011c44 <Chip_ADC_EnableChannel>
}
1a003fbc:	bf00      	nop
1a003fbe:	bd80      	pop	{r7, pc}
1a003fc0:	400e4000 	.word	0x400e4000

1a003fc4 <ADC2Report>:
void ADC2Report() {
1a003fc4:	b580      	push	{r7, lr}
1a003fc6:	af00      	add	r7, sp, #0
	printADCRead(3, 4);
1a003fc8:	2104      	movs	r1, #4
1a003fca:	2003      	movs	r0, #3
1a003fcc:	f7ff ff4c 	bl	1a003e68 <printADCRead>
}
1a003fd0:	bf00      	nop
1a003fd2:	bd80      	pop	{r7, pc}

1a003fd4 <ADC3Init>:
void ADC3Init() {
1a003fd4:	b580      	push	{r7, lr}
1a003fd6:	af00      	add	r7, sp, #0
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_START_NOW, ADC_TRIGGERMODE_RISING); //This must be before the burst cmd
1a003fd8:	2200      	movs	r2, #0
1a003fda:	2101      	movs	r1, #1
1a003fdc:	4806      	ldr	r0, [pc, #24]	; (1a003ff8 <ADC3Init+0x24>)
1a003fde:	f00d fe09 	bl	1a011bf4 <Chip_ADC_SetStartMode>
	Chip_ADC_SetBurstCmd(LPC_ADC1, ENABLE);
1a003fe2:	2101      	movs	r1, #1
1a003fe4:	4804      	ldr	r0, [pc, #16]	; (1a003ff8 <ADC3Init+0x24>)
1a003fe6:	f00d fe59 	bl	1a011c9c <Chip_ADC_SetBurstCmd>
	Chip_ADC_EnableChannel(LPC_ADC1, 5, ENABLE);
1a003fea:	2201      	movs	r2, #1
1a003fec:	2105      	movs	r1, #5
1a003fee:	4802      	ldr	r0, [pc, #8]	; (1a003ff8 <ADC3Init+0x24>)
1a003ff0:	f00d fe28 	bl	1a011c44 <Chip_ADC_EnableChannel>
}
1a003ff4:	bf00      	nop
1a003ff6:	bd80      	pop	{r7, pc}
1a003ff8:	400e4000 	.word	0x400e4000

1a003ffc <ADC3Report>:
void ADC3Report() {
1a003ffc:	b580      	push	{r7, lr}
1a003ffe:	af00      	add	r7, sp, #0
	printADCRead(4, 5);
1a004000:	2105      	movs	r1, #5
1a004002:	2004      	movs	r0, #4
1a004004:	f7ff ff30 	bl	1a003e68 <printADCRead>
}
1a004008:	bf00      	nop
1a00400a:	bd80      	pop	{r7, pc}

1a00400c <ADC4Init>:
void ADC4Init() {
1a00400c:	b580      	push	{r7, lr}
1a00400e:	af00      	add	r7, sp, #0
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_START_NOW, ADC_TRIGGERMODE_RISING); //This must be before the burst cmd
1a004010:	2200      	movs	r2, #0
1a004012:	2101      	movs	r1, #1
1a004014:	4806      	ldr	r0, [pc, #24]	; (1a004030 <ADC4Init+0x24>)
1a004016:	f00d fded 	bl	1a011bf4 <Chip_ADC_SetStartMode>
	Chip_ADC_SetBurstCmd(LPC_ADC1, ENABLE);
1a00401a:	2101      	movs	r1, #1
1a00401c:	4804      	ldr	r0, [pc, #16]	; (1a004030 <ADC4Init+0x24>)
1a00401e:	f00d fe3d 	bl	1a011c9c <Chip_ADC_SetBurstCmd>
	Chip_ADC_EnableChannel(LPC_ADC1, 6, ENABLE);
1a004022:	2201      	movs	r2, #1
1a004024:	2106      	movs	r1, #6
1a004026:	4802      	ldr	r0, [pc, #8]	; (1a004030 <ADC4Init+0x24>)
1a004028:	f00d fe0c 	bl	1a011c44 <Chip_ADC_EnableChannel>
}
1a00402c:	bf00      	nop
1a00402e:	bd80      	pop	{r7, pc}
1a004030:	400e4000 	.word	0x400e4000

1a004034 <ADC4Report>:
void ADC4Report() {
1a004034:	b580      	push	{r7, lr}
1a004036:	af00      	add	r7, sp, #0
	printADCRead(5, 6);
1a004038:	2106      	movs	r1, #6
1a00403a:	2005      	movs	r0, #5
1a00403c:	f7ff ff14 	bl	1a003e68 <printADCRead>
}
1a004040:	bf00      	nop
1a004042:	bd80      	pop	{r7, pc}

1a004044 <ADC5Init>:
void ADC5Init() {
1a004044:	b580      	push	{r7, lr}
1a004046:	af00      	add	r7, sp, #0
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_START_NOW, ADC_TRIGGERMODE_RISING); //This must be before the burst cmd
1a004048:	2200      	movs	r2, #0
1a00404a:	2101      	movs	r1, #1
1a00404c:	4806      	ldr	r0, [pc, #24]	; (1a004068 <ADC5Init+0x24>)
1a00404e:	f00d fdd1 	bl	1a011bf4 <Chip_ADC_SetStartMode>
	Chip_ADC_SetBurstCmd(LPC_ADC1, ENABLE);
1a004052:	2101      	movs	r1, #1
1a004054:	4804      	ldr	r0, [pc, #16]	; (1a004068 <ADC5Init+0x24>)
1a004056:	f00d fe21 	bl	1a011c9c <Chip_ADC_SetBurstCmd>
	Chip_ADC_EnableChannel(LPC_ADC1, 7, ENABLE);
1a00405a:	2201      	movs	r2, #1
1a00405c:	2107      	movs	r1, #7
1a00405e:	4802      	ldr	r0, [pc, #8]	; (1a004068 <ADC5Init+0x24>)
1a004060:	f00d fdf0 	bl	1a011c44 <Chip_ADC_EnableChannel>
}
1a004064:	bf00      	nop
1a004066:	bd80      	pop	{r7, pc}
1a004068:	400e4000 	.word	0x400e4000

1a00406c <ADC5Report>:
void ADC5Report() {
1a00406c:	b580      	push	{r7, lr}
1a00406e:	af00      	add	r7, sp, #0
	printADCRead(6, 7);
1a004070:	2107      	movs	r1, #7
1a004072:	2006      	movs	r0, #6
1a004074:	f7ff fef8 	bl	1a003e68 <printADCRead>
}
1a004078:	bf00      	nop
1a00407a:	bd80      	pop	{r7, pc}

1a00407c <MotorPWMReport>:

void MotorPWMReport() {
1a00407c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00407e:	b083      	sub	sp, #12
1a004080:	af02      	add	r7, sp, #8
	xprintf("-S%d %d %d %d %d\n", PWM_SIGNALS, getMotorWidth(MOTOR0), getMotorWidth(MOTOR1), getMotorDutycycle(MOTOR0),
1a004082:	2000      	movs	r0, #0
1a004084:	f7fd fd0e 	bl	1a001aa4 <getMotorWidth>
1a004088:	4605      	mov	r5, r0
1a00408a:	2001      	movs	r0, #1
1a00408c:	f7fd fd0a 	bl	1a001aa4 <getMotorWidth>
1a004090:	4606      	mov	r6, r0
1a004092:	2000      	movs	r0, #0
1a004094:	f7fd fcda 	bl	1a001a4c <getMotorDutycycle>
1a004098:	4604      	mov	r4, r0
1a00409a:	2001      	movs	r0, #1
1a00409c:	f7fd fcd6 	bl	1a001a4c <getMotorDutycycle>
1a0040a0:	4603      	mov	r3, r0
1a0040a2:	9301      	str	r3, [sp, #4]
1a0040a4:	9400      	str	r4, [sp, #0]
1a0040a6:	4633      	mov	r3, r6
1a0040a8:	462a      	mov	r2, r5
1a0040aa:	2113      	movs	r1, #19
1a0040ac:	4803      	ldr	r0, [pc, #12]	; (1a0040bc <MotorPWMReport+0x40>)
1a0040ae:	f002 fde9 	bl	1a006c84 <xprintf>
			getMotorDutycycle(MOTOR1));
}
1a0040b2:	bf00      	nop
1a0040b4:	3704      	adds	r7, #4
1a0040b6:	46bd      	mov	sp, r7
1a0040b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0040ba:	bf00      	nop
1a0040bc:	1a01891c 	.word	0x1a01891c

1a0040c0 <MotorCurrentsInit>:

void MotorCurrentsInit() {
1a0040c0:	b580      	push	{r7, lr}
1a0040c2:	af00      	add	r7, sp, #0
	Chip_SCU_PinMuxSet(MOTOR_DRIVER_CURRENT1_SENSOR_PORT, MOTOR_DRIVER_CURRENT1_SENSOR_PIN, SCU_MODE_INACT | FUNC7);
1a0040c4:	2217      	movs	r2, #23
1a0040c6:	2101      	movs	r1, #1
1a0040c8:	2004      	movs	r0, #4
1a0040ca:	f7ff feb3 	bl	1a003e34 <Chip_SCU_PinMuxSet>
	Chip_SCU_PinMuxSet(MOTOR_DRIVER_CURRENT2_SENSOR_PORT, MOTOR_DRIVER_CURRENT2_SENSOR_PIN, SCU_MODE_INACT | FUNC7);
1a0040ce:	2217      	movs	r2, #23
1a0040d0:	2103      	movs	r1, #3
1a0040d2:	2004      	movs	r0, #4
1a0040d4:	f7ff feae 	bl	1a003e34 <Chip_SCU_PinMuxSet>
	LPC_SCU->ENAIO[0] |= 0x3; //Enable Analog function on these GPIO pins.
1a0040d8:	4a0e      	ldr	r2, [pc, #56]	; (1a004114 <MotorCurrentsInit+0x54>)
1a0040da:	4b0e      	ldr	r3, [pc, #56]	; (1a004114 <MotorCurrentsInit+0x54>)
1a0040dc:	f8d3 3c88 	ldr.w	r3, [r3, #3208]	; 0xc88
1a0040e0:	f043 0303 	orr.w	r3, r3, #3
1a0040e4:	f8c2 3c88 	str.w	r3, [r2, #3208]	; 0xc88
	Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING); //This must be before the burst cmd
1a0040e8:	2200      	movs	r2, #0
1a0040ea:	2101      	movs	r1, #1
1a0040ec:	480a      	ldr	r0, [pc, #40]	; (1a004118 <MotorCurrentsInit+0x58>)
1a0040ee:	f00d fd81 	bl	1a011bf4 <Chip_ADC_SetStartMode>
	Chip_ADC_SetBurstCmd(LPC_ADC0, ENABLE);
1a0040f2:	2101      	movs	r1, #1
1a0040f4:	4808      	ldr	r0, [pc, #32]	; (1a004118 <MotorCurrentsInit+0x58>)
1a0040f6:	f00d fdd1 	bl	1a011c9c <Chip_ADC_SetBurstCmd>
	Chip_ADC_EnableChannel(LPC_ADC0, 0, ENABLE);
1a0040fa:	2201      	movs	r2, #1
1a0040fc:	2100      	movs	r1, #0
1a0040fe:	4806      	ldr	r0, [pc, #24]	; (1a004118 <MotorCurrentsInit+0x58>)
1a004100:	f00d fda0 	bl	1a011c44 <Chip_ADC_EnableChannel>
	Chip_ADC_EnableChannel(LPC_ADC0, 1, ENABLE);
1a004104:	2201      	movs	r2, #1
1a004106:	2101      	movs	r1, #1
1a004108:	4803      	ldr	r0, [pc, #12]	; (1a004118 <MotorCurrentsInit+0x58>)
1a00410a:	f00d fd9b 	bl	1a011c44 <Chip_ADC_EnableChannel>
}
1a00410e:	bf00      	nop
1a004110:	bd80      	pop	{r7, pc}
1a004112:	bf00      	nop
1a004114:	40086000 	.word	0x40086000
1a004118:	400e3000 	.word	0x400e3000

1a00411c <MotorCurrentsReport>:
#define AMPLIFIER_GAIN		(46454ULL) //(1+100k/2.2k)*10
#define SENSE_RESISTOR		(10ULL)
void MotorCurrentsReport() {
1a00411c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a004120:	b089      	sub	sp, #36	; 0x24
1a004122:	af02      	add	r7, sp, #8
	uint16_t motor0, motor1;
	uint64_t motor0Current = -1;
1a004124:	f04f 33ff 	mov.w	r3, #4294967295
1a004128:	f04f 34ff 	mov.w	r4, #4294967295
1a00412c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	uint64_t motor1Current = -1;
1a004130:	f04f 33ff 	mov.w	r3, #4294967295
1a004134:	f04f 34ff 	mov.w	r4, #4294967295
1a004138:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if (Chip_ADC_ReadValue(LPC_ADC0, 0, &motor0) == SUCCESS) {
1a00413c:	1dbb      	adds	r3, r7, #6
1a00413e:	461a      	mov	r2, r3
1a004140:	2100      	movs	r1, #0
1a004142:	4830      	ldr	r0, [pc, #192]	; (1a004204 <MotorCurrentsReport+0xe8>)
1a004144:	f00d fd44 	bl	1a011bd0 <Chip_ADC_ReadValue>
1a004148:	4603      	mov	r3, r0
1a00414a:	2b01      	cmp	r3, #1
1a00414c:	d121      	bne.n	1a004192 <MotorCurrentsReport+0x76>
		motor0Current = ((motor0 * 2800ULL * AMPLIFIER_GAIN * SENSE_RESISTOR) >> 10) / 1000ULL;
1a00414e:	88fb      	ldrh	r3, [r7, #6]
1a004150:	b29b      	uxth	r3, r3
1a004152:	f04f 0400 	mov.w	r4, #0
1a004156:	4a2c      	ldr	r2, [pc, #176]	; (1a004208 <MotorCurrentsReport+0xec>)
1a004158:	fb02 f104 	mul.w	r1, r2, r4
1a00415c:	2200      	movs	r2, #0
1a00415e:	fb02 f203 	mul.w	r2, r2, r3
1a004162:	440a      	add	r2, r1
1a004164:	4928      	ldr	r1, [pc, #160]	; (1a004208 <MotorCurrentsReport+0xec>)
1a004166:	fba3 3401 	umull	r3, r4, r3, r1
1a00416a:	4422      	add	r2, r4
1a00416c:	4614      	mov	r4, r2
1a00416e:	ea4f 2893 	mov.w	r8, r3, lsr #10
1a004172:	ea48 5884 	orr.w	r8, r8, r4, lsl #22
1a004176:	ea4f 2994 	mov.w	r9, r4, lsr #10
1a00417a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00417e:	f04f 0300 	mov.w	r3, #0
1a004182:	4640      	mov	r0, r8
1a004184:	4649      	mov	r1, r9
1a004186:	f010 fb17 	bl	1a0147b8 <__aeabi_uldivmod>
1a00418a:	4603      	mov	r3, r0
1a00418c:	460c      	mov	r4, r1
1a00418e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}
	if (Chip_ADC_ReadValue(LPC_ADC0, 1, &motor1) == SUCCESS) {
1a004192:	1d3b      	adds	r3, r7, #4
1a004194:	461a      	mov	r2, r3
1a004196:	2101      	movs	r1, #1
1a004198:	481a      	ldr	r0, [pc, #104]	; (1a004204 <MotorCurrentsReport+0xe8>)
1a00419a:	f00d fd19 	bl	1a011bd0 <Chip_ADC_ReadValue>
1a00419e:	4603      	mov	r3, r0
1a0041a0:	2b01      	cmp	r3, #1
1a0041a2:	d11f      	bne.n	1a0041e4 <MotorCurrentsReport+0xc8>
		motor1Current = ((motor1 * 2800ULL * AMPLIFIER_GAIN * SENSE_RESISTOR) >> 10) / 1000ULL;
1a0041a4:	88bb      	ldrh	r3, [r7, #4]
1a0041a6:	b29b      	uxth	r3, r3
1a0041a8:	f04f 0400 	mov.w	r4, #0
1a0041ac:	4a16      	ldr	r2, [pc, #88]	; (1a004208 <MotorCurrentsReport+0xec>)
1a0041ae:	fb02 f104 	mul.w	r1, r2, r4
1a0041b2:	2200      	movs	r2, #0
1a0041b4:	fb02 f203 	mul.w	r2, r2, r3
1a0041b8:	440a      	add	r2, r1
1a0041ba:	4913      	ldr	r1, [pc, #76]	; (1a004208 <MotorCurrentsReport+0xec>)
1a0041bc:	fba3 3401 	umull	r3, r4, r3, r1
1a0041c0:	4422      	add	r2, r4
1a0041c2:	4614      	mov	r4, r2
1a0041c4:	0a9d      	lsrs	r5, r3, #10
1a0041c6:	ea45 5584 	orr.w	r5, r5, r4, lsl #22
1a0041ca:	0aa6      	lsrs	r6, r4, #10
1a0041cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0041d0:	f04f 0300 	mov.w	r3, #0
1a0041d4:	4628      	mov	r0, r5
1a0041d6:	4631      	mov	r1, r6
1a0041d8:	f010 faee 	bl	1a0147b8 <__aeabi_uldivmod>
1a0041dc:	4603      	mov	r3, r0
1a0041de:	460c      	mov	r4, r1
1a0041e0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	}
	xprintf("-S%d %u %u\n", MOTOR_CURRENTS, motor0Current, motor1Current);
1a0041e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
1a0041e8:	e9cd 3400 	strd	r3, r4, [sp]
1a0041ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
1a0041f0:	2114      	movs	r1, #20
1a0041f2:	4806      	ldr	r0, [pc, #24]	; (1a00420c <MotorCurrentsReport+0xf0>)
1a0041f4:	f002 fd46 	bl	1a006c84 <xprintf>
}
1a0041f8:	bf00      	nop
1a0041fa:	371c      	adds	r7, #28
1a0041fc:	46bd      	mov	sp, r7
1a0041fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a004202:	bf00      	nop
1a004204:	400e3000 	.word	0x400e3000
1a004208:	4d874a40 	.word	0x4d874a40
1a00420c:	1a018930 	.word	0x1a018930

1a004210 <EventCountReport>:

void EventCountReport() {
1a004210:	b580      	push	{r7, lr}
1a004212:	af00      	add	r7, sp, #0
#if USE_SDCARD
	xprintf("-S%d %d %d %d\n", EVENT_RATE, lastEventCount, lastEventRecordedCount, lastByteCount);
#else
	xprintf("-S%d %d\n", EVENT_RATE, lastEventCount);
1a004214:	4b04      	ldr	r3, [pc, #16]	; (1a004228 <EventCountReport+0x18>)
1a004216:	681b      	ldr	r3, [r3, #0]
1a004218:	461a      	mov	r2, r3
1a00421a:	2115      	movs	r1, #21
1a00421c:	4803      	ldr	r0, [pc, #12]	; (1a00422c <EventCountReport+0x1c>)
1a00421e:	f002 fd31 	bl	1a006c84 <xprintf>
#endif
}
1a004222:	bf00      	nop
1a004224:	bd80      	pop	{r7, pc}
1a004226:	bf00      	nop
1a004228:	1008657c 	.word	0x1008657c
1a00422c:	1a01893c 	.word	0x1a01893c

1a004230 <sensorsInit>:

void sensorsInit(void) {
1a004230:	b580      	push	{r7, lr}
1a004232:	b082      	sub	sp, #8
1a004234:	af00      	add	r7, sp, #0
	Chip_ADC_Init(LPC_ADC0, &adcConfig);
1a004236:	4963      	ldr	r1, [pc, #396]	; (1a0043c4 <sensorsInit+0x194>)
1a004238:	4863      	ldr	r0, [pc, #396]	; (1a0043c8 <sensorsInit+0x198>)
1a00423a:	f00d fc85 	bl	1a011b48 <Chip_ADC_Init>
	Chip_ADC_SetStartMode(LPC_ADC0, ADC_NO_START, ADC_TRIGGERMODE_RISING);
1a00423e:	2200      	movs	r2, #0
1a004240:	2100      	movs	r1, #0
1a004242:	4861      	ldr	r0, [pc, #388]	; (1a0043c8 <sensorsInit+0x198>)
1a004244:	f00d fcd6 	bl	1a011bf4 <Chip_ADC_SetStartMode>
	Chip_ADC_Init(LPC_ADC1, &adcConfig);
1a004248:	495e      	ldr	r1, [pc, #376]	; (1a0043c4 <sensorsInit+0x194>)
1a00424a:	4860      	ldr	r0, [pc, #384]	; (1a0043cc <sensorsInit+0x19c>)
1a00424c:	f00d fc7c 	bl	1a011b48 <Chip_ADC_Init>
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_NO_START, ADC_TRIGGERMODE_RISING);
1a004250:	2200      	movs	r2, #0
1a004252:	2100      	movs	r1, #0
1a004254:	485d      	ldr	r0, [pc, #372]	; (1a0043cc <sensorsInit+0x19c>)
1a004256:	f00d fccd 	bl	1a011bf4 <Chip_ADC_SetStartMode>

	sensorRefreshRequested = 0;
1a00425a:	4b5d      	ldr	r3, [pc, #372]	; (1a0043d0 <sensorsInit+0x1a0>)
1a00425c:	2200      	movs	r2, #0
1a00425e:	701a      	strb	r2, [r3, #0]
	sensorsEnabledCounter = 0;
1a004260:	4b5c      	ldr	r3, [pc, #368]	; (1a0043d4 <sensorsInit+0x1a4>)
1a004262:	2200      	movs	r2, #0
1a004264:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_SENSORS; ++i) {
1a004266:	2300      	movs	r3, #0
1a004268:	607b      	str	r3, [r7, #4]
1a00426a:	e04d      	b.n	1a004308 <sensorsInit+0xd8>
		enabledSensors[i] = NULL;
1a00426c:	4a5a      	ldr	r2, [pc, #360]	; (1a0043d8 <sensorsInit+0x1a8>)
1a00426e:	687b      	ldr	r3, [r7, #4]
1a004270:	2100      	movs	r1, #0
1a004272:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sensorsTimers[i].initialized = false;
1a004276:	4959      	ldr	r1, [pc, #356]	; (1a0043dc <sensorsInit+0x1ac>)
1a004278:	687a      	ldr	r2, [r7, #4]
1a00427a:	4613      	mov	r3, r2
1a00427c:	009b      	lsls	r3, r3, #2
1a00427e:	4413      	add	r3, r2
1a004280:	009b      	lsls	r3, r3, #2
1a004282:	440b      	add	r3, r1
1a004284:	2200      	movs	r2, #0
1a004286:	701a      	strb	r2, [r3, #0]
		sensorsTimers[i].triggered = false;
1a004288:	4954      	ldr	r1, [pc, #336]	; (1a0043dc <sensorsInit+0x1ac>)
1a00428a:	687a      	ldr	r2, [r7, #4]
1a00428c:	4613      	mov	r3, r2
1a00428e:	009b      	lsls	r3, r3, #2
1a004290:	4413      	add	r3, r2
1a004292:	009b      	lsls	r3, r3, #2
1a004294:	440b      	add	r3, r1
1a004296:	3301      	adds	r3, #1
1a004298:	2200      	movs	r2, #0
1a00429a:	701a      	strb	r2, [r3, #0]
		sensorsTimers[i].reload = 0;
1a00429c:	494f      	ldr	r1, [pc, #316]	; (1a0043dc <sensorsInit+0x1ac>)
1a00429e:	687a      	ldr	r2, [r7, #4]
1a0042a0:	4613      	mov	r3, r2
1a0042a2:	009b      	lsls	r3, r3, #2
1a0042a4:	4413      	add	r3, r2
1a0042a6:	009b      	lsls	r3, r3, #2
1a0042a8:	440b      	add	r3, r1
1a0042aa:	3304      	adds	r3, #4
1a0042ac:	2200      	movs	r2, #0
1a0042ae:	601a      	str	r2, [r3, #0]
		sensorsTimers[i].counter = 0;
1a0042b0:	494a      	ldr	r1, [pc, #296]	; (1a0043dc <sensorsInit+0x1ac>)
1a0042b2:	687a      	ldr	r2, [r7, #4]
1a0042b4:	4613      	mov	r3, r2
1a0042b6:	009b      	lsls	r3, r3, #2
1a0042b8:	4413      	add	r3, r2
1a0042ba:	009b      	lsls	r3, r3, #2
1a0042bc:	440b      	add	r3, r1
1a0042be:	3308      	adds	r3, #8
1a0042c0:	2200      	movs	r2, #0
1a0042c2:	601a      	str	r2, [r3, #0]
		sensorsTimers[i].position = -1;
1a0042c4:	4945      	ldr	r1, [pc, #276]	; (1a0043dc <sensorsInit+0x1ac>)
1a0042c6:	687a      	ldr	r2, [r7, #4]
1a0042c8:	4613      	mov	r3, r2
1a0042ca:	009b      	lsls	r3, r3, #2
1a0042cc:	4413      	add	r3, r2
1a0042ce:	009b      	lsls	r3, r3, #2
1a0042d0:	440b      	add	r3, r1
1a0042d2:	3302      	adds	r3, #2
1a0042d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a0042d8:	801a      	strh	r2, [r3, #0]
		sensorsTimers[i].init = NULL;
1a0042da:	4940      	ldr	r1, [pc, #256]	; (1a0043dc <sensorsInit+0x1ac>)
1a0042dc:	687a      	ldr	r2, [r7, #4]
1a0042de:	4613      	mov	r3, r2
1a0042e0:	009b      	lsls	r3, r3, #2
1a0042e2:	4413      	add	r3, r2
1a0042e4:	009b      	lsls	r3, r3, #2
1a0042e6:	440b      	add	r3, r1
1a0042e8:	330c      	adds	r3, #12
1a0042ea:	2200      	movs	r2, #0
1a0042ec:	601a      	str	r2, [r3, #0]
		sensorsTimers[i].refresh = NULL;
1a0042ee:	493b      	ldr	r1, [pc, #236]	; (1a0043dc <sensorsInit+0x1ac>)
1a0042f0:	687a      	ldr	r2, [r7, #4]
1a0042f2:	4613      	mov	r3, r2
1a0042f4:	009b      	lsls	r3, r3, #2
1a0042f6:	4413      	add	r3, r2
1a0042f8:	009b      	lsls	r3, r3, #2
1a0042fa:	440b      	add	r3, r1
1a0042fc:	3310      	adds	r3, #16
1a0042fe:	2200      	movs	r2, #0
1a004300:	601a      	str	r2, [r3, #0]
	Chip_ADC_Init(LPC_ADC1, &adcConfig);
	Chip_ADC_SetStartMode(LPC_ADC1, ADC_NO_START, ADC_TRIGGERMODE_RISING);

	sensorRefreshRequested = 0;
	sensorsEnabledCounter = 0;
	for (int i = 0; i < MAX_SENSORS; ++i) {
1a004302:	687b      	ldr	r3, [r7, #4]
1a004304:	3301      	adds	r3, #1
1a004306:	607b      	str	r3, [r7, #4]
1a004308:	687b      	ldr	r3, [r7, #4]
1a00430a:	2b1f      	cmp	r3, #31
1a00430c:	ddae      	ble.n	1a00426c <sensorsInit+0x3c>
		sensorsTimers[i].position = -1;
		sensorsTimers[i].init = NULL;
		sensorsTimers[i].refresh = NULL;

	}
	sensorsTimers[BATTERY].init = batteryInit;
1a00430e:	4b33      	ldr	r3, [pc, #204]	; (1a0043dc <sensorsInit+0x1ac>)
1a004310:	4a33      	ldr	r2, [pc, #204]	; (1a0043e0 <sensorsInit+0x1b0>)
1a004312:	60da      	str	r2, [r3, #12]
	sensorsTimers[BATTERY].refresh = batteryReport;
1a004314:	4b31      	ldr	r3, [pc, #196]	; (1a0043dc <sensorsInit+0x1ac>)
1a004316:	4a33      	ldr	r2, [pc, #204]	; (1a0043e4 <sensorsInit+0x1b4>)
1a004318:	611a      	str	r2, [r3, #16]
	sensorsTimers[ADC0].init = ADC0Init;
1a00431a:	4b30      	ldr	r3, [pc, #192]	; (1a0043dc <sensorsInit+0x1ac>)
1a00431c:	4a32      	ldr	r2, [pc, #200]	; (1a0043e8 <sensorsInit+0x1b8>)
1a00431e:	621a      	str	r2, [r3, #32]
	sensorsTimers[ADC0].refresh = ADC0Report;
1a004320:	4b2e      	ldr	r3, [pc, #184]	; (1a0043dc <sensorsInit+0x1ac>)
1a004322:	4a32      	ldr	r2, [pc, #200]	; (1a0043ec <sensorsInit+0x1bc>)
1a004324:	625a      	str	r2, [r3, #36]	; 0x24
	sensorsTimers[ADC1].init = ADC1Init;
1a004326:	4b2d      	ldr	r3, [pc, #180]	; (1a0043dc <sensorsInit+0x1ac>)
1a004328:	4a31      	ldr	r2, [pc, #196]	; (1a0043f0 <sensorsInit+0x1c0>)
1a00432a:	635a      	str	r2, [r3, #52]	; 0x34
	sensorsTimers[ADC1].refresh = ADC1Report;
1a00432c:	4b2b      	ldr	r3, [pc, #172]	; (1a0043dc <sensorsInit+0x1ac>)
1a00432e:	4a31      	ldr	r2, [pc, #196]	; (1a0043f4 <sensorsInit+0x1c4>)
1a004330:	639a      	str	r2, [r3, #56]	; 0x38
	sensorsTimers[ADC2].init = ADC2Init;
1a004332:	4b2a      	ldr	r3, [pc, #168]	; (1a0043dc <sensorsInit+0x1ac>)
1a004334:	4a30      	ldr	r2, [pc, #192]	; (1a0043f8 <sensorsInit+0x1c8>)
1a004336:	649a      	str	r2, [r3, #72]	; 0x48
	sensorsTimers[ADC2].refresh = ADC2Report;
1a004338:	4b28      	ldr	r3, [pc, #160]	; (1a0043dc <sensorsInit+0x1ac>)
1a00433a:	4a30      	ldr	r2, [pc, #192]	; (1a0043fc <sensorsInit+0x1cc>)
1a00433c:	64da      	str	r2, [r3, #76]	; 0x4c
	sensorsTimers[ADC3].init = ADC3Init;
1a00433e:	4b27      	ldr	r3, [pc, #156]	; (1a0043dc <sensorsInit+0x1ac>)
1a004340:	4a2f      	ldr	r2, [pc, #188]	; (1a004400 <sensorsInit+0x1d0>)
1a004342:	65da      	str	r2, [r3, #92]	; 0x5c
	sensorsTimers[ADC3].refresh = ADC3Report;
1a004344:	4b25      	ldr	r3, [pc, #148]	; (1a0043dc <sensorsInit+0x1ac>)
1a004346:	4a2f      	ldr	r2, [pc, #188]	; (1a004404 <sensorsInit+0x1d4>)
1a004348:	661a      	str	r2, [r3, #96]	; 0x60
	sensorsTimers[ADC4].init = ADC4Init;
1a00434a:	4b24      	ldr	r3, [pc, #144]	; (1a0043dc <sensorsInit+0x1ac>)
1a00434c:	4a2e      	ldr	r2, [pc, #184]	; (1a004408 <sensorsInit+0x1d8>)
1a00434e:	671a      	str	r2, [r3, #112]	; 0x70
	sensorsTimers[ADC4].refresh = ADC4Report;
1a004350:	4b22      	ldr	r3, [pc, #136]	; (1a0043dc <sensorsInit+0x1ac>)
1a004352:	4a2e      	ldr	r2, [pc, #184]	; (1a00440c <sensorsInit+0x1dc>)
1a004354:	675a      	str	r2, [r3, #116]	; 0x74
	sensorsTimers[ADC5].init = ADC5Init;
1a004356:	4b21      	ldr	r3, [pc, #132]	; (1a0043dc <sensorsInit+0x1ac>)
1a004358:	4a2d      	ldr	r2, [pc, #180]	; (1a004410 <sensorsInit+0x1e0>)
1a00435a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	sensorsTimers[ADC5].refresh = ADC5Report;
1a00435e:	4b1f      	ldr	r3, [pc, #124]	; (1a0043dc <sensorsInit+0x1ac>)
1a004360:	4a2c      	ldr	r2, [pc, #176]	; (1a004414 <sensorsInit+0x1e4>)
1a004362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	sensorsTimers[MOTOR_CURRENTS].init = MotorCurrentsInit;
1a004366:	4b1d      	ldr	r3, [pc, #116]	; (1a0043dc <sensorsInit+0x1ac>)
1a004368:	4a2b      	ldr	r2, [pc, #172]	; (1a004418 <sensorsInit+0x1e8>)
1a00436a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	sensorsTimers[MOTOR_CURRENTS].refresh = MotorCurrentsReport;
1a00436e:	4b1b      	ldr	r3, [pc, #108]	; (1a0043dc <sensorsInit+0x1ac>)
1a004370:	4a2a      	ldr	r2, [pc, #168]	; (1a00441c <sensorsInit+0x1ec>)
1a004372:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	sensorsTimers[PWM_SIGNALS].refresh = MotorPWMReport;
1a004376:	4b19      	ldr	r3, [pc, #100]	; (1a0043dc <sensorsInit+0x1ac>)
1a004378:	4a29      	ldr	r2, [pc, #164]	; (1a004420 <sensorsInit+0x1f0>)
1a00437a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	sensorsTimers[EVENT_RATE].refresh = EventCountReport;
1a00437e:	4b17      	ldr	r3, [pc, #92]	; (1a0043dc <sensorsInit+0x1ac>)
1a004380:	4a28      	ldr	r2, [pc, #160]	; (1a004424 <sensorsInit+0x1f4>)
1a004382:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
	uint32_t load = Chip_Clock_GetRate(CLK_MX_MXCORE) / 1000 - 1;
1a004386:	2069      	movs	r0, #105	; 0x69
1a004388:	f00e f92e 	bl	1a0125e8 <Chip_Clock_GetRate>
1a00438c:	4602      	mov	r2, r0
1a00438e:	4b26      	ldr	r3, [pc, #152]	; (1a004428 <sensorsInit+0x1f8>)
1a004390:	fba3 2302 	umull	r2, r3, r3, r2
1a004394:	099b      	lsrs	r3, r3, #6
1a004396:	3b01      	subs	r3, #1
1a004398:	603b      	str	r3, [r7, #0]
	if (load > 0xFFFFFF) {
1a00439a:	683b      	ldr	r3, [r7, #0]
1a00439c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1a0043a0:	d302      	bcc.n	1a0043a8 <sensorsInit+0x178>
		load = 0xFFFFFF;
1a0043a2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
1a0043a6:	603b      	str	r3, [r7, #0]
	}
	SysTick->LOAD = load;
1a0043a8:	4a20      	ldr	r2, [pc, #128]	; (1a00442c <sensorsInit+0x1fc>)
1a0043aa:	683b      	ldr	r3, [r7, #0]
1a0043ac:	6053      	str	r3, [r2, #4]
	SysTick->CTRL |= 0x7;	//enable the Systick
1a0043ae:	4a1f      	ldr	r2, [pc, #124]	; (1a00442c <sensorsInit+0x1fc>)
1a0043b0:	4b1e      	ldr	r3, [pc, #120]	; (1a00442c <sensorsInit+0x1fc>)
1a0043b2:	681b      	ldr	r3, [r3, #0]
1a0043b4:	f043 0307 	orr.w	r3, r3, #7
1a0043b8:	6013      	str	r3, [r2, #0]
}
1a0043ba:	bf00      	nop
1a0043bc:	3708      	adds	r7, #8
1a0043be:	46bd      	mov	sp, r7
1a0043c0:	bd80      	pop	{r7, pc}
1a0043c2:	bf00      	nop
1a0043c4:	10086580 	.word	0x10086580
1a0043c8:	400e3000 	.word	0x400e3000
1a0043cc:	400e4000 	.word	0x400e4000
1a0043d0:	10087568 	.word	0x10087568
1a0043d4:	1008786c 	.word	0x1008786c
1a0043d8:	100877ec 	.word	0x100877ec
1a0043dc:	1008756c 	.word	0x1008756c
1a0043e0:	1a003eb9 	.word	0x1a003eb9
1a0043e4:	1a003ee1 	.word	0x1a003ee1
1a0043e8:	1a003f2d 	.word	0x1a003f2d
1a0043ec:	1a003f55 	.word	0x1a003f55
1a0043f0:	1a003f65 	.word	0x1a003f65
1a0043f4:	1a003f8d 	.word	0x1a003f8d
1a0043f8:	1a003f9d 	.word	0x1a003f9d
1a0043fc:	1a003fc5 	.word	0x1a003fc5
1a004400:	1a003fd5 	.word	0x1a003fd5
1a004404:	1a003ffd 	.word	0x1a003ffd
1a004408:	1a00400d 	.word	0x1a00400d
1a00440c:	1a004035 	.word	0x1a004035
1a004410:	1a004045 	.word	0x1a004045
1a004414:	1a00406d 	.word	0x1a00406d
1a004418:	1a0040c1 	.word	0x1a0040c1
1a00441c:	1a00411d 	.word	0x1a00411d
1a004420:	1a00407d 	.word	0x1a00407d
1a004424:	1a004211 	.word	0x1a004211
1a004428:	10624dd3 	.word	0x10624dd3
1a00442c:	e000e010 	.word	0xe000e010

1a004430 <enableSensors>:

void enableSensors(uint32_t mask, uint8_t flag, uint32_t period) {
1a004430:	b580      	push	{r7, lr}
1a004432:	b086      	sub	sp, #24
1a004434:	af00      	add	r7, sp, #0
1a004436:	60f8      	str	r0, [r7, #12]
1a004438:	460b      	mov	r3, r1
1a00443a:	607a      	str	r2, [r7, #4]
1a00443c:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < MAX_SENSORS; ++i) {
1a00443e:	2300      	movs	r3, #0
1a004440:	617b      	str	r3, [r7, #20]
1a004442:	e012      	b.n	1a00446a <enableSensors+0x3a>
		if (mask & (1 << i)) {
1a004444:	2201      	movs	r2, #1
1a004446:	697b      	ldr	r3, [r7, #20]
1a004448:	fa02 f303 	lsl.w	r3, r2, r3
1a00444c:	461a      	mov	r2, r3
1a00444e:	68fb      	ldr	r3, [r7, #12]
1a004450:	4013      	ands	r3, r2
1a004452:	2b00      	cmp	r3, #0
1a004454:	d006      	beq.n	1a004464 <enableSensors+0x34>
			enableSensor(i, flag, period);
1a004456:	697b      	ldr	r3, [r7, #20]
1a004458:	b2db      	uxtb	r3, r3
1a00445a:	7af9      	ldrb	r1, [r7, #11]
1a00445c:	687a      	ldr	r2, [r7, #4]
1a00445e:	4618      	mov	r0, r3
1a004460:	f000 f80a 	bl	1a004478 <enableSensor>
	SysTick->LOAD = load;
	SysTick->CTRL |= 0x7;	//enable the Systick
}

void enableSensors(uint32_t mask, uint8_t flag, uint32_t period) {
	for (int i = 0; i < MAX_SENSORS; ++i) {
1a004464:	697b      	ldr	r3, [r7, #20]
1a004466:	3301      	adds	r3, #1
1a004468:	617b      	str	r3, [r7, #20]
1a00446a:	697b      	ldr	r3, [r7, #20]
1a00446c:	2b1f      	cmp	r3, #31
1a00446e:	dde9      	ble.n	1a004444 <enableSensors+0x14>
		if (mask & (1 << i)) {
			enableSensor(i, flag, period);
		}
	}
}
1a004470:	bf00      	nop
1a004472:	3718      	adds	r7, #24
1a004474:	46bd      	mov	sp, r7
1a004476:	bd80      	pop	{r7, pc}

1a004478 <enableSensor>:

void enableSensor(uint8_t sensorId, uint8_t flag, uint32_t period) {
1a004478:	b580      	push	{r7, lr}
1a00447a:	b084      	sub	sp, #16
1a00447c:	af00      	add	r7, sp, #0
1a00447e:	4603      	mov	r3, r0
1a004480:	603a      	str	r2, [r7, #0]
1a004482:	71fb      	strb	r3, [r7, #7]
1a004484:	460b      	mov	r3, r1
1a004486:	71bb      	strb	r3, [r7, #6]
	if (sensorId >= MAX_SENSORS) {
1a004488:	79fb      	ldrb	r3, [r7, #7]
1a00448a:	2b1f      	cmp	r3, #31
1a00448c:	f200 80e3 	bhi.w	1a004656 <enableSensor+0x1de>
		return;
	}
	if (sensorsTimers[sensorId].refresh == NULL) {
1a004490:	79fa      	ldrb	r2, [r7, #7]
1a004492:	4974      	ldr	r1, [pc, #464]	; (1a004664 <enableSensor+0x1ec>)
1a004494:	4613      	mov	r3, r2
1a004496:	009b      	lsls	r3, r3, #2
1a004498:	4413      	add	r3, r2
1a00449a:	009b      	lsls	r3, r3, #2
1a00449c:	440b      	add	r3, r1
1a00449e:	3310      	adds	r3, #16
1a0044a0:	681b      	ldr	r3, [r3, #0]
1a0044a2:	2b00      	cmp	r3, #0
1a0044a4:	f000 80d9 	beq.w	1a00465a <enableSensor+0x1e2>
		return;
	}
	SysTick->CTRL &= ~0x1;	//disable the Systick
1a0044a8:	4a6f      	ldr	r2, [pc, #444]	; (1a004668 <enableSensor+0x1f0>)
1a0044aa:	4b6f      	ldr	r3, [pc, #444]	; (1a004668 <enableSensor+0x1f0>)
1a0044ac:	681b      	ldr	r3, [r3, #0]
1a0044ae:	f023 0301 	bic.w	r3, r3, #1
1a0044b2:	6013      	str	r3, [r2, #0]
	if (flag) {
1a0044b4:	79bb      	ldrb	r3, [r7, #6]
1a0044b6:	2b00      	cmp	r3, #0
1a0044b8:	d073      	beq.n	1a0045a2 <enableSensor+0x12a>
		if (sensorsTimers[sensorId].position == -1) {
1a0044ba:	79fa      	ldrb	r2, [r7, #7]
1a0044bc:	4969      	ldr	r1, [pc, #420]	; (1a004664 <enableSensor+0x1ec>)
1a0044be:	4613      	mov	r3, r2
1a0044c0:	009b      	lsls	r3, r3, #2
1a0044c2:	4413      	add	r3, r2
1a0044c4:	009b      	lsls	r3, r3, #2
1a0044c6:	440b      	add	r3, r1
1a0044c8:	3302      	adds	r3, #2
1a0044ca:	881b      	ldrh	r3, [r3, #0]
1a0044cc:	b21b      	sxth	r3, r3
1a0044ce:	f1b3 3fff 	cmp.w	r3, #4294967295
1a0044d2:	d15b      	bne.n	1a00458c <enableSensor+0x114>
			sensorsTimers[sensorId].counter = period;
1a0044d4:	79fa      	ldrb	r2, [r7, #7]
1a0044d6:	4963      	ldr	r1, [pc, #396]	; (1a004664 <enableSensor+0x1ec>)
1a0044d8:	4613      	mov	r3, r2
1a0044da:	009b      	lsls	r3, r3, #2
1a0044dc:	4413      	add	r3, r2
1a0044de:	009b      	lsls	r3, r3, #2
1a0044e0:	440b      	add	r3, r1
1a0044e2:	3308      	adds	r3, #8
1a0044e4:	683a      	ldr	r2, [r7, #0]
1a0044e6:	601a      	str	r2, [r3, #0]
			sensorsTimers[sensorId].reload = period;
1a0044e8:	79fa      	ldrb	r2, [r7, #7]
1a0044ea:	495e      	ldr	r1, [pc, #376]	; (1a004664 <enableSensor+0x1ec>)
1a0044ec:	4613      	mov	r3, r2
1a0044ee:	009b      	lsls	r3, r3, #2
1a0044f0:	4413      	add	r3, r2
1a0044f2:	009b      	lsls	r3, r3, #2
1a0044f4:	440b      	add	r3, r1
1a0044f6:	3304      	adds	r3, #4
1a0044f8:	683a      	ldr	r2, [r7, #0]
1a0044fa:	601a      	str	r2, [r3, #0]
			enabledSensors[sensorsEnabledCounter++] = &sensorsTimers[sensorId];
1a0044fc:	4b5b      	ldr	r3, [pc, #364]	; (1a00466c <enableSensor+0x1f4>)
1a0044fe:	681a      	ldr	r2, [r3, #0]
1a004500:	1c53      	adds	r3, r2, #1
1a004502:	495a      	ldr	r1, [pc, #360]	; (1a00466c <enableSensor+0x1f4>)
1a004504:	600b      	str	r3, [r1, #0]
1a004506:	79f9      	ldrb	r1, [r7, #7]
1a004508:	460b      	mov	r3, r1
1a00450a:	009b      	lsls	r3, r3, #2
1a00450c:	440b      	add	r3, r1
1a00450e:	009b      	lsls	r3, r3, #2
1a004510:	4954      	ldr	r1, [pc, #336]	; (1a004664 <enableSensor+0x1ec>)
1a004512:	440b      	add	r3, r1
1a004514:	4956      	ldr	r1, [pc, #344]	; (1a004670 <enableSensor+0x1f8>)
1a004516:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
			sensorsTimers[sensorId].position = sensorsEnabledCounter - 1;
1a00451a:	79fa      	ldrb	r2, [r7, #7]
1a00451c:	4b53      	ldr	r3, [pc, #332]	; (1a00466c <enableSensor+0x1f4>)
1a00451e:	681b      	ldr	r3, [r3, #0]
1a004520:	b29b      	uxth	r3, r3
1a004522:	3b01      	subs	r3, #1
1a004524:	b29b      	uxth	r3, r3
1a004526:	b298      	uxth	r0, r3
1a004528:	494e      	ldr	r1, [pc, #312]	; (1a004664 <enableSensor+0x1ec>)
1a00452a:	4613      	mov	r3, r2
1a00452c:	009b      	lsls	r3, r3, #2
1a00452e:	4413      	add	r3, r2
1a004530:	009b      	lsls	r3, r3, #2
1a004532:	440b      	add	r3, r1
1a004534:	3302      	adds	r3, #2
1a004536:	4602      	mov	r2, r0
1a004538:	801a      	strh	r2, [r3, #0]
			if (!sensorsTimers[sensorId].initialized) {
1a00453a:	79fa      	ldrb	r2, [r7, #7]
1a00453c:	4949      	ldr	r1, [pc, #292]	; (1a004664 <enableSensor+0x1ec>)
1a00453e:	4613      	mov	r3, r2
1a004540:	009b      	lsls	r3, r3, #2
1a004542:	4413      	add	r3, r2
1a004544:	009b      	lsls	r3, r3, #2
1a004546:	440b      	add	r3, r1
1a004548:	781b      	ldrb	r3, [r3, #0]
1a00454a:	2b00      	cmp	r3, #0
1a00454c:	d17c      	bne.n	1a004648 <enableSensor+0x1d0>
				sensorsTimers[sensorId].initialized = true;
1a00454e:	79fa      	ldrb	r2, [r7, #7]
1a004550:	4944      	ldr	r1, [pc, #272]	; (1a004664 <enableSensor+0x1ec>)
1a004552:	4613      	mov	r3, r2
1a004554:	009b      	lsls	r3, r3, #2
1a004556:	4413      	add	r3, r2
1a004558:	009b      	lsls	r3, r3, #2
1a00455a:	440b      	add	r3, r1
1a00455c:	2201      	movs	r2, #1
1a00455e:	701a      	strb	r2, [r3, #0]
				if (sensorsTimers[sensorId].init != NULL) {
1a004560:	79fa      	ldrb	r2, [r7, #7]
1a004562:	4940      	ldr	r1, [pc, #256]	; (1a004664 <enableSensor+0x1ec>)
1a004564:	4613      	mov	r3, r2
1a004566:	009b      	lsls	r3, r3, #2
1a004568:	4413      	add	r3, r2
1a00456a:	009b      	lsls	r3, r3, #2
1a00456c:	440b      	add	r3, r1
1a00456e:	330c      	adds	r3, #12
1a004570:	681b      	ldr	r3, [r3, #0]
1a004572:	2b00      	cmp	r3, #0
1a004574:	d068      	beq.n	1a004648 <enableSensor+0x1d0>
					sensorsTimers[sensorId].init();
1a004576:	79fa      	ldrb	r2, [r7, #7]
1a004578:	493a      	ldr	r1, [pc, #232]	; (1a004664 <enableSensor+0x1ec>)
1a00457a:	4613      	mov	r3, r2
1a00457c:	009b      	lsls	r3, r3, #2
1a00457e:	4413      	add	r3, r2
1a004580:	009b      	lsls	r3, r3, #2
1a004582:	440b      	add	r3, r1
1a004584:	330c      	adds	r3, #12
1a004586:	681b      	ldr	r3, [r3, #0]
1a004588:	4798      	blx	r3
1a00458a:	e05d      	b.n	1a004648 <enableSensor+0x1d0>
				}
			}
		} else {
			sensorsTimers[sensorId].reload = period;	//Update the period
1a00458c:	79fa      	ldrb	r2, [r7, #7]
1a00458e:	4935      	ldr	r1, [pc, #212]	; (1a004664 <enableSensor+0x1ec>)
1a004590:	4613      	mov	r3, r2
1a004592:	009b      	lsls	r3, r3, #2
1a004594:	4413      	add	r3, r2
1a004596:	009b      	lsls	r3, r3, #2
1a004598:	440b      	add	r3, r1
1a00459a:	3304      	adds	r3, #4
1a00459c:	683a      	ldr	r2, [r7, #0]
1a00459e:	601a      	str	r2, [r3, #0]
1a0045a0:	e052      	b.n	1a004648 <enableSensor+0x1d0>
		}
	} else {
		if (sensorsTimers[sensorId].position != -1) {
1a0045a2:	79fa      	ldrb	r2, [r7, #7]
1a0045a4:	492f      	ldr	r1, [pc, #188]	; (1a004664 <enableSensor+0x1ec>)
1a0045a6:	4613      	mov	r3, r2
1a0045a8:	009b      	lsls	r3, r3, #2
1a0045aa:	4413      	add	r3, r2
1a0045ac:	009b      	lsls	r3, r3, #2
1a0045ae:	440b      	add	r3, r1
1a0045b0:	3302      	adds	r3, #2
1a0045b2:	881b      	ldrh	r3, [r3, #0]
1a0045b4:	b21b      	sxth	r3, r3
1a0045b6:	f1b3 3fff 	cmp.w	r3, #4294967295
1a0045ba:	d045      	beq.n	1a004648 <enableSensor+0x1d0>
			//if removing the last one, no need to iterate or do anything besides reducing the counter
			if (sensorsTimers[sensorId].position != sensorsEnabledCounter - 1) {
1a0045bc:	79fa      	ldrb	r2, [r7, #7]
1a0045be:	4929      	ldr	r1, [pc, #164]	; (1a004664 <enableSensor+0x1ec>)
1a0045c0:	4613      	mov	r3, r2
1a0045c2:	009b      	lsls	r3, r3, #2
1a0045c4:	4413      	add	r3, r2
1a0045c6:	009b      	lsls	r3, r3, #2
1a0045c8:	440b      	add	r3, r1
1a0045ca:	3302      	adds	r3, #2
1a0045cc:	881b      	ldrh	r3, [r3, #0]
1a0045ce:	b21a      	sxth	r2, r3
1a0045d0:	4b26      	ldr	r3, [pc, #152]	; (1a00466c <enableSensor+0x1f4>)
1a0045d2:	681b      	ldr	r3, [r3, #0]
1a0045d4:	3b01      	subs	r3, #1
1a0045d6:	429a      	cmp	r2, r3
1a0045d8:	d01c      	beq.n	1a004614 <enableSensor+0x19c>
				for (int i = sensorsTimers[sensorId].position; i < sensorsEnabledCounter; ++i) {
1a0045da:	79fa      	ldrb	r2, [r7, #7]
1a0045dc:	4921      	ldr	r1, [pc, #132]	; (1a004664 <enableSensor+0x1ec>)
1a0045de:	4613      	mov	r3, r2
1a0045e0:	009b      	lsls	r3, r3, #2
1a0045e2:	4413      	add	r3, r2
1a0045e4:	009b      	lsls	r3, r3, #2
1a0045e6:	440b      	add	r3, r1
1a0045e8:	3302      	adds	r3, #2
1a0045ea:	881b      	ldrh	r3, [r3, #0]
1a0045ec:	b21b      	sxth	r3, r3
1a0045ee:	60fb      	str	r3, [r7, #12]
1a0045f0:	e00b      	b.n	1a00460a <enableSensor+0x192>
					enabledSensors[i] = enabledSensors[i + 1];
1a0045f2:	68fb      	ldr	r3, [r7, #12]
1a0045f4:	3301      	adds	r3, #1
1a0045f6:	4a1e      	ldr	r2, [pc, #120]	; (1a004670 <enableSensor+0x1f8>)
1a0045f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a0045fc:	491c      	ldr	r1, [pc, #112]	; (1a004670 <enableSensor+0x1f8>)
1a0045fe:	68fb      	ldr	r3, [r7, #12]
1a004600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	} else {
		if (sensorsTimers[sensorId].position != -1) {
			//if removing the last one, no need to iterate or do anything besides reducing the counter
			if (sensorsTimers[sensorId].position != sensorsEnabledCounter - 1) {
				for (int i = sensorsTimers[sensorId].position; i < sensorsEnabledCounter; ++i) {
1a004604:	68fb      	ldr	r3, [r7, #12]
1a004606:	3301      	adds	r3, #1
1a004608:	60fb      	str	r3, [r7, #12]
1a00460a:	68fa      	ldr	r2, [r7, #12]
1a00460c:	4b17      	ldr	r3, [pc, #92]	; (1a00466c <enableSensor+0x1f4>)
1a00460e:	681b      	ldr	r3, [r3, #0]
1a004610:	429a      	cmp	r2, r3
1a004612:	d3ee      	bcc.n	1a0045f2 <enableSensor+0x17a>
					enabledSensors[i] = enabledSensors[i + 1];
				}
			}
			sensorsTimers[sensorId].position = -1;
1a004614:	79fa      	ldrb	r2, [r7, #7]
1a004616:	4913      	ldr	r1, [pc, #76]	; (1a004664 <enableSensor+0x1ec>)
1a004618:	4613      	mov	r3, r2
1a00461a:	009b      	lsls	r3, r3, #2
1a00461c:	4413      	add	r3, r2
1a00461e:	009b      	lsls	r3, r3, #2
1a004620:	440b      	add	r3, r1
1a004622:	3302      	adds	r3, #2
1a004624:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a004628:	801a      	strh	r2, [r3, #0]
			sensorsTimers[sensorId].triggered = 0;
1a00462a:	79fa      	ldrb	r2, [r7, #7]
1a00462c:	490d      	ldr	r1, [pc, #52]	; (1a004664 <enableSensor+0x1ec>)
1a00462e:	4613      	mov	r3, r2
1a004630:	009b      	lsls	r3, r3, #2
1a004632:	4413      	add	r3, r2
1a004634:	009b      	lsls	r3, r3, #2
1a004636:	440b      	add	r3, r1
1a004638:	3301      	adds	r3, #1
1a00463a:	2200      	movs	r2, #0
1a00463c:	701a      	strb	r2, [r3, #0]
			sensorsEnabledCounter--;
1a00463e:	4b0b      	ldr	r3, [pc, #44]	; (1a00466c <enableSensor+0x1f4>)
1a004640:	681b      	ldr	r3, [r3, #0]
1a004642:	3b01      	subs	r3, #1
1a004644:	4a09      	ldr	r2, [pc, #36]	; (1a00466c <enableSensor+0x1f4>)
1a004646:	6013      	str	r3, [r2, #0]
		}
	}
	SysTick->CTRL |= 0x1;	//enable the Systick
1a004648:	4a07      	ldr	r2, [pc, #28]	; (1a004668 <enableSensor+0x1f0>)
1a00464a:	4b07      	ldr	r3, [pc, #28]	; (1a004668 <enableSensor+0x1f0>)
1a00464c:	681b      	ldr	r3, [r3, #0]
1a00464e:	f043 0301 	orr.w	r3, r3, #1
1a004652:	6013      	str	r3, [r2, #0]
1a004654:	e002      	b.n	1a00465c <enableSensor+0x1e4>
	}
}

void enableSensor(uint8_t sensorId, uint8_t flag, uint32_t period) {
	if (sensorId >= MAX_SENSORS) {
		return;
1a004656:	bf00      	nop
1a004658:	e000      	b.n	1a00465c <enableSensor+0x1e4>
	}
	if (sensorsTimers[sensorId].refresh == NULL) {
		return;
1a00465a:	bf00      	nop
			sensorsTimers[sensorId].triggered = 0;
			sensorsEnabledCounter--;
		}
	}
	SysTick->CTRL |= 0x1;	//enable the Systick
}
1a00465c:	3710      	adds	r7, #16
1a00465e:	46bd      	mov	sp, r7
1a004660:	bd80      	pop	{r7, pc}
1a004662:	bf00      	nop
1a004664:	1008756c 	.word	0x1008756c
1a004668:	e000e010 	.word	0xe000e010
1a00466c:	1008786c 	.word	0x1008786c
1a004670:	100877ec 	.word	0x100877ec

1a004674 <getSensorsOutput>:

void getSensorsOutput(uint32_t mask) {
1a004674:	b580      	push	{r7, lr}
1a004676:	b084      	sub	sp, #16
1a004678:	af00      	add	r7, sp, #0
1a00467a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < MAX_SENSORS; ++i) {
1a00467c:	2300      	movs	r3, #0
1a00467e:	60fb      	str	r3, [r7, #12]
1a004680:	e04b      	b.n	1a00471a <getSensorsOutput+0xa6>
		if (mask & (1 << i)) {
1a004682:	2201      	movs	r2, #1
1a004684:	68fb      	ldr	r3, [r7, #12]
1a004686:	fa02 f303 	lsl.w	r3, r2, r3
1a00468a:	461a      	mov	r2, r3
1a00468c:	687b      	ldr	r3, [r7, #4]
1a00468e:	4013      	ands	r3, r2
1a004690:	2b00      	cmp	r3, #0
1a004692:	d03f      	beq.n	1a004714 <getSensorsOutput+0xa0>
			if (!sensorsTimers[i].initialized) {
1a004694:	4924      	ldr	r1, [pc, #144]	; (1a004728 <getSensorsOutput+0xb4>)
1a004696:	68fa      	ldr	r2, [r7, #12]
1a004698:	4613      	mov	r3, r2
1a00469a:	009b      	lsls	r3, r3, #2
1a00469c:	4413      	add	r3, r2
1a00469e:	009b      	lsls	r3, r3, #2
1a0046a0:	440b      	add	r3, r1
1a0046a2:	781b      	ldrb	r3, [r3, #0]
1a0046a4:	2b00      	cmp	r3, #0
1a0046a6:	d120      	bne.n	1a0046ea <getSensorsOutput+0x76>
				sensorsTimers[i].initialized = true;
1a0046a8:	491f      	ldr	r1, [pc, #124]	; (1a004728 <getSensorsOutput+0xb4>)
1a0046aa:	68fa      	ldr	r2, [r7, #12]
1a0046ac:	4613      	mov	r3, r2
1a0046ae:	009b      	lsls	r3, r3, #2
1a0046b0:	4413      	add	r3, r2
1a0046b2:	009b      	lsls	r3, r3, #2
1a0046b4:	440b      	add	r3, r1
1a0046b6:	2201      	movs	r2, #1
1a0046b8:	701a      	strb	r2, [r3, #0]
				if (sensorsTimers[i].init != NULL) {
1a0046ba:	491b      	ldr	r1, [pc, #108]	; (1a004728 <getSensorsOutput+0xb4>)
1a0046bc:	68fa      	ldr	r2, [r7, #12]
1a0046be:	4613      	mov	r3, r2
1a0046c0:	009b      	lsls	r3, r3, #2
1a0046c2:	4413      	add	r3, r2
1a0046c4:	009b      	lsls	r3, r3, #2
1a0046c6:	440b      	add	r3, r1
1a0046c8:	330c      	adds	r3, #12
1a0046ca:	681b      	ldr	r3, [r3, #0]
1a0046cc:	2b00      	cmp	r3, #0
1a0046ce:	d009      	beq.n	1a0046e4 <getSensorsOutput+0x70>
					sensorsTimers[i].init();
1a0046d0:	4915      	ldr	r1, [pc, #84]	; (1a004728 <getSensorsOutput+0xb4>)
1a0046d2:	68fa      	ldr	r2, [r7, #12]
1a0046d4:	4613      	mov	r3, r2
1a0046d6:	009b      	lsls	r3, r3, #2
1a0046d8:	4413      	add	r3, r2
1a0046da:	009b      	lsls	r3, r3, #2
1a0046dc:	440b      	add	r3, r1
1a0046de:	330c      	adds	r3, #12
1a0046e0:	681b      	ldr	r3, [r3, #0]
1a0046e2:	4798      	blx	r3
				}
				timerDelayUs(100);	//Wait for a read on just initialized hardware ( only applicable to ADC)
1a0046e4:	2064      	movs	r0, #100	; 0x64
1a0046e6:	f001 ffcf 	bl	1a006688 <timerDelayUs>
			}
			if (sensorsTimers[i].refresh != NULL) {
1a0046ea:	490f      	ldr	r1, [pc, #60]	; (1a004728 <getSensorsOutput+0xb4>)
1a0046ec:	68fa      	ldr	r2, [r7, #12]
1a0046ee:	4613      	mov	r3, r2
1a0046f0:	009b      	lsls	r3, r3, #2
1a0046f2:	4413      	add	r3, r2
1a0046f4:	009b      	lsls	r3, r3, #2
1a0046f6:	440b      	add	r3, r1
1a0046f8:	3310      	adds	r3, #16
1a0046fa:	681b      	ldr	r3, [r3, #0]
1a0046fc:	2b00      	cmp	r3, #0
1a0046fe:	d009      	beq.n	1a004714 <getSensorsOutput+0xa0>
				sensorsTimers[i].refresh();
1a004700:	4909      	ldr	r1, [pc, #36]	; (1a004728 <getSensorsOutput+0xb4>)
1a004702:	68fa      	ldr	r2, [r7, #12]
1a004704:	4613      	mov	r3, r2
1a004706:	009b      	lsls	r3, r3, #2
1a004708:	4413      	add	r3, r2
1a00470a:	009b      	lsls	r3, r3, #2
1a00470c:	440b      	add	r3, r1
1a00470e:	3310      	adds	r3, #16
1a004710:	681b      	ldr	r3, [r3, #0]
1a004712:	4798      	blx	r3
	}
	SysTick->CTRL |= 0x1;	//enable the Systick
}

void getSensorsOutput(uint32_t mask) {
	for (int i = 0; i < MAX_SENSORS; ++i) {
1a004714:	68fb      	ldr	r3, [r7, #12]
1a004716:	3301      	adds	r3, #1
1a004718:	60fb      	str	r3, [r7, #12]
1a00471a:	68fb      	ldr	r3, [r7, #12]
1a00471c:	2b1f      	cmp	r3, #31
1a00471e:	ddb0      	ble.n	1a004682 <getSensorsOutput+0xe>
			if (sensorsTimers[i].refresh != NULL) {
				sensorsTimers[i].refresh();
			}
		}
	}
}
1a004720:	bf00      	nop
1a004722:	3710      	adds	r7, #16
1a004724:	46bd      	mov	sp, r7
1a004726:	bd80      	pop	{r7, pc}
1a004728:	1008756c 	.word	0x1008756c

1a00472c <SysTick_Handler>:
/**
 * The Systick handler is used for a lot more tasks than sensor timing.
 * It also provides a timer for decaying for the motor velocity, motor control
 * and second timer used for the LED blinking and Retina event rate.
 */
void SysTick_Handler(void) {
1a00472c:	b580      	push	{r7, lr}
1a00472e:	b082      	sub	sp, #8
1a004730:	af00      	add	r7, sp, #0
	static uint16_t second_timer = 0;
#if USE_PUSHBOT
	static uint16_t ten_hertz_timer = 0;
	if (++ten_hertz_timer >= 100) {
1a004732:	4b77      	ldr	r3, [pc, #476]	; (1a004910 <SysTick_Handler+0x1e4>)
1a004734:	881b      	ldrh	r3, [r3, #0]
1a004736:	3301      	adds	r3, #1
1a004738:	b29a      	uxth	r2, r3
1a00473a:	4b75      	ldr	r3, [pc, #468]	; (1a004910 <SysTick_Handler+0x1e4>)
1a00473c:	801a      	strh	r2, [r3, #0]
1a00473e:	4b74      	ldr	r3, [pc, #464]	; (1a004910 <SysTick_Handler+0x1e4>)
1a004740:	881b      	ldrh	r3, [r3, #0]
1a004742:	2b63      	cmp	r3, #99	; 0x63
1a004744:	f240 8085 	bls.w	1a004852 <SysTick_Handler+0x126>
		ten_hertz_timer = 0;
1a004748:	4b71      	ldr	r3, [pc, #452]	; (1a004910 <SysTick_Handler+0x1e4>)
1a00474a:	2200      	movs	r2, #0
1a00474c:	801a      	strh	r2, [r3, #0]
		if (motor0.controlMode & DECAY_MODE) {
1a00474e:	4b71      	ldr	r3, [pc, #452]	; (1a004914 <SysTick_Handler+0x1e8>)
1a004750:	68db      	ldr	r3, [r3, #12]
1a004752:	f003 0304 	and.w	r3, r3, #4
1a004756:	2b00      	cmp	r3, #0
1a004758:	d03a      	beq.n	1a0047d0 <SysTick_Handler+0xa4>
			if (motor0.decayCounter == 0) {
1a00475a:	4b6e      	ldr	r3, [pc, #440]	; (1a004914 <SysTick_Handler+0x1e8>)
1a00475c:	689b      	ldr	r3, [r3, #8]
1a00475e:	2b00      	cmp	r3, #0
1a004760:	d131      	bne.n	1a0047c6 <SysTick_Handler+0x9a>
				if (motor0.controlMode & DIRECT_MODE) {
1a004762:	4b6c      	ldr	r3, [pc, #432]	; (1a004914 <SysTick_Handler+0x1e8>)
1a004764:	68db      	ldr	r3, [r3, #12]
1a004766:	f003 0301 	and.w	r3, r3, #1
1a00476a:	2b00      	cmp	r3, #0
1a00476c:	d017      	beq.n	1a00479e <SysTick_Handler+0x72>
					if (motor0.requestedWidth != 0) {
1a00476e:	4b69      	ldr	r3, [pc, #420]	; (1a004914 <SysTick_Handler+0x1e8>)
1a004770:	685b      	ldr	r3, [r3, #4]
1a004772:	2b00      	cmp	r3, #0
1a004774:	d02c      	beq.n	1a0047d0 <SysTick_Handler+0xa4>
						motor0.requestedWidth = (motor0.requestedWidth * 90) / 100;
1a004776:	4b67      	ldr	r3, [pc, #412]	; (1a004914 <SysTick_Handler+0x1e8>)
1a004778:	685b      	ldr	r3, [r3, #4]
1a00477a:	225a      	movs	r2, #90	; 0x5a
1a00477c:	fb02 f303 	mul.w	r3, r2, r3
1a004780:	4a65      	ldr	r2, [pc, #404]	; (1a004918 <SysTick_Handler+0x1ec>)
1a004782:	fb82 1203 	smull	r1, r2, r2, r3
1a004786:	1152      	asrs	r2, r2, #5
1a004788:	17db      	asrs	r3, r3, #31
1a00478a:	1ad3      	subs	r3, r2, r3
1a00478c:	4a61      	ldr	r2, [pc, #388]	; (1a004914 <SysTick_Handler+0x1e8>)
1a00478e:	6053      	str	r3, [r2, #4]
						updateMotorWidth(0, motor0.requestedWidth);
1a004790:	4b60      	ldr	r3, [pc, #384]	; (1a004914 <SysTick_Handler+0x1e8>)
1a004792:	685b      	ldr	r3, [r3, #4]
1a004794:	4619      	mov	r1, r3
1a004796:	2000      	movs	r0, #0
1a004798:	f7fd fd0a 	bl	1a0021b0 <updateMotorWidth>
1a00479c:	e018      	b.n	1a0047d0 <SysTick_Handler+0xa4>
					}
				} else {
					if (motor0.requestedVelocity > 0) {
1a00479e:	4b5d      	ldr	r3, [pc, #372]	; (1a004914 <SysTick_Handler+0x1e8>)
1a0047a0:	695b      	ldr	r3, [r3, #20]
1a0047a2:	2b00      	cmp	r3, #0
1a0047a4:	dd05      	ble.n	1a0047b2 <SysTick_Handler+0x86>
						motor0.requestedVelocity--;
1a0047a6:	4b5b      	ldr	r3, [pc, #364]	; (1a004914 <SysTick_Handler+0x1e8>)
1a0047a8:	695b      	ldr	r3, [r3, #20]
1a0047aa:	3b01      	subs	r3, #1
1a0047ac:	4a59      	ldr	r2, [pc, #356]	; (1a004914 <SysTick_Handler+0x1e8>)
1a0047ae:	6153      	str	r3, [r2, #20]
1a0047b0:	e00e      	b.n	1a0047d0 <SysTick_Handler+0xa4>
					} else if (motor0.requestedVelocity < 0) {
1a0047b2:	4b58      	ldr	r3, [pc, #352]	; (1a004914 <SysTick_Handler+0x1e8>)
1a0047b4:	695b      	ldr	r3, [r3, #20]
1a0047b6:	2b00      	cmp	r3, #0
1a0047b8:	da0a      	bge.n	1a0047d0 <SysTick_Handler+0xa4>
						motor0.requestedVelocity++;
1a0047ba:	4b56      	ldr	r3, [pc, #344]	; (1a004914 <SysTick_Handler+0x1e8>)
1a0047bc:	695b      	ldr	r3, [r3, #20]
1a0047be:	3301      	adds	r3, #1
1a0047c0:	4a54      	ldr	r2, [pc, #336]	; (1a004914 <SysTick_Handler+0x1e8>)
1a0047c2:	6153      	str	r3, [r2, #20]
1a0047c4:	e004      	b.n	1a0047d0 <SysTick_Handler+0xa4>
					}
				}
			} else {
				motor0.decayCounter--;
1a0047c6:	4b53      	ldr	r3, [pc, #332]	; (1a004914 <SysTick_Handler+0x1e8>)
1a0047c8:	689b      	ldr	r3, [r3, #8]
1a0047ca:	3b01      	subs	r3, #1
1a0047cc:	4a51      	ldr	r2, [pc, #324]	; (1a004914 <SysTick_Handler+0x1e8>)
1a0047ce:	6093      	str	r3, [r2, #8]
			}
		}
		if (motor1.controlMode & (DECAY_MODE)) {
1a0047d0:	4b52      	ldr	r3, [pc, #328]	; (1a00491c <SysTick_Handler+0x1f0>)
1a0047d2:	68db      	ldr	r3, [r3, #12]
1a0047d4:	f003 0304 	and.w	r3, r3, #4
1a0047d8:	2b00      	cmp	r3, #0
1a0047da:	d03a      	beq.n	1a004852 <SysTick_Handler+0x126>
			if (motor1.decayCounter == 0) {
1a0047dc:	4b4f      	ldr	r3, [pc, #316]	; (1a00491c <SysTick_Handler+0x1f0>)
1a0047de:	689b      	ldr	r3, [r3, #8]
1a0047e0:	2b00      	cmp	r3, #0
1a0047e2:	d131      	bne.n	1a004848 <SysTick_Handler+0x11c>
				if (motor1.controlMode & DIRECT_MODE) {
1a0047e4:	4b4d      	ldr	r3, [pc, #308]	; (1a00491c <SysTick_Handler+0x1f0>)
1a0047e6:	68db      	ldr	r3, [r3, #12]
1a0047e8:	f003 0301 	and.w	r3, r3, #1
1a0047ec:	2b00      	cmp	r3, #0
1a0047ee:	d017      	beq.n	1a004820 <SysTick_Handler+0xf4>
					if (motor1.requestedWidth != 0) {
1a0047f0:	4b4a      	ldr	r3, [pc, #296]	; (1a00491c <SysTick_Handler+0x1f0>)
1a0047f2:	685b      	ldr	r3, [r3, #4]
1a0047f4:	2b00      	cmp	r3, #0
1a0047f6:	d02c      	beq.n	1a004852 <SysTick_Handler+0x126>
						motor1.requestedWidth = (motor1.requestedWidth * 90) / 100;
1a0047f8:	4b48      	ldr	r3, [pc, #288]	; (1a00491c <SysTick_Handler+0x1f0>)
1a0047fa:	685b      	ldr	r3, [r3, #4]
1a0047fc:	225a      	movs	r2, #90	; 0x5a
1a0047fe:	fb02 f303 	mul.w	r3, r2, r3
1a004802:	4a45      	ldr	r2, [pc, #276]	; (1a004918 <SysTick_Handler+0x1ec>)
1a004804:	fb82 1203 	smull	r1, r2, r2, r3
1a004808:	1152      	asrs	r2, r2, #5
1a00480a:	17db      	asrs	r3, r3, #31
1a00480c:	1ad3      	subs	r3, r2, r3
1a00480e:	4a43      	ldr	r2, [pc, #268]	; (1a00491c <SysTick_Handler+0x1f0>)
1a004810:	6053      	str	r3, [r2, #4]
						updateMotorWidth(1, motor1.requestedWidth);
1a004812:	4b42      	ldr	r3, [pc, #264]	; (1a00491c <SysTick_Handler+0x1f0>)
1a004814:	685b      	ldr	r3, [r3, #4]
1a004816:	4619      	mov	r1, r3
1a004818:	2001      	movs	r0, #1
1a00481a:	f7fd fcc9 	bl	1a0021b0 <updateMotorWidth>
1a00481e:	e018      	b.n	1a004852 <SysTick_Handler+0x126>
					}
				} else {
					if (motor1.requestedVelocity > 0) {
1a004820:	4b3e      	ldr	r3, [pc, #248]	; (1a00491c <SysTick_Handler+0x1f0>)
1a004822:	695b      	ldr	r3, [r3, #20]
1a004824:	2b00      	cmp	r3, #0
1a004826:	dd05      	ble.n	1a004834 <SysTick_Handler+0x108>
						motor1.requestedVelocity--;
1a004828:	4b3c      	ldr	r3, [pc, #240]	; (1a00491c <SysTick_Handler+0x1f0>)
1a00482a:	695b      	ldr	r3, [r3, #20]
1a00482c:	3b01      	subs	r3, #1
1a00482e:	4a3b      	ldr	r2, [pc, #236]	; (1a00491c <SysTick_Handler+0x1f0>)
1a004830:	6153      	str	r3, [r2, #20]
1a004832:	e00e      	b.n	1a004852 <SysTick_Handler+0x126>
					} else if (motor1.requestedVelocity < 0) {
1a004834:	4b39      	ldr	r3, [pc, #228]	; (1a00491c <SysTick_Handler+0x1f0>)
1a004836:	695b      	ldr	r3, [r3, #20]
1a004838:	2b00      	cmp	r3, #0
1a00483a:	da0a      	bge.n	1a004852 <SysTick_Handler+0x126>
						motor1.requestedVelocity++;
1a00483c:	4b37      	ldr	r3, [pc, #220]	; (1a00491c <SysTick_Handler+0x1f0>)
1a00483e:	695b      	ldr	r3, [r3, #20]
1a004840:	3301      	adds	r3, #1
1a004842:	4a36      	ldr	r2, [pc, #216]	; (1a00491c <SysTick_Handler+0x1f0>)
1a004844:	6153      	str	r3, [r2, #20]
1a004846:	e004      	b.n	1a004852 <SysTick_Handler+0x126>
					}
				}
			} else {
				motor1.decayCounter--;
1a004848:	4b34      	ldr	r3, [pc, #208]	; (1a00491c <SysTick_Handler+0x1f0>)
1a00484a:	689b      	ldr	r3, [r3, #8]
1a00484c:	3b01      	subs	r3, #1
1a00484e:	4a33      	ldr	r2, [pc, #204]	; (1a00491c <SysTick_Handler+0x1f0>)
1a004850:	6093      	str	r3, [r2, #8]
			}
		}
	}
	if (motor0.controlMode & VELOCITY_MODE) {
1a004852:	4b30      	ldr	r3, [pc, #192]	; (1a004914 <SysTick_Handler+0x1e8>)
1a004854:	68db      	ldr	r3, [r3, #12]
1a004856:	f003 0302 	and.w	r3, r3, #2
1a00485a:	2b00      	cmp	r3, #0
1a00485c:	d003      	beq.n	1a004866 <SysTick_Handler+0x13a>
		motor0.updateRequired = 1;
1a00485e:	4b2d      	ldr	r3, [pc, #180]	; (1a004914 <SysTick_Handler+0x1e8>)
1a004860:	2201      	movs	r2, #1
1a004862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	}
	if (motor1.controlMode & VELOCITY_MODE) {
1a004866:	4b2d      	ldr	r3, [pc, #180]	; (1a00491c <SysTick_Handler+0x1f0>)
1a004868:	68db      	ldr	r3, [r3, #12]
1a00486a:	f003 0302 	and.w	r3, r3, #2
1a00486e:	2b00      	cmp	r3, #0
1a004870:	d003      	beq.n	1a00487a <SysTick_Handler+0x14e>
		motor1.updateRequired = 1;
1a004872:	4b2a      	ldr	r3, [pc, #168]	; (1a00491c <SysTick_Handler+0x1f0>)
1a004874:	2201      	movs	r2, #1
1a004876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	}
#endif
	if (++second_timer >= 1000) {
1a00487a:	4b29      	ldr	r3, [pc, #164]	; (1a004920 <SysTick_Handler+0x1f4>)
1a00487c:	881b      	ldrh	r3, [r3, #0]
1a00487e:	3301      	adds	r3, #1
1a004880:	b29a      	uxth	r2, r3
1a004882:	4b27      	ldr	r3, [pc, #156]	; (1a004920 <SysTick_Handler+0x1f4>)
1a004884:	801a      	strh	r2, [r3, #0]
1a004886:	4b26      	ldr	r3, [pc, #152]	; (1a004920 <SysTick_Handler+0x1f4>)
1a004888:	881b      	ldrh	r3, [r3, #0]
1a00488a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1a00488e:	d314      	bcc.n	1a0048ba <SysTick_Handler+0x18e>
		lastEventCount = events.currentEventRate;
1a004890:	4b24      	ldr	r3, [pc, #144]	; (1a004924 <SysTick_Handler+0x1f8>)
1a004892:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
1a004896:	330c      	adds	r3, #12
1a004898:	681b      	ldr	r3, [r3, #0]
1a00489a:	4a23      	ldr	r2, [pc, #140]	; (1a004928 <SysTick_Handler+0x1fc>)
1a00489c:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
1a00489e:	f3bf 8f4f 	dsb	sy
#if USE_SDCARD
		lastByteCount = sdcard.bytesWrittenPerSecond;
		lastEventRecordedCount = sdcard.eventsRecordedPerSecond;
#endif
		__DSB(); //Ensure it has been saved
		events.currentEventRate = 0;
1a0048a2:	4b20      	ldr	r3, [pc, #128]	; (1a004924 <SysTick_Handler+0x1f8>)
1a0048a4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
1a0048a8:	330c      	adds	r3, #12
1a0048aa:	2200      	movs	r2, #0
1a0048ac:	601a      	str	r2, [r3, #0]
#if USE_SDCARD
		sdcard.bytesWrittenPerSecond = 0;
		sdcard.eventsRecordedPerSecond = 0;
#endif

		second_timer = 0;
1a0048ae:	4b1c      	ldr	r3, [pc, #112]	; (1a004920 <SysTick_Handler+0x1f4>)
1a0048b0:	2200      	movs	r2, #0
1a0048b2:	801a      	strh	r2, [r3, #0]
		toggleLed0 = 1;
1a0048b4:	4b1d      	ldr	r3, [pc, #116]	; (1a00492c <SysTick_Handler+0x200>)
1a0048b6:	2201      	movs	r2, #1
1a0048b8:	601a      	str	r2, [r3, #0]
	}
	for (int i = 0; i < sensorsEnabledCounter; ++i) {
1a0048ba:	2300      	movs	r3, #0
1a0048bc:	607b      	str	r3, [r7, #4]
1a0048be:	e01e      	b.n	1a0048fe <SysTick_Handler+0x1d2>
		if (--enabledSensors[i]->counter == 0) {
1a0048c0:	4a1b      	ldr	r2, [pc, #108]	; (1a004930 <SysTick_Handler+0x204>)
1a0048c2:	687b      	ldr	r3, [r7, #4]
1a0048c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a0048c8:	6893      	ldr	r3, [r2, #8]
1a0048ca:	3b01      	subs	r3, #1
1a0048cc:	6093      	str	r3, [r2, #8]
1a0048ce:	2b00      	cmp	r3, #0
1a0048d0:	d112      	bne.n	1a0048f8 <SysTick_Handler+0x1cc>
			enabledSensors[i]->counter = enabledSensors[i]->reload;
1a0048d2:	4a17      	ldr	r2, [pc, #92]	; (1a004930 <SysTick_Handler+0x204>)
1a0048d4:	687b      	ldr	r3, [r7, #4]
1a0048d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0048da:	4915      	ldr	r1, [pc, #84]	; (1a004930 <SysTick_Handler+0x204>)
1a0048dc:	687a      	ldr	r2, [r7, #4]
1a0048de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
1a0048e2:	6852      	ldr	r2, [r2, #4]
1a0048e4:	609a      	str	r2, [r3, #8]
			enabledSensors[i]->triggered = 1;
1a0048e6:	4a12      	ldr	r2, [pc, #72]	; (1a004930 <SysTick_Handler+0x204>)
1a0048e8:	687b      	ldr	r3, [r7, #4]
1a0048ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0048ee:	2201      	movs	r2, #1
1a0048f0:	705a      	strb	r2, [r3, #1]
			sensorRefreshRequested = 1;
1a0048f2:	4b10      	ldr	r3, [pc, #64]	; (1a004934 <SysTick_Handler+0x208>)
1a0048f4:	2201      	movs	r2, #1
1a0048f6:	701a      	strb	r2, [r3, #0]
#endif

		second_timer = 0;
		toggleLed0 = 1;
	}
	for (int i = 0; i < sensorsEnabledCounter; ++i) {
1a0048f8:	687b      	ldr	r3, [r7, #4]
1a0048fa:	3301      	adds	r3, #1
1a0048fc:	607b      	str	r3, [r7, #4]
1a0048fe:	687a      	ldr	r2, [r7, #4]
1a004900:	4b0d      	ldr	r3, [pc, #52]	; (1a004938 <SysTick_Handler+0x20c>)
1a004902:	681b      	ldr	r3, [r3, #0]
1a004904:	429a      	cmp	r2, r3
1a004906:	d3db      	bcc.n	1a0048c0 <SysTick_Handler+0x194>
			enabledSensors[i]->counter = enabledSensors[i]->reload;
			enabledSensors[i]->triggered = 1;
			sensorRefreshRequested = 1;
		}
	}
}
1a004908:	bf00      	nop
1a00490a:	3708      	adds	r7, #8
1a00490c:	46bd      	mov	sp, r7
1a00490e:	bd80      	pop	{r7, pc}
1a004910:	10086588 	.word	0x10086588
1a004914:	1008749c 	.word	0x1008749c
1a004918:	51eb851f 	.word	0x51eb851f
1a00491c:	10087460 	.word	0x10087460
1a004920:	1008658a 	.word	0x1008658a
1a004924:	10080000 	.word	0x10080000
1a004928:	1008657c 	.word	0x1008657c
1a00492c:	10086520 	.word	0x10086520
1a004930:	100877ec 	.word	0x100877ec
1a004934:	10087568 	.word	0x10087568
1a004938:	1008786c 	.word	0x1008786c

1a00493c <Chip_DAC_ConfigDAConverterControl>:
 *                  - DAC_DMA_ENA    :enable/disable DMA access
 * @return	Nothing
 * @note	Pass an Or'ed value of the DAC flags to enable those options.
 */
STATIC INLINE void Chip_DAC_ConfigDAConverterControl(LPC_DAC_T *pDAC, uint32_t dacFlags)
{
1a00493c:	b480      	push	{r7}
1a00493e:	b085      	sub	sp, #20
1a004940:	af00      	add	r7, sp, #0
1a004942:	6078      	str	r0, [r7, #4]
1a004944:	6039      	str	r1, [r7, #0]
	uint32_t temp;

	temp = pDAC->CTRL & ~DAC_DACCTRL_MASK;
1a004946:	687b      	ldr	r3, [r7, #4]
1a004948:	685b      	ldr	r3, [r3, #4]
1a00494a:	f023 030f 	bic.w	r3, r3, #15
1a00494e:	60fb      	str	r3, [r7, #12]
	pDAC->CTRL = temp | dacFlags;
1a004950:	68fa      	ldr	r2, [r7, #12]
1a004952:	683b      	ldr	r3, [r7, #0]
1a004954:	431a      	orrs	r2, r3
1a004956:	687b      	ldr	r3, [r7, #4]
1a004958:	605a      	str	r2, [r3, #4]
}
1a00495a:	bf00      	nop
1a00495c:	3714      	adds	r7, #20
1a00495e:	46bd      	mov	sp, r7
1a004960:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004964:	4770      	bx	lr
1a004966:	bf00      	nop

1a004968 <DacInit>:
 * Input for the wakeup comparator
 * The DAC uses a 10 bit value and the V_DAC is 2.8V
 * 366 * 2.8 / 1024 ~= 1 V
 */
#define COMPARATOR_OUTPUT_VALUE  	(366)
void DacInit() {
1a004968:	b580      	push	{r7, lr}
1a00496a:	af00      	add	r7, sp, #0
	Chip_DAC_Init(LPC_DAC);
1a00496c:	4808      	ldr	r0, [pc, #32]	; (1a004990 <DacInit+0x28>)
1a00496e:	f00d fe9b 	bl	1a0126a8 <Chip_DAC_Init>
	Chip_DAC_SetBias(LPC_DAC, DAC_MAX_UPDATE_RATE_400kHz);
1a004972:	2101      	movs	r1, #1
1a004974:	4806      	ldr	r0, [pc, #24]	; (1a004990 <DacInit+0x28>)
1a004976:	f00d fec3 	bl	1a012700 <Chip_DAC_SetBias>
	Chip_DAC_ConfigDAConverterControl(LPC_DAC, DAC_DMA_ENA); //Needed for the DAC to work
1a00497a:	2108      	movs	r1, #8
1a00497c:	4804      	ldr	r0, [pc, #16]	; (1a004990 <DacInit+0x28>)
1a00497e:	f7ff ffdd 	bl	1a00493c <Chip_DAC_ConfigDAConverterControl>
	Chip_DAC_UpdateValue(LPC_DAC, COMPARATOR_OUTPUT_VALUE);
1a004982:	f44f 71b7 	mov.w	r1, #366	; 0x16e
1a004986:	4802      	ldr	r0, [pc, #8]	; (1a004990 <DacInit+0x28>)
1a004988:	f00d fea0 	bl	1a0126cc <Chip_DAC_UpdateValue>
}
1a00498c:	bf00      	nop
1a00498e:	bd80      	pop	{r7, pc}
1a004990:	400e1000 	.word	0x400e1000

1a004994 <SystemInit>:
const uint32_t RTCOscRateIn = 32768;
const uint32_t ExtRateIn = 0;
#define CLOCK_FREQ (192000000)

/* Set up and initialize hardware prior to call to main */
void SystemInit(void) {
1a004994:	b580      	push	{r7, lr}
1a004996:	b082      	sub	sp, #8
1a004998:	af00      	add	r7, sp, #0
#if defined(CORE_M3) || defined(CORE_M4)
	unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;
1a00499a:	4b0a      	ldr	r3, [pc, #40]	; (1a0049c4 <SystemInit+0x30>)
1a00499c:	607b      	str	r3, [r7, #4]

	*pSCB_VTOR = (unsigned int) &__vector_table;
#elif defined(__CODE_RED)
	extern void (* const g_pfnVectors[])(void);

	*pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a00499e:	4a0a      	ldr	r2, [pc, #40]	; (1a0049c8 <SystemInit+0x34>)
1a0049a0:	687b      	ldr	r3, [r7, #4]
1a0049a2:	601a      	str	r2, [r3, #0]

	*pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
	fpuInit();
1a0049a4:	f00d fec6 	bl	1a012734 <fpuInit>
#endif
	/* Chip specific SystemInit */
	Chip_SetupCoreClock(CLKIN_IRC, CLOCK_FREQ, true);
1a0049a8:	2201      	movs	r2, #1
1a0049aa:	4908      	ldr	r1, [pc, #32]	; (1a0049cc <SystemInit+0x38>)
1a0049ac:	2001      	movs	r0, #1
1a0049ae:	f00e fc6f 	bl	1a013290 <Chip_SetupCoreClock>
	SystemCoreClockUpdate();
1a0049b2:	f00d f991 	bl	1a011cd8 <SystemCoreClockUpdate>
	Chip_OTP_Init();
1a0049b6:	f00e fae5 	bl	1a012f84 <Chip_OTP_Init>
#endif /* defined(CORE_M3) || defined(CORE_M4) */
}
1a0049ba:	bf00      	nop
1a0049bc:	3708      	adds	r7, #8
1a0049be:	46bd      	mov	sp, r7
1a0049c0:	bd80      	pop	{r7, pc}
1a0049c2:	bf00      	nop
1a0049c4:	e000ed08 	.word	0xe000ed08
1a0049c8:	1a000000 	.word	0x1a000000
1a0049cc:	0b71b000 	.word	0x0b71b000

1a0049d0 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
1a0049d0:	b480      	push	{r7}
1a0049d2:	b083      	sub	sp, #12
1a0049d4:	af00      	add	r7, sp, #0
1a0049d6:	4603      	mov	r3, r0
1a0049d8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1a0049da:	4909      	ldr	r1, [pc, #36]	; (1a004a00 <NVIC_DisableIRQ+0x30>)
1a0049dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a0049e0:	095b      	lsrs	r3, r3, #5
1a0049e2:	79fa      	ldrb	r2, [r7, #7]
1a0049e4:	f002 021f 	and.w	r2, r2, #31
1a0049e8:	2001      	movs	r0, #1
1a0049ea:	fa00 f202 	lsl.w	r2, r0, r2
1a0049ee:	3320      	adds	r3, #32
1a0049f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
1a0049f4:	bf00      	nop
1a0049f6:	370c      	adds	r7, #12
1a0049f8:	46bd      	mov	sp, r7
1a0049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0049fe:	4770      	bx	lr
1a004a00:	e000e100 	.word	0xe000e100

1a004a04 <Chip_SCU_PinMuxSet>:
 * @return	Nothing
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a004a04:	b480      	push	{r7}
1a004a06:	b083      	sub	sp, #12
1a004a08:	af00      	add	r7, sp, #0
1a004a0a:	4603      	mov	r3, r0
1a004a0c:	71fb      	strb	r3, [r7, #7]
1a004a0e:	460b      	mov	r3, r1
1a004a10:	71bb      	strb	r3, [r7, #6]
1a004a12:	4613      	mov	r3, r2
1a004a14:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a004a16:	4807      	ldr	r0, [pc, #28]	; (1a004a34 <Chip_SCU_PinMuxSet+0x30>)
1a004a18:	79f9      	ldrb	r1, [r7, #7]
1a004a1a:	79bb      	ldrb	r3, [r7, #6]
1a004a1c:	88ba      	ldrh	r2, [r7, #4]
1a004a1e:	0149      	lsls	r1, r1, #5
1a004a20:	440b      	add	r3, r1
1a004a22:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a004a26:	bf00      	nop
1a004a28:	370c      	adds	r7, #12
1a004a2a:	46bd      	mov	sp, r7
1a004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004a30:	4770      	bx	lr
1a004a32:	bf00      	nop
1a004a34:	40086000 	.word	0x40086000

1a004a38 <Chip_GPIO_SetPinDIROutput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a004a38:	b480      	push	{r7}
1a004a3a:	b083      	sub	sp, #12
1a004a3c:	af00      	add	r7, sp, #0
1a004a3e:	6078      	str	r0, [r7, #4]
1a004a40:	460b      	mov	r3, r1
1a004a42:	70fb      	strb	r3, [r7, #3]
1a004a44:	4613      	mov	r3, r2
1a004a46:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] |= 1UL << pin;
1a004a48:	78fa      	ldrb	r2, [r7, #3]
1a004a4a:	78f9      	ldrb	r1, [r7, #3]
1a004a4c:	687b      	ldr	r3, [r7, #4]
1a004a4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a004a52:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a004a56:	78bb      	ldrb	r3, [r7, #2]
1a004a58:	2001      	movs	r0, #1
1a004a5a:	fa00 f303 	lsl.w	r3, r0, r3
1a004a5e:	4319      	orrs	r1, r3
1a004a60:	687b      	ldr	r3, [r7, #4]
1a004a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a004a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a004a6a:	bf00      	nop
1a004a6c:	370c      	adds	r7, #12
1a004a6e:	46bd      	mov	sp, r7
1a004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004a74:	4770      	bx	lr
1a004a76:	bf00      	nop

1a004a78 <Chip_GPIO_SetPinDIRInput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a004a78:	b480      	push	{r7}
1a004a7a:	b083      	sub	sp, #12
1a004a7c:	af00      	add	r7, sp, #0
1a004a7e:	6078      	str	r0, [r7, #4]
1a004a80:	460b      	mov	r3, r1
1a004a82:	70fb      	strb	r3, [r7, #3]
1a004a84:	4613      	mov	r3, r2
1a004a86:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a004a88:	78fa      	ldrb	r2, [r7, #3]
1a004a8a:	78f9      	ldrb	r1, [r7, #3]
1a004a8c:	687b      	ldr	r3, [r7, #4]
1a004a8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a004a92:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a004a96:	78bb      	ldrb	r3, [r7, #2]
1a004a98:	2001      	movs	r0, #1
1a004a9a:	fa00 f303 	lsl.w	r3, r0, r3
1a004a9e:	43db      	mvns	r3, r3
1a004aa0:	4019      	ands	r1, r3
1a004aa2:	687b      	ldr	r3, [r7, #4]
1a004aa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a004aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a004aac:	bf00      	nop
1a004aae:	370c      	adds	r7, #12
1a004ab0:	46bd      	mov	sp, r7
1a004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004ab6:	4770      	bx	lr

1a004ab8 <Chip_GPIO_SetPinOutHigh>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a004ab8:	b480      	push	{r7}
1a004aba:	b083      	sub	sp, #12
1a004abc:	af00      	add	r7, sp, #0
1a004abe:	6078      	str	r0, [r7, #4]
1a004ac0:	460b      	mov	r3, r1
1a004ac2:	70fb      	strb	r3, [r7, #3]
1a004ac4:	4613      	mov	r3, r2
1a004ac6:	70bb      	strb	r3, [r7, #2]
	pGPIO->SET[port] = (1 << pin);
1a004ac8:	78fa      	ldrb	r2, [r7, #3]
1a004aca:	78bb      	ldrb	r3, [r7, #2]
1a004acc:	2101      	movs	r1, #1
1a004ace:	fa01 f303 	lsl.w	r3, r1, r3
1a004ad2:	4619      	mov	r1, r3
1a004ad4:	687b      	ldr	r3, [r7, #4]
1a004ad6:	f502 6208 	add.w	r2, r2, #2176	; 0x880
1a004ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a004ade:	bf00      	nop
1a004ae0:	370c      	adds	r7, #12
1a004ae2:	46bd      	mov	sp, r7
1a004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004ae8:	4770      	bx	lr
1a004aea:	bf00      	nop

1a004aec <Chip_GPIO_SetPinOutLow>:
 * @return	None
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a004aec:	b480      	push	{r7}
1a004aee:	b083      	sub	sp, #12
1a004af0:	af00      	add	r7, sp, #0
1a004af2:	6078      	str	r0, [r7, #4]
1a004af4:	460b      	mov	r3, r1
1a004af6:	70fb      	strb	r3, [r7, #3]
1a004af8:	4613      	mov	r3, r2
1a004afa:	70bb      	strb	r3, [r7, #2]
	pGPIO->CLR[port] = (1 << pin);
1a004afc:	78fa      	ldrb	r2, [r7, #3]
1a004afe:	78bb      	ldrb	r3, [r7, #2]
1a004b00:	2101      	movs	r1, #1
1a004b02:	fa01 f303 	lsl.w	r3, r1, r3
1a004b06:	4619      	mov	r1, r3
1a004b08:	687b      	ldr	r3, [r7, #4]
1a004b0a:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
1a004b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a004b12:	bf00      	nop
1a004b14:	370c      	adds	r7, #12
1a004b16:	46bd      	mov	sp, r7
1a004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004b1c:	4770      	bx	lr
1a004b1e:	bf00      	nop

1a004b20 <Chip_RTC_GetTime>:
 * @param	pRTC		: RTC peripheral selected
 * @param	Timetype	: Time field index type to get
 * @return	Value of time field according to specified time type
 */
STATIC INLINE uint32_t Chip_RTC_GetTime(LPC_RTC_T *pRTC, RTC_TIMEINDEX_T Timetype)
{
1a004b20:	b480      	push	{r7}
1a004b22:	b083      	sub	sp, #12
1a004b24:	af00      	add	r7, sp, #0
1a004b26:	6078      	str	r0, [r7, #4]
1a004b28:	460b      	mov	r3, r1
1a004b2a:	70fb      	strb	r3, [r7, #3]
	return pRTC->TIME[Timetype];
1a004b2c:	78fa      	ldrb	r2, [r7, #3]
1a004b2e:	687b      	ldr	r3, [r7, #4]
1a004b30:	3208      	adds	r2, #8
1a004b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
1a004b36:	4618      	mov	r0, r3
1a004b38:	370c      	adds	r7, #12
1a004b3a:	46bd      	mov	sp, r7
1a004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004b40:	4770      	bx	lr
1a004b42:	bf00      	nop

1a004b44 <Chip_TIMER_Enable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @return	Nothing
 * @note	Enables the timer to start counting.
 */
STATIC INLINE void Chip_TIMER_Enable(LPC_TIMER_T *pTMR)
{
1a004b44:	b480      	push	{r7}
1a004b46:	b083      	sub	sp, #12
1a004b48:	af00      	add	r7, sp, #0
1a004b4a:	6078      	str	r0, [r7, #4]
	pTMR->TCR |= TIMER_ENABLE;
1a004b4c:	687b      	ldr	r3, [r7, #4]
1a004b4e:	685b      	ldr	r3, [r3, #4]
1a004b50:	f043 0201 	orr.w	r2, r3, #1
1a004b54:	687b      	ldr	r3, [r7, #4]
1a004b56:	605a      	str	r2, [r3, #4]
}
1a004b58:	bf00      	nop
1a004b5a:	370c      	adds	r7, #12
1a004b5c:	46bd      	mov	sp, r7
1a004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004b62:	4770      	bx	lr

1a004b64 <Chip_TIMER_Disable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @return	Nothing
 * @note	Disables the timer to stop counting.
 */
STATIC INLINE void Chip_TIMER_Disable(LPC_TIMER_T *pTMR)
{
1a004b64:	b480      	push	{r7}
1a004b66:	b083      	sub	sp, #12
1a004b68:	af00      	add	r7, sp, #0
1a004b6a:	6078      	str	r0, [r7, #4]
	pTMR->TCR &= ~TIMER_ENABLE;
1a004b6c:	687b      	ldr	r3, [r7, #4]
1a004b6e:	685b      	ldr	r3, [r3, #4]
1a004b70:	f023 0201 	bic.w	r2, r3, #1
1a004b74:	687b      	ldr	r3, [r7, #4]
1a004b76:	605a      	str	r2, [r3, #4]
}
1a004b78:	bf00      	nop
1a004b7a:	370c      	adds	r7, #12
1a004b7c:	46bd      	mov	sp, r7
1a004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004b82:	4770      	bx	lr

1a004b84 <Chip_TIMER_PrescaleSet>:
 * @param	prescale	: Prescale value to set the prescale register to
 * @return	Nothing
 * @note	Sets the prescale count value.
 */
STATIC INLINE void Chip_TIMER_PrescaleSet(LPC_TIMER_T *pTMR, uint32_t prescale)
{
1a004b84:	b480      	push	{r7}
1a004b86:	b083      	sub	sp, #12
1a004b88:	af00      	add	r7, sp, #0
1a004b8a:	6078      	str	r0, [r7, #4]
1a004b8c:	6039      	str	r1, [r7, #0]
	pTMR->PR = prescale;
1a004b8e:	687b      	ldr	r3, [r7, #4]
1a004b90:	683a      	ldr	r2, [r7, #0]
1a004b92:	60da      	str	r2, [r3, #12]
}
1a004b94:	bf00      	nop
1a004b96:	370c      	adds	r7, #12
1a004b98:	46bd      	mov	sp, r7
1a004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004b9e:	4770      	bx	lr

1a004ba0 <Chip_TIMER_SetMatch>:
 * @param	matchval	: Match value for the selected match count
 * @return	Nothing
 * @note	Sets one of the timer match values.
 */
STATIC INLINE void Chip_TIMER_SetMatch(LPC_TIMER_T *pTMR, int8_t matchnum, uint32_t matchval)
{
1a004ba0:	b480      	push	{r7}
1a004ba2:	b085      	sub	sp, #20
1a004ba4:	af00      	add	r7, sp, #0
1a004ba6:	60f8      	str	r0, [r7, #12]
1a004ba8:	460b      	mov	r3, r1
1a004baa:	607a      	str	r2, [r7, #4]
1a004bac:	72fb      	strb	r3, [r7, #11]
	pTMR->MR[matchnum] = matchval;
1a004bae:	f997 200b 	ldrsb.w	r2, [r7, #11]
1a004bb2:	68fb      	ldr	r3, [r7, #12]
1a004bb4:	3206      	adds	r2, #6
1a004bb6:	6879      	ldr	r1, [r7, #4]
1a004bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a004bbc:	bf00      	nop
1a004bbe:	3714      	adds	r7, #20
1a004bc0:	46bd      	mov	sp, r7
1a004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004bc6:	4770      	bx	lr

1a004bc8 <Chip_TIMER_MatchDisableInt>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchDisableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a004bc8:	b480      	push	{r7}
1a004bca:	b083      	sub	sp, #12
1a004bcc:	af00      	add	r7, sp, #0
1a004bce:	6078      	str	r0, [r7, #4]
1a004bd0:	460b      	mov	r3, r1
1a004bd2:	70fb      	strb	r3, [r7, #3]
	pTMR->MCR &= ~TIMER_INT_ON_MATCH(matchnum);
1a004bd4:	687b      	ldr	r3, [r7, #4]
1a004bd6:	6959      	ldr	r1, [r3, #20]
1a004bd8:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a004bdc:	4613      	mov	r3, r2
1a004bde:	005b      	lsls	r3, r3, #1
1a004be0:	4413      	add	r3, r2
1a004be2:	2201      	movs	r2, #1
1a004be4:	fa02 f303 	lsl.w	r3, r2, r3
1a004be8:	43db      	mvns	r3, r3
1a004bea:	ea01 0203 	and.w	r2, r1, r3
1a004bee:	687b      	ldr	r3, [r7, #4]
1a004bf0:	615a      	str	r2, [r3, #20]
}
1a004bf2:	bf00      	nop
1a004bf4:	370c      	adds	r7, #12
1a004bf6:	46bd      	mov	sp, r7
1a004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004bfc:	4770      	bx	lr
1a004bfe:	bf00      	nop

1a004c00 <Chip_TIMER_ResetOnMatchEnable>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_ResetOnMatchEnable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a004c00:	b480      	push	{r7}
1a004c02:	b083      	sub	sp, #12
1a004c04:	af00      	add	r7, sp, #0
1a004c06:	6078      	str	r0, [r7, #4]
1a004c08:	460b      	mov	r3, r1
1a004c0a:	70fb      	strb	r3, [r7, #3]
	pTMR->MCR |= TIMER_RESET_ON_MATCH(matchnum);
1a004c0c:	687b      	ldr	r3, [r7, #4]
1a004c0e:	6959      	ldr	r1, [r3, #20]
1a004c10:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a004c14:	4613      	mov	r3, r2
1a004c16:	005b      	lsls	r3, r3, #1
1a004c18:	4413      	add	r3, r2
1a004c1a:	3301      	adds	r3, #1
1a004c1c:	2201      	movs	r2, #1
1a004c1e:	fa02 f303 	lsl.w	r3, r2, r3
1a004c22:	ea41 0203 	orr.w	r2, r1, r3
1a004c26:	687b      	ldr	r3, [r7, #4]
1a004c28:	615a      	str	r2, [r3, #20]
}
1a004c2a:	bf00      	nop
1a004c2c:	370c      	adds	r7, #12
1a004c2e:	46bd      	mov	sp, r7
1a004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004c34:	4770      	bx	lr
1a004c36:	bf00      	nop

1a004c38 <Chip_TIMER_StopOnMatchDisable>:
 * @param	pTMR		: Pointer to timer IP register address
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_StopOnMatchDisable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
1a004c38:	b480      	push	{r7}
1a004c3a:	b083      	sub	sp, #12
1a004c3c:	af00      	add	r7, sp, #0
1a004c3e:	6078      	str	r0, [r7, #4]
1a004c40:	460b      	mov	r3, r1
1a004c42:	70fb      	strb	r3, [r7, #3]
	pTMR->MCR &= ~TIMER_STOP_ON_MATCH(matchnum);
1a004c44:	687b      	ldr	r3, [r7, #4]
1a004c46:	6959      	ldr	r1, [r3, #20]
1a004c48:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a004c4c:	4613      	mov	r3, r2
1a004c4e:	005b      	lsls	r3, r3, #1
1a004c50:	4413      	add	r3, r2
1a004c52:	3302      	adds	r3, #2
1a004c54:	2201      	movs	r2, #1
1a004c56:	fa02 f303 	lsl.w	r3, r2, r3
1a004c5a:	43db      	mvns	r3, r3
1a004c5c:	ea01 0203 	and.w	r2, r1, r3
1a004c60:	687b      	ldr	r3, [r7, #4]
1a004c62:	615a      	str	r2, [r3, #20]
}
1a004c64:	bf00      	nop
1a004c66:	370c      	adds	r7, #12
1a004c68:	46bd      	mov	sp, r7
1a004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004c6e:	4770      	bx	lr

1a004c70 <Chip_TIMER_CaptureRisingEdgeEnable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @param	capnum	: Capture signal/register to use
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_CaptureRisingEdgeEnable(LPC_TIMER_T *pTMR, int8_t capnum)
{
1a004c70:	b480      	push	{r7}
1a004c72:	b083      	sub	sp, #12
1a004c74:	af00      	add	r7, sp, #0
1a004c76:	6078      	str	r0, [r7, #4]
1a004c78:	460b      	mov	r3, r1
1a004c7a:	70fb      	strb	r3, [r7, #3]
	pTMR->CCR |= TIMER_CAP_RISING(capnum);
1a004c7c:	687b      	ldr	r3, [r7, #4]
1a004c7e:	6a99      	ldr	r1, [r3, #40]	; 0x28
1a004c80:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a004c84:	4613      	mov	r3, r2
1a004c86:	005b      	lsls	r3, r3, #1
1a004c88:	4413      	add	r3, r2
1a004c8a:	2201      	movs	r2, #1
1a004c8c:	fa02 f303 	lsl.w	r3, r2, r3
1a004c90:	ea41 0203 	orr.w	r2, r1, r3
1a004c94:	687b      	ldr	r3, [r7, #4]
1a004c96:	629a      	str	r2, [r3, #40]	; 0x28
}
1a004c98:	bf00      	nop
1a004c9a:	370c      	adds	r7, #12
1a004c9c:	46bd      	mov	sp, r7
1a004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004ca2:	4770      	bx	lr

1a004ca4 <Chip_TIMER_CaptureFallingEdgeEnable>:
 * @param	pTMR	: Pointer to timer IP register address
 * @param	capnum	: Capture signal/register to use
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_CaptureFallingEdgeEnable(LPC_TIMER_T *pTMR, int8_t capnum)
{
1a004ca4:	b480      	push	{r7}
1a004ca6:	b083      	sub	sp, #12
1a004ca8:	af00      	add	r7, sp, #0
1a004caa:	6078      	str	r0, [r7, #4]
1a004cac:	460b      	mov	r3, r1
1a004cae:	70fb      	strb	r3, [r7, #3]
	pTMR->CCR |= TIMER_CAP_FALLING(capnum);
1a004cb0:	687b      	ldr	r3, [r7, #4]
1a004cb2:	6a99      	ldr	r1, [r3, #40]	; 0x28
1a004cb4:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a004cb8:	4613      	mov	r3, r2
1a004cba:	005b      	lsls	r3, r3, #1
1a004cbc:	4413      	add	r3, r2
1a004cbe:	3301      	adds	r3, #1
1a004cc0:	2201      	movs	r2, #1
1a004cc2:	fa02 f303 	lsl.w	r3, r2, r3
1a004cc6:	ea41 0203 	orr.w	r2, r1, r3
1a004cca:	687b      	ldr	r3, [r7, #4]
1a004ccc:	629a      	str	r2, [r3, #40]	; 0x28
}
1a004cce:	bf00      	nop
1a004cd0:	370c      	adds	r7, #12
1a004cd2:	46bd      	mov	sp, r7
1a004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004cd8:	4770      	bx	lr
1a004cda:	bf00      	nop

1a004cdc <Chip_TIMER_CaptureDisableInt>:
 * @param	pTMR	: Pointer to timer IP register address
 * @param	capnum	: Capture signal/register to use
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_CaptureDisableInt(LPC_TIMER_T *pTMR, int8_t capnum)
{
1a004cdc:	b480      	push	{r7}
1a004cde:	b083      	sub	sp, #12
1a004ce0:	af00      	add	r7, sp, #0
1a004ce2:	6078      	str	r0, [r7, #4]
1a004ce4:	460b      	mov	r3, r1
1a004ce6:	70fb      	strb	r3, [r7, #3]
	pTMR->CCR &= ~TIMER_INT_ON_CAP(capnum);
1a004ce8:	687b      	ldr	r3, [r7, #4]
1a004cea:	6a99      	ldr	r1, [r3, #40]	; 0x28
1a004cec:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a004cf0:	4613      	mov	r3, r2
1a004cf2:	005b      	lsls	r3, r3, #1
1a004cf4:	4413      	add	r3, r2
1a004cf6:	3302      	adds	r3, #2
1a004cf8:	2201      	movs	r2, #1
1a004cfa:	fa02 f303 	lsl.w	r3, r2, r3
1a004cfe:	43db      	mvns	r3, r3
1a004d00:	ea01 0203 	and.w	r2, r1, r3
1a004d04:	687b      	ldr	r3, [r7, #4]
1a004d06:	629a      	str	r2, [r3, #40]	; 0x28
}
1a004d08:	bf00      	nop
1a004d0a:	370c      	adds	r7, #12
1a004d0c:	46bd      	mov	sp, r7
1a004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004d12:	4770      	bx	lr

1a004d14 <Chip_TIMER_TIMER_SetCountClockSrc>:
 * @note	If CapSrc selected a CAPn pin, select the specific CAPn pin with the capnum value.
 */
STATIC INLINE void Chip_TIMER_TIMER_SetCountClockSrc(LPC_TIMER_T *pTMR,
													 TIMER_CAP_SRC_STATE_T capSrc,
													 int8_t capnum)
{
1a004d14:	b480      	push	{r7}
1a004d16:	b083      	sub	sp, #12
1a004d18:	af00      	add	r7, sp, #0
1a004d1a:	6078      	str	r0, [r7, #4]
1a004d1c:	460b      	mov	r3, r1
1a004d1e:	70fb      	strb	r3, [r7, #3]
1a004d20:	4613      	mov	r3, r2
1a004d22:	70bb      	strb	r3, [r7, #2]
	pTMR->CTCR = (uint32_t) capSrc | ((uint32_t) capnum) << 2;
1a004d24:	78fa      	ldrb	r2, [r7, #3]
1a004d26:	f997 3002 	ldrsb.w	r3, [r7, #2]
1a004d2a:	009b      	lsls	r3, r3, #2
1a004d2c:	431a      	orrs	r2, r3
1a004d2e:	687b      	ldr	r3, [r7, #4]
1a004d30:	671a      	str	r2, [r3, #112]	; 0x70
}
1a004d32:	bf00      	nop
1a004d34:	370c      	adds	r7, #12
1a004d36:	46bd      	mov	sp, r7
1a004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004d3c:	4770      	bx	lr
1a004d3e:	bf00      	nop

1a004d40 <Chip_UART_TXEnable>:
 * @brief	Enable transmission on UART TxD pin
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
1a004d40:	b480      	push	{r7}
1a004d42:	b083      	sub	sp, #12
1a004d44:	af00      	add	r7, sp, #0
1a004d46:	6078      	str	r0, [r7, #4]
    pUART->TER2 = UART_TER2_TXEN;
1a004d48:	687b      	ldr	r3, [r7, #4]
1a004d4a:	2201      	movs	r2, #1
1a004d4c:	65da      	str	r2, [r3, #92]	; 0x5c
}
1a004d4e:	bf00      	nop
1a004d50:	370c      	adds	r7, #12
1a004d52:	46bd      	mov	sp, r7
1a004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004d58:	4770      	bx	lr
1a004d5a:	bf00      	nop

1a004d5c <Chip_UART_SetModemControl>:
 * @return	Nothing
 * @note	Use an Or'ed value of UART_MCR_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetModemControl(LPC_USART_T *pUART, uint32_t mcr)
{
1a004d5c:	b480      	push	{r7}
1a004d5e:	b083      	sub	sp, #12
1a004d60:	af00      	add	r7, sp, #0
1a004d62:	6078      	str	r0, [r7, #4]
1a004d64:	6039      	str	r1, [r7, #0]
	pUART->MCR |= mcr;
1a004d66:	687b      	ldr	r3, [r7, #4]
1a004d68:	691a      	ldr	r2, [r3, #16]
1a004d6a:	683b      	ldr	r3, [r7, #0]
1a004d6c:	431a      	orrs	r2, r3
1a004d6e:	687b      	ldr	r3, [r7, #4]
1a004d70:	611a      	str	r2, [r3, #16]
}
1a004d72:	bf00      	nop
1a004d74:	370c      	adds	r7, #12
1a004d76:	46bd      	mov	sp, r7
1a004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004d7c:	4770      	bx	lr
1a004d7e:	bf00      	nop

1a004d80 <LED0SetOff>:
void ExtraPinsInit();

/**
 * It disables the green LED
 */
static inline void LED0SetOff(void) {
1a004d80:	b580      	push	{r7, lr}
1a004d82:	af00      	add	r7, sp, #0
	Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, LED0_PORT_GPIO, LED0_PIN_GPIO); //Turn on the LED
1a004d84:	2200      	movs	r2, #0
1a004d86:	2100      	movs	r1, #0
1a004d88:	4802      	ldr	r0, [pc, #8]	; (1a004d94 <LED0SetOff+0x14>)
1a004d8a:	f7ff fe95 	bl	1a004ab8 <Chip_GPIO_SetPinOutHigh>
}
1a004d8e:	bf00      	nop
1a004d90:	bd80      	pop	{r7, pc}
1a004d92:	bf00      	nop
1a004d94:	400f4000 	.word	0x400f4000

1a004d98 <LED0SetOn>:
/**
 * It enables the green LED
 */
static inline void LED0SetOn(void) {
1a004d98:	b580      	push	{r7, lr}
1a004d9a:	af00      	add	r7, sp, #0
	Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, LED0_PORT_GPIO, LED0_PIN_GPIO); //Turn off the LED
1a004d9c:	2200      	movs	r2, #0
1a004d9e:	2100      	movs	r1, #0
1a004da0:	4802      	ldr	r0, [pc, #8]	; (1a004dac <LED0SetOn+0x14>)
1a004da2:	f7ff fea3 	bl	1a004aec <Chip_GPIO_SetPinOutLow>
}
1a004da6:	bf00      	nop
1a004da8:	bd80      	pop	{r7, pc}
1a004daa:	bf00      	nop
1a004dac:	400f4000 	.word	0x400f4000

1a004db0 <LED0SetBlinking>:
}
/**
 * It enables or disables the automatic 0.5Hz green LED blinking.
 * @param flag ENABLE or DISABLE
 */
static inline void LED0SetBlinking(uint8_t flag) {
1a004db0:	b480      	push	{r7}
1a004db2:	b083      	sub	sp, #12
1a004db4:	af00      	add	r7, sp, #0
1a004db6:	4603      	mov	r3, r0
1a004db8:	71fb      	strb	r3, [r7, #7]
	ledBlinking = flag ? 1 : 0;
1a004dba:	79fb      	ldrb	r3, [r7, #7]
1a004dbc:	2b00      	cmp	r3, #0
1a004dbe:	bf14      	ite	ne
1a004dc0:	2301      	movne	r3, #1
1a004dc2:	2300      	moveq	r3, #0
1a004dc4:	b2db      	uxtb	r3, r3
1a004dc6:	461a      	mov	r2, r3
1a004dc8:	4b03      	ldr	r3, [pc, #12]	; (1a004dd8 <LED0SetBlinking+0x28>)
1a004dca:	701a      	strb	r2, [r3, #0]
}
1a004dcc:	bf00      	nop
1a004dce:	370c      	adds	r7, #12
1a004dd0:	46bd      	mov	sp, r7
1a004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004dd6:	4770      	bx	lr
1a004dd8:	10086524 	.word	0x10086524

1a004ddc <pushByteToTransmission>:
};

//Transmit buffer that will be used on the rest of the system
extern volatile struct uart_hal  uart;

static inline void pushByteToTransmission(volatile struct uart_hal * uart, uint8_t byte) {
1a004ddc:	b480      	push	{r7}
1a004dde:	b083      	sub	sp, #12
1a004de0:	af00      	add	r7, sp, #0
1a004de2:	6078      	str	r0, [r7, #4]
1a004de4:	460b      	mov	r3, r1
1a004de6:	70fb      	strb	r3, [r7, #3]
	uart->txBuffer[uart->txBufferWritePointer] = byte;
1a004de8:	687b      	ldr	r3, [r7, #4]
1a004dea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a004dee:	681b      	ldr	r3, [r3, #0]
1a004df0:	687a      	ldr	r2, [r7, #4]
1a004df2:	78f9      	ldrb	r1, [r7, #3]
1a004df4:	54d1      	strb	r1, [r2, r3]
	uart->txBufferWritePointer = (uart->txBufferWritePointer + 1) & TX_BUFFER_MASK;
1a004df6:	687b      	ldr	r3, [r7, #4]
1a004df8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a004dfc:	681b      	ldr	r3, [r3, #0]
1a004dfe:	3301      	adds	r3, #1
1a004e00:	f3c3 020b 	ubfx	r2, r3, #0, #12
1a004e04:	687b      	ldr	r3, [r7, #4]
1a004e06:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a004e0a:	601a      	str	r2, [r3, #0]
}
1a004e0c:	bf00      	nop
1a004e0e:	370c      	adds	r7, #12
1a004e10:	46bd      	mov	sp, r7
1a004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004e16:	4770      	bx	lr

1a004e18 <freeSpaceForReception>:
	volatile uint8_t ret = uart->rxBuffer[uart->rxBufferReadPointer];
	uart->rxBufferReadPointer = (uart->rxBufferReadPointer + 1) & RX_BUFFER_MASK;
	return ret;
}

static inline uint32_t freeSpaceForReception(volatile struct uart_hal * uart) {
1a004e18:	b480      	push	{r7}
1a004e1a:	b083      	sub	sp, #12
1a004e1c:	af00      	add	r7, sp, #0
1a004e1e:	6078      	str	r0, [r7, #4]
	return (uart->rxBufferReadPointer - uart->rxBufferWritePointer - 1) & RX_BUFFER_MASK;
1a004e20:	687b      	ldr	r3, [r7, #4]
1a004e22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a004e26:	330c      	adds	r3, #12
1a004e28:	681a      	ldr	r2, [r3, #0]
1a004e2a:	687b      	ldr	r3, [r7, #4]
1a004e2c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a004e30:	3308      	adds	r3, #8
1a004e32:	681b      	ldr	r3, [r3, #0]
1a004e34:	1ad3      	subs	r3, r2, r3
1a004e36:	3b01      	subs	r3, #1
1a004e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
1a004e3c:	4618      	mov	r0, r3
1a004e3e:	370c      	adds	r7, #12
1a004e40:	46bd      	mov	sp, r7
1a004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004e46:	4770      	bx	lr

1a004e48 <freeSpaceForTranmission>:
static inline uint32_t freeSpaceForTranmission(volatile struct uart_hal * uart) {
1a004e48:	b480      	push	{r7}
1a004e4a:	b083      	sub	sp, #12
1a004e4c:	af00      	add	r7, sp, #0
1a004e4e:	6078      	str	r0, [r7, #4]
	return (uart->txBufferReadPointer - uart->txBufferWritePointer - 1) & TX_BUFFER_MASK;
1a004e50:	687b      	ldr	r3, [r7, #4]
1a004e52:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a004e56:	3304      	adds	r3, #4
1a004e58:	681a      	ldr	r2, [r3, #0]
1a004e5a:	687b      	ldr	r3, [r7, #4]
1a004e5c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
1a004e60:	681b      	ldr	r3, [r3, #0]
1a004e62:	1ad3      	subs	r3, r2, r3
1a004e64:	3b01      	subs	r3, #1
1a004e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
1a004e6a:	4618      	mov	r0, r3
1a004e6c:	370c      	adds	r7, #12
1a004e6e:	46bd      	mov	sp, r7
1a004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004e74:	4770      	bx	lr
1a004e76:	bf00      	nop

1a004e78 <Chip_RTC_Clock_Running>:

/**
 * @brief	Check if RTC clock is running
 * @return	zero if the RTC clock is not running.
 */
STATIC INLINE uint32_t Chip_RTC_Clock_Running(void) {
1a004e78:	b480      	push	{r7}
1a004e7a:	af00      	add	r7, sp, #0
	return (LPC_CREG->CREG0 & 0x3) == 0x03;
1a004e7c:	4b06      	ldr	r3, [pc, #24]	; (1a004e98 <Chip_RTC_Clock_Running+0x20>)
1a004e7e:	685b      	ldr	r3, [r3, #4]
1a004e80:	f003 0303 	and.w	r3, r3, #3
1a004e84:	2b03      	cmp	r3, #3
1a004e86:	bf0c      	ite	eq
1a004e88:	2301      	moveq	r3, #1
1a004e8a:	2300      	movne	r3, #0
1a004e8c:	b2db      	uxtb	r3, r3
}
1a004e8e:	4618      	mov	r0, r3
1a004e90:	46bd      	mov	sp, r7
1a004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004e96:	4770      	bx	lr
1a004e98:	40043000 	.word	0x40043000

1a004e9c <DVS128FetchEventsEnable>:

/**
 * It enables or disables the streaming of retina events through the UART.
 * @param flag ENABLE or DISABLE
 */
static inline void DVS128FetchEventsEnable(uint8_t flag) {
1a004e9c:	b480      	push	{r7}
1a004e9e:	b083      	sub	sp, #12
1a004ea0:	af00      	add	r7, sp, #0
1a004ea2:	4603      	mov	r3, r0
1a004ea4:	71fb      	strb	r3, [r7, #7]
	if (flag) {
1a004ea6:	79fb      	ldrb	r3, [r7, #7]
1a004ea8:	2b00      	cmp	r3, #0
1a004eaa:	d006      	beq.n	1a004eba <DVS128FetchEventsEnable+0x1e>
		eDVSProcessingMode |= EDVS_STREAM_EVENTS;
1a004eac:	4b09      	ldr	r3, [pc, #36]	; (1a004ed4 <DVS128FetchEventsEnable+0x38>)
1a004eae:	681b      	ldr	r3, [r3, #0]
1a004eb0:	f043 0301 	orr.w	r3, r3, #1
1a004eb4:	4a07      	ldr	r2, [pc, #28]	; (1a004ed4 <DVS128FetchEventsEnable+0x38>)
1a004eb6:	6013      	str	r3, [r2, #0]
	} else {
		eDVSProcessingMode &= ~EDVS_STREAM_EVENTS;
	}
}
1a004eb8:	e005      	b.n	1a004ec6 <DVS128FetchEventsEnable+0x2a>
 */
static inline void DVS128FetchEventsEnable(uint8_t flag) {
	if (flag) {
		eDVSProcessingMode |= EDVS_STREAM_EVENTS;
	} else {
		eDVSProcessingMode &= ~EDVS_STREAM_EVENTS;
1a004eba:	4b06      	ldr	r3, [pc, #24]	; (1a004ed4 <DVS128FetchEventsEnable+0x38>)
1a004ebc:	681b      	ldr	r3, [r3, #0]
1a004ebe:	f023 0301 	bic.w	r3, r3, #1
1a004ec2:	4a04      	ldr	r2, [pc, #16]	; (1a004ed4 <DVS128FetchEventsEnable+0x38>)
1a004ec4:	6013      	str	r3, [r2, #0]
	}
}
1a004ec6:	bf00      	nop
1a004ec8:	370c      	adds	r7, #12
1a004eca:	46bd      	mov	sp, r7
1a004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004ed0:	4770      	bx	lr
1a004ed2:	bf00      	nop
1a004ed4:	1008743c 	.word	0x1008743c

1a004ed8 <UARTWriteChar>:
 ** parameters:			portNum, buffer pointer, and data length
 ** Returned value:		None
 **
 *****************************************************************************/

void UARTWriteChar(char pcBuffer) {
1a004ed8:	b580      	push	{r7, lr}
1a004eda:	b082      	sub	sp, #8
1a004edc:	af00      	add	r7, sp, #0
1a004ede:	4603      	mov	r3, r0
1a004ee0:	71fb      	strb	r3, [r7, #7]
	while (freeSpaceForTranmission(&uart) == 0) {
1a004ee2:	e000      	b.n	1a004ee6 <UARTWriteChar+0xe>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
1a004ee4:	bf00      	nop
1a004ee6:	4807      	ldr	r0, [pc, #28]	; (1a004f04 <UARTWriteChar+0x2c>)
1a004ee8:	f7ff ffae 	bl	1a004e48 <freeSpaceForTranmission>
1a004eec:	4603      	mov	r3, r0
1a004eee:	2b00      	cmp	r3, #0
1a004ef0:	d0f8      	beq.n	1a004ee4 <UARTWriteChar+0xc>
		__NOP(); //Wait for the M0 core to move some char out
	}
	pushByteToTransmission(&uart, pcBuffer);
1a004ef2:	79fb      	ldrb	r3, [r7, #7]
1a004ef4:	4619      	mov	r1, r3
1a004ef6:	4803      	ldr	r0, [pc, #12]	; (1a004f04 <UARTWriteChar+0x2c>)
1a004ef8:	f7ff ff70 	bl	1a004ddc <pushByteToTransmission>
}
1a004efc:	bf00      	nop
1a004efe:	3708      	adds	r7, #8
1a004f00:	46bd      	mov	sp, r7
1a004f02:	bd80      	pop	{r7, pc}
1a004f04:	10000000 	.word	0x10000000

1a004f08 <UARTInit>:
 ** Returned value:		true or false, return false only if the
 **						interrupt handler can't be installed to the
 **						VIC table
 **
 *****************************************************************************/
void UARTInit(LPC_USART_T* UARTx, uint32_t baudrate) {
1a004f08:	b580      	push	{r7, lr}
1a004f0a:	b082      	sub	sp, #8
1a004f0c:	af00      	add	r7, sp, #0
1a004f0e:	6078      	str	r0, [r7, #4]
1a004f10:	6039      	str	r1, [r7, #0]
	memset(commandLine, 0, UART_COMMAND_LINE_MAX_LENGTH);
1a004f12:	2280      	movs	r2, #128	; 0x80
1a004f14:	2100      	movs	r1, #0
1a004f16:	4835      	ldr	r0, [pc, #212]	; (1a004fec <UARTInit+0xe4>)
1a004f18:	f00f ff62 	bl	1a014de0 <memset>
	commandLinePointer = 0;
1a004f1c:	4b34      	ldr	r3, [pc, #208]	; (1a004ff0 <UARTInit+0xe8>)
1a004f1e:	2200      	movs	r2, #0
1a004f20:	601a      	str	r2, [r3, #0]
	enableUARTecho = 2;
1a004f22:	4b34      	ldr	r3, [pc, #208]	; (1a004ff4 <UARTInit+0xec>)
1a004f24:	2202      	movs	r2, #2
1a004f26:	601a      	str	r2, [r3, #0]
	memset((void*) &uart, 0, sizeof(struct uart_hal));
1a004f28:	f242 0210 	movw	r2, #8208	; 0x2010
1a004f2c:	2100      	movs	r1, #0
1a004f2e:	4832      	ldr	r0, [pc, #200]	; (1a004ff8 <UARTInit+0xf0>)
1a004f30:	f00f ff56 	bl	1a014de0 <memset>
	xdev_out(UARTWriteChar);
1a004f34:	4b31      	ldr	r3, [pc, #196]	; (1a004ffc <UARTInit+0xf4>)
1a004f36:	4a32      	ldr	r2, [pc, #200]	; (1a005000 <UARTInit+0xf8>)
1a004f38:	601a      	str	r2, [r3, #0]
	if (UARTx == LPC_USART0) {
1a004f3a:	687b      	ldr	r3, [r7, #4]
1a004f3c:	4a31      	ldr	r2, [pc, #196]	; (1a005004 <UARTInit+0xfc>)
1a004f3e:	4293      	cmp	r3, r2
1a004f40:	d126      	bne.n	1a004f90 <UARTInit+0x88>
		NVIC_DisableIRQ(USART0_IRQn);
1a004f42:	2018      	movs	r0, #24
1a004f44:	f7ff fd44 	bl	1a0049d0 <NVIC_DisableIRQ>
		/* RxD0 is P2.1 and TxD0 is P2.0 */
		Chip_SCU_PinMuxSet(2, 0, MD_PLN_FAST | FUNC1);
1a004f48:	22f1      	movs	r2, #241	; 0xf1
1a004f4a:	2100      	movs	r1, #0
1a004f4c:	2002      	movs	r0, #2
1a004f4e:	f7ff fd59 	bl	1a004a04 <Chip_SCU_PinMuxSet>
		Chip_SCU_PinMuxSet(2, 1, MD_PLN_FAST | MD_EZI | FUNC1);
1a004f52:	22f1      	movs	r2, #241	; 0xf1
1a004f54:	2101      	movs	r1, #1
1a004f56:	2002      	movs	r0, #2
1a004f58:	f7ff fd54 	bl	1a004a04 <Chip_SCU_PinMuxSet>
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, RTS0_GPIO_PORT, RTS0_GPIO_PIN); //Signal ready to the DTE
1a004f5c:	220a      	movs	r2, #10
1a004f5e:	2100      	movs	r1, #0
1a004f60:	4829      	ldr	r0, [pc, #164]	; (1a005008 <UARTInit+0x100>)
1a004f62:	f7ff fdc3 	bl	1a004aec <Chip_GPIO_SetPinOutLow>
		Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, RTS0_GPIO_PORT, RTS0_GPIO_PIN);
1a004f66:	220a      	movs	r2, #10
1a004f68:	2100      	movs	r1, #0
1a004f6a:	4827      	ldr	r0, [pc, #156]	; (1a005008 <UARTInit+0x100>)
1a004f6c:	f7ff fd64 	bl	1a004a38 <Chip_GPIO_SetPinDIROutput>
		Chip_SCU_PinMuxSet(RTS0_PORT, RTS0_PIN, MD_PLN_FAST | FUNC0);
1a004f70:	22f0      	movs	r2, #240	; 0xf0
1a004f72:	2103      	movs	r1, #3
1a004f74:	2001      	movs	r0, #1
1a004f76:	f7ff fd45 	bl	1a004a04 <Chip_SCU_PinMuxSet>
		Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, CTS0_GPIO_PORT, CTS0_GPIO_PIN);
1a004f7a:	2208      	movs	r2, #8
1a004f7c:	2101      	movs	r1, #1
1a004f7e:	4822      	ldr	r0, [pc, #136]	; (1a005008 <UARTInit+0x100>)
1a004f80:	f7ff fd7a 	bl	1a004a78 <Chip_GPIO_SetPinDIRInput>
		Chip_SCU_PinMuxSet( CTS0_PORT, CTS0_PIN, MD_BUK | MD_EZI | FUNC0);
1a004f84:	2248      	movs	r2, #72	; 0x48
1a004f86:	2105      	movs	r1, #5
1a004f88:	2001      	movs	r0, #1
1a004f8a:	f7ff fd3b 	bl	1a004a04 <Chip_SCU_PinMuxSet>
1a004f8e:	e01e      	b.n	1a004fce <UARTInit+0xc6>
	} else if (UARTx == LPC_UART1) {
1a004f90:	687b      	ldr	r3, [r7, #4]
1a004f92:	4a1e      	ldr	r2, [pc, #120]	; (1a00500c <UARTInit+0x104>)
1a004f94:	4293      	cmp	r3, r2
1a004f96:	d11a      	bne.n	1a004fce <UARTInit+0xc6>
		NVIC_DisableIRQ(UART1_IRQn);
1a004f98:	2019      	movs	r0, #25
1a004f9a:	f7ff fd19 	bl	1a0049d0 <NVIC_DisableIRQ>
		/* Enable RTS1  P5.2, CTS1 P5.4, RxD1 P1.14, TxD1 P3.4*/
		Chip_SCU_PinMuxSet(3, 4, MD_PLN_FAST | FUNC4);
1a004f9e:	22f4      	movs	r2, #244	; 0xf4
1a004fa0:	2104      	movs	r1, #4
1a004fa2:	2003      	movs	r0, #3
1a004fa4:	f7ff fd2e 	bl	1a004a04 <Chip_SCU_PinMuxSet>
		Chip_SCU_PinMuxSet(1, 14, MD_BUK | MD_EZI | FUNC1);
1a004fa8:	2249      	movs	r2, #73	; 0x49
1a004faa:	210e      	movs	r1, #14
1a004fac:	2001      	movs	r0, #1
1a004fae:	f7ff fd29 	bl	1a004a04 <Chip_SCU_PinMuxSet>
		Chip_SCU_PinMuxSet(5, 2, MD_PLN_FAST | FUNC4);
1a004fb2:	22f4      	movs	r2, #244	; 0xf4
1a004fb4:	2102      	movs	r1, #2
1a004fb6:	2005      	movs	r0, #5
1a004fb8:	f7ff fd24 	bl	1a004a04 <Chip_SCU_PinMuxSet>
		Chip_SCU_PinMuxSet(5, 4, MD_BUK | MD_EZI | FUNC4);
1a004fbc:	224c      	movs	r2, #76	; 0x4c
1a004fbe:	2104      	movs	r1, #4
1a004fc0:	2005      	movs	r0, #5
1a004fc2:	f7ff fd1f 	bl	1a004a04 <Chip_SCU_PinMuxSet>
		Chip_UART_SetModemControl(LPC_UART1,
1a004fc6:	21c0      	movs	r1, #192	; 0xc0
1a004fc8:	4810      	ldr	r0, [pc, #64]	; (1a00500c <UARTInit+0x104>)
1a004fca:	f7ff fec7 	bl	1a004d5c <Chip_UART_SetModemControl>
		UART_MCR_AUTO_RTS_EN | UART_MCR_AUTO_CTS_EN);
	}
	Chip_UART_Init(UARTx);
1a004fce:	6878      	ldr	r0, [r7, #4]
1a004fd0:	f00e fadc 	bl	1a01358c <Chip_UART_Init>
	Chip_UART_SetBaudFDR(UARTx, baudrate);
1a004fd4:	6839      	ldr	r1, [r7, #0]
1a004fd6:	6878      	ldr	r0, [r7, #4]
1a004fd8:	f00e fb28 	bl	1a01362c <Chip_UART_SetBaudFDR>
	Chip_UART_TXEnable(UARTx);
1a004fdc:	6878      	ldr	r0, [r7, #4]
1a004fde:	f7ff feaf 	bl	1a004d40 <Chip_UART_TXEnable>
}
1a004fe2:	bf00      	nop
1a004fe4:	3708      	adds	r7, #8
1a004fe6:	46bd      	mov	sp, r7
1a004fe8:	bd80      	pop	{r7, pc}
1a004fea:	bf00      	nop
1a004fec:	10087874 	.word	0x10087874
1a004ff0:	100878f4 	.word	0x100878f4
1a004ff4:	10087870 	.word	0x10087870
1a004ff8:	10000000 	.word	0x10000000
1a004ffc:	100878f8 	.word	0x100878f8
1a005000:	1a004ed9 	.word	0x1a004ed9
1a005004:	40081000 	.word	0x40081000
1a005008:	400f4000 	.word	0x400f4000
1a00500c:	40082000 	.word	0x40082000

1a005010 <UARTShowVersion>:

// *****************************************************************************

// *****************************************************************************
void UARTShowVersion(void) {
1a005010:	b580      	push	{r7, lr}
1a005012:	af00      	add	r7, sp, #0
	xputs("\nEDVS-4337,");
1a005014:	480e      	ldr	r0, [pc, #56]	; (1a005050 <UARTShowVersion+0x40>)
1a005016:	f001 fca5 	bl	1a006964 <xputs>

#ifdef DEBUG
	xputs(" DEBUG");
1a00501a:	480e      	ldr	r0, [pc, #56]	; (1a005054 <UARTShowVersion+0x44>)
1a00501c:	f001 fca2 	bl	1a006964 <xputs>
#else
	xputs(" RELEASE");
#endif
	xputs(" V"SOFTWARE_VERSION);
1a005020:	480d      	ldr	r0, [pc, #52]	; (1a005058 <UARTShowVersion+0x48>)
1a005022:	f001 fc9f 	bl	1a006964 <xputs>
#if USE_IMU_DATA
	xputs(" IMU");
1a005026:	480d      	ldr	r0, [pc, #52]	; (1a00505c <UARTShowVersion+0x4c>)
1a005028:	f001 fc9c 	bl	1a006964 <xputs>
#endif
#if USE_PUSHBOT
	xputs(" PBOT");
1a00502c:	480c      	ldr	r0, [pc, #48]	; (1a005060 <UARTShowVersion+0x50>)
1a00502e:	f001 fc99 	bl	1a006964 <xputs>
	xputs(" SD");
#endif
#if LOW_POWER_MODE
	xputs(" LP");
#endif
	xputs(" " __DATE__ ", " __TIME__ "\n");
1a005032:	480c      	ldr	r0, [pc, #48]	; (1a005064 <UARTShowVersion+0x54>)
1a005034:	f001 fc96 	bl	1a006964 <xputs>

	xprintf("System Clock: %3dMHz; 1us event time resolution\n", SystemCoreClock / MHZ);
1a005038:	4b0b      	ldr	r3, [pc, #44]	; (1a005068 <UARTShowVersion+0x58>)
1a00503a:	681b      	ldr	r3, [r3, #0]
1a00503c:	4a0b      	ldr	r2, [pc, #44]	; (1a00506c <UARTShowVersion+0x5c>)
1a00503e:	fba2 2303 	umull	r2, r3, r2, r3
1a005042:	0c9b      	lsrs	r3, r3, #18
1a005044:	4619      	mov	r1, r3
1a005046:	480a      	ldr	r0, [pc, #40]	; (1a005070 <UARTShowVersion+0x60>)
1a005048:	f001 fe1c 	bl	1a006c84 <xprintf>
}
1a00504c:	bf00      	nop
1a00504e:	bd80      	pop	{r7, pc}
1a005050:	1a018950 	.word	0x1a018950
1a005054:	1a01895c 	.word	0x1a01895c
1a005058:	1a018964 	.word	0x1a018964
1a00505c:	1a01896c 	.word	0x1a01896c
1a005060:	1a018974 	.word	0x1a018974
1a005064:	1a01897c 	.word	0x1a01897c
1a005068:	100880f8 	.word	0x100880f8
1a00506c:	431bde83 	.word	0x431bde83
1a005070:	1a018994 	.word	0x1a018994

1a005074 <UARTShowUsage>:

// *****************************************************************************
static void UARTShowUsage(void) {
1a005074:	b580      	push	{r7, lr}
1a005076:	af00      	add	r7, sp, #0

	UARTShowVersion();
1a005078:	f7ff ffca 	bl	1a005010 <UARTShowVersion>

	UARTReturn();
1a00507c:	200a      	movs	r0, #10
1a00507e:	f001 fc4f 	bl	1a006920 <xputc>
	xputs("Supported Commands:\n");
1a005082:	4844      	ldr	r0, [pc, #272]	; (1a005194 <UARTShowUsage+0x120>)
1a005084:	f001 fc6e 	bl	1a006964 <xputs>
	UARTReturn();
1a005088:	200a      	movs	r0, #10
1a00508a:	f001 fc49 	bl	1a006920 <xputc>

	xputs(" E+/-                  - enable/disable event sending\n");
1a00508e:	4842      	ldr	r0, [pc, #264]	; (1a005198 <UARTShowUsage+0x124>)
1a005090:	f001 fc68 	bl	1a006964 <xputs>
#if USE_SDCARD
	xputs(" !ER+/-                - enable/disable event recording (SD card)\n");
#endif
	xputs(" !Ex                   - specify event data format, ??E to show options\n");
1a005094:	4841      	ldr	r0, [pc, #260]	; (1a00519c <UARTShowUsage+0x128>)
1a005096:	f001 fc65 	bl	1a006964 <xputs>
	xputs(" !ETx                  - set current timestamp to x (default: 0)\n");
1a00509a:	4841      	ldr	r0, [pc, #260]	; (1a0051a0 <UARTShowUsage+0x12c>)
1a00509c:	f001 fc62 	bl	1a006964 <xputs>
	xputs(" !ETM+                 - synch timestamp, master mode, output active\n");
1a0050a0:	4840      	ldr	r0, [pc, #256]	; (1a0051a4 <UARTShowUsage+0x130>)
1a0050a2:	f001 fc5f 	bl	1a006964 <xputs>
	xputs(" !ETM0                 - synch timestamp, master mode, output stopped\n");
1a0050a6:	4840      	ldr	r0, [pc, #256]	; (1a0051a8 <UARTShowUsage+0x134>)
1a0050a8:	f001 fc5c 	bl	1a006964 <xputs>
	xputs(" !ETS                  - synch timestamp, slave mode\n");
1a0050ac:	483f      	ldr	r0, [pc, #252]	; (1a0051ac <UARTShowUsage+0x138>)
1a0050ae:	f001 fc59 	bl	1a006964 <xputs>
	xputs(" !ETI                  - single retina, no external synch mode\n");
1a0050b2:	483f      	ldr	r0, [pc, #252]	; (1a0051b0 <UARTShowUsage+0x13c>)
1a0050b4:	f001 fc56 	bl	1a006964 <xputs>
	UARTReturn();
1a0050b8:	200a      	movs	r0, #10
1a0050ba:	f001 fc31 	bl	1a006920 <xputc>

	xputs(" !B[0-11]=x            - set bias register to value\n"); // please check, I have removed leading "0x" --- can we change this to decimal reception?
1a0050be:	483d      	ldr	r0, [pc, #244]	; (1a0051b4 <UARTShowUsage+0x140>)
1a0050c0:	f001 fc50 	bl	1a006964 <xputs>
	xputs(" !BF                   - send bias settings to DVS (flush)\n");
1a0050c4:	483c      	ldr	r0, [pc, #240]	; (1a0051b8 <UARTShowUsage+0x144>)
1a0050c6:	f001 fc4d 	bl	1a006964 <xputs>
	xputs(" !BDx                  - select and flush predefined bias set x\n");
1a0050ca:	483c      	ldr	r0, [pc, #240]	; (1a0051bc <UARTShowUsage+0x148>)
1a0050cc:	f001 fc4a 	bl	1a006964 <xputs>
	xputs(" ?Bx                   - get bias register x current value\n");
1a0050d0:	483b      	ldr	r0, [pc, #236]	; (1a0051c0 <UARTShowUsage+0x14c>)
1a0050d2:	f001 fc47 	bl	1a006964 <xputs>
	UARTReturn();
1a0050d6:	200a      	movs	r0, #10
1a0050d8:	f001 fc22 	bl	1a006920 <xputc>
//     xputs(" ?Ax                   - get analog input");   // TODO
//     xputs(" !D=x                  - set digital output");  // TODO
//     xputs(" ?Dx                   - get digital input");// TODO
//     UARTReturn();

	xputs(" !L[0,1,2]             - LED off/on/blinking\n");
1a0050dc:	4839      	ldr	r0, [pc, #228]	; (1a0051c4 <UARTShowUsage+0x150>)
1a0050de:	f001 fc41 	bl	1a006964 <xputs>
	xputs(" !U=x                  - set baud rate to x\n");
1a0050e2:	4839      	ldr	r0, [pc, #228]	; (1a0051c8 <UARTShowUsage+0x154>)
1a0050e4:	f001 fc3e 	bl	1a006964 <xputs>
	xputs(" !U[0,1,2]             - UART echo mode (none, cmd-reply, all)\n");
1a0050e8:	4838      	ldr	r0, [pc, #224]	; (1a0051cc <UARTShowUsage+0x158>)
1a0050ea:	f001 fc3b 	bl	1a006964 <xputs>
	UARTReturn();
1a0050ee:	200a      	movs	r0, #10
1a0050f0:	f001 fc16 	bl	1a006920 <xputc>

	xputs(" !S+b,p                - enable sensors streaming, ??S to show options\n");
1a0050f4:	4836      	ldr	r0, [pc, #216]	; (1a0051d0 <UARTShowUsage+0x15c>)
1a0050f6:	f001 fc35 	bl	1a006964 <xputs>
	xputs(" !S-[b]                - disable sensors streaming, ??S to show options\n");
1a0050fa:	4836      	ldr	r0, [pc, #216]	; (1a0051d4 <UARTShowUsage+0x160>)
1a0050fc:	f001 fc32 	bl	1a006964 <xputs>
	xputs(" ?Sb                   - get sensor readouts according to bitmap b\n");
1a005100:	4835      	ldr	r0, [pc, #212]	; (1a0051d8 <UARTShowUsage+0x164>)
1a005102:	f001 fc2f 	bl	1a006964 <xputs>
	xputs(" ??S                   - bitmap b options\n");
1a005106:	4835      	ldr	r0, [pc, #212]	; (1a0051dc <UARTShowUsage+0x168>)
1a005108:	f001 fc2c 	bl	1a006964 <xputs>
	UARTReturn();
1a00510c:	200a      	movs	r0, #10
1a00510e:	f001 fc07 	bl	1a006920 <xputc>

//     xputs(" !A=[0-1023]           - set (internal) analog output");  // TODO (only useful with sleep mode) --- in fact not useful, please remove
//     xputs(" S[=x]                 - enter sleep mode (with wake-up threshold specified by x [0-1023]\n");    // TODO
	xputs(" R                     - reset board\n");
1a005112:	4833      	ldr	r0, [pc, #204]	; (1a0051e0 <UARTShowUsage+0x16c>)
1a005114:	f001 fc26 	bl	1a006964 <xputs>
	xputs(" P                     - enter reprogramming mode\n");
1a005118:	4832      	ldr	r0, [pc, #200]	; (1a0051e4 <UARTShowUsage+0x170>)
1a00511a:	f001 fc23 	bl	1a006964 <xputs>
	UARTReturn();
1a00511e:	200a      	movs	r0, #10
1a005120:	f001 fbfe 	bl	1a006920 <xputc>

	xputs(" !M+/-                 - enable/disable motor driver\n");
1a005124:	4830      	ldr	r0, [pc, #192]	; (1a0051e8 <UARTShowUsage+0x174>)
1a005126:	f001 fc1d 	bl	1a006964 <xputs>
#if USE_PUSHBOT
	xputs(" ?MC[0,1]              - get motor PID controller gains\n");
1a00512a:	4830      	ldr	r0, [pc, #192]	; (1a0051ec <UARTShowUsage+0x178>)
1a00512c:	f001 fc1a 	bl	1a006964 <xputs>
	xputs(" !MC[0,1]=p,i,d        - set motor PID controller gains\n");
1a005130:	482f      	ldr	r0, [pc, #188]	; (1a0051f0 <UARTShowUsage+0x17c>)
1a005132:	f001 fc17 	bl	1a006964 <xputs>
#endif
	xputs(" !MP[0,1]=x            - set motor PWM period in microseconds\n");
1a005136:	482f      	ldr	r0, [pc, #188]	; (1a0051f4 <UARTShowUsage+0x180>)
1a005138:	f001 fc14 	bl	1a006964 <xputs>
	xputs(" !M[0,1]=[%]x          - set motor duty width in microseconds [% 0..100]\n");
1a00513c:	482e      	ldr	r0, [pc, #184]	; (1a0051f8 <UARTShowUsage+0x184>)
1a00513e:	f001 fc11 	bl	1a006964 <xputs>
#if USE_PUSHBOT
	xputs(" !MV[0,1]=[0-100]      - set motor velocity (internal P-controller for PushBot)\n");
1a005142:	482e      	ldr	r0, [pc, #184]	; (1a0051fc <UARTShowUsage+0x188>)
1a005144:	f001 fc0e 	bl	1a006964 <xputs>
#endif
	xputs(" !MD[0,1]=[%]          - set motor duty width, slow decay [% 0..100]\n");
1a005148:	482d      	ldr	r0, [pc, #180]	; (1a005200 <UARTShowUsage+0x18c>)
1a00514a:	f001 fc0b 	bl	1a006964 <xputs>
#if USE_PUSHBOT
	xputs(" !MVD[0,1]=x           - set motor duty velocity, slow decay\n");
1a00514e:	482d      	ldr	r0, [pc, #180]	; (1a005204 <UARTShowUsage+0x190>)
1a005150:	f001 fc08 	bl	1a006964 <xputs>
#endif
	UARTReturn();
1a005154:	200a      	movs	r0, #10
1a005156:	f001 fbe3 	bl	1a006920 <xputc>

	xputs(" !P[A,B,C]=x           - set timer base period in microseconds\n");
1a00515a:	482b      	ldr	r0, [pc, #172]	; (1a005208 <UARTShowUsage+0x194>)
1a00515c:	f001 fc02 	bl	1a006964 <xputs>
	xputs(" !P[A,B,C][0,1]=[%]x   - set timer channel width in microseconds [% 0..100]\n");
1a005160:	482a      	ldr	r0, [pc, #168]	; (1a00520c <UARTShowUsage+0x198>)
1a005162:	f001 fbff 	bl	1a006964 <xputs>
	UARTReturn();
1a005166:	200a      	movs	r0, #10
1a005168:	f001 fbda 	bl	1a006920 <xputc>

	xputs(" !T+/-                 - enable/disable Real Time Clock (RTC)\n");
1a00516c:	4828      	ldr	r0, [pc, #160]	; (1a005210 <UARTShowUsage+0x19c>)
1a00516e:	f001 fbf9 	bl	1a006964 <xputs>
	xputs(" !Tyyyy-mm-dd hh:mm:ss - set RTC time\n");
1a005172:	4828      	ldr	r0, [pc, #160]	; (1a005214 <UARTShowUsage+0x1a0>)
1a005174:	f001 fbf6 	bl	1a006964 <xputs>
	xputs(" ?T                    - get RTC time\n");
1a005178:	4827      	ldr	r0, [pc, #156]	; (1a005218 <UARTShowUsage+0x1a4>)
1a00517a:	f001 fbf3 	bl	1a006964 <xputs>
	UARTReturn();
1a00517e:	200a      	movs	r0, #10
1a005180:	f001 fbce 	bl	1a006920 <xputc>

	xputs(" ??                    - display (this) help menu\n");
1a005184:	4825      	ldr	r0, [pc, #148]	; (1a00521c <UARTShowUsage+0x1a8>)
1a005186:	f001 fbed 	bl	1a006964 <xputs>
	UARTReturn();
1a00518a:	200a      	movs	r0, #10
1a00518c:	f001 fbc8 	bl	1a006920 <xputc>
}
1a005190:	bf00      	nop
1a005192:	bd80      	pop	{r7, pc}
1a005194:	1a0189c8 	.word	0x1a0189c8
1a005198:	1a0189e0 	.word	0x1a0189e0
1a00519c:	1a018a18 	.word	0x1a018a18
1a0051a0:	1a018a64 	.word	0x1a018a64
1a0051a4:	1a018aa8 	.word	0x1a018aa8
1a0051a8:	1a018af0 	.word	0x1a018af0
1a0051ac:	1a018b38 	.word	0x1a018b38
1a0051b0:	1a018b70 	.word	0x1a018b70
1a0051b4:	1a018bb0 	.word	0x1a018bb0
1a0051b8:	1a018be8 	.word	0x1a018be8
1a0051bc:	1a018c24 	.word	0x1a018c24
1a0051c0:	1a018c68 	.word	0x1a018c68
1a0051c4:	1a018ca4 	.word	0x1a018ca4
1a0051c8:	1a018cd4 	.word	0x1a018cd4
1a0051cc:	1a018d04 	.word	0x1a018d04
1a0051d0:	1a018d44 	.word	0x1a018d44
1a0051d4:	1a018d8c 	.word	0x1a018d8c
1a0051d8:	1a018dd8 	.word	0x1a018dd8
1a0051dc:	1a018e1c 	.word	0x1a018e1c
1a0051e0:	1a018e48 	.word	0x1a018e48
1a0051e4:	1a018e70 	.word	0x1a018e70
1a0051e8:	1a018ea4 	.word	0x1a018ea4
1a0051ec:	1a018edc 	.word	0x1a018edc
1a0051f0:	1a018f18 	.word	0x1a018f18
1a0051f4:	1a018f54 	.word	0x1a018f54
1a0051f8:	1a018f94 	.word	0x1a018f94
1a0051fc:	1a018fe0 	.word	0x1a018fe0
1a005200:	1a019034 	.word	0x1a019034
1a005204:	1a01907c 	.word	0x1a01907c
1a005208:	1a0190bc 	.word	0x1a0190bc
1a00520c:	1a0190fc 	.word	0x1a0190fc
1a005210:	1a01914c 	.word	0x1a01914c
1a005214:	1a01918c 	.word	0x1a01918c
1a005218:	1a0191b4 	.word	0x1a0191b4
1a00521c:	1a0191dc 	.word	0x1a0191dc

1a005220 <UARTShowEventDataOptions>:

static inline void UARTShowEventDataOptions(void) {
1a005220:	b580      	push	{r7, lr}
1a005222:	af00      	add	r7, sp, #0
	xputs("List of available event data formats:\n");
1a005224:	480e      	ldr	r0, [pc, #56]	; (1a005260 <UARTShowEventDataOptions+0x40>)
1a005226:	f001 fb9d 	bl	1a006964 <xputs>
	xputs(" !E0   - 2 bytes per event, binary: 1yyyyyyy.pxxxxxxx (default)\n");
1a00522a:	480e      	ldr	r0, [pc, #56]	; (1a005264 <UARTShowEventDataOptions+0x44>)
1a00522c:	f001 fb9a 	bl	1a006964 <xputs>
	xputs(" !E1   - 3..6 bytes per event, 1..4 bytes delta-timestamp (7bits each)\n");
1a005230:	480d      	ldr	r0, [pc, #52]	; (1a005268 <UARTShowEventDataOptions+0x48>)
1a005232:	f001 fb97 	bl	1a006964 <xputs>
	xputs(" !E2   - 4 bytes per event (as !E0 followed by 16bit timestamp)\n");
1a005236:	480d      	ldr	r0, [pc, #52]	; (1a00526c <UARTShowEventDataOptions+0x4c>)
1a005238:	f001 fb94 	bl	1a006964 <xputs>
	xputs(" !E3   - 5 bytes per event (as !E0 followed by 24bit timestamp)\n");
1a00523c:	480c      	ldr	r0, [pc, #48]	; (1a005270 <UARTShowEventDataOptions+0x50>)
1a00523e:	f001 fb91 	bl	1a006964 <xputs>
	xputs(" !E4   - 6 bytes per event (as !E0 followed by 32bit timestamp)\n");
1a005242:	480c      	ldr	r0, [pc, #48]	; (1a005274 <UARTShowEventDataOptions+0x54>)
1a005244:	f001 fb8e 	bl	1a006964 <xputs>
	UARTReturn();
1a005248:	200a      	movs	r0, #10
1a00524a:	f001 fb69 	bl	1a006920 <xputc>
	xputs(" Every timestamp has 1us resolution\n");
1a00524e:	480a      	ldr	r0, [pc, #40]	; (1a005278 <UARTShowEventDataOptions+0x58>)
1a005250:	f001 fb88 	bl	1a006964 <xputs>
	UARTReturn();
1a005254:	200a      	movs	r0, #10
1a005256:	f001 fb63 	bl	1a006920 <xputc>
}
1a00525a:	bf00      	nop
1a00525c:	bd80      	pop	{r7, pc}
1a00525e:	bf00      	nop
1a005260:	1a019210 	.word	0x1a019210
1a005264:	1a019238 	.word	0x1a019238
1a005268:	1a01927c 	.word	0x1a01927c
1a00526c:	1a0192c4 	.word	0x1a0192c4
1a005270:	1a019308 	.word	0x1a019308
1a005274:	1a01934c 	.word	0x1a01934c
1a005278:	1a019390 	.word	0x1a019390

1a00527c <UARTShowSensorOptions>:

static inline void UARTShowSensorOptions(void) {
1a00527c:	b580      	push	{r7, lr}
1a00527e:	af00      	add	r7, sp, #0
	xputs("Bitlist for available sensors:\n");
1a005280:	4827      	ldr	r0, [pc, #156]	; (1a005320 <UARTShowSensorOptions+0xa4>)
1a005282:	f001 fb6f 	bl	1a006964 <xputs>
	xputs(" Bit Dec-Value Name     # Values  Description\n");
1a005286:	4827      	ldr	r0, [pc, #156]	; (1a005324 <UARTShowSensorOptions+0xa8>)
1a005288:	f001 fb6c 	bl	1a006964 <xputs>
	xputs(" 0   1         BATTERY         1  raw battery voltage level (0..9999)\n");
1a00528c:	4826      	ldr	r0, [pc, #152]	; (1a005328 <UARTShowSensorOptions+0xac>)
1a00528e:	f001 fb69 	bl	1a006964 <xputs>
	xputs(" 1   2         ADC CHANNEL0    1  raw ADC reading from pin 2 (0..1023)\n");
1a005292:	4826      	ldr	r0, [pc, #152]	; (1a00532c <UARTShowSensorOptions+0xb0>)
1a005294:	f001 fb66 	bl	1a006964 <xputs>
	xputs(" 2   4         ADC CHANNEL1    1  raw ADC reading from pin 3 (0..1023)\n");
1a005298:	4825      	ldr	r0, [pc, #148]	; (1a005330 <UARTShowSensorOptions+0xb4>)
1a00529a:	f001 fb63 	bl	1a006964 <xputs>
	xputs(" 3   8         ADC CHANNEL2    1  raw ADC reading from pin 4 (0..1023)\n");
1a00529e:	4825      	ldr	r0, [pc, #148]	; (1a005334 <UARTShowSensorOptions+0xb8>)
1a0052a0:	f001 fb60 	bl	1a006964 <xputs>
	xputs(" 4   16        ADC CHANNEL3    1  raw ADC reading from pin 5 (0..1023)\n");
1a0052a4:	4824      	ldr	r0, [pc, #144]	; (1a005338 <UARTShowSensorOptions+0xbc>)
1a0052a6:	f001 fb5d 	bl	1a006964 <xputs>
	xputs(" 5   32        ADC CHANNEL4    1  raw ADC reading from pin 6 (0..1023)\n");
1a0052aa:	4824      	ldr	r0, [pc, #144]	; (1a00533c <UARTShowSensorOptions+0xc0>)
1a0052ac:	f001 fb5a 	bl	1a006964 <xputs>
	xputs(" 6   64        ADC CHANNEL5    1  raw ADC reading from pin 7 (0..1023)\n");
1a0052b0:	4823      	ldr	r0, [pc, #140]	; (1a005340 <UARTShowSensorOptions+0xc4>)
1a0052b2:	f001 fb57 	bl	1a006964 <xputs>
#if USE_IMU_DATA
	xputs(" 7   128       RAW GYRO        3  raw gyroscope data for 3 axis (+/-32768)\n");
1a0052b6:	4823      	ldr	r0, [pc, #140]	; (1a005344 <UARTShowSensorOptions+0xc8>)
1a0052b8:	f001 fb54 	bl	1a006964 <xputs>
	xputs(" 8   256       RAW ACCEL       3  raw accelerometer data for 3 axis (+/-32768)\n");
1a0052bc:	4822      	ldr	r0, [pc, #136]	; (1a005348 <UARTShowSensorOptions+0xcc>)
1a0052be:	f001 fb51 	bl	1a006964 <xputs>
	xputs(" 9   512       RAW COMPASS     3  raw magnetic values for 3 axis (+/-4096)\n");
1a0052c2:	4822      	ldr	r0, [pc, #136]	; (1a00534c <UARTShowSensorOptions+0xd0>)
1a0052c4:	f001 fb4e 	bl	1a006964 <xputs>
	xputs(" 10  1024      CAL GYRO        3  gyroscope data in dps Q16 in HEX\n");
1a0052c8:	4821      	ldr	r0, [pc, #132]	; (1a005350 <UARTShowSensorOptions+0xd4>)
1a0052ca:	f001 fb4b 	bl	1a006964 <xputs>
	xputs(" 11  2048      CAL ACCEL       3  accelerometer data in g's Q16 in HEX\n");
1a0052ce:	4821      	ldr	r0, [pc, #132]	; (1a005354 <UARTShowSensorOptions+0xd8>)
1a0052d0:	f001 fb48 	bl	1a006964 <xputs>
	xputs(" 12  4096      CAL COMPASS     3  magnetic values in microteslas Q16 in HEX\n");
1a0052d4:	4820      	ldr	r0, [pc, #128]	; (1a005358 <UARTShowSensorOptions+0xdc>)
1a0052d6:	f001 fb45 	bl	1a006964 <xputs>
	xputs(" 13  8192      QUARTERNION     4  9 axis quarternion Q30 in HEX\n");
1a0052da:	4820      	ldr	r0, [pc, #128]	; (1a00535c <UARTShowSensorOptions+0xe0>)
1a0052dc:	f001 fb42 	bl	1a006964 <xputs>
	xputs(" 14  16384     EULER ANGLES    4  euler angles in degrees Q30 in HEX\n");
1a0052e0:	481f      	ldr	r0, [pc, #124]	; (1a005360 <UARTShowSensorOptions+0xe4>)
1a0052e2:	f001 fb3f 	bl	1a006964 <xputs>
	xputs(" 15  32768     ROTATION MATRIX 9  rotation matrix Q30 in HEX\n");
1a0052e6:	481f      	ldr	r0, [pc, #124]	; (1a005364 <UARTShowSensorOptions+0xe8>)
1a0052e8:	f001 fb3c 	bl	1a006964 <xputs>
	xputs(" 16  65536     HEADING         1  heading in degrees Q16 in HEX\n");
1a0052ec:	481e      	ldr	r0, [pc, #120]	; (1a005368 <UARTShowSensorOptions+0xec>)
1a0052ee:	f001 fb39 	bl	1a006964 <xputs>
	xputs(" 17  131072    LINEAR ACCEL    3  linear accel in m/s^2 Float in HEX\n");
1a0052f2:	481e      	ldr	r0, [pc, #120]	; (1a00536c <UARTShowSensorOptions+0xf0>)
1a0052f4:	f001 fb36 	bl	1a006964 <xputs>
	xputs(" 18  262144    IMU STATUS      2  IMU status (temperature and timestamp)\n");
1a0052f8:	481d      	ldr	r0, [pc, #116]	; (1a005370 <UARTShowSensorOptions+0xf4>)
1a0052fa:	f001 fb33 	bl	1a006964 <xputs>
#endif
	xputs(" 19  524288    PWM SIGNALS     4  currently set PWM duty cycle for all 2 motors\n");
1a0052fe:	481d      	ldr	r0, [pc, #116]	; (1a005374 <UARTShowSensorOptions+0xf8>)
1a005300:	f001 fb30 	bl	1a006964 <xputs>
	xputs(" 20  1048576   MOTOR CURRENTS  2  motor currents from the motor driver\n");
1a005304:	481c      	ldr	r0, [pc, #112]	; (1a005378 <UARTShowSensorOptions+0xfc>)
1a005306:	f001 fb2d 	bl	1a006964 <xputs>
#if USE_SDCARD
	xputs(" 21  2097152   EVENTS RATE     3  Event rate per second (0..1000000)\n");
#else
	xputs(" 21  2097152   EVENTS RATE     1  Event rate per second (0..1000000)\n");
1a00530a:	481c      	ldr	r0, [pc, #112]	; (1a00537c <UARTShowSensorOptions+0x100>)
1a00530c:	f001 fb2a 	bl	1a006964 <xputs>
#endif
#if USE_PUSHBOT
	xputs(" 28  268435456 MOTOR SENSORS   2  wheel tick counter\n");
1a005310:	481b      	ldr	r0, [pc, #108]	; (1a005380 <UARTShowSensorOptions+0x104>)
1a005312:	f001 fb27 	bl	1a006964 <xputs>
#endif
	UARTReturn();
1a005316:	200a      	movs	r0, #10
1a005318:	f001 fb02 	bl	1a006920 <xputc>
}
1a00531c:	bf00      	nop
1a00531e:	bd80      	pop	{r7, pc}
1a005320:	1a0193b8 	.word	0x1a0193b8
1a005324:	1a0193d8 	.word	0x1a0193d8
1a005328:	1a019408 	.word	0x1a019408
1a00532c:	1a019450 	.word	0x1a019450
1a005330:	1a019498 	.word	0x1a019498
1a005334:	1a0194e0 	.word	0x1a0194e0
1a005338:	1a019528 	.word	0x1a019528
1a00533c:	1a019570 	.word	0x1a019570
1a005340:	1a0195b8 	.word	0x1a0195b8
1a005344:	1a019600 	.word	0x1a019600
1a005348:	1a01964c 	.word	0x1a01964c
1a00534c:	1a01969c 	.word	0x1a01969c
1a005350:	1a0196e8 	.word	0x1a0196e8
1a005354:	1a01972c 	.word	0x1a01972c
1a005358:	1a019774 	.word	0x1a019774
1a00535c:	1a0197c4 	.word	0x1a0197c4
1a005360:	1a019808 	.word	0x1a019808
1a005364:	1a019850 	.word	0x1a019850
1a005368:	1a019890 	.word	0x1a019890
1a00536c:	1a0198d4 	.word	0x1a0198d4
1a005370:	1a01991c 	.word	0x1a01991c
1a005374:	1a019968 	.word	0x1a019968
1a005378:	1a0199bc 	.word	0x1a0199bc
1a00537c:	1a019a04 	.word	0x1a019a04
1a005380:	1a019a4c 	.word	0x1a019a4c

1a005384 <parseUInt32>:
// *****************************************************************************
static uint32_t parseUInt32(unsigned char **c) {
1a005384:	b480      	push	{r7}
1a005386:	b085      	sub	sp, #20
1a005388:	af00      	add	r7, sp, #0
1a00538a:	6078      	str	r0, [r7, #4]
	uint32_t ul = 0;
1a00538c:	2300      	movs	r3, #0
1a00538e:	60fb      	str	r3, [r7, #12]
	while (((**c) >= '0') && ((**c) <= '9')) {
1a005390:	e012      	b.n	1a0053b8 <parseUInt32+0x34>
		ul = 10 * ul;
1a005392:	68fa      	ldr	r2, [r7, #12]
1a005394:	4613      	mov	r3, r2
1a005396:	009b      	lsls	r3, r3, #2
1a005398:	4413      	add	r3, r2
1a00539a:	005b      	lsls	r3, r3, #1
1a00539c:	60fb      	str	r3, [r7, #12]
		ul += ((**c) - '0');
1a00539e:	687b      	ldr	r3, [r7, #4]
1a0053a0:	681b      	ldr	r3, [r3, #0]
1a0053a2:	781b      	ldrb	r3, [r3, #0]
1a0053a4:	461a      	mov	r2, r3
1a0053a6:	68fb      	ldr	r3, [r7, #12]
1a0053a8:	4413      	add	r3, r2
1a0053aa:	3b30      	subs	r3, #48	; 0x30
1a0053ac:	60fb      	str	r3, [r7, #12]
		(*(c))++;
1a0053ae:	687b      	ldr	r3, [r7, #4]
1a0053b0:	681b      	ldr	r3, [r3, #0]
1a0053b2:	1c5a      	adds	r2, r3, #1
1a0053b4:	687b      	ldr	r3, [r7, #4]
1a0053b6:	601a      	str	r2, [r3, #0]
	UARTReturn();
}
// *****************************************************************************
static uint32_t parseUInt32(unsigned char **c) {
	uint32_t ul = 0;
	while (((**c) >= '0') && ((**c) <= '9')) {
1a0053b8:	687b      	ldr	r3, [r7, #4]
1a0053ba:	681b      	ldr	r3, [r3, #0]
1a0053bc:	781b      	ldrb	r3, [r3, #0]
1a0053be:	2b2f      	cmp	r3, #47	; 0x2f
1a0053c0:	d904      	bls.n	1a0053cc <parseUInt32+0x48>
1a0053c2:	687b      	ldr	r3, [r7, #4]
1a0053c4:	681b      	ldr	r3, [r3, #0]
1a0053c6:	781b      	ldrb	r3, [r3, #0]
1a0053c8:	2b39      	cmp	r3, #57	; 0x39
1a0053ca:	d9e2      	bls.n	1a005392 <parseUInt32+0xe>
		ul = 10 * ul;
		ul += ((**c) - '0');
		(*(c))++;
	}
	return (ul);
1a0053cc:	68fb      	ldr	r3, [r7, #12]
}
1a0053ce:	4618      	mov	r0, r3
1a0053d0:	3714      	adds	r7, #20
1a0053d2:	46bd      	mov	sp, r7
1a0053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0053d8:	4770      	bx	lr
1a0053da:	bf00      	nop

1a0053dc <parseInt32>:

static int32_t parseInt32(unsigned char **c) {
1a0053dc:	b580      	push	{r7, lr}
1a0053de:	b082      	sub	sp, #8
1a0053e0:	af00      	add	r7, sp, #0
1a0053e2:	6078      	str	r0, [r7, #4]
	if ((**c) == '-') {
1a0053e4:	687b      	ldr	r3, [r7, #4]
1a0053e6:	681b      	ldr	r3, [r3, #0]
1a0053e8:	781b      	ldrb	r3, [r3, #0]
1a0053ea:	2b2d      	cmp	r3, #45	; 0x2d
1a0053ec:	d10a      	bne.n	1a005404 <parseInt32+0x28>
		(*(c))++;
1a0053ee:	687b      	ldr	r3, [r7, #4]
1a0053f0:	681b      	ldr	r3, [r3, #0]
1a0053f2:	1c5a      	adds	r2, r3, #1
1a0053f4:	687b      	ldr	r3, [r7, #4]
1a0053f6:	601a      	str	r2, [r3, #0]
		return (-1 * ((int32_t) parseUInt32(c)));
1a0053f8:	6878      	ldr	r0, [r7, #4]
1a0053fa:	f7ff ffc3 	bl	1a005384 <parseUInt32>
1a0053fe:	4603      	mov	r3, r0
1a005400:	425b      	negs	r3, r3
1a005402:	e00d      	b.n	1a005420 <parseInt32+0x44>
	}
	if ((**c) == '+') {
1a005404:	687b      	ldr	r3, [r7, #4]
1a005406:	681b      	ldr	r3, [r3, #0]
1a005408:	781b      	ldrb	r3, [r3, #0]
1a00540a:	2b2b      	cmp	r3, #43	; 0x2b
1a00540c:	d104      	bne.n	1a005418 <parseInt32+0x3c>
		(*(c))++;
1a00540e:	687b      	ldr	r3, [r7, #4]
1a005410:	681b      	ldr	r3, [r3, #0]
1a005412:	1c5a      	adds	r2, r3, #1
1a005414:	687b      	ldr	r3, [r7, #4]
1a005416:	601a      	str	r2, [r3, #0]
	}
	return ((int32_t) parseUInt32(c));
1a005418:	6878      	ldr	r0, [r7, #4]
1a00541a:	f7ff ffb3 	bl	1a005384 <parseUInt32>
1a00541e:	4603      	mov	r3, r0
}
1a005420:	4618      	mov	r0, r3
1a005422:	3708      	adds	r7, #8
1a005424:	46bd      	mov	sp, r7
1a005426:	bd80      	pop	{r7, pc}

1a005428 <UARTParseGetCommand>:

// *****************************************************************************
// * ** parseGetCommand ** */
// *****************************************************************************
static void UARTParseGetCommand(void) {
1a005428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00542c:	b08b      	sub	sp, #44	; 0x2c
1a00542e:	af04      	add	r7, sp, #16

	switch (commandLine[1]) {
1a005430:	4b9b      	ldr	r3, [pc, #620]	; (1a0056a0 <UARTParseGetCommand+0x278>)
1a005432:	785b      	ldrb	r3, [r3, #1]
1a005434:	3b3f      	subs	r3, #63	; 0x3f
1a005436:	2b35      	cmp	r3, #53	; 0x35
1a005438:	f200 8129 	bhi.w	1a00568e <UARTParseGetCommand+0x266>
1a00543c:	a201      	add	r2, pc, #4	; (adr r2, 1a005444 <UARTParseGetCommand+0x1c>)
1a00543e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a005442:	bf00      	nop
1a005444:	1a00565d 	.word	0x1a00565d
1a005448:	1a00568f 	.word	0x1a00568f
1a00544c:	1a00568f 	.word	0x1a00568f
1a005450:	1a00551d 	.word	0x1a00551d
1a005454:	1a00568f 	.word	0x1a00568f
1a005458:	1a00568f 	.word	0x1a00568f
1a00545c:	1a00557f 	.word	0x1a00557f
1a005460:	1a00568f 	.word	0x1a00568f
1a005464:	1a00568f 	.word	0x1a00568f
1a005468:	1a00568f 	.word	0x1a00568f
1a00546c:	1a00568f 	.word	0x1a00568f
1a005470:	1a00568f 	.word	0x1a00568f
1a005474:	1a00568f 	.word	0x1a00568f
1a005478:	1a00568f 	.word	0x1a00568f
1a00547c:	1a00558d 	.word	0x1a00558d
1a005480:	1a00568f 	.word	0x1a00568f
1a005484:	1a00568f 	.word	0x1a00568f
1a005488:	1a00568f 	.word	0x1a00568f
1a00548c:	1a00568f 	.word	0x1a00568f
1a005490:	1a00568f 	.word	0x1a00568f
1a005494:	1a0055f5 	.word	0x1a0055f5
1a005498:	1a00560d 	.word	0x1a00560d
1a00549c:	1a00568f 	.word	0x1a00568f
1a0054a0:	1a00568f 	.word	0x1a00568f
1a0054a4:	1a00568f 	.word	0x1a00568f
1a0054a8:	1a00568f 	.word	0x1a00568f
1a0054ac:	1a00568f 	.word	0x1a00568f
1a0054b0:	1a00568f 	.word	0x1a00568f
1a0054b4:	1a00568f 	.word	0x1a00568f
1a0054b8:	1a00568f 	.word	0x1a00568f
1a0054bc:	1a00568f 	.word	0x1a00568f
1a0054c0:	1a00568f 	.word	0x1a00568f
1a0054c4:	1a00568f 	.word	0x1a00568f
1a0054c8:	1a00568f 	.word	0x1a00568f
1a0054cc:	1a00568f 	.word	0x1a00568f
1a0054d0:	1a00551d 	.word	0x1a00551d
1a0054d4:	1a00568f 	.word	0x1a00568f
1a0054d8:	1a00568f 	.word	0x1a00568f
1a0054dc:	1a00557f 	.word	0x1a00557f
1a0054e0:	1a00568f 	.word	0x1a00568f
1a0054e4:	1a00568f 	.word	0x1a00568f
1a0054e8:	1a00568f 	.word	0x1a00568f
1a0054ec:	1a00568f 	.word	0x1a00568f
1a0054f0:	1a00568f 	.word	0x1a00568f
1a0054f4:	1a00568f 	.word	0x1a00568f
1a0054f8:	1a00568f 	.word	0x1a00568f
1a0054fc:	1a00558d 	.word	0x1a00558d
1a005500:	1a00568f 	.word	0x1a00568f
1a005504:	1a00568f 	.word	0x1a00568f
1a005508:	1a00568f 	.word	0x1a00568f
1a00550c:	1a00568f 	.word	0x1a00568f
1a005510:	1a00568f 	.word	0x1a00568f
1a005514:	1a0055f5 	.word	0x1a0055f5
1a005518:	1a00560d 	.word	0x1a00560d
	case 'B':
	case 'b': {	   									// request bias value
		unsigned char *c;
		int32_t biasID;

		c = commandLine + 2;				// send bias value as decimal value
1a00551c:	4b61      	ldr	r3, [pc, #388]	; (1a0056a4 <UARTParseGetCommand+0x27c>)
1a00551e:	60fb      	str	r3, [r7, #12]
		if ((*c == 'A') || (*c == 'a')) {
1a005520:	68fb      	ldr	r3, [r7, #12]
1a005522:	781b      	ldrb	r3, [r3, #0]
1a005524:	2b41      	cmp	r3, #65	; 0x41
1a005526:	d003      	beq.n	1a005530 <UARTParseGetCommand+0x108>
1a005528:	68fb      	ldr	r3, [r7, #12]
1a00552a:	781b      	ldrb	r3, [r3, #0]
1a00552c:	2b61      	cmp	r3, #97	; 0x61
1a00552e:	d113      	bne.n	1a005558 <UARTParseGetCommand+0x130>
			for (biasID = 0; biasID < 12; biasID++) {
1a005530:	2300      	movs	r3, #0
1a005532:	617b      	str	r3, [r7, #20]
1a005534:	e00c      	b.n	1a005550 <UARTParseGetCommand+0x128>
				xprintf("-B%d=%d\n", biasID, DVS128BiasGet(biasID));
1a005536:	697b      	ldr	r3, [r7, #20]
1a005538:	4618      	mov	r0, r3
1a00553a:	f7fb f937 	bl	1a0007ac <DVS128BiasGet>
1a00553e:	4603      	mov	r3, r0
1a005540:	461a      	mov	r2, r3
1a005542:	6979      	ldr	r1, [r7, #20]
1a005544:	4858      	ldr	r0, [pc, #352]	; (1a0056a8 <UARTParseGetCommand+0x280>)
1a005546:	f001 fb9d 	bl	1a006c84 <xprintf>
		unsigned char *c;
		int32_t biasID;

		c = commandLine + 2;				// send bias value as decimal value
		if ((*c == 'A') || (*c == 'a')) {
			for (biasID = 0; biasID < 12; biasID++) {
1a00554a:	697b      	ldr	r3, [r7, #20]
1a00554c:	3301      	adds	r3, #1
1a00554e:	617b      	str	r3, [r7, #20]
1a005550:	697b      	ldr	r3, [r7, #20]
1a005552:	2b0b      	cmp	r3, #11
1a005554:	ddef      	ble.n	1a005536 <UARTParseGetCommand+0x10e>
				xprintf("-B%d=%d\n", biasID, DVS128BiasGet(biasID));
			}
			break;
1a005556:	e09d      	b.n	1a005694 <UARTParseGetCommand+0x26c>
		}

		biasID = parseUInt32(&c);
1a005558:	f107 030c 	add.w	r3, r7, #12
1a00555c:	4618      	mov	r0, r3
1a00555e:	f7ff ff11 	bl	1a005384 <parseUInt32>
1a005562:	4603      	mov	r3, r0
1a005564:	617b      	str	r3, [r7, #20]
		xprintf("-B%d=%d\n", biasID, DVS128BiasGet(biasID));
1a005566:	697b      	ldr	r3, [r7, #20]
1a005568:	4618      	mov	r0, r3
1a00556a:	f7fb f91f 	bl	1a0007ac <DVS128BiasGet>
1a00556e:	4603      	mov	r3, r0
1a005570:	461a      	mov	r2, r3
1a005572:	6979      	ldr	r1, [r7, #20]
1a005574:	484c      	ldr	r0, [pc, #304]	; (1a0056a8 <UARTParseGetCommand+0x280>)
1a005576:	f001 fb85 	bl	1a006c84 <xprintf>
		break;
1a00557a:	bf00      	nop
1a00557c:	e08a      	b.n	1a005694 <UARTParseGetCommand+0x26c>
	}

	case 'E':
	case 'e':
		xprintf("-E%d\n", eDVSDataFormat);
1a00557e:	4b4b      	ldr	r3, [pc, #300]	; (1a0056ac <UARTParseGetCommand+0x284>)
1a005580:	681b      	ldr	r3, [r3, #0]
1a005582:	4619      	mov	r1, r3
1a005584:	484a      	ldr	r0, [pc, #296]	; (1a0056b0 <UARTParseGetCommand+0x288>)
1a005586:	f001 fb7d 	bl	1a006c84 <xprintf>
		break;
1a00558a:	e083      	b.n	1a005694 <UARTParseGetCommand+0x26c>

#if USE_PUSHBOT
	case 'M':
	case 'm': {
		unsigned char *c = commandLine + 2;
1a00558c:	4b45      	ldr	r3, [pc, #276]	; (1a0056a4 <UARTParseGetCommand+0x27c>)
1a00558e:	60bb      	str	r3, [r7, #8]
		if (*c == 'C' || *c == 'c') {
1a005590:	68bb      	ldr	r3, [r7, #8]
1a005592:	781b      	ldrb	r3, [r3, #0]
1a005594:	2b43      	cmp	r3, #67	; 0x43
1a005596:	d003      	beq.n	1a0055a0 <UARTParseGetCommand+0x178>
1a005598:	68bb      	ldr	r3, [r7, #8]
1a00559a:	781b      	ldrb	r3, [r3, #0]
1a00559c:	2b63      	cmp	r3, #99	; 0x63
1a00559e:	d122      	bne.n	1a0055e6 <UARTParseGetCommand+0x1be>
			c++;
1a0055a0:	68bb      	ldr	r3, [r7, #8]
1a0055a2:	3301      	adds	r3, #1
1a0055a4:	60bb      	str	r3, [r7, #8]
			uint32_t motorId = parseUInt32(&c);
1a0055a6:	f107 0308 	add.w	r3, r7, #8
1a0055aa:	4618      	mov	r0, r3
1a0055ac:	f7ff feea 	bl	1a005384 <parseUInt32>
1a0055b0:	6138      	str	r0, [r7, #16]
			if (motorId == MOTOR0) {
1a0055b2:	693b      	ldr	r3, [r7, #16]
1a0055b4:	2b00      	cmp	r3, #0
1a0055b6:	d109      	bne.n	1a0055cc <UARTParseGetCommand+0x1a4>
				xprintf("-MC0 %d,%d,%d\n", motor0.proportionalGain, motor0.integralGain, motor0.derivativeGain);
1a0055b8:	4b3e      	ldr	r3, [pc, #248]	; (1a0056b4 <UARTParseGetCommand+0x28c>)
1a0055ba:	69d9      	ldr	r1, [r3, #28]
1a0055bc:	4b3d      	ldr	r3, [pc, #244]	; (1a0056b4 <UARTParseGetCommand+0x28c>)
1a0055be:	6a1a      	ldr	r2, [r3, #32]
1a0055c0:	4b3c      	ldr	r3, [pc, #240]	; (1a0056b4 <UARTParseGetCommand+0x28c>)
1a0055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a0055c4:	483c      	ldr	r0, [pc, #240]	; (1a0056b8 <UARTParseGetCommand+0x290>)
1a0055c6:	f001 fb5d 	bl	1a006c84 <xprintf>

#if USE_PUSHBOT
	case 'M':
	case 'm': {
		unsigned char *c = commandLine + 2;
		if (*c == 'C' || *c == 'c') {
1a0055ca:	e010      	b.n	1a0055ee <UARTParseGetCommand+0x1c6>
			c++;
			uint32_t motorId = parseUInt32(&c);
			if (motorId == MOTOR0) {
				xprintf("-MC0 %d,%d,%d\n", motor0.proportionalGain, motor0.integralGain, motor0.derivativeGain);
			} else if (motorId == MOTOR1) {
1a0055cc:	693b      	ldr	r3, [r7, #16]
1a0055ce:	2b01      	cmp	r3, #1
1a0055d0:	d10d      	bne.n	1a0055ee <UARTParseGetCommand+0x1c6>
				xprintf("-MC1 %d,%d,%d\n", motor1.proportionalGain, motor1.integralGain, motor1.derivativeGain);
1a0055d2:	4b3a      	ldr	r3, [pc, #232]	; (1a0056bc <UARTParseGetCommand+0x294>)
1a0055d4:	69d9      	ldr	r1, [r3, #28]
1a0055d6:	4b39      	ldr	r3, [pc, #228]	; (1a0056bc <UARTParseGetCommand+0x294>)
1a0055d8:	6a1a      	ldr	r2, [r3, #32]
1a0055da:	4b38      	ldr	r3, [pc, #224]	; (1a0056bc <UARTParseGetCommand+0x294>)
1a0055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a0055de:	4838      	ldr	r0, [pc, #224]	; (1a0056c0 <UARTParseGetCommand+0x298>)
1a0055e0:	f001 fb50 	bl	1a006c84 <xprintf>

#if USE_PUSHBOT
	case 'M':
	case 'm': {
		unsigned char *c = commandLine + 2;
		if (*c == 'C' || *c == 'c') {
1a0055e4:	e003      	b.n	1a0055ee <UARTParseGetCommand+0x1c6>
				xprintf("-MC0 %d,%d,%d\n", motor0.proportionalGain, motor0.integralGain, motor0.derivativeGain);
			} else if (motorId == MOTOR1) {
				xprintf("-MC1 %d,%d,%d\n", motor1.proportionalGain, motor1.integralGain, motor1.derivativeGain);
			}
		} else {
			xputs("Get: parsing error\n");
1a0055e6:	4837      	ldr	r0, [pc, #220]	; (1a0056c4 <UARTParseGetCommand+0x29c>)
1a0055e8:	f001 f9bc 	bl	1a006964 <xputs>
		}
		break;
1a0055ec:	e000      	b.n	1a0055f0 <UARTParseGetCommand+0x1c8>

#if USE_PUSHBOT
	case 'M':
	case 'm': {
		unsigned char *c = commandLine + 2;
		if (*c == 'C' || *c == 'c') {
1a0055ee:	bf00      	nop
				xprintf("-MC1 %d,%d,%d\n", motor1.proportionalGain, motor1.integralGain, motor1.derivativeGain);
			}
		} else {
			xputs("Get: parsing error\n");
		}
		break;
1a0055f0:	bf00      	nop
1a0055f2:	e04f      	b.n	1a005694 <UARTParseGetCommand+0x26c>
	}
#endif
	case 'S':
	case 's': {
		unsigned char *c = commandLine + 2;
1a0055f4:	4b2b      	ldr	r3, [pc, #172]	; (1a0056a4 <UARTParseGetCommand+0x27c>)
1a0055f6:	607b      	str	r3, [r7, #4]
		getSensorsOutput(parseUInt32(&c));
1a0055f8:	1d3b      	adds	r3, r7, #4
1a0055fa:	4618      	mov	r0, r3
1a0055fc:	f7ff fec2 	bl	1a005384 <parseUInt32>
1a005600:	4603      	mov	r3, r0
1a005602:	4618      	mov	r0, r3
1a005604:	f7ff f836 	bl	1a004674 <getSensorsOutput>
		break;
1a005608:	bf00      	nop
1a00560a:	e043      	b.n	1a005694 <UARTParseGetCommand+0x26c>
	}
	case 'T':
	case 't':
		xprintf("-T%04d-%02d-%02d %02d:%02d:%02d\n", Chip_RTC_GetTime(LPC_RTC, RTC_TIMETYPE_YEAR),
1a00560c:	2107      	movs	r1, #7
1a00560e:	482e      	ldr	r0, [pc, #184]	; (1a0056c8 <UARTParseGetCommand+0x2a0>)
1a005610:	f7ff fa86 	bl	1a004b20 <Chip_RTC_GetTime>
1a005614:	4606      	mov	r6, r0
1a005616:	2106      	movs	r1, #6
1a005618:	482b      	ldr	r0, [pc, #172]	; (1a0056c8 <UARTParseGetCommand+0x2a0>)
1a00561a:	f7ff fa81 	bl	1a004b20 <Chip_RTC_GetTime>
1a00561e:	4680      	mov	r8, r0
1a005620:	2103      	movs	r1, #3
1a005622:	4829      	ldr	r0, [pc, #164]	; (1a0056c8 <UARTParseGetCommand+0x2a0>)
1a005624:	f7ff fa7c 	bl	1a004b20 <Chip_RTC_GetTime>
1a005628:	4681      	mov	r9, r0
1a00562a:	2102      	movs	r1, #2
1a00562c:	4826      	ldr	r0, [pc, #152]	; (1a0056c8 <UARTParseGetCommand+0x2a0>)
1a00562e:	f7ff fa77 	bl	1a004b20 <Chip_RTC_GetTime>
1a005632:	4604      	mov	r4, r0
1a005634:	2101      	movs	r1, #1
1a005636:	4824      	ldr	r0, [pc, #144]	; (1a0056c8 <UARTParseGetCommand+0x2a0>)
1a005638:	f7ff fa72 	bl	1a004b20 <Chip_RTC_GetTime>
1a00563c:	4605      	mov	r5, r0
1a00563e:	2100      	movs	r1, #0
1a005640:	4821      	ldr	r0, [pc, #132]	; (1a0056c8 <UARTParseGetCommand+0x2a0>)
1a005642:	f7ff fa6d 	bl	1a004b20 <Chip_RTC_GetTime>
1a005646:	4603      	mov	r3, r0
1a005648:	9302      	str	r3, [sp, #8]
1a00564a:	9501      	str	r5, [sp, #4]
1a00564c:	9400      	str	r4, [sp, #0]
1a00564e:	464b      	mov	r3, r9
1a005650:	4642      	mov	r2, r8
1a005652:	4631      	mov	r1, r6
1a005654:	481d      	ldr	r0, [pc, #116]	; (1a0056cc <UARTParseGetCommand+0x2a4>)
1a005656:	f001 fb15 	bl	1a006c84 <xprintf>
				Chip_RTC_GetTime(LPC_RTC, RTC_TIMETYPE_MONTH), Chip_RTC_GetTime(LPC_RTC, RTC_TIMETYPE_DAYOFMONTH),
				Chip_RTC_GetTime(LPC_RTC, RTC_TIMETYPE_HOUR), Chip_RTC_GetTime(LPC_RTC, RTC_TIMETYPE_MINUTE),
				Chip_RTC_GetTime(LPC_RTC, RTC_TIMETYPE_SECOND));
		break;
1a00565a:	e01b      	b.n	1a005694 <UARTParseGetCommand+0x26c>
	case '?':
		if (((commandLine[2]) == 'e') || ((commandLine[2]) == 'E')) {
1a00565c:	4b10      	ldr	r3, [pc, #64]	; (1a0056a0 <UARTParseGetCommand+0x278>)
1a00565e:	789b      	ldrb	r3, [r3, #2]
1a005660:	2b65      	cmp	r3, #101	; 0x65
1a005662:	d003      	beq.n	1a00566c <UARTParseGetCommand+0x244>
1a005664:	4b0e      	ldr	r3, [pc, #56]	; (1a0056a0 <UARTParseGetCommand+0x278>)
1a005666:	789b      	ldrb	r3, [r3, #2]
1a005668:	2b45      	cmp	r3, #69	; 0x45
1a00566a:	d102      	bne.n	1a005672 <UARTParseGetCommand+0x24a>
			UARTShowEventDataOptions();
1a00566c:	f7ff fdd8 	bl	1a005220 <UARTShowEventDataOptions>
			break;
1a005670:	e010      	b.n	1a005694 <UARTParseGetCommand+0x26c>
		}
		if (((commandLine[2]) == 's') || ((commandLine[2]) == 'S')) {
1a005672:	4b0b      	ldr	r3, [pc, #44]	; (1a0056a0 <UARTParseGetCommand+0x278>)
1a005674:	789b      	ldrb	r3, [r3, #2]
1a005676:	2b73      	cmp	r3, #115	; 0x73
1a005678:	d003      	beq.n	1a005682 <UARTParseGetCommand+0x25a>
1a00567a:	4b09      	ldr	r3, [pc, #36]	; (1a0056a0 <UARTParseGetCommand+0x278>)
1a00567c:	789b      	ldrb	r3, [r3, #2]
1a00567e:	2b53      	cmp	r3, #83	; 0x53
1a005680:	d102      	bne.n	1a005688 <UARTParseGetCommand+0x260>
			UARTShowSensorOptions();
1a005682:	f7ff fdfb 	bl	1a00527c <UARTShowSensorOptions>
			break;
1a005686:	e005      	b.n	1a005694 <UARTParseGetCommand+0x26c>
		}
		UARTShowUsage();
1a005688:	f7ff fcf4 	bl	1a005074 <UARTShowUsage>
		break;
1a00568c:	e002      	b.n	1a005694 <UARTParseGetCommand+0x26c>

	default:
		xputs("Get: parsing error\n");
1a00568e:	480d      	ldr	r0, [pc, #52]	; (1a0056c4 <UARTParseGetCommand+0x29c>)
1a005690:	f001 f968 	bl	1a006964 <xputs>
	}
	return;
1a005694:	bf00      	nop
}
1a005696:	371c      	adds	r7, #28
1a005698:	46bd      	mov	sp, r7
1a00569a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00569e:	bf00      	nop
1a0056a0:	10087874 	.word	0x10087874
1a0056a4:	10087876 	.word	0x10087876
1a0056a8:	1a019a84 	.word	0x1a019a84
1a0056ac:	1008651c 	.word	0x1008651c
1a0056b0:	1a019a90 	.word	0x1a019a90
1a0056b4:	1008749c 	.word	0x1008749c
1a0056b8:	1a019a98 	.word	0x1a019a98
1a0056bc:	10087460 	.word	0x10087460
1a0056c0:	1a019aa8 	.word	0x1a019aa8
1a0056c4:	1a019ab8 	.word	0x1a019ab8
1a0056c8:	40046000 	.word	0x40046000
1a0056cc:	1a019acc 	.word	0x1a019acc

1a0056d0 <UARTParseSetCommand>:

// *****************************************************************************
// * ** parseSetCommand ** */
// *****************************************************************************
static void UARTParseSetCommand(void) {
1a0056d0:	b590      	push	{r4, r7, lr}
1a0056d2:	b09f      	sub	sp, #124	; 0x7c
1a0056d4:	af00      	add	r7, sp, #0
	switch (commandLine[1]) {
1a0056d6:	4bac      	ldr	r3, [pc, #688]	; (1a005988 <UARTParseSetCommand+0x2b8>)
1a0056d8:	785b      	ldrb	r3, [r3, #1]
1a0056da:	3b41      	subs	r3, #65	; 0x41
1a0056dc:	2b34      	cmp	r3, #52	; 0x34
1a0056de:	f200 85f6 	bhi.w	1a0062ce <UARTParseSetCommand+0xbfe>
1a0056e2:	a201      	add	r2, pc, #4	; (adr r2, 1a0056e8 <UARTParseSetCommand+0x18>)
1a0056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0056e8:	1a0057bd 	.word	0x1a0057bd
1a0056ec:	1a0057fb 	.word	0x1a0057fb
1a0056f0:	1a0062cf 	.word	0x1a0062cf
1a0056f4:	1a0062cf 	.word	0x1a0062cf
1a0056f8:	1a0058e7 	.word	0x1a0058e7
1a0056fc:	1a0062cf 	.word	0x1a0062cf
1a005700:	1a0062cf 	.word	0x1a0062cf
1a005704:	1a0062cf 	.word	0x1a0062cf
1a005708:	1a0062cf 	.word	0x1a0062cf
1a00570c:	1a0062cf 	.word	0x1a0062cf
1a005710:	1a0062cf 	.word	0x1a0062cf
1a005714:	1a005b47 	.word	0x1a005b47
1a005718:	1a005b8b 	.word	0x1a005b8b
1a00571c:	1a0062cf 	.word	0x1a0062cf
1a005720:	1a0062cf 	.word	0x1a0062cf
1a005724:	1a005ef3 	.word	0x1a005ef3
1a005728:	1a0062cf 	.word	0x1a0062cf
1a00572c:	1a0062cf 	.word	0x1a0062cf
1a005730:	1a00600f 	.word	0x1a00600f
1a005734:	1a0060cb 	.word	0x1a0060cb
1a005738:	1a0061bd 	.word	0x1a0061bd
1a00573c:	1a0062cf 	.word	0x1a0062cf
1a005740:	1a0062cf 	.word	0x1a0062cf
1a005744:	1a0062cf 	.word	0x1a0062cf
1a005748:	1a0062cf 	.word	0x1a0062cf
1a00574c:	1a0062cf 	.word	0x1a0062cf
1a005750:	1a0062cf 	.word	0x1a0062cf
1a005754:	1a0062cf 	.word	0x1a0062cf
1a005758:	1a0062cf 	.word	0x1a0062cf
1a00575c:	1a0062cf 	.word	0x1a0062cf
1a005760:	1a0062cf 	.word	0x1a0062cf
1a005764:	1a0062cf 	.word	0x1a0062cf
1a005768:	1a0057bd 	.word	0x1a0057bd
1a00576c:	1a0057fb 	.word	0x1a0057fb
1a005770:	1a0062cf 	.word	0x1a0062cf
1a005774:	1a0062cf 	.word	0x1a0062cf
1a005778:	1a0058e7 	.word	0x1a0058e7
1a00577c:	1a0062cf 	.word	0x1a0062cf
1a005780:	1a0062cf 	.word	0x1a0062cf
1a005784:	1a0062cf 	.word	0x1a0062cf
1a005788:	1a0062cf 	.word	0x1a0062cf
1a00578c:	1a0062cf 	.word	0x1a0062cf
1a005790:	1a0062cf 	.word	0x1a0062cf
1a005794:	1a005b47 	.word	0x1a005b47
1a005798:	1a005b8b 	.word	0x1a005b8b
1a00579c:	1a0062cf 	.word	0x1a0062cf
1a0057a0:	1a0062cf 	.word	0x1a0062cf
1a0057a4:	1a005ef3 	.word	0x1a005ef3
1a0057a8:	1a0062cf 	.word	0x1a0062cf
1a0057ac:	1a0062cf 	.word	0x1a0062cf
1a0057b0:	1a00600f 	.word	0x1a00600f
1a0057b4:	1a0060cb 	.word	0x1a0060cb
1a0057b8:	1a0061bd 	.word	0x1a0061bd
	case 'A':
	case 'a': {
		unsigned char *c = commandLine + 2;
1a0057bc:	4b73      	ldr	r3, [pc, #460]	; (1a00598c <UARTParseSetCommand+0x2bc>)
1a0057be:	643b      	str	r3, [r7, #64]	; 0x40
		if (*c == '=') {
1a0057c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a0057c2:	781b      	ldrb	r3, [r3, #0]
1a0057c4:	2b3d      	cmp	r3, #61	; 0x3d
1a0057c6:	d102      	bne.n	1a0057ce <UARTParseSetCommand+0xfe>
			c++;
1a0057c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a0057ca:	3301      	adds	r3, #1
1a0057cc:	643b      	str	r3, [r7, #64]	; 0x40
		}
		uint32_t newDacValue = parseUInt32(&c);
1a0057ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
1a0057d2:	4618      	mov	r0, r3
1a0057d4:	f7ff fdd6 	bl	1a005384 <parseUInt32>
1a0057d8:	66f8      	str	r0, [r7, #108]	; 0x6c
		if (newDacValue > 0x3FF) {
1a0057da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1a0057dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
1a0057e0:	d304      	bcc.n	1a0057ec <UARTParseSetCommand+0x11c>
			xputs("Analog output should be between [0-1023]\n");
1a0057e2:	486b      	ldr	r0, [pc, #428]	; (1a005990 <UARTParseSetCommand+0x2c0>)
1a0057e4:	f001 f8be 	bl	1a006964 <xputs>
			return;
1a0057e8:	f000 bd86 	b.w	1a0062f8 <UARTParseSetCommand+0xc28>
		}
		Chip_DAC_UpdateValue(LPC_DAC, newDacValue);
1a0057ec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
1a0057ee:	4869      	ldr	r0, [pc, #420]	; (1a005994 <UARTParseSetCommand+0x2c4>)
1a0057f0:	f00c ff6c 	bl	1a0126cc <Chip_DAC_UpdateValue>
		return;
1a0057f4:	bf00      	nop
1a0057f6:	f000 bd7f 	b.w	1a0062f8 <UARTParseSetCommand+0xc28>
	case 'B':
	case 'b': {
		unsigned char *c;
		long biasID, biasValue;

		if ((commandLine[2] == 'F') || (commandLine[2] == 'f')) {				// flush bias values to DVS chip
1a0057fa:	4b63      	ldr	r3, [pc, #396]	; (1a005988 <UARTParseSetCommand+0x2b8>)
1a0057fc:	789b      	ldrb	r3, [r3, #2]
1a0057fe:	2b46      	cmp	r3, #70	; 0x46
1a005800:	d003      	beq.n	1a00580a <UARTParseSetCommand+0x13a>
1a005802:	4b61      	ldr	r3, [pc, #388]	; (1a005988 <UARTParseSetCommand+0x2b8>)
1a005804:	789b      	ldrb	r3, [r3, #2]
1a005806:	2b66      	cmp	r3, #102	; 0x66
1a005808:	d10f      	bne.n	1a00582a <UARTParseSetCommand+0x15a>
			if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
1a00580a:	4b63      	ldr	r3, [pc, #396]	; (1a005998 <UARTParseSetCommand+0x2c8>)
1a00580c:	681b      	ldr	r3, [r3, #0]
1a00580e:	2b00      	cmp	r3, #0
1a005810:	d106      	bne.n	1a005820 <UARTParseSetCommand+0x150>
1a005812:	4b62      	ldr	r3, [pc, #392]	; (1a00599c <UARTParseSetCommand+0x2cc>)
1a005814:	681b      	ldr	r3, [r3, #0]
1a005816:	2b01      	cmp	r3, #1
1a005818:	d902      	bls.n	1a005820 <UARTParseSetCommand+0x150>
				xputs("-BF\n");
1a00581a:	4861      	ldr	r0, [pc, #388]	; (1a0059a0 <UARTParseSetCommand+0x2d0>)
1a00581c:	f001 f8a2 	bl	1a006964 <xputs>
			}
			DVS128BiasFlush(1);
1a005820:	2001      	movs	r0, #1
1a005822:	f7fb f917 	bl	1a000a54 <DVS128BiasFlush>
			return;
1a005826:	f000 bd67 	b.w	1a0062f8 <UARTParseSetCommand+0xc28>
		}

		if ((commandLine[2] == 'D') || (commandLine[2] == 'd')) {				// load and flush default bias set
1a00582a:	4b57      	ldr	r3, [pc, #348]	; (1a005988 <UARTParseSetCommand+0x2b8>)
1a00582c:	789b      	ldrb	r3, [r3, #2]
1a00582e:	2b44      	cmp	r3, #68	; 0x44
1a005830:	d003      	beq.n	1a00583a <UARTParseSetCommand+0x16a>
1a005832:	4b55      	ldr	r3, [pc, #340]	; (1a005988 <UARTParseSetCommand+0x2b8>)
1a005834:	789b      	ldrb	r3, [r3, #2]
1a005836:	2b64      	cmp	r3, #100	; 0x64
1a005838:	d125      	bne.n	1a005886 <UARTParseSetCommand+0x1b6>
			if ((commandLine[3] >= '0') && (commandLine[3] <= '5')) {
1a00583a:	4b53      	ldr	r3, [pc, #332]	; (1a005988 <UARTParseSetCommand+0x2b8>)
1a00583c:	78db      	ldrb	r3, [r3, #3]
1a00583e:	2b2f      	cmp	r3, #47	; 0x2f
1a005840:	d91c      	bls.n	1a00587c <UARTParseSetCommand+0x1ac>
1a005842:	4b51      	ldr	r3, [pc, #324]	; (1a005988 <UARTParseSetCommand+0x2b8>)
1a005844:	78db      	ldrb	r3, [r3, #3]
1a005846:	2b35      	cmp	r3, #53	; 0x35
1a005848:	d818      	bhi.n	1a00587c <UARTParseSetCommand+0x1ac>
				if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
1a00584a:	4b53      	ldr	r3, [pc, #332]	; (1a005998 <UARTParseSetCommand+0x2c8>)
1a00584c:	681b      	ldr	r3, [r3, #0]
1a00584e:	2b00      	cmp	r3, #0
1a005850:	d109      	bne.n	1a005866 <UARTParseSetCommand+0x196>
1a005852:	4b52      	ldr	r3, [pc, #328]	; (1a00599c <UARTParseSetCommand+0x2cc>)
1a005854:	681b      	ldr	r3, [r3, #0]
1a005856:	2b01      	cmp	r3, #1
1a005858:	d905      	bls.n	1a005866 <UARTParseSetCommand+0x196>
					xprintf("-BD%c\n", commandLine[3]);
1a00585a:	4b4b      	ldr	r3, [pc, #300]	; (1a005988 <UARTParseSetCommand+0x2b8>)
1a00585c:	78db      	ldrb	r3, [r3, #3]
1a00585e:	4619      	mov	r1, r3
1a005860:	4850      	ldr	r0, [pc, #320]	; (1a0059a4 <UARTParseSetCommand+0x2d4>)
1a005862:	f001 fa0f 	bl	1a006c84 <xprintf>
				}
				DVS128BiasLoadDefaultSet(commandLine[3] - '0');
1a005866:	4b48      	ldr	r3, [pc, #288]	; (1a005988 <UARTParseSetCommand+0x2b8>)
1a005868:	78db      	ldrb	r3, [r3, #3]
1a00586a:	3b30      	subs	r3, #48	; 0x30
1a00586c:	4618      	mov	r0, r3
1a00586e:	f7fa ffb3 	bl	1a0007d8 <DVS128BiasLoadDefaultSet>
				DVS128BiasFlush(1);
1a005872:	2001      	movs	r0, #1
1a005874:	f7fb f8ee 	bl	1a000a54 <DVS128BiasFlush>
			} else {
				xputs("Select default bias set: parsing error\n");
			}
			return;
1a005878:	f000 bd3e 	b.w	1a0062f8 <UARTParseSetCommand+0xc28>
					xprintf("-BD%c\n", commandLine[3]);
				}
				DVS128BiasLoadDefaultSet(commandLine[3] - '0');
				DVS128BiasFlush(1);
			} else {
				xputs("Select default bias set: parsing error\n");
1a00587c:	484a      	ldr	r0, [pc, #296]	; (1a0059a8 <UARTParseSetCommand+0x2d8>)
1a00587e:	f001 f871 	bl	1a006964 <xputs>
			}
			return;
1a005882:	f000 bd39 	b.w	1a0062f8 <UARTParseSetCommand+0xc28>
		}

		c = commandLine + 2;
1a005886:	4b41      	ldr	r3, [pc, #260]	; (1a00598c <UARTParseSetCommand+0x2bc>)
1a005888:	63fb      	str	r3, [r7, #60]	; 0x3c
		biasID = parseUInt32(&c);
1a00588a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
1a00588e:	4618      	mov	r0, r3
1a005890:	f7ff fd78 	bl	1a005384 <parseUInt32>
1a005894:	4603      	mov	r3, r0
1a005896:	66bb      	str	r3, [r7, #104]	; 0x68
		c++;
1a005898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1a00589a:	3301      	adds	r3, #1
1a00589c:	63fb      	str	r3, [r7, #60]	; 0x3c
		biasValue = parseUInt32(&c);
1a00589e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
1a0058a2:	4618      	mov	r0, r3
1a0058a4:	f7ff fd6e 	bl	1a005384 <parseUInt32>
1a0058a8:	4603      	mov	r3, r0
1a0058aa:	667b      	str	r3, [r7, #100]	; 0x64
		DVS128BiasSet(biasID, biasValue);
1a0058ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
1a0058ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
1a0058b0:	4611      	mov	r1, r2
1a0058b2:	4618      	mov	r0, r3
1a0058b4:	f7fa ff64 	bl	1a000780 <DVS128BiasSet>
		if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
1a0058b8:	4b37      	ldr	r3, [pc, #220]	; (1a005998 <UARTParseSetCommand+0x2c8>)
1a0058ba:	681b      	ldr	r3, [r3, #0]
1a0058bc:	2b00      	cmp	r3, #0
1a0058be:	f040 850a 	bne.w	1a0062d6 <UARTParseSetCommand+0xc06>
1a0058c2:	4b36      	ldr	r3, [pc, #216]	; (1a00599c <UARTParseSetCommand+0x2cc>)
1a0058c4:	681b      	ldr	r3, [r3, #0]
1a0058c6:	2b01      	cmp	r3, #1
1a0058c8:	f240 8505 	bls.w	1a0062d6 <UARTParseSetCommand+0xc06>
			xprintf("-B%d=%d\n", biasID, DVS128BiasGet(biasID));
1a0058cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
1a0058ce:	4618      	mov	r0, r3
1a0058d0:	f7fa ff6c 	bl	1a0007ac <DVS128BiasGet>
1a0058d4:	4603      	mov	r3, r0
1a0058d6:	461a      	mov	r2, r3
1a0058d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
1a0058da:	4834      	ldr	r0, [pc, #208]	; (1a0059ac <UARTParseSetCommand+0x2dc>)
1a0058dc:	f001 f9d2 	bl	1a006c84 <xprintf>
		}
		return;
1a0058e0:	bf00      	nop
1a0058e2:	f000 bcf8 	b.w	1a0062d6 <UARTParseSetCommand+0xc06>
	}

	case 'E':
	case 'e': {
		unsigned char *c = commandLine + 2;
1a0058e6:	4b29      	ldr	r3, [pc, #164]	; (1a00598c <UARTParseSetCommand+0x2bc>)
1a0058e8:	63bb      	str	r3, [r7, #56]	; 0x38
		if ((*c == 't') || (*c == 'T')) { // set new event time
1a0058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0058ec:	781b      	ldrb	r3, [r3, #0]
1a0058ee:	2b74      	cmp	r3, #116	; 0x74
1a0058f0:	d004      	beq.n	1a0058fc <UARTParseSetCommand+0x22c>
1a0058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0058f4:	781b      	ldrb	r3, [r3, #0]
1a0058f6:	2b54      	cmp	r3, #84	; 0x54
1a0058f8:	f040 8105 	bne.w	1a005b06 <UARTParseSetCommand+0x436>
			c++;
1a0058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0058fe:	3301      	adds	r3, #1
1a005900:	63bb      	str	r3, [r7, #56]	; 0x38
			if ((*c == 's') || (*c == 'S')) { // set to clk-slave (use external pin CAP1 instead of internal clock)
1a005902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a005904:	781b      	ldrb	r3, [r3, #0]
1a005906:	2b73      	cmp	r3, #115	; 0x73
1a005908:	d003      	beq.n	1a005912 <UARTParseSetCommand+0x242>
1a00590a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a00590c:	781b      	ldrb	r3, [r3, #0]
1a00590e:	2b53      	cmp	r3, #83	; 0x53
1a005910:	d158      	bne.n	1a0059c4 <UARTParseSetCommand+0x2f4>
				eDVSMode = EDVS_MODE_SLAVE;
1a005912:	4b27      	ldr	r3, [pc, #156]	; (1a0059b0 <UARTParseSetCommand+0x2e0>)
1a005914:	2203      	movs	r2, #3
1a005916:	701a      	strb	r2, [r3, #0]
				Chip_TIMER_Disable(LPC_TIMER1); //   disable Timer/Counter 1
1a005918:	4826      	ldr	r0, [pc, #152]	; (1a0059b4 <UARTParseSetCommand+0x2e4>)
1a00591a:	f7ff f923 	bl	1a004b64 <Chip_TIMER_Disable>
				timerDelayUs(10); //Wait for any events that are being placed in the buffer
1a00591e:	200a      	movs	r0, #10
1a005920:	f000 feb2 	bl	1a006688 <timerDelayUs>
				events.eventBufferReadPointer = events.eventBufferWritePointer; //clearing the buffer
1a005924:	4b24      	ldr	r3, [pc, #144]	; (1a0059b8 <UARTParseSetCommand+0x2e8>)
1a005926:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
1a00592a:	3304      	adds	r3, #4
1a00592c:	681a      	ldr	r2, [r3, #0]
1a00592e:	4b22      	ldr	r3, [pc, #136]	; (1a0059b8 <UARTParseSetCommand+0x2e8>)
1a005930:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
1a005934:	3308      	adds	r3, #8
1a005936:	601a      	str	r2, [r3, #0]
				Chip_TIMER_PrescaleSet(LPC_TIMER1, 0);	// prescaler: run at 192Mhz to check for input
1a005938:	2100      	movs	r1, #0
1a00593a:	481e      	ldr	r0, [pc, #120]	; (1a0059b4 <UARTParseSetCommand+0x2e4>)
1a00593c:	f7ff f922 	bl	1a004b84 <Chip_TIMER_PrescaleSet>
				Chip_SCU_PinMuxSet(SYNCHRONIZATION_PORT, SYNCHRONIZATION_PIN, SCU_PINIO_FAST | FUNC3);
1a005940:	22f3      	movs	r2, #243	; 0xf3
1a005942:	2104      	movs	r1, #4
1a005944:	2002      	movs	r0, #2
1a005946:	f7ff f85d 	bl	1a004a04 <Chip_SCU_PinMuxSet>
				//Select the capture input pin in the Global Input Multiplexer Array
				LPC_GIMA->CAP0_IN[1][0] = (uint32_t) (0x0 << 4);
1a00594a:	4b1c      	ldr	r3, [pc, #112]	; (1a0059bc <UARTParseSetCommand+0x2ec>)
1a00594c:	2200      	movs	r2, #0
1a00594e:	611a      	str	r2, [r3, #16]

				Chip_TIMER_CaptureRisingEdgeEnable(LPC_TIMER1, SYNCHRONIZATION_CHANNEL);
1a005950:	2100      	movs	r1, #0
1a005952:	4818      	ldr	r0, [pc, #96]	; (1a0059b4 <UARTParseSetCommand+0x2e4>)
1a005954:	f7ff f98c 	bl	1a004c70 <Chip_TIMER_CaptureRisingEdgeEnable>
				Chip_TIMER_CaptureFallingEdgeEnable(LPC_TIMER1, SYNCHRONIZATION_CHANNEL);
1a005958:	2100      	movs	r1, #0
1a00595a:	4816      	ldr	r0, [pc, #88]	; (1a0059b4 <UARTParseSetCommand+0x2e4>)
1a00595c:	f7ff f9a2 	bl	1a004ca4 <Chip_TIMER_CaptureFallingEdgeEnable>
				Chip_TIMER_CaptureDisableInt(LPC_TIMER1, SYNCHRONIZATION_CHANNEL);
1a005960:	2100      	movs	r1, #0
1a005962:	4814      	ldr	r0, [pc, #80]	; (1a0059b4 <UARTParseSetCommand+0x2e4>)
1a005964:	f7ff f9ba 	bl	1a004cdc <Chip_TIMER_CaptureDisableInt>
				Chip_TIMER_TIMER_SetCountClockSrc(LPC_TIMER1, TIMER_CAPSRC_BOTH_CAPN, SYNCHRONIZATION_CHANNEL);
1a005968:	2200      	movs	r2, #0
1a00596a:	2103      	movs	r1, #3
1a00596c:	4811      	ldr	r0, [pc, #68]	; (1a0059b4 <UARTParseSetCommand+0x2e4>)
1a00596e:	f7ff f9d1 	bl	1a004d14 <Chip_TIMER_TIMER_SetCountClockSrc>
				Chip_TIMER_Reset(LPC_TIMER1);
1a005972:	4810      	ldr	r0, [pc, #64]	; (1a0059b4 <UARTParseSetCommand+0x2e4>)
1a005974:	f00d fd2c 	bl	1a0133d0 <Chip_TIMER_Reset>
				Chip_TIMER_Enable(LPC_TIMER1);
1a005978:	480e      	ldr	r0, [pc, #56]	; (1a0059b4 <UARTParseSetCommand+0x2e4>)
1a00597a:	f7ff f8e3 	bl	1a004b44 <Chip_TIMER_Enable>
				xputs("-ETS\n");
1a00597e:	4810      	ldr	r0, [pc, #64]	; (1a0059c0 <UARTParseSetCommand+0x2f0>)
1a005980:	f000 fff0 	bl	1a006964 <xputs>
				return;
1a005984:	f000 bcb8 	b.w	1a0062f8 <UARTParseSetCommand+0xc28>
1a005988:	10087874 	.word	0x10087874
1a00598c:	10087876 	.word	0x10087876
1a005990:	1a019af0 	.word	0x1a019af0
1a005994:	400e1000 	.word	0x400e1000
1a005998:	1008743c 	.word	0x1008743c
1a00599c:	10087870 	.word	0x10087870
1a0059a0:	1a019b1c 	.word	0x1a019b1c
1a0059a4:	1a019b24 	.word	0x1a019b24
1a0059a8:	1a019b2c 	.word	0x1a019b2c
1a0059ac:	1a019a84 	.word	0x1a019a84
1a0059b0:	10086518 	.word	0x10086518
1a0059b4:	40085000 	.word	0x40085000
1a0059b8:	10080000 	.word	0x10080000
1a0059bc:	400c7000 	.word	0x400c7000
1a0059c0:	1a019b54 	.word	0x1a019b54
			} else if ((*c == 'm') || (*c == 'M')) { // enable PWM2 (P0.7) to serve as clock for others
1a0059c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0059c6:	781b      	ldrb	r3, [r3, #0]
1a0059c8:	2b6d      	cmp	r3, #109	; 0x6d
1a0059ca:	d003      	beq.n	1a0059d4 <UARTParseSetCommand+0x304>
1a0059cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0059ce:	781b      	ldrb	r3, [r3, #0]
1a0059d0:	2b4d      	cmp	r3, #77	; 0x4d
1a0059d2:	d166      	bne.n	1a005aa2 <UARTParseSetCommand+0x3d2>
				c++;
1a0059d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0059d6:	3301      	adds	r3, #1
1a0059d8:	63bb      	str	r3, [r7, #56]	; 0x38
				if (*c == '0') {
1a0059da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0059dc:	781b      	ldrb	r3, [r3, #0]
1a0059de:	2b30      	cmp	r3, #48	; 0x30
1a0059e0:	d130      	bne.n	1a005a44 <UARTParseSetCommand+0x374>
					eDVSMode = EDVS_MODE_MASTER_ARMED;
1a0059e2:	4b99      	ldr	r3, [pc, #612]	; (1a005c48 <UARTParseSetCommand+0x578>)
1a0059e4:	2201      	movs	r2, #1
1a0059e6:	701a      	strb	r2, [r3, #0]
					Chip_TIMER_Init(LPC_TIMER3);
1a0059e8:	4898      	ldr	r0, [pc, #608]	; (1a005c4c <UARTParseSetCommand+0x57c>)
1a0059ea:	f00d fcd1 	bl	1a013390 <Chip_TIMER_Init>
					Chip_TIMER_PrescaleSet(LPC_TIMER3, 95); //192/(95+1)=2 Mhz
1a0059ee:	215f      	movs	r1, #95	; 0x5f
1a0059f0:	4896      	ldr	r0, [pc, #600]	; (1a005c4c <UARTParseSetCommand+0x57c>)
1a0059f2:	f7ff f8c7 	bl	1a004b84 <Chip_TIMER_PrescaleSet>
					Chip_TIMER_ResetOnMatchEnable(LPC_TIMER3, 1);
1a0059f6:	2101      	movs	r1, #1
1a0059f8:	4894      	ldr	r0, [pc, #592]	; (1a005c4c <UARTParseSetCommand+0x57c>)
1a0059fa:	f7ff f901 	bl	1a004c00 <Chip_TIMER_ResetOnMatchEnable>
					Chip_TIMER_StopOnMatchDisable(LPC_TIMER3, 1);
1a0059fe:	2101      	movs	r1, #1
1a005a00:	4892      	ldr	r0, [pc, #584]	; (1a005c4c <UARTParseSetCommand+0x57c>)
1a005a02:	f7ff f919 	bl	1a004c38 <Chip_TIMER_StopOnMatchDisable>
					Chip_TIMER_MatchDisableInt(LPC_TIMER3, 1);
1a005a06:	2101      	movs	r1, #1
1a005a08:	4890      	ldr	r0, [pc, #576]	; (1a005c4c <UARTParseSetCommand+0x57c>)
1a005a0a:	f7ff f8dd 	bl	1a004bc8 <Chip_TIMER_MatchDisableInt>
					Chip_TIMER_SetMatch(LPC_TIMER3, 1, 1); // enable this output channel
1a005a0e:	2201      	movs	r2, #1
1a005a10:	2101      	movs	r1, #1
1a005a12:	488e      	ldr	r0, [pc, #568]	; (1a005c4c <UARTParseSetCommand+0x57c>)
1a005a14:	f7ff f8c4 	bl	1a004ba0 <Chip_TIMER_SetMatch>
					Chip_TIMER_ExtMatchControlSet(LPC_TIMER3, 0, TIMER_EXTMATCH_CLEAR, 1);
1a005a18:	2301      	movs	r3, #1
1a005a1a:	2201      	movs	r2, #1
1a005a1c:	2100      	movs	r1, #0
1a005a1e:	488b      	ldr	r0, [pc, #556]	; (1a005c4c <UARTParseSetCommand+0x57c>)
1a005a20:	f00d fcf4 	bl	1a01340c <Chip_TIMER_ExtMatchControlSet>
					Chip_SCU_PinMuxSet(SYNCHRONIZATION_PORT, SYNCHRONIZATION_PIN, SCU_PINIO_FAST | FUNC6);
1a005a24:	22f6      	movs	r2, #246	; 0xf6
1a005a26:	2104      	movs	r1, #4
1a005a28:	2002      	movs	r0, #2
1a005a2a:	f7fe ffeb 	bl	1a004a04 <Chip_SCU_PinMuxSet>
					Chip_TIMER_Enable(LPC_TIMER3);
1a005a2e:	4887      	ldr	r0, [pc, #540]	; (1a005c4c <UARTParseSetCommand+0x57c>)
1a005a30:	f7ff f888 	bl	1a004b44 <Chip_TIMER_Enable>
					Chip_TIMER_Enable(LPC_TIMER1); // Restart capturing
1a005a34:	4886      	ldr	r0, [pc, #536]	; (1a005c50 <UARTParseSetCommand+0x580>)
1a005a36:	f7ff f885 	bl	1a004b44 <Chip_TIMER_Enable>
					xputs("-ETM0\n");
1a005a3a:	4886      	ldr	r0, [pc, #536]	; (1a005c54 <UARTParseSetCommand+0x584>)
1a005a3c:	f000 ff92 	bl	1a006964 <xputs>
					Chip_TIMER_Reset(LPC_TIMER1);
					Chip_TIMER_Enable(LPC_TIMER3); //Starts the clock out
					Chip_TIMER_Enable(LPC_TIMER1); // Restart capturing
					xputs("-ETM+\n");
				}
				return;
1a005a40:	f000 bc5a 	b.w	1a0062f8 <UARTParseSetCommand+0xc28>
					Chip_SCU_PinMuxSet(SYNCHRONIZATION_PORT, SYNCHRONIZATION_PIN, SCU_PINIO_FAST | FUNC6);
					Chip_TIMER_Enable(LPC_TIMER3);
					Chip_TIMER_Enable(LPC_TIMER1); // Restart capturing
					xputs("-ETM0\n");
				} else {
					eDVSMode = EDVS_MODE_MASTER_RUNNING;
1a005a44:	4b80      	ldr	r3, [pc, #512]	; (1a005c48 <UARTParseSetCommand+0x578>)
1a005a46:	2202      	movs	r2, #2
1a005a48:	701a      	strb	r2, [r3, #0]
					Chip_TIMER_Disable(LPC_TIMER3);
1a005a4a:	4880      	ldr	r0, [pc, #512]	; (1a005c4c <UARTParseSetCommand+0x57c>)
1a005a4c:	f7ff f88a 	bl	1a004b64 <Chip_TIMER_Disable>
					Chip_TIMER_ExtMatchControlSet(LPC_TIMER3, 0, TIMER_EXTMATCH_TOGGLE, 1);
1a005a50:	2301      	movs	r3, #1
1a005a52:	2203      	movs	r2, #3
1a005a54:	2100      	movs	r1, #0
1a005a56:	487d      	ldr	r0, [pc, #500]	; (1a005c4c <UARTParseSetCommand+0x57c>)
1a005a58:	f00d fcd8 	bl	1a01340c <Chip_TIMER_ExtMatchControlSet>
					Chip_SCU_PinMuxSet(SYNCHRONIZATION_PORT, SYNCHRONIZATION_PIN, SCU_PINIO_FAST | FUNC6);
1a005a5c:	22f6      	movs	r2, #246	; 0xf6
1a005a5e:	2104      	movs	r1, #4
1a005a60:	2002      	movs	r0, #2
1a005a62:	f7fe ffcf 	bl	1a004a04 <Chip_SCU_PinMuxSet>
					Chip_TIMER_Disable(LPC_TIMER1); //   disable Timer/Counter 1
1a005a66:	487a      	ldr	r0, [pc, #488]	; (1a005c50 <UARTParseSetCommand+0x580>)
1a005a68:	f7ff f87c 	bl	1a004b64 <Chip_TIMER_Disable>
					timerDelayUs(10); //Wait for any events that are being placed in the buffer
1a005a6c:	200a      	movs	r0, #10
1a005a6e:	f000 fe0b 	bl	1a006688 <timerDelayUs>
					events.eventBufferReadPointer = events.eventBufferWritePointer;
1a005a72:	4b79      	ldr	r3, [pc, #484]	; (1a005c58 <UARTParseSetCommand+0x588>)
1a005a74:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
1a005a78:	3304      	adds	r3, #4
1a005a7a:	681a      	ldr	r2, [r3, #0]
1a005a7c:	4b76      	ldr	r3, [pc, #472]	; (1a005c58 <UARTParseSetCommand+0x588>)
1a005a7e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
1a005a82:	3308      	adds	r3, #8
1a005a84:	601a      	str	r2, [r3, #0]
					Chip_TIMER_Reset(LPC_TIMER1);
1a005a86:	4872      	ldr	r0, [pc, #456]	; (1a005c50 <UARTParseSetCommand+0x580>)
1a005a88:	f00d fca2 	bl	1a0133d0 <Chip_TIMER_Reset>
					Chip_TIMER_Enable(LPC_TIMER3); //Starts the clock out
1a005a8c:	486f      	ldr	r0, [pc, #444]	; (1a005c4c <UARTParseSetCommand+0x57c>)
1a005a8e:	f7ff f859 	bl	1a004b44 <Chip_TIMER_Enable>
					Chip_TIMER_Enable(LPC_TIMER1); // Restart capturing
1a005a92:	486f      	ldr	r0, [pc, #444]	; (1a005c50 <UARTParseSetCommand+0x580>)
1a005a94:	f7ff f856 	bl	1a004b44 <Chip_TIMER_Enable>
					xputs("-ETM+\n");
1a005a98:	4870      	ldr	r0, [pc, #448]	; (1a005c5c <UARTParseSetCommand+0x58c>)
1a005a9a:	f000 ff63 	bl	1a006964 <xputs>
				}
				return;
1a005a9e:	f000 bc2b 	b.w	1a0062f8 <UARTParseSetCommand+0xc28>
			} else if ((*c == 'i') || (*c == 'I')) {
1a005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a005aa4:	781b      	ldrb	r3, [r3, #0]
1a005aa6:	2b69      	cmp	r3, #105	; 0x69
1a005aa8:	d003      	beq.n	1a005ab2 <UARTParseSetCommand+0x3e2>
1a005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a005aac:	781b      	ldrb	r3, [r3, #0]
1a005aae:	2b49      	cmp	r3, #73	; 0x49
1a005ab0:	d11d      	bne.n	1a005aee <UARTParseSetCommand+0x41e>
				//Returning to retina mode.
				switch (eDVSMode) {
1a005ab2:	4b65      	ldr	r3, [pc, #404]	; (1a005c48 <UARTParseSetCommand+0x578>)
1a005ab4:	781b      	ldrb	r3, [r3, #0]
1a005ab6:	2b01      	cmp	r3, #1
1a005ab8:	db13      	blt.n	1a005ae2 <UARTParseSetCommand+0x412>
1a005aba:	2b02      	cmp	r3, #2
1a005abc:	dd0a      	ble.n	1a005ad4 <UARTParseSetCommand+0x404>
1a005abe:	2b03      	cmp	r3, #3
1a005ac0:	d000      	beq.n	1a005ac4 <UARTParseSetCommand+0x3f4>
				case EDVS_MODE_MASTER_RUNNING:
					eDVSMode = EDVS_MODE_INTERNAL;
					PWMSetPeriod(0, 0); //calling this function will reset Timer3 normal operation
				case EDVS_MODE_INTERNAL: //do nothing
				default:
					break;
1a005ac2:	e00e      	b.n	1a005ae2 <UARTParseSetCommand+0x412>
				return;
			} else if ((*c == 'i') || (*c == 'I')) {
				//Returning to retina mode.
				switch (eDVSMode) {
				case EDVS_MODE_SLAVE:
					Chip_RGU_TriggerReset(RGU_TIMER1_RST); // reset timer 1
1a005ac4:	2021      	movs	r0, #33	; 0x21
1a005ac6:	f00d fac5 	bl	1a013054 <Chip_RGU_TriggerReset>
					Chip_TIMER_DeInit(LPC_TIMER1);
1a005aca:	4861      	ldr	r0, [pc, #388]	; (1a005c50 <UARTParseSetCommand+0x580>)
1a005acc:	f00d fc70 	bl	1a0133b0 <Chip_TIMER_DeInit>
					DVS128InitTimer();
1a005ad0:	f7fa fd4a 	bl	1a000568 <DVS128InitTimer>
					/* Fall-through*/
				case EDVS_MODE_MASTER_ARMED:
				case EDVS_MODE_MASTER_RUNNING:
					eDVSMode = EDVS_MODE_INTERNAL;
1a005ad4:	4b5c      	ldr	r3, [pc, #368]	; (1a005c48 <UARTParseSetCommand+0x578>)
1a005ad6:	2200      	movs	r2, #0
1a005ad8:	701a      	strb	r2, [r3, #0]
					PWMSetPeriod(0, 0); //calling this function will reset Timer3 normal operation
1a005ada:	2100      	movs	r1, #0
1a005adc:	2000      	movs	r0, #0
1a005ade:	f7fd fedf 	bl	1a0038a0 <PWMSetPeriod>
				case EDVS_MODE_INTERNAL: //do nothing
				default:
					break;
1a005ae2:	bf00      	nop
				}
				xputs("-ETI\n");
1a005ae4:	485e      	ldr	r0, [pc, #376]	; (1a005c60 <UARTParseSetCommand+0x590>)
1a005ae6:	f000 ff3d 	bl	1a006964 <xputs>
				return;
1a005aea:	f000 bc05 	b.w	1a0062f8 <UARTParseSetCommand+0xc28>
			} else {
				c++;
1a005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a005af0:	3301      	adds	r3, #1
1a005af2:	63bb      	str	r3, [r7, #56]	; 0x38
				LPC_TIMER1->TC = parseUInt32(&c);
1a005af4:	4c56      	ldr	r4, [pc, #344]	; (1a005c50 <UARTParseSetCommand+0x580>)
1a005af6:	f107 0338 	add.w	r3, r7, #56	; 0x38
1a005afa:	4618      	mov	r0, r3
1a005afc:	f7ff fc42 	bl	1a005384 <parseUInt32>
1a005b00:	4603      	mov	r3, r0
1a005b02:	60a3      	str	r3, [r4, #8]
				return;
1a005b04:	e3f8      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
			} else {
				break;
			}
		}
#endif
		if ((*c >= '0') && (*c <= '4')) {
1a005b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a005b08:	781b      	ldrb	r3, [r3, #0]
1a005b0a:	2b2f      	cmp	r3, #47	; 0x2f
1a005b0c:	d91b      	bls.n	1a005b46 <UARTParseSetCommand+0x476>
1a005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a005b10:	781b      	ldrb	r3, [r3, #0]
1a005b12:	2b34      	cmp	r3, #52	; 0x34
1a005b14:	d817      	bhi.n	1a005b46 <UARTParseSetCommand+0x476>
			eDVSDataFormat = ((*c) - '0');
1a005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a005b18:	781b      	ldrb	r3, [r3, #0]
1a005b1a:	3b30      	subs	r3, #48	; 0x30
1a005b1c:	461a      	mov	r2, r3
1a005b1e:	4b51      	ldr	r3, [pc, #324]	; (1a005c64 <UARTParseSetCommand+0x594>)
1a005b20:	601a      	str	r2, [r3, #0]
			if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
1a005b22:	4b51      	ldr	r3, [pc, #324]	; (1a005c68 <UARTParseSetCommand+0x598>)
1a005b24:	681b      	ldr	r3, [r3, #0]
1a005b26:	2b00      	cmp	r3, #0
1a005b28:	f040 83d7 	bne.w	1a0062da <UARTParseSetCommand+0xc0a>
1a005b2c:	4b4f      	ldr	r3, [pc, #316]	; (1a005c6c <UARTParseSetCommand+0x59c>)
1a005b2e:	681b      	ldr	r3, [r3, #0]
1a005b30:	2b01      	cmp	r3, #1
1a005b32:	f240 83d2 	bls.w	1a0062da <UARTParseSetCommand+0xc0a>
				xprintf("-E%d\n", eDVSDataFormat);
1a005b36:	4b4b      	ldr	r3, [pc, #300]	; (1a005c64 <UARTParseSetCommand+0x594>)
1a005b38:	681b      	ldr	r3, [r3, #0]
1a005b3a:	4619      	mov	r1, r3
1a005b3c:	484c      	ldr	r0, [pc, #304]	; (1a005c70 <UARTParseSetCommand+0x5a0>)
1a005b3e:	f001 f8a1 	bl	1a006c84 <xprintf>
			}
			return;
1a005b42:	bf00      	nop
1a005b44:	e3c9      	b.n	1a0062da <UARTParseSetCommand+0xc0a>
		}
	}

	case 'L':
	case 'l': {
		unsigned char *c = commandLine + 2;
1a005b46:	4b4b      	ldr	r3, [pc, #300]	; (1a005c74 <UARTParseSetCommand+0x5a4>)
1a005b48:	663b      	str	r3, [r7, #96]	; 0x60
		if (*c == '0') {
1a005b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
1a005b4c:	781b      	ldrb	r3, [r3, #0]
1a005b4e:	2b30      	cmp	r3, #48	; 0x30
1a005b50:	d105      	bne.n	1a005b5e <UARTParseSetCommand+0x48e>
			LED0SetBlinking(DISABLE);
1a005b52:	2000      	movs	r0, #0
1a005b54:	f7ff f92c 	bl	1a004db0 <LED0SetBlinking>
			LED0SetOff();
1a005b58:	f7ff f912 	bl	1a004d80 <LED0SetOff>
			return;
1a005b5c:	e3cc      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
		} else if (*c == '1') {
1a005b5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
1a005b60:	781b      	ldrb	r3, [r3, #0]
1a005b62:	2b31      	cmp	r3, #49	; 0x31
1a005b64:	d105      	bne.n	1a005b72 <UARTParseSetCommand+0x4a2>
			LED0SetBlinking(DISABLE);
1a005b66:	2000      	movs	r0, #0
1a005b68:	f7ff f922 	bl	1a004db0 <LED0SetBlinking>
			LED0SetOn();
1a005b6c:	f7ff f914 	bl	1a004d98 <LED0SetOn>
			return;
1a005b70:	e3c2      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
		} else if (*c == '2') {
1a005b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
1a005b74:	781b      	ldrb	r3, [r3, #0]
1a005b76:	2b32      	cmp	r3, #50	; 0x32
1a005b78:	d103      	bne.n	1a005b82 <UARTParseSetCommand+0x4b2>
			LED0SetBlinking(ENABLE);
1a005b7a:	2001      	movs	r0, #1
1a005b7c:	f7ff f918 	bl	1a004db0 <LED0SetBlinking>
			return;
1a005b80:	e3ba      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
		}
		xputs("Set: parsing error\n");
1a005b82:	483d      	ldr	r0, [pc, #244]	; (1a005c78 <UARTParseSetCommand+0x5a8>)
1a005b84:	f000 feee 	bl	1a006964 <xputs>
		return;
1a005b88:	e3b6      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
	}

	case 'M':
	case 'm': {
		unsigned char *c = commandLine + 2;
1a005b8a:	4b3a      	ldr	r3, [pc, #232]	; (1a005c74 <UARTParseSetCommand+0x5a4>)
1a005b8c:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t motorId = 0;
1a005b8e:	2300      	movs	r3, #0
1a005b90:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (*c == '+') {
1a005b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005b94:	781b      	ldrb	r3, [r3, #0]
1a005b96:	2b2b      	cmp	r3, #43	; 0x2b
1a005b98:	d103      	bne.n	1a005ba2 <UARTParseSetCommand+0x4d2>
			enableMotorDriver(TRUE);
1a005b9a:	2001      	movs	r0, #1
1a005b9c:	f7fc fbda 	bl	1a002354 <enableMotorDriver>
			return;
1a005ba0:	e3aa      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
		} else if (*c == '-') {
1a005ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005ba4:	781b      	ldrb	r3, [r3, #0]
1a005ba6:	2b2d      	cmp	r3, #45	; 0x2d
1a005ba8:	d103      	bne.n	1a005bb2 <UARTParseSetCommand+0x4e2>
			enableMotorDriver(FALSE);
1a005baa:	2000      	movs	r0, #0
1a005bac:	f7fc fbd2 	bl	1a002354 <enableMotorDriver>
			return;
1a005bb0:	e3a2      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
		}
		if ((*c == 'D') || (*c == 'd')) {
1a005bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005bb4:	781b      	ldrb	r3, [r3, #0]
1a005bb6:	2b44      	cmp	r3, #68	; 0x44
1a005bb8:	d003      	beq.n	1a005bc2 <UARTParseSetCommand+0x4f2>
1a005bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005bbc:	781b      	ldrb	r3, [r3, #0]
1a005bbe:	2b64      	cmp	r3, #100	; 0x64
1a005bc0:	d160      	bne.n	1a005c84 <UARTParseSetCommand+0x5b4>
			c++;
1a005bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005bc4:	3301      	adds	r3, #1
1a005bc6:	637b      	str	r3, [r7, #52]	; 0x34
			if (!isdigit(*c)) {
1a005bc8:	4b2c      	ldr	r3, [pc, #176]	; (1a005c7c <UARTParseSetCommand+0x5ac>)
1a005bca:	681a      	ldr	r2, [r3, #0]
1a005bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005bce:	781b      	ldrb	r3, [r3, #0]
1a005bd0:	3301      	adds	r3, #1
1a005bd2:	4413      	add	r3, r2
1a005bd4:	781b      	ldrb	r3, [r3, #0]
1a005bd6:	f003 0304 	and.w	r3, r3, #4
1a005bda:	2b00      	cmp	r3, #0
1a005bdc:	f000 8339 	beq.w	1a006252 <UARTParseSetCommand+0xb82>
				break;
			}
			motorId = parseUInt32(&c);
1a005be0:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005be4:	4618      	mov	r0, r3
1a005be6:	f7ff fbcd 	bl	1a005384 <parseUInt32>
1a005bea:	65f8      	str	r0, [r7, #92]	; 0x5c
			c++;
1a005bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005bee:	3301      	adds	r3, #1
1a005bf0:	637b      	str	r3, [r7, #52]	; 0x34
			if (*c == '%') {
1a005bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005bf4:	781b      	ldrb	r3, [r3, #0]
1a005bf6:	2b25      	cmp	r3, #37	; 0x25
1a005bf8:	d114      	bne.n	1a005c24 <UARTParseSetCommand+0x554>
				c++;
1a005bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005bfc:	3301      	adds	r3, #1
1a005bfe:	637b      	str	r3, [r7, #52]	; 0x34
				if (updateMotorDutyCycleDecay(motorId, parseInt32(&c))) {
1a005c00:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005c04:	4618      	mov	r0, r3
1a005c06:	f7ff fbe9 	bl	1a0053dc <parseInt32>
1a005c0a:	4603      	mov	r3, r0
1a005c0c:	4619      	mov	r1, r3
1a005c0e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005c10:	f7fc f978 	bl	1a001f04 <updateMotorDutyCycleDecay>
1a005c14:	4603      	mov	r3, r0
1a005c16:	2b00      	cmp	r3, #0
1a005c18:	f000 8361 	beq.w	1a0062de <UARTParseSetCommand+0xc0e>
					xputs("Error setting motor speed\n");
1a005c1c:	4818      	ldr	r0, [pc, #96]	; (1a005c80 <UARTParseSetCommand+0x5b0>)
1a005c1e:	f000 fea1 	bl	1a006964 <xputs>
					return;
1a005c22:	e369      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
				}
			} else {
				if (updateMotorWidthUsDecay(motorId, parseInt32(&c))) {
1a005c24:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005c28:	4618      	mov	r0, r3
1a005c2a:	f7ff fbd7 	bl	1a0053dc <parseInt32>
1a005c2e:	4603      	mov	r3, r0
1a005c30:	4619      	mov	r1, r3
1a005c32:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005c34:	f7fc f9ae 	bl	1a001f94 <updateMotorWidthUsDecay>
1a005c38:	4603      	mov	r3, r0
1a005c3a:	2b00      	cmp	r3, #0
1a005c3c:	f000 834f 	beq.w	1a0062de <UARTParseSetCommand+0xc0e>
					xputs("Error setting motor speed\n");
1a005c40:	480f      	ldr	r0, [pc, #60]	; (1a005c80 <UARTParseSetCommand+0x5b0>)
1a005c42:	f000 fe8f 	bl	1a006964 <xputs>
					return;
1a005c46:	e357      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
1a005c48:	10086518 	.word	0x10086518
1a005c4c:	400c4000 	.word	0x400c4000
1a005c50:	40085000 	.word	0x40085000
1a005c54:	1a019b5c 	.word	0x1a019b5c
1a005c58:	10080000 	.word	0x10080000
1a005c5c:	1a019b64 	.word	0x1a019b64
1a005c60:	1a019b6c 	.word	0x1a019b6c
1a005c64:	1008651c 	.word	0x1008651c
1a005c68:	1008743c 	.word	0x1008743c
1a005c6c:	10087870 	.word	0x10087870
1a005c70:	1a019a90 	.word	0x1a019a90
1a005c74:	10087876 	.word	0x10087876
1a005c78:	1a019b74 	.word	0x1a019b74
1a005c7c:	100860b0 	.word	0x100860b0
1a005c80:	1a019b88 	.word	0x1a019b88

			}
			return;
		}
#if USE_PUSHBOT
		if ((*c == 'C') || (*c == 'c')) {
1a005c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005c86:	781b      	ldrb	r3, [r3, #0]
1a005c88:	2b43      	cmp	r3, #67	; 0x43
1a005c8a:	d003      	beq.n	1a005c94 <UARTParseSetCommand+0x5c4>
1a005c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005c8e:	781b      	ldrb	r3, [r3, #0]
1a005c90:	2b63      	cmp	r3, #99	; 0x63
1a005c92:	d14c      	bne.n	1a005d2e <UARTParseSetCommand+0x65e>
			c++;
1a005c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005c96:	3301      	adds	r3, #1
1a005c98:	637b      	str	r3, [r7, #52]	; 0x34
			if (!isdigit(*c)) {
1a005c9a:	4ba3      	ldr	r3, [pc, #652]	; (1a005f28 <UARTParseSetCommand+0x858>)
1a005c9c:	681a      	ldr	r2, [r3, #0]
1a005c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005ca0:	781b      	ldrb	r3, [r3, #0]
1a005ca2:	3301      	adds	r3, #1
1a005ca4:	4413      	add	r3, r2
1a005ca6:	781b      	ldrb	r3, [r3, #0]
1a005ca8:	f003 0304 	and.w	r3, r3, #4
1a005cac:	2b00      	cmp	r3, #0
1a005cae:	f000 82d2 	beq.w	1a006256 <UARTParseSetCommand+0xb86>
				break;
			}
			motorId = parseUInt32(&c);
1a005cb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005cb6:	4618      	mov	r0, r3
1a005cb8:	f7ff fb64 	bl	1a005384 <parseUInt32>
1a005cbc:	65f8      	str	r0, [r7, #92]	; 0x5c
			if (*c == '=') {
1a005cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005cc0:	781b      	ldrb	r3, [r3, #0]
1a005cc2:	2b3d      	cmp	r3, #61	; 0x3d
1a005cc4:	f040 82c9 	bne.w	1a00625a <UARTParseSetCommand+0xb8a>
				c++;
1a005cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005cca:	3301      	adds	r3, #1
1a005ccc:	637b      	str	r3, [r7, #52]	; 0x34
			} else {
				break;
			}
			int32_t pGain = parseInt32(&c);
1a005cce:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005cd2:	4618      	mov	r0, r3
1a005cd4:	f7ff fb82 	bl	1a0053dc <parseInt32>
1a005cd8:	65b8      	str	r0, [r7, #88]	; 0x58
			if (*c == ',') {
1a005cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005cdc:	781b      	ldrb	r3, [r3, #0]
1a005cde:	2b2c      	cmp	r3, #44	; 0x2c
1a005ce0:	f040 82bd 	bne.w	1a00625e <UARTParseSetCommand+0xb8e>
				c++;
1a005ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005ce6:	3301      	adds	r3, #1
1a005ce8:	637b      	str	r3, [r7, #52]	; 0x34
			} else {
				break;
			}
			int32_t iGain = parseInt32(&c);
1a005cea:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005cee:	4618      	mov	r0, r3
1a005cf0:	f7ff fb74 	bl	1a0053dc <parseInt32>
1a005cf4:	6578      	str	r0, [r7, #84]	; 0x54
			if (*c == ',') {
1a005cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005cf8:	781b      	ldrb	r3, [r3, #0]
1a005cfa:	2b2c      	cmp	r3, #44	; 0x2c
1a005cfc:	f040 82b1 	bne.w	1a006262 <UARTParseSetCommand+0xb92>
				c++;
1a005d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005d02:	3301      	adds	r3, #1
1a005d04:	637b      	str	r3, [r7, #52]	; 0x34
			} else {
				break;
			}
			int32_t dGain = parseInt32(&c);
1a005d06:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005d0a:	4618      	mov	r0, r3
1a005d0c:	f7ff fb66 	bl	1a0053dc <parseInt32>
1a005d10:	6538      	str	r0, [r7, #80]	; 0x50
			if (updateMotorPID(motorId, pGain, iGain, dGain)) {
1a005d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a005d14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
1a005d16:	6db9      	ldr	r1, [r7, #88]	; 0x58
1a005d18:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005d1a:	f7fb ff4d 	bl	1a001bb8 <updateMotorPID>
1a005d1e:	4603      	mov	r3, r0
1a005d20:	2b00      	cmp	r3, #0
1a005d22:	f000 82de 	beq.w	1a0062e2 <UARTParseSetCommand+0xc12>
				xputs("Error setting controller PID\n");
1a005d26:	4881      	ldr	r0, [pc, #516]	; (1a005f2c <UARTParseSetCommand+0x85c>)
1a005d28:	f000 fe1c 	bl	1a006964 <xputs>
			}
			return;
1a005d2c:	e2d9      	b.n	1a0062e2 <UARTParseSetCommand+0xc12>
		}
		if ((*c == 'V') || (*c == 'v')) {
1a005d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005d30:	781b      	ldrb	r3, [r3, #0]
1a005d32:	2b56      	cmp	r3, #86	; 0x56
1a005d34:	d003      	beq.n	1a005d3e <UARTParseSetCommand+0x66e>
1a005d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005d38:	781b      	ldrb	r3, [r3, #0]
1a005d3a:	2b76      	cmp	r3, #118	; 0x76
1a005d3c:	d15b      	bne.n	1a005df6 <UARTParseSetCommand+0x726>
			c++;
1a005d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005d40:	3301      	adds	r3, #1
1a005d42:	637b      	str	r3, [r7, #52]	; 0x34
			if ((*c == 'D') || (*c == 'd')) {
1a005d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005d46:	781b      	ldrb	r3, [r3, #0]
1a005d48:	2b44      	cmp	r3, #68	; 0x44
1a005d4a:	d003      	beq.n	1a005d54 <UARTParseSetCommand+0x684>
1a005d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005d4e:	781b      	ldrb	r3, [r3, #0]
1a005d50:	2b64      	cmp	r3, #100	; 0x64
1a005d52:	d129      	bne.n	1a005da8 <UARTParseSetCommand+0x6d8>
				c++;
1a005d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005d56:	3301      	adds	r3, #1
1a005d58:	637b      	str	r3, [r7, #52]	; 0x34
				if (!isdigit(*c)) {
1a005d5a:	4b73      	ldr	r3, [pc, #460]	; (1a005f28 <UARTParseSetCommand+0x858>)
1a005d5c:	681a      	ldr	r2, [r3, #0]
1a005d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005d60:	781b      	ldrb	r3, [r3, #0]
1a005d62:	3301      	adds	r3, #1
1a005d64:	4413      	add	r3, r2
1a005d66:	781b      	ldrb	r3, [r3, #0]
1a005d68:	f003 0304 	and.w	r3, r3, #4
1a005d6c:	2b00      	cmp	r3, #0
1a005d6e:	f000 827a 	beq.w	1a006266 <UARTParseSetCommand+0xb96>
					break;
				}
				motorId = parseUInt32(&c);
1a005d72:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005d76:	4618      	mov	r0, r3
1a005d78:	f7ff fb04 	bl	1a005384 <parseUInt32>
1a005d7c:	65f8      	str	r0, [r7, #92]	; 0x5c
				c++;
1a005d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005d80:	3301      	adds	r3, #1
1a005d82:	637b      	str	r3, [r7, #52]	; 0x34
				if (updateMotorVelocityDecay(motorId, parseInt32(&c))) {
1a005d84:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005d88:	4618      	mov	r0, r3
1a005d8a:	f7ff fb27 	bl	1a0053dc <parseInt32>
1a005d8e:	4603      	mov	r3, r0
1a005d90:	4619      	mov	r1, r3
1a005d92:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005d94:	f7fc f88a 	bl	1a001eac <updateMotorVelocityDecay>
1a005d98:	4603      	mov	r3, r0
1a005d9a:	2b00      	cmp	r3, #0
1a005d9c:	f000 82a3 	beq.w	1a0062e6 <UARTParseSetCommand+0xc16>
					xputs("Error setting motor speed\n");
1a005da0:	4863      	ldr	r0, [pc, #396]	; (1a005f30 <UARTParseSetCommand+0x860>)
1a005da2:	f000 fddf 	bl	1a006964 <xputs>
				}
				return;
1a005da6:	e29e      	b.n	1a0062e6 <UARTParseSetCommand+0xc16>
			}
			if (!isdigit(*c)) {
1a005da8:	4b5f      	ldr	r3, [pc, #380]	; (1a005f28 <UARTParseSetCommand+0x858>)
1a005daa:	681a      	ldr	r2, [r3, #0]
1a005dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005dae:	781b      	ldrb	r3, [r3, #0]
1a005db0:	3301      	adds	r3, #1
1a005db2:	4413      	add	r3, r2
1a005db4:	781b      	ldrb	r3, [r3, #0]
1a005db6:	f003 0304 	and.w	r3, r3, #4
1a005dba:	2b00      	cmp	r3, #0
1a005dbc:	f000 8255 	beq.w	1a00626a <UARTParseSetCommand+0xb9a>
				break;
			}
			motorId = parseUInt32(&c);
1a005dc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005dc4:	4618      	mov	r0, r3
1a005dc6:	f7ff fadd 	bl	1a005384 <parseUInt32>
1a005dca:	65f8      	str	r0, [r7, #92]	; 0x5c
			c++;
1a005dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005dce:	3301      	adds	r3, #1
1a005dd0:	637b      	str	r3, [r7, #52]	; 0x34
			if (updateMotorVelocity(motorId, parseInt32(&c))) {
1a005dd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005dd6:	4618      	mov	r0, r3
1a005dd8:	f7ff fb00 	bl	1a0053dc <parseInt32>
1a005ddc:	4603      	mov	r3, r0
1a005dde:	4619      	mov	r1, r3
1a005de0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005de2:	f7fb ff17 	bl	1a001c14 <updateMotorVelocity>
1a005de6:	4603      	mov	r3, r0
1a005de8:	2b00      	cmp	r3, #0
1a005dea:	f000 827e 	beq.w	1a0062ea <UARTParseSetCommand+0xc1a>
				xputs("Error setting motor speed\n");
1a005dee:	4850      	ldr	r0, [pc, #320]	; (1a005f30 <UARTParseSetCommand+0x860>)
1a005df0:	f000 fdb8 	bl	1a006964 <xputs>
			}
			return;
1a005df4:	e279      	b.n	1a0062ea <UARTParseSetCommand+0xc1a>
		}
#endif
		if ((*c == 'P') || (*c == 'p')) {
1a005df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005df8:	781b      	ldrb	r3, [r3, #0]
1a005dfa:	2b50      	cmp	r3, #80	; 0x50
1a005dfc:	d003      	beq.n	1a005e06 <UARTParseSetCommand+0x736>
1a005dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005e00:	781b      	ldrb	r3, [r3, #0]
1a005e02:	2b70      	cmp	r3, #112	; 0x70
1a005e04:	d129      	bne.n	1a005e5a <UARTParseSetCommand+0x78a>
			c++;
1a005e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005e08:	3301      	adds	r3, #1
1a005e0a:	637b      	str	r3, [r7, #52]	; 0x34
			if (!isdigit(*c)) {
1a005e0c:	4b46      	ldr	r3, [pc, #280]	; (1a005f28 <UARTParseSetCommand+0x858>)
1a005e0e:	681a      	ldr	r2, [r3, #0]
1a005e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005e12:	781b      	ldrb	r3, [r3, #0]
1a005e14:	3301      	adds	r3, #1
1a005e16:	4413      	add	r3, r2
1a005e18:	781b      	ldrb	r3, [r3, #0]
1a005e1a:	f003 0304 	and.w	r3, r3, #4
1a005e1e:	2b00      	cmp	r3, #0
1a005e20:	f000 8225 	beq.w	1a00626e <UARTParseSetCommand+0xb9e>
				break;
			}
			motorId = parseUInt32(&c);
1a005e24:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005e28:	4618      	mov	r0, r3
1a005e2a:	f7ff faab 	bl	1a005384 <parseUInt32>
1a005e2e:	65f8      	str	r0, [r7, #92]	; 0x5c
			c++;
1a005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005e32:	3301      	adds	r3, #1
1a005e34:	637b      	str	r3, [r7, #52]	; 0x34
			if (updateMotorPWMPeriod(motorId, parseUInt32(&c))) {
1a005e36:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005e3a:	4618      	mov	r0, r3
1a005e3c:	f7ff faa2 	bl	1a005384 <parseUInt32>
1a005e40:	4603      	mov	r3, r0
1a005e42:	4619      	mov	r1, r3
1a005e44:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005e46:	f7fb fd71 	bl	1a00192c <updateMotorPWMPeriod>
1a005e4a:	4603      	mov	r3, r0
1a005e4c:	2b00      	cmp	r3, #0
1a005e4e:	f000 824e 	beq.w	1a0062ee <UARTParseSetCommand+0xc1e>
				xputs("Error setting motor PWM\n");
1a005e52:	4838      	ldr	r0, [pc, #224]	; (1a005f34 <UARTParseSetCommand+0x864>)
1a005e54:	f000 fd86 	bl	1a006964 <xputs>
			}
			return;
1a005e58:	e249      	b.n	1a0062ee <UARTParseSetCommand+0xc1e>
		}
		if (!isdigit(*c)) {
1a005e5a:	4b33      	ldr	r3, [pc, #204]	; (1a005f28 <UARTParseSetCommand+0x858>)
1a005e5c:	681a      	ldr	r2, [r3, #0]
1a005e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005e60:	781b      	ldrb	r3, [r3, #0]
1a005e62:	3301      	adds	r3, #1
1a005e64:	4413      	add	r3, r2
1a005e66:	781b      	ldrb	r3, [r3, #0]
1a005e68:	f003 0304 	and.w	r3, r3, #4
1a005e6c:	2b00      	cmp	r3, #0
1a005e6e:	f000 8200 	beq.w	1a006272 <UARTParseSetCommand+0xba2>
			break;
		}
		motorId = parseUInt32(&c);
1a005e72:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005e76:	4618      	mov	r0, r3
1a005e78:	f7ff fa84 	bl	1a005384 <parseUInt32>
1a005e7c:	65f8      	str	r0, [r7, #92]	; 0x5c
		c++;
1a005e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005e80:	3301      	adds	r3, #1
1a005e82:	637b      	str	r3, [r7, #52]	; 0x34
		if (updateMotorMode(motorId, DIRECT_MODE)) {
1a005e84:	2101      	movs	r1, #1
1a005e86:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005e88:	f7fb fdc0 	bl	1a001a0c <updateMotorMode>
1a005e8c:	4603      	mov	r3, r0
1a005e8e:	2b00      	cmp	r3, #0
1a005e90:	d003      	beq.n	1a005e9a <UARTParseSetCommand+0x7ca>
			xputs("Error setting motor mode\n");
1a005e92:	4829      	ldr	r0, [pc, #164]	; (1a005f38 <UARTParseSetCommand+0x868>)
1a005e94:	f000 fd66 	bl	1a006964 <xputs>
			return;
1a005e98:	e22e      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
		}
		if (*c == '%') {
1a005e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005e9c:	781b      	ldrb	r3, [r3, #0]
1a005e9e:	2b25      	cmp	r3, #37	; 0x25
1a005ea0:	d114      	bne.n	1a005ecc <UARTParseSetCommand+0x7fc>
			c++;
1a005ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a005ea4:	3301      	adds	r3, #1
1a005ea6:	637b      	str	r3, [r7, #52]	; 0x34
			if (updateMotorDutyCycle(motorId, parseInt32(&c))) {
1a005ea8:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005eac:	4618      	mov	r0, r3
1a005eae:	f7ff fa95 	bl	1a0053dc <parseInt32>
1a005eb2:	4603      	mov	r3, r0
1a005eb4:	4619      	mov	r1, r3
1a005eb6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005eb8:	f7fc f8f6 	bl	1a0020a8 <updateMotorDutyCycle>
1a005ebc:	4603      	mov	r3, r0
1a005ebe:	2b00      	cmp	r3, #0
1a005ec0:	f000 8217 	beq.w	1a0062f2 <UARTParseSetCommand+0xc22>
				xputs("Error setting motor speed\n");
1a005ec4:	481a      	ldr	r0, [pc, #104]	; (1a005f30 <UARTParseSetCommand+0x860>)
1a005ec6:	f000 fd4d 	bl	1a006964 <xputs>
			if (updateMotorWidthUs(motorId, parseInt32(&c))) {
				xputs("Error setting motor width\n");
			}
		}

		return;
1a005eca:	e212      	b.n	1a0062f2 <UARTParseSetCommand+0xc22>
			c++;
			if (updateMotorDutyCycle(motorId, parseInt32(&c))) {
				xputs("Error setting motor speed\n");
			}
		} else {
			if (updateMotorWidthUs(motorId, parseInt32(&c))) {
1a005ecc:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a005ed0:	4618      	mov	r0, r3
1a005ed2:	f7ff fa83 	bl	1a0053dc <parseInt32>
1a005ed6:	4603      	mov	r3, r0
1a005ed8:	4619      	mov	r1, r3
1a005eda:	6df8      	ldr	r0, [r7, #92]	; 0x5c
1a005edc:	f7fc f92c 	bl	1a002138 <updateMotorWidthUs>
1a005ee0:	4603      	mov	r3, r0
1a005ee2:	2b00      	cmp	r3, #0
1a005ee4:	f000 8205 	beq.w	1a0062f2 <UARTParseSetCommand+0xc22>
				xputs("Error setting motor width\n");
1a005ee8:	4814      	ldr	r0, [pc, #80]	; (1a005f3c <UARTParseSetCommand+0x86c>)
1a005eea:	f000 fd3b 	bl	1a006964 <xputs>
			}
		}

		return;
1a005eee:	bf00      	nop
1a005ef0:	e1ff      	b.n	1a0062f2 <UARTParseSetCommand+0xc22>
	}

	case 'P':
	case 'p': {
		unsigned char *c = commandLine + 2;
1a005ef2:	4b13      	ldr	r3, [pc, #76]	; (1a005f40 <UARTParseSetCommand+0x870>)
1a005ef4:	633b      	str	r3, [r7, #48]	; 0x30
		if (((*c >= 'A') && (*c <= 'C')) || ((*c >= 'a') && (*c <= 'c'))) {
1a005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005ef8:	781b      	ldrb	r3, [r3, #0]
1a005efa:	2b40      	cmp	r3, #64	; 0x40
1a005efc:	d903      	bls.n	1a005f06 <UARTParseSetCommand+0x836>
1a005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005f00:	781b      	ldrb	r3, [r3, #0]
1a005f02:	2b43      	cmp	r3, #67	; 0x43
1a005f04:	d907      	bls.n	1a005f16 <UARTParseSetCommand+0x846>
1a005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005f08:	781b      	ldrb	r3, [r3, #0]
1a005f0a:	2b60      	cmp	r3, #96	; 0x60
1a005f0c:	d978      	bls.n	1a006000 <UARTParseSetCommand+0x930>
1a005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005f10:	781b      	ldrb	r3, [r3, #0]
1a005f12:	2b63      	cmp	r3, #99	; 0x63
1a005f14:	d874      	bhi.n	1a006000 <UARTParseSetCommand+0x930>
			uint8_t channel = *c - (*c >= 'a' ? 'a' : 'A');
1a005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005f18:	781a      	ldrb	r2, [r3, #0]
1a005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005f1c:	781b      	ldrb	r3, [r3, #0]
1a005f1e:	2b60      	cmp	r3, #96	; 0x60
1a005f20:	d910      	bls.n	1a005f44 <UARTParseSetCommand+0x874>
1a005f22:	2361      	movs	r3, #97	; 0x61
1a005f24:	e00f      	b.n	1a005f46 <UARTParseSetCommand+0x876>
1a005f26:	bf00      	nop
1a005f28:	100860b0 	.word	0x100860b0
1a005f2c:	1a019ba4 	.word	0x1a019ba4
1a005f30:	1a019b88 	.word	0x1a019b88
1a005f34:	1a019bc4 	.word	0x1a019bc4
1a005f38:	1a019be0 	.word	0x1a019be0
1a005f3c:	1a019bfc 	.word	0x1a019bfc
1a005f40:	10087876 	.word	0x10087876
1a005f44:	2341      	movs	r3, #65	; 0x41
1a005f46:	1ad3      	subs	r3, r2, r3
1a005f48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			c++;
1a005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005f4e:	3301      	adds	r3, #1
1a005f50:	633b      	str	r3, [r7, #48]	; 0x30
			if ((*c == '0') || (*c == '1')) {
1a005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005f54:	781b      	ldrb	r3, [r3, #0]
1a005f56:	2b30      	cmp	r3, #48	; 0x30
1a005f58:	d003      	beq.n	1a005f62 <UARTParseSetCommand+0x892>
1a005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005f5c:	781b      	ldrb	r3, [r3, #0]
1a005f5e:	2b31      	cmp	r3, #49	; 0x31
1a005f60:	d136      	bne.n	1a005fd0 <UARTParseSetCommand+0x900>
				uint8_t output = *c - '0';
1a005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005f64:	781b      	ldrb	r3, [r3, #0]
1a005f66:	3b30      	subs	r3, #48	; 0x30
1a005f68:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				c += 2;
1a005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005f6e:	3302      	adds	r3, #2
1a005f70:	633b      	str	r3, [r7, #48]	; 0x30
				if (*c == '%') {
1a005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005f74:	781b      	ldrb	r3, [r3, #0]
1a005f76:	2b25      	cmp	r3, #37	; 0x25
1a005f78:	d116      	bne.n	1a005fa8 <UARTParseSetCommand+0x8d8>
					c++;
1a005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005f7c:	3301      	adds	r3, #1
1a005f7e:	633b      	str	r3, [r7, #48]	; 0x30
					if (PWMSetDutyCycle(channel, output, parseUInt32(&c))) {
1a005f80:	f107 0330 	add.w	r3, r7, #48	; 0x30
1a005f84:	4618      	mov	r0, r3
1a005f86:	f7ff f9fd 	bl	1a005384 <parseUInt32>
1a005f8a:	4602      	mov	r2, r0
1a005f8c:	f897 104e 	ldrb.w	r1, [r7, #78]	; 0x4e
1a005f90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
1a005f94:	4618      	mov	r0, r3
1a005f96:	f7fd fdcd 	bl	1a003b34 <PWMSetDutyCycle>
1a005f9a:	4603      	mov	r3, r0
1a005f9c:	2b00      	cmp	r3, #0
1a005f9e:	d02d      	beq.n	1a005ffc <UARTParseSetCommand+0x92c>
						xputs("Error setting PWM dutycycle\n");
1a005fa0:	48b5      	ldr	r0, [pc, #724]	; (1a006278 <UARTParseSetCommand+0xba8>)
1a005fa2:	f000 fcdf 	bl	1a006964 <xputs>
	case 'p': {
		unsigned char *c = commandLine + 2;
		if (((*c >= 'A') && (*c <= 'C')) || ((*c >= 'a') && (*c <= 'c'))) {
			uint8_t channel = *c - (*c >= 'a' ? 'a' : 'A');
			c++;
			if ((*c == '0') || (*c == '1')) {
1a005fa6:	e029      	b.n	1a005ffc <UARTParseSetCommand+0x92c>
				if (*c == '%') {
					c++;
					if (PWMSetDutyCycle(channel, output, parseUInt32(&c))) {
						xputs("Error setting PWM dutycycle\n");
					}
				} else if (PWMSetWidth(channel, output, parseUInt32(&c))) {
1a005fa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
1a005fac:	4618      	mov	r0, r3
1a005fae:	f7ff f9e9 	bl	1a005384 <parseUInt32>
1a005fb2:	4602      	mov	r2, r0
1a005fb4:	f897 104e 	ldrb.w	r1, [r7, #78]	; 0x4e
1a005fb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
1a005fbc:	4618      	mov	r0, r3
1a005fbe:	f7fd fdf7 	bl	1a003bb0 <PWMSetWidth>
1a005fc2:	4603      	mov	r3, r0
1a005fc4:	2b00      	cmp	r3, #0
1a005fc6:	d019      	beq.n	1a005ffc <UARTParseSetCommand+0x92c>
					xputs("Error setting PWM width\n");
1a005fc8:	48ac      	ldr	r0, [pc, #688]	; (1a00627c <UARTParseSetCommand+0xbac>)
1a005fca:	f000 fccb 	bl	1a006964 <xputs>
	case 'p': {
		unsigned char *c = commandLine + 2;
		if (((*c >= 'A') && (*c <= 'C')) || ((*c >= 'a') && (*c <= 'c'))) {
			uint8_t channel = *c - (*c >= 'a' ? 'a' : 'A');
			c++;
			if ((*c == '0') || (*c == '1')) {
1a005fce:	e015      	b.n	1a005ffc <UARTParseSetCommand+0x92c>
					}
				} else if (PWMSetWidth(channel, output, parseUInt32(&c))) {
					xputs("Error setting PWM width\n");
				}
			} else {
				c++;
1a005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a005fd2:	3301      	adds	r3, #1
1a005fd4:	633b      	str	r3, [r7, #48]	; 0x30
				if (PWMSetPeriod(channel, parseUInt32(&c))) {
1a005fd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
1a005fda:	4618      	mov	r0, r3
1a005fdc:	f7ff f9d2 	bl	1a005384 <parseUInt32>
1a005fe0:	4602      	mov	r2, r0
1a005fe2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
1a005fe6:	4611      	mov	r1, r2
1a005fe8:	4618      	mov	r0, r3
1a005fea:	f7fd fc59 	bl	1a0038a0 <PWMSetPeriod>
1a005fee:	4603      	mov	r3, r0
1a005ff0:	2b00      	cmp	r3, #0
1a005ff2:	d009      	beq.n	1a006008 <UARTParseSetCommand+0x938>
					xputs("Error setting PWM frequency\n");
1a005ff4:	48a2      	ldr	r0, [pc, #648]	; (1a006280 <UARTParseSetCommand+0xbb0>)
1a005ff6:	f000 fcb5 	bl	1a006964 <xputs>
	}

	case 'P':
	case 'p': {
		unsigned char *c = commandLine + 2;
		if (((*c >= 'A') && (*c <= 'C')) || ((*c >= 'a') && (*c <= 'c'))) {
1a005ffa:	e005      	b.n	1a006008 <UARTParseSetCommand+0x938>
			uint8_t channel = *c - (*c >= 'a' ? 'a' : 'A');
			c++;
			if ((*c == '0') || (*c == '1')) {
1a005ffc:	bf00      	nop
	}

	case 'P':
	case 'p': {
		unsigned char *c = commandLine + 2;
		if (((*c >= 'A') && (*c <= 'C')) || ((*c >= 'a') && (*c <= 'c'))) {
1a005ffe:	e003      	b.n	1a006008 <UARTParseSetCommand+0x938>
				if (PWMSetPeriod(channel, parseUInt32(&c))) {
					xputs("Error setting PWM frequency\n");
				}
			}
		} else {
			xputs("Channel not recognized\n");
1a006000:	48a0      	ldr	r0, [pc, #640]	; (1a006284 <UARTParseSetCommand+0xbb4>)
1a006002:	f000 fcaf 	bl	1a006964 <xputs>
		}
		return;
1a006006:	e000      	b.n	1a00600a <UARTParseSetCommand+0x93a>
	}

	case 'P':
	case 'p': {
		unsigned char *c = commandLine + 2;
		if (((*c >= 'A') && (*c <= 'C')) || ((*c >= 'a') && (*c <= 'c'))) {
1a006008:	bf00      	nop
				}
			}
		} else {
			xputs("Channel not recognized\n");
		}
		return;
1a00600a:	bf00      	nop
1a00600c:	e174      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
	}

	case 'S':
	case 's': {
		unsigned char *c = commandLine + 2;
1a00600e:	4b9e      	ldr	r3, [pc, #632]	; (1a006288 <UARTParseSetCommand+0xbb8>)
1a006010:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint8_t flag = 0;
1a006012:	2300      	movs	r3, #0
1a006014:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (*c == '+') {
1a006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a00601a:	781b      	ldrb	r3, [r3, #0]
1a00601c:	2b2b      	cmp	r3, #43	; 0x2b
1a00601e:	d103      	bne.n	1a006028 <UARTParseSetCommand+0x958>
			flag = ENABLE;
1a006020:	2301      	movs	r3, #1
1a006022:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
1a006026:	e007      	b.n	1a006038 <UARTParseSetCommand+0x968>
		} else if (*c == '-') {
1a006028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a00602a:	781b      	ldrb	r3, [r3, #0]
1a00602c:	2b2d      	cmp	r3, #45	; 0x2d
1a00602e:	f040 8147 	bne.w	1a0062c0 <UARTParseSetCommand+0xbf0>
			flag = DISABLE;
1a006032:	2300      	movs	r3, #0
1a006034:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		} else {
			break;
		}
		c++;
1a006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a00603a:	3301      	adds	r3, #1
1a00603c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (!isdigit(*c)) {
1a00603e:	4b93      	ldr	r3, [pc, #588]	; (1a00628c <UARTParseSetCommand+0xbbc>)
1a006040:	681a      	ldr	r2, [r3, #0]
1a006042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a006044:	781b      	ldrb	r3, [r3, #0]
1a006046:	3301      	adds	r3, #1
1a006048:	4413      	add	r3, r2
1a00604a:	781b      	ldrb	r3, [r3, #0]
1a00604c:	f003 0304 	and.w	r3, r3, #4
1a006050:	2b00      	cmp	r3, #0
1a006052:	d112      	bne.n	1a00607a <UARTParseSetCommand+0x9aa>
			if (!flag && (commandLinePointer == 3)) {
1a006054:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
1a006058:	2b00      	cmp	r3, #0
1a00605a:	f040 8133 	bne.w	1a0062c4 <UARTParseSetCommand+0xbf4>
1a00605e:	4b8c      	ldr	r3, [pc, #560]	; (1a006290 <UARTParseSetCommand+0xbc0>)
1a006060:	681b      	ldr	r3, [r3, #0]
1a006062:	2b03      	cmp	r3, #3
1a006064:	f040 812e 	bne.w	1a0062c4 <UARTParseSetCommand+0xbf4>
				enableSensors(0xFFFFFFFF, flag, 0);
1a006068:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
1a00606c:	2200      	movs	r2, #0
1a00606e:	4619      	mov	r1, r3
1a006070:	f04f 30ff 	mov.w	r0, #4294967295
1a006074:	f7fe f9dc 	bl	1a004430 <enableSensors>
				return;
1a006078:	e13e      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
			}
			break;
		}
		uint32_t mask = parseUInt32(&c);
1a00607a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
1a00607e:	4618      	mov	r0, r3
1a006080:	f7ff f980 	bl	1a005384 <parseUInt32>
1a006084:	64b8      	str	r0, [r7, #72]	; 0x48
		if (*c == ',') {
1a006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a006088:	781b      	ldrb	r3, [r3, #0]
1a00608a:	2b2c      	cmp	r3, #44	; 0x2c
1a00608c:	d103      	bne.n	1a006096 <UARTParseSetCommand+0x9c6>
			c++;
1a00608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a006090:	3301      	adds	r3, #1
1a006092:	62fb      	str	r3, [r7, #44]	; 0x2c
1a006094:	e004      	b.n	1a0060a0 <UARTParseSetCommand+0x9d0>
		} else {
			if (flag) {
1a006096:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
1a00609a:	2b00      	cmp	r3, #0
1a00609c:	f040 8114 	bne.w	1a0062c8 <UARTParseSetCommand+0xbf8>
				break; //second argument only mandatory when enabling.
			}
		}
		uint32_t period = 1;
1a0060a0:	2301      	movs	r3, #1
1a0060a2:	673b      	str	r3, [r7, #112]	; 0x70
		if (flag) {
1a0060a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
1a0060a8:	2b00      	cmp	r3, #0
1a0060aa:	d005      	beq.n	1a0060b8 <UARTParseSetCommand+0x9e8>
			period = parseUInt32(&c);
1a0060ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
1a0060b0:	4618      	mov	r0, r3
1a0060b2:	f7ff f967 	bl	1a005384 <parseUInt32>
1a0060b6:	6738      	str	r0, [r7, #112]	; 0x70
		}
		enableSensors(mask, flag, period);
1a0060b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
1a0060bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
1a0060be:	4619      	mov	r1, r3
1a0060c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
1a0060c2:	f7fe f9b5 	bl	1a004430 <enableSensors>
		return;
1a0060c6:	bf00      	nop
1a0060c8:	e116      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
	}
	case 'T':
	case 't': {

		unsigned char *c = commandLine + 2;
1a0060ca:	4b6f      	ldr	r3, [pc, #444]	; (1a006288 <UARTParseSetCommand+0xbb8>)
1a0060cc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (*c == '+') {
1a0060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a0060d0:	781b      	ldrb	r3, [r3, #0]
1a0060d2:	2b2b      	cmp	r3, #43	; 0x2b
1a0060d4:	d10e      	bne.n	1a0060f4 <UARTParseSetCommand+0xa24>
			Chip_RTC_Init(LPC_RTC);
1a0060d6:	486f      	ldr	r0, [pc, #444]	; (1a006294 <UARTParseSetCommand+0xbc4>)
1a0060d8:	f00d f812 	bl	1a013100 <Chip_RTC_Init>
			Chip_RTC_Enable(LPC_RTC, ENABLE);
1a0060dc:	2101      	movs	r1, #1
1a0060de:	486d      	ldr	r0, [pc, #436]	; (1a006294 <UARTParseSetCommand+0xbc4>)
1a0060e0:	f00d f864 	bl	1a0131ac <Chip_RTC_Enable>
			Chip_RTC_SetFullTime(LPC_RTC, &buildTime);
1a0060e4:	496c      	ldr	r1, [pc, #432]	; (1a006298 <UARTParseSetCommand+0xbc8>)
1a0060e6:	486b      	ldr	r0, [pc, #428]	; (1a006294 <UARTParseSetCommand+0xbc4>)
1a0060e8:	f00d f882 	bl	1a0131f0 <Chip_RTC_SetFullTime>
			xputs("-T+\n");
1a0060ec:	486b      	ldr	r0, [pc, #428]	; (1a00629c <UARTParseSetCommand+0xbcc>)
1a0060ee:	f000 fc39 	bl	1a006964 <xputs>
			return;
1a0060f2:	e101      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
		} else if (*c == '-') {
1a0060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a0060f6:	781b      	ldrb	r3, [r3, #0]
1a0060f8:	2b2d      	cmp	r3, #45	; 0x2d
1a0060fa:	d10a      	bne.n	1a006112 <UARTParseSetCommand+0xa42>
			Chip_RTC_Enable(LPC_RTC, DISABLE);
1a0060fc:	2100      	movs	r1, #0
1a0060fe:	4865      	ldr	r0, [pc, #404]	; (1a006294 <UARTParseSetCommand+0xbc4>)
1a006100:	f00d f854 	bl	1a0131ac <Chip_RTC_Enable>
			Chip_RTC_DeInit(LPC_RTC);
1a006104:	4863      	ldr	r0, [pc, #396]	; (1a006294 <UARTParseSetCommand+0xbc4>)
1a006106:	f00d f821 	bl	1a01314c <Chip_RTC_DeInit>
			xputs("-T-\n");
1a00610a:	4865      	ldr	r0, [pc, #404]	; (1a0062a0 <UARTParseSetCommand+0xbd0>)
1a00610c:	f000 fc2a 	bl	1a006964 <xputs>
			return;
1a006110:	e0f2      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
		}
		if (commandLinePointer < TIME_DATE_COM_SIZE + 2) {
1a006112:	4b5f      	ldr	r3, [pc, #380]	; (1a006290 <UARTParseSetCommand+0xbc0>)
1a006114:	681b      	ldr	r3, [r3, #0]
1a006116:	2b15      	cmp	r3, #21
1a006118:	d803      	bhi.n	1a006122 <UARTParseSetCommand+0xa52>
			xputs("Wrong format\n");
1a00611a:	4862      	ldr	r0, [pc, #392]	; (1a0062a4 <UARTParseSetCommand+0xbd4>)
1a00611c:	f000 fc22 	bl	1a006964 <xputs>
			return;
1a006120:	e0ea      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
		}
		if (!Chip_RTC_Clock_Running()) {
1a006122:	f7fe fea9 	bl	1a004e78 <Chip_RTC_Clock_Running>
1a006126:	4603      	mov	r3, r0
1a006128:	2b00      	cmp	r3, #0
1a00612a:	d103      	bne.n	1a006134 <UARTParseSetCommand+0xa64>
			xputs("RTC not enabled\n");
1a00612c:	485e      	ldr	r0, [pc, #376]	; (1a0062a8 <UARTParseSetCommand+0xbd8>)
1a00612e:	f000 fc19 	bl	1a006964 <xputs>
			return;
1a006132:	e0e1      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
		}
		RTC_TIME_T time;
		time.time[RTC_TIMETYPE_DAYOFWEEK] = 0;
1a006134:	2300      	movs	r3, #0
1a006136:	617b      	str	r3, [r7, #20]
		time.time[RTC_TIMETYPE_DAYOFYEAR] = 1;
1a006138:	2301      	movs	r3, #1
1a00613a:	61bb      	str	r3, [r7, #24]
		time.time[RTC_TIMETYPE_YEAR] = parseUInt32(&c);
1a00613c:	f107 0328 	add.w	r3, r7, #40	; 0x28
1a006140:	4618      	mov	r0, r3
1a006142:	f7ff f91f 	bl	1a005384 <parseUInt32>
1a006146:	4603      	mov	r3, r0
1a006148:	623b      	str	r3, [r7, #32]
		c++;
1a00614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a00614c:	3301      	adds	r3, #1
1a00614e:	62bb      	str	r3, [r7, #40]	; 0x28
		time.time[RTC_TIMETYPE_MONTH] = parseUInt32(&c);
1a006150:	f107 0328 	add.w	r3, r7, #40	; 0x28
1a006154:	4618      	mov	r0, r3
1a006156:	f7ff f915 	bl	1a005384 <parseUInt32>
1a00615a:	4603      	mov	r3, r0
1a00615c:	61fb      	str	r3, [r7, #28]
		c++;
1a00615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a006160:	3301      	adds	r3, #1
1a006162:	62bb      	str	r3, [r7, #40]	; 0x28
		time.time[RTC_TIMETYPE_DAYOFMONTH] = parseUInt32(&c);
1a006164:	f107 0328 	add.w	r3, r7, #40	; 0x28
1a006168:	4618      	mov	r0, r3
1a00616a:	f7ff f90b 	bl	1a005384 <parseUInt32>
1a00616e:	4603      	mov	r3, r0
1a006170:	613b      	str	r3, [r7, #16]
		c++;
1a006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a006174:	3301      	adds	r3, #1
1a006176:	62bb      	str	r3, [r7, #40]	; 0x28
		time.time[RTC_TIMETYPE_HOUR] = parseUInt32(&c);
1a006178:	f107 0328 	add.w	r3, r7, #40	; 0x28
1a00617c:	4618      	mov	r0, r3
1a00617e:	f7ff f901 	bl	1a005384 <parseUInt32>
1a006182:	4603      	mov	r3, r0
1a006184:	60fb      	str	r3, [r7, #12]
		c++;
1a006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a006188:	3301      	adds	r3, #1
1a00618a:	62bb      	str	r3, [r7, #40]	; 0x28
		time.time[RTC_TIMETYPE_MINUTE] = parseUInt32(&c);
1a00618c:	f107 0328 	add.w	r3, r7, #40	; 0x28
1a006190:	4618      	mov	r0, r3
1a006192:	f7ff f8f7 	bl	1a005384 <parseUInt32>
1a006196:	4603      	mov	r3, r0
1a006198:	60bb      	str	r3, [r7, #8]
		c++;
1a00619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a00619c:	3301      	adds	r3, #1
1a00619e:	62bb      	str	r3, [r7, #40]	; 0x28
		time.time[RTC_TIMETYPE_SECOND] = parseUInt32(&c);
1a0061a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
1a0061a4:	4618      	mov	r0, r3
1a0061a6:	f7ff f8ed 	bl	1a005384 <parseUInt32>
1a0061aa:	4603      	mov	r3, r0
1a0061ac:	607b      	str	r3, [r7, #4]
		Chip_RTC_SetFullTime(LPC_RTC, &time);
1a0061ae:	1d3b      	adds	r3, r7, #4
1a0061b0:	4619      	mov	r1, r3
1a0061b2:	4838      	ldr	r0, [pc, #224]	; (1a006294 <UARTParseSetCommand+0xbc4>)
1a0061b4:	f00d f81c 	bl	1a0131f0 <Chip_RTC_SetFullTime>
		return;
1a0061b8:	bf00      	nop
1a0061ba:	e09d      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>

	case 'U':
	case 'u': {
		unsigned char *c;
		long baudRate;
		c = commandLine + 2;
1a0061bc:	4b32      	ldr	r3, [pc, #200]	; (1a006288 <UARTParseSetCommand+0xbb8>)
1a0061be:	627b      	str	r3, [r7, #36]	; 0x24
		if (((*c) >= '0') && ((*c) <= '2')) {
1a0061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0061c2:	781b      	ldrb	r3, [r3, #0]
1a0061c4:	2b2f      	cmp	r3, #47	; 0x2f
1a0061c6:	d90a      	bls.n	1a0061de <UARTParseSetCommand+0xb0e>
1a0061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0061ca:	781b      	ldrb	r3, [r3, #0]
1a0061cc:	2b32      	cmp	r3, #50	; 0x32
1a0061ce:	d806      	bhi.n	1a0061de <UARTParseSetCommand+0xb0e>
			enableUARTecho = ((*c) - '0');
1a0061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0061d2:	781b      	ldrb	r3, [r3, #0]
1a0061d4:	3b30      	subs	r3, #48	; 0x30
1a0061d6:	461a      	mov	r2, r3
1a0061d8:	4b34      	ldr	r3, [pc, #208]	; (1a0062ac <UARTParseSetCommand+0xbdc>)
1a0061da:	601a      	str	r2, [r3, #0]
			return;
1a0061dc:	e08c      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
		}
		if (*c == '=') {
1a0061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0061e0:	781b      	ldrb	r3, [r3, #0]
1a0061e2:	2b3d      	cmp	r3, #61	; 0x3d
1a0061e4:	d172      	bne.n	1a0062cc <UARTParseSetCommand+0xbfc>
			c++;
1a0061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0061e8:	3301      	adds	r3, #1
1a0061ea:	627b      	str	r3, [r7, #36]	; 0x24
		} else {
			break;
		}
		baudRate = parseUInt32(&c);
1a0061ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
1a0061f0:	4618      	mov	r0, r3
1a0061f2:	f7ff f8c7 	bl	1a005384 <parseUInt32>
1a0061f6:	4603      	mov	r3, r0
1a0061f8:	647b      	str	r3, [r7, #68]	; 0x44
		while ((LPC_UART->LSR & UART_LSR_TEMT) == 0) {
1a0061fa:	bf00      	nop
1a0061fc:	4b2c      	ldr	r3, [pc, #176]	; (1a0062b0 <UARTParseSetCommand+0xbe0>)
1a0061fe:	695b      	ldr	r3, [r3, #20]
1a006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a006204:	2b00      	cmp	r3, #0
1a006206:	d0f9      	beq.n	1a0061fc <UARTParseSetCommand+0xb2c>
		};		   // wait for UART to finish data transfer
		if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
1a006208:	4b2a      	ldr	r3, [pc, #168]	; (1a0062b4 <UARTParseSetCommand+0xbe4>)
1a00620a:	681b      	ldr	r3, [r3, #0]
1a00620c:	2b00      	cmp	r3, #0
1a00620e:	d10a      	bne.n	1a006226 <UARTParseSetCommand+0xb56>
1a006210:	4b26      	ldr	r3, [pc, #152]	; (1a0062ac <UARTParseSetCommand+0xbdc>)
1a006212:	681b      	ldr	r3, [r3, #0]
1a006214:	2b01      	cmp	r3, #1
1a006216:	d906      	bls.n	1a006226 <UARTParseSetCommand+0xb56>
			xprintf("Switching Baud Rate to %d Baud!\n", baudRate);
1a006218:	6c79      	ldr	r1, [r7, #68]	; 0x44
1a00621a:	4827      	ldr	r0, [pc, #156]	; (1a0062b8 <UARTParseSetCommand+0xbe8>)
1a00621c:	f000 fd32 	bl	1a006c84 <xprintf>
			timerDelayMs(100);
1a006220:	2064      	movs	r0, #100	; 0x64
1a006222:	f000 fa6d 	bl	1a006700 <timerDelayMs>
		}
		if (Chip_UART_SetBaudFDR(LPC_UART, baudRate) == 0) {
1a006226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a006228:	4619      	mov	r1, r3
1a00622a:	4821      	ldr	r0, [pc, #132]	; (1a0062b0 <UARTParseSetCommand+0xbe0>)
1a00622c:	f00d f9fe 	bl	1a01362c <Chip_UART_SetBaudFDR>
1a006230:	4603      	mov	r3, r0
1a006232:	2b00      	cmp	r3, #0
1a006234:	d15f      	bne.n	1a0062f6 <UARTParseSetCommand+0xc26>
			if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
1a006236:	4b1f      	ldr	r3, [pc, #124]	; (1a0062b4 <UARTParseSetCommand+0xbe4>)
1a006238:	681b      	ldr	r3, [r3, #0]
1a00623a:	2b00      	cmp	r3, #0
1a00623c:	d15b      	bne.n	1a0062f6 <UARTParseSetCommand+0xc26>
1a00623e:	4b1b      	ldr	r3, [pc, #108]	; (1a0062ac <UARTParseSetCommand+0xbdc>)
1a006240:	681b      	ldr	r3, [r3, #0]
1a006242:	2b01      	cmp	r3, #1
1a006244:	d957      	bls.n	1a0062f6 <UARTParseSetCommand+0xc26>
				xprintf("Failed to switch Baud Rate to %d Baud!\n", baudRate);
1a006246:	6c79      	ldr	r1, [r7, #68]	; 0x44
1a006248:	481c      	ldr	r0, [pc, #112]	; (1a0062bc <UARTParseSetCommand+0xbec>)
1a00624a:	f000 fd1b 	bl	1a006c84 <xprintf>
			}
		}
		return;
1a00624e:	bf00      	nop
1a006250:	e051      	b.n	1a0062f6 <UARTParseSetCommand+0xc26>
			return;
		}
		if ((*c == 'D') || (*c == 'd')) {
			c++;
			if (!isdigit(*c)) {
				break;
1a006252:	bf00      	nop
1a006254:	e03b      	b.n	1a0062ce <UARTParseSetCommand+0xbfe>
		}
#if USE_PUSHBOT
		if ((*c == 'C') || (*c == 'c')) {
			c++;
			if (!isdigit(*c)) {
				break;
1a006256:	bf00      	nop
1a006258:	e039      	b.n	1a0062ce <UARTParseSetCommand+0xbfe>
			}
			motorId = parseUInt32(&c);
			if (*c == '=') {
				c++;
			} else {
				break;
1a00625a:	bf00      	nop
1a00625c:	e037      	b.n	1a0062ce <UARTParseSetCommand+0xbfe>
			}
			int32_t pGain = parseInt32(&c);
			if (*c == ',') {
				c++;
			} else {
				break;
1a00625e:	bf00      	nop
1a006260:	e035      	b.n	1a0062ce <UARTParseSetCommand+0xbfe>
			}
			int32_t iGain = parseInt32(&c);
			if (*c == ',') {
				c++;
			} else {
				break;
1a006262:	bf00      	nop
1a006264:	e033      	b.n	1a0062ce <UARTParseSetCommand+0xbfe>
		if ((*c == 'V') || (*c == 'v')) {
			c++;
			if ((*c == 'D') || (*c == 'd')) {
				c++;
				if (!isdigit(*c)) {
					break;
1a006266:	bf00      	nop
1a006268:	e031      	b.n	1a0062ce <UARTParseSetCommand+0xbfe>
					xputs("Error setting motor speed\n");
				}
				return;
			}
			if (!isdigit(*c)) {
				break;
1a00626a:	bf00      	nop
1a00626c:	e02f      	b.n	1a0062ce <UARTParseSetCommand+0xbfe>
		}
#endif
		if ((*c == 'P') || (*c == 'p')) {
			c++;
			if (!isdigit(*c)) {
				break;
1a00626e:	bf00      	nop
1a006270:	e02d      	b.n	1a0062ce <UARTParseSetCommand+0xbfe>
				xputs("Error setting motor PWM\n");
			}
			return;
		}
		if (!isdigit(*c)) {
			break;
1a006272:	bf00      	nop
1a006274:	e02b      	b.n	1a0062ce <UARTParseSetCommand+0xbfe>
1a006276:	bf00      	nop
1a006278:	1a019c18 	.word	0x1a019c18
1a00627c:	1a019c38 	.word	0x1a019c38
1a006280:	1a019c54 	.word	0x1a019c54
1a006284:	1a019c74 	.word	0x1a019c74
1a006288:	10087876 	.word	0x10087876
1a00628c:	100860b0 	.word	0x100860b0
1a006290:	100878f4 	.word	0x100878f4
1a006294:	40046000 	.word	0x40046000
1a006298:	10087440 	.word	0x10087440
1a00629c:	1a019c8c 	.word	0x1a019c8c
1a0062a0:	1a019c94 	.word	0x1a019c94
1a0062a4:	1a019c9c 	.word	0x1a019c9c
1a0062a8:	1a019cac 	.word	0x1a019cac
1a0062ac:	10087870 	.word	0x10087870
1a0062b0:	40081000 	.word	0x40081000
1a0062b4:	1008743c 	.word	0x1008743c
1a0062b8:	1a019cc0 	.word	0x1a019cc0
1a0062bc:	1a019ce4 	.word	0x1a019ce4
		if (*c == '+') {
			flag = ENABLE;
		} else if (*c == '-') {
			flag = DISABLE;
		} else {
			break;
1a0062c0:	bf00      	nop
1a0062c2:	e004      	b.n	1a0062ce <UARTParseSetCommand+0xbfe>
		if (!isdigit(*c)) {
			if (!flag && (commandLinePointer == 3)) {
				enableSensors(0xFFFFFFFF, flag, 0);
				return;
			}
			break;
1a0062c4:	bf00      	nop
1a0062c6:	e002      	b.n	1a0062ce <UARTParseSetCommand+0xbfe>
		uint32_t mask = parseUInt32(&c);
		if (*c == ',') {
			c++;
		} else {
			if (flag) {
				break; //second argument only mandatory when enabling.
1a0062c8:	bf00      	nop
1a0062ca:	e000      	b.n	1a0062ce <UARTParseSetCommand+0xbfe>
			return;
		}
		if (*c == '=') {
			c++;
		} else {
			break;
1a0062cc:	bf00      	nop
			}
		}
		return;
	}
	}
	xputs("Set: parsing error\n");
1a0062ce:	480c      	ldr	r0, [pc, #48]	; (1a006300 <UARTParseSetCommand+0xc30>)
1a0062d0:	f000 fb48 	bl	1a006964 <xputs>
1a0062d4:	e010      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
		biasValue = parseUInt32(&c);
		DVS128BiasSet(biasID, biasValue);
		if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
			xprintf("-B%d=%d\n", biasID, DVS128BiasGet(biasID));
		}
		return;
1a0062d6:	bf00      	nop
1a0062d8:	e00e      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
		if ((*c >= '0') && (*c <= '4')) {
			eDVSDataFormat = ((*c) - '0');
			if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
				xprintf("-E%d\n", eDVSDataFormat);
			}
			return;
1a0062da:	bf00      	nop
1a0062dc:	e00c      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
					xputs("Error setting motor speed\n");
					return;
				}

			}
			return;
1a0062de:	bf00      	nop
1a0062e0:	e00a      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
			}
			int32_t dGain = parseInt32(&c);
			if (updateMotorPID(motorId, pGain, iGain, dGain)) {
				xputs("Error setting controller PID\n");
			}
			return;
1a0062e2:	bf00      	nop
1a0062e4:	e008      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
				motorId = parseUInt32(&c);
				c++;
				if (updateMotorVelocityDecay(motorId, parseInt32(&c))) {
					xputs("Error setting motor speed\n");
				}
				return;
1a0062e6:	bf00      	nop
1a0062e8:	e006      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
			motorId = parseUInt32(&c);
			c++;
			if (updateMotorVelocity(motorId, parseInt32(&c))) {
				xputs("Error setting motor speed\n");
			}
			return;
1a0062ea:	bf00      	nop
1a0062ec:	e004      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
			motorId = parseUInt32(&c);
			c++;
			if (updateMotorPWMPeriod(motorId, parseUInt32(&c))) {
				xputs("Error setting motor PWM\n");
			}
			return;
1a0062ee:	bf00      	nop
1a0062f0:	e002      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
			if (updateMotorWidthUs(motorId, parseInt32(&c))) {
				xputs("Error setting motor width\n");
			}
		}

		return;
1a0062f2:	bf00      	nop
1a0062f4:	e000      	b.n	1a0062f8 <UARTParseSetCommand+0xc28>
		if (Chip_UART_SetBaudFDR(LPC_UART, baudRate) == 0) {
			if ((eDVSProcessingMode == 0) && (enableUARTecho > 1)) {
				xprintf("Failed to switch Baud Rate to %d Baud!\n", baudRate);
			}
		}
		return;
1a0062f6:	bf00      	nop
	}
	}
	xputs("Set: parsing error\n");
}
1a0062f8:	377c      	adds	r7, #124	; 0x7c
1a0062fa:	46bd      	mov	sp, r7
1a0062fc:	bd90      	pop	{r4, r7, pc}
1a0062fe:	bf00      	nop
1a006300:	1a019b74 	.word	0x1a019b74

1a006304 <parseRS232CommandLine>:

// *****************************************************************************
// * ** parseRS232CommandLine ** */
// *****************************************************************************
static void parseRS232CommandLine(void) {
1a006304:	b580      	push	{r7, lr}
1a006306:	b082      	sub	sp, #8
1a006308:	af00      	add	r7, sp, #0

	switch (commandLine[0]) {
1a00630a:	4b8d      	ldr	r3, [pc, #564]	; (1a006540 <parseRS232CommandLine+0x23c>)
1a00630c:	781b      	ldrb	r3, [r3, #0]
1a00630e:	3b21      	subs	r3, #33	; 0x21
1a006310:	2b56      	cmp	r3, #86	; 0x56
1a006312:	f200 810c 	bhi.w	1a00652e <parseRS232CommandLine+0x22a>
1a006316:	a201      	add	r2, pc, #4	; (adr r2, 1a00631c <parseRS232CommandLine+0x18>)
1a006318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a00631c:	1a00647f 	.word	0x1a00647f
1a006320:	1a00652f 	.word	0x1a00652f
1a006324:	1a00652f 	.word	0x1a00652f
1a006328:	1a00652f 	.word	0x1a00652f
1a00632c:	1a00652f 	.word	0x1a00652f
1a006330:	1a00652f 	.word	0x1a00652f
1a006334:	1a00652f 	.word	0x1a00652f
1a006338:	1a00652f 	.word	0x1a00652f
1a00633c:	1a00652f 	.word	0x1a00652f
1a006340:	1a00652f 	.word	0x1a00652f
1a006344:	1a00652f 	.word	0x1a00652f
1a006348:	1a00652f 	.word	0x1a00652f
1a00634c:	1a00652f 	.word	0x1a00652f
1a006350:	1a00652f 	.word	0x1a00652f
1a006354:	1a00652f 	.word	0x1a00652f
1a006358:	1a00652f 	.word	0x1a00652f
1a00635c:	1a00652f 	.word	0x1a00652f
1a006360:	1a00652f 	.word	0x1a00652f
1a006364:	1a00652f 	.word	0x1a00652f
1a006368:	1a00652f 	.word	0x1a00652f
1a00636c:	1a00652f 	.word	0x1a00652f
1a006370:	1a00652f 	.word	0x1a00652f
1a006374:	1a00652f 	.word	0x1a00652f
1a006378:	1a00652f 	.word	0x1a00652f
1a00637c:	1a00652f 	.word	0x1a00652f
1a006380:	1a00652f 	.word	0x1a00652f
1a006384:	1a00652f 	.word	0x1a00652f
1a006388:	1a00652f 	.word	0x1a00652f
1a00638c:	1a00652f 	.word	0x1a00652f
1a006390:	1a00652f 	.word	0x1a00652f
1a006394:	1a006479 	.word	0x1a006479
1a006398:	1a00652f 	.word	0x1a00652f
1a00639c:	1a00652f 	.word	0x1a00652f
1a0063a0:	1a00652f 	.word	0x1a00652f
1a0063a4:	1a00652f 	.word	0x1a00652f
1a0063a8:	1a00652f 	.word	0x1a00652f
1a0063ac:	1a00649b 	.word	0x1a00649b
1a0063b0:	1a00652f 	.word	0x1a00652f
1a0063b4:	1a00652f 	.word	0x1a00652f
1a0063b8:	1a00652f 	.word	0x1a00652f
1a0063bc:	1a00652f 	.word	0x1a00652f
1a0063c0:	1a00652f 	.word	0x1a00652f
1a0063c4:	1a00652f 	.word	0x1a00652f
1a0063c8:	1a00652f 	.word	0x1a00652f
1a0063cc:	1a00652f 	.word	0x1a00652f
1a0063d0:	1a00652f 	.word	0x1a00652f
1a0063d4:	1a00652f 	.word	0x1a00652f
1a0063d8:	1a006485 	.word	0x1a006485
1a0063dc:	1a00652f 	.word	0x1a00652f
1a0063e0:	1a006495 	.word	0x1a006495
1a0063e4:	1a006537 	.word	0x1a006537
1a0063e8:	1a00652f 	.word	0x1a00652f
1a0063ec:	1a00652f 	.word	0x1a00652f
1a0063f0:	1a00652f 	.word	0x1a00652f
1a0063f4:	1a0064b3 	.word	0x1a0064b3
1a0063f8:	1a00652f 	.word	0x1a00652f
1a0063fc:	1a00652f 	.word	0x1a00652f
1a006400:	1a00652f 	.word	0x1a00652f
1a006404:	1a00652f 	.word	0x1a00652f
1a006408:	1a00652f 	.word	0x1a00652f
1a00640c:	1a00652f 	.word	0x1a00652f
1a006410:	1a00652f 	.word	0x1a00652f
1a006414:	1a00652f 	.word	0x1a00652f
1a006418:	1a00652f 	.word	0x1a00652f
1a00641c:	1a00652f 	.word	0x1a00652f
1a006420:	1a00652f 	.word	0x1a00652f
1a006424:	1a00652f 	.word	0x1a00652f
1a006428:	1a00652f 	.word	0x1a00652f
1a00642c:	1a00649b 	.word	0x1a00649b
1a006430:	1a00652f 	.word	0x1a00652f
1a006434:	1a00652f 	.word	0x1a00652f
1a006438:	1a00652f 	.word	0x1a00652f
1a00643c:	1a00652f 	.word	0x1a00652f
1a006440:	1a00652f 	.word	0x1a00652f
1a006444:	1a00652f 	.word	0x1a00652f
1a006448:	1a00652f 	.word	0x1a00652f
1a00644c:	1a00652f 	.word	0x1a00652f
1a006450:	1a00652f 	.word	0x1a00652f
1a006454:	1a00652f 	.word	0x1a00652f
1a006458:	1a006485 	.word	0x1a006485
1a00645c:	1a00652f 	.word	0x1a00652f
1a006460:	1a006495 	.word	0x1a006495
1a006464:	1a006537 	.word	0x1a006537
1a006468:	1a00652f 	.word	0x1a00652f
1a00646c:	1a00652f 	.word	0x1a00652f
1a006470:	1a00652f 	.word	0x1a00652f
1a006474:	1a0064b3 	.word	0x1a0064b3
	case '?':
		UARTParseGetCommand();
1a006478:	f7fe ffd6 	bl	1a005428 <UARTParseGetCommand>
		break;
1a00647c:	e05c      	b.n	1a006538 <parseRS232CommandLine+0x234>
	case '!':
		UARTParseSetCommand();
1a00647e:	f7ff f927 	bl	1a0056d0 <UARTParseSetCommand>
		break;
1a006482:	e059      	b.n	1a006538 <parseRS232CommandLine+0x234>

	case 'P':
	case 'p':
		UARTInit(LPC_USART0, 9600);
1a006484:	f44f 5116 	mov.w	r1, #9600	; 0x2580
1a006488:	482e      	ldr	r0, [pc, #184]	; (1a006544 <parseRS232CommandLine+0x240>)
1a00648a:	f7fe fd3d 	bl	1a004f08 <UARTInit>
		enterReprogrammingMode();
1a00648e:	f000 f995 	bl	1a0067bc <enterReprogrammingMode>
		break;
1a006492:	e051      	b.n	1a006538 <parseRS232CommandLine+0x234>
	case 'R':
	case 'r':
		resetDevice();
1a006494:	f000 f988 	bl	1a0067a8 <resetDevice>
		break;
1a006498:	e04e      	b.n	1a006538 <parseRS232CommandLine+0x234>
	case 'E':
	case 'e':
		if (commandLine[1] == '+') {
1a00649a:	4b29      	ldr	r3, [pc, #164]	; (1a006540 <parseRS232CommandLine+0x23c>)
1a00649c:	785b      	ldrb	r3, [r3, #1]
1a00649e:	2b2b      	cmp	r3, #43	; 0x2b
1a0064a0:	d103      	bne.n	1a0064aa <parseRS232CommandLine+0x1a6>
			DVS128FetchEventsEnable(TRUE);
1a0064a2:	2001      	movs	r0, #1
1a0064a4:	f7fe fcfa 	bl	1a004e9c <DVS128FetchEventsEnable>
		} else {
			DVS128FetchEventsEnable(FALSE);
		}
		break;
1a0064a8:	e046      	b.n	1a006538 <parseRS232CommandLine+0x234>
	case 'E':
	case 'e':
		if (commandLine[1] == '+') {
			DVS128FetchEventsEnable(TRUE);
		} else {
			DVS128FetchEventsEnable(FALSE);
1a0064aa:	2000      	movs	r0, #0
1a0064ac:	f7fe fcf6 	bl	1a004e9c <DVS128FetchEventsEnable>
		}
		break;
1a0064b0:	e042      	b.n	1a006538 <parseRS232CommandLine+0x234>
		//
		break;
	}
	case 'W':
	case 'w':
		for (int i = 0; i < 20000000; ++i) {
1a0064b2:	2300      	movs	r3, #0
1a0064b4:	607b      	str	r3, [r7, #4]
1a0064b6:	e035      	b.n	1a006524 <parseRS232CommandLine+0x220>
1a0064b8:	bf00      	nop
			while (freeSpaceForTranmission(&uart) < 6) {	// wait for TX to finish sending!
1a0064ba:	4823      	ldr	r0, [pc, #140]	; (1a006548 <parseRS232CommandLine+0x244>)
1a0064bc:	f7fe fcc4 	bl	1a004e48 <freeSpaceForTranmission>
1a0064c0:	4603      	mov	r3, r0
1a0064c2:	2b05      	cmp	r3, #5
1a0064c4:	d9f8      	bls.n	1a0064b8 <parseRS232CommandLine+0x1b4>
				__NOP();
			}
			pushByteToTransmission(&uart, (i >> 8) | 0x80);      // 1st byte to send (Y-address)
1a0064c6:	687b      	ldr	r3, [r7, #4]
1a0064c8:	121b      	asrs	r3, r3, #8
1a0064ca:	b2db      	uxtb	r3, r3
1a0064cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a0064d0:	b2db      	uxtb	r3, r3
1a0064d2:	b2db      	uxtb	r3, r3
1a0064d4:	4619      	mov	r1, r3
1a0064d6:	481c      	ldr	r0, [pc, #112]	; (1a006548 <parseRS232CommandLine+0x244>)
1a0064d8:	f7fe fc80 	bl	1a004ddc <pushByteToTransmission>
			pushByteToTransmission(&uart, i & 0xFF);                  // 2nd byte to send (X-address)
1a0064dc:	687b      	ldr	r3, [r7, #4]
1a0064de:	b2db      	uxtb	r3, r3
1a0064e0:	4619      	mov	r1, r3
1a0064e2:	4819      	ldr	r0, [pc, #100]	; (1a006548 <parseRS232CommandLine+0x244>)
1a0064e4:	f7fe fc7a 	bl	1a004ddc <pushByteToTransmission>
			pushByteToTransmission(&uart, (i >> 8) & 0xFF); // 3rd byte to send (time stamp high byte)
1a0064e8:	687b      	ldr	r3, [r7, #4]
1a0064ea:	121b      	asrs	r3, r3, #8
1a0064ec:	b2db      	uxtb	r3, r3
1a0064ee:	4619      	mov	r1, r3
1a0064f0:	4815      	ldr	r0, [pc, #84]	; (1a006548 <parseRS232CommandLine+0x244>)
1a0064f2:	f7fe fc73 	bl	1a004ddc <pushByteToTransmission>
			pushByteToTransmission(&uart, i & 0xFF);	// 4th byte to send (time stamp low byte)
1a0064f6:	687b      	ldr	r3, [r7, #4]
1a0064f8:	b2db      	uxtb	r3, r3
1a0064fa:	4619      	mov	r1, r3
1a0064fc:	4812      	ldr	r0, [pc, #72]	; (1a006548 <parseRS232CommandLine+0x244>)
1a0064fe:	f7fe fc6d 	bl	1a004ddc <pushByteToTransmission>
			pushByteToTransmission(&uart, (i >> 24) & 0xFF);	// 3rd byte to send (time stamp high byte)
1a006502:	687b      	ldr	r3, [r7, #4]
1a006504:	0e1b      	lsrs	r3, r3, #24
1a006506:	b2db      	uxtb	r3, r3
1a006508:	4619      	mov	r1, r3
1a00650a:	480f      	ldr	r0, [pc, #60]	; (1a006548 <parseRS232CommandLine+0x244>)
1a00650c:	f7fe fc66 	bl	1a004ddc <pushByteToTransmission>
			pushByteToTransmission(&uart, (i >> 16) & 0xFF);	// 4th byte to send (time stamp high byte)
1a006510:	687b      	ldr	r3, [r7, #4]
1a006512:	141b      	asrs	r3, r3, #16
1a006514:	b2db      	uxtb	r3, r3
1a006516:	4619      	mov	r1, r3
1a006518:	480b      	ldr	r0, [pc, #44]	; (1a006548 <parseRS232CommandLine+0x244>)
1a00651a:	f7fe fc5f 	bl	1a004ddc <pushByteToTransmission>
		//
		break;
	}
	case 'W':
	case 'w':
		for (int i = 0; i < 20000000; ++i) {
1a00651e:	687b      	ldr	r3, [r7, #4]
1a006520:	3301      	adds	r3, #1
1a006522:	607b      	str	r3, [r7, #4]
1a006524:	687b      	ldr	r3, [r7, #4]
1a006526:	4a09      	ldr	r2, [pc, #36]	; (1a00654c <parseRS232CommandLine+0x248>)
1a006528:	4293      	cmp	r3, r2
1a00652a:	ddc6      	ble.n	1a0064ba <parseRS232CommandLine+0x1b6>
			pushByteToTransmission(&uart, i & 0xFF);	// 4th byte to send (time stamp low byte)
			pushByteToTransmission(&uart, (i >> 24) & 0xFF);	// 3rd byte to send (time stamp high byte)
			pushByteToTransmission(&uart, (i >> 16) & 0xFF);	// 4th byte to send (time stamp high byte)

		}
		break;
1a00652c:	e004      	b.n	1a006538 <parseRS232CommandLine+0x234>

	default:
		xputs("?\n");
1a00652e:	4808      	ldr	r0, [pc, #32]	; (1a006550 <parseRS232CommandLine+0x24c>)
1a006530:	f000 fa18 	bl	1a006964 <xputs>
	}
	return;
1a006534:	e000      	b.n	1a006538 <parseRS232CommandLine+0x234>
		break;

	case 'S':
	case 's': {
		//
		break;
1a006536:	bf00      	nop
		break;

	default:
		xputs("?\n");
	}
	return;
1a006538:	bf00      	nop
}
1a00653a:	3708      	adds	r7, #8
1a00653c:	46bd      	mov	sp, r7
1a00653e:	bd80      	pop	{r7, pc}
1a006540:	10087874 	.word	0x10087874
1a006544:	40081000 	.word	0x40081000
1a006548:	10000000 	.word	0x10000000
1a00654c:	01312cff 	.word	0x01312cff
1a006550:	1a019d0c 	.word	0x1a019d0c

1a006554 <UART0ParseNewChar>:

// *****************************************************************************
// * ** RS232ParseNewChar ** */
// *****************************************************************************
void UART0ParseNewChar(unsigned char newChar) {
1a006554:	b580      	push	{r7, lr}
1a006556:	b082      	sub	sp, #8
1a006558:	af00      	add	r7, sp, #0
1a00655a:	4603      	mov	r3, r0
1a00655c:	71fb      	strb	r3, [r7, #7]

	if (freeSpaceForReception(&uart) < 16) {
1a00655e:	483d      	ldr	r0, [pc, #244]	; (1a006654 <UART0ParseNewChar+0x100>)
1a006560:	f7fe fc5a 	bl	1a004e18 <freeSpaceForReception>
1a006564:	4603      	mov	r3, r0
1a006566:	2b0f      	cmp	r3, #15
1a006568:	d805      	bhi.n	1a006576 <UART0ParseNewChar+0x22>
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT, RTS0_GPIO_PORT,
1a00656a:	220a      	movs	r2, #10
1a00656c:	2100      	movs	r1, #0
1a00656e:	483a      	ldr	r0, [pc, #232]	; (1a006658 <UART0ParseNewChar+0x104>)
1a006570:	f7fe faa2 	bl	1a004ab8 <Chip_GPIO_SetPinOutHigh>
1a006574:	e004      	b.n	1a006580 <UART0ParseNewChar+0x2c>
		RTS0_GPIO_PIN); //Signal busy to the DTE
	} else {
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT, RTS0_GPIO_PORT,
1a006576:	220a      	movs	r2, #10
1a006578:	2100      	movs	r1, #0
1a00657a:	4837      	ldr	r0, [pc, #220]	; (1a006658 <UART0ParseNewChar+0x104>)
1a00657c:	f7fe fab6 	bl	1a004aec <Chip_GPIO_SetPinOutLow>
		RTS0_GPIO_PIN); //Signal ready to the DTE
	}

	switch (newChar) {
1a006580:	79fb      	ldrb	r3, [r7, #7]
1a006582:	2b0a      	cmp	r3, #10
1a006584:	d01a      	beq.n	1a0065bc <UART0ParseNewChar+0x68>
1a006586:	2b0d      	cmp	r3, #13
1a006588:	d018      	beq.n	1a0065bc <UART0ParseNewChar+0x68>
1a00658a:	2b08      	cmp	r3, #8
1a00658c:	d130      	bne.n	1a0065f0 <UART0ParseNewChar+0x9c>
	case 8:			// backspace
		if (commandLinePointer > 0) {
1a00658e:	4b33      	ldr	r3, [pc, #204]	; (1a00665c <UART0ParseNewChar+0x108>)
1a006590:	681b      	ldr	r3, [r3, #0]
1a006592:	2b00      	cmp	r3, #0
1a006594:	d055      	beq.n	1a006642 <UART0ParseNewChar+0xee>
			commandLinePointer--;
1a006596:	4b31      	ldr	r3, [pc, #196]	; (1a00665c <UART0ParseNewChar+0x108>)
1a006598:	681b      	ldr	r3, [r3, #0]
1a00659a:	3b01      	subs	r3, #1
1a00659c:	4a2f      	ldr	r2, [pc, #188]	; (1a00665c <UART0ParseNewChar+0x108>)
1a00659e:	6013      	str	r3, [r2, #0]
			if ((eDVSProcessingMode == 0) && (enableUARTecho)) {
1a0065a0:	4b2f      	ldr	r3, [pc, #188]	; (1a006660 <UART0ParseNewChar+0x10c>)
1a0065a2:	681b      	ldr	r3, [r3, #0]
1a0065a4:	2b00      	cmp	r3, #0
1a0065a6:	d14c      	bne.n	1a006642 <UART0ParseNewChar+0xee>
1a0065a8:	4b2e      	ldr	r3, [pc, #184]	; (1a006664 <UART0ParseNewChar+0x110>)
1a0065aa:	681b      	ldr	r3, [r3, #0]
1a0065ac:	2b00      	cmp	r3, #0
1a0065ae:	d048      	beq.n	1a006642 <UART0ParseNewChar+0xee>
				xprintf("%c %c", 8, 8);
1a0065b0:	2208      	movs	r2, #8
1a0065b2:	2108      	movs	r1, #8
1a0065b4:	482c      	ldr	r0, [pc, #176]	; (1a006668 <UART0ParseNewChar+0x114>)
1a0065b6:	f000 fb65 	bl	1a006c84 <xprintf>
			}
		}
		break;
1a0065ba:	e042      	b.n	1a006642 <UART0ParseNewChar+0xee>

	case 10:
	case 13:
		if ((eDVSProcessingMode == 0) && (enableUARTecho)) {
1a0065bc:	4b28      	ldr	r3, [pc, #160]	; (1a006660 <UART0ParseNewChar+0x10c>)
1a0065be:	681b      	ldr	r3, [r3, #0]
1a0065c0:	2b00      	cmp	r3, #0
1a0065c2:	d106      	bne.n	1a0065d2 <UART0ParseNewChar+0x7e>
1a0065c4:	4b27      	ldr	r3, [pc, #156]	; (1a006664 <UART0ParseNewChar+0x110>)
1a0065c6:	681b      	ldr	r3, [r3, #0]
1a0065c8:	2b00      	cmp	r3, #0
1a0065ca:	d002      	beq.n	1a0065d2 <UART0ParseNewChar+0x7e>
			UARTReturn();
1a0065cc:	200a      	movs	r0, #10
1a0065ce:	f000 f9a7 	bl	1a006920 <xputc>
		}
		if (commandLinePointer > 0) {
1a0065d2:	4b22      	ldr	r3, [pc, #136]	; (1a00665c <UART0ParseNewChar+0x108>)
1a0065d4:	681b      	ldr	r3, [r3, #0]
1a0065d6:	2b00      	cmp	r3, #0
1a0065d8:	d035      	beq.n	1a006646 <UART0ParseNewChar+0xf2>
			commandLine[commandLinePointer] = 0;
1a0065da:	4b20      	ldr	r3, [pc, #128]	; (1a00665c <UART0ParseNewChar+0x108>)
1a0065dc:	681b      	ldr	r3, [r3, #0]
1a0065de:	4a23      	ldr	r2, [pc, #140]	; (1a00666c <UART0ParseNewChar+0x118>)
1a0065e0:	2100      	movs	r1, #0
1a0065e2:	54d1      	strb	r1, [r2, r3]
			parseRS232CommandLine();
1a0065e4:	f7ff fe8e 	bl	1a006304 <parseRS232CommandLine>
			commandLinePointer = 0;
1a0065e8:	4b1c      	ldr	r3, [pc, #112]	; (1a00665c <UART0ParseNewChar+0x108>)
1a0065ea:	2200      	movs	r2, #0
1a0065ec:	601a      	str	r2, [r3, #0]
		}
		break;
1a0065ee:	e02a      	b.n	1a006646 <UART0ParseNewChar+0xf2>

	default:
		if (newChar & 0x80) {
1a0065f0:	79fb      	ldrb	r3, [r7, #7]
1a0065f2:	b25b      	sxtb	r3, r3
1a0065f4:	2b00      	cmp	r3, #0
1a0065f6:	db28      	blt.n	1a00664a <UART0ParseNewChar+0xf6>
			return; //only accept ASCII
		}
		if (commandLinePointer < UART_COMMAND_LINE_MAX_LENGTH - 1) {
1a0065f8:	4b18      	ldr	r3, [pc, #96]	; (1a00665c <UART0ParseNewChar+0x108>)
1a0065fa:	681b      	ldr	r3, [r3, #0]
1a0065fc:	2b7e      	cmp	r3, #126	; 0x7e
1a0065fe:	d814      	bhi.n	1a00662a <UART0ParseNewChar+0xd6>
			if ((eDVSProcessingMode == 0) && (enableUARTecho)) {
1a006600:	4b17      	ldr	r3, [pc, #92]	; (1a006660 <UART0ParseNewChar+0x10c>)
1a006602:	681b      	ldr	r3, [r3, #0]
1a006604:	2b00      	cmp	r3, #0
1a006606:	d107      	bne.n	1a006618 <UART0ParseNewChar+0xc4>
1a006608:	4b16      	ldr	r3, [pc, #88]	; (1a006664 <UART0ParseNewChar+0x110>)
1a00660a:	681b      	ldr	r3, [r3, #0]
1a00660c:	2b00      	cmp	r3, #0
1a00660e:	d003      	beq.n	1a006618 <UART0ParseNewChar+0xc4>
				xputc(newChar);	  		   	// echo to indicate char arrived
1a006610:	79fb      	ldrb	r3, [r7, #7]
1a006612:	4618      	mov	r0, r3
1a006614:	f000 f984 	bl	1a006920 <xputc>
			}
			commandLine[commandLinePointer++] = newChar;
1a006618:	4b10      	ldr	r3, [pc, #64]	; (1a00665c <UART0ParseNewChar+0x108>)
1a00661a:	681b      	ldr	r3, [r3, #0]
1a00661c:	1c5a      	adds	r2, r3, #1
1a00661e:	490f      	ldr	r1, [pc, #60]	; (1a00665c <UART0ParseNewChar+0x108>)
1a006620:	600a      	str	r2, [r1, #0]
1a006622:	4912      	ldr	r1, [pc, #72]	; (1a00666c <UART0ParseNewChar+0x118>)
1a006624:	79fa      	ldrb	r2, [r7, #7]
1a006626:	54ca      	strb	r2, [r1, r3]
1a006628:	e010      	b.n	1a00664c <UART0ParseNewChar+0xf8>
		} else {
			commandLinePointer = 0;
1a00662a:	4b0c      	ldr	r3, [pc, #48]	; (1a00665c <UART0ParseNewChar+0x108>)
1a00662c:	2200      	movs	r2, #0
1a00662e:	601a      	str	r2, [r3, #0]
			commandLine[commandLinePointer++] = newChar;
1a006630:	4b0a      	ldr	r3, [pc, #40]	; (1a00665c <UART0ParseNewChar+0x108>)
1a006632:	681b      	ldr	r3, [r3, #0]
1a006634:	1c5a      	adds	r2, r3, #1
1a006636:	4909      	ldr	r1, [pc, #36]	; (1a00665c <UART0ParseNewChar+0x108>)
1a006638:	600a      	str	r2, [r1, #0]
1a00663a:	490c      	ldr	r1, [pc, #48]	; (1a00666c <UART0ParseNewChar+0x118>)
1a00663c:	79fa      	ldrb	r2, [r7, #7]
1a00663e:	54ca      	strb	r2, [r1, r3]
1a006640:	e004      	b.n	1a00664c <UART0ParseNewChar+0xf8>
			commandLinePointer--;
			if ((eDVSProcessingMode == 0) && (enableUARTecho)) {
				xprintf("%c %c", 8, 8);
			}
		}
		break;
1a006642:	bf00      	nop
1a006644:	e002      	b.n	1a00664c <UART0ParseNewChar+0xf8>
		if (commandLinePointer > 0) {
			commandLine[commandLinePointer] = 0;
			parseRS232CommandLine();
			commandLinePointer = 0;
		}
		break;
1a006646:	bf00      	nop
1a006648:	e000      	b.n	1a00664c <UART0ParseNewChar+0xf8>

	default:
		if (newChar & 0x80) {
			return; //only accept ASCII
1a00664a:	bf00      	nop
			commandLinePointer = 0;
			commandLine[commandLinePointer++] = newChar;
		}
	}  // end of switch

}  // end of rs232ParseNewChar
1a00664c:	3708      	adds	r7, #8
1a00664e:	46bd      	mov	sp, r7
1a006650:	bd80      	pop	{r7, pc}
1a006652:	bf00      	nop
1a006654:	10000000 	.word	0x10000000
1a006658:	400f4000 	.word	0x400f4000
1a00665c:	100878f4 	.word	0x100878f4
1a006660:	1008743c 	.word	0x1008743c
1a006664:	10087870 	.word	0x10087870
1a006668:	1a019d10 	.word	0x1a019d10
1a00666c:	10087874 	.word	0x10087874

1a006670 <Chip_RIT_GetCounter>:
 * @brief	Returns the current RIT Counter value
 * @param	pRITimer	: RITimer peripheral selected
 * @return	the current timer counter value
 */
STATIC INLINE uint32_t Chip_RIT_GetCounter(LPC_RITIMER_T *pRITimer)
{
1a006670:	b480      	push	{r7}
1a006672:	b083      	sub	sp, #12
1a006674:	af00      	add	r7, sp, #0
1a006676:	6078      	str	r0, [r7, #4]
	return pRITimer->COUNTER;
1a006678:	687b      	ldr	r3, [r7, #4]
1a00667a:	68db      	ldr	r3, [r3, #12]
}
1a00667c:	4618      	mov	r0, r3
1a00667e:	370c      	adds	r7, #12
1a006680:	46bd      	mov	sp, r7
1a006682:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006686:	4770      	bx	lr

1a006688 <timerDelayUs>:
#include "utils.h"
#include "uart.h"
#include "cr_start_m0.h"
#include "build_defs.h"

void timerDelayUs(uint32_t timeUs) {
1a006688:	b580      	push	{r7, lr}
1a00668a:	b084      	sub	sp, #16
1a00668c:	af00      	add	r7, sp, #0
1a00668e:	6078      	str	r0, [r7, #4]
	/* In an RTOS, the thread would sleep allowing other threads to run.
	 For standalone operation, we just spin on RI timer */
	int32_t curr = (int32_t) Chip_RIT_GetCounter(LPC_RITIMER);
1a006690:	4818      	ldr	r0, [pc, #96]	; (1a0066f4 <timerDelayUs+0x6c>)
1a006692:	f7ff ffed 	bl	1a006670 <Chip_RIT_GetCounter>
1a006696:	4603      	mov	r3, r0
1a006698:	60fb      	str	r3, [r7, #12]
	int32_t final = curr + ((SystemCoreClock / 1000000) * timeUs);
1a00669a:	4b17      	ldr	r3, [pc, #92]	; (1a0066f8 <timerDelayUs+0x70>)
1a00669c:	681b      	ldr	r3, [r3, #0]
1a00669e:	4a17      	ldr	r2, [pc, #92]	; (1a0066fc <timerDelayUs+0x74>)
1a0066a0:	fba2 2303 	umull	r2, r3, r2, r3
1a0066a4:	0c9b      	lsrs	r3, r3, #18
1a0066a6:	687a      	ldr	r2, [r7, #4]
1a0066a8:	fb02 f203 	mul.w	r2, r2, r3
1a0066ac:	68fb      	ldr	r3, [r7, #12]
1a0066ae:	4413      	add	r3, r2
1a0066b0:	60bb      	str	r3, [r7, #8]

	if (final == curr)
1a0066b2:	68ba      	ldr	r2, [r7, #8]
1a0066b4:	68fb      	ldr	r3, [r7, #12]
1a0066b6:	429a      	cmp	r2, r3
1a0066b8:	d018      	beq.n	1a0066ec <timerDelayUs+0x64>
		return;

	if ((final < 0) && (curr > 0)) {
1a0066ba:	68bb      	ldr	r3, [r7, #8]
1a0066bc:	2b00      	cmp	r3, #0
1a0066be:	da0b      	bge.n	1a0066d8 <timerDelayUs+0x50>
1a0066c0:	68fb      	ldr	r3, [r7, #12]
1a0066c2:	2b00      	cmp	r3, #0
1a0066c4:	dd08      	ble.n	1a0066d8 <timerDelayUs+0x50>
		while (Chip_RIT_GetCounter(LPC_RITIMER) < (uint32_t) final) {
1a0066c6:	bf00      	nop
1a0066c8:	480a      	ldr	r0, [pc, #40]	; (1a0066f4 <timerDelayUs+0x6c>)
1a0066ca:	f7ff ffd1 	bl	1a006670 <Chip_RIT_GetCounter>
1a0066ce:	4602      	mov	r2, r0
1a0066d0:	68bb      	ldr	r3, [r7, #8]
1a0066d2:	429a      	cmp	r2, r3
1a0066d4:	d3f8      	bcc.n	1a0066c8 <timerDelayUs+0x40>
	int32_t final = curr + ((SystemCoreClock / 1000000) * timeUs);

	if (final == curr)
		return;

	if ((final < 0) && (curr > 0)) {
1a0066d6:	e00a      	b.n	1a0066ee <timerDelayUs+0x66>
		while (Chip_RIT_GetCounter(LPC_RITIMER) < (uint32_t) final) {
		}
	} else {
		while ((int32_t) Chip_RIT_GetCounter(LPC_RITIMER) < final) {
1a0066d8:	bf00      	nop
1a0066da:	4806      	ldr	r0, [pc, #24]	; (1a0066f4 <timerDelayUs+0x6c>)
1a0066dc:	f7ff ffc8 	bl	1a006670 <Chip_RIT_GetCounter>
1a0066e0:	4603      	mov	r3, r0
1a0066e2:	461a      	mov	r2, r3
1a0066e4:	68bb      	ldr	r3, [r7, #8]
1a0066e6:	429a      	cmp	r2, r3
1a0066e8:	dbf7      	blt.n	1a0066da <timerDelayUs+0x52>
1a0066ea:	e000      	b.n	1a0066ee <timerDelayUs+0x66>
	 For standalone operation, we just spin on RI timer */
	int32_t curr = (int32_t) Chip_RIT_GetCounter(LPC_RITIMER);
	int32_t final = curr + ((SystemCoreClock / 1000000) * timeUs);

	if (final == curr)
		return;
1a0066ec:	bf00      	nop
		}
	} else {
		while ((int32_t) Chip_RIT_GetCounter(LPC_RITIMER) < final) {
		}
	}
}
1a0066ee:	3710      	adds	r7, #16
1a0066f0:	46bd      	mov	sp, r7
1a0066f2:	bd80      	pop	{r7, pc}
1a0066f4:	400c0000 	.word	0x400c0000
1a0066f8:	100880f8 	.word	0x100880f8
1a0066fc:	431bde83 	.word	0x431bde83

1a006700 <timerDelayMs>:
void timerDelayMs(uint32_t timems) {
1a006700:	b580      	push	{r7, lr}
1a006702:	b084      	sub	sp, #16
1a006704:	af00      	add	r7, sp, #0
1a006706:	6078      	str	r0, [r7, #4]
	/* In an RTOS, the thread would sleep allowing other threads to run.
	 For standalone operation, we just spin on RI timer */
	int32_t curr = (int32_t) Chip_RIT_GetCounter(LPC_RITIMER);
1a006708:	4819      	ldr	r0, [pc, #100]	; (1a006770 <timerDelayMs+0x70>)
1a00670a:	f7ff ffb1 	bl	1a006670 <Chip_RIT_GetCounter>
1a00670e:	4603      	mov	r3, r0
1a006710:	60fb      	str	r3, [r7, #12]
	int32_t final = curr + ((SystemCoreClock / 1000) * timems);
1a006712:	4b18      	ldr	r3, [pc, #96]	; (1a006774 <timerDelayMs+0x74>)
1a006714:	681b      	ldr	r3, [r3, #0]
1a006716:	4a18      	ldr	r2, [pc, #96]	; (1a006778 <timerDelayMs+0x78>)
1a006718:	fba2 2303 	umull	r2, r3, r2, r3
1a00671c:	099b      	lsrs	r3, r3, #6
1a00671e:	687a      	ldr	r2, [r7, #4]
1a006720:	fb02 f203 	mul.w	r2, r2, r3
1a006724:	68fb      	ldr	r3, [r7, #12]
1a006726:	4413      	add	r3, r2
1a006728:	60bb      	str	r3, [r7, #8]

	if (final == curr)
1a00672a:	68ba      	ldr	r2, [r7, #8]
1a00672c:	68fb      	ldr	r3, [r7, #12]
1a00672e:	429a      	cmp	r2, r3
1a006730:	d019      	beq.n	1a006766 <timerDelayMs+0x66>
		return;

	if ((final < 0) && (curr > 0)) {
1a006732:	68bb      	ldr	r3, [r7, #8]
1a006734:	2b00      	cmp	r3, #0
1a006736:	da0b      	bge.n	1a006750 <timerDelayMs+0x50>
1a006738:	68fb      	ldr	r3, [r7, #12]
1a00673a:	2b00      	cmp	r3, #0
1a00673c:	dd08      	ble.n	1a006750 <timerDelayMs+0x50>
		while (Chip_RIT_GetCounter(LPC_RITIMER) < (uint32_t) final) {
1a00673e:	bf00      	nop
1a006740:	480b      	ldr	r0, [pc, #44]	; (1a006770 <timerDelayMs+0x70>)
1a006742:	f7ff ff95 	bl	1a006670 <Chip_RIT_GetCounter>
1a006746:	4602      	mov	r2, r0
1a006748:	68bb      	ldr	r3, [r7, #8]
1a00674a:	429a      	cmp	r2, r3
1a00674c:	d3f8      	bcc.n	1a006740 <timerDelayMs+0x40>
	int32_t final = curr + ((SystemCoreClock / 1000) * timems);

	if (final == curr)
		return;

	if ((final < 0) && (curr > 0)) {
1a00674e:	e008      	b.n	1a006762 <timerDelayMs+0x62>
		while (Chip_RIT_GetCounter(LPC_RITIMER) < (uint32_t) final) {
		}
	} else {
		while ((int32_t) Chip_RIT_GetCounter(LPC_RITIMER) < final) {
1a006750:	bf00      	nop
1a006752:	4807      	ldr	r0, [pc, #28]	; (1a006770 <timerDelayMs+0x70>)
1a006754:	f7ff ff8c 	bl	1a006670 <Chip_RIT_GetCounter>
1a006758:	4603      	mov	r3, r0
1a00675a:	461a      	mov	r2, r3
1a00675c:	68bb      	ldr	r3, [r7, #8]
1a00675e:	429a      	cmp	r2, r3
1a006760:	dbf7      	blt.n	1a006752 <timerDelayMs+0x52>
		}
	}

	return;
1a006762:	bf00      	nop
1a006764:	e000      	b.n	1a006768 <timerDelayMs+0x68>
	 For standalone operation, we just spin on RI timer */
	int32_t curr = (int32_t) Chip_RIT_GetCounter(LPC_RITIMER);
	int32_t final = curr + ((SystemCoreClock / 1000) * timems);

	if (final == curr)
		return;
1a006766:	bf00      	nop
		while ((int32_t) Chip_RIT_GetCounter(LPC_RITIMER) < final) {
		}
	}

	return;
}
1a006768:	3710      	adds	r7, #16
1a00676a:	46bd      	mov	sp, r7
1a00676c:	bd80      	pop	{r7, pc}
1a00676e:	bf00      	nop
1a006770:	400c0000 	.word	0x400c0000
1a006774:	100880f8 	.word	0x100880f8
1a006778:	10624dd3 	.word	0x10624dd3

1a00677c <getTimerMs>:

void getTimerMs(uint32_t * ms) {
1a00677c:	b480      	push	{r7}
1a00677e:	b083      	sub	sp, #12
1a006780:	af00      	add	r7, sp, #0
1a006782:	6078      	str	r0, [r7, #4]
	*ms = LPC_TIMER1->TC / 1000; //1Mhz /1000 =  1 ms
1a006784:	4b06      	ldr	r3, [pc, #24]	; (1a0067a0 <getTimerMs+0x24>)
1a006786:	689b      	ldr	r3, [r3, #8]
1a006788:	4a06      	ldr	r2, [pc, #24]	; (1a0067a4 <getTimerMs+0x28>)
1a00678a:	fba2 2303 	umull	r2, r3, r2, r3
1a00678e:	099a      	lsrs	r2, r3, #6
1a006790:	687b      	ldr	r3, [r7, #4]
1a006792:	601a      	str	r2, [r3, #0]
}
1a006794:	bf00      	nop
1a006796:	370c      	adds	r7, #12
1a006798:	46bd      	mov	sp, r7
1a00679a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00679e:	4770      	bx	lr
1a0067a0:	40085000 	.word	0x40085000
1a0067a4:	10624dd3 	.word	0x10624dd3

1a0067a8 <resetDevice>:

void resetDevice() {
1a0067a8:	b580      	push	{r7, lr}
1a0067aa:	af00      	add	r7, sp, #0
	/**
	 * Using the Reset generation unit, activate the signal that the reset button does
	 * which means the consequences of physical and software reset should be the same.
	 */
	Chip_RGU_TriggerReset(RGU_CORE_RST);
1a0067ac:	2000      	movs	r0, #0
1a0067ae:	f00c fc51 	bl	1a013054 <Chip_RGU_TriggerReset>
	Chip_RGU_ClearReset(RGU_CORE_RST);
1a0067b2:	2000      	movs	r0, #0
1a0067b4:	f00c fc6e 	bl	1a013094 <Chip_RGU_ClearReset>
}
1a0067b8:	bf00      	nop
1a0067ba:	bd80      	pop	{r7, pc}

1a0067bc <enterReprogrammingMode>:
#define REPROGRAMMING_UART_BAUD		115200
/* Internal oscillator frequency */
#define CGU_IRC_FREQ 				(12000000)
#define ISP_CLOCK_FREQ 				(96000000)

void enterReprogrammingMode() {
1a0067bc:	b580      	push	{r7, lr}
1a0067be:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1a0067c0:	b672      	cpsid	i
	//Disable interrupts
	__disable_irq();
	//Stop the M0 core
	haltSlave();
1a0067c2:	f7fa fca5 	bl	1a001110 <haltSlave>

	LPC_RGU->RESET_CTRL0 = 0x10DF1200;
1a0067c6:	4b10      	ldr	r3, [pc, #64]	; (1a006808 <enterReprogrammingMode+0x4c>)
1a0067c8:	4a10      	ldr	r2, [pc, #64]	; (1a00680c <enterReprogrammingMode+0x50>)
1a0067ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	// GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
	// USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST|SCU_RST

	LPC_RGU->RESET_CTRL1 = 0x01DFF7FF;
1a0067ce:	4b0e      	ldr	r3, [pc, #56]	; (1a006808 <enterReprogrammingMode+0x4c>)
1a0067d0:	4a0f      	ldr	r2, [pc, #60]	; (1a006810 <enterReprogrammingMode+0x54>)
1a0067d2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// I2C1_RST|I2C0_RST|UART3_RST|UART1_RST|UART1_RST|UART0_RST|
	// DAC_RST|ADC1_RST|ADC0_RST|QEI_RST|MOTOCONPWM_RST|SCT_RST|
	// RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

	/* Switch UART clock to IRC */
	Chip_Clock_SetBaseClock(CLK_BASE_UART0, CLKIN_IRC, true, false);
1a0067d6:	2300      	movs	r3, #0
1a0067d8:	2201      	movs	r2, #1
1a0067da:	2101      	movs	r1, #1
1a0067dc:	2010      	movs	r0, #16
1a0067de:	f00b fdbb 	bl	1a012358 <Chip_Clock_SetBaseClock>
	/* Setup PLL for ISP clock */
	Chip_Clock_SetupMainPLLHz(CLKIN_IRC, CGU_IRC_FREQ, ISP_CLOCK_FREQ, ISP_CLOCK_FREQ);
1a0067e2:	4b0c      	ldr	r3, [pc, #48]	; (1a006814 <enterReprogrammingMode+0x58>)
1a0067e4:	4a0b      	ldr	r2, [pc, #44]	; (1a006814 <enterReprogrammingMode+0x58>)
1a0067e6:	490c      	ldr	r1, [pc, #48]	; (1a006818 <enterReprogrammingMode+0x5c>)
1a0067e8:	2001      	movs	r0, #1
1a0067ea:	f00b fb45 	bl	1a011e78 <Chip_Clock_SetupMainPLLHz>
	Chip_UART_DeInit(LPC_USART0);
1a0067ee:	480b      	ldr	r0, [pc, #44]	; (1a00681c <enterReprogrammingMode+0x60>)
1a0067f0:	f00c ff0a 	bl	1a013608 <Chip_UART_DeInit>
	//Make sure UART0 is configured correctly
	UARTInit(LPC_USART0, REPROGRAMMING_UART_BAUD);
1a0067f4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0067f8:	4808      	ldr	r0, [pc, #32]	; (1a00681c <enterReprogrammingMode+0x60>)
1a0067fa:	f7fe fb85 	bl	1a004f08 <UARTInit>
	Chip_IAP_ReinvokeISP();
1a0067fe:	f00c fbaf 	bl	1a012f60 <Chip_IAP_ReinvokeISP>
}
1a006802:	bf00      	nop
1a006804:	bd80      	pop	{r7, pc}
1a006806:	bf00      	nop
1a006808:	40053000 	.word	0x40053000
1a00680c:	10df1200 	.word	0x10df1200
1a006810:	01dff7ff 	.word	0x01dff7ff
1a006814:	05b8d800 	.word	0x05b8d800
1a006818:	00b71b00 	.word	0x00b71b00
1a00681c:	40081000 	.word	0x40081000

1a006820 <disablePeripherals>:

void disablePeripherals() {
1a006820:	b580      	push	{r7, lr}
1a006822:	af00      	add	r7, sp, #0
	 * The order is relevant.
	 * The peripherals' clocks is disabled first, then the base clocks and
	 * finally the PLLs.
	 * Inversion of this order may lead to lockup.
	 */
	Chip_Clock_Disable(CLK_APB3_CAN0);
1a006824:	2005      	movs	r0, #5
1a006826:	f00b feaf 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_APB1_I2S);
1a00682a:	2023      	movs	r0, #35	; 0x23
1a00682c:	f00b feac 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_APB1_CAN1);
1a006830:	2024      	movs	r0, #36	; 0x24
1a006832:	f00b fea9 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_SPIFI);
1a006836:	2061      	movs	r0, #97	; 0x61
1a006838:	f00b fea6 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_LCD);
1a00683c:	2063      	movs	r0, #99	; 0x63
1a00683e:	f00b fea3 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_ETHERNET);
1a006842:	2064      	movs	r0, #100	; 0x64
1a006844:	f00b fea0 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_USB0);
1a006848:	2065      	movs	r0, #101	; 0x65
1a00684a:	f00b fe9d 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_EMC);
1a00684e:	2066      	movs	r0, #102	; 0x66
1a006850:	f00b fe9a 	bl	1a012588 <Chip_Clock_Disable>
#if !USE_SDCARD
	Chip_Clock_Disable(CLK_MX_SDIO);
1a006854:	2067      	movs	r0, #103	; 0x67
1a006856:	f00b fe97 	bl	1a012588 <Chip_Clock_Disable>
#endif
	Chip_Clock_Disable(CLK_MX_DMA);
1a00685a:	2068      	movs	r0, #104	; 0x68
1a00685c:	f00b fe94 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_SCT);
1a006860:	206d      	movs	r0, #109	; 0x6d
1a006862:	f00b fe91 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_USB1);
1a006866:	206e      	movs	r0, #110	; 0x6e
1a006868:	f00b fe8e 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_EMC_DIV);
1a00686c:	206f      	movs	r0, #111	; 0x6f
1a00686e:	f00b fe8b 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_FLASHB);
1a006872:	2071      	movs	r0, #113	; 0x71
1a006874:	f00b fe88 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_ADCHS);
1a006878:	2073      	movs	r0, #115	; 0x73
1a00687a:	f00b fe85 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_EEPROM);
1a00687e:	2074      	movs	r0, #116	; 0x74
1a006880:	f00b fe82 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_WWDT);
1a006884:	2080      	movs	r0, #128	; 0x80
1a006886:	f00b fe7f 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_SSP0);
1a00688a:	2083      	movs	r0, #131	; 0x83
1a00688c:	f00b fe7c 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_TIMER0);
1a006890:	2084      	movs	r0, #132	; 0x84
1a006892:	f00b fe79 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_UART2);
1a006896:	20a1      	movs	r0, #161	; 0xa1
1a006898:	f00b fe76 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_UART3);
1a00689c:	20a2      	movs	r0, #162	; 0xa2
1a00689e:	f00b fe73 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_TIMER2);
1a0068a2:	20a3      	movs	r0, #163	; 0xa3
1a0068a4:	f00b fe70 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_TIMER3);
1a0068a8:	20a4      	movs	r0, #164	; 0xa4
1a0068aa:	f00b fe6d 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_SSP1);
1a0068ae:	20a5      	movs	r0, #165	; 0xa5
1a0068b0:	f00b fe6a 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_MX_QEI);
1a0068b4:	20a6      	movs	r0, #166	; 0xa6
1a0068b6:	f00b fe67 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_Disable(CLK_PERIPH_SGPIO);
1a0068ba:	20c3      	movs	r0, #195	; 0xc3
1a0068bc:	f00b fe64 	bl	1a012588 <Chip_Clock_Disable>
	Chip_Clock_DisableBaseClock(CLK_BASE_USB0);
1a0068c0:	2001      	movs	r0, #1
1a0068c2:	f00b fd97 	bl	1a0123f4 <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_USB1);
1a0068c6:	2003      	movs	r0, #3
1a0068c8:	f00b fd94 	bl	1a0123f4 <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_SPIFI);
1a0068cc:	2005      	movs	r0, #5
1a0068ce:	f00b fd91 	bl	1a0123f4 <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_PHY_RX);
1a0068d2:	2007      	movs	r0, #7
1a0068d4:	f00b fd8e 	bl	1a0123f4 <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_LCD);
1a0068d8:	200b      	movs	r0, #11
1a0068da:	f00b fd8b 	bl	1a0123f4 <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_ADCHS);
1a0068de:	200c      	movs	r0, #12
1a0068e0:	f00b fd88 	bl	1a0123f4 <Chip_Clock_DisableBaseClock>
#if !USE_SDCARD
	Chip_Clock_DisableBaseClock(CLK_BASE_SDIO);
1a0068e4:	200d      	movs	r0, #13
1a0068e6:	f00b fd85 	bl	1a0123f4 <Chip_Clock_DisableBaseClock>
#endif
	Chip_Clock_DisableBaseClock(CLK_BASE_UART2);
1a0068ea:	2012      	movs	r0, #18
1a0068ec:	f00b fd82 	bl	1a0123f4 <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_UART3);
1a0068f0:	2013      	movs	r0, #19
1a0068f2:	f00b fd7f 	bl	1a0123f4 <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_OUT);
1a0068f6:	2014      	movs	r0, #20
1a0068f8:	f00b fd7c 	bl	1a0123f4 <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_APLL);
1a0068fc:	2019      	movs	r0, #25
1a0068fe:	f00b fd79 	bl	1a0123f4 <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_CGU_OUT0);
1a006902:	201a      	movs	r0, #26
1a006904:	f00b fd76 	bl	1a0123f4 <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisableBaseClock(CLK_BASE_CGU_OUT1);
1a006908:	201b      	movs	r0, #27
1a00690a:	f00b fd73 	bl	1a0123f4 <Chip_Clock_DisableBaseClock>
	Chip_Clock_DisablePLL(CGU_USB_PLL);
1a00690e:	2000      	movs	r0, #0
1a006910:	f00b feae 	bl	1a012670 <Chip_Clock_DisablePLL>
	Chip_Clock_DisablePLL(CGU_AUDIO_PLL);
1a006914:	2001      	movs	r0, #1
1a006916:	f00b feab 	bl	1a012670 <Chip_Clock_DisablePLL>
}
1a00691a:	bf00      	nop
1a00691c:	bd80      	pop	{r7, pc}
1a00691e:	bf00      	nop

1a006920 <xputc>:

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc(char c) {
1a006920:	b580      	push	{r7, lr}
1a006922:	b082      	sub	sp, #8
1a006924:	af00      	add	r7, sp, #0
1a006926:	4603      	mov	r3, r0
1a006928:	71fb      	strb	r3, [r7, #7]
	if (outptr) {
1a00692a:	4b0c      	ldr	r3, [pc, #48]	; (1a00695c <xputc+0x3c>)
1a00692c:	681b      	ldr	r3, [r3, #0]
1a00692e:	2b00      	cmp	r3, #0
1a006930:	d007      	beq.n	1a006942 <xputc+0x22>
		*outptr++ = (unsigned char) c;
1a006932:	4b0a      	ldr	r3, [pc, #40]	; (1a00695c <xputc+0x3c>)
1a006934:	681b      	ldr	r3, [r3, #0]
1a006936:	1c5a      	adds	r2, r3, #1
1a006938:	4908      	ldr	r1, [pc, #32]	; (1a00695c <xputc+0x3c>)
1a00693a:	600a      	str	r2, [r1, #0]
1a00693c:	79fa      	ldrb	r2, [r7, #7]
1a00693e:	701a      	strb	r2, [r3, #0]
		return;
1a006940:	e008      	b.n	1a006954 <xputc+0x34>
	}

	if (xfunc_out)
1a006942:	4b07      	ldr	r3, [pc, #28]	; (1a006960 <xputc+0x40>)
1a006944:	681b      	ldr	r3, [r3, #0]
1a006946:	2b00      	cmp	r3, #0
1a006948:	d004      	beq.n	1a006954 <xputc+0x34>
		xfunc_out((unsigned char) c);
1a00694a:	4b05      	ldr	r3, [pc, #20]	; (1a006960 <xputc+0x40>)
1a00694c:	681b      	ldr	r3, [r3, #0]
1a00694e:	79fa      	ldrb	r2, [r7, #7]
1a006950:	4610      	mov	r0, r2
1a006952:	4798      	blx	r3
}
1a006954:	3708      	adds	r7, #8
1a006956:	46bd      	mov	sp, r7
1a006958:	bd80      	pop	{r7, pc}
1a00695a:	bf00      	nop
1a00695c:	1008658c 	.word	0x1008658c
1a006960:	100878f8 	.word	0x100878f8

1a006964 <xputs>:
/* Put a null-terminated string                 */
/*----------------------------------------------*/

void xputs( /* Put a string to the default device */
const char* str /* Pointer to the string */
) {
1a006964:	b580      	push	{r7, lr}
1a006966:	b082      	sub	sp, #8
1a006968:	af00      	add	r7, sp, #0
1a00696a:	6078      	str	r0, [r7, #4]
	while (*str)
1a00696c:	e006      	b.n	1a00697c <xputs+0x18>
		xputc(*str++);
1a00696e:	687b      	ldr	r3, [r7, #4]
1a006970:	1c5a      	adds	r2, r3, #1
1a006972:	607a      	str	r2, [r7, #4]
1a006974:	781b      	ldrb	r3, [r3, #0]
1a006976:	4618      	mov	r0, r3
1a006978:	f7ff ffd2 	bl	1a006920 <xputc>
/*----------------------------------------------*/

void xputs( /* Put a string to the default device */
const char* str /* Pointer to the string */
) {
	while (*str)
1a00697c:	687b      	ldr	r3, [r7, #4]
1a00697e:	781b      	ldrb	r3, [r3, #0]
1a006980:	2b00      	cmp	r3, #0
1a006982:	d1f4      	bne.n	1a00696e <xputs+0xa>
		xputc(*str++);
}
1a006984:	bf00      	nop
1a006986:	3708      	adds	r7, #8
1a006988:	46bd      	mov	sp, r7
1a00698a:	bd80      	pop	{r7, pc}

1a00698c <xvprintf>:
 */

static
void xvprintf(const char* fmt, /* Pointer to the format string */
va_list arp /* Pointer to arguments */
) {
1a00698c:	b580      	push	{r7, lr}
1a00698e:	b08e      	sub	sp, #56	; 0x38
1a006990:	af00      	add	r7, sp, #0
1a006992:	6078      	str	r0, [r7, #4]
1a006994:	6039      	str	r1, [r7, #0]
	unsigned int r, i, j, w, f;
	unsigned long v;
	char s[16], c, d, *p;

	for (;;) {
		c = *fmt++; /* Get a char */
1a006996:	687b      	ldr	r3, [r7, #4]
1a006998:	1c5a      	adds	r2, r3, #1
1a00699a:	607a      	str	r2, [r7, #4]
1a00699c:	781b      	ldrb	r3, [r3, #0]
1a00699e:	77fb      	strb	r3, [r7, #31]
		if (!c)
1a0069a0:	7ffb      	ldrb	r3, [r7, #31]
1a0069a2:	2b00      	cmp	r3, #0
1a0069a4:	f000 8167 	beq.w	1a006c76 <xvprintf+0x2ea>
			break; /* End of format? */
		if (c != '%') { /* Pass through it if not a % sequense */
1a0069a8:	7ffb      	ldrb	r3, [r7, #31]
1a0069aa:	2b25      	cmp	r3, #37	; 0x25
1a0069ac:	d004      	beq.n	1a0069b8 <xvprintf+0x2c>
			xputc(c);
1a0069ae:	7ffb      	ldrb	r3, [r7, #31]
1a0069b0:	4618      	mov	r0, r3
1a0069b2:	f7ff ffb5 	bl	1a006920 <xputc>
			continue;
1a0069b6:	e15d      	b.n	1a006c74 <xvprintf+0x2e8>
		}
		f = 0;
1a0069b8:	2300      	movs	r3, #0
1a0069ba:	627b      	str	r3, [r7, #36]	; 0x24
		c = *fmt++; /* Get first char of the sequense */
1a0069bc:	687b      	ldr	r3, [r7, #4]
1a0069be:	1c5a      	adds	r2, r3, #1
1a0069c0:	607a      	str	r2, [r7, #4]
1a0069c2:	781b      	ldrb	r3, [r3, #0]
1a0069c4:	77fb      	strb	r3, [r7, #31]
		if (c == '0') { /* Flag: '0' padded */
1a0069c6:	7ffb      	ldrb	r3, [r7, #31]
1a0069c8:	2b30      	cmp	r3, #48	; 0x30
1a0069ca:	d107      	bne.n	1a0069dc <xvprintf+0x50>
			f = 1;
1a0069cc:	2301      	movs	r3, #1
1a0069ce:	627b      	str	r3, [r7, #36]	; 0x24
			c = *fmt++;
1a0069d0:	687b      	ldr	r3, [r7, #4]
1a0069d2:	1c5a      	adds	r2, r3, #1
1a0069d4:	607a      	str	r2, [r7, #4]
1a0069d6:	781b      	ldrb	r3, [r3, #0]
1a0069d8:	77fb      	strb	r3, [r7, #31]
1a0069da:	e009      	b.n	1a0069f0 <xvprintf+0x64>
		} else {
			if (c == '-') { /* Flag: left justified */
1a0069dc:	7ffb      	ldrb	r3, [r7, #31]
1a0069de:	2b2d      	cmp	r3, #45	; 0x2d
1a0069e0:	d106      	bne.n	1a0069f0 <xvprintf+0x64>
				f = 2;
1a0069e2:	2302      	movs	r3, #2
1a0069e4:	627b      	str	r3, [r7, #36]	; 0x24
				c = *fmt++;
1a0069e6:	687b      	ldr	r3, [r7, #4]
1a0069e8:	1c5a      	adds	r2, r3, #1
1a0069ea:	607a      	str	r2, [r7, #4]
1a0069ec:	781b      	ldrb	r3, [r3, #0]
1a0069ee:	77fb      	strb	r3, [r7, #31]
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++) /* Minimum width */
1a0069f0:	2300      	movs	r3, #0
1a0069f2:	62bb      	str	r3, [r7, #40]	; 0x28
1a0069f4:	e00e      	b.n	1a006a14 <xvprintf+0x88>
			w = w * 10 + c - '0';
1a0069f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a0069f8:	4613      	mov	r3, r2
1a0069fa:	009b      	lsls	r3, r3, #2
1a0069fc:	4413      	add	r3, r2
1a0069fe:	005b      	lsls	r3, r3, #1
1a006a00:	461a      	mov	r2, r3
1a006a02:	7ffb      	ldrb	r3, [r7, #31]
1a006a04:	4413      	add	r3, r2
1a006a06:	3b30      	subs	r3, #48	; 0x30
1a006a08:	62bb      	str	r3, [r7, #40]	; 0x28
			if (c == '-') { /* Flag: left justified */
				f = 2;
				c = *fmt++;
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++) /* Minimum width */
1a006a0a:	687b      	ldr	r3, [r7, #4]
1a006a0c:	1c5a      	adds	r2, r3, #1
1a006a0e:	607a      	str	r2, [r7, #4]
1a006a10:	781b      	ldrb	r3, [r3, #0]
1a006a12:	77fb      	strb	r3, [r7, #31]
1a006a14:	7ffb      	ldrb	r3, [r7, #31]
1a006a16:	2b2f      	cmp	r3, #47	; 0x2f
1a006a18:	d902      	bls.n	1a006a20 <xvprintf+0x94>
1a006a1a:	7ffb      	ldrb	r3, [r7, #31]
1a006a1c:	2b39      	cmp	r3, #57	; 0x39
1a006a1e:	d9ea      	bls.n	1a0069f6 <xvprintf+0x6a>
			w = w * 10 + c - '0';
		if (c == 'l' || c == 'L') { /* Prefix: Size is long int */
1a006a20:	7ffb      	ldrb	r3, [r7, #31]
1a006a22:	2b6c      	cmp	r3, #108	; 0x6c
1a006a24:	d002      	beq.n	1a006a2c <xvprintf+0xa0>
1a006a26:	7ffb      	ldrb	r3, [r7, #31]
1a006a28:	2b4c      	cmp	r3, #76	; 0x4c
1a006a2a:	d108      	bne.n	1a006a3e <xvprintf+0xb2>
			f |= 4;
1a006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a006a2e:	f043 0304 	orr.w	r3, r3, #4
1a006a32:	627b      	str	r3, [r7, #36]	; 0x24
			c = *fmt++;
1a006a34:	687b      	ldr	r3, [r7, #4]
1a006a36:	1c5a      	adds	r2, r3, #1
1a006a38:	607a      	str	r2, [r7, #4]
1a006a3a:	781b      	ldrb	r3, [r3, #0]
1a006a3c:	77fb      	strb	r3, [r7, #31]
		}
		if (!c)
1a006a3e:	7ffb      	ldrb	r3, [r7, #31]
1a006a40:	2b00      	cmp	r3, #0
1a006a42:	f000 811a 	beq.w	1a006c7a <xvprintf+0x2ee>
			break; /* End of format? */
		d = c;
1a006a46:	7ffb      	ldrb	r3, [r7, #31]
1a006a48:	77bb      	strb	r3, [r7, #30]
		if (d >= 'a')
1a006a4a:	7fbb      	ldrb	r3, [r7, #30]
1a006a4c:	2b60      	cmp	r3, #96	; 0x60
1a006a4e:	d902      	bls.n	1a006a56 <xvprintf+0xca>
			d -= 0x20;
1a006a50:	7fbb      	ldrb	r3, [r7, #30]
1a006a52:	3b20      	subs	r3, #32
1a006a54:	77bb      	strb	r3, [r7, #30]
		switch (d) { /* Type is... */
1a006a56:	7fbb      	ldrb	r3, [r7, #30]
1a006a58:	3b42      	subs	r3, #66	; 0x42
1a006a5a:	2b16      	cmp	r3, #22
1a006a5c:	d873      	bhi.n	1a006b46 <xvprintf+0x1ba>
1a006a5e:	a201      	add	r2, pc, #4	; (adr r2, 1a006a64 <xvprintf+0xd8>)
1a006a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a006a64:	1a006b2f 	.word	0x1a006b2f
1a006a68:	1a006b1d 	.word	0x1a006b1d
1a006a6c:	1a006b3b 	.word	0x1a006b3b
1a006a70:	1a006b47 	.word	0x1a006b47
1a006a74:	1a006b47 	.word	0x1a006b47
1a006a78:	1a006b47 	.word	0x1a006b47
1a006a7c:	1a006b47 	.word	0x1a006b47
1a006a80:	1a006b47 	.word	0x1a006b47
1a006a84:	1a006b47 	.word	0x1a006b47
1a006a88:	1a006b47 	.word	0x1a006b47
1a006a8c:	1a006b47 	.word	0x1a006b47
1a006a90:	1a006b47 	.word	0x1a006b47
1a006a94:	1a006b47 	.word	0x1a006b47
1a006a98:	1a006b35 	.word	0x1a006b35
1a006a9c:	1a006b47 	.word	0x1a006b47
1a006aa0:	1a006b47 	.word	0x1a006b47
1a006aa4:	1a006b47 	.word	0x1a006b47
1a006aa8:	1a006ac1 	.word	0x1a006ac1
1a006aac:	1a006b47 	.word	0x1a006b47
1a006ab0:	1a006b3b 	.word	0x1a006b3b
1a006ab4:	1a006b47 	.word	0x1a006b47
1a006ab8:	1a006b47 	.word	0x1a006b47
1a006abc:	1a006b41 	.word	0x1a006b41
		case 'S': /* String */
			p = va_arg(arp, char*);
1a006ac0:	683b      	ldr	r3, [r7, #0]
1a006ac2:	1d1a      	adds	r2, r3, #4
1a006ac4:	603a      	str	r2, [r7, #0]
1a006ac6:	681b      	ldr	r3, [r3, #0]
1a006ac8:	61bb      	str	r3, [r7, #24]
			for (j = 0; p[j]; j++)
1a006aca:	2300      	movs	r3, #0
1a006acc:	62fb      	str	r3, [r7, #44]	; 0x2c
1a006ace:	e002      	b.n	1a006ad6 <xvprintf+0x14a>
1a006ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a006ad2:	3301      	adds	r3, #1
1a006ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
1a006ad6:	69ba      	ldr	r2, [r7, #24]
1a006ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a006ada:	4413      	add	r3, r2
1a006adc:	781b      	ldrb	r3, [r3, #0]
1a006ade:	2b00      	cmp	r3, #0
1a006ae0:	d1f6      	bne.n	1a006ad0 <xvprintf+0x144>
				;
			while (!(f & 2) && j++ < w)
1a006ae2:	e002      	b.n	1a006aea <xvprintf+0x15e>
				xputc(' ');
1a006ae4:	2020      	movs	r0, #32
1a006ae6:	f7ff ff1b 	bl	1a006920 <xputc>
		switch (d) { /* Type is... */
		case 'S': /* String */
			p = va_arg(arp, char*);
			for (j = 0; p[j]; j++)
				;
			while (!(f & 2) && j++ < w)
1a006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a006aec:	f003 0302 	and.w	r3, r3, #2
1a006af0:	2b00      	cmp	r3, #0
1a006af2:	d105      	bne.n	1a006b00 <xvprintf+0x174>
1a006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a006af6:	1c5a      	adds	r2, r3, #1
1a006af8:	62fa      	str	r2, [r7, #44]	; 0x2c
1a006afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a006afc:	4293      	cmp	r3, r2
1a006afe:	d3f1      	bcc.n	1a006ae4 <xvprintf+0x158>
				xputc(' ');
			xputs(p);
1a006b00:	69b8      	ldr	r0, [r7, #24]
1a006b02:	f7ff ff2f 	bl	1a006964 <xputs>
			while (j++ < w)
1a006b06:	e002      	b.n	1a006b0e <xvprintf+0x182>
				xputc(' ');
1a006b08:	2020      	movs	r0, #32
1a006b0a:	f7ff ff09 	bl	1a006920 <xputc>
			for (j = 0; p[j]; j++)
				;
			while (!(f & 2) && j++ < w)
				xputc(' ');
			xputs(p);
			while (j++ < w)
1a006b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a006b10:	1c5a      	adds	r2, r3, #1
1a006b12:	62fa      	str	r2, [r7, #44]	; 0x2c
1a006b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a006b16:	4293      	cmp	r3, r2
1a006b18:	d3f6      	bcc.n	1a006b08 <xvprintf+0x17c>
				xputc(' ');
			continue;
1a006b1a:	e0ab      	b.n	1a006c74 <xvprintf+0x2e8>
		case 'C': /* Character */
			xputc((char) va_arg(arp, int));
1a006b1c:	683b      	ldr	r3, [r7, #0]
1a006b1e:	1d1a      	adds	r2, r3, #4
1a006b20:	603a      	str	r2, [r7, #0]
1a006b22:	681b      	ldr	r3, [r3, #0]
1a006b24:	b2db      	uxtb	r3, r3
1a006b26:	4618      	mov	r0, r3
1a006b28:	f7ff fefa 	bl	1a006920 <xputc>
			continue;
1a006b2c:	e0a2      	b.n	1a006c74 <xvprintf+0x2e8>
		case 'B': /* Binary */
			r = 2;
1a006b2e:	2302      	movs	r3, #2
1a006b30:	637b      	str	r3, [r7, #52]	; 0x34
			break;
1a006b32:	e00d      	b.n	1a006b50 <xvprintf+0x1c4>
		case 'O': /* Octal */
			r = 8;
1a006b34:	2308      	movs	r3, #8
1a006b36:	637b      	str	r3, [r7, #52]	; 0x34
			break;
1a006b38:	e00a      	b.n	1a006b50 <xvprintf+0x1c4>
		case 'D': /* Signed decimal */
		case 'U': /* Unsigned decimal */
			r = 10;
1a006b3a:	230a      	movs	r3, #10
1a006b3c:	637b      	str	r3, [r7, #52]	; 0x34
			break;
1a006b3e:	e007      	b.n	1a006b50 <xvprintf+0x1c4>
		case 'X': /* Hexdecimal */
			r = 16;
1a006b40:	2310      	movs	r3, #16
1a006b42:	637b      	str	r3, [r7, #52]	; 0x34
			break;
1a006b44:	e004      	b.n	1a006b50 <xvprintf+0x1c4>
		default: /* Unknown type (passthrough) */
			xputc(c);
1a006b46:	7ffb      	ldrb	r3, [r7, #31]
1a006b48:	4618      	mov	r0, r3
1a006b4a:	f7ff fee9 	bl	1a006920 <xputc>
			continue;
1a006b4e:	e091      	b.n	1a006c74 <xvprintf+0x2e8>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long) va_arg(arp, int) : (long) va_arg(arp, unsigned int));
1a006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a006b52:	f003 0304 	and.w	r3, r3, #4
1a006b56:	2b00      	cmp	r3, #0
1a006b58:	d004      	beq.n	1a006b64 <xvprintf+0x1d8>
1a006b5a:	683b      	ldr	r3, [r7, #0]
1a006b5c:	1d1a      	adds	r2, r3, #4
1a006b5e:	603a      	str	r2, [r7, #0]
1a006b60:	681b      	ldr	r3, [r3, #0]
1a006b62:	e00b      	b.n	1a006b7c <xvprintf+0x1f0>
1a006b64:	7fbb      	ldrb	r3, [r7, #30]
1a006b66:	2b44      	cmp	r3, #68	; 0x44
1a006b68:	d104      	bne.n	1a006b74 <xvprintf+0x1e8>
1a006b6a:	683b      	ldr	r3, [r7, #0]
1a006b6c:	1d1a      	adds	r2, r3, #4
1a006b6e:	603a      	str	r2, [r7, #0]
1a006b70:	681b      	ldr	r3, [r3, #0]
1a006b72:	e003      	b.n	1a006b7c <xvprintf+0x1f0>
1a006b74:	683b      	ldr	r3, [r7, #0]
1a006b76:	1d1a      	adds	r2, r3, #4
1a006b78:	603a      	str	r2, [r7, #0]
1a006b7a:	681b      	ldr	r3, [r3, #0]
1a006b7c:	623b      	str	r3, [r7, #32]
		if (d == 'D' && (v & 0x80000000)) {
1a006b7e:	7fbb      	ldrb	r3, [r7, #30]
1a006b80:	2b44      	cmp	r3, #68	; 0x44
1a006b82:	d109      	bne.n	1a006b98 <xvprintf+0x20c>
1a006b84:	6a3b      	ldr	r3, [r7, #32]
1a006b86:	2b00      	cmp	r3, #0
1a006b88:	da06      	bge.n	1a006b98 <xvprintf+0x20c>
			v = 0 - v;
1a006b8a:	6a3b      	ldr	r3, [r7, #32]
1a006b8c:	425b      	negs	r3, r3
1a006b8e:	623b      	str	r3, [r7, #32]
			f |= 8;
1a006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a006b92:	f043 0308 	orr.w	r3, r3, #8
1a006b96:	627b      	str	r3, [r7, #36]	; 0x24
		}
		i = 0;
1a006b98:	2300      	movs	r3, #0
1a006b9a:	633b      	str	r3, [r7, #48]	; 0x30
		do {
			d = (char) (v % r);
1a006b9c:	6a3b      	ldr	r3, [r7, #32]
1a006b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1a006ba0:	fbb3 f2f2 	udiv	r2, r3, r2
1a006ba4:	6b79      	ldr	r1, [r7, #52]	; 0x34
1a006ba6:	fb01 f202 	mul.w	r2, r1, r2
1a006baa:	1a9b      	subs	r3, r3, r2
1a006bac:	77bb      	strb	r3, [r7, #30]
			v /= r;
1a006bae:	6a3a      	ldr	r2, [r7, #32]
1a006bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a006bb2:	fbb2 f3f3 	udiv	r3, r2, r3
1a006bb6:	623b      	str	r3, [r7, #32]
			if (d > 9)
1a006bb8:	7fbb      	ldrb	r3, [r7, #30]
1a006bba:	2b09      	cmp	r3, #9
1a006bbc:	d908      	bls.n	1a006bd0 <xvprintf+0x244>
				d += (c == 'x') ? 0x27 : 0x07;
1a006bbe:	7ffb      	ldrb	r3, [r7, #31]
1a006bc0:	2b78      	cmp	r3, #120	; 0x78
1a006bc2:	d101      	bne.n	1a006bc8 <xvprintf+0x23c>
1a006bc4:	2227      	movs	r2, #39	; 0x27
1a006bc6:	e000      	b.n	1a006bca <xvprintf+0x23e>
1a006bc8:	2207      	movs	r2, #7
1a006bca:	7fbb      	ldrb	r3, [r7, #30]
1a006bcc:	4413      	add	r3, r2
1a006bce:	77bb      	strb	r3, [r7, #30]
			s[i++] = d + '0';
1a006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a006bd2:	1c5a      	adds	r2, r3, #1
1a006bd4:	633a      	str	r2, [r7, #48]	; 0x30
1a006bd6:	7fba      	ldrb	r2, [r7, #30]
1a006bd8:	3230      	adds	r2, #48	; 0x30
1a006bda:	b2d2      	uxtb	r2, r2
1a006bdc:	f107 0138 	add.w	r1, r7, #56	; 0x38
1a006be0:	440b      	add	r3, r1
1a006be2:	f803 2c30 	strb.w	r2, [r3, #-48]
		} while (v && i < sizeof(s));
1a006be6:	6a3b      	ldr	r3, [r7, #32]
1a006be8:	2b00      	cmp	r3, #0
1a006bea:	d002      	beq.n	1a006bf2 <xvprintf+0x266>
1a006bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a006bee:	2b0f      	cmp	r3, #15
1a006bf0:	d9d4      	bls.n	1a006b9c <xvprintf+0x210>
		if (f & 8)
1a006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a006bf4:	f003 0308 	and.w	r3, r3, #8
1a006bf8:	2b00      	cmp	r3, #0
1a006bfa:	d008      	beq.n	1a006c0e <xvprintf+0x282>
			s[i++] = '-';
1a006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a006bfe:	1c5a      	adds	r2, r3, #1
1a006c00:	633a      	str	r2, [r7, #48]	; 0x30
1a006c02:	f107 0238 	add.w	r2, r7, #56	; 0x38
1a006c06:	4413      	add	r3, r2
1a006c08:	222d      	movs	r2, #45	; 0x2d
1a006c0a:	f803 2c30 	strb.w	r2, [r3, #-48]
		j = i;
1a006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a006c10:	62fb      	str	r3, [r7, #44]	; 0x2c
		d = (f & 1) ? '0' : ' ';
1a006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a006c14:	f003 0301 	and.w	r3, r3, #1
1a006c18:	2b00      	cmp	r3, #0
1a006c1a:	d001      	beq.n	1a006c20 <xvprintf+0x294>
1a006c1c:	2330      	movs	r3, #48	; 0x30
1a006c1e:	e000      	b.n	1a006c22 <xvprintf+0x296>
1a006c20:	2320      	movs	r3, #32
1a006c22:	77bb      	strb	r3, [r7, #30]
		while (!(f & 2) && j++ < w)
1a006c24:	e003      	b.n	1a006c2e <xvprintf+0x2a2>
			xputc(d);
1a006c26:	7fbb      	ldrb	r3, [r7, #30]
1a006c28:	4618      	mov	r0, r3
1a006c2a:	f7ff fe79 	bl	1a006920 <xputc>
		} while (v && i < sizeof(s));
		if (f & 8)
			s[i++] = '-';
		j = i;
		d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w)
1a006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a006c30:	f003 0302 	and.w	r3, r3, #2
1a006c34:	2b00      	cmp	r3, #0
1a006c36:	d105      	bne.n	1a006c44 <xvprintf+0x2b8>
1a006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a006c3a:	1c5a      	adds	r2, r3, #1
1a006c3c:	62fa      	str	r2, [r7, #44]	; 0x2c
1a006c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a006c40:	4293      	cmp	r3, r2
1a006c42:	d3f0      	bcc.n	1a006c26 <xvprintf+0x29a>
			xputc(d);
		do
			xputc(s[--i]);
1a006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a006c46:	3b01      	subs	r3, #1
1a006c48:	633b      	str	r3, [r7, #48]	; 0x30
1a006c4a:	f107 0208 	add.w	r2, r7, #8
1a006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a006c50:	4413      	add	r3, r2
1a006c52:	781b      	ldrb	r3, [r3, #0]
1a006c54:	4618      	mov	r0, r3
1a006c56:	f7ff fe63 	bl	1a006920 <xputc>
		while (i);
1a006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a006c5c:	2b00      	cmp	r3, #0
1a006c5e:	d1f1      	bne.n	1a006c44 <xvprintf+0x2b8>
		while (j++ < w)
1a006c60:	e002      	b.n	1a006c68 <xvprintf+0x2dc>
			xputc(' ');
1a006c62:	2020      	movs	r0, #32
1a006c64:	f7ff fe5c 	bl	1a006920 <xputc>
		while (!(f & 2) && j++ < w)
			xputc(d);
		do
			xputc(s[--i]);
		while (i);
		while (j++ < w)
1a006c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a006c6a:	1c5a      	adds	r2, r3, #1
1a006c6c:	62fa      	str	r2, [r7, #44]	; 0x2c
1a006c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a006c70:	4293      	cmp	r3, r2
1a006c72:	d3f6      	bcc.n	1a006c62 <xvprintf+0x2d6>
			xputc(' ');
	}
1a006c74:	e68f      	b.n	1a006996 <xvprintf+0xa>
	char s[16], c, d, *p;

	for (;;) {
		c = *fmt++; /* Get a char */
		if (!c)
			break; /* End of format? */
1a006c76:	bf00      	nop
1a006c78:	e000      	b.n	1a006c7c <xvprintf+0x2f0>
		if (c == 'l' || c == 'L') { /* Prefix: Size is long int */
			f |= 4;
			c = *fmt++;
		}
		if (!c)
			break; /* End of format? */
1a006c7a:	bf00      	nop
			xputc(s[--i]);
		while (i);
		while (j++ < w)
			xputc(' ');
	}
}
1a006c7c:	bf00      	nop
1a006c7e:	3738      	adds	r7, #56	; 0x38
1a006c80:	46bd      	mov	sp, r7
1a006c82:	bd80      	pop	{r7, pc}

1a006c84 <xprintf>:

void xprintf( /* Put a formatted string to the default device */
const char* fmt, /* Pointer to the format string */
... /* Optional arguments */
) {
1a006c84:	b40f      	push	{r0, r1, r2, r3}
1a006c86:	b580      	push	{r7, lr}
1a006c88:	b082      	sub	sp, #8
1a006c8a:	af00      	add	r7, sp, #0
	va_list arp;

	va_start(arp, fmt);
1a006c8c:	f107 0314 	add.w	r3, r7, #20
1a006c90:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
1a006c92:	6879      	ldr	r1, [r7, #4]
1a006c94:	6938      	ldr	r0, [r7, #16]
1a006c96:	f7ff fe79 	bl	1a00698c <xvprintf>
	va_end(arp);
}
1a006c9a:	bf00      	nop
1a006c9c:	3708      	adds	r7, #8
1a006c9e:	46bd      	mov	sp, r7
1a006ca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
1a006ca4:	b004      	add	sp, #16
1a006ca6:	4770      	bx	lr

1a006ca8 <inv_db_load_func>:
}
#endif

/** This function receives the data that was stored in non-volatile memory between power off */
static inv_error_t inv_db_load_func(const unsigned char *data)
{
1a006ca8:	b580      	push	{r7, lr}
1a006caa:	b082      	sub	sp, #8
1a006cac:	af00      	add	r7, sp, #0
1a006cae:	6078      	str	r0, [r7, #4]
    memcpy(&inv_data_builder.save, data, sizeof(inv_data_builder.save));
1a006cb0:	2248      	movs	r2, #72	; 0x48
1a006cb2:	6879      	ldr	r1, [r7, #4]
1a006cb4:	480f      	ldr	r0, [pc, #60]	; (1a006cf4 <inv_db_load_func+0x4c>)
1a006cb6:	f00d ff95 	bl	1a014be4 <memcpy>
    // copy in the saved accuracy in the actual sensors accuracy
    sensors.gyro.accuracy = inv_data_builder.save.gyro_accuracy;
1a006cba:	4b0f      	ldr	r3, [pc, #60]	; (1a006cf8 <inv_db_load_func+0x50>)
1a006cbc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
1a006cc0:	4a0e      	ldr	r2, [pc, #56]	; (1a006cfc <inv_db_load_func+0x54>)
1a006cc2:	6353      	str	r3, [r2, #52]	; 0x34
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
1a006cc4:	4b0c      	ldr	r3, [pc, #48]	; (1a006cf8 <inv_db_load_func+0x50>)
1a006cc6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
1a006cca:	4a0c      	ldr	r2, [pc, #48]	; (1a006cfc <inv_db_load_func+0x54>)
1a006ccc:	6793      	str	r3, [r2, #120]	; 0x78
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
1a006cce:	4b0a      	ldr	r3, [pc, #40]	; (1a006cf8 <inv_db_load_func+0x50>)
1a006cd0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
1a006cd4:	4a09      	ldr	r2, [pc, #36]	; (1a006cfc <inv_db_load_func+0x54>)
1a006cd6:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
    // TODO
    if (sensors.compass.accuracy == 3) {
1a006cda:	4b08      	ldr	r3, [pc, #32]	; (1a006cfc <inv_db_load_func+0x54>)
1a006cdc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
1a006ce0:	2b03      	cmp	r3, #3
1a006ce2:	d102      	bne.n	1a006cea <inv_db_load_func+0x42>
        inv_set_compass_bias_found(1);
1a006ce4:	2001      	movs	r0, #1
1a006ce6:	f002 f947 	bl	1a008f78 <inv_set_compass_bias_found>
    }
    return INV_SUCCESS;
1a006cea:	2300      	movs	r3, #0
}
1a006cec:	4618      	mov	r0, r3
1a006cee:	3708      	adds	r7, #8
1a006cf0:	46bd      	mov	sp, r7
1a006cf2:	bd80      	pop	{r7, pc}
1a006cf4:	10086684 	.word	0x10086684
1a006cf8:	10086590 	.word	0x10086590
1a006cfc:	100866d0 	.word	0x100866d0

1a006d00 <inv_db_save_func>:

/** This function returns the data to be stored in non-volatile memory between power off */
static inv_error_t inv_db_save_func(unsigned char *data)
{
1a006d00:	b580      	push	{r7, lr}
1a006d02:	b082      	sub	sp, #8
1a006d04:	af00      	add	r7, sp, #0
1a006d06:	6078      	str	r0, [r7, #4]
    memcpy(data, &inv_data_builder.save, sizeof(inv_data_builder.save));
1a006d08:	2248      	movs	r2, #72	; 0x48
1a006d0a:	4904      	ldr	r1, [pc, #16]	; (1a006d1c <inv_db_save_func+0x1c>)
1a006d0c:	6878      	ldr	r0, [r7, #4]
1a006d0e:	f00d ff69 	bl	1a014be4 <memcpy>
    return INV_SUCCESS;
1a006d12:	2300      	movs	r3, #0
}
1a006d14:	4618      	mov	r0, r3
1a006d16:	3708      	adds	r7, #8
1a006d18:	46bd      	mov	sp, r7
1a006d1a:	bd80      	pop	{r7, pc}
1a006d1c:	10086684 	.word	0x10086684

1a006d20 <inv_init_data_builder>:

/** Initialize the data builder
*/
inv_error_t inv_init_data_builder(void)
{
1a006d20:	b580      	push	{r7, lr}
1a006d22:	af00      	add	r7, sp, #0
    /* TODO: Hardcode temperature scale/offset here. */
    memset(&inv_data_builder, 0, sizeof(inv_data_builder));
1a006d24:	f44f 72a0 	mov.w	r2, #320	; 0x140
1a006d28:	2100      	movs	r1, #0
1a006d2a:	480a      	ldr	r0, [pc, #40]	; (1a006d54 <inv_init_data_builder+0x34>)
1a006d2c:	f00e f858 	bl	1a014de0 <memset>
    memset(&sensors, 0, sizeof(sensors));
1a006d30:	f44f 72cc 	mov.w	r2, #408	; 0x198
1a006d34:	2100      	movs	r1, #0
1a006d36:	4808      	ldr	r0, [pc, #32]	; (1a006d58 <inv_init_data_builder+0x38>)
1a006d38:	f00e f852 	bl	1a014de0 <memset>

    // disable the soft iron transform process
    inv_reset_compass_soft_iron_matrix();
1a006d3c:	f000 fed0 	bl	1a007ae0 <inv_reset_compass_soft_iron_matrix>

    return inv_register_load_store(inv_db_load_func, inv_db_save_func,
1a006d40:	f24d 0393 	movw	r3, #53395	; 0xd093
1a006d44:	2248      	movs	r2, #72	; 0x48
1a006d46:	4905      	ldr	r1, [pc, #20]	; (1a006d5c <inv_init_data_builder+0x3c>)
1a006d48:	4805      	ldr	r0, [pc, #20]	; (1a006d60 <inv_init_data_builder+0x40>)
1a006d4a:	f002 fa2b 	bl	1a0091a4 <inv_register_load_store>
1a006d4e:	4603      	mov	r3, r0
                                   sizeof(inv_data_builder.save),
                                   INV_DB_SAVE_KEY);
}
1a006d50:	4618      	mov	r0, r3
1a006d52:	bd80      	pop	{r7, pc}
1a006d54:	10086590 	.word	0x10086590
1a006d58:	100866d0 	.word	0x100866d0
1a006d5c:	1a006d01 	.word	0x1a006d01
1a006d60:	1a006ca9 	.word	0x1a006ca9

1a006d64 <set_sensor_orientation_and_scale>:
* @param[in] sensitivity A Scale factor to convert from hardware units to
*            standard units (dps, uT, g).
*/
void set_sensor_orientation_and_scale(struct inv_single_sensor_t *sensor,
                                 int orientation, long sensitivity)
{
1a006d64:	b480      	push	{r7}
1a006d66:	b085      	sub	sp, #20
1a006d68:	af00      	add	r7, sp, #0
1a006d6a:	60f8      	str	r0, [r7, #12]
1a006d6c:	60b9      	str	r1, [r7, #8]
1a006d6e:	607a      	str	r2, [r7, #4]
    sensor->sensitivity = sensitivity;
1a006d70:	68fb      	ldr	r3, [r7, #12]
1a006d72:	687a      	ldr	r2, [r7, #4]
1a006d74:	625a      	str	r2, [r3, #36]	; 0x24
    sensor->orientation = orientation;
1a006d76:	68fb      	ldr	r3, [r7, #12]
1a006d78:	68ba      	ldr	r2, [r7, #8]
1a006d7a:	601a      	str	r2, [r3, #0]
}
1a006d7c:	bf00      	nop
1a006d7e:	3714      	adds	r7, #20
1a006d80:	46bd      	mov	sp, r7
1a006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006d86:	4770      	bx	lr

1a006d88 <inv_set_gyro_orientation_and_scale>:
* @param[in] sensitivity A scale factor to convert device units to degrees per second scaled by 2^16
*            such that degrees_per_second  = device_units * sensitivity / 2^30. Typically
*            it works out to be the maximum rate * 2^15.
*/
void inv_set_gyro_orientation_and_scale(int orientation, long sensitivity)
{
1a006d88:	b580      	push	{r7, lr}
1a006d8a:	b082      	sub	sp, #8
1a006d8c:	af00      	add	r7, sp, #0
1a006d8e:	6078      	str	r0, [r7, #4]
1a006d90:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.gyro, orientation,
1a006d92:	683a      	ldr	r2, [r7, #0]
1a006d94:	6879      	ldr	r1, [r7, #4]
1a006d96:	4803      	ldr	r0, [pc, #12]	; (1a006da4 <inv_set_gyro_orientation_and_scale+0x1c>)
1a006d98:	f7ff ffe4 	bl	1a006d64 <set_sensor_orientation_and_scale>
                                     sensitivity);
}
1a006d9c:	bf00      	nop
1a006d9e:	3708      	adds	r7, #8
1a006da0:	46bd      	mov	sp, r7
1a006da2:	bd80      	pop	{r7, pc}
1a006da4:	100866d0 	.word	0x100866d0

1a006da8 <inv_set_gyro_sample_rate>:

/** Set Gyro Sample rate in micro seconds.
* @param[in] sample_rate_us Set Gyro Sample rate in us
*/
void inv_set_gyro_sample_rate(long sample_rate_us)
{
1a006da8:	b480      	push	{r7}
1a006daa:	b083      	sub	sp, #12
1a006dac:	af00      	add	r7, sp, #0
1a006dae:	6078      	str	r0, [r7, #4]
        int type = PLAYBACK_DBG_TYPE_G_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
1a006db0:	4a0d      	ldr	r2, [pc, #52]	; (1a006de8 <inv_set_gyro_sample_rate+0x40>)
1a006db2:	687b      	ldr	r3, [r7, #4]
1a006db4:	6293      	str	r3, [r2, #40]	; 0x28
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
1a006db6:	687b      	ldr	r3, [r7, #4]
1a006db8:	4a0c      	ldr	r2, [pc, #48]	; (1a006dec <inv_set_gyro_sample_rate+0x44>)
1a006dba:	fb82 1203 	smull	r1, r2, r2, r3
1a006dbe:	1192      	asrs	r2, r2, #6
1a006dc0:	17db      	asrs	r3, r3, #31
1a006dc2:	1ad3      	subs	r3, r2, r3
1a006dc4:	4a08      	ldr	r2, [pc, #32]	; (1a006de8 <inv_set_gyro_sample_rate+0x40>)
1a006dc6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (sensors.gyro.bandwidth == 0) {
1a006dc8:	4b07      	ldr	r3, [pc, #28]	; (1a006de8 <inv_set_gyro_sample_rate+0x40>)
1a006dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a006dcc:	2b00      	cmp	r3, #0
1a006dce:	d105      	bne.n	1a006ddc <inv_set_gyro_sample_rate+0x34>
        sensors.gyro.bandwidth = (int)(1000000L / sample_rate_us);
1a006dd0:	4a07      	ldr	r2, [pc, #28]	; (1a006df0 <inv_set_gyro_sample_rate+0x48>)
1a006dd2:	687b      	ldr	r3, [r7, #4]
1a006dd4:	fb92 f3f3 	sdiv	r3, r2, r3
1a006dd8:	4a03      	ldr	r2, [pc, #12]	; (1a006de8 <inv_set_gyro_sample_rate+0x40>)
1a006dda:	6413      	str	r3, [r2, #64]	; 0x40
    }
}
1a006ddc:	bf00      	nop
1a006dde:	370c      	adds	r7, #12
1a006de0:	46bd      	mov	sp, r7
1a006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006de6:	4770      	bx	lr
1a006de8:	100866d0 	.word	0x100866d0
1a006dec:	10624dd3 	.word	0x10624dd3
1a006df0:	000f4240 	.word	0x000f4240

1a006df4 <inv_set_accel_sample_rate>:

/** Set Accel Sample rate in micro seconds.
* @param[in] sample_rate_us Set Accel Sample rate in us
*/
void inv_set_accel_sample_rate(long sample_rate_us)
{
1a006df4:	b480      	push	{r7}
1a006df6:	b083      	sub	sp, #12
1a006df8:	af00      	add	r7, sp, #0
1a006dfa:	6078      	str	r0, [r7, #4]
        int type = PLAYBACK_DBG_TYPE_A_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
1a006dfc:	4a0e      	ldr	r2, [pc, #56]	; (1a006e38 <inv_set_accel_sample_rate+0x44>)
1a006dfe:	687b      	ldr	r3, [r7, #4]
1a006e00:	66d3      	str	r3, [r2, #108]	; 0x6c
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
1a006e02:	687b      	ldr	r3, [r7, #4]
1a006e04:	4a0d      	ldr	r2, [pc, #52]	; (1a006e3c <inv_set_accel_sample_rate+0x48>)
1a006e06:	fb82 1203 	smull	r1, r2, r2, r3
1a006e0a:	1192      	asrs	r2, r2, #6
1a006e0c:	17db      	asrs	r3, r3, #31
1a006e0e:	1ad3      	subs	r3, r2, r3
1a006e10:	4a09      	ldr	r2, [pc, #36]	; (1a006e38 <inv_set_accel_sample_rate+0x44>)
1a006e12:	6713      	str	r3, [r2, #112]	; 0x70
    if (sensors.accel.bandwidth == 0) {
1a006e14:	4b08      	ldr	r3, [pc, #32]	; (1a006e38 <inv_set_accel_sample_rate+0x44>)
1a006e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
1a006e1a:	2b00      	cmp	r3, #0
1a006e1c:	d106      	bne.n	1a006e2c <inv_set_accel_sample_rate+0x38>
        sensors.accel.bandwidth = (int)(1000000L / sample_rate_us);
1a006e1e:	4a08      	ldr	r2, [pc, #32]	; (1a006e40 <inv_set_accel_sample_rate+0x4c>)
1a006e20:	687b      	ldr	r3, [r7, #4]
1a006e22:	fb92 f3f3 	sdiv	r3, r2, r3
1a006e26:	4a04      	ldr	r2, [pc, #16]	; (1a006e38 <inv_set_accel_sample_rate+0x44>)
1a006e28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }
}
1a006e2c:	bf00      	nop
1a006e2e:	370c      	adds	r7, #12
1a006e30:	46bd      	mov	sp, r7
1a006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006e36:	4770      	bx	lr
1a006e38:	100866d0 	.word	0x100866d0
1a006e3c:	10624dd3 	.word	0x10624dd3
1a006e40:	000f4240 	.word	0x000f4240

1a006e44 <inv_set_compass_sample_rate>:

/** Set Compass Sample rate in micro seconds.
* @param[in] sample_rate_us Set Gyro Sample rate in micro seconds.
*/
void inv_set_compass_sample_rate(long sample_rate_us)
{
1a006e44:	b480      	push	{r7}
1a006e46:	b083      	sub	sp, #12
1a006e48:	af00      	add	r7, sp, #0
1a006e4a:	6078      	str	r0, [r7, #4]
        int type = PLAYBACK_DBG_TYPE_C_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.compass.sample_rate_us = sample_rate_us;
1a006e4c:	4a0f      	ldr	r2, [pc, #60]	; (1a006e8c <inv_set_compass_sample_rate+0x48>)
1a006e4e:	687b      	ldr	r3, [r7, #4]
1a006e50:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
    sensors.compass.sample_rate_ms = sample_rate_us / 1000;
1a006e54:	687b      	ldr	r3, [r7, #4]
1a006e56:	4a0e      	ldr	r2, [pc, #56]	; (1a006e90 <inv_set_compass_sample_rate+0x4c>)
1a006e58:	fb82 1203 	smull	r1, r2, r2, r3
1a006e5c:	1192      	asrs	r2, r2, #6
1a006e5e:	17db      	asrs	r3, r3, #31
1a006e60:	1ad3      	subs	r3, r2, r3
1a006e62:	4a0a      	ldr	r2, [pc, #40]	; (1a006e8c <inv_set_compass_sample_rate+0x48>)
1a006e64:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    if (sensors.compass.bandwidth == 0) {
1a006e68:	4b08      	ldr	r3, [pc, #32]	; (1a006e8c <inv_set_compass_sample_rate+0x48>)
1a006e6a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
1a006e6e:	2b00      	cmp	r3, #0
1a006e70:	d106      	bne.n	1a006e80 <inv_set_compass_sample_rate+0x3c>
        sensors.compass.bandwidth = (int)(1000000L / sample_rate_us);
1a006e72:	4a08      	ldr	r2, [pc, #32]	; (1a006e94 <inv_set_compass_sample_rate+0x50>)
1a006e74:	687b      	ldr	r3, [r7, #4]
1a006e76:	fb92 f3f3 	sdiv	r3, r2, r3
1a006e7a:	4a04      	ldr	r2, [pc, #16]	; (1a006e8c <inv_set_compass_sample_rate+0x48>)
1a006e7c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    }
}
1a006e80:	bf00      	nop
1a006e82:	370c      	adds	r7, #12
1a006e84:	46bd      	mov	sp, r7
1a006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006e8a:	4770      	bx	lr
1a006e8c:	100866d0 	.word	0x100866d0
1a006e90:	10624dd3 	.word	0x10624dd3
1a006e94:	000f4240 	.word	0x000f4240

1a006e98 <inv_get_compass_on>:

/** Helper function stating whether the compass is on or off.
 * @return TRUE if compass if on, 0 if compass if off
*/
int inv_get_compass_on()
{
1a006e98:	b480      	push	{r7}
1a006e9a:	af00      	add	r7, sp, #0
    return (sensors.compass.status & INV_SENSOR_ON) == INV_SENSOR_ON;
1a006e9c:	4b07      	ldr	r3, [pc, #28]	; (1a006ebc <inv_get_compass_on+0x24>)
1a006e9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a006ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a006ea6:	2b00      	cmp	r3, #0
1a006ea8:	bf14      	ite	ne
1a006eaa:	2301      	movne	r3, #1
1a006eac:	2300      	moveq	r3, #0
1a006eae:	b2db      	uxtb	r3, r3
}
1a006eb0:	4618      	mov	r0, r3
1a006eb2:	46bd      	mov	sp, r7
1a006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006eb8:	4770      	bx	lr
1a006eba:	bf00      	nop
1a006ebc:	100866d0 	.word	0x100866d0

1a006ec0 <inv_get_gyro_on>:

/** Helper function stating whether the gyro is on or off.
 * @return TRUE if gyro if on, 0 if gyro if off
*/
int inv_get_gyro_on()
{
1a006ec0:	b480      	push	{r7}
1a006ec2:	af00      	add	r7, sp, #0
    return (sensors.gyro.status & INV_SENSOR_ON) == INV_SENSOR_ON;
1a006ec4:	4b06      	ldr	r3, [pc, #24]	; (1a006ee0 <inv_get_gyro_on+0x20>)
1a006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a006ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a006ecc:	2b00      	cmp	r3, #0
1a006ece:	bf14      	ite	ne
1a006ed0:	2301      	movne	r3, #1
1a006ed2:	2300      	moveq	r3, #0
1a006ed4:	b2db      	uxtb	r3, r3
}
1a006ed6:	4618      	mov	r0, r3
1a006ed8:	46bd      	mov	sp, r7
1a006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006ede:	4770      	bx	lr
1a006ee0:	100866d0 	.word	0x100866d0

1a006ee4 <inv_get_accel_on>:

/** Helper function stating whether the acceleromter is on or off.
 * @return TRUE if accel if on, 0 if accel if off
*/
int inv_get_accel_on()
{
1a006ee4:	b480      	push	{r7}
1a006ee6:	af00      	add	r7, sp, #0
    return (sensors.accel.status & INV_SENSOR_ON) == INV_SENSOR_ON;
1a006ee8:	4b06      	ldr	r3, [pc, #24]	; (1a006f04 <inv_get_accel_on+0x20>)
1a006eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a006eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a006ef0:	2b00      	cmp	r3, #0
1a006ef2:	bf14      	ite	ne
1a006ef4:	2301      	movne	r3, #1
1a006ef6:	2300      	moveq	r3, #0
1a006ef8:	b2db      	uxtb	r3, r3
}
1a006efa:	4618      	mov	r0, r3
1a006efc:	46bd      	mov	sp, r7
1a006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006f02:	4770      	bx	lr
1a006f04:	100866d0 	.word	0x100866d0

1a006f08 <inv_get_last_timestamp>:
/** Get last timestamp across all 3 sensors that are on.
* This find out which timestamp has the largest value for sensors that are on.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_time_t inv_get_last_timestamp()
{
1a006f08:	b480      	push	{r7}
1a006f0a:	b083      	sub	sp, #12
1a006f0c:	af00      	add	r7, sp, #0
    inv_time_t timestamp = 0;
1a006f0e:	2300      	movs	r3, #0
1a006f10:	607b      	str	r3, [r7, #4]
    if (sensors.accel.status & INV_SENSOR_ON) {
1a006f12:	4b20      	ldr	r3, [pc, #128]	; (1a006f94 <inv_get_last_timestamp+0x8c>)
1a006f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a006f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a006f1a:	2b00      	cmp	r3, #0
1a006f1c:	d002      	beq.n	1a006f24 <inv_get_last_timestamp+0x1c>
        timestamp = sensors.accel.timestamp;
1a006f1e:	4b1d      	ldr	r3, [pc, #116]	; (1a006f94 <inv_get_last_timestamp+0x8c>)
1a006f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1a006f22:	607b      	str	r3, [r7, #4]
    }
    if (sensors.gyro.status & INV_SENSOR_ON) {
1a006f24:	4b1b      	ldr	r3, [pc, #108]	; (1a006f94 <inv_get_last_timestamp+0x8c>)
1a006f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a006f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a006f2c:	2b00      	cmp	r3, #0
1a006f2e:	d007      	beq.n	1a006f40 <inv_get_last_timestamp+0x38>
        if (timestamp < sensors.gyro.timestamp) {
1a006f30:	4b18      	ldr	r3, [pc, #96]	; (1a006f94 <inv_get_last_timestamp+0x8c>)
1a006f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a006f34:	687b      	ldr	r3, [r7, #4]
1a006f36:	429a      	cmp	r2, r3
1a006f38:	d902      	bls.n	1a006f40 <inv_get_last_timestamp+0x38>
            timestamp = sensors.gyro.timestamp;
1a006f3a:	4b16      	ldr	r3, [pc, #88]	; (1a006f94 <inv_get_last_timestamp+0x8c>)
1a006f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1a006f3e:	607b      	str	r3, [r7, #4]
        }
    }
    if (sensors.compass.status & INV_SENSOR_ON) {
1a006f40:	4b14      	ldr	r3, [pc, #80]	; (1a006f94 <inv_get_last_timestamp+0x8c>)
1a006f42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a006f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a006f4a:	2b00      	cmp	r3, #0
1a006f4c:	d009      	beq.n	1a006f62 <inv_get_last_timestamp+0x5a>
        if (timestamp < sensors.compass.timestamp) {
1a006f4e:	4b11      	ldr	r3, [pc, #68]	; (1a006f94 <inv_get_last_timestamp+0x8c>)
1a006f50:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
1a006f54:	687b      	ldr	r3, [r7, #4]
1a006f56:	429a      	cmp	r2, r3
1a006f58:	d903      	bls.n	1a006f62 <inv_get_last_timestamp+0x5a>
            timestamp = sensors.compass.timestamp;
1a006f5a:	4b0e      	ldr	r3, [pc, #56]	; (1a006f94 <inv_get_last_timestamp+0x8c>)
1a006f5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
1a006f60:	607b      	str	r3, [r7, #4]
        }
    }
    if (sensors.temp.status & INV_SENSOR_ON) {
1a006f62:	4b0c      	ldr	r3, [pc, #48]	; (1a006f94 <inv_get_last_timestamp+0x8c>)
1a006f64:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
1a006f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a006f6c:	2b00      	cmp	r3, #0
1a006f6e:	d009      	beq.n	1a006f84 <inv_get_last_timestamp+0x7c>
        if (timestamp < sensors.temp.timestamp)
1a006f70:	4b08      	ldr	r3, [pc, #32]	; (1a006f94 <inv_get_last_timestamp+0x8c>)
1a006f72:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
1a006f76:	687b      	ldr	r3, [r7, #4]
1a006f78:	429a      	cmp	r2, r3
1a006f7a:	d903      	bls.n	1a006f84 <inv_get_last_timestamp+0x7c>
            timestamp = sensors.temp.timestamp;
1a006f7c:	4b05      	ldr	r3, [pc, #20]	; (1a006f94 <inv_get_last_timestamp+0x8c>)
1a006f7e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
1a006f82:	607b      	str	r3, [r7, #4]
    }
    return timestamp;
1a006f84:	687b      	ldr	r3, [r7, #4]
}
1a006f86:	4618      	mov	r0, r3
1a006f88:	370c      	adds	r7, #12
1a006f8a:	46bd      	mov	sp, r7
1a006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a006f90:	4770      	bx	lr
1a006f92:	bf00      	nop
1a006f94:	100866d0 	.word	0x100866d0

1a006f98 <inv_set_accel_orientation_and_scale>:
* @param[in] sensitivity A scale factor to convert device units to g's
*            such that g's = device_units * sensitivity / 2^30. Typically
*            it works out to be the maximum g_value * 2^15.
*/
void inv_set_accel_orientation_and_scale(int orientation, long sensitivity)
{
1a006f98:	b580      	push	{r7, lr}
1a006f9a:	b082      	sub	sp, #8
1a006f9c:	af00      	add	r7, sp, #0
1a006f9e:	6078      	str	r0, [r7, #4]
1a006fa0:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.accel, orientation,
1a006fa2:	683a      	ldr	r2, [r7, #0]
1a006fa4:	6879      	ldr	r1, [r7, #4]
1a006fa6:	4803      	ldr	r0, [pc, #12]	; (1a006fb4 <inv_set_accel_orientation_and_scale+0x1c>)
1a006fa8:	f7ff fedc 	bl	1a006d64 <set_sensor_orientation_and_scale>
                                     sensitivity);
}
1a006fac:	bf00      	nop
1a006fae:	3708      	adds	r7, #8
1a006fb0:	46bd      	mov	sp, r7
1a006fb2:	bd80      	pop	{r7, pc}
1a006fb4:	10086714 	.word	0x10086714

1a006fb8 <inv_set_compass_orientation_and_scale>:
* @param[in] sensitivity A scale factor to convert device units to uT
*            such that uT = device_units * sensitivity / 2^30. Typically
*            it works out to be the maximum uT_value * 2^15.
*/
void inv_set_compass_orientation_and_scale(int orientation, long sensitivity)
{
1a006fb8:	b580      	push	{r7, lr}
1a006fba:	b082      	sub	sp, #8
1a006fbc:	af00      	add	r7, sp, #0
1a006fbe:	6078      	str	r0, [r7, #4]
1a006fc0:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.compass, orientation, sensitivity);
1a006fc2:	683a      	ldr	r2, [r7, #0]
1a006fc4:	6879      	ldr	r1, [r7, #4]
1a006fc6:	4803      	ldr	r0, [pc, #12]	; (1a006fd4 <inv_set_compass_orientation_and_scale+0x1c>)
1a006fc8:	f7ff fecc 	bl	1a006d64 <set_sensor_orientation_and_scale>
}
1a006fcc:	bf00      	nop
1a006fce:	3708      	adds	r7, #8
1a006fd0:	46bd      	mov	sp, r7
1a006fd2:	bd80      	pop	{r7, pc}
1a006fd4:	10086758 	.word	0x10086758

1a006fd8 <inv_apply_calibration>:
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
1a006fd8:	b580      	push	{r7, lr}
1a006fda:	b086      	sub	sp, #24
1a006fdc:	af00      	add	r7, sp, #0
1a006fde:	6078      	str	r0, [r7, #4]
1a006fe0:	6039      	str	r1, [r7, #0]
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
1a006fe2:	687b      	ldr	r3, [r7, #4]
1a006fe4:	889b      	ldrh	r3, [r3, #4]
1a006fe6:	b21b      	sxth	r3, r3
1a006fe8:	03db      	lsls	r3, r3, #15
1a006fea:	60fb      	str	r3, [r7, #12]
    raw32[1] = (long)sensor->raw[1] << 15;
1a006fec:	687b      	ldr	r3, [r7, #4]
1a006fee:	88db      	ldrh	r3, [r3, #6]
1a006ff0:	b21b      	sxth	r3, r3
1a006ff2:	03db      	lsls	r3, r3, #15
1a006ff4:	613b      	str	r3, [r7, #16]
    raw32[2] = (long)sensor->raw[2] << 15;
1a006ff6:	687b      	ldr	r3, [r7, #4]
1a006ff8:	891b      	ldrh	r3, [r3, #8]
1a006ffa:	b21b      	sxth	r3, r3
1a006ffc:	03db      	lsls	r3, r3, #15
1a006ffe:	617b      	str	r3, [r7, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->raw_scaled);
1a007000:	687b      	ldr	r3, [r7, #4]
1a007002:	681b      	ldr	r3, [r3, #0]
1a007004:	b298      	uxth	r0, r3
1a007006:	687b      	ldr	r3, [r7, #4]
1a007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a00700a:	0059      	lsls	r1, r3, #1
1a00700c:	687b      	ldr	r3, [r7, #4]
1a00700e:	330c      	adds	r3, #12
1a007010:	f107 020c 	add.w	r2, r7, #12
1a007014:	f001 fcb4 	bl	1a008980 <inv_convert_to_body_with_scale>

    raw32[0] -= bias[0] >> 1;
1a007018:	68fa      	ldr	r2, [r7, #12]
1a00701a:	683b      	ldr	r3, [r7, #0]
1a00701c:	681b      	ldr	r3, [r3, #0]
1a00701e:	105b      	asrs	r3, r3, #1
1a007020:	1ad3      	subs	r3, r2, r3
1a007022:	60fb      	str	r3, [r7, #12]
    raw32[1] -= bias[1] >> 1;
1a007024:	693a      	ldr	r2, [r7, #16]
1a007026:	683b      	ldr	r3, [r7, #0]
1a007028:	3304      	adds	r3, #4
1a00702a:	681b      	ldr	r3, [r3, #0]
1a00702c:	105b      	asrs	r3, r3, #1
1a00702e:	1ad3      	subs	r3, r2, r3
1a007030:	613b      	str	r3, [r7, #16]
    raw32[2] -= bias[2] >> 1;
1a007032:	697a      	ldr	r2, [r7, #20]
1a007034:	683b      	ldr	r3, [r7, #0]
1a007036:	3308      	adds	r3, #8
1a007038:	681b      	ldr	r3, [r3, #0]
1a00703a:	105b      	asrs	r3, r3, #1
1a00703c:	1ad3      	subs	r3, r2, r3
1a00703e:	617b      	str	r3, [r7, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->calibrated);
1a007040:	687b      	ldr	r3, [r7, #4]
1a007042:	681b      	ldr	r3, [r3, #0]
1a007044:	b298      	uxth	r0, r3
1a007046:	687b      	ldr	r3, [r7, #4]
1a007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a00704a:	0059      	lsls	r1, r3, #1
1a00704c:	687b      	ldr	r3, [r7, #4]
1a00704e:	3318      	adds	r3, #24
1a007050:	f107 020c 	add.w	r2, r7, #12
1a007054:	f001 fc94 	bl	1a008980 <inv_convert_to_body_with_scale>

    sensor->status |= INV_CALIBRATED;
1a007058:	687b      	ldr	r3, [r7, #4]
1a00705a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a00705c:	f043 0220 	orr.w	r2, r3, #32
1a007060:	687b      	ldr	r3, [r7, #4]
1a007062:	631a      	str	r2, [r3, #48]	; 0x30
}
1a007064:	bf00      	nop
1a007066:	3718      	adds	r7, #24
1a007068:	46bd      	mov	sp, r7
1a00706a:	bd80      	pop	{r7, pc}

1a00706c <inv_get_compass_bias>:
/** Returns the current bias for the compass
* @param[out] bias Compass bias in hardware units scaled by 2^16. In mounting frame.
*             Length 3.
*/
void inv_get_compass_bias(long *bias)
{
1a00706c:	b580      	push	{r7, lr}
1a00706e:	b082      	sub	sp, #8
1a007070:	af00      	add	r7, sp, #0
1a007072:	6078      	str	r0, [r7, #4]
    if (bias != NULL) {
1a007074:	687b      	ldr	r3, [r7, #4]
1a007076:	2b00      	cmp	r3, #0
1a007078:	d004      	beq.n	1a007084 <inv_get_compass_bias+0x18>
        memcpy(bias, inv_data_builder.save.compass_bias, sizeof(inv_data_builder.save.compass_bias));
1a00707a:	220c      	movs	r2, #12
1a00707c:	4903      	ldr	r1, [pc, #12]	; (1a00708c <inv_get_compass_bias+0x20>)
1a00707e:	6878      	ldr	r0, [r7, #4]
1a007080:	f00d fdb0 	bl	1a014be4 <memcpy>
    }
}
1a007084:	bf00      	nop
1a007086:	3708      	adds	r7, #8
1a007088:	46bd      	mov	sp, r7
1a00708a:	bd80      	pop	{r7, pc}
1a00708c:	10086684 	.word	0x10086684

1a007090 <inv_set_compass_bias>:

void inv_set_compass_bias(const long *bias, int accuracy)
{
1a007090:	b580      	push	{r7, lr}
1a007092:	b082      	sub	sp, #8
1a007094:	af00      	add	r7, sp, #0
1a007096:	6078      	str	r0, [r7, #4]
1a007098:	6039      	str	r1, [r7, #0]
    if (memcmp(inv_data_builder.save.compass_bias, bias, sizeof(inv_data_builder.save.compass_bias))) {
1a00709a:	220c      	movs	r2, #12
1a00709c:	6879      	ldr	r1, [r7, #4]
1a00709e:	4810      	ldr	r0, [pc, #64]	; (1a0070e0 <inv_set_compass_bias+0x50>)
1a0070a0:	f00d fd6e 	bl	1a014b80 <memcmp>
1a0070a4:	4603      	mov	r3, r0
1a0070a6:	2b00      	cmp	r3, #0
1a0070a8:	d008      	beq.n	1a0070bc <inv_set_compass_bias+0x2c>
        memcpy(inv_data_builder.save.compass_bias, bias, sizeof(inv_data_builder.save.compass_bias));
1a0070aa:	220c      	movs	r2, #12
1a0070ac:	6879      	ldr	r1, [r7, #4]
1a0070ae:	480c      	ldr	r0, [pc, #48]	; (1a0070e0 <inv_set_compass_bias+0x50>)
1a0070b0:	f00d fd98 	bl	1a014be4 <memcpy>
        inv_apply_calibration(&sensors.compass, inv_data_builder.save.compass_bias);
1a0070b4:	490a      	ldr	r1, [pc, #40]	; (1a0070e0 <inv_set_compass_bias+0x50>)
1a0070b6:	480b      	ldr	r0, [pc, #44]	; (1a0070e4 <inv_set_compass_bias+0x54>)
1a0070b8:	f7ff ff8e 	bl	1a006fd8 <inv_apply_calibration>
    }
    sensors.compass.accuracy = accuracy;
1a0070bc:	4a0a      	ldr	r2, [pc, #40]	; (1a0070e8 <inv_set_compass_bias+0x58>)
1a0070be:	683b      	ldr	r3, [r7, #0]
1a0070c0:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
    inv_data_builder.save.compass_accuracy = accuracy;
1a0070c4:	4a09      	ldr	r2, [pc, #36]	; (1a0070ec <inv_set_compass_bias+0x5c>)
1a0070c6:	683b      	ldr	r3, [r7, #0]
1a0070c8:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
    inv_set_message(INV_MSG_NEW_CB_EVENT, INV_MSG_NEW_CB_EVENT, 0);
1a0070cc:	2200      	movs	r2, #0
1a0070ce:	2108      	movs	r1, #8
1a0070d0:	2008      	movs	r0, #8
1a0070d2:	f000 fda5 	bl	1a007c20 <inv_set_message>
}
1a0070d6:	bf00      	nop
1a0070d8:	3708      	adds	r7, #8
1a0070da:	46bd      	mov	sp, r7
1a0070dc:	bd80      	pop	{r7, pc}
1a0070de:	bf00      	nop
1a0070e0:	10086684 	.word	0x10086684
1a0070e4:	10086758 	.word	0x10086758
1a0070e8:	100866d0 	.word	0x100866d0
1a0070ec:	10086590 	.word	0x10086590

1a0070f0 <inv_set_compass_disturbance>:

/** Set the state of a compass disturbance
* @param[in] dist 1=disturbance, 0=no disturbance
*/
void inv_set_compass_disturbance(int dist)
{
1a0070f0:	b480      	push	{r7}
1a0070f2:	b083      	sub	sp, #12
1a0070f4:	af00      	add	r7, sp, #0
1a0070f6:	6078      	str	r0, [r7, #4]
    inv_data_builder.compass_disturbance = dist;
1a0070f8:	4a04      	ldr	r2, [pc, #16]	; (1a00710c <inv_set_compass_disturbance+0x1c>)
1a0070fa:	687b      	ldr	r3, [r7, #4]
1a0070fc:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
}
1a007100:	bf00      	nop
1a007102:	370c      	adds	r7, #12
1a007104:	46bd      	mov	sp, r7
1a007106:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00710a:	4770      	bx	lr
1a00710c:	10086590 	.word	0x10086590

1a007110 <inv_set_accel_accuracy>:

/** Sets the accel accuracy.
* @param[in] accuracy Accuracy rating from 0 to 3, with 3 being most accurate.
*/
void inv_set_accel_accuracy(int accuracy)
{
1a007110:	b580      	push	{r7, lr}
1a007112:	b082      	sub	sp, #8
1a007114:	af00      	add	r7, sp, #0
1a007116:	6078      	str	r0, [r7, #4]
    sensors.accel.accuracy = accuracy;
1a007118:	4a07      	ldr	r2, [pc, #28]	; (1a007138 <inv_set_accel_accuracy+0x28>)
1a00711a:	687b      	ldr	r3, [r7, #4]
1a00711c:	6793      	str	r3, [r2, #120]	; 0x78
    inv_data_builder.save.accel_accuracy = accuracy;
1a00711e:	4a07      	ldr	r2, [pc, #28]	; (1a00713c <inv_set_accel_accuracy+0x2c>)
1a007120:	687b      	ldr	r3, [r7, #4]
1a007122:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    inv_set_message(INV_MSG_NEW_AB_EVENT, INV_MSG_NEW_AB_EVENT, 0);
1a007126:	2200      	movs	r2, #0
1a007128:	2110      	movs	r1, #16
1a00712a:	2010      	movs	r0, #16
1a00712c:	f000 fd78 	bl	1a007c20 <inv_set_message>
}
1a007130:	bf00      	nop
1a007132:	3708      	adds	r7, #8
1a007134:	46bd      	mov	sp, r7
1a007136:	bd80      	pop	{r7, pc}
1a007138:	100866d0 	.word	0x100866d0
1a00713c:	10086590 	.word	0x10086590

1a007140 <inv_set_accel_bias_mask>:
* @param[in] bias Accel bias, length 3. In HW units scaled by 2^16 in body frame
* @param[in] accuracy Accuracy rating from 0 to 3, with 3 being most accurate.
* @param[in] mask Mask to select axis to apply bias set.
*/
void inv_set_accel_bias_mask(const long *bias, int accuracy, int mask)
{
1a007140:	b580      	push	{r7, lr}
1a007142:	b084      	sub	sp, #16
1a007144:	af00      	add	r7, sp, #0
1a007146:	60f8      	str	r0, [r7, #12]
1a007148:	60b9      	str	r1, [r7, #8]
1a00714a:	607a      	str	r2, [r7, #4]
    if (bias) {
1a00714c:	68fb      	ldr	r3, [r7, #12]
1a00714e:	2b00      	cmp	r3, #0
1a007150:	d021      	beq.n	1a007196 <inv_set_accel_bias_mask+0x56>
        if (mask & 1){
1a007152:	687b      	ldr	r3, [r7, #4]
1a007154:	f003 0301 	and.w	r3, r3, #1
1a007158:	2b00      	cmp	r3, #0
1a00715a:	d004      	beq.n	1a007166 <inv_set_accel_bias_mask+0x26>
            inv_data_builder.save.accel_bias[0] = bias[0];
1a00715c:	68fb      	ldr	r3, [r7, #12]
1a00715e:	681b      	ldr	r3, [r3, #0]
1a007160:	4a15      	ldr	r2, [pc, #84]	; (1a0071b8 <inv_set_accel_bias_mask+0x78>)
1a007162:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
        }
        if (mask & 2){
1a007166:	687b      	ldr	r3, [r7, #4]
1a007168:	f003 0302 	and.w	r3, r3, #2
1a00716c:	2b00      	cmp	r3, #0
1a00716e:	d004      	beq.n	1a00717a <inv_set_accel_bias_mask+0x3a>
            inv_data_builder.save.accel_bias[1] = bias[1];
1a007170:	68fb      	ldr	r3, [r7, #12]
1a007172:	685b      	ldr	r3, [r3, #4]
1a007174:	4a10      	ldr	r2, [pc, #64]	; (1a0071b8 <inv_set_accel_bias_mask+0x78>)
1a007176:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
        }
        if (mask & 4){
1a00717a:	687b      	ldr	r3, [r7, #4]
1a00717c:	f003 0304 	and.w	r3, r3, #4
1a007180:	2b00      	cmp	r3, #0
1a007182:	d004      	beq.n	1a00718e <inv_set_accel_bias_mask+0x4e>
            inv_data_builder.save.accel_bias[2] = bias[2];
1a007184:	68fb      	ldr	r3, [r7, #12]
1a007186:	689b      	ldr	r3, [r3, #8]
1a007188:	4a0b      	ldr	r2, [pc, #44]	; (1a0071b8 <inv_set_accel_bias_mask+0x78>)
1a00718a:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
        }

        inv_apply_calibration(&sensors.accel, inv_data_builder.save.accel_bias);
1a00718e:	490b      	ldr	r1, [pc, #44]	; (1a0071bc <inv_set_accel_bias_mask+0x7c>)
1a007190:	480b      	ldr	r0, [pc, #44]	; (1a0071c0 <inv_set_accel_bias_mask+0x80>)
1a007192:	f7ff ff21 	bl	1a006fd8 <inv_apply_calibration>
    }
    sensors.accel.accuracy = accuracy;
1a007196:	4a0b      	ldr	r2, [pc, #44]	; (1a0071c4 <inv_set_accel_bias_mask+0x84>)
1a007198:	68bb      	ldr	r3, [r7, #8]
1a00719a:	6793      	str	r3, [r2, #120]	; 0x78
    inv_data_builder.save.accel_accuracy = accuracy;
1a00719c:	4a06      	ldr	r2, [pc, #24]	; (1a0071b8 <inv_set_accel_bias_mask+0x78>)
1a00719e:	68bb      	ldr	r3, [r7, #8]
1a0071a0:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    inv_set_message(INV_MSG_NEW_AB_EVENT, INV_MSG_NEW_AB_EVENT, 0);
1a0071a4:	2200      	movs	r2, #0
1a0071a6:	2110      	movs	r1, #16
1a0071a8:	2010      	movs	r0, #16
1a0071aa:	f000 fd39 	bl	1a007c20 <inv_set_message>
}
1a0071ae:	bf00      	nop
1a0071b0:	3710      	adds	r7, #16
1a0071b2:	46bd      	mov	sp, r7
1a0071b4:	bd80      	pop	{r7, pc}
1a0071b6:	bf00      	nop
1a0071b8:	10086590 	.word	0x10086590
1a0071bc:	100866a4 	.word	0x100866a4
1a0071c0:	10086714 	.word	0x10086714
1a0071c4:	100866d0 	.word	0x100866d0

1a0071c8 <inv_set_gyro_bias>:
* @param[in] bias Gyro bias in hardware units scaled by 2^16. In chip mounting frame.
*            Length 3.
* @param[in] accuracy Accuracy of bias. 0 = least accurate, 3 = most accurate.
*/
void inv_set_gyro_bias(const long *bias, int accuracy)
{
1a0071c8:	b580      	push	{r7, lr}
1a0071ca:	b082      	sub	sp, #8
1a0071cc:	af00      	add	r7, sp, #0
1a0071ce:	6078      	str	r0, [r7, #4]
1a0071d0:	6039      	str	r1, [r7, #0]
    if (bias != NULL) {
1a0071d2:	687b      	ldr	r3, [r7, #4]
1a0071d4:	2b00      	cmp	r3, #0
1a0071d6:	d010      	beq.n	1a0071fa <inv_set_gyro_bias+0x32>
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
1a0071d8:	220c      	movs	r2, #12
1a0071da:	6879      	ldr	r1, [r7, #4]
1a0071dc:	4819      	ldr	r0, [pc, #100]	; (1a007244 <inv_set_gyro_bias+0x7c>)
1a0071de:	f00d fccf 	bl	1a014b80 <memcmp>
1a0071e2:	4603      	mov	r3, r0
1a0071e4:	2b00      	cmp	r3, #0
1a0071e6:	d008      	beq.n	1a0071fa <inv_set_gyro_bias+0x32>
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
1a0071e8:	220c      	movs	r2, #12
1a0071ea:	6879      	ldr	r1, [r7, #4]
1a0071ec:	4815      	ldr	r0, [pc, #84]	; (1a007244 <inv_set_gyro_bias+0x7c>)
1a0071ee:	f00d fcf9 	bl	1a014be4 <memcpy>
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
1a0071f2:	4914      	ldr	r1, [pc, #80]	; (1a007244 <inv_set_gyro_bias+0x7c>)
1a0071f4:	4814      	ldr	r0, [pc, #80]	; (1a007248 <inv_set_gyro_bias+0x80>)
1a0071f6:	f7ff feef 	bl	1a006fd8 <inv_apply_calibration>
        }
    }
    sensors.gyro.accuracy = accuracy;
1a0071fa:	4a13      	ldr	r2, [pc, #76]	; (1a007248 <inv_set_gyro_bias+0x80>)
1a0071fc:	683b      	ldr	r3, [r7, #0]
1a0071fe:	6353      	str	r3, [r2, #52]	; 0x34
    inv_data_builder.save.gyro_accuracy = accuracy;
1a007200:	4a12      	ldr	r2, [pc, #72]	; (1a00724c <inv_set_gyro_bias+0x84>)
1a007202:	683b      	ldr	r3, [r7, #0]
1a007204:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
1a007208:	4b0f      	ldr	r3, [pc, #60]	; (1a007248 <inv_set_gyro_bias+0x80>)
1a00720a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
1a00720e:	2b00      	cmp	r3, #0
1a007210:	d006      	beq.n	1a007220 <inv_set_gyro_bias+0x58>
        inv_data_builder.save.gyro_temp = sensors.temp.calibrated[0];
1a007212:	4b0d      	ldr	r3, [pc, #52]	; (1a007248 <inv_set_gyro_bias+0x80>)
1a007214:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
1a007218:	4a0c      	ldr	r2, [pc, #48]	; (1a00724c <inv_set_gyro_bias+0x84>)
1a00721a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
1a00721e:	e004      	b.n	1a00722a <inv_set_gyro_bias+0x62>
    else
        /* Set to 27 deg C for now until we've got a better solution. */
        inv_data_builder.save.gyro_temp = 1769472L;
1a007220:	4b0a      	ldr	r3, [pc, #40]	; (1a00724c <inv_set_gyro_bias+0x84>)
1a007222:	f44f 12d8 	mov.w	r2, #1769472	; 0x1b0000
1a007226:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    inv_set_message(INV_MSG_NEW_GB_EVENT, INV_MSG_NEW_GB_EVENT, 0);
1a00722a:	2200      	movs	r2, #0
1a00722c:	2104      	movs	r1, #4
1a00722e:	2004      	movs	r0, #4
1a007230:	f000 fcf6 	bl	1a007c20 <inv_set_message>

    /* TODO: this flag works around the synchronization problem seen with using
       the user-exposed message layer to signal the temperature compensation
       module that gyro biases were set.
       A better, cleaner method is certainly needed. */
    inv_data_builder.save.gyro_bias_tc_set = true;
1a007234:	4b05      	ldr	r3, [pc, #20]	; (1a00724c <inv_set_gyro_bias+0x84>)
1a007236:	2201      	movs	r2, #1
1a007238:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
1a00723c:	bf00      	nop
1a00723e:	3708      	adds	r7, #8
1a007240:	46bd      	mov	sp, r7
1a007242:	bd80      	pop	{r7, pc}
1a007244:	10086690 	.word	0x10086690
1a007248:	100866d0 	.word	0x100866d0
1a00724c:	10086590 	.word	0x10086590

1a007250 <inv_get_gyro_bias_tc_set>:
 *          The flag clear automatically after is read.
 *  @return true if the flag was set, indicating gyro biases were set.
 *          false if the flag was not set.
 */
int inv_get_gyro_bias_tc_set(void)
{
1a007250:	b480      	push	{r7}
1a007252:	b083      	sub	sp, #12
1a007254:	af00      	add	r7, sp, #0
    int flag = (inv_data_builder.save.gyro_bias_tc_set == true);
1a007256:	4b0a      	ldr	r3, [pc, #40]	; (1a007280 <inv_get_gyro_bias_tc_set+0x30>)
1a007258:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
1a00725c:	2b01      	cmp	r3, #1
1a00725e:	bf0c      	ite	eq
1a007260:	2301      	moveq	r3, #1
1a007262:	2300      	movne	r3, #0
1a007264:	b2db      	uxtb	r3, r3
1a007266:	607b      	str	r3, [r7, #4]
    inv_data_builder.save.gyro_bias_tc_set = false;
1a007268:	4b05      	ldr	r3, [pc, #20]	; (1a007280 <inv_get_gyro_bias_tc_set+0x30>)
1a00726a:	2200      	movs	r2, #0
1a00726c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return flag;
1a007270:	687b      	ldr	r3, [r7, #4]
}
1a007272:	4618      	mov	r0, r3
1a007274:	370c      	adds	r7, #12
1a007276:	46bd      	mov	sp, r7
1a007278:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00727c:	4770      	bx	lr
1a00727e:	bf00      	nop
1a007280:	10086590 	.word	0x10086590

1a007284 <inv_get_gyro_bias>:
 *              Length 3.
 *  @param[in] temp
 *              Tempearature in degrees C.
 */
void inv_get_gyro_bias(long *bias, long *temp)
{
1a007284:	b580      	push	{r7, lr}
1a007286:	b082      	sub	sp, #8
1a007288:	af00      	add	r7, sp, #0
1a00728a:	6078      	str	r0, [r7, #4]
1a00728c:	6039      	str	r1, [r7, #0]
    if (bias != NULL)
1a00728e:	687b      	ldr	r3, [r7, #4]
1a007290:	2b00      	cmp	r3, #0
1a007292:	d004      	beq.n	1a00729e <inv_get_gyro_bias+0x1a>
        memcpy(bias, inv_data_builder.save.gyro_bias,
1a007294:	220c      	movs	r2, #12
1a007296:	4908      	ldr	r1, [pc, #32]	; (1a0072b8 <inv_get_gyro_bias+0x34>)
1a007298:	6878      	ldr	r0, [r7, #4]
1a00729a:	f00d fca3 	bl	1a014be4 <memcpy>
               sizeof(inv_data_builder.save.gyro_bias));
    if (temp != NULL)
1a00729e:	683b      	ldr	r3, [r7, #0]
1a0072a0:	2b00      	cmp	r3, #0
1a0072a2:	d004      	beq.n	1a0072ae <inv_get_gyro_bias+0x2a>
        temp[0] = inv_data_builder.save.gyro_temp;
1a0072a4:	4b05      	ldr	r3, [pc, #20]	; (1a0072bc <inv_get_gyro_bias+0x38>)
1a0072a6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
1a0072aa:	683b      	ldr	r3, [r7, #0]
1a0072ac:	601a      	str	r2, [r3, #0]
}
1a0072ae:	bf00      	nop
1a0072b0:	3708      	adds	r7, #8
1a0072b2:	46bd      	mov	sp, r7
1a0072b4:	bd80      	pop	{r7, pc}
1a0072b6:	bf00      	nop
1a0072b8:	10086690 	.word	0x10086690
1a0072bc:	10086590 	.word	0x10086590

1a0072c0 <inv_build_accel>:
 *  @param[in]  timestamp 
 *              Monotonic time stamp, for Android it's in nanoseconds.
 *  @return     Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_build_accel(const long *accel, int status, inv_time_t timestamp)
{
1a0072c0:	b580      	push	{r7, lr}
1a0072c2:	b084      	sub	sp, #16
1a0072c4:	af00      	add	r7, sp, #0
1a0072c6:	60f8      	str	r0, [r7, #12]
1a0072c8:	60b9      	str	r1, [r7, #8]
1a0072ca:	607a      	str	r2, [r7, #4]
        fwrite(accel, sizeof(accel[0]), 3, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif

    if ((status & INV_CALIBRATED) == 0) {
1a0072cc:	68bb      	ldr	r3, [r7, #8]
1a0072ce:	f003 0320 	and.w	r3, r3, #32
1a0072d2:	2b00      	cmp	r3, #0
1a0072d4:	d11e      	bne.n	1a007314 <inv_build_accel+0x54>
        sensors.accel.raw[0] = (short)accel[0];
1a0072d6:	68fb      	ldr	r3, [r7, #12]
1a0072d8:	681b      	ldr	r3, [r3, #0]
1a0072da:	b29a      	uxth	r2, r3
1a0072dc:	4b25      	ldr	r3, [pc, #148]	; (1a007374 <inv_build_accel+0xb4>)
1a0072de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        sensors.accel.raw[1] = (short)accel[1];
1a0072e2:	68fb      	ldr	r3, [r7, #12]
1a0072e4:	3304      	adds	r3, #4
1a0072e6:	681b      	ldr	r3, [r3, #0]
1a0072e8:	b29a      	uxth	r2, r3
1a0072ea:	4b22      	ldr	r3, [pc, #136]	; (1a007374 <inv_build_accel+0xb4>)
1a0072ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        sensors.accel.raw[2] = (short)accel[2];
1a0072f0:	68fb      	ldr	r3, [r7, #12]
1a0072f2:	3308      	adds	r3, #8
1a0072f4:	681b      	ldr	r3, [r3, #0]
1a0072f6:	b29a      	uxth	r2, r3
1a0072f8:	4b1e      	ldr	r3, [pc, #120]	; (1a007374 <inv_build_accel+0xb4>)
1a0072fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        sensors.accel.status |= INV_RAW_DATA;
1a0072fe:	4b1d      	ldr	r3, [pc, #116]	; (1a007374 <inv_build_accel+0xb4>)
1a007300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a007302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a007306:	4a1b      	ldr	r2, [pc, #108]	; (1a007374 <inv_build_accel+0xb4>)
1a007308:	6753      	str	r3, [r2, #116]	; 0x74
        inv_apply_calibration(&sensors.accel, inv_data_builder.save.accel_bias);
1a00730a:	491b      	ldr	r1, [pc, #108]	; (1a007378 <inv_build_accel+0xb8>)
1a00730c:	481b      	ldr	r0, [pc, #108]	; (1a00737c <inv_build_accel+0xbc>)
1a00730e:	f7ff fe63 	bl	1a006fd8 <inv_apply_calibration>
1a007312:	e01c      	b.n	1a00734e <inv_build_accel+0x8e>
    } else {
        sensors.accel.calibrated[0] = accel[0];
1a007314:	68fb      	ldr	r3, [r7, #12]
1a007316:	681b      	ldr	r3, [r3, #0]
1a007318:	4a16      	ldr	r2, [pc, #88]	; (1a007374 <inv_build_accel+0xb4>)
1a00731a:	65d3      	str	r3, [r2, #92]	; 0x5c
        sensors.accel.calibrated[1] = accel[1];
1a00731c:	68fb      	ldr	r3, [r7, #12]
1a00731e:	685b      	ldr	r3, [r3, #4]
1a007320:	4a14      	ldr	r2, [pc, #80]	; (1a007374 <inv_build_accel+0xb4>)
1a007322:	6613      	str	r3, [r2, #96]	; 0x60
        sensors.accel.calibrated[2] = accel[2];
1a007324:	68fb      	ldr	r3, [r7, #12]
1a007326:	689b      	ldr	r3, [r3, #8]
1a007328:	4a12      	ldr	r2, [pc, #72]	; (1a007374 <inv_build_accel+0xb4>)
1a00732a:	6653      	str	r3, [r2, #100]	; 0x64
        sensors.accel.status |= INV_CALIBRATED;
1a00732c:	4b11      	ldr	r3, [pc, #68]	; (1a007374 <inv_build_accel+0xb4>)
1a00732e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a007330:	f043 0320 	orr.w	r3, r3, #32
1a007334:	4a0f      	ldr	r2, [pc, #60]	; (1a007374 <inv_build_accel+0xb4>)
1a007336:	6753      	str	r3, [r2, #116]	; 0x74
        sensors.accel.accuracy = status & 3;
1a007338:	68bb      	ldr	r3, [r7, #8]
1a00733a:	f003 0303 	and.w	r3, r3, #3
1a00733e:	4a0d      	ldr	r2, [pc, #52]	; (1a007374 <inv_build_accel+0xb4>)
1a007340:	6793      	str	r3, [r2, #120]	; 0x78
        inv_data_builder.save.accel_accuracy = status & 3;
1a007342:	68bb      	ldr	r3, [r7, #8]
1a007344:	f003 0303 	and.w	r3, r3, #3
1a007348:	4a0d      	ldr	r2, [pc, #52]	; (1a007380 <inv_build_accel+0xc0>)
1a00734a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    }
    sensors.accel.status |= INV_NEW_DATA | INV_SENSOR_ON;
1a00734e:	4b09      	ldr	r3, [pc, #36]	; (1a007374 <inv_build_accel+0xb4>)
1a007350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a007352:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
1a007356:	4a07      	ldr	r2, [pc, #28]	; (1a007374 <inv_build_accel+0xb4>)
1a007358:	6753      	str	r3, [r2, #116]	; 0x74
    sensors.accel.timestamp_prev = sensors.accel.timestamp;
1a00735a:	4b06      	ldr	r3, [pc, #24]	; (1a007374 <inv_build_accel+0xb4>)
1a00735c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1a00735e:	4a05      	ldr	r2, [pc, #20]	; (1a007374 <inv_build_accel+0xb4>)
1a007360:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    sensors.accel.timestamp = timestamp;
1a007364:	4a03      	ldr	r2, [pc, #12]	; (1a007374 <inv_build_accel+0xb4>)
1a007366:	687b      	ldr	r3, [r7, #4]
1a007368:	67d3      	str	r3, [r2, #124]	; 0x7c

    return INV_SUCCESS;
1a00736a:	2300      	movs	r3, #0
}
1a00736c:	4618      	mov	r0, r3
1a00736e:	3710      	adds	r7, #16
1a007370:	46bd      	mov	sp, r7
1a007372:	bd80      	pop	{r7, pc}
1a007374:	100866d0 	.word	0x100866d0
1a007378:	100866a4 	.word	0x100866a4
1a00737c:	10086714 	.word	0x10086714
1a007380:	10086590 	.word	0x10086590

1a007384 <inv_build_gyro>:
* @param[in] timestamp Monotonic time stamp, for Android it's in nanoseconds.
* @param[out] executed Set to 1 if data processing was done.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_build_gyro(const short *gyro, inv_time_t timestamp)
{
1a007384:	b580      	push	{r7, lr}
1a007386:	b082      	sub	sp, #8
1a007388:	af00      	add	r7, sp, #0
1a00738a:	6078      	str	r0, [r7, #4]
1a00738c:	6039      	str	r1, [r7, #0]
        fwrite(gyro, sizeof(gyro[0]), 3, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif

    memcpy(sensors.gyro.raw, gyro, 3 * sizeof(short));
1a00738e:	2206      	movs	r2, #6
1a007390:	6879      	ldr	r1, [r7, #4]
1a007392:	480c      	ldr	r0, [pc, #48]	; (1a0073c4 <inv_build_gyro+0x40>)
1a007394:	f00d fc26 	bl	1a014be4 <memcpy>
    sensors.gyro.status |= INV_NEW_DATA | INV_RAW_DATA | INV_SENSOR_ON;
1a007398:	4b0b      	ldr	r3, [pc, #44]	; (1a0073c8 <inv_build_gyro+0x44>)
1a00739a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a00739c:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
1a0073a0:	4a09      	ldr	r2, [pc, #36]	; (1a0073c8 <inv_build_gyro+0x44>)
1a0073a2:	6313      	str	r3, [r2, #48]	; 0x30
    sensors.gyro.timestamp_prev = sensors.gyro.timestamp;
1a0073a4:	4b08      	ldr	r3, [pc, #32]	; (1a0073c8 <inv_build_gyro+0x44>)
1a0073a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1a0073a8:	4a07      	ldr	r2, [pc, #28]	; (1a0073c8 <inv_build_gyro+0x44>)
1a0073aa:	63d3      	str	r3, [r2, #60]	; 0x3c
    sensors.gyro.timestamp = timestamp;
1a0073ac:	4a06      	ldr	r2, [pc, #24]	; (1a0073c8 <inv_build_gyro+0x44>)
1a0073ae:	683b      	ldr	r3, [r7, #0]
1a0073b0:	6393      	str	r3, [r2, #56]	; 0x38
    inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
1a0073b2:	4906      	ldr	r1, [pc, #24]	; (1a0073cc <inv_build_gyro+0x48>)
1a0073b4:	4804      	ldr	r0, [pc, #16]	; (1a0073c8 <inv_build_gyro+0x44>)
1a0073b6:	f7ff fe0f 	bl	1a006fd8 <inv_apply_calibration>

    return INV_SUCCESS;
1a0073ba:	2300      	movs	r3, #0
}
1a0073bc:	4618      	mov	r0, r3
1a0073be:	3708      	adds	r7, #8
1a0073c0:	46bd      	mov	sp, r7
1a0073c2:	bd80      	pop	{r7, pc}
1a0073c4:	100866d4 	.word	0x100866d4
1a0073c8:	100866d0 	.word	0x100866d0
1a0073cc:	10086690 	.word	0x10086690

1a0073d0 <inv_build_compass>:
* @param[out] executed Set to 1 if data processing was done.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_build_compass(const long *compass, int status,
                              inv_time_t timestamp)
{
1a0073d0:	b580      	push	{r7, lr}
1a0073d2:	b088      	sub	sp, #32
1a0073d4:	af00      	add	r7, sp, #0
1a0073d6:	60f8      	str	r0, [r7, #12]
1a0073d8:	60b9      	str	r1, [r7, #8]
1a0073da:	607a      	str	r2, [r7, #4]
        fwrite(compass, sizeof(compass[0]), 3, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif

    if ((status & INV_CALIBRATED) == 0) {
1a0073dc:	68bb      	ldr	r3, [r7, #8]
1a0073de:	f003 0320 	and.w	r3, r3, #32
1a0073e2:	2b00      	cmp	r3, #0
1a0073e4:	d123      	bne.n	1a00742e <inv_build_compass+0x5e>
        long data[3];
        inv_set_compass_soft_iron_input_data(compass);
1a0073e6:	68f8      	ldr	r0, [r7, #12]
1a0073e8:	f000 fb3a 	bl	1a007a60 <inv_set_compass_soft_iron_input_data>
        inv_get_compass_soft_iron_output_data(data);
1a0073ec:	f107 0314 	add.w	r3, r7, #20
1a0073f0:	4618      	mov	r0, r3
1a0073f2:	f000 fb15 	bl	1a007a20 <inv_get_compass_soft_iron_output_data>
        sensors.compass.raw[0] = (short)data[0];
1a0073f6:	697b      	ldr	r3, [r7, #20]
1a0073f8:	b29a      	uxth	r2, r3
1a0073fa:	4b2a      	ldr	r3, [pc, #168]	; (1a0074a4 <inv_build_compass+0xd4>)
1a0073fc:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
        sensors.compass.raw[1] = (short)data[1];
1a007400:	69bb      	ldr	r3, [r7, #24]
1a007402:	b29a      	uxth	r2, r3
1a007404:	4b27      	ldr	r3, [pc, #156]	; (1a0074a4 <inv_build_compass+0xd4>)
1a007406:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        sensors.compass.raw[2] = (short)data[2];
1a00740a:	69fb      	ldr	r3, [r7, #28]
1a00740c:	b29a      	uxth	r2, r3
1a00740e:	4b25      	ldr	r3, [pc, #148]	; (1a0074a4 <inv_build_compass+0xd4>)
1a007410:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
        inv_apply_calibration(&sensors.compass, inv_data_builder.save.compass_bias);
1a007414:	4924      	ldr	r1, [pc, #144]	; (1a0074a8 <inv_build_compass+0xd8>)
1a007416:	4825      	ldr	r0, [pc, #148]	; (1a0074ac <inv_build_compass+0xdc>)
1a007418:	f7ff fdde 	bl	1a006fd8 <inv_apply_calibration>
        sensors.compass.status |= INV_RAW_DATA;
1a00741c:	4b21      	ldr	r3, [pc, #132]	; (1a0074a4 <inv_build_compass+0xd4>)
1a00741e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a007422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a007426:	4a1f      	ldr	r2, [pc, #124]	; (1a0074a4 <inv_build_compass+0xd4>)
1a007428:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
1a00742c:	e022      	b.n	1a007474 <inv_build_compass+0xa4>
    } else {
        sensors.compass.calibrated[0] = compass[0];
1a00742e:	68fb      	ldr	r3, [r7, #12]
1a007430:	681b      	ldr	r3, [r3, #0]
1a007432:	4a1c      	ldr	r2, [pc, #112]	; (1a0074a4 <inv_build_compass+0xd4>)
1a007434:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        sensors.compass.calibrated[1] = compass[1];
1a007438:	68fb      	ldr	r3, [r7, #12]
1a00743a:	685b      	ldr	r3, [r3, #4]
1a00743c:	4a19      	ldr	r2, [pc, #100]	; (1a0074a4 <inv_build_compass+0xd4>)
1a00743e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
        sensors.compass.calibrated[2] = compass[2];
1a007442:	68fb      	ldr	r3, [r7, #12]
1a007444:	689b      	ldr	r3, [r3, #8]
1a007446:	4a17      	ldr	r2, [pc, #92]	; (1a0074a4 <inv_build_compass+0xd4>)
1a007448:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
        sensors.compass.status |= INV_CALIBRATED;
1a00744c:	4b15      	ldr	r3, [pc, #84]	; (1a0074a4 <inv_build_compass+0xd4>)
1a00744e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a007452:	f043 0320 	orr.w	r3, r3, #32
1a007456:	4a13      	ldr	r2, [pc, #76]	; (1a0074a4 <inv_build_compass+0xd4>)
1a007458:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
        sensors.compass.accuracy = status & 3;
1a00745c:	68bb      	ldr	r3, [r7, #8]
1a00745e:	f003 0303 	and.w	r3, r3, #3
1a007462:	4a10      	ldr	r2, [pc, #64]	; (1a0074a4 <inv_build_compass+0xd4>)
1a007464:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
        inv_data_builder.save.compass_accuracy = status & 3;
1a007468:	68bb      	ldr	r3, [r7, #8]
1a00746a:	f003 0303 	and.w	r3, r3, #3
1a00746e:	4a10      	ldr	r2, [pc, #64]	; (1a0074b0 <inv_build_compass+0xe0>)
1a007470:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
    }
    sensors.compass.timestamp_prev = sensors.compass.timestamp;
1a007474:	4b0b      	ldr	r3, [pc, #44]	; (1a0074a4 <inv_build_compass+0xd4>)
1a007476:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
1a00747a:	4a0a      	ldr	r2, [pc, #40]	; (1a0074a4 <inv_build_compass+0xd4>)
1a00747c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
    sensors.compass.timestamp = timestamp;
1a007480:	4a08      	ldr	r2, [pc, #32]	; (1a0074a4 <inv_build_compass+0xd4>)
1a007482:	687b      	ldr	r3, [r7, #4]
1a007484:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
    sensors.compass.status |= INV_NEW_DATA | INV_SENSOR_ON;
1a007488:	4b06      	ldr	r3, [pc, #24]	; (1a0074a4 <inv_build_compass+0xd4>)
1a00748a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a00748e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
1a007492:	4a04      	ldr	r2, [pc, #16]	; (1a0074a4 <inv_build_compass+0xd4>)
1a007494:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    return INV_SUCCESS;
1a007498:	2300      	movs	r3, #0
}
1a00749a:	4618      	mov	r0, r3
1a00749c:	3720      	adds	r7, #32
1a00749e:	46bd      	mov	sp, r7
1a0074a0:	bd80      	pop	{r7, pc}
1a0074a2:	bf00      	nop
1a0074a4:	100866d0 	.word	0x100866d0
1a0074a8:	10086684 	.word	0x10086684
1a0074ac:	10086758 	.word	0x10086758
1a0074b0:	10086590 	.word	0x10086590

1a0074b4 <inv_build_temp>:
 *  @param[in]  timestamp   Monotonic time stamp; for Android it's in
 *                          nanoseconds.
* @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_build_temp(const long temp, inv_time_t timestamp)
{
1a0074b4:	b480      	push	{r7}
1a0074b6:	b083      	sub	sp, #12
1a0074b8:	af00      	add	r7, sp, #0
1a0074ba:	6078      	str	r0, [r7, #4]
1a0074bc:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&temp, sizeof(temp), 1, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif
    sensors.temp.calibrated[0] = temp;
1a0074be:	4a0e      	ldr	r2, [pc, #56]	; (1a0074f8 <inv_build_temp+0x44>)
1a0074c0:	687b      	ldr	r3, [r7, #4]
1a0074c2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    sensors.temp.status |= INV_NEW_DATA | INV_RAW_DATA | INV_SENSOR_ON;
1a0074c6:	4b0c      	ldr	r3, [pc, #48]	; (1a0074f8 <inv_build_temp+0x44>)
1a0074c8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
1a0074cc:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
1a0074d0:	4a09      	ldr	r2, [pc, #36]	; (1a0074f8 <inv_build_temp+0x44>)
1a0074d2:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    sensors.temp.timestamp_prev = sensors.temp.timestamp;
1a0074d6:	4b08      	ldr	r3, [pc, #32]	; (1a0074f8 <inv_build_temp+0x44>)
1a0074d8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
1a0074dc:	4a06      	ldr	r2, [pc, #24]	; (1a0074f8 <inv_build_temp+0x44>)
1a0074de:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    sensors.temp.timestamp = timestamp;
1a0074e2:	4a05      	ldr	r2, [pc, #20]	; (1a0074f8 <inv_build_temp+0x44>)
1a0074e4:	683b      	ldr	r3, [r7, #0]
1a0074e6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    /* TODO: Apply scale, remove offset. */

    return INV_SUCCESS;
1a0074ea:	2300      	movs	r3, #0
}
1a0074ec:	4618      	mov	r0, r3
1a0074ee:	370c      	adds	r7, #12
1a0074f0:	46bd      	mov	sp, r7
1a0074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0074f6:	4770      	bx	lr
1a0074f8:	100866d0 	.word	0x100866d0

1a0074fc <inv_build_quat>:
*                         nanoseconds.
* @param[out] executed Set to 1 if data processing was done.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_build_quat(const long *quat, int status, inv_time_t timestamp)
{
1a0074fc:	b580      	push	{r7, lr}
1a0074fe:	b084      	sub	sp, #16
1a007500:	af00      	add	r7, sp, #0
1a007502:	60f8      	str	r0, [r7, #12]
1a007504:	60b9      	str	r1, [r7, #8]
1a007506:	607a      	str	r2, [r7, #4]
        fwrite(quat, sizeof(quat[0]), 4, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif
    
    memcpy(sensors.quat.raw, quat, sizeof(sensors.quat.raw));
1a007508:	2210      	movs	r2, #16
1a00750a:	68f9      	ldr	r1, [r7, #12]
1a00750c:	480e      	ldr	r0, [pc, #56]	; (1a007548 <inv_build_quat+0x4c>)
1a00750e:	f00d fb69 	bl	1a014be4 <memcpy>
    sensors.quat.timestamp = timestamp;
1a007512:	4a0e      	ldr	r2, [pc, #56]	; (1a00754c <inv_build_quat+0x50>)
1a007514:	687b      	ldr	r3, [r7, #4]
1a007516:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    sensors.quat.status |= INV_NEW_DATA | INV_RAW_DATA | INV_SENSOR_ON;
1a00751a:	4b0c      	ldr	r3, [pc, #48]	; (1a00754c <inv_build_quat+0x50>)
1a00751c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a007520:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
1a007524:	4a09      	ldr	r2, [pc, #36]	; (1a00754c <inv_build_quat+0x50>)
1a007526:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    sensors.quat.status |= (INV_BIAS_APPLIED & status);
1a00752a:	4b08      	ldr	r3, [pc, #32]	; (1a00754c <inv_build_quat+0x50>)
1a00752c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
1a007530:	68bb      	ldr	r3, [r7, #8]
1a007532:	f403 7300 	and.w	r3, r3, #512	; 0x200
1a007536:	4313      	orrs	r3, r2
1a007538:	4a04      	ldr	r2, [pc, #16]	; (1a00754c <inv_build_quat+0x50>)
1a00753a:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return INV_SUCCESS;
1a00753e:	2300      	movs	r3, #0
}
1a007540:	4618      	mov	r0, r3
1a007542:	3710      	adds	r7, #16
1a007544:	46bd      	mov	sp, r7
1a007546:	bd80      	pop	{r7, pc}
1a007548:	100867e0 	.word	0x100867e0
1a00754c:	100866d0 	.word	0x100866d0

1a007550 <inv_register_data_cb>:
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
1a007550:	b580      	push	{r7, lr}
1a007552:	b088      	sub	sp, #32
1a007554:	af00      	add	r7, sp, #0
1a007556:	60f8      	str	r0, [r7, #12]
1a007558:	60b9      	str	r1, [r7, #8]
1a00755a:	607a      	str	r2, [r7, #4]
    inv_error_t result = INV_SUCCESS;
1a00755c:	2300      	movs	r3, #0
1a00755e:	61fb      	str	r3, [r7, #28]
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1a007560:	2300      	movs	r3, #0
1a007562:	61bb      	str	r3, [r7, #24]
1a007564:	e01c      	b.n	1a0075a0 <inv_register_data_cb+0x50>
        if ((inv_data_builder.process[kk].func == func) ||
1a007566:	494a      	ldr	r1, [pc, #296]	; (1a007690 <inv_register_data_cb+0x140>)
1a007568:	69ba      	ldr	r2, [r7, #24]
1a00756a:	4613      	mov	r3, r2
1a00756c:	005b      	lsls	r3, r3, #1
1a00756e:	4413      	add	r3, r2
1a007570:	009b      	lsls	r3, r3, #2
1a007572:	440b      	add	r3, r1
1a007574:	3304      	adds	r3, #4
1a007576:	681a      	ldr	r2, [r3, #0]
1a007578:	68fb      	ldr	r3, [r7, #12]
1a00757a:	429a      	cmp	r2, r3
1a00757c:	d00b      	beq.n	1a007596 <inv_register_data_cb+0x46>
                (inv_data_builder.process[kk].priority == priority)) {
1a00757e:	4944      	ldr	r1, [pc, #272]	; (1a007690 <inv_register_data_cb+0x140>)
1a007580:	69ba      	ldr	r2, [r7, #24]
1a007582:	4613      	mov	r3, r2
1a007584:	005b      	lsls	r3, r3, #1
1a007586:	4413      	add	r3, r2
1a007588:	009b      	lsls	r3, r3, #2
1a00758a:	440b      	add	r3, r1
1a00758c:	3308      	adds	r3, #8
1a00758e:	681a      	ldr	r2, [r3, #0]
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if ((inv_data_builder.process[kk].func == func) ||
1a007590:	68bb      	ldr	r3, [r7, #8]
1a007592:	429a      	cmp	r2, r3
1a007594:	d101      	bne.n	1a00759a <inv_register_data_cb+0x4a>
                (inv_data_builder.process[kk].priority == priority)) {
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
1a007596:	2316      	movs	r3, #22
1a007598:	e076      	b.n	1a007688 <inv_register_data_cb+0x138>
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1a00759a:	69bb      	ldr	r3, [r7, #24]
1a00759c:	3301      	adds	r3, #1
1a00759e:	61bb      	str	r3, [r7, #24]
1a0075a0:	4b3b      	ldr	r3, [pc, #236]	; (1a007690 <inv_register_data_cb+0x140>)
1a0075a2:	681a      	ldr	r2, [r3, #0]
1a0075a4:	69bb      	ldr	r3, [r7, #24]
1a0075a6:	429a      	cmp	r2, r3
1a0075a8:	dcdd      	bgt.n	1a007566 <inv_register_data_cb+0x16>
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
        }
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
1a0075aa:	4b39      	ldr	r3, [pc, #228]	; (1a007690 <inv_register_data_cb+0x140>)
1a0075ac:	681b      	ldr	r3, [r3, #0]
1a0075ae:	2b13      	cmp	r3, #19
1a0075b0:	dc62      	bgt.n	1a007678 <inv_register_data_cb+0x128>
        kk = 0;
1a0075b2:	2300      	movs	r3, #0
1a0075b4:	61bb      	str	r3, [r7, #24]
        if (inv_data_builder.num_cb != 0) {
1a0075b6:	4b36      	ldr	r3, [pc, #216]	; (1a007690 <inv_register_data_cb+0x140>)
1a0075b8:	681b      	ldr	r3, [r3, #0]
1a0075ba:	2b00      	cmp	r3, #0
1a0075bc:	d038      	beq.n	1a007630 <inv_register_data_cb+0xe0>
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
1a0075be:	e002      	b.n	1a0075c6 <inv_register_data_cb+0x76>
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
1a0075c0:	69bb      	ldr	r3, [r7, #24]
1a0075c2:	3301      	adds	r3, #1
1a0075c4:	61bb      	str	r3, [r7, #24]
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
1a0075c6:	4b32      	ldr	r3, [pc, #200]	; (1a007690 <inv_register_data_cb+0x140>)
1a0075c8:	681a      	ldr	r2, [r3, #0]
1a0075ca:	69bb      	ldr	r3, [r7, #24]
1a0075cc:	429a      	cmp	r2, r3
1a0075ce:	dd0b      	ble.n	1a0075e8 <inv_register_data_cb+0x98>
                    (inv_data_builder.process[kk].priority < priority)) {
1a0075d0:	492f      	ldr	r1, [pc, #188]	; (1a007690 <inv_register_data_cb+0x140>)
1a0075d2:	69ba      	ldr	r2, [r7, #24]
1a0075d4:	4613      	mov	r3, r2
1a0075d6:	005b      	lsls	r3, r3, #1
1a0075d8:	4413      	add	r3, r2
1a0075da:	009b      	lsls	r3, r3, #2
1a0075dc:	440b      	add	r3, r1
1a0075de:	3308      	adds	r3, #8
1a0075e0:	681a      	ldr	r2, [r3, #0]
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
1a0075e2:	68bb      	ldr	r3, [r7, #8]
1a0075e4:	429a      	cmp	r2, r3
1a0075e6:	dbeb      	blt.n	1a0075c0 <inv_register_data_cb+0x70>
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
            }
            if (kk != inv_data_builder.num_cb) {
1a0075e8:	4b29      	ldr	r3, [pc, #164]	; (1a007690 <inv_register_data_cb+0x140>)
1a0075ea:	681a      	ldr	r2, [r3, #0]
1a0075ec:	69bb      	ldr	r3, [r7, #24]
1a0075ee:	429a      	cmp	r2, r3
1a0075f0:	d01e      	beq.n	1a007630 <inv_register_data_cb+0xe0>
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
1a0075f2:	4b27      	ldr	r3, [pc, #156]	; (1a007690 <inv_register_data_cb+0x140>)
1a0075f4:	681b      	ldr	r3, [r3, #0]
1a0075f6:	617b      	str	r3, [r7, #20]
1a0075f8:	e016      	b.n	1a007628 <inv_register_data_cb+0xd8>
                    inv_data_builder.process[nn] =
                        inv_data_builder.process[nn - 1];
1a0075fa:	697b      	ldr	r3, [r7, #20]
1a0075fc:	1e5a      	subs	r2, r3, #1
                kk++;
            }
            if (kk != inv_data_builder.num_cb) {
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
                    inv_data_builder.process[nn] =
1a0075fe:	4824      	ldr	r0, [pc, #144]	; (1a007690 <inv_register_data_cb+0x140>)
1a007600:	6979      	ldr	r1, [r7, #20]
1a007602:	460b      	mov	r3, r1
1a007604:	005b      	lsls	r3, r3, #1
1a007606:	440b      	add	r3, r1
1a007608:	009b      	lsls	r3, r3, #2
1a00760a:	18c1      	adds	r1, r0, r3
1a00760c:	4820      	ldr	r0, [pc, #128]	; (1a007690 <inv_register_data_cb+0x140>)
1a00760e:	4613      	mov	r3, r2
1a007610:	005b      	lsls	r3, r3, #1
1a007612:	4413      	add	r3, r2
1a007614:	009b      	lsls	r3, r3, #2
1a007616:	18c2      	adds	r2, r0, r3
1a007618:	1d0b      	adds	r3, r1, #4
1a00761a:	3204      	adds	r2, #4
1a00761c:	ca07      	ldmia	r2, {r0, r1, r2}
1a00761e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
            }
            if (kk != inv_data_builder.num_cb) {
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
1a007622:	697b      	ldr	r3, [r7, #20]
1a007624:	3b01      	subs	r3, #1
1a007626:	617b      	str	r3, [r7, #20]
1a007628:	697a      	ldr	r2, [r7, #20]
1a00762a:	69bb      	ldr	r3, [r7, #24]
1a00762c:	429a      	cmp	r2, r3
1a00762e:	dce4      	bgt.n	1a0075fa <inv_register_data_cb+0xaa>
                        inv_data_builder.process[nn - 1];
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
1a007630:	4917      	ldr	r1, [pc, #92]	; (1a007690 <inv_register_data_cb+0x140>)
1a007632:	69ba      	ldr	r2, [r7, #24]
1a007634:	4613      	mov	r3, r2
1a007636:	005b      	lsls	r3, r3, #1
1a007638:	4413      	add	r3, r2
1a00763a:	009b      	lsls	r3, r3, #2
1a00763c:	440b      	add	r3, r1
1a00763e:	3304      	adds	r3, #4
1a007640:	68fa      	ldr	r2, [r7, #12]
1a007642:	601a      	str	r2, [r3, #0]
        inv_data_builder.process[kk].priority = priority;
1a007644:	4912      	ldr	r1, [pc, #72]	; (1a007690 <inv_register_data_cb+0x140>)
1a007646:	69ba      	ldr	r2, [r7, #24]
1a007648:	4613      	mov	r3, r2
1a00764a:	005b      	lsls	r3, r3, #1
1a00764c:	4413      	add	r3, r2
1a00764e:	009b      	lsls	r3, r3, #2
1a007650:	440b      	add	r3, r1
1a007652:	3308      	adds	r3, #8
1a007654:	68ba      	ldr	r2, [r7, #8]
1a007656:	601a      	str	r2, [r3, #0]
        inv_data_builder.process[kk].data_required = sensor_type;
1a007658:	490d      	ldr	r1, [pc, #52]	; (1a007690 <inv_register_data_cb+0x140>)
1a00765a:	69ba      	ldr	r2, [r7, #24]
1a00765c:	4613      	mov	r3, r2
1a00765e:	005b      	lsls	r3, r3, #1
1a007660:	4413      	add	r3, r2
1a007662:	009b      	lsls	r3, r3, #2
1a007664:	440b      	add	r3, r1
1a007666:	330c      	adds	r3, #12
1a007668:	687a      	ldr	r2, [r7, #4]
1a00766a:	601a      	str	r2, [r3, #0]
        inv_data_builder.num_cb++;
1a00766c:	4b08      	ldr	r3, [pc, #32]	; (1a007690 <inv_register_data_cb+0x140>)
1a00766e:	681b      	ldr	r3, [r3, #0]
1a007670:	3301      	adds	r3, #1
1a007672:	4a07      	ldr	r2, [pc, #28]	; (1a007690 <inv_register_data_cb+0x140>)
1a007674:	6013      	str	r3, [r2, #0]
1a007676:	e006      	b.n	1a007686 <inv_register_data_cb+0x136>
    } else {
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
1a007678:	4a06      	ldr	r2, [pc, #24]	; (1a007694 <inv_register_data_cb+0x144>)
1a00767a:	4907      	ldr	r1, [pc, #28]	; (1a007698 <inv_register_data_cb+0x148>)
1a00767c:	2006      	movs	r0, #6
1a00767e:	f7fb fc73 	bl	1a002f68 <_MLPrintLog>
        result = INV_ERROR_MEMORY_EXAUSTED;
1a007682:	230c      	movs	r3, #12
1a007684:	61fb      	str	r3, [r7, #28]
    }

    return result;
1a007686:	69fb      	ldr	r3, [r7, #28]
}
1a007688:	4618      	mov	r0, r3
1a00768a:	3720      	adds	r7, #32
1a00768c:	46bd      	mov	sp, r7
1a00768e:	bd80      	pop	{r7, pc}
1a007690:	10086590 	.word	0x10086590
1a007694:	1a019d18 	.word	0x1a019d18
1a007698:	1a019d5c 	.word	0x1a019d5c

1a00769c <inv_execute_on_data>:
* It will process the data it has received and update all the internal states
* and features that have been turned on.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_execute_on_data(void)
{
1a00769c:	b580      	push	{r7, lr}
1a00769e:	b084      	sub	sp, #16
1a0076a0:	af00      	add	r7, sp, #0
        int type = PLAYBACK_DBG_TYPE_EXECUTE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
    }
#endif
    // Determine what new data we have
    mode = 0;
1a0076a2:	2300      	movs	r3, #0
1a0076a4:	607b      	str	r3, [r7, #4]
    if (sensors.gyro.status & INV_NEW_DATA)
1a0076a6:	4b35      	ldr	r3, [pc, #212]	; (1a00777c <inv_execute_on_data+0xe0>)
1a0076a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0076aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0076ae:	2b00      	cmp	r3, #0
1a0076b0:	d003      	beq.n	1a0076ba <inv_execute_on_data+0x1e>
        mode |= INV_GYRO_NEW;
1a0076b2:	687b      	ldr	r3, [r7, #4]
1a0076b4:	f043 0302 	orr.w	r3, r3, #2
1a0076b8:	607b      	str	r3, [r7, #4]
    if (sensors.accel.status & INV_NEW_DATA)
1a0076ba:	4b30      	ldr	r3, [pc, #192]	; (1a00777c <inv_execute_on_data+0xe0>)
1a0076bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a0076be:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0076c2:	2b00      	cmp	r3, #0
1a0076c4:	d003      	beq.n	1a0076ce <inv_execute_on_data+0x32>
        mode |= INV_ACCEL_NEW;
1a0076c6:	687b      	ldr	r3, [r7, #4]
1a0076c8:	f043 0301 	orr.w	r3, r3, #1
1a0076cc:	607b      	str	r3, [r7, #4]
    if (sensors.compass.status & INV_NEW_DATA)
1a0076ce:	4b2b      	ldr	r3, [pc, #172]	; (1a00777c <inv_execute_on_data+0xe0>)
1a0076d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a0076d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0076d8:	2b00      	cmp	r3, #0
1a0076da:	d003      	beq.n	1a0076e4 <inv_execute_on_data+0x48>
        mode |= INV_MAG_NEW;
1a0076dc:	687b      	ldr	r3, [r7, #4]
1a0076de:	f043 0304 	orr.w	r3, r3, #4
1a0076e2:	607b      	str	r3, [r7, #4]
    if (sensors.temp.status & INV_NEW_DATA)
1a0076e4:	4b25      	ldr	r3, [pc, #148]	; (1a00777c <inv_execute_on_data+0xe0>)
1a0076e6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
1a0076ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0076ee:	2b00      	cmp	r3, #0
1a0076f0:	d003      	beq.n	1a0076fa <inv_execute_on_data+0x5e>
        mode |= INV_TEMP_NEW;
1a0076f2:	687b      	ldr	r3, [r7, #4]
1a0076f4:	f043 0308 	orr.w	r3, r3, #8
1a0076f8:	607b      	str	r3, [r7, #4]
    if (sensors.quat.status & INV_QUAT_NEW)
1a0076fa:	4b20      	ldr	r3, [pc, #128]	; (1a00777c <inv_execute_on_data+0xe0>)
1a0076fc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a007700:	f003 0310 	and.w	r3, r3, #16
1a007704:	2b00      	cmp	r3, #0
1a007706:	d003      	beq.n	1a007710 <inv_execute_on_data+0x74>
        mode |= INV_QUAT_NEW;
1a007708:	687b      	ldr	r3, [r7, #4]
1a00770a:	f043 0310 	orr.w	r3, r3, #16
1a00770e:	607b      	str	r3, [r7, #4]

    first_error = INV_SUCCESS;
1a007710:	2300      	movs	r3, #0
1a007712:	60fb      	str	r3, [r7, #12]

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1a007714:	2300      	movs	r3, #0
1a007716:	60bb      	str	r3, [r7, #8]
1a007718:	e023      	b.n	1a007762 <inv_execute_on_data+0xc6>
        if (mode & inv_data_builder.process[kk].data_required) {
1a00771a:	4919      	ldr	r1, [pc, #100]	; (1a007780 <inv_execute_on_data+0xe4>)
1a00771c:	68ba      	ldr	r2, [r7, #8]
1a00771e:	4613      	mov	r3, r2
1a007720:	005b      	lsls	r3, r3, #1
1a007722:	4413      	add	r3, r2
1a007724:	009b      	lsls	r3, r3, #2
1a007726:	440b      	add	r3, r1
1a007728:	330c      	adds	r3, #12
1a00772a:	681a      	ldr	r2, [r3, #0]
1a00772c:	687b      	ldr	r3, [r7, #4]
1a00772e:	4013      	ands	r3, r2
1a007730:	2b00      	cmp	r3, #0
1a007732:	d013      	beq.n	1a00775c <inv_execute_on_data+0xc0>
            result = inv_data_builder.process[kk].func(&sensors);
1a007734:	4912      	ldr	r1, [pc, #72]	; (1a007780 <inv_execute_on_data+0xe4>)
1a007736:	68ba      	ldr	r2, [r7, #8]
1a007738:	4613      	mov	r3, r2
1a00773a:	005b      	lsls	r3, r3, #1
1a00773c:	4413      	add	r3, r2
1a00773e:	009b      	lsls	r3, r3, #2
1a007740:	440b      	add	r3, r1
1a007742:	3304      	adds	r3, #4
1a007744:	681b      	ldr	r3, [r3, #0]
1a007746:	480d      	ldr	r0, [pc, #52]	; (1a00777c <inv_execute_on_data+0xe0>)
1a007748:	4798      	blx	r3
1a00774a:	6038      	str	r0, [r7, #0]
            if (result && !first_error) {
1a00774c:	683b      	ldr	r3, [r7, #0]
1a00774e:	2b00      	cmp	r3, #0
1a007750:	d004      	beq.n	1a00775c <inv_execute_on_data+0xc0>
1a007752:	68fb      	ldr	r3, [r7, #12]
1a007754:	2b00      	cmp	r3, #0
1a007756:	d101      	bne.n	1a00775c <inv_execute_on_data+0xc0>
                first_error = result;
1a007758:	683b      	ldr	r3, [r7, #0]
1a00775a:	60fb      	str	r3, [r7, #12]
    if (sensors.quat.status & INV_QUAT_NEW)
        mode |= INV_QUAT_NEW;

    first_error = INV_SUCCESS;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1a00775c:	68bb      	ldr	r3, [r7, #8]
1a00775e:	3301      	adds	r3, #1
1a007760:	60bb      	str	r3, [r7, #8]
1a007762:	4b07      	ldr	r3, [pc, #28]	; (1a007780 <inv_execute_on_data+0xe4>)
1a007764:	681a      	ldr	r2, [r3, #0]
1a007766:	68bb      	ldr	r3, [r7, #8]
1a007768:	429a      	cmp	r2, r3
1a00776a:	dcd6      	bgt.n	1a00771a <inv_execute_on_data+0x7e>
                first_error = result;
            }
        }
    }

    inv_set_contiguous();
1a00776c:	f000 f80a 	bl	1a007784 <inv_set_contiguous>

    return first_error;
1a007770:	68fb      	ldr	r3, [r7, #12]
}
1a007772:	4618      	mov	r0, r3
1a007774:	3710      	adds	r7, #16
1a007776:	46bd      	mov	sp, r7
1a007778:	bd80      	pop	{r7, pc}
1a00777a:	bf00      	nop
1a00777c:	100866d0 	.word	0x100866d0
1a007780:	10086590 	.word	0x10086590

1a007784 <inv_set_contiguous>:

/** Cleans up status bits after running all the callbacks. It sets the contiguous flag.
*
*/
static void inv_set_contiguous(void)
{
1a007784:	b480      	push	{r7}
1a007786:	b083      	sub	sp, #12
1a007788:	af00      	add	r7, sp, #0
    inv_time_t current_time = 0;
1a00778a:	2300      	movs	r3, #0
1a00778c:	607b      	str	r3, [r7, #4]
    if (sensors.gyro.status & INV_NEW_DATA) {
1a00778e:	4b48      	ldr	r3, [pc, #288]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a007790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a007792:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a007796:	2b00      	cmp	r3, #0
1a007798:	d008      	beq.n	1a0077ac <inv_set_contiguous+0x28>
        sensors.gyro.status |= INV_CONTIGUOUS;
1a00779a:	4b45      	ldr	r3, [pc, #276]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a00779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a00779e:	f043 0310 	orr.w	r3, r3, #16
1a0077a2:	4a43      	ldr	r2, [pc, #268]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a0077a4:	6313      	str	r3, [r2, #48]	; 0x30
        current_time = sensors.gyro.timestamp;
1a0077a6:	4b42      	ldr	r3, [pc, #264]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a0077a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1a0077aa:	607b      	str	r3, [r7, #4]
    }
    if (sensors.accel.status & INV_NEW_DATA) {
1a0077ac:	4b40      	ldr	r3, [pc, #256]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a0077ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a0077b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0077b4:	2b00      	cmp	r3, #0
1a0077b6:	d00c      	beq.n	1a0077d2 <inv_set_contiguous+0x4e>
        sensors.accel.status |= INV_CONTIGUOUS;
1a0077b8:	4b3d      	ldr	r3, [pc, #244]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a0077ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a0077bc:	f043 0310 	orr.w	r3, r3, #16
1a0077c0:	4a3b      	ldr	r2, [pc, #236]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a0077c2:	6753      	str	r3, [r2, #116]	; 0x74
        current_time = MAX(current_time, sensors.accel.timestamp);
1a0077c4:	4b3a      	ldr	r3, [pc, #232]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a0077c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1a0077c8:	687a      	ldr	r2, [r7, #4]
1a0077ca:	4293      	cmp	r3, r2
1a0077cc:	bf38      	it	cc
1a0077ce:	4613      	movcc	r3, r2
1a0077d0:	607b      	str	r3, [r7, #4]
    }
    if (sensors.compass.status & INV_NEW_DATA) {
1a0077d2:	4b37      	ldr	r3, [pc, #220]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a0077d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a0077d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0077dc:	2b00      	cmp	r3, #0
1a0077de:	d00f      	beq.n	1a007800 <inv_set_contiguous+0x7c>
        sensors.compass.status |= INV_CONTIGUOUS;
1a0077e0:	4b33      	ldr	r3, [pc, #204]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a0077e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a0077e6:	f043 0310 	orr.w	r3, r3, #16
1a0077ea:	4a31      	ldr	r2, [pc, #196]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a0077ec:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
        current_time = MAX(current_time, sensors.compass.timestamp);
1a0077f0:	4b2f      	ldr	r3, [pc, #188]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a0077f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
1a0077f6:	687a      	ldr	r2, [r7, #4]
1a0077f8:	4293      	cmp	r3, r2
1a0077fa:	bf38      	it	cc
1a0077fc:	4613      	movcc	r3, r2
1a0077fe:	607b      	str	r3, [r7, #4]
    }
    if (sensors.temp.status & INV_NEW_DATA) {
1a007800:	4b2b      	ldr	r3, [pc, #172]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a007802:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
1a007806:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a00780a:	2b00      	cmp	r3, #0
1a00780c:	d00f      	beq.n	1a00782e <inv_set_contiguous+0xaa>
        sensors.temp.status |= INV_CONTIGUOUS;
1a00780e:	4b28      	ldr	r3, [pc, #160]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a007810:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
1a007814:	f043 0310 	orr.w	r3, r3, #16
1a007818:	4a25      	ldr	r2, [pc, #148]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a00781a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
        current_time = MAX(current_time, sensors.temp.timestamp);
1a00781e:	4b24      	ldr	r3, [pc, #144]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a007820:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
1a007824:	687a      	ldr	r2, [r7, #4]
1a007826:	4293      	cmp	r3, r2
1a007828:	bf38      	it	cc
1a00782a:	4613      	movcc	r3, r2
1a00782c:	607b      	str	r3, [r7, #4]
    }
    if (sensors.quat.status & INV_NEW_DATA) {
1a00782e:	4b20      	ldr	r3, [pc, #128]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a007830:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a007834:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a007838:	2b00      	cmp	r3, #0
1a00783a:	d00f      	beq.n	1a00785c <inv_set_contiguous+0xd8>
        sensors.quat.status |= INV_CONTIGUOUS;
1a00783c:	4b1c      	ldr	r3, [pc, #112]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a00783e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a007842:	f043 0310 	orr.w	r3, r3, #16
1a007846:	4a1a      	ldr	r2, [pc, #104]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a007848:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
        current_time = MAX(current_time, sensors.quat.timestamp);
1a00784c:	4b18      	ldr	r3, [pc, #96]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a00784e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
1a007852:	687a      	ldr	r2, [r7, #4]
1a007854:	4293      	cmp	r3, r2
1a007856:	bf38      	it	cc
1a007858:	4613      	movcc	r3, r2
1a00785a:	607b      	str	r3, [r7, #4]
    if (inv_delta_time_ms(current_time, sensors.temp.timestamp) >= 2000)
        inv_temperature_was_turned_off();
#endif

    /* clear bits */
    sensors.gyro.status &= ~INV_NEW_DATA;
1a00785c:	4b14      	ldr	r3, [pc, #80]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a00785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a007860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a007864:	4a12      	ldr	r2, [pc, #72]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a007866:	6313      	str	r3, [r2, #48]	; 0x30
    sensors.accel.status &= ~INV_NEW_DATA;
1a007868:	4b11      	ldr	r3, [pc, #68]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a00786a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a00786c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a007870:	4a0f      	ldr	r2, [pc, #60]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a007872:	6753      	str	r3, [r2, #116]	; 0x74
    sensors.compass.status &= ~INV_NEW_DATA;
1a007874:	4b0e      	ldr	r3, [pc, #56]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a007876:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a00787a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00787e:	4a0c      	ldr	r2, [pc, #48]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a007880:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    sensors.temp.status &= ~INV_NEW_DATA;
1a007884:	4b0a      	ldr	r3, [pc, #40]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a007886:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
1a00788a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00788e:	4a08      	ldr	r2, [pc, #32]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a007890:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    sensors.quat.status &= ~INV_NEW_DATA;
1a007894:	4b06      	ldr	r3, [pc, #24]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a007896:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a00789a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00789e:	4a04      	ldr	r2, [pc, #16]	; (1a0078b0 <inv_set_contiguous+0x12c>)
1a0078a0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
}
1a0078a4:	bf00      	nop
1a0078a6:	370c      	adds	r7, #12
1a0078a8:	46bd      	mov	sp, r7
1a0078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0078ae:	4770      	bx	lr
1a0078b0:	100866d0 	.word	0x100866d0

1a0078b4 <inv_get_accel_set>:
 * @param[out] data Accel Data where 1g = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
*/
void inv_get_accel_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a0078b4:	b580      	push	{r7, lr}
1a0078b6:	b084      	sub	sp, #16
1a0078b8:	af00      	add	r7, sp, #0
1a0078ba:	60f8      	str	r0, [r7, #12]
1a0078bc:	60b9      	str	r1, [r7, #8]
1a0078be:	607a      	str	r2, [r7, #4]
    if (data != NULL) {
1a0078c0:	68fb      	ldr	r3, [r7, #12]
1a0078c2:	2b00      	cmp	r3, #0
1a0078c4:	d004      	beq.n	1a0078d0 <inv_get_accel_set+0x1c>
        memcpy(data, sensors.accel.calibrated, sizeof(sensors.accel.calibrated));
1a0078c6:	220c      	movs	r2, #12
1a0078c8:	490b      	ldr	r1, [pc, #44]	; (1a0078f8 <inv_get_accel_set+0x44>)
1a0078ca:	68f8      	ldr	r0, [r7, #12]
1a0078cc:	f00d f98a 	bl	1a014be4 <memcpy>
    }
    if (timestamp != NULL) {
1a0078d0:	687b      	ldr	r3, [r7, #4]
1a0078d2:	2b00      	cmp	r3, #0
1a0078d4:	d003      	beq.n	1a0078de <inv_get_accel_set+0x2a>
        *timestamp = sensors.accel.timestamp;
1a0078d6:	4b09      	ldr	r3, [pc, #36]	; (1a0078fc <inv_get_accel_set+0x48>)
1a0078d8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
1a0078da:	687b      	ldr	r3, [r7, #4]
1a0078dc:	601a      	str	r2, [r3, #0]
    }
    if (accuracy != NULL) {
1a0078de:	68bb      	ldr	r3, [r7, #8]
1a0078e0:	2b00      	cmp	r3, #0
1a0078e2:	d004      	beq.n	1a0078ee <inv_get_accel_set+0x3a>
        *accuracy = sensors.accel.accuracy;
1a0078e4:	4b05      	ldr	r3, [pc, #20]	; (1a0078fc <inv_get_accel_set+0x48>)
1a0078e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1a0078e8:	b2da      	uxtb	r2, r3
1a0078ea:	68bb      	ldr	r3, [r7, #8]
1a0078ec:	701a      	strb	r2, [r3, #0]
    }
}
1a0078ee:	bf00      	nop
1a0078f0:	3710      	adds	r7, #16
1a0078f2:	46bd      	mov	sp, r7
1a0078f4:	bd80      	pop	{r7, pc}
1a0078f6:	bf00      	nop
1a0078f8:	1008672c 	.word	0x1008672c
1a0078fc:	100866d0 	.word	0x100866d0

1a007900 <inv_get_gyro_set>:
 * @param[out] data Gyro Data where 1 dps = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
*/
void inv_get_gyro_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a007900:	b580      	push	{r7, lr}
1a007902:	b084      	sub	sp, #16
1a007904:	af00      	add	r7, sp, #0
1a007906:	60f8      	str	r0, [r7, #12]
1a007908:	60b9      	str	r1, [r7, #8]
1a00790a:	607a      	str	r2, [r7, #4]
    memcpy(data, sensors.gyro.calibrated, sizeof(sensors.gyro.calibrated));
1a00790c:	220c      	movs	r2, #12
1a00790e:	490b      	ldr	r1, [pc, #44]	; (1a00793c <inv_get_gyro_set+0x3c>)
1a007910:	68f8      	ldr	r0, [r7, #12]
1a007912:	f00d f967 	bl	1a014be4 <memcpy>
    if (timestamp != NULL) {
1a007916:	687b      	ldr	r3, [r7, #4]
1a007918:	2b00      	cmp	r3, #0
1a00791a:	d003      	beq.n	1a007924 <inv_get_gyro_set+0x24>
        *timestamp = sensors.gyro.timestamp;
1a00791c:	4b08      	ldr	r3, [pc, #32]	; (1a007940 <inv_get_gyro_set+0x40>)
1a00791e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a007920:	687b      	ldr	r3, [r7, #4]
1a007922:	601a      	str	r2, [r3, #0]
    }
    if (accuracy != NULL) {
1a007924:	68bb      	ldr	r3, [r7, #8]
1a007926:	2b00      	cmp	r3, #0
1a007928:	d004      	beq.n	1a007934 <inv_get_gyro_set+0x34>
        *accuracy = sensors.gyro.accuracy;
1a00792a:	4b05      	ldr	r3, [pc, #20]	; (1a007940 <inv_get_gyro_set+0x40>)
1a00792c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a00792e:	b2da      	uxtb	r2, r3
1a007930:	68bb      	ldr	r3, [r7, #8]
1a007932:	701a      	strb	r2, [r3, #0]
    }
}
1a007934:	bf00      	nop
1a007936:	3710      	adds	r7, #16
1a007938:	46bd      	mov	sp, r7
1a00793a:	bd80      	pop	{r7, pc}
1a00793c:	100866e8 	.word	0x100866e8
1a007940:	100866d0 	.word	0x100866d0

1a007944 <inv_get_gyro>:

/** Get's latest gyro data.
* @param[out] gyro Gyro Data, Length 3. 1 dps = 2^16.
*/
void inv_get_gyro(long *gyro)
{
1a007944:	b580      	push	{r7, lr}
1a007946:	b082      	sub	sp, #8
1a007948:	af00      	add	r7, sp, #0
1a00794a:	6078      	str	r0, [r7, #4]
    memcpy(gyro, sensors.gyro.calibrated, sizeof(sensors.gyro.calibrated));
1a00794c:	220c      	movs	r2, #12
1a00794e:	4904      	ldr	r1, [pc, #16]	; (1a007960 <inv_get_gyro+0x1c>)
1a007950:	6878      	ldr	r0, [r7, #4]
1a007952:	f00d f947 	bl	1a014be4 <memcpy>
}
1a007956:	bf00      	nop
1a007958:	3708      	adds	r7, #8
1a00795a:	46bd      	mov	sp, r7
1a00795c:	bd80      	pop	{r7, pc}
1a00795e:	bf00      	nop
1a007960:	100866e8 	.word	0x100866e8

1a007964 <inv_get_compass_set>:
 * @param[out] data Compass Data where 1 uT = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
*/
void inv_get_compass_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a007964:	b580      	push	{r7, lr}
1a007966:	b084      	sub	sp, #16
1a007968:	af00      	add	r7, sp, #0
1a00796a:	60f8      	str	r0, [r7, #12]
1a00796c:	60b9      	str	r1, [r7, #8]
1a00796e:	607a      	str	r2, [r7, #4]
    memcpy(data, sensors.compass.calibrated, sizeof(sensors.compass.calibrated));
1a007970:	220c      	movs	r2, #12
1a007972:	4911      	ldr	r1, [pc, #68]	; (1a0079b8 <inv_get_compass_set+0x54>)
1a007974:	68f8      	ldr	r0, [r7, #12]
1a007976:	f00d f935 	bl	1a014be4 <memcpy>
    if (timestamp != NULL) {
1a00797a:	687b      	ldr	r3, [r7, #4]
1a00797c:	2b00      	cmp	r3, #0
1a00797e:	d004      	beq.n	1a00798a <inv_get_compass_set+0x26>
        *timestamp = sensors.compass.timestamp;
1a007980:	4b0e      	ldr	r3, [pc, #56]	; (1a0079bc <inv_get_compass_set+0x58>)
1a007982:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
1a007986:	687b      	ldr	r3, [r7, #4]
1a007988:	601a      	str	r2, [r3, #0]
    }
    if (accuracy != NULL) {
1a00798a:	68bb      	ldr	r3, [r7, #8]
1a00798c:	2b00      	cmp	r3, #0
1a00798e:	d00e      	beq.n	1a0079ae <inv_get_compass_set+0x4a>
        if (inv_data_builder.compass_disturbance)
1a007990:	4b0b      	ldr	r3, [pc, #44]	; (1a0079c0 <inv_get_compass_set+0x5c>)
1a007992:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
1a007996:	2b00      	cmp	r3, #0
1a007998:	d003      	beq.n	1a0079a2 <inv_get_compass_set+0x3e>
            *accuracy = 0;
1a00799a:	68bb      	ldr	r3, [r7, #8]
1a00799c:	2200      	movs	r2, #0
1a00799e:	701a      	strb	r2, [r3, #0]
        else
            *accuracy = sensors.compass.accuracy;
    }
}
1a0079a0:	e005      	b.n	1a0079ae <inv_get_compass_set+0x4a>
    }
    if (accuracy != NULL) {
        if (inv_data_builder.compass_disturbance)
            *accuracy = 0;
        else
            *accuracy = sensors.compass.accuracy;
1a0079a2:	4b06      	ldr	r3, [pc, #24]	; (1a0079bc <inv_get_compass_set+0x58>)
1a0079a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
1a0079a8:	b2da      	uxtb	r2, r3
1a0079aa:	68bb      	ldr	r3, [r7, #8]
1a0079ac:	701a      	strb	r2, [r3, #0]
    }
}
1a0079ae:	bf00      	nop
1a0079b0:	3710      	adds	r7, #16
1a0079b2:	46bd      	mov	sp, r7
1a0079b4:	bd80      	pop	{r7, pc}
1a0079b6:	bf00      	nop
1a0079b8:	10086770 	.word	0x10086770
1a0079bc:	100866d0 	.word	0x100866d0
1a0079c0:	10086590 	.word	0x10086590

1a0079c4 <inv_get_gyro_accuracy>:

/** Returns accuracy of gyro.
 * @return Accuracy of gyro with 0 being not accurate, and 3 being most accurate.
*/
int inv_get_gyro_accuracy(void)
{
1a0079c4:	b480      	push	{r7}
1a0079c6:	af00      	add	r7, sp, #0
    return sensors.gyro.accuracy;
1a0079c8:	4b03      	ldr	r3, [pc, #12]	; (1a0079d8 <inv_get_gyro_accuracy+0x14>)
1a0079ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
1a0079cc:	4618      	mov	r0, r3
1a0079ce:	46bd      	mov	sp, r7
1a0079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0079d4:	4770      	bx	lr
1a0079d6:	bf00      	nop
1a0079d8:	100866d0 	.word	0x100866d0

1a0079dc <inv_get_mag_accuracy>:

/** Returns accuracy of compass.
 * @return Accuracy of compass with 0 being not accurate, and 3 being most accurate.
*/
int inv_get_mag_accuracy(void)
{
1a0079dc:	b480      	push	{r7}
1a0079de:	af00      	add	r7, sp, #0
    if (inv_data_builder.compass_disturbance)
1a0079e0:	4b07      	ldr	r3, [pc, #28]	; (1a007a00 <inv_get_mag_accuracy+0x24>)
1a0079e2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
1a0079e6:	2b00      	cmp	r3, #0
1a0079e8:	d001      	beq.n	1a0079ee <inv_get_mag_accuracy+0x12>
        return 0;
1a0079ea:	2300      	movs	r3, #0
1a0079ec:	e002      	b.n	1a0079f4 <inv_get_mag_accuracy+0x18>
    return sensors.compass.accuracy;
1a0079ee:	4b05      	ldr	r3, [pc, #20]	; (1a007a04 <inv_get_mag_accuracy+0x28>)
1a0079f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
}
1a0079f4:	4618      	mov	r0, r3
1a0079f6:	46bd      	mov	sp, r7
1a0079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0079fc:	4770      	bx	lr
1a0079fe:	bf00      	nop
1a007a00:	10086590 	.word	0x10086590
1a007a04:	100866d0 	.word	0x100866d0

1a007a08 <inv_get_accel_accuracy>:

/** Returns accuracy of accel.
 * @return Accuracy of accel with 0 being not accurate, and 3 being most accurate.
*/
int inv_get_accel_accuracy(void)
{
1a007a08:	b480      	push	{r7}
1a007a0a:	af00      	add	r7, sp, #0
    return sensors.accel.accuracy;
1a007a0c:	4b03      	ldr	r3, [pc, #12]	; (1a007a1c <inv_get_accel_accuracy+0x14>)
1a007a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
1a007a10:	4618      	mov	r0, r3
1a007a12:	46bd      	mov	sp, r7
1a007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
1a007a18:	4770      	bx	lr
1a007a1a:	bf00      	nop
1a007a1c:	100866d0 	.word	0x100866d0

1a007a20 <inv_get_compass_soft_iron_output_data>:
}

/** This subroutine gets the fixed point Q30 compass data after the soft iron transformation.
 * @param[out] the pointer of the 3x1 vector compass data in MPL format
*/
void inv_get_compass_soft_iron_output_data(long *data) {
1a007a20:	b480      	push	{r7}
1a007a22:	b085      	sub	sp, #20
1a007a24:	af00      	add	r7, sp, #0
1a007a26:	6078      	str	r0, [r7, #4]
    int i;
    for (i=0; i<3; i++)  {
1a007a28:	2300      	movs	r3, #0
1a007a2a:	60fb      	str	r3, [r7, #12]
1a007a2c:	e00d      	b.n	1a007a4a <inv_get_compass_soft_iron_output_data+0x2a>
        data[i] = sensors.soft_iron.trans[i];
1a007a2e:	68fb      	ldr	r3, [r7, #12]
1a007a30:	009b      	lsls	r3, r3, #2
1a007a32:	687a      	ldr	r2, [r7, #4]
1a007a34:	441a      	add	r2, r3
1a007a36:	4909      	ldr	r1, [pc, #36]	; (1a007a5c <inv_get_compass_soft_iron_output_data+0x3c>)
1a007a38:	68fb      	ldr	r3, [r7, #12]
1a007a3a:	334e      	adds	r3, #78	; 0x4e
1a007a3c:	009b      	lsls	r3, r3, #2
1a007a3e:	440b      	add	r3, r1
1a007a40:	685b      	ldr	r3, [r3, #4]
1a007a42:	6013      	str	r3, [r2, #0]
/** This subroutine gets the fixed point Q30 compass data after the soft iron transformation.
 * @param[out] the pointer of the 3x1 vector compass data in MPL format
*/
void inv_get_compass_soft_iron_output_data(long *data) {
    int i;
    for (i=0; i<3; i++)  {
1a007a44:	68fb      	ldr	r3, [r7, #12]
1a007a46:	3301      	adds	r3, #1
1a007a48:	60fb      	str	r3, [r7, #12]
1a007a4a:	68fb      	ldr	r3, [r7, #12]
1a007a4c:	2b02      	cmp	r3, #2
1a007a4e:	ddee      	ble.n	1a007a2e <inv_get_compass_soft_iron_output_data+0xe>
        data[i] = sensors.soft_iron.trans[i];
    }
}
1a007a50:	bf00      	nop
1a007a52:	3714      	adds	r7, #20
1a007a54:	46bd      	mov	sp, r7
1a007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
1a007a5a:	4770      	bx	lr
1a007a5c:	100866d0 	.word	0x100866d0

1a007a60 <inv_set_compass_soft_iron_input_data>:
    }
}
/** This subroutine sets the compass raw data for the soft iron transformation.
 * @param[int] the pointer of the 3x1 vector compass raw data in MPL format
*/
void inv_set_compass_soft_iron_input_data(const long *data)  {
1a007a60:	b580      	push	{r7, lr}
1a007a62:	b084      	sub	sp, #16
1a007a64:	af00      	add	r7, sp, #0
1a007a66:	6078      	str	r0, [r7, #4]
    int i;
    for (i=0; i<3; i++)  {
1a007a68:	2300      	movs	r3, #0
1a007a6a:	60fb      	str	r3, [r7, #12]
1a007a6c:	e00c      	b.n	1a007a88 <inv_set_compass_soft_iron_input_data+0x28>
        sensors.soft_iron.raw[i] = data[i];
1a007a6e:	68fb      	ldr	r3, [r7, #12]
1a007a70:	009b      	lsls	r3, r3, #2
1a007a72:	687a      	ldr	r2, [r7, #4]
1a007a74:	4413      	add	r3, r2
1a007a76:	681a      	ldr	r2, [r3, #0]
1a007a78:	4916      	ldr	r1, [pc, #88]	; (1a007ad4 <inv_set_compass_soft_iron_input_data+0x74>)
1a007a7a:	68fb      	ldr	r3, [r7, #12]
1a007a7c:	334c      	adds	r3, #76	; 0x4c
1a007a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
/** This subroutine sets the compass raw data for the soft iron transformation.
 * @param[int] the pointer of the 3x1 vector compass raw data in MPL format
*/
void inv_set_compass_soft_iron_input_data(const long *data)  {
    int i;
    for (i=0; i<3; i++)  {
1a007a82:	68fb      	ldr	r3, [r7, #12]
1a007a84:	3301      	adds	r3, #1
1a007a86:	60fb      	str	r3, [r7, #12]
1a007a88:	68fb      	ldr	r3, [r7, #12]
1a007a8a:	2b02      	cmp	r3, #2
1a007a8c:	ddef      	ble.n	1a007a6e <inv_set_compass_soft_iron_input_data+0xe>
        sensors.soft_iron.raw[i] = data[i];
    }
    if (sensors.soft_iron.enable == 1)  {
1a007a8e:	4b11      	ldr	r3, [pc, #68]	; (1a007ad4 <inv_set_compass_soft_iron_input_data+0x74>)
1a007a90:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
1a007a94:	2b01      	cmp	r3, #1
1a007a96:	d105      	bne.n	1a007aa4 <inv_set_compass_soft_iron_input_data+0x44>
        mlMatrixVectorMult(sensors.soft_iron.matrix_d, data, sensors.soft_iron.trans);
1a007a98:	4a0f      	ldr	r2, [pc, #60]	; (1a007ad8 <inv_set_compass_soft_iron_input_data+0x78>)
1a007a9a:	6879      	ldr	r1, [r7, #4]
1a007a9c:	480f      	ldr	r0, [pc, #60]	; (1a007adc <inv_set_compass_soft_iron_input_data+0x7c>)
1a007a9e:	f000 ffcd 	bl	1a008a3c <mlMatrixVectorMult>
    } else {
        for (i=0; i<3; i++)  {
            sensors.soft_iron.trans[i] = data[i];
        }
    }
}
1a007aa2:	e013      	b.n	1a007acc <inv_set_compass_soft_iron_input_data+0x6c>
        sensors.soft_iron.raw[i] = data[i];
    }
    if (sensors.soft_iron.enable == 1)  {
        mlMatrixVectorMult(sensors.soft_iron.matrix_d, data, sensors.soft_iron.trans);
    } else {
        for (i=0; i<3; i++)  {
1a007aa4:	2300      	movs	r3, #0
1a007aa6:	60fb      	str	r3, [r7, #12]
1a007aa8:	e00d      	b.n	1a007ac6 <inv_set_compass_soft_iron_input_data+0x66>
            sensors.soft_iron.trans[i] = data[i];
1a007aaa:	68fb      	ldr	r3, [r7, #12]
1a007aac:	009b      	lsls	r3, r3, #2
1a007aae:	687a      	ldr	r2, [r7, #4]
1a007ab0:	4413      	add	r3, r2
1a007ab2:	681a      	ldr	r2, [r3, #0]
1a007ab4:	4907      	ldr	r1, [pc, #28]	; (1a007ad4 <inv_set_compass_soft_iron_input_data+0x74>)
1a007ab6:	68fb      	ldr	r3, [r7, #12]
1a007ab8:	334e      	adds	r3, #78	; 0x4e
1a007aba:	009b      	lsls	r3, r3, #2
1a007abc:	440b      	add	r3, r1
1a007abe:	605a      	str	r2, [r3, #4]
        sensors.soft_iron.raw[i] = data[i];
    }
    if (sensors.soft_iron.enable == 1)  {
        mlMatrixVectorMult(sensors.soft_iron.matrix_d, data, sensors.soft_iron.trans);
    } else {
        for (i=0; i<3; i++)  {
1a007ac0:	68fb      	ldr	r3, [r7, #12]
1a007ac2:	3301      	adds	r3, #1
1a007ac4:	60fb      	str	r3, [r7, #12]
1a007ac6:	68fb      	ldr	r3, [r7, #12]
1a007ac8:	2b02      	cmp	r3, #2
1a007aca:	ddee      	ble.n	1a007aaa <inv_set_compass_soft_iron_input_data+0x4a>
            sensors.soft_iron.trans[i] = data[i];
        }
    }
}
1a007acc:	bf00      	nop
1a007ace:	3710      	adds	r7, #16
1a007ad0:	46bd      	mov	sp, r7
1a007ad2:	bd80      	pop	{r7, pc}
1a007ad4:	100866d0 	.word	0x100866d0
1a007ad8:	1008680c 	.word	0x1008680c
1a007adc:	10086818 	.word	0x10086818

1a007ae0 <inv_reset_compass_soft_iron_matrix>:

/** This subroutine resets the the soft iron transformation to unity matrix and
 * disable the soft iron transformation process by default.
*/
void inv_reset_compass_soft_iron_matrix(void)  {
1a007ae0:	b580      	push	{r7, lr}
1a007ae2:	b082      	sub	sp, #8
1a007ae4:	af00      	add	r7, sp, #0
    int i;
    for (i=0; i<9; i++) {
1a007ae6:	2300      	movs	r3, #0
1a007ae8:	607b      	str	r3, [r7, #4]
1a007aea:	e00b      	b.n	1a007b04 <inv_reset_compass_soft_iron_matrix+0x24>
        sensors.soft_iron.matrix_f[i] = 0.0f;
1a007aec:	4a1a      	ldr	r2, [pc, #104]	; (1a007b58 <inv_reset_compass_soft_iron_matrix+0x78>)
1a007aee:	687b      	ldr	r3, [r7, #4]
1a007af0:	335a      	adds	r3, #90	; 0x5a
1a007af2:	009b      	lsls	r3, r3, #2
1a007af4:	4413      	add	r3, r2
1a007af6:	3304      	adds	r3, #4
1a007af8:	f04f 0200 	mov.w	r2, #0
1a007afc:	601a      	str	r2, [r3, #0]
/** This subroutine resets the the soft iron transformation to unity matrix and
 * disable the soft iron transformation process by default.
*/
void inv_reset_compass_soft_iron_matrix(void)  {
    int i;
    for (i=0; i<9; i++) {
1a007afe:	687b      	ldr	r3, [r7, #4]
1a007b00:	3301      	adds	r3, #1
1a007b02:	607b      	str	r3, [r7, #4]
1a007b04:	687b      	ldr	r3, [r7, #4]
1a007b06:	2b08      	cmp	r3, #8
1a007b08:	ddf0      	ble.n	1a007aec <inv_reset_compass_soft_iron_matrix+0xc>
        sensors.soft_iron.matrix_f[i] = 0.0f;
    }

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));
1a007b0a:	2224      	movs	r2, #36	; 0x24
1a007b0c:	2100      	movs	r1, #0
1a007b0e:	4813      	ldr	r0, [pc, #76]	; (1a007b5c <inv_reset_compass_soft_iron_matrix+0x7c>)
1a007b10:	f00d f966 	bl	1a014de0 <memset>

    for (i=0; i<3; i++)  {
1a007b14:	2300      	movs	r3, #0
1a007b16:	607b      	str	r3, [r7, #4]
1a007b18:	e014      	b.n	1a007b44 <inv_reset_compass_soft_iron_matrix+0x64>
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i*4] = 1.0;
1a007b1a:	687b      	ldr	r3, [r7, #4]
1a007b1c:	009b      	lsls	r3, r3, #2
1a007b1e:	4a0e      	ldr	r2, [pc, #56]	; (1a007b58 <inv_reset_compass_soft_iron_matrix+0x78>)
1a007b20:	335a      	adds	r3, #90	; 0x5a
1a007b22:	009b      	lsls	r3, r3, #2
1a007b24:	4413      	add	r3, r2
1a007b26:	3304      	adds	r3, #4
1a007b28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a007b2c:	601a      	str	r2, [r3, #0]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
1a007b2e:	687b      	ldr	r3, [r7, #4]
1a007b30:	009b      	lsls	r3, r3, #2
1a007b32:	4a09      	ldr	r2, [pc, #36]	; (1a007b58 <inv_reset_compass_soft_iron_matrix+0x78>)
1a007b34:	3352      	adds	r3, #82	; 0x52
1a007b36:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
1a007b3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        sensors.soft_iron.matrix_f[i] = 0.0f;
    }

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));

    for (i=0; i<3; i++)  {
1a007b3e:	687b      	ldr	r3, [r7, #4]
1a007b40:	3301      	adds	r3, #1
1a007b42:	607b      	str	r3, [r7, #4]
1a007b44:	687b      	ldr	r3, [r7, #4]
1a007b46:	2b02      	cmp	r3, #2
1a007b48:	dde7      	ble.n	1a007b1a <inv_reset_compass_soft_iron_matrix+0x3a>
        sensors.soft_iron.matrix_f[i*4] = 1.0;
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
    }

    inv_disable_compass_soft_iron_matrix();
1a007b4a:	f000 f809 	bl	1a007b60 <inv_disable_compass_soft_iron_matrix>
}
1a007b4e:	bf00      	nop
1a007b50:	3708      	adds	r7, #8
1a007b52:	46bd      	mov	sp, r7
1a007b54:	bd80      	pop	{r7, pc}
1a007b56:	bf00      	nop
1a007b58:	100866d0 	.word	0x100866d0
1a007b5c:	10086818 	.word	0x10086818

1a007b60 <inv_disable_compass_soft_iron_matrix>:
    sensors.soft_iron.enable = 1;
}

/** This subroutine disables the the soft iron transformation process.
*/
void inv_disable_compass_soft_iron_matrix(void)   {
1a007b60:	b480      	push	{r7}
1a007b62:	af00      	add	r7, sp, #0
    sensors.soft_iron.enable = 0;
1a007b64:	4b04      	ldr	r3, [pc, #16]	; (1a007b78 <inv_disable_compass_soft_iron_matrix+0x18>)
1a007b66:	2200      	movs	r2, #0
1a007b68:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
}
1a007b6c:	bf00      	nop
1a007b6e:	46bd      	mov	sp, r7
1a007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
1a007b74:	4770      	bx	lr
1a007b76:	bf00      	nop
1a007b78:	100866d0 	.word	0x100866d0

1a007b7c <inv_get_sensor_type_linear_acceleration>:
*             inv_build_accel().
* @return     Returns 1 if the data was updated or 0 if it was not updated.
*/
int inv_get_sensor_type_linear_acceleration(float *values, int8_t *accuracy,
        inv_time_t * timestamp)
{
1a007b7c:	b580      	push	{r7, lr}
1a007b7e:	b08a      	sub	sp, #40	; 0x28
1a007b80:	af00      	add	r7, sp, #0
1a007b82:	60f8      	str	r0, [r7, #12]
1a007b84:	60b9      	str	r1, [r7, #8]
1a007b86:	607a      	str	r2, [r7, #4]
    long gravity[3], accel[3];

    inv_get_accel_set(accel, accuracy, timestamp);
1a007b88:	f107 0310 	add.w	r3, r7, #16
1a007b8c:	687a      	ldr	r2, [r7, #4]
1a007b8e:	68b9      	ldr	r1, [r7, #8]
1a007b90:	4618      	mov	r0, r3
1a007b92:	f7ff fe8f 	bl	1a0078b4 <inv_get_accel_set>
    inv_get_gravity(gravity);
1a007b96:	f107 031c 	add.w	r3, r7, #28
1a007b9a:	4618      	mov	r0, r3
1a007b9c:	f001 f8b4 	bl	1a008d08 <inv_get_gravity>
    accel[0] -= gravity[0] >> 14;
1a007ba0:	693a      	ldr	r2, [r7, #16]
1a007ba2:	69fb      	ldr	r3, [r7, #28]
1a007ba4:	139b      	asrs	r3, r3, #14
1a007ba6:	1ad3      	subs	r3, r2, r3
1a007ba8:	613b      	str	r3, [r7, #16]
    accel[1] -= gravity[1] >> 14;
1a007baa:	697a      	ldr	r2, [r7, #20]
1a007bac:	6a3b      	ldr	r3, [r7, #32]
1a007bae:	139b      	asrs	r3, r3, #14
1a007bb0:	1ad3      	subs	r3, r2, r3
1a007bb2:	617b      	str	r3, [r7, #20]
    accel[2] -= gravity[2] >> 14;
1a007bb4:	69ba      	ldr	r2, [r7, #24]
1a007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a007bb8:	139b      	asrs	r3, r3, #14
1a007bba:	1ad3      	subs	r3, r2, r3
1a007bbc:	61bb      	str	r3, [r7, #24]
    values[0] = accel[0] * ACCEL_CONVERSION;
1a007bbe:	693b      	ldr	r3, [r7, #16]
1a007bc0:	ee07 3a90 	vmov	s15, r3
1a007bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a007bc8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 1a007c18 <inv_get_sensor_type_linear_acceleration+0x9c>
1a007bcc:	ee67 7a87 	vmul.f32	s15, s15, s14
1a007bd0:	68fb      	ldr	r3, [r7, #12]
1a007bd2:	edc3 7a00 	vstr	s15, [r3]
    values[1] = accel[1] * ACCEL_CONVERSION;
1a007bd6:	68fb      	ldr	r3, [r7, #12]
1a007bd8:	3304      	adds	r3, #4
1a007bda:	697a      	ldr	r2, [r7, #20]
1a007bdc:	ee07 2a90 	vmov	s15, r2
1a007be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a007be4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 1a007c18 <inv_get_sensor_type_linear_acceleration+0x9c>
1a007be8:	ee67 7a87 	vmul.f32	s15, s15, s14
1a007bec:	edc3 7a00 	vstr	s15, [r3]
    values[2] = accel[2] * ACCEL_CONVERSION;
1a007bf0:	68fb      	ldr	r3, [r7, #12]
1a007bf2:	3308      	adds	r3, #8
1a007bf4:	69ba      	ldr	r2, [r7, #24]
1a007bf6:	ee07 2a90 	vmov	s15, r2
1a007bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a007bfe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 1a007c18 <inv_get_sensor_type_linear_acceleration+0x9c>
1a007c02:	ee67 7a87 	vmul.f32	s15, s15, s14
1a007c06:	edc3 7a00 	vstr	s15, [r3]

    return hal_out.nine_axis_status;
1a007c0a:	4b04      	ldr	r3, [pc, #16]	; (1a007c1c <inv_get_sensor_type_linear_acceleration+0xa0>)
1a007c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
1a007c0e:	4618      	mov	r0, r3
1a007c10:	3728      	adds	r7, #40	; 0x28
1a007c12:	46bd      	mov	sp, r7
1a007c14:	bd80      	pop	{r7, pc}
1a007c16:	bf00      	nop
1a007c18:	391ce80a 	.word	0x391ce80a
1a007c1c:	10086868 	.word	0x10086868

1a007c20 <inv_set_message>:
*                  a motion or no motion message.
* @param[in] level Level of the messages. It starts at 0, and may increase
*            in the future to allow more messages if the bit storage runs out.
*/
void inv_set_message(long set, long clear, int level)
{
1a007c20:	b480      	push	{r7}
1a007c22:	b085      	sub	sp, #20
1a007c24:	af00      	add	r7, sp, #0
1a007c26:	60f8      	str	r0, [r7, #12]
1a007c28:	60b9      	str	r1, [r7, #8]
1a007c2a:	607a      	str	r2, [r7, #4]
    if (level == 0) {
1a007c2c:	687b      	ldr	r3, [r7, #4]
1a007c2e:	2b00      	cmp	r3, #0
1a007c30:	d10c      	bne.n	1a007c4c <inv_set_message+0x2c>
        mh.message &= ~clear;
1a007c32:	4b09      	ldr	r3, [pc, #36]	; (1a007c58 <inv_set_message+0x38>)
1a007c34:	681a      	ldr	r2, [r3, #0]
1a007c36:	68bb      	ldr	r3, [r7, #8]
1a007c38:	43db      	mvns	r3, r3
1a007c3a:	4013      	ands	r3, r2
1a007c3c:	4a06      	ldr	r2, [pc, #24]	; (1a007c58 <inv_set_message+0x38>)
1a007c3e:	6013      	str	r3, [r2, #0]
        mh.message |= set;
1a007c40:	4b05      	ldr	r3, [pc, #20]	; (1a007c58 <inv_set_message+0x38>)
1a007c42:	681a      	ldr	r2, [r3, #0]
1a007c44:	68fb      	ldr	r3, [r7, #12]
1a007c46:	4313      	orrs	r3, r2
1a007c48:	4a03      	ldr	r2, [pc, #12]	; (1a007c58 <inv_set_message+0x38>)
1a007c4a:	6013      	str	r3, [r2, #0]
    }
}
1a007c4c:	bf00      	nop
1a007c4e:	3714      	adds	r7, #20
1a007c50:	46bd      	mov	sp, r7
1a007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
1a007c56:	4770      	bx	lr
1a007c58:	1008692c 	.word	0x1008692c

1a007c5c <inv_q30_to_float>:
        float input;
        float output;
    }   inv_biquad_filter_t;

    static inline float inv_q30_to_float(long q30)
    {
1a007c5c:	b480      	push	{r7}
1a007c5e:	b083      	sub	sp, #12
1a007c60:	af00      	add	r7, sp, #0
1a007c62:	6078      	str	r0, [r7, #4]
        return (float) q30 / ((float)(1L << 30));
1a007c64:	687b      	ldr	r3, [r7, #4]
1a007c66:	ee07 3a90 	vmov	s15, r3
1a007c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a007c6e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 1a007c88 <inv_q30_to_float+0x2c>
1a007c72:	eec7 6a87 	vdiv.f32	s13, s15, s14
1a007c76:	eef0 7a66 	vmov.f32	s15, s13
    }
1a007c7a:	eeb0 0a67 	vmov.f32	s0, s15
1a007c7e:	370c      	adds	r7, #12
1a007c80:	46bd      	mov	sp, r7
1a007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
1a007c86:	4770      	bx	lr
1a007c88:	4e800000 	.word	0x4e800000

1a007c8c <inv_compass_angle>:
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
1a007c8c:	b590      	push	{r4, r7, lr}
1a007c8e:	b097      	sub	sp, #92	; 0x5c
1a007c90:	af00      	add	r7, sp, #0
1a007c92:	60f8      	str	r0, [r7, #12]
1a007c94:	60b9      	str	r1, [r7, #8]
1a007c96:	607a      	str	r2, [r7, #4]
    long cgcross[4], q1[4], q2[4], qi[4];
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
1a007c98:	2300      	movs	r3, #0
1a007c9a:	647b      	str	r3, [r7, #68]	; 0x44
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
1a007c9c:	68fb      	ldr	r3, [r7, #12]
1a007c9e:	3304      	adds	r3, #4
1a007ca0:	681a      	ldr	r2, [r3, #0]
1a007ca2:	68bb      	ldr	r3, [r7, #8]
1a007ca4:	3308      	adds	r3, #8
1a007ca6:	681b      	ldr	r3, [r3, #0]
1a007ca8:	4619      	mov	r1, r3
1a007caa:	4610      	mov	r0, r2
1a007cac:	f000 f8c2 	bl	1a007e34 <inv_q30_mult>
1a007cb0:	4604      	mov	r4, r0
1a007cb2:	68fb      	ldr	r3, [r7, #12]
1a007cb4:	3308      	adds	r3, #8
1a007cb6:	681a      	ldr	r2, [r3, #0]
1a007cb8:	68bb      	ldr	r3, [r7, #8]
1a007cba:	3304      	adds	r3, #4
1a007cbc:	681b      	ldr	r3, [r3, #0]
1a007cbe:	4619      	mov	r1, r3
1a007cc0:	4610      	mov	r0, r2
1a007cc2:	f000 f8b7 	bl	1a007e34 <inv_q30_mult>
1a007cc6:	4603      	mov	r3, r0
1a007cc8:	1ae3      	subs	r3, r4, r3
1a007cca:	64bb      	str	r3, [r7, #72]	; 0x48
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
1a007ccc:	68fb      	ldr	r3, [r7, #12]
1a007cce:	3308      	adds	r3, #8
1a007cd0:	681a      	ldr	r2, [r3, #0]
1a007cd2:	68bb      	ldr	r3, [r7, #8]
1a007cd4:	681b      	ldr	r3, [r3, #0]
1a007cd6:	4619      	mov	r1, r3
1a007cd8:	4610      	mov	r0, r2
1a007cda:	f000 f8ab 	bl	1a007e34 <inv_q30_mult>
1a007cde:	4604      	mov	r4, r0
1a007ce0:	68fb      	ldr	r3, [r7, #12]
1a007ce2:	681a      	ldr	r2, [r3, #0]
1a007ce4:	68bb      	ldr	r3, [r7, #8]
1a007ce6:	3308      	adds	r3, #8
1a007ce8:	681b      	ldr	r3, [r3, #0]
1a007cea:	4619      	mov	r1, r3
1a007cec:	4610      	mov	r0, r2
1a007cee:	f000 f8a1 	bl	1a007e34 <inv_q30_mult>
1a007cf2:	4603      	mov	r3, r0
1a007cf4:	1ae3      	subs	r3, r4, r3
1a007cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
1a007cf8:	68fb      	ldr	r3, [r7, #12]
1a007cfa:	681a      	ldr	r2, [r3, #0]
1a007cfc:	68bb      	ldr	r3, [r7, #8]
1a007cfe:	3304      	adds	r3, #4
1a007d00:	681b      	ldr	r3, [r3, #0]
1a007d02:	4619      	mov	r1, r3
1a007d04:	4610      	mov	r0, r2
1a007d06:	f000 f895 	bl	1a007e34 <inv_q30_mult>
1a007d0a:	4604      	mov	r4, r0
1a007d0c:	68fb      	ldr	r3, [r7, #12]
1a007d0e:	3304      	adds	r3, #4
1a007d10:	681a      	ldr	r2, [r3, #0]
1a007d12:	68bb      	ldr	r3, [r7, #8]
1a007d14:	681b      	ldr	r3, [r3, #0]
1a007d16:	4619      	mov	r1, r3
1a007d18:	4610      	mov	r0, r2
1a007d1a:	f000 f88b 	bl	1a007e34 <inv_q30_mult>
1a007d1e:	4603      	mov	r3, r0
1a007d20:	1ae3      	subs	r3, r4, r3
1a007d22:	653b      	str	r3, [r7, #80]	; 0x50

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
1a007d24:	f107 0234 	add.w	r2, r7, #52	; 0x34
1a007d28:	f107 0344 	add.w	r3, r7, #68	; 0x44
1a007d2c:	4619      	mov	r1, r3
1a007d2e:	6878      	ldr	r0, [r7, #4]
1a007d30:	f000 f8a6 	bl	1a007e80 <inv_q_mult>
    inv_q_invert(quat, qi);
1a007d34:	f107 0314 	add.w	r3, r7, #20
1a007d38:	4619      	mov	r1, r3
1a007d3a:	6878      	ldr	r0, [r7, #4]
1a007d3c:	f000 f99e 	bl	1a00807c <inv_q_invert>
    inv_q_mult(q1, qi, q2);
1a007d40:	f107 0224 	add.w	r2, r7, #36	; 0x24
1a007d44:	f107 0114 	add.w	r1, r7, #20
1a007d48:	f107 0334 	add.w	r3, r7, #52	; 0x34
1a007d4c:	4618      	mov	r0, r3
1a007d4e:	f000 f897 	bl	1a007e80 <inv_q_mult>

    // Protect against atan2 of 0,0
    if ((q2[2] == 0L) && (q2[1] == 0L))
1a007d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a007d54:	2b00      	cmp	r3, #0
1a007d56:	d105      	bne.n	1a007d64 <inv_compass_angle+0xd8>
1a007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a007d5a:	2b00      	cmp	r3, #0
1a007d5c:	d102      	bne.n	1a007d64 <inv_compass_angle+0xd8>
        return 0.f;
1a007d5e:	f04f 0300 	mov.w	r3, #0
1a007d62:	e017      	b.n	1a007d94 <inv_compass_angle+0x108>

    // This is the unfiltered heading correction
    angW = -atan2f(inv_q30_to_float(q2[2]), inv_q30_to_float(q2[1]));
1a007d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a007d66:	4618      	mov	r0, r3
1a007d68:	f7ff ff78 	bl	1a007c5c <inv_q30_to_float>
1a007d6c:	ee10 4a10 	vmov	r4, s0
1a007d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a007d72:	4618      	mov	r0, r3
1a007d74:	f7ff ff72 	bl	1a007c5c <inv_q30_to_float>
1a007d78:	ee10 3a10 	vmov	r3, s0
1a007d7c:	4619      	mov	r1, r3
1a007d7e:	4620      	mov	r0, r4
1a007d80:	f00d fda4 	bl	1a0158cc <atan2f>
1a007d84:	4603      	mov	r3, r0
1a007d86:	ee07 3a90 	vmov	s15, r3
1a007d8a:	eef1 7a67 	vneg.f32	s15, s15
1a007d8e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    return angW;
1a007d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
1a007d94:	4618      	mov	r0, r3
1a007d96:	375c      	adds	r7, #92	; 0x5c
1a007d98:	46bd      	mov	sp, r7
1a007d9a:	bd90      	pop	{r4, r7, pc}

1a007d9c <inv_get_gyro_sum_of_sqr>:
 *          (1 degree per second)^2 = 2^6 = 2^GYRO_MAG_SQR_SHIFT.
 * @param[in] gyro Gyro data scaled with 1 dps = 2^16
 *  @return the computed magnitude squared output of the gyroscope.
 */
unsigned long inv_get_gyro_sum_of_sqr(const long *gyro)
{
1a007d9c:	b480      	push	{r7}
1a007d9e:	b087      	sub	sp, #28
1a007da0:	af00      	add	r7, sp, #0
1a007da2:	6078      	str	r0, [r7, #4]
    unsigned long gmag = 0;
1a007da4:	2300      	movs	r3, #0
1a007da6:	617b      	str	r3, [r7, #20]
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
1a007da8:	2300      	movs	r3, #0
1a007daa:	613b      	str	r3, [r7, #16]
1a007dac:	e011      	b.n	1a007dd2 <inv_get_gyro_sum_of_sqr+0x36>
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
1a007dae:	693b      	ldr	r3, [r7, #16]
1a007db0:	009b      	lsls	r3, r3, #2
1a007db2:	687a      	ldr	r2, [r7, #4]
1a007db4:	4413      	add	r3, r2
1a007db6:	681b      	ldr	r3, [r3, #0]
1a007db8:	135b      	asrs	r3, r3, #13
1a007dba:	60fb      	str	r3, [r7, #12]
        gmag += temp * temp;
1a007dbc:	68fb      	ldr	r3, [r7, #12]
1a007dbe:	68fa      	ldr	r2, [r7, #12]
1a007dc0:	fb02 f303 	mul.w	r3, r2, r3
1a007dc4:	461a      	mov	r2, r3
1a007dc6:	697b      	ldr	r3, [r7, #20]
1a007dc8:	4413      	add	r3, r2
1a007dca:	617b      	str	r3, [r7, #20]
{
    unsigned long gmag = 0;
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
1a007dcc:	693b      	ldr	r3, [r7, #16]
1a007dce:	3301      	adds	r3, #1
1a007dd0:	613b      	str	r3, [r7, #16]
1a007dd2:	693b      	ldr	r3, [r7, #16]
1a007dd4:	2b02      	cmp	r3, #2
1a007dd6:	ddea      	ble.n	1a007dae <inv_get_gyro_sum_of_sqr+0x12>
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
        gmag += temp * temp;
    }

    return gmag;
1a007dd8:	697b      	ldr	r3, [r7, #20]
}
1a007dda:	4618      	mov	r0, r3
1a007ddc:	371c      	adds	r7, #28
1a007dde:	46bd      	mov	sp, r7
1a007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a007de4:	4770      	bx	lr
1a007de6:	bf00      	nop

1a007de8 <inv_q29_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>29
*/
long inv_q29_mult(long a, long b)
{
1a007de8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a007dea:	b087      	sub	sp, #28
1a007dec:	af00      	add	r7, sp, #0
1a007dee:	6078      	str	r0, [r7, #4]
1a007df0:	6039      	str	r1, [r7, #0]
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1a007df2:	687a      	ldr	r2, [r7, #4]
1a007df4:	4615      	mov	r5, r2
1a007df6:	ea4f 76e5 	mov.w	r6, r5, asr #31
1a007dfa:	683a      	ldr	r2, [r7, #0]
1a007dfc:	4611      	mov	r1, r2
1a007dfe:	ea4f 72e1 	mov.w	r2, r1, asr #31
1a007e02:	fb01 fe06 	mul.w	lr, r1, r6
1a007e06:	fb05 f002 	mul.w	r0, r5, r2
1a007e0a:	4470      	add	r0, lr
1a007e0c:	fba5 1201 	umull	r1, r2, r5, r1
1a007e10:	4410      	add	r0, r2
1a007e12:	4602      	mov	r2, r0
1a007e14:	e9c7 1204 	strd	r1, r2, [r7, #16]
1a007e18:	e9c7 1204 	strd	r1, r2, [r7, #16]
    result = (long)(temp >> 29);
1a007e1c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
1a007e20:	0f4b      	lsrs	r3, r1, #29
1a007e22:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
1a007e26:	1754      	asrs	r4, r2, #29
1a007e28:	60fb      	str	r3, [r7, #12]
    return result;
1a007e2a:	68fb      	ldr	r3, [r7, #12]
#endif
}
1a007e2c:	4618      	mov	r0, r3
1a007e2e:	371c      	adds	r7, #28
1a007e30:	46bd      	mov	sp, r7
1a007e32:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a007e34 <inv_q30_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>30
*/
long inv_q30_mult(long a, long b)
{
1a007e34:	b5f0      	push	{r4, r5, r6, r7, lr}
1a007e36:	b087      	sub	sp, #28
1a007e38:	af00      	add	r7, sp, #0
1a007e3a:	6078      	str	r0, [r7, #4]
1a007e3c:	6039      	str	r1, [r7, #0]
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1a007e3e:	687a      	ldr	r2, [r7, #4]
1a007e40:	4615      	mov	r5, r2
1a007e42:	ea4f 76e5 	mov.w	r6, r5, asr #31
1a007e46:	683a      	ldr	r2, [r7, #0]
1a007e48:	4611      	mov	r1, r2
1a007e4a:	ea4f 72e1 	mov.w	r2, r1, asr #31
1a007e4e:	fb01 fe06 	mul.w	lr, r1, r6
1a007e52:	fb05 f002 	mul.w	r0, r5, r2
1a007e56:	4470      	add	r0, lr
1a007e58:	fba5 1201 	umull	r1, r2, r5, r1
1a007e5c:	4410      	add	r0, r2
1a007e5e:	4602      	mov	r2, r0
1a007e60:	e9c7 1204 	strd	r1, r2, [r7, #16]
1a007e64:	e9c7 1204 	strd	r1, r2, [r7, #16]
    result = (long)(temp >> 30);
1a007e68:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
1a007e6c:	0f8b      	lsrs	r3, r1, #30
1a007e6e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
1a007e72:	1794      	asrs	r4, r2, #30
1a007e74:	60fb      	str	r3, [r7, #12]
    return result;
1a007e76:	68fb      	ldr	r3, [r7, #12]
#endif
}
1a007e78:	4618      	mov	r0, r3
1a007e7a:	371c      	adds	r7, #28
1a007e7c:	46bd      	mov	sp, r7
1a007e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a007e80 <inv_q_mult>:
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
1a007e80:	b5b0      	push	{r4, r5, r7, lr}
1a007e82:	b084      	sub	sp, #16
1a007e84:	af00      	add	r7, sp, #0
1a007e86:	60f8      	str	r0, [r7, #12]
1a007e88:	60b9      	str	r1, [r7, #8]
1a007e8a:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
1a007e8c:	68fb      	ldr	r3, [r7, #12]
1a007e8e:	681a      	ldr	r2, [r3, #0]
1a007e90:	68bb      	ldr	r3, [r7, #8]
1a007e92:	681b      	ldr	r3, [r3, #0]
1a007e94:	4619      	mov	r1, r3
1a007e96:	4610      	mov	r0, r2
1a007e98:	f7ff ffcc 	bl	1a007e34 <inv_q30_mult>
1a007e9c:	4604      	mov	r4, r0
1a007e9e:	68fb      	ldr	r3, [r7, #12]
1a007ea0:	3304      	adds	r3, #4
1a007ea2:	681a      	ldr	r2, [r3, #0]
1a007ea4:	68bb      	ldr	r3, [r7, #8]
1a007ea6:	3304      	adds	r3, #4
1a007ea8:	681b      	ldr	r3, [r3, #0]
1a007eaa:	4619      	mov	r1, r3
1a007eac:	4610      	mov	r0, r2
1a007eae:	f7ff ffc1 	bl	1a007e34 <inv_q30_mult>
1a007eb2:	4603      	mov	r3, r0
1a007eb4:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);
1a007eb6:	68fb      	ldr	r3, [r7, #12]
1a007eb8:	3308      	adds	r3, #8
1a007eba:	681a      	ldr	r2, [r3, #0]
1a007ebc:	68bb      	ldr	r3, [r7, #8]
1a007ebe:	3308      	adds	r3, #8
1a007ec0:	681b      	ldr	r3, [r3, #0]
1a007ec2:	4619      	mov	r1, r3
1a007ec4:	4610      	mov	r0, r2
1a007ec6:	f7ff ffb5 	bl	1a007e34 <inv_q30_mult>
1a007eca:	4603      	mov	r3, r0
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
1a007ecc:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);
1a007ece:	68fb      	ldr	r3, [r7, #12]
1a007ed0:	330c      	adds	r3, #12
1a007ed2:	681a      	ldr	r2, [r3, #0]
1a007ed4:	68bb      	ldr	r3, [r7, #8]
1a007ed6:	330c      	adds	r3, #12
1a007ed8:	681b      	ldr	r3, [r3, #0]
1a007eda:	4619      	mov	r1, r3
1a007edc:	4610      	mov	r0, r2
1a007ede:	f7ff ffa9 	bl	1a007e34 <inv_q30_mult>
1a007ee2:	4603      	mov	r3, r0
1a007ee4:	1ae2      	subs	r2, r4, r3
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
1a007ee6:	687b      	ldr	r3, [r7, #4]
1a007ee8:	601a      	str	r2, [r3, #0]
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
1a007eea:	687b      	ldr	r3, [r7, #4]
1a007eec:	1d1c      	adds	r4, r3, #4
1a007eee:	68fb      	ldr	r3, [r7, #12]
1a007ef0:	681a      	ldr	r2, [r3, #0]
1a007ef2:	68bb      	ldr	r3, [r7, #8]
1a007ef4:	3304      	adds	r3, #4
1a007ef6:	681b      	ldr	r3, [r3, #0]
1a007ef8:	4619      	mov	r1, r3
1a007efa:	4610      	mov	r0, r2
1a007efc:	f7ff ff9a 	bl	1a007e34 <inv_q30_mult>
1a007f00:	4605      	mov	r5, r0
1a007f02:	68fb      	ldr	r3, [r7, #12]
1a007f04:	3304      	adds	r3, #4
1a007f06:	681a      	ldr	r2, [r3, #0]
1a007f08:	68bb      	ldr	r3, [r7, #8]
1a007f0a:	681b      	ldr	r3, [r3, #0]
1a007f0c:	4619      	mov	r1, r3
1a007f0e:	4610      	mov	r0, r2
1a007f10:	f7ff ff90 	bl	1a007e34 <inv_q30_mult>
1a007f14:	4603      	mov	r3, r0
1a007f16:	441d      	add	r5, r3
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);
1a007f18:	68fb      	ldr	r3, [r7, #12]
1a007f1a:	3308      	adds	r3, #8
1a007f1c:	681a      	ldr	r2, [r3, #0]
1a007f1e:	68bb      	ldr	r3, [r7, #8]
1a007f20:	330c      	adds	r3, #12
1a007f22:	681b      	ldr	r3, [r3, #0]
1a007f24:	4619      	mov	r1, r3
1a007f26:	4610      	mov	r0, r2
1a007f28:	f7ff ff84 	bl	1a007e34 <inv_q30_mult>
1a007f2c:	4603      	mov	r3, r0
{
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
1a007f2e:	441d      	add	r5, r3
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);
1a007f30:	68fb      	ldr	r3, [r7, #12]
1a007f32:	330c      	adds	r3, #12
1a007f34:	681a      	ldr	r2, [r3, #0]
1a007f36:	68bb      	ldr	r3, [r7, #8]
1a007f38:	3308      	adds	r3, #8
1a007f3a:	681b      	ldr	r3, [r3, #0]
1a007f3c:	4619      	mov	r1, r3
1a007f3e:	4610      	mov	r0, r2
1a007f40:	f7ff ff78 	bl	1a007e34 <inv_q30_mult>
1a007f44:	4603      	mov	r3, r0
1a007f46:	1aeb      	subs	r3, r5, r3
{
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
1a007f48:	6023      	str	r3, [r4, #0]
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
1a007f4a:	687b      	ldr	r3, [r7, #4]
1a007f4c:	f103 0408 	add.w	r4, r3, #8
1a007f50:	68fb      	ldr	r3, [r7, #12]
1a007f52:	681a      	ldr	r2, [r3, #0]
1a007f54:	68bb      	ldr	r3, [r7, #8]
1a007f56:	3308      	adds	r3, #8
1a007f58:	681b      	ldr	r3, [r3, #0]
1a007f5a:	4619      	mov	r1, r3
1a007f5c:	4610      	mov	r0, r2
1a007f5e:	f7ff ff69 	bl	1a007e34 <inv_q30_mult>
1a007f62:	4605      	mov	r5, r0
1a007f64:	68fb      	ldr	r3, [r7, #12]
1a007f66:	3304      	adds	r3, #4
1a007f68:	681a      	ldr	r2, [r3, #0]
1a007f6a:	68bb      	ldr	r3, [r7, #8]
1a007f6c:	330c      	adds	r3, #12
1a007f6e:	681b      	ldr	r3, [r3, #0]
1a007f70:	4619      	mov	r1, r3
1a007f72:	4610      	mov	r0, r2
1a007f74:	f7ff ff5e 	bl	1a007e34 <inv_q30_mult>
1a007f78:	4603      	mov	r3, r0
1a007f7a:	1aed      	subs	r5, r5, r3
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);
1a007f7c:	68fb      	ldr	r3, [r7, #12]
1a007f7e:	3308      	adds	r3, #8
1a007f80:	681a      	ldr	r2, [r3, #0]
1a007f82:	68bb      	ldr	r3, [r7, #8]
1a007f84:	681b      	ldr	r3, [r3, #0]
1a007f86:	4619      	mov	r1, r3
1a007f88:	4610      	mov	r0, r2
1a007f8a:	f7ff ff53 	bl	1a007e34 <inv_q30_mult>
1a007f8e:	4603      	mov	r3, r0
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
1a007f90:	441d      	add	r5, r3
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);
1a007f92:	68fb      	ldr	r3, [r7, #12]
1a007f94:	330c      	adds	r3, #12
1a007f96:	681a      	ldr	r2, [r3, #0]
1a007f98:	68bb      	ldr	r3, [r7, #8]
1a007f9a:	3304      	adds	r3, #4
1a007f9c:	681b      	ldr	r3, [r3, #0]
1a007f9e:	4619      	mov	r1, r3
1a007fa0:	4610      	mov	r0, r2
1a007fa2:	f7ff ff47 	bl	1a007e34 <inv_q30_mult>
1a007fa6:	4603      	mov	r3, r0
1a007fa8:	442b      	add	r3, r5
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
1a007faa:	6023      	str	r3, [r4, #0]
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);

    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
1a007fac:	687b      	ldr	r3, [r7, #4]
1a007fae:	f103 040c 	add.w	r4, r3, #12
1a007fb2:	68fb      	ldr	r3, [r7, #12]
1a007fb4:	681a      	ldr	r2, [r3, #0]
1a007fb6:	68bb      	ldr	r3, [r7, #8]
1a007fb8:	330c      	adds	r3, #12
1a007fba:	681b      	ldr	r3, [r3, #0]
1a007fbc:	4619      	mov	r1, r3
1a007fbe:	4610      	mov	r0, r2
1a007fc0:	f7ff ff38 	bl	1a007e34 <inv_q30_mult>
1a007fc4:	4605      	mov	r5, r0
1a007fc6:	68fb      	ldr	r3, [r7, #12]
1a007fc8:	3304      	adds	r3, #4
1a007fca:	681a      	ldr	r2, [r3, #0]
1a007fcc:	68bb      	ldr	r3, [r7, #8]
1a007fce:	3308      	adds	r3, #8
1a007fd0:	681b      	ldr	r3, [r3, #0]
1a007fd2:	4619      	mov	r1, r3
1a007fd4:	4610      	mov	r0, r2
1a007fd6:	f7ff ff2d 	bl	1a007e34 <inv_q30_mult>
1a007fda:	4603      	mov	r3, r0
1a007fdc:	441d      	add	r5, r3
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
1a007fde:	68fb      	ldr	r3, [r7, #12]
1a007fe0:	3308      	adds	r3, #8
1a007fe2:	681a      	ldr	r2, [r3, #0]
1a007fe4:	68bb      	ldr	r3, [r7, #8]
1a007fe6:	3304      	adds	r3, #4
1a007fe8:	681b      	ldr	r3, [r3, #0]
1a007fea:	4619      	mov	r1, r3
1a007fec:	4610      	mov	r0, r2
1a007fee:	f7ff ff21 	bl	1a007e34 <inv_q30_mult>
1a007ff2:	4603      	mov	r3, r0
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);

    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
1a007ff4:	1aed      	subs	r5, r5, r3
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
1a007ff6:	68fb      	ldr	r3, [r7, #12]
1a007ff8:	330c      	adds	r3, #12
1a007ffa:	681a      	ldr	r2, [r3, #0]
1a007ffc:	68bb      	ldr	r3, [r7, #8]
1a007ffe:	681b      	ldr	r3, [r3, #0]
1a008000:	4619      	mov	r1, r3
1a008002:	4610      	mov	r0, r2
1a008004:	f7ff ff16 	bl	1a007e34 <inv_q30_mult>
1a008008:	4603      	mov	r3, r0
1a00800a:	442b      	add	r3, r5
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);

    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
1a00800c:	6023      	str	r3, [r4, #0]
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
}
1a00800e:	bf00      	nop
1a008010:	3710      	adds	r7, #16
1a008012:	46bd      	mov	sp, r7
1a008014:	bdb0      	pop	{r4, r5, r7, pc}
1a008016:	bf00      	nop

1a008018 <inv_q_add>:
*            to 2^30
* @param[out] qSum Sum after quaternion summation. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_add(long *q1, long *q2, long *qSum)
{
1a008018:	b480      	push	{r7}
1a00801a:	b085      	sub	sp, #20
1a00801c:	af00      	add	r7, sp, #0
1a00801e:	60f8      	str	r0, [r7, #12]
1a008020:	60b9      	str	r1, [r7, #8]
1a008022:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
1a008024:	68fb      	ldr	r3, [r7, #12]
1a008026:	681a      	ldr	r2, [r3, #0]
1a008028:	68bb      	ldr	r3, [r7, #8]
1a00802a:	681b      	ldr	r3, [r3, #0]
1a00802c:	441a      	add	r2, r3
1a00802e:	687b      	ldr	r3, [r7, #4]
1a008030:	601a      	str	r2, [r3, #0]
    qSum[1] = q1[1] + q2[1];
1a008032:	687b      	ldr	r3, [r7, #4]
1a008034:	3304      	adds	r3, #4
1a008036:	68fa      	ldr	r2, [r7, #12]
1a008038:	3204      	adds	r2, #4
1a00803a:	6811      	ldr	r1, [r2, #0]
1a00803c:	68ba      	ldr	r2, [r7, #8]
1a00803e:	3204      	adds	r2, #4
1a008040:	6812      	ldr	r2, [r2, #0]
1a008042:	440a      	add	r2, r1
1a008044:	601a      	str	r2, [r3, #0]
    qSum[2] = q1[2] + q2[2];
1a008046:	687b      	ldr	r3, [r7, #4]
1a008048:	3308      	adds	r3, #8
1a00804a:	68fa      	ldr	r2, [r7, #12]
1a00804c:	3208      	adds	r2, #8
1a00804e:	6811      	ldr	r1, [r2, #0]
1a008050:	68ba      	ldr	r2, [r7, #8]
1a008052:	3208      	adds	r2, #8
1a008054:	6812      	ldr	r2, [r2, #0]
1a008056:	440a      	add	r2, r1
1a008058:	601a      	str	r2, [r3, #0]
    qSum[3] = q1[3] + q2[3];
1a00805a:	687b      	ldr	r3, [r7, #4]
1a00805c:	330c      	adds	r3, #12
1a00805e:	68fa      	ldr	r2, [r7, #12]
1a008060:	320c      	adds	r2, #12
1a008062:	6811      	ldr	r1, [r2, #0]
1a008064:	68ba      	ldr	r2, [r7, #8]
1a008066:	320c      	adds	r2, #12
1a008068:	6812      	ldr	r2, [r2, #0]
1a00806a:	440a      	add	r2, r1
1a00806c:	601a      	str	r2, [r3, #0]
}
1a00806e:	bf00      	nop
1a008070:	3714      	adds	r7, #20
1a008072:	46bd      	mov	sp, r7
1a008074:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008078:	4770      	bx	lr
1a00807a:	bf00      	nop

1a00807c <inv_q_invert>:
    INVENSENSE_FUNC_START;
    inv_vector_normalize(q, 4);
}

void inv_q_invert(const long *q, long *qInverted)
{
1a00807c:	b480      	push	{r7}
1a00807e:	b083      	sub	sp, #12
1a008080:	af00      	add	r7, sp, #0
1a008082:	6078      	str	r0, [r7, #4]
1a008084:	6039      	str	r1, [r7, #0]
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1a008086:	687b      	ldr	r3, [r7, #4]
1a008088:	681a      	ldr	r2, [r3, #0]
1a00808a:	683b      	ldr	r3, [r7, #0]
1a00808c:	601a      	str	r2, [r3, #0]
    qInverted[1] = -q[1];
1a00808e:	683b      	ldr	r3, [r7, #0]
1a008090:	3304      	adds	r3, #4
1a008092:	687a      	ldr	r2, [r7, #4]
1a008094:	3204      	adds	r2, #4
1a008096:	6812      	ldr	r2, [r2, #0]
1a008098:	4252      	negs	r2, r2
1a00809a:	601a      	str	r2, [r3, #0]
    qInverted[2] = -q[2];
1a00809c:	683b      	ldr	r3, [r7, #0]
1a00809e:	3308      	adds	r3, #8
1a0080a0:	687a      	ldr	r2, [r7, #4]
1a0080a2:	3208      	adds	r2, #8
1a0080a4:	6812      	ldr	r2, [r2, #0]
1a0080a6:	4252      	negs	r2, r2
1a0080a8:	601a      	str	r2, [r3, #0]
    qInverted[3] = -q[3];
1a0080aa:	683b      	ldr	r3, [r7, #0]
1a0080ac:	330c      	adds	r3, #12
1a0080ae:	687a      	ldr	r2, [r7, #4]
1a0080b0:	320c      	adds	r2, #12
1a0080b2:	6812      	ldr	r2, [r2, #0]
1a0080b4:	4252      	negs	r2, r2
1a0080b6:	601a      	str	r2, [r3, #0]
}
1a0080b8:	bf00      	nop
1a0080ba:	370c      	adds	r7, #12
1a0080bc:	46bd      	mov	sp, r7
1a0080be:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0080c2:	4770      	bx	lr

1a0080c4 <inv_q_rotate>:
}

/** Rotates a 3-element vector by Rotation defined by Q
*/
void inv_q_rotate(const long *q, const long *in, long *out)
{
1a0080c4:	b580      	push	{r7, lr}
1a0080c6:	b094      	sub	sp, #80	; 0x50
1a0080c8:	af00      	add	r7, sp, #0
1a0080ca:	60f8      	str	r0, [r7, #12]
1a0080cc:	60b9      	str	r1, [r7, #8]
1a0080ce:	607a      	str	r2, [r7, #4]
    long q_temp1[4], q_temp2[4];
    long in4[4], out4[4];

    // Fixme optimize
    in4[0] = 0;
1a0080d0:	2300      	movs	r3, #0
1a0080d2:	623b      	str	r3, [r7, #32]
    memcpy(&in4[1], in, 3 * sizeof(long));
1a0080d4:	f107 0320 	add.w	r3, r7, #32
1a0080d8:	3304      	adds	r3, #4
1a0080da:	220c      	movs	r2, #12
1a0080dc:	68b9      	ldr	r1, [r7, #8]
1a0080de:	4618      	mov	r0, r3
1a0080e0:	f00c fd80 	bl	1a014be4 <memcpy>
    inv_q_mult(q, in4, q_temp1);
1a0080e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
1a0080e8:	f107 0320 	add.w	r3, r7, #32
1a0080ec:	4619      	mov	r1, r3
1a0080ee:	68f8      	ldr	r0, [r7, #12]
1a0080f0:	f7ff fec6 	bl	1a007e80 <inv_q_mult>
    inv_q_invert(q, q_temp2);
1a0080f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
1a0080f8:	4619      	mov	r1, r3
1a0080fa:	68f8      	ldr	r0, [r7, #12]
1a0080fc:	f7ff ffbe 	bl	1a00807c <inv_q_invert>
    inv_q_mult(q_temp1, q_temp2, out4);
1a008100:	f107 0210 	add.w	r2, r7, #16
1a008104:	f107 0130 	add.w	r1, r7, #48	; 0x30
1a008108:	f107 0340 	add.w	r3, r7, #64	; 0x40
1a00810c:	4618      	mov	r0, r3
1a00810e:	f7ff feb7 	bl	1a007e80 <inv_q_mult>
    memcpy(out, &out4[1], 3 * sizeof(long));
1a008112:	f107 0310 	add.w	r3, r7, #16
1a008116:	3304      	adds	r3, #4
1a008118:	220c      	movs	r2, #12
1a00811a:	4619      	mov	r1, r3
1a00811c:	6878      	ldr	r0, [r7, #4]
1a00811e:	f00c fd61 	bl	1a014be4 <memcpy>
}
1a008122:	bf00      	nop
1a008124:	3750      	adds	r7, #80	; 0x50
1a008126:	46bd      	mov	sp, r7
1a008128:	bd80      	pop	{r7, pc}
1a00812a:	bf00      	nop

1a00812c <inv_q_multf>:

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
1a00812c:	b480      	push	{r7}
1a00812e:	b085      	sub	sp, #20
1a008130:	af00      	add	r7, sp, #0
1a008132:	60f8      	str	r0, [r7, #12]
1a008134:	60b9      	str	r1, [r7, #8]
1a008136:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qProd[0] =
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
1a008138:	68fb      	ldr	r3, [r7, #12]
1a00813a:	ed93 7a00 	vldr	s14, [r3]
1a00813e:	68bb      	ldr	r3, [r7, #8]
1a008140:	edd3 7a00 	vldr	s15, [r3]
1a008144:	ee27 7a27 	vmul.f32	s14, s14, s15
1a008148:	68fb      	ldr	r3, [r7, #12]
1a00814a:	3304      	adds	r3, #4
1a00814c:	edd3 6a00 	vldr	s13, [r3]
1a008150:	68bb      	ldr	r3, [r7, #8]
1a008152:	3304      	adds	r3, #4
1a008154:	edd3 7a00 	vldr	s15, [r3]
1a008158:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a00815c:	ee37 7a67 	vsub.f32	s14, s14, s15
1a008160:	68fb      	ldr	r3, [r7, #12]
1a008162:	3308      	adds	r3, #8
1a008164:	edd3 6a00 	vldr	s13, [r3]
1a008168:	68bb      	ldr	r3, [r7, #8]
1a00816a:	3308      	adds	r3, #8
1a00816c:	edd3 7a00 	vldr	s15, [r3]
1a008170:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008174:	ee37 7a67 	vsub.f32	s14, s14, s15
1a008178:	68fb      	ldr	r3, [r7, #12]
1a00817a:	330c      	adds	r3, #12
1a00817c:	edd3 6a00 	vldr	s13, [r3]
1a008180:	68bb      	ldr	r3, [r7, #8]
1a008182:	330c      	adds	r3, #12
1a008184:	edd3 7a00 	vldr	s15, [r3]
1a008188:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a00818c:	ee77 7a67 	vsub.f32	s15, s14, s15
}

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
    INVENSENSE_FUNC_START;
    qProd[0] =
1a008190:	687b      	ldr	r3, [r7, #4]
1a008192:	edc3 7a00 	vstr	s15, [r3]
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
    qProd[1] =
1a008196:	687b      	ldr	r3, [r7, #4]
1a008198:	3304      	adds	r3, #4
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
1a00819a:	68fa      	ldr	r2, [r7, #12]
1a00819c:	ed92 7a00 	vldr	s14, [r2]
1a0081a0:	68ba      	ldr	r2, [r7, #8]
1a0081a2:	3204      	adds	r2, #4
1a0081a4:	edd2 7a00 	vldr	s15, [r2]
1a0081a8:	ee27 7a27 	vmul.f32	s14, s14, s15
1a0081ac:	68fa      	ldr	r2, [r7, #12]
1a0081ae:	3204      	adds	r2, #4
1a0081b0:	edd2 6a00 	vldr	s13, [r2]
1a0081b4:	68ba      	ldr	r2, [r7, #8]
1a0081b6:	edd2 7a00 	vldr	s15, [r2]
1a0081ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a0081be:	ee37 7a27 	vadd.f32	s14, s14, s15
1a0081c2:	68fa      	ldr	r2, [r7, #12]
1a0081c4:	3208      	adds	r2, #8
1a0081c6:	edd2 6a00 	vldr	s13, [r2]
1a0081ca:	68ba      	ldr	r2, [r7, #8]
1a0081cc:	320c      	adds	r2, #12
1a0081ce:	edd2 7a00 	vldr	s15, [r2]
1a0081d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a0081d6:	ee37 7a27 	vadd.f32	s14, s14, s15
1a0081da:	68fa      	ldr	r2, [r7, #12]
1a0081dc:	320c      	adds	r2, #12
1a0081de:	edd2 6a00 	vldr	s13, [r2]
1a0081e2:	68ba      	ldr	r2, [r7, #8]
1a0081e4:	3208      	adds	r2, #8
1a0081e6:	edd2 7a00 	vldr	s15, [r2]
1a0081ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a0081ee:	ee77 7a67 	vsub.f32	s15, s14, s15
void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
    INVENSENSE_FUNC_START;
    qProd[0] =
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
    qProd[1] =
1a0081f2:	edc3 7a00 	vstr	s15, [r3]
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
    qProd[2] =
1a0081f6:	687b      	ldr	r3, [r7, #4]
1a0081f8:	3308      	adds	r3, #8
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
1a0081fa:	68fa      	ldr	r2, [r7, #12]
1a0081fc:	ed92 7a00 	vldr	s14, [r2]
1a008200:	68ba      	ldr	r2, [r7, #8]
1a008202:	3208      	adds	r2, #8
1a008204:	edd2 7a00 	vldr	s15, [r2]
1a008208:	ee27 7a27 	vmul.f32	s14, s14, s15
1a00820c:	68fa      	ldr	r2, [r7, #12]
1a00820e:	3204      	adds	r2, #4
1a008210:	edd2 6a00 	vldr	s13, [r2]
1a008214:	68ba      	ldr	r2, [r7, #8]
1a008216:	320c      	adds	r2, #12
1a008218:	edd2 7a00 	vldr	s15, [r2]
1a00821c:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008220:	ee37 7a67 	vsub.f32	s14, s14, s15
1a008224:	68fa      	ldr	r2, [r7, #12]
1a008226:	3208      	adds	r2, #8
1a008228:	edd2 6a00 	vldr	s13, [r2]
1a00822c:	68ba      	ldr	r2, [r7, #8]
1a00822e:	edd2 7a00 	vldr	s15, [r2]
1a008232:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008236:	ee37 7a27 	vadd.f32	s14, s14, s15
1a00823a:	68fa      	ldr	r2, [r7, #12]
1a00823c:	320c      	adds	r2, #12
1a00823e:	edd2 6a00 	vldr	s13, [r2]
1a008242:	68ba      	ldr	r2, [r7, #8]
1a008244:	3204      	adds	r2, #4
1a008246:	edd2 7a00 	vldr	s15, [r2]
1a00824a:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a00824e:	ee77 7a27 	vadd.f32	s15, s14, s15
    INVENSENSE_FUNC_START;
    qProd[0] =
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
    qProd[1] =
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
    qProd[2] =
1a008252:	edc3 7a00 	vstr	s15, [r3]
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
    qProd[3] =
1a008256:	687b      	ldr	r3, [r7, #4]
1a008258:	330c      	adds	r3, #12
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
1a00825a:	68fa      	ldr	r2, [r7, #12]
1a00825c:	ed92 7a00 	vldr	s14, [r2]
1a008260:	68ba      	ldr	r2, [r7, #8]
1a008262:	320c      	adds	r2, #12
1a008264:	edd2 7a00 	vldr	s15, [r2]
1a008268:	ee27 7a27 	vmul.f32	s14, s14, s15
1a00826c:	68fa      	ldr	r2, [r7, #12]
1a00826e:	3204      	adds	r2, #4
1a008270:	edd2 6a00 	vldr	s13, [r2]
1a008274:	68ba      	ldr	r2, [r7, #8]
1a008276:	3208      	adds	r2, #8
1a008278:	edd2 7a00 	vldr	s15, [r2]
1a00827c:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008280:	ee37 7a27 	vadd.f32	s14, s14, s15
1a008284:	68fa      	ldr	r2, [r7, #12]
1a008286:	3208      	adds	r2, #8
1a008288:	edd2 6a00 	vldr	s13, [r2]
1a00828c:	68ba      	ldr	r2, [r7, #8]
1a00828e:	3204      	adds	r2, #4
1a008290:	edd2 7a00 	vldr	s15, [r2]
1a008294:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008298:	ee37 7a67 	vsub.f32	s14, s14, s15
1a00829c:	68fa      	ldr	r2, [r7, #12]
1a00829e:	320c      	adds	r2, #12
1a0082a0:	edd2 6a00 	vldr	s13, [r2]
1a0082a4:	68ba      	ldr	r2, [r7, #8]
1a0082a6:	edd2 7a00 	vldr	s15, [r2]
1a0082aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a0082ae:	ee77 7a27 	vadd.f32	s15, s14, s15
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
    qProd[1] =
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
    qProd[2] =
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
    qProd[3] =
1a0082b2:	edc3 7a00 	vstr	s15, [r3]
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
}
1a0082b6:	bf00      	nop
1a0082b8:	3714      	adds	r7, #20
1a0082ba:	46bd      	mov	sp, r7
1a0082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0082c0:	4770      	bx	lr
1a0082c2:	bf00      	nop

1a0082c4 <inv_q_addf>:

void inv_q_addf(const float *q1, const float *q2, float *qSum)
{
1a0082c4:	b480      	push	{r7}
1a0082c6:	b085      	sub	sp, #20
1a0082c8:	af00      	add	r7, sp, #0
1a0082ca:	60f8      	str	r0, [r7, #12]
1a0082cc:	60b9      	str	r1, [r7, #8]
1a0082ce:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
1a0082d0:	68fb      	ldr	r3, [r7, #12]
1a0082d2:	ed93 7a00 	vldr	s14, [r3]
1a0082d6:	68bb      	ldr	r3, [r7, #8]
1a0082d8:	edd3 7a00 	vldr	s15, [r3]
1a0082dc:	ee77 7a27 	vadd.f32	s15, s14, s15
1a0082e0:	687b      	ldr	r3, [r7, #4]
1a0082e2:	edc3 7a00 	vstr	s15, [r3]
    qSum[1] = q1[1] + q2[1];
1a0082e6:	687b      	ldr	r3, [r7, #4]
1a0082e8:	3304      	adds	r3, #4
1a0082ea:	68fa      	ldr	r2, [r7, #12]
1a0082ec:	3204      	adds	r2, #4
1a0082ee:	ed92 7a00 	vldr	s14, [r2]
1a0082f2:	68ba      	ldr	r2, [r7, #8]
1a0082f4:	3204      	adds	r2, #4
1a0082f6:	edd2 7a00 	vldr	s15, [r2]
1a0082fa:	ee77 7a27 	vadd.f32	s15, s14, s15
1a0082fe:	edc3 7a00 	vstr	s15, [r3]
    qSum[2] = q1[2] + q2[2];
1a008302:	687b      	ldr	r3, [r7, #4]
1a008304:	3308      	adds	r3, #8
1a008306:	68fa      	ldr	r2, [r7, #12]
1a008308:	3208      	adds	r2, #8
1a00830a:	ed92 7a00 	vldr	s14, [r2]
1a00830e:	68ba      	ldr	r2, [r7, #8]
1a008310:	3208      	adds	r2, #8
1a008312:	edd2 7a00 	vldr	s15, [r2]
1a008316:	ee77 7a27 	vadd.f32	s15, s14, s15
1a00831a:	edc3 7a00 	vstr	s15, [r3]
    qSum[3] = q1[3] + q2[3];
1a00831e:	687b      	ldr	r3, [r7, #4]
1a008320:	330c      	adds	r3, #12
1a008322:	68fa      	ldr	r2, [r7, #12]
1a008324:	320c      	adds	r2, #12
1a008326:	ed92 7a00 	vldr	s14, [r2]
1a00832a:	68ba      	ldr	r2, [r7, #8]
1a00832c:	320c      	adds	r2, #12
1a00832e:	edd2 7a00 	vldr	s15, [r2]
1a008332:	ee77 7a27 	vadd.f32	s15, s14, s15
1a008336:	edc3 7a00 	vstr	s15, [r3]
}
1a00833a:	bf00      	nop
1a00833c:	3714      	adds	r7, #20
1a00833e:	46bd      	mov	sp, r7
1a008340:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008344:	4770      	bx	lr
1a008346:	bf00      	nop

1a008348 <inv_q_normalizef>:

void inv_q_normalizef(float *q)
{
1a008348:	b480      	push	{r7}
1a00834a:	b085      	sub	sp, #20
1a00834c:	af00      	add	r7, sp, #0
1a00834e:	6078      	str	r0, [r7, #4]
    INVENSENSE_FUNC_START;
    float normSF = 0;
1a008350:	f04f 0300 	mov.w	r3, #0
1a008354:	60fb      	str	r3, [r7, #12]
    float xHalf = 0;
1a008356:	f04f 0300 	mov.w	r3, #0
1a00835a:	60bb      	str	r3, [r7, #8]
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1a00835c:	687b      	ldr	r3, [r7, #4]
1a00835e:	ed93 7a00 	vldr	s14, [r3]
1a008362:	687b      	ldr	r3, [r7, #4]
1a008364:	edd3 7a00 	vldr	s15, [r3]
1a008368:	ee27 7a27 	vmul.f32	s14, s14, s15
1a00836c:	687b      	ldr	r3, [r7, #4]
1a00836e:	3304      	adds	r3, #4
1a008370:	edd3 6a00 	vldr	s13, [r3]
1a008374:	687b      	ldr	r3, [r7, #4]
1a008376:	3304      	adds	r3, #4
1a008378:	edd3 7a00 	vldr	s15, [r3]
1a00837c:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008380:	ee37 7a27 	vadd.f32	s14, s14, s15
1a008384:	687b      	ldr	r3, [r7, #4]
1a008386:	3308      	adds	r3, #8
1a008388:	edd3 6a00 	vldr	s13, [r3]
1a00838c:	687b      	ldr	r3, [r7, #4]
1a00838e:	3308      	adds	r3, #8
1a008390:	edd3 7a00 	vldr	s15, [r3]
1a008394:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008398:	ee37 7a27 	vadd.f32	s14, s14, s15
1a00839c:	687b      	ldr	r3, [r7, #4]
1a00839e:	330c      	adds	r3, #12
1a0083a0:	edd3 6a00 	vldr	s13, [r3]
1a0083a4:	687b      	ldr	r3, [r7, #4]
1a0083a6:	330c      	adds	r3, #12
1a0083a8:	edd3 7a00 	vldr	s15, [r3]
1a0083ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a0083b0:	ee77 7a27 	vadd.f32	s15, s14, s15
1a0083b4:	edc7 7a03 	vstr	s15, [r7, #12]
    if (normSF < 2) {
1a0083b8:	edd7 7a03 	vldr	s15, [r7, #12]
1a0083bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
1a0083c0:	eef4 7ac7 	vcmpe.f32	s15, s14
1a0083c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0083c8:	f140 8087 	bpl.w	1a0084da <inv_q_normalizef+0x192>
        xHalf = 0.5f * normSF;
1a0083cc:	edd7 7a03 	vldr	s15, [r7, #12]
1a0083d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
1a0083d4:	ee67 7a87 	vmul.f32	s15, s15, s14
1a0083d8:	edc7 7a02 	vstr	s15, [r7, #8]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1a0083dc:	ed97 7a02 	vldr	s14, [r7, #8]
1a0083e0:	edd7 7a03 	vldr	s15, [r7, #12]
1a0083e4:	ee27 7a27 	vmul.f32	s14, s14, s15
1a0083e8:	edd7 7a03 	vldr	s15, [r7, #12]
1a0083ec:	ee67 7a27 	vmul.f32	s15, s14, s15
1a0083f0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
1a0083f4:	ee77 7a67 	vsub.f32	s15, s14, s15
1a0083f8:	ed97 7a03 	vldr	s14, [r7, #12]
1a0083fc:	ee67 7a27 	vmul.f32	s15, s14, s15
1a008400:	edc7 7a03 	vstr	s15, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1a008404:	ed97 7a02 	vldr	s14, [r7, #8]
1a008408:	edd7 7a03 	vldr	s15, [r7, #12]
1a00840c:	ee27 7a27 	vmul.f32	s14, s14, s15
1a008410:	edd7 7a03 	vldr	s15, [r7, #12]
1a008414:	ee67 7a27 	vmul.f32	s15, s14, s15
1a008418:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
1a00841c:	ee77 7a67 	vsub.f32	s15, s14, s15
1a008420:	ed97 7a03 	vldr	s14, [r7, #12]
1a008424:	ee67 7a27 	vmul.f32	s15, s14, s15
1a008428:	edc7 7a03 	vstr	s15, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1a00842c:	ed97 7a02 	vldr	s14, [r7, #8]
1a008430:	edd7 7a03 	vldr	s15, [r7, #12]
1a008434:	ee27 7a27 	vmul.f32	s14, s14, s15
1a008438:	edd7 7a03 	vldr	s15, [r7, #12]
1a00843c:	ee67 7a27 	vmul.f32	s15, s14, s15
1a008440:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
1a008444:	ee77 7a67 	vsub.f32	s15, s14, s15
1a008448:	ed97 7a03 	vldr	s14, [r7, #12]
1a00844c:	ee67 7a27 	vmul.f32	s15, s14, s15
1a008450:	edc7 7a03 	vstr	s15, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1a008454:	ed97 7a02 	vldr	s14, [r7, #8]
1a008458:	edd7 7a03 	vldr	s15, [r7, #12]
1a00845c:	ee27 7a27 	vmul.f32	s14, s14, s15
1a008460:	edd7 7a03 	vldr	s15, [r7, #12]
1a008464:	ee67 7a27 	vmul.f32	s15, s14, s15
1a008468:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
1a00846c:	ee77 7a67 	vsub.f32	s15, s14, s15
1a008470:	ed97 7a03 	vldr	s14, [r7, #12]
1a008474:	ee67 7a27 	vmul.f32	s15, s14, s15
1a008478:	edc7 7a03 	vstr	s15, [r7, #12]
        q[0] *= normSF;
1a00847c:	687b      	ldr	r3, [r7, #4]
1a00847e:	ed93 7a00 	vldr	s14, [r3]
1a008482:	edd7 7a03 	vldr	s15, [r7, #12]
1a008486:	ee67 7a27 	vmul.f32	s15, s14, s15
1a00848a:	687b      	ldr	r3, [r7, #4]
1a00848c:	edc3 7a00 	vstr	s15, [r3]
        q[1] *= normSF;
1a008490:	687b      	ldr	r3, [r7, #4]
1a008492:	3304      	adds	r3, #4
1a008494:	687a      	ldr	r2, [r7, #4]
1a008496:	3204      	adds	r2, #4
1a008498:	ed92 7a00 	vldr	s14, [r2]
1a00849c:	edd7 7a03 	vldr	s15, [r7, #12]
1a0084a0:	ee67 7a27 	vmul.f32	s15, s14, s15
1a0084a4:	edc3 7a00 	vstr	s15, [r3]
        q[2] *= normSF;
1a0084a8:	687b      	ldr	r3, [r7, #4]
1a0084aa:	3308      	adds	r3, #8
1a0084ac:	687a      	ldr	r2, [r7, #4]
1a0084ae:	3208      	adds	r2, #8
1a0084b0:	ed92 7a00 	vldr	s14, [r2]
1a0084b4:	edd7 7a03 	vldr	s15, [r7, #12]
1a0084b8:	ee67 7a27 	vmul.f32	s15, s14, s15
1a0084bc:	edc3 7a00 	vstr	s15, [r3]
        q[3] *= normSF;
1a0084c0:	687b      	ldr	r3, [r7, #4]
1a0084c2:	330c      	adds	r3, #12
1a0084c4:	687a      	ldr	r2, [r7, #4]
1a0084c6:	320c      	adds	r2, #12
1a0084c8:	ed92 7a00 	vldr	s14, [r2]
1a0084cc:	edd7 7a03 	vldr	s15, [r7, #12]
1a0084d0:	ee67 7a27 	vmul.f32	s15, s14, s15
1a0084d4:	edc3 7a00 	vstr	s15, [r3]
1a0084d8:	e012      	b.n	1a008500 <inv_q_normalizef+0x1b8>
    } else {
        q[0] = 1.0;
1a0084da:	687b      	ldr	r3, [r7, #4]
1a0084dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a0084e0:	601a      	str	r2, [r3, #0]
        q[1] = 0.0;
1a0084e2:	687b      	ldr	r3, [r7, #4]
1a0084e4:	3304      	adds	r3, #4
1a0084e6:	f04f 0200 	mov.w	r2, #0
1a0084ea:	601a      	str	r2, [r3, #0]
        q[2] = 0.0;
1a0084ec:	687b      	ldr	r3, [r7, #4]
1a0084ee:	3308      	adds	r3, #8
1a0084f0:	f04f 0200 	mov.w	r2, #0
1a0084f4:	601a      	str	r2, [r3, #0]
        q[3] = 0.0;
1a0084f6:	687b      	ldr	r3, [r7, #4]
1a0084f8:	330c      	adds	r3, #12
1a0084fa:	f04f 0200 	mov.w	r2, #0
1a0084fe:	601a      	str	r2, [r3, #0]
    }
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1a008500:	687b      	ldr	r3, [r7, #4]
1a008502:	ed93 7a00 	vldr	s14, [r3]
1a008506:	687b      	ldr	r3, [r7, #4]
1a008508:	edd3 7a00 	vldr	s15, [r3]
1a00850c:	ee27 7a27 	vmul.f32	s14, s14, s15
1a008510:	687b      	ldr	r3, [r7, #4]
1a008512:	3304      	adds	r3, #4
1a008514:	edd3 6a00 	vldr	s13, [r3]
1a008518:	687b      	ldr	r3, [r7, #4]
1a00851a:	3304      	adds	r3, #4
1a00851c:	edd3 7a00 	vldr	s15, [r3]
1a008520:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008524:	ee37 7a27 	vadd.f32	s14, s14, s15
1a008528:	687b      	ldr	r3, [r7, #4]
1a00852a:	3308      	adds	r3, #8
1a00852c:	edd3 6a00 	vldr	s13, [r3]
1a008530:	687b      	ldr	r3, [r7, #4]
1a008532:	3308      	adds	r3, #8
1a008534:	edd3 7a00 	vldr	s15, [r3]
1a008538:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a00853c:	ee37 7a27 	vadd.f32	s14, s14, s15
1a008540:	687b      	ldr	r3, [r7, #4]
1a008542:	330c      	adds	r3, #12
1a008544:	edd3 6a00 	vldr	s13, [r3]
1a008548:	687b      	ldr	r3, [r7, #4]
1a00854a:	330c      	adds	r3, #12
1a00854c:	edd3 7a00 	vldr	s15, [r3]
1a008550:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008554:	ee77 7a27 	vadd.f32	s15, s14, s15
1a008558:	edc7 7a03 	vstr	s15, [r7, #12]
}
1a00855c:	bf00      	nop
1a00855e:	3714      	adds	r7, #20
1a008560:	46bd      	mov	sp, r7
1a008562:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008566:	4770      	bx	lr

1a008568 <inv_q_norm4>:

/** Performs a length 4 vector normalization with a square root.
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
1a008568:	b580      	push	{r7, lr}
1a00856a:	b084      	sub	sp, #16
1a00856c:	af00      	add	r7, sp, #0
1a00856e:	6078      	str	r0, [r7, #4]
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1a008570:	687b      	ldr	r3, [r7, #4]
1a008572:	ed93 7a00 	vldr	s14, [r3]
1a008576:	687b      	ldr	r3, [r7, #4]
1a008578:	edd3 7a00 	vldr	s15, [r3]
1a00857c:	ee27 7a27 	vmul.f32	s14, s14, s15
1a008580:	687b      	ldr	r3, [r7, #4]
1a008582:	3304      	adds	r3, #4
1a008584:	edd3 6a00 	vldr	s13, [r3]
1a008588:	687b      	ldr	r3, [r7, #4]
1a00858a:	3304      	adds	r3, #4
1a00858c:	edd3 7a00 	vldr	s15, [r3]
1a008590:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a008594:	ee37 7a27 	vadd.f32	s14, s14, s15
1a008598:	687b      	ldr	r3, [r7, #4]
1a00859a:	3308      	adds	r3, #8
1a00859c:	edd3 6a00 	vldr	s13, [r3]
1a0085a0:	687b      	ldr	r3, [r7, #4]
1a0085a2:	3308      	adds	r3, #8
1a0085a4:	edd3 7a00 	vldr	s15, [r3]
1a0085a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a0085ac:	ee37 7a27 	vadd.f32	s14, s14, s15
1a0085b0:	687b      	ldr	r3, [r7, #4]
1a0085b2:	330c      	adds	r3, #12
1a0085b4:	edd3 6a00 	vldr	s13, [r3]
1a0085b8:	687b      	ldr	r3, [r7, #4]
1a0085ba:	330c      	adds	r3, #12
1a0085bc:	edd3 7a00 	vldr	s15, [r3]
1a0085c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
1a0085c4:	ee77 7a27 	vadd.f32	s15, s14, s15
1a0085c8:	ee17 0a90 	vmov	r0, s15
1a0085cc:	f00d f980 	bl	1a0158d0 <sqrtf>
1a0085d0:	60f8      	str	r0, [r7, #12]
    if (mag) {
1a0085d2:	edd7 7a03 	vldr	s15, [r7, #12]
1a0085d6:	eef5 7a40 	vcmp.f32	s15, #0.0
1a0085da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0085de:	d02e      	beq.n	1a00863e <inv_q_norm4+0xd6>
        q[0] /= mag;
1a0085e0:	687b      	ldr	r3, [r7, #4]
1a0085e2:	edd3 6a00 	vldr	s13, [r3]
1a0085e6:	ed97 7a03 	vldr	s14, [r7, #12]
1a0085ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
1a0085ee:	687b      	ldr	r3, [r7, #4]
1a0085f0:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= mag;
1a0085f4:	687b      	ldr	r3, [r7, #4]
1a0085f6:	3304      	adds	r3, #4
1a0085f8:	687a      	ldr	r2, [r7, #4]
1a0085fa:	3204      	adds	r2, #4
1a0085fc:	edd2 6a00 	vldr	s13, [r2]
1a008600:	ed97 7a03 	vldr	s14, [r7, #12]
1a008604:	eec6 7a87 	vdiv.f32	s15, s13, s14
1a008608:	edc3 7a00 	vstr	s15, [r3]
        q[2] /= mag;
1a00860c:	687b      	ldr	r3, [r7, #4]
1a00860e:	3308      	adds	r3, #8
1a008610:	687a      	ldr	r2, [r7, #4]
1a008612:	3208      	adds	r2, #8
1a008614:	edd2 6a00 	vldr	s13, [r2]
1a008618:	ed97 7a03 	vldr	s14, [r7, #12]
1a00861c:	eec6 7a87 	vdiv.f32	s15, s13, s14
1a008620:	edc3 7a00 	vstr	s15, [r3]
        q[3] /= mag;
1a008624:	687b      	ldr	r3, [r7, #4]
1a008626:	330c      	adds	r3, #12
1a008628:	687a      	ldr	r2, [r7, #4]
1a00862a:	320c      	adds	r2, #12
1a00862c:	edd2 6a00 	vldr	s13, [r2]
1a008630:	ed97 7a03 	vldr	s14, [r7, #12]
1a008634:	eec6 7a87 	vdiv.f32	s15, s13, s14
1a008638:	edc3 7a00 	vstr	s15, [r3]
        q[0] = 1.f;
        q[1] = 0.f;
        q[2] = 0.f;
        q[3] = 0.f;
    }
}
1a00863c:	e012      	b.n	1a008664 <inv_q_norm4+0xfc>
        q[0] /= mag;
        q[1] /= mag;
        q[2] /= mag;
        q[3] /= mag;
    } else {
        q[0] = 1.f;
1a00863e:	687b      	ldr	r3, [r7, #4]
1a008640:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a008644:	601a      	str	r2, [r3, #0]
        q[1] = 0.f;
1a008646:	687b      	ldr	r3, [r7, #4]
1a008648:	3304      	adds	r3, #4
1a00864a:	f04f 0200 	mov.w	r2, #0
1a00864e:	601a      	str	r2, [r3, #0]
        q[2] = 0.f;
1a008650:	687b      	ldr	r3, [r7, #4]
1a008652:	3308      	adds	r3, #8
1a008654:	f04f 0200 	mov.w	r2, #0
1a008658:	601a      	str	r2, [r3, #0]
        q[3] = 0.f;
1a00865a:	687b      	ldr	r3, [r7, #4]
1a00865c:	330c      	adds	r3, #12
1a00865e:	f04f 0200 	mov.w	r2, #0
1a008662:	601a      	str	r2, [r3, #0]
    }
}
1a008664:	bf00      	nop
1a008666:	3710      	adds	r7, #16
1a008668:	46bd      	mov	sp, r7
1a00866a:	bd80      	pop	{r7, pc}

1a00866c <inv_q_invertf>:

void inv_q_invertf(const float *q, float *qInverted)
{
1a00866c:	b480      	push	{r7}
1a00866e:	b083      	sub	sp, #12
1a008670:	af00      	add	r7, sp, #0
1a008672:	6078      	str	r0, [r7, #4]
1a008674:	6039      	str	r1, [r7, #0]
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1a008676:	687b      	ldr	r3, [r7, #4]
1a008678:	681a      	ldr	r2, [r3, #0]
1a00867a:	683b      	ldr	r3, [r7, #0]
1a00867c:	601a      	str	r2, [r3, #0]
    qInverted[1] = -q[1];
1a00867e:	683b      	ldr	r3, [r7, #0]
1a008680:	3304      	adds	r3, #4
1a008682:	687a      	ldr	r2, [r7, #4]
1a008684:	3204      	adds	r2, #4
1a008686:	edd2 7a00 	vldr	s15, [r2]
1a00868a:	eef1 7a67 	vneg.f32	s15, s15
1a00868e:	edc3 7a00 	vstr	s15, [r3]
    qInverted[2] = -q[2];
1a008692:	683b      	ldr	r3, [r7, #0]
1a008694:	3308      	adds	r3, #8
1a008696:	687a      	ldr	r2, [r7, #4]
1a008698:	3208      	adds	r2, #8
1a00869a:	edd2 7a00 	vldr	s15, [r2]
1a00869e:	eef1 7a67 	vneg.f32	s15, s15
1a0086a2:	edc3 7a00 	vstr	s15, [r3]
    qInverted[3] = -q[3];
1a0086a6:	683b      	ldr	r3, [r7, #0]
1a0086a8:	330c      	adds	r3, #12
1a0086aa:	687a      	ldr	r2, [r7, #4]
1a0086ac:	320c      	adds	r2, #12
1a0086ae:	edd2 7a00 	vldr	s15, [r2]
1a0086b2:	eef1 7a67 	vneg.f32	s15, s15
1a0086b6:	edc3 7a00 	vstr	s15, [r3]
}
1a0086ba:	bf00      	nop
1a0086bc:	370c      	adds	r7, #12
1a0086be:	46bd      	mov	sp, r7
1a0086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0086c4:	4770      	bx	lr
1a0086c6:	bf00      	nop

1a0086c8 <inv_quaternion_to_rotation>:
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
1a0086c8:	b5b0      	push	{r4, r5, r7, lr}
1a0086ca:	b082      	sub	sp, #8
1a0086cc:	af00      	add	r7, sp, #0
1a0086ce:	6078      	str	r0, [r7, #4]
1a0086d0:	6039      	str	r1, [r7, #0]
    rot[0] =
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
1a0086d2:	687b      	ldr	r3, [r7, #4]
1a0086d4:	3304      	adds	r3, #4
1a0086d6:	681a      	ldr	r2, [r3, #0]
1a0086d8:	687b      	ldr	r3, [r7, #4]
1a0086da:	3304      	adds	r3, #4
1a0086dc:	681b      	ldr	r3, [r3, #0]
1a0086de:	4619      	mov	r1, r3
1a0086e0:	4610      	mov	r0, r2
1a0086e2:	f7ff fb81 	bl	1a007de8 <inv_q29_mult>
1a0086e6:	4604      	mov	r4, r0
1a0086e8:	687b      	ldr	r3, [r7, #4]
1a0086ea:	681a      	ldr	r2, [r3, #0]
1a0086ec:	687b      	ldr	r3, [r7, #4]
1a0086ee:	681b      	ldr	r3, [r3, #0]
1a0086f0:	4619      	mov	r1, r3
1a0086f2:	4610      	mov	r0, r2
1a0086f4:	f7ff fb78 	bl	1a007de8 <inv_q29_mult>
1a0086f8:	4603      	mov	r3, r0
1a0086fa:	4423      	add	r3, r4
                quat[0]) -
1a0086fc:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
    rot[0] =
1a008700:	683b      	ldr	r3, [r7, #0]
1a008702:	601a      	str	r2, [r3, #0]
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[1] =
1a008704:	683b      	ldr	r3, [r7, #0]
1a008706:	1d1c      	adds	r4, r3, #4
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
1a008708:	687b      	ldr	r3, [r7, #4]
1a00870a:	3304      	adds	r3, #4
1a00870c:	681a      	ldr	r2, [r3, #0]
1a00870e:	687b      	ldr	r3, [r7, #4]
1a008710:	3308      	adds	r3, #8
1a008712:	681b      	ldr	r3, [r3, #0]
1a008714:	4619      	mov	r1, r3
1a008716:	4610      	mov	r0, r2
1a008718:	f7ff fb66 	bl	1a007de8 <inv_q29_mult>
1a00871c:	4605      	mov	r5, r0
1a00871e:	687b      	ldr	r3, [r7, #4]
1a008720:	330c      	adds	r3, #12
1a008722:	681a      	ldr	r2, [r3, #0]
1a008724:	687b      	ldr	r3, [r7, #4]
1a008726:	681b      	ldr	r3, [r3, #0]
1a008728:	4619      	mov	r1, r3
1a00872a:	4610      	mov	r0, r2
1a00872c:	f7ff fb5c 	bl	1a007de8 <inv_q29_mult>
1a008730:	4603      	mov	r3, r0
1a008732:	1aeb      	subs	r3, r5, r3
{
    rot[0] =
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[1] =
1a008734:	6023      	str	r3, [r4, #0]
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
1a008736:	683b      	ldr	r3, [r7, #0]
1a008738:	f103 0408 	add.w	r4, r3, #8
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
1a00873c:	687b      	ldr	r3, [r7, #4]
1a00873e:	3304      	adds	r3, #4
1a008740:	681a      	ldr	r2, [r3, #0]
1a008742:	687b      	ldr	r3, [r7, #4]
1a008744:	330c      	adds	r3, #12
1a008746:	681b      	ldr	r3, [r3, #0]
1a008748:	4619      	mov	r1, r3
1a00874a:	4610      	mov	r0, r2
1a00874c:	f7ff fb4c 	bl	1a007de8 <inv_q29_mult>
1a008750:	4605      	mov	r5, r0
1a008752:	687b      	ldr	r3, [r7, #4]
1a008754:	3308      	adds	r3, #8
1a008756:	681a      	ldr	r2, [r3, #0]
1a008758:	687b      	ldr	r3, [r7, #4]
1a00875a:	681b      	ldr	r3, [r3, #0]
1a00875c:	4619      	mov	r1, r3
1a00875e:	4610      	mov	r0, r2
1a008760:	f7ff fb42 	bl	1a007de8 <inv_q29_mult>
1a008764:	4603      	mov	r3, r0
1a008766:	442b      	add	r3, r5
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[1] =
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
1a008768:	6023      	str	r3, [r4, #0]
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
1a00876a:	683b      	ldr	r3, [r7, #0]
1a00876c:	f103 040c 	add.w	r4, r3, #12
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
1a008770:	687b      	ldr	r3, [r7, #4]
1a008772:	3304      	adds	r3, #4
1a008774:	681a      	ldr	r2, [r3, #0]
1a008776:	687b      	ldr	r3, [r7, #4]
1a008778:	3308      	adds	r3, #8
1a00877a:	681b      	ldr	r3, [r3, #0]
1a00877c:	4619      	mov	r1, r3
1a00877e:	4610      	mov	r0, r2
1a008780:	f7ff fb32 	bl	1a007de8 <inv_q29_mult>
1a008784:	4605      	mov	r5, r0
1a008786:	687b      	ldr	r3, [r7, #4]
1a008788:	330c      	adds	r3, #12
1a00878a:	681a      	ldr	r2, [r3, #0]
1a00878c:	687b      	ldr	r3, [r7, #4]
1a00878e:	681b      	ldr	r3, [r3, #0]
1a008790:	4619      	mov	r1, r3
1a008792:	4610      	mov	r0, r2
1a008794:	f7ff fb28 	bl	1a007de8 <inv_q29_mult>
1a008798:	4603      	mov	r3, r0
1a00879a:	442b      	add	r3, r5
        1073741824L;
    rot[1] =
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
1a00879c:	6023      	str	r3, [r4, #0]
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
    rot[4] =
1a00879e:	683b      	ldr	r3, [r7, #0]
1a0087a0:	f103 0410 	add.w	r4, r3, #16
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
1a0087a4:	687b      	ldr	r3, [r7, #4]
1a0087a6:	3308      	adds	r3, #8
1a0087a8:	681a      	ldr	r2, [r3, #0]
1a0087aa:	687b      	ldr	r3, [r7, #4]
1a0087ac:	3308      	adds	r3, #8
1a0087ae:	681b      	ldr	r3, [r3, #0]
1a0087b0:	4619      	mov	r1, r3
1a0087b2:	4610      	mov	r0, r2
1a0087b4:	f7ff fb18 	bl	1a007de8 <inv_q29_mult>
1a0087b8:	4605      	mov	r5, r0
1a0087ba:	687b      	ldr	r3, [r7, #4]
1a0087bc:	681a      	ldr	r2, [r3, #0]
1a0087be:	687b      	ldr	r3, [r7, #4]
1a0087c0:	681b      	ldr	r3, [r3, #0]
1a0087c2:	4619      	mov	r1, r3
1a0087c4:	4610      	mov	r0, r2
1a0087c6:	f7ff fb0f 	bl	1a007de8 <inv_q29_mult>
1a0087ca:	4603      	mov	r3, r0
1a0087cc:	442b      	add	r3, r5
                quat[0]) -
1a0087ce:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
    rot[4] =
1a0087d2:	6023      	str	r3, [r4, #0]
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[5] =
1a0087d4:	683b      	ldr	r3, [r7, #0]
1a0087d6:	f103 0414 	add.w	r4, r3, #20
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
1a0087da:	687b      	ldr	r3, [r7, #4]
1a0087dc:	3308      	adds	r3, #8
1a0087de:	681a      	ldr	r2, [r3, #0]
1a0087e0:	687b      	ldr	r3, [r7, #4]
1a0087e2:	330c      	adds	r3, #12
1a0087e4:	681b      	ldr	r3, [r3, #0]
1a0087e6:	4619      	mov	r1, r3
1a0087e8:	4610      	mov	r0, r2
1a0087ea:	f7ff fafd 	bl	1a007de8 <inv_q29_mult>
1a0087ee:	4605      	mov	r5, r0
1a0087f0:	687b      	ldr	r3, [r7, #4]
1a0087f2:	3304      	adds	r3, #4
1a0087f4:	681a      	ldr	r2, [r3, #0]
1a0087f6:	687b      	ldr	r3, [r7, #4]
1a0087f8:	681b      	ldr	r3, [r3, #0]
1a0087fa:	4619      	mov	r1, r3
1a0087fc:	4610      	mov	r0, r2
1a0087fe:	f7ff faf3 	bl	1a007de8 <inv_q29_mult>
1a008802:	4603      	mov	r3, r0
1a008804:	1aeb      	subs	r3, r5, r3
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
    rot[4] =
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[5] =
1a008806:	6023      	str	r3, [r4, #0]
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
1a008808:	683b      	ldr	r3, [r7, #0]
1a00880a:	f103 0418 	add.w	r4, r3, #24
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
1a00880e:	687b      	ldr	r3, [r7, #4]
1a008810:	3304      	adds	r3, #4
1a008812:	681a      	ldr	r2, [r3, #0]
1a008814:	687b      	ldr	r3, [r7, #4]
1a008816:	330c      	adds	r3, #12
1a008818:	681b      	ldr	r3, [r3, #0]
1a00881a:	4619      	mov	r1, r3
1a00881c:	4610      	mov	r0, r2
1a00881e:	f7ff fae3 	bl	1a007de8 <inv_q29_mult>
1a008822:	4605      	mov	r5, r0
1a008824:	687b      	ldr	r3, [r7, #4]
1a008826:	3308      	adds	r3, #8
1a008828:	681a      	ldr	r2, [r3, #0]
1a00882a:	687b      	ldr	r3, [r7, #4]
1a00882c:	681b      	ldr	r3, [r3, #0]
1a00882e:	4619      	mov	r1, r3
1a008830:	4610      	mov	r0, r2
1a008832:	f7ff fad9 	bl	1a007de8 <inv_q29_mult>
1a008836:	4603      	mov	r3, r0
1a008838:	1aeb      	subs	r3, r5, r3
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[5] =
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
1a00883a:	6023      	str	r3, [r4, #0]
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
    rot[7] =
1a00883c:	683b      	ldr	r3, [r7, #0]
1a00883e:	f103 041c 	add.w	r4, r3, #28
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
1a008842:	687b      	ldr	r3, [r7, #4]
1a008844:	3308      	adds	r3, #8
1a008846:	681a      	ldr	r2, [r3, #0]
1a008848:	687b      	ldr	r3, [r7, #4]
1a00884a:	330c      	adds	r3, #12
1a00884c:	681b      	ldr	r3, [r3, #0]
1a00884e:	4619      	mov	r1, r3
1a008850:	4610      	mov	r0, r2
1a008852:	f7ff fac9 	bl	1a007de8 <inv_q29_mult>
1a008856:	4605      	mov	r5, r0
1a008858:	687b      	ldr	r3, [r7, #4]
1a00885a:	3304      	adds	r3, #4
1a00885c:	681a      	ldr	r2, [r3, #0]
1a00885e:	687b      	ldr	r3, [r7, #4]
1a008860:	681b      	ldr	r3, [r3, #0]
1a008862:	4619      	mov	r1, r3
1a008864:	4610      	mov	r0, r2
1a008866:	f7ff fabf 	bl	1a007de8 <inv_q29_mult>
1a00886a:	4603      	mov	r3, r0
1a00886c:	442b      	add	r3, r5
        1073741824L;
    rot[5] =
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
    rot[7] =
1a00886e:	6023      	str	r3, [r4, #0]
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
    rot[8] =
1a008870:	683b      	ldr	r3, [r7, #0]
1a008872:	f103 0420 	add.w	r4, r3, #32
        inv_q29_mult(quat[3], quat[3]) + inv_q29_mult(quat[0],
1a008876:	687b      	ldr	r3, [r7, #4]
1a008878:	330c      	adds	r3, #12
1a00887a:	681a      	ldr	r2, [r3, #0]
1a00887c:	687b      	ldr	r3, [r7, #4]
1a00887e:	330c      	adds	r3, #12
1a008880:	681b      	ldr	r3, [r3, #0]
1a008882:	4619      	mov	r1, r3
1a008884:	4610      	mov	r0, r2
1a008886:	f7ff faaf 	bl	1a007de8 <inv_q29_mult>
1a00888a:	4605      	mov	r5, r0
1a00888c:	687b      	ldr	r3, [r7, #4]
1a00888e:	681a      	ldr	r2, [r3, #0]
1a008890:	687b      	ldr	r3, [r7, #4]
1a008892:	681b      	ldr	r3, [r3, #0]
1a008894:	4619      	mov	r1, r3
1a008896:	4610      	mov	r0, r2
1a008898:	f7ff faa6 	bl	1a007de8 <inv_q29_mult>
1a00889c:	4603      	mov	r3, r0
1a00889e:	442b      	add	r3, r5
                quat[0]) -
1a0088a0:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
    rot[7] =
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
    rot[8] =
1a0088a4:	6023      	str	r3, [r4, #0]
        inv_q29_mult(quat[3], quat[3]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
}
1a0088a6:	bf00      	nop
1a0088a8:	3708      	adds	r7, #8
1a0088aa:	46bd      	mov	sp, r7
1a0088ac:	bdb0      	pop	{r4, r5, r7, pc}
1a0088ae:	bf00      	nop

1a0088b0 <inv_row_2_scale>:

    return hash;
}

static unsigned short inv_row_2_scale(const signed char *row)
{
1a0088b0:	b480      	push	{r7}
1a0088b2:	b085      	sub	sp, #20
1a0088b4:	af00      	add	r7, sp, #0
1a0088b6:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
1a0088b8:	687b      	ldr	r3, [r7, #4]
1a0088ba:	781b      	ldrb	r3, [r3, #0]
1a0088bc:	b25b      	sxtb	r3, r3
1a0088be:	2b00      	cmp	r3, #0
1a0088c0:	dd02      	ble.n	1a0088c8 <inv_row_2_scale+0x18>
        b = 0;
1a0088c2:	2300      	movs	r3, #0
1a0088c4:	81fb      	strh	r3, [r7, #14]
1a0088c6:	e02d      	b.n	1a008924 <inv_row_2_scale+0x74>
    else if (row[0] < 0)
1a0088c8:	687b      	ldr	r3, [r7, #4]
1a0088ca:	781b      	ldrb	r3, [r3, #0]
1a0088cc:	b25b      	sxtb	r3, r3
1a0088ce:	2b00      	cmp	r3, #0
1a0088d0:	da02      	bge.n	1a0088d8 <inv_row_2_scale+0x28>
        b = 4;
1a0088d2:	2304      	movs	r3, #4
1a0088d4:	81fb      	strh	r3, [r7, #14]
1a0088d6:	e025      	b.n	1a008924 <inv_row_2_scale+0x74>
    else if (row[1] > 0)
1a0088d8:	687b      	ldr	r3, [r7, #4]
1a0088da:	3301      	adds	r3, #1
1a0088dc:	781b      	ldrb	r3, [r3, #0]
1a0088de:	b25b      	sxtb	r3, r3
1a0088e0:	2b00      	cmp	r3, #0
1a0088e2:	dd02      	ble.n	1a0088ea <inv_row_2_scale+0x3a>
        b = 1;
1a0088e4:	2301      	movs	r3, #1
1a0088e6:	81fb      	strh	r3, [r7, #14]
1a0088e8:	e01c      	b.n	1a008924 <inv_row_2_scale+0x74>
    else if (row[1] < 0)
1a0088ea:	687b      	ldr	r3, [r7, #4]
1a0088ec:	3301      	adds	r3, #1
1a0088ee:	781b      	ldrb	r3, [r3, #0]
1a0088f0:	b25b      	sxtb	r3, r3
1a0088f2:	2b00      	cmp	r3, #0
1a0088f4:	da02      	bge.n	1a0088fc <inv_row_2_scale+0x4c>
        b = 5;
1a0088f6:	2305      	movs	r3, #5
1a0088f8:	81fb      	strh	r3, [r7, #14]
1a0088fa:	e013      	b.n	1a008924 <inv_row_2_scale+0x74>
    else if (row[2] > 0)
1a0088fc:	687b      	ldr	r3, [r7, #4]
1a0088fe:	3302      	adds	r3, #2
1a008900:	781b      	ldrb	r3, [r3, #0]
1a008902:	b25b      	sxtb	r3, r3
1a008904:	2b00      	cmp	r3, #0
1a008906:	dd02      	ble.n	1a00890e <inv_row_2_scale+0x5e>
        b = 2;
1a008908:	2302      	movs	r3, #2
1a00890a:	81fb      	strh	r3, [r7, #14]
1a00890c:	e00a      	b.n	1a008924 <inv_row_2_scale+0x74>
    else if (row[2] < 0)
1a00890e:	687b      	ldr	r3, [r7, #4]
1a008910:	3302      	adds	r3, #2
1a008912:	781b      	ldrb	r3, [r3, #0]
1a008914:	b25b      	sxtb	r3, r3
1a008916:	2b00      	cmp	r3, #0
1a008918:	da02      	bge.n	1a008920 <inv_row_2_scale+0x70>
        b = 6;
1a00891a:	2306      	movs	r3, #6
1a00891c:	81fb      	strh	r3, [r7, #14]
1a00891e:	e001      	b.n	1a008924 <inv_row_2_scale+0x74>
    else
        b = 7;		// error
1a008920:	2307      	movs	r3, #7
1a008922:	81fb      	strh	r3, [r7, #14]
    return b;
1a008924:	89fb      	ldrh	r3, [r7, #14]
}
1a008926:	4618      	mov	r0, r3
1a008928:	3714      	adds	r7, #20
1a00892a:	46bd      	mov	sp, r7
1a00892c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008930:	4770      	bx	lr
1a008932:	bf00      	nop

1a008934 <inv_orientation_matrix_to_scalar>:
* The next 2 bits (6 and 7) represent the column the one is on for the third row with
* bit number 8 being the sign. In binary the identity matrix would therefor be:
* 010_001_000 or 0x88 in hex.
*/
unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
1a008934:	b580      	push	{r7, lr}
1a008936:	b084      	sub	sp, #16
1a008938:	af00      	add	r7, sp, #0
1a00893a:	6078      	str	r0, [r7, #4]
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
1a00893c:	6878      	ldr	r0, [r7, #4]
1a00893e:	f7ff ffb7 	bl	1a0088b0 <inv_row_2_scale>
1a008942:	4603      	mov	r3, r0
1a008944:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
1a008946:	687b      	ldr	r3, [r7, #4]
1a008948:	3303      	adds	r3, #3
1a00894a:	4618      	mov	r0, r3
1a00894c:	f7ff ffb0 	bl	1a0088b0 <inv_row_2_scale>
1a008950:	4603      	mov	r3, r0
1a008952:	00db      	lsls	r3, r3, #3
1a008954:	b29a      	uxth	r2, r3
1a008956:	89fb      	ldrh	r3, [r7, #14]
1a008958:	4313      	orrs	r3, r2
1a00895a:	b29b      	uxth	r3, r3
1a00895c:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
1a00895e:	687b      	ldr	r3, [r7, #4]
1a008960:	3306      	adds	r3, #6
1a008962:	4618      	mov	r0, r3
1a008964:	f7ff ffa4 	bl	1a0088b0 <inv_row_2_scale>
1a008968:	4603      	mov	r3, r0
1a00896a:	019b      	lsls	r3, r3, #6
1a00896c:	b29a      	uxth	r2, r3
1a00896e:	89fb      	ldrh	r3, [r7, #14]
1a008970:	4313      	orrs	r3, r2
1a008972:	b29b      	uxth	r3, r3
1a008974:	81fb      	strh	r3, [r7, #14]


    return scalar;
1a008976:	89fb      	ldrh	r3, [r7, #14]
}
1a008978:	4618      	mov	r0, r3
1a00897a:	3710      	adds	r7, #16
1a00897c:	46bd      	mov	sp, r7
1a00897e:	bd80      	pop	{r7, pc}

1a008980 <inv_convert_to_body_with_scale>:
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
1a008980:	b590      	push	{r4, r7, lr}
1a008982:	b085      	sub	sp, #20
1a008984:	af00      	add	r7, sp, #0
1a008986:	60b9      	str	r1, [r7, #8]
1a008988:	607a      	str	r2, [r7, #4]
1a00898a:	603b      	str	r3, [r7, #0]
1a00898c:	4603      	mov	r3, r0
1a00898e:	81fb      	strh	r3, [r7, #14]
    output[0] = inv_q30_mult(input[orientation & 0x03] *
1a008990:	89fb      	ldrh	r3, [r7, #14]
1a008992:	f003 0303 	and.w	r3, r3, #3
1a008996:	009b      	lsls	r3, r3, #2
1a008998:	687a      	ldr	r2, [r7, #4]
1a00899a:	4413      	add	r3, r2
1a00899c:	681b      	ldr	r3, [r3, #0]
                             SIGNSET(orientation & 0x004), sensitivity);
1a00899e:	89fa      	ldrh	r2, [r7, #14]
1a0089a0:	f002 0204 	and.w	r2, r2, #4
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
    output[0] = inv_q30_mult(input[orientation & 0x03] *
1a0089a4:	2a00      	cmp	r2, #0
1a0089a6:	d002      	beq.n	1a0089ae <inv_convert_to_body_with_scale+0x2e>
1a0089a8:	f04f 32ff 	mov.w	r2, #4294967295
1a0089ac:	e000      	b.n	1a0089b0 <inv_convert_to_body_with_scale+0x30>
1a0089ae:	2201      	movs	r2, #1
1a0089b0:	fb02 f303 	mul.w	r3, r2, r3
1a0089b4:	68b9      	ldr	r1, [r7, #8]
1a0089b6:	4618      	mov	r0, r3
1a0089b8:	f7ff fa3c 	bl	1a007e34 <inv_q30_mult>
1a0089bc:	4602      	mov	r2, r0
1a0089be:	683b      	ldr	r3, [r7, #0]
1a0089c0:	601a      	str	r2, [r3, #0]
                             SIGNSET(orientation & 0x004), sensitivity);
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
1a0089c2:	683b      	ldr	r3, [r7, #0]
1a0089c4:	1d1c      	adds	r4, r3, #4
1a0089c6:	89fb      	ldrh	r3, [r7, #14]
1a0089c8:	08db      	lsrs	r3, r3, #3
1a0089ca:	b29b      	uxth	r3, r3
1a0089cc:	f003 0303 	and.w	r3, r3, #3
1a0089d0:	009b      	lsls	r3, r3, #2
1a0089d2:	687a      	ldr	r2, [r7, #4]
1a0089d4:	4413      	add	r3, r2
1a0089d6:	681b      	ldr	r3, [r3, #0]
                             SIGNSET(orientation & 0x020), sensitivity);
1a0089d8:	89fa      	ldrh	r2, [r7, #14]
1a0089da:	f002 0220 	and.w	r2, r2, #32
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
    output[0] = inv_q30_mult(input[orientation & 0x03] *
                             SIGNSET(orientation & 0x004), sensitivity);
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
1a0089de:	2a00      	cmp	r2, #0
1a0089e0:	d002      	beq.n	1a0089e8 <inv_convert_to_body_with_scale+0x68>
1a0089e2:	f04f 32ff 	mov.w	r2, #4294967295
1a0089e6:	e000      	b.n	1a0089ea <inv_convert_to_body_with_scale+0x6a>
1a0089e8:	2201      	movs	r2, #1
1a0089ea:	fb02 f303 	mul.w	r3, r2, r3
1a0089ee:	68b9      	ldr	r1, [r7, #8]
1a0089f0:	4618      	mov	r0, r3
1a0089f2:	f7ff fa1f 	bl	1a007e34 <inv_q30_mult>
1a0089f6:	4603      	mov	r3, r0
1a0089f8:	6023      	str	r3, [r4, #0]
                             SIGNSET(orientation & 0x020), sensitivity);
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
1a0089fa:	683b      	ldr	r3, [r7, #0]
1a0089fc:	f103 0408 	add.w	r4, r3, #8
1a008a00:	89fb      	ldrh	r3, [r7, #14]
1a008a02:	099b      	lsrs	r3, r3, #6
1a008a04:	b29b      	uxth	r3, r3
1a008a06:	f003 0303 	and.w	r3, r3, #3
1a008a0a:	009b      	lsls	r3, r3, #2
1a008a0c:	687a      	ldr	r2, [r7, #4]
1a008a0e:	4413      	add	r3, r2
1a008a10:	681b      	ldr	r3, [r3, #0]
                             SIGNSET(orientation & 0x100), sensitivity);
1a008a12:	89fa      	ldrh	r2, [r7, #14]
1a008a14:	f402 7280 	and.w	r2, r2, #256	; 0x100
{
    output[0] = inv_q30_mult(input[orientation & 0x03] *
                             SIGNSET(orientation & 0x004), sensitivity);
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
                             SIGNSET(orientation & 0x020), sensitivity);
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
1a008a18:	2a00      	cmp	r2, #0
1a008a1a:	d002      	beq.n	1a008a22 <inv_convert_to_body_with_scale+0xa2>
1a008a1c:	f04f 32ff 	mov.w	r2, #4294967295
1a008a20:	e000      	b.n	1a008a24 <inv_convert_to_body_with_scale+0xa4>
1a008a22:	2201      	movs	r2, #1
1a008a24:	fb02 f303 	mul.w	r3, r2, r3
1a008a28:	68b9      	ldr	r1, [r7, #8]
1a008a2a:	4618      	mov	r0, r3
1a008a2c:	f7ff fa02 	bl	1a007e34 <inv_q30_mult>
1a008a30:	4603      	mov	r3, r0
1a008a32:	6023      	str	r3, [r4, #0]
                             SIGNSET(orientation & 0x100), sensitivity);
}
1a008a34:	bf00      	nop
1a008a36:	3714      	adds	r7, #20
1a008a38:	46bd      	mov	sp, r7
1a008a3a:	bd90      	pop	{r4, r7, pc}

1a008a3c <mlMatrixVectorMult>:
    cgcross[0] = (float)compass[1] * grav[2] - (float)compass[2] * grav[1];
    cgcross[1] = (float)compass[2] * grav[0] - (float)compass[0] * grav[2];
    cgcross[2] = (float)compass[0] * grav[1] - (float)compass[1] * grav[0];
}

void mlMatrixVectorMult(long matrix[9], const long vecIn[3], long *vecOut)  {
1a008a3c:	b580      	push	{r7, lr}
1a008a3e:	b088      	sub	sp, #32
1a008a40:	af00      	add	r7, sp, #0
1a008a42:	60f8      	str	r0, [r7, #12]
1a008a44:	60b9      	str	r1, [r7, #8]
1a008a46:	607a      	str	r2, [r7, #4]

        // vector format:  [0  1  2]^T;
        int i, j;
        long temp;

        for (i=0; i<3; i++)	{
1a008a48:	2300      	movs	r3, #0
1a008a4a:	61fb      	str	r3, [r7, #28]
1a008a4c:	e029      	b.n	1a008aa2 <mlMatrixVectorMult+0x66>
                temp = 0;
1a008a4e:	2300      	movs	r3, #0
1a008a50:	617b      	str	r3, [r7, #20]
                for (j=0; j<3; j++)  {
1a008a52:	2300      	movs	r3, #0
1a008a54:	61bb      	str	r3, [r7, #24]
1a008a56:	e018      	b.n	1a008a8a <mlMatrixVectorMult+0x4e>
                        temp += inv_q30_mult(matrix[i+j*3], vecIn[j]);
1a008a58:	69ba      	ldr	r2, [r7, #24]
1a008a5a:	4613      	mov	r3, r2
1a008a5c:	005b      	lsls	r3, r3, #1
1a008a5e:	441a      	add	r2, r3
1a008a60:	69fb      	ldr	r3, [r7, #28]
1a008a62:	4413      	add	r3, r2
1a008a64:	009b      	lsls	r3, r3, #2
1a008a66:	68fa      	ldr	r2, [r7, #12]
1a008a68:	4413      	add	r3, r2
1a008a6a:	6818      	ldr	r0, [r3, #0]
1a008a6c:	69bb      	ldr	r3, [r7, #24]
1a008a6e:	009b      	lsls	r3, r3, #2
1a008a70:	68ba      	ldr	r2, [r7, #8]
1a008a72:	4413      	add	r3, r2
1a008a74:	681b      	ldr	r3, [r3, #0]
1a008a76:	4619      	mov	r1, r3
1a008a78:	f7ff f9dc 	bl	1a007e34 <inv_q30_mult>
1a008a7c:	4602      	mov	r2, r0
1a008a7e:	697b      	ldr	r3, [r7, #20]
1a008a80:	4413      	add	r3, r2
1a008a82:	617b      	str	r3, [r7, #20]
        int i, j;
        long temp;

        for (i=0; i<3; i++)	{
                temp = 0;
                for (j=0; j<3; j++)  {
1a008a84:	69bb      	ldr	r3, [r7, #24]
1a008a86:	3301      	adds	r3, #1
1a008a88:	61bb      	str	r3, [r7, #24]
1a008a8a:	69bb      	ldr	r3, [r7, #24]
1a008a8c:	2b02      	cmp	r3, #2
1a008a8e:	dde3      	ble.n	1a008a58 <mlMatrixVectorMult+0x1c>
                        temp += inv_q30_mult(matrix[i+j*3], vecIn[j]);
                }
                vecOut[i] = temp;
1a008a90:	69fb      	ldr	r3, [r7, #28]
1a008a92:	009b      	lsls	r3, r3, #2
1a008a94:	687a      	ldr	r2, [r7, #4]
1a008a96:	4413      	add	r3, r2
1a008a98:	697a      	ldr	r2, [r7, #20]
1a008a9a:	601a      	str	r2, [r3, #0]

        // vector format:  [0  1  2]^T;
        int i, j;
        long temp;

        for (i=0; i<3; i++)	{
1a008a9c:	69fb      	ldr	r3, [r7, #28]
1a008a9e:	3301      	adds	r3, #1
1a008aa0:	61fb      	str	r3, [r7, #28]
1a008aa2:	69fb      	ldr	r3, [r7, #28]
1a008aa4:	2b02      	cmp	r3, #2
1a008aa6:	ddd2      	ble.n	1a008a4e <mlMatrixVectorMult+0x12>
                for (j=0; j<3; j++)  {
                        temp += inv_q30_mult(matrix[i+j*3], vecIn[j]);
                }
                vecOut[i] = temp;
        }
}
1a008aa8:	bf00      	nop
1a008aaa:	3720      	adds	r7, #32
1a008aac:	46bd      	mov	sp, r7
1a008aae:	bd80      	pop	{r7, pc}

1a008ab0 <__print_result_location>:
#endif

static inline void __print_result_location(int result,
					   const char *file,
					   const char *func, int line)
{
1a008ab0:	b580      	push	{r7, lr}
1a008ab2:	b088      	sub	sp, #32
1a008ab4:	af04      	add	r7, sp, #16
1a008ab6:	60f8      	str	r0, [r7, #12]
1a008ab8:	60b9      	str	r1, [r7, #8]
1a008aba:	607a      	str	r2, [r7, #4]
1a008abc:	603b      	str	r3, [r7, #0]
	MPL_LOGE("%s|%s|%d returning %d\n", file, func, line, result);
1a008abe:	68fb      	ldr	r3, [r7, #12]
1a008ac0:	9302      	str	r3, [sp, #8]
1a008ac2:	683b      	ldr	r3, [r7, #0]
1a008ac4:	9301      	str	r3, [sp, #4]
1a008ac6:	687b      	ldr	r3, [r7, #4]
1a008ac8:	9300      	str	r3, [sp, #0]
1a008aca:	68bb      	ldr	r3, [r7, #8]
1a008acc:	4a04      	ldr	r2, [pc, #16]	; (1a008ae0 <__print_result_location+0x30>)
1a008ace:	2100      	movs	r1, #0
1a008ad0:	2006      	movs	r0, #6
1a008ad2:	f7fa fa49 	bl	1a002f68 <_MLPrintLog>
}
1a008ad6:	bf00      	nop
1a008ad8:	3710      	adds	r7, #16
1a008ada:	46bd      	mov	sp, r7
1a008adc:	bd80      	pop	{r7, pc}
1a008ade:	bf00      	nop
1a008ae0:	1a019d60 	.word	0x1a019d60

1a008ae4 <inv_init_mpl>:
/**
 * @brief  Initializes the MPL. Should be called first and once 
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_init_mpl(void)
{
1a008ae4:	b580      	push	{r7, lr}
1a008ae6:	af00      	add	r7, sp, #0
    inv_init_storage_manager();
1a008ae8:	f000 fb4c 	bl	1a009184 <inv_init_storage_manager>

    /* initialize the start callback manager */
    INV_ERROR_CHECK(inv_init_start_manager());
1a008aec:	f000 faf8 	bl	1a0090e0 <inv_init_start_manager>
1a008af0:	4603      	mov	r3, r0
1a008af2:	2b00      	cmp	r3, #0
1a008af4:	d00a      	beq.n	1a008b0c <inv_init_mpl+0x28>
1a008af6:	f000 faf3 	bl	1a0090e0 <inv_init_start_manager>
1a008afa:	2322      	movs	r3, #34	; 0x22
1a008afc:	4a15      	ldr	r2, [pc, #84]	; (1a008b54 <inv_init_mpl+0x70>)
1a008afe:	4916      	ldr	r1, [pc, #88]	; (1a008b58 <inv_init_mpl+0x74>)
1a008b00:	f7ff ffd6 	bl	1a008ab0 <__print_result_location>
1a008b04:	f000 faec 	bl	1a0090e0 <inv_init_start_manager>
1a008b08:	4603      	mov	r3, r0
1a008b0a:	e020      	b.n	1a008b4e <inv_init_mpl+0x6a>

    /* initialize the data builder */
    INV_ERROR_CHECK(inv_init_data_builder());
1a008b0c:	f7fe f908 	bl	1a006d20 <inv_init_data_builder>
1a008b10:	4603      	mov	r3, r0
1a008b12:	2b00      	cmp	r3, #0
1a008b14:	d00a      	beq.n	1a008b2c <inv_init_mpl+0x48>
1a008b16:	f7fe f903 	bl	1a006d20 <inv_init_data_builder>
1a008b1a:	2325      	movs	r3, #37	; 0x25
1a008b1c:	4a0d      	ldr	r2, [pc, #52]	; (1a008b54 <inv_init_mpl+0x70>)
1a008b1e:	490e      	ldr	r1, [pc, #56]	; (1a008b58 <inv_init_mpl+0x74>)
1a008b20:	f7ff ffc6 	bl	1a008ab0 <__print_result_location>
1a008b24:	f7fe f8fc 	bl	1a006d20 <inv_init_data_builder>
1a008b28:	4603      	mov	r3, r0
1a008b2a:	e010      	b.n	1a008b4e <inv_init_mpl+0x6a>

    INV_ERROR_CHECK(inv_enable_results_holder());
1a008b2c:	f000 f9f2 	bl	1a008f14 <inv_enable_results_holder>
1a008b30:	4603      	mov	r3, r0
1a008b32:	2b00      	cmp	r3, #0
1a008b34:	d00a      	beq.n	1a008b4c <inv_init_mpl+0x68>
1a008b36:	f000 f9ed 	bl	1a008f14 <inv_enable_results_holder>
1a008b3a:	2327      	movs	r3, #39	; 0x27
1a008b3c:	4a05      	ldr	r2, [pc, #20]	; (1a008b54 <inv_init_mpl+0x70>)
1a008b3e:	4906      	ldr	r1, [pc, #24]	; (1a008b58 <inv_init_mpl+0x74>)
1a008b40:	f7ff ffb6 	bl	1a008ab0 <__print_result_location>
1a008b44:	f000 f9e6 	bl	1a008f14 <inv_enable_results_holder>
1a008b48:	4603      	mov	r3, r0
1a008b4a:	e000      	b.n	1a008b4e <inv_init_mpl+0x6a>

    return INV_SUCCESS;
1a008b4c:	2300      	movs	r3, #0
}
1a008b4e:	4618      	mov	r0, r3
1a008b50:	bd80      	pop	{r7, pc}
1a008b52:	bf00      	nop
1a008b54:	1a019d98 	.word	0x1a019d98
1a008b58:	1a019d78 	.word	0x1a019d78

1a008b5c <inv_start_mpl>:
 *  @brief  Starts the MPL. Typically called after inv_init_mpl() or after a
 *          inv_stop_mpl() to start the MPL back up an running.
 *  @return INV_SUCCESS if successful or a non-zero error code otherwise.
 */
inv_error_t inv_start_mpl(void)
{
1a008b5c:	b580      	push	{r7, lr}
1a008b5e:	af00      	add	r7, sp, #0
    INV_ERROR_CHECK(inv_execute_mpl_start_notification());
1a008b60:	f000 faea 	bl	1a009138 <inv_execute_mpl_start_notification>
1a008b64:	4603      	mov	r3, r0
1a008b66:	2b00      	cmp	r3, #0
1a008b68:	d00a      	beq.n	1a008b80 <inv_start_mpl+0x24>
1a008b6a:	f000 fae5 	bl	1a009138 <inv_execute_mpl_start_notification>
1a008b6e:	2342      	movs	r3, #66	; 0x42
1a008b70:	4a05      	ldr	r2, [pc, #20]	; (1a008b88 <inv_start_mpl+0x2c>)
1a008b72:	4906      	ldr	r1, [pc, #24]	; (1a008b8c <inv_start_mpl+0x30>)
1a008b74:	f7ff ff9c 	bl	1a008ab0 <__print_result_location>
1a008b78:	f000 fade 	bl	1a009138 <inv_execute_mpl_start_notification>
1a008b7c:	4603      	mov	r3, r0
1a008b7e:	e000      	b.n	1a008b82 <inv_start_mpl+0x26>
    return INV_SUCCESS;
1a008b80:	2300      	movs	r3, #0
}
1a008b82:	4618      	mov	r0, r3
1a008b84:	bd80      	pop	{r7, pc}
1a008b86:	bf00      	nop
1a008b88:	1a019da8 	.word	0x1a019da8
1a008b8c:	1a019d78 	.word	0x1a019d78

1a008b90 <inv_store_gaming_quaternion>:
* Store a quaternion more suitable for gaming. This quaternion is often determined
* using only gyro and accel.
* @param[in] quat Length 4, Quaternion scaled by 2^30
*/
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
1a008b90:	b580      	push	{r7, lr}
1a008b92:	b082      	sub	sp, #8
1a008b94:	af00      	add	r7, sp, #0
1a008b96:	6078      	str	r0, [r7, #4]
1a008b98:	6039      	str	r1, [r7, #0]
    rh.status |= INV_6_AXIS_QUAT_SET;
1a008b9a:	4b09      	ldr	r3, [pc, #36]	; (1a008bc0 <inv_store_gaming_quaternion+0x30>)
1a008b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1a008b9e:	f043 0302 	orr.w	r3, r3, #2
1a008ba2:	4a07      	ldr	r2, [pc, #28]	; (1a008bc0 <inv_store_gaming_quaternion+0x30>)
1a008ba4:	67d3      	str	r3, [r2, #124]	; 0x7c
    memcpy(&rh.gam_quat, quat, sizeof(rh.gam_quat));
1a008ba6:	2210      	movs	r2, #16
1a008ba8:	6879      	ldr	r1, [r7, #4]
1a008baa:	4806      	ldr	r0, [pc, #24]	; (1a008bc4 <inv_store_gaming_quaternion+0x34>)
1a008bac:	f00c f81a 	bl	1a014be4 <memcpy>
    rh.gam_timestamp = timestamp;
1a008bb0:	4a03      	ldr	r2, [pc, #12]	; (1a008bc0 <inv_store_gaming_quaternion+0x30>)
1a008bb2:	683b      	ldr	r3, [r7, #0]
1a008bb4:	6253      	str	r3, [r2, #36]	; 0x24
}
1a008bb6:	bf00      	nop
1a008bb8:	3708      	adds	r7, #8
1a008bba:	46bd      	mov	sp, r7
1a008bbc:	bd80      	pop	{r7, pc}
1a008bbe:	bf00      	nop
1a008bc0:	10086930 	.word	0x10086930
1a008bc4:	10086940 	.word	0x10086940

1a008bc8 <inv_set_compass_correction>:
* Sets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
1a008bc8:	b580      	push	{r7, lr}
1a008bca:	b082      	sub	sp, #8
1a008bcc:	af00      	add	r7, sp, #0
1a008bce:	6078      	str	r0, [r7, #4]
1a008bd0:	6039      	str	r1, [r7, #0]
    rh.status |= INV_COMPASS_CORRECTION_SET;
1a008bd2:	4b09      	ldr	r3, [pc, #36]	; (1a008bf8 <inv_set_compass_correction+0x30>)
1a008bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1a008bd6:	f043 0301 	orr.w	r3, r3, #1
1a008bda:	4a07      	ldr	r2, [pc, #28]	; (1a008bf8 <inv_set_compass_correction+0x30>)
1a008bdc:	67d3      	str	r3, [r2, #124]	; 0x7c
    memcpy(rh.compass_correction, data, sizeof(rh.compass_correction));
1a008bde:	2210      	movs	r2, #16
1a008be0:	6879      	ldr	r1, [r7, #4]
1a008be2:	4806      	ldr	r0, [pc, #24]	; (1a008bfc <inv_set_compass_correction+0x34>)
1a008be4:	f00b fffe 	bl	1a014be4 <memcpy>
    rh.nav_timestamp = timestamp;
1a008be8:	4a03      	ldr	r2, [pc, #12]	; (1a008bf8 <inv_set_compass_correction+0x30>)
1a008bea:	683b      	ldr	r3, [r7, #0]
1a008bec:	6213      	str	r3, [r2, #32]
}
1a008bee:	bf00      	nop
1a008bf0:	3708      	adds	r7, #8
1a008bf2:	46bd      	mov	sp, r7
1a008bf4:	bd80      	pop	{r7, pc}
1a008bf6:	bf00      	nop
1a008bf8:	10086930 	.word	0x10086930
1a008bfc:	10086970 	.word	0x10086970

1a008c00 <inv_get_compass_correction>:
* Gets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[out] data Quaternion Adjustment
* @param[out] timestamp Timestamp of when this is valid
*/
void inv_get_compass_correction(long *data, inv_time_t *timestamp)
{
1a008c00:	b580      	push	{r7, lr}
1a008c02:	b082      	sub	sp, #8
1a008c04:	af00      	add	r7, sp, #0
1a008c06:	6078      	str	r0, [r7, #4]
1a008c08:	6039      	str	r1, [r7, #0]
    memcpy(data, rh.compass_correction, sizeof(rh.compass_correction));
1a008c0a:	2210      	movs	r2, #16
1a008c0c:	4905      	ldr	r1, [pc, #20]	; (1a008c24 <inv_get_compass_correction+0x24>)
1a008c0e:	6878      	ldr	r0, [r7, #4]
1a008c10:	f00b ffe8 	bl	1a014be4 <memcpy>
    *timestamp = rh.nav_timestamp;
1a008c14:	4b04      	ldr	r3, [pc, #16]	; (1a008c28 <inv_get_compass_correction+0x28>)
1a008c16:	6a1a      	ldr	r2, [r3, #32]
1a008c18:	683b      	ldr	r3, [r7, #0]
1a008c1a:	601a      	str	r2, [r3, #0]
}
1a008c1c:	bf00      	nop
1a008c1e:	3708      	adds	r7, #8
1a008c20:	46bd      	mov	sp, r7
1a008c22:	bd80      	pop	{r7, pc}
1a008c24:	10086970 	.word	0x10086970
1a008c28:	10086930 	.word	0x10086930

1a008c2c <inv_get_large_mag_field>:

/** Returns non-zero if there is a large magnetic field. See inv_set_large_mag_field() for setting this variable.
 * @return Returns non-zero if there is a large magnetic field.
 */
int inv_get_large_mag_field()
{
1a008c2c:	b480      	push	{r7}
1a008c2e:	af00      	add	r7, sp, #0
    return rh.large_mag_field;
1a008c30:	4b03      	ldr	r3, [pc, #12]	; (1a008c40 <inv_get_large_mag_field+0x14>)
1a008c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
1a008c34:	4618      	mov	r0, r3
1a008c36:	46bd      	mov	sp, r7
1a008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008c3c:	4770      	bx	lr
1a008c3e:	bf00      	nop
1a008c40:	10086930 	.word	0x10086930

1a008c44 <inv_get_acc_state>:

/** Gets the accel state set by inv_set_acc_state()
 * @return accel state.
 */
int inv_get_acc_state()
{
1a008c44:	b480      	push	{r7}
1a008c46:	af00      	add	r7, sp, #0
    return rh.acc_state;
1a008c48:	4b03      	ldr	r3, [pc, #12]	; (1a008c58 <inv_get_acc_state+0x14>)
1a008c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
1a008c4c:	4618      	mov	r0, r3
1a008c4e:	46bd      	mov	sp, r7
1a008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008c54:	4770      	bx	lr
1a008c56:	bf00      	nop
1a008c58:	10086930 	.word	0x10086930

1a008c5c <inv_get_motion_state>:
/** Returns the motion state
* @param[out] cntr Number of previous times a no motion event has occured in a row.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
int inv_get_motion_state(unsigned int *cntr)
{
1a008c5c:	b480      	push	{r7}
1a008c5e:	b083      	sub	sp, #12
1a008c60:	af00      	add	r7, sp, #0
1a008c62:	6078      	str	r0, [r7, #4]
    *cntr = rh.motion_state_counter;
1a008c64:	4b06      	ldr	r3, [pc, #24]	; (1a008c80 <inv_get_motion_state+0x24>)
1a008c66:	6e9a      	ldr	r2, [r3, #104]	; 0x68
1a008c68:	687b      	ldr	r3, [r7, #4]
1a008c6a:	601a      	str	r2, [r3, #0]
    return rh.motion_state;
1a008c6c:	4b04      	ldr	r3, [pc, #16]	; (1a008c80 <inv_get_motion_state+0x24>)
1a008c6e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
}
1a008c72:	4618      	mov	r0, r3
1a008c74:	370c      	adds	r7, #12
1a008c76:	46bd      	mov	sp, r7
1a008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008c7c:	4770      	bx	lr
1a008c7e:	bf00      	nop
1a008c80:	10086930 	.word	0x10086930

1a008c84 <inv_set_motion_state>:
/** Sets the motion state
 * @param[in] state motion state where INV_NO_MOTION is not moving
 *            and INV_MOTION is moving.
 */
void inv_set_motion_state(unsigned char state)
{
1a008c84:	b580      	push	{r7, lr}
1a008c86:	b084      	sub	sp, #16
1a008c88:	af00      	add	r7, sp, #0
1a008c8a:	4603      	mov	r3, r0
1a008c8c:	71fb      	strb	r3, [r7, #7]
    long set;
    if (state == rh.motion_state) {
1a008c8e:	4b15      	ldr	r3, [pc, #84]	; (1a008ce4 <inv_set_motion_state+0x60>)
1a008c90:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
1a008c94:	79fa      	ldrb	r2, [r7, #7]
1a008c96:	429a      	cmp	r2, r3
1a008c98:	d10c      	bne.n	1a008cb4 <inv_set_motion_state+0x30>
        if (state == INV_NO_MOTION) {
1a008c9a:	79fb      	ldrb	r3, [r7, #7]
1a008c9c:	2b02      	cmp	r3, #2
1a008c9e:	d105      	bne.n	1a008cac <inv_set_motion_state+0x28>
            rh.motion_state_counter++;
1a008ca0:	4b10      	ldr	r3, [pc, #64]	; (1a008ce4 <inv_set_motion_state+0x60>)
1a008ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
1a008ca4:	3301      	adds	r3, #1
1a008ca6:	4a0f      	ldr	r2, [pc, #60]	; (1a008ce4 <inv_set_motion_state+0x60>)
1a008ca8:	6693      	str	r3, [r2, #104]	; 0x68
        } else {
            rh.motion_state_counter = 0;
        }
        return;
1a008caa:	e017      	b.n	1a008cdc <inv_set_motion_state+0x58>
    long set;
    if (state == rh.motion_state) {
        if (state == INV_NO_MOTION) {
            rh.motion_state_counter++;
        } else {
            rh.motion_state_counter = 0;
1a008cac:	4b0d      	ldr	r3, [pc, #52]	; (1a008ce4 <inv_set_motion_state+0x60>)
1a008cae:	2200      	movs	r2, #0
1a008cb0:	669a      	str	r2, [r3, #104]	; 0x68
        }
        return;
1a008cb2:	e013      	b.n	1a008cdc <inv_set_motion_state+0x58>
    }
    rh.motion_state_counter = 0;
1a008cb4:	4b0b      	ldr	r3, [pc, #44]	; (1a008ce4 <inv_set_motion_state+0x60>)
1a008cb6:	2200      	movs	r2, #0
1a008cb8:	669a      	str	r2, [r3, #104]	; 0x68
    rh.motion_state = state;
1a008cba:	4a0a      	ldr	r2, [pc, #40]	; (1a008ce4 <inv_set_motion_state+0x60>)
1a008cbc:	79fb      	ldrb	r3, [r7, #7]
1a008cbe:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
    /* Equivalent to set = state, but #define's may change. */
    if (state == INV_MOTION)
1a008cc2:	79fb      	ldrb	r3, [r7, #7]
1a008cc4:	2b01      	cmp	r3, #1
1a008cc6:	d102      	bne.n	1a008cce <inv_set_motion_state+0x4a>
        set = INV_MSG_MOTION_EVENT;
1a008cc8:	2301      	movs	r3, #1
1a008cca:	60fb      	str	r3, [r7, #12]
1a008ccc:	e001      	b.n	1a008cd2 <inv_set_motion_state+0x4e>
    else
        set = INV_MSG_NO_MOTION_EVENT;
1a008cce:	2302      	movs	r3, #2
1a008cd0:	60fb      	str	r3, [r7, #12]
    inv_set_message(set, (INV_MSG_MOTION_EVENT | INV_MSG_NO_MOTION_EVENT), 0);
1a008cd2:	2200      	movs	r2, #0
1a008cd4:	2103      	movs	r1, #3
1a008cd6:	68f8      	ldr	r0, [r7, #12]
1a008cd8:	f7fe ffa2 	bl	1a007c20 <inv_set_message>
}
1a008cdc:	3710      	adds	r7, #16
1a008cde:	46bd      	mov	sp, r7
1a008ce0:	bd80      	pop	{r7, pc}
1a008ce2:	bf00      	nop
1a008ce4:	10086930 	.word	0x10086930

1a008ce8 <inv_get_local_field>:
* @param[out] data Local earth's magnetic field in uT scaled by 2^16.
*            Length = 3. Y typically points north, Z typically points down in
*                        northern hemisphere and up in southern hemisphere.
*/
void inv_get_local_field(long *data)
{
1a008ce8:	b580      	push	{r7, lr}
1a008cea:	b082      	sub	sp, #8
1a008cec:	af00      	add	r7, sp, #0
1a008cee:	6078      	str	r0, [r7, #4]
    memcpy(data, rh.local_field, sizeof(rh.local_field));
1a008cf0:	220c      	movs	r2, #12
1a008cf2:	4904      	ldr	r1, [pc, #16]	; (1a008d04 <inv_get_local_field+0x1c>)
1a008cf4:	6878      	ldr	r0, [r7, #4]
1a008cf6:	f00b ff75 	bl	1a014be4 <memcpy>
}
1a008cfa:	bf00      	nop
1a008cfc:	3708      	adds	r7, #8
1a008cfe:	46bd      	mov	sp, r7
1a008d00:	bd80      	pop	{r7, pc}
1a008d02:	bf00      	nop
1a008d04:	10086958 	.word	0x10086958

1a008d08 <inv_get_gravity>:
/** Gets gravity vector
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
1a008d08:	b5b0      	push	{r4, r5, r7, lr}
1a008d0a:	b082      	sub	sp, #8
1a008d0c:	af00      	add	r7, sp, #0
1a008d0e:	6078      	str	r0, [r7, #4]
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
1a008d10:	4b24      	ldr	r3, [pc, #144]	; (1a008da4 <inv_get_gravity+0x9c>)
1a008d12:	685a      	ldr	r2, [r3, #4]
1a008d14:	4b23      	ldr	r3, [pc, #140]	; (1a008da4 <inv_get_gravity+0x9c>)
1a008d16:	68db      	ldr	r3, [r3, #12]
1a008d18:	4619      	mov	r1, r3
1a008d1a:	4610      	mov	r0, r2
1a008d1c:	f7ff f864 	bl	1a007de8 <inv_q29_mult>
1a008d20:	4604      	mov	r4, r0
1a008d22:	4b20      	ldr	r3, [pc, #128]	; (1a008da4 <inv_get_gravity+0x9c>)
1a008d24:	689a      	ldr	r2, [r3, #8]
1a008d26:	4b1f      	ldr	r3, [pc, #124]	; (1a008da4 <inv_get_gravity+0x9c>)
1a008d28:	681b      	ldr	r3, [r3, #0]
1a008d2a:	4619      	mov	r1, r3
1a008d2c:	4610      	mov	r0, r2
1a008d2e:	f7ff f85b 	bl	1a007de8 <inv_q29_mult>
1a008d32:	4603      	mov	r3, r0
1a008d34:	1ae2      	subs	r2, r4, r3
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
    data[0] =
1a008d36:	687b      	ldr	r3, [r7, #4]
1a008d38:	601a      	str	r2, [r3, #0]
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
1a008d3a:	687b      	ldr	r3, [r7, #4]
1a008d3c:	1d1c      	adds	r4, r3, #4
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
1a008d3e:	4b19      	ldr	r3, [pc, #100]	; (1a008da4 <inv_get_gravity+0x9c>)
1a008d40:	689a      	ldr	r2, [r3, #8]
1a008d42:	4b18      	ldr	r3, [pc, #96]	; (1a008da4 <inv_get_gravity+0x9c>)
1a008d44:	68db      	ldr	r3, [r3, #12]
1a008d46:	4619      	mov	r1, r3
1a008d48:	4610      	mov	r0, r2
1a008d4a:	f7ff f84d 	bl	1a007de8 <inv_q29_mult>
1a008d4e:	4605      	mov	r5, r0
1a008d50:	4b14      	ldr	r3, [pc, #80]	; (1a008da4 <inv_get_gravity+0x9c>)
1a008d52:	685a      	ldr	r2, [r3, #4]
1a008d54:	4b13      	ldr	r3, [pc, #76]	; (1a008da4 <inv_get_gravity+0x9c>)
1a008d56:	681b      	ldr	r3, [r3, #0]
1a008d58:	4619      	mov	r1, r3
1a008d5a:	4610      	mov	r0, r2
1a008d5c:	f7ff f844 	bl	1a007de8 <inv_q29_mult>
1a008d60:	4603      	mov	r3, r0
1a008d62:	442b      	add	r3, r5
 */
inv_error_t inv_get_gravity(long *data)
{
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
1a008d64:	6023      	str	r3, [r4, #0]
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
    data[2] =
1a008d66:	687b      	ldr	r3, [r7, #4]
1a008d68:	f103 0408 	add.w	r4, r3, #8
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
1a008d6c:	4b0d      	ldr	r3, [pc, #52]	; (1a008da4 <inv_get_gravity+0x9c>)
1a008d6e:	68da      	ldr	r2, [r3, #12]
1a008d70:	4b0c      	ldr	r3, [pc, #48]	; (1a008da4 <inv_get_gravity+0x9c>)
1a008d72:	68db      	ldr	r3, [r3, #12]
1a008d74:	4619      	mov	r1, r3
1a008d76:	4610      	mov	r0, r2
1a008d78:	f7ff f836 	bl	1a007de8 <inv_q29_mult>
1a008d7c:	4605      	mov	r5, r0
1a008d7e:	4b09      	ldr	r3, [pc, #36]	; (1a008da4 <inv_get_gravity+0x9c>)
1a008d80:	681a      	ldr	r2, [r3, #0]
1a008d82:	4b08      	ldr	r3, [pc, #32]	; (1a008da4 <inv_get_gravity+0x9c>)
1a008d84:	681b      	ldr	r3, [r3, #0]
1a008d86:	4619      	mov	r1, r3
1a008d88:	4610      	mov	r0, r2
1a008d8a:	f7ff f82d 	bl	1a007de8 <inv_q29_mult>
1a008d8e:	4603      	mov	r3, r0
1a008d90:	442b      	add	r3, r5
1a008d92:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
{
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
    data[2] =
1a008d96:	6023      	str	r3, [r4, #0]
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
        1073741824L;

    return INV_SUCCESS;
1a008d98:	2300      	movs	r3, #0
}
1a008d9a:	4618      	mov	r0, r3
1a008d9c:	3708      	adds	r7, #8
1a008d9e:	46bd      	mov	sp, r7
1a008da0:	bdb0      	pop	{r4, r5, r7, pc}
1a008da2:	bf00      	nop
1a008da4:	10086930 	.word	0x10086930

1a008da8 <inv_get_6axis_quaternion>:
/** Returns a quaternion based only on gyro and accel.
 * @param[out] data 6-axis  gyro and accel quaternion scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_6axis_quaternion(long *data)
{
1a008da8:	b580      	push	{r7, lr}
1a008daa:	b082      	sub	sp, #8
1a008dac:	af00      	add	r7, sp, #0
1a008dae:	6078      	str	r0, [r7, #4]
    memcpy(data, rh.gam_quat, sizeof(rh.gam_quat));
1a008db0:	2210      	movs	r2, #16
1a008db2:	4904      	ldr	r1, [pc, #16]	; (1a008dc4 <inv_get_6axis_quaternion+0x1c>)
1a008db4:	6878      	ldr	r0, [r7, #4]
1a008db6:	f00b ff15 	bl	1a014be4 <memcpy>
    return INV_SUCCESS;
1a008dba:	2300      	movs	r3, #0
}
1a008dbc:	4618      	mov	r0, r3
1a008dbe:	3708      	adds	r7, #8
1a008dc0:	46bd      	mov	sp, r7
1a008dc2:	bd80      	pop	{r7, pc}
1a008dc4:	10086940 	.word	0x10086940

1a008dc8 <inv_get_quaternion>:
/** Returns a quaternion.
 * @param[out] data 9-axis quaternion scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_quaternion(long *data)
{
1a008dc8:	b580      	push	{r7, lr}
1a008dca:	b082      	sub	sp, #8
1a008dcc:	af00      	add	r7, sp, #0
1a008dce:	6078      	str	r0, [r7, #4]
    if (rh.status & (INV_COMPASS_CORRECTION_SET | INV_6_AXIS_QUAT_SET)) {
1a008dd0:	4b0d      	ldr	r3, [pc, #52]	; (1a008e08 <inv_get_quaternion+0x40>)
1a008dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1a008dd4:	f003 0303 	and.w	r3, r3, #3
1a008dd8:	2b00      	cmp	r3, #0
1a008dda:	d00a      	beq.n	1a008df2 <inv_get_quaternion+0x2a>
        inv_q_mult(rh.compass_correction, rh.gam_quat, rh.nav_quat);
1a008ddc:	4a0a      	ldr	r2, [pc, #40]	; (1a008e08 <inv_get_quaternion+0x40>)
1a008dde:	490b      	ldr	r1, [pc, #44]	; (1a008e0c <inv_get_quaternion+0x44>)
1a008de0:	480b      	ldr	r0, [pc, #44]	; (1a008e10 <inv_get_quaternion+0x48>)
1a008de2:	f7ff f84d 	bl	1a007e80 <inv_q_mult>
        rh.status &= ~(INV_COMPASS_CORRECTION_SET | INV_6_AXIS_QUAT_SET);
1a008de6:	4b08      	ldr	r3, [pc, #32]	; (1a008e08 <inv_get_quaternion+0x40>)
1a008de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1a008dea:	f023 0303 	bic.w	r3, r3, #3
1a008dee:	4a06      	ldr	r2, [pc, #24]	; (1a008e08 <inv_get_quaternion+0x40>)
1a008df0:	67d3      	str	r3, [r2, #124]	; 0x7c
    }
    memcpy(data, rh.nav_quat, sizeof(rh.nav_quat));
1a008df2:	2210      	movs	r2, #16
1a008df4:	4904      	ldr	r1, [pc, #16]	; (1a008e08 <inv_get_quaternion+0x40>)
1a008df6:	6878      	ldr	r0, [r7, #4]
1a008df8:	f00b fef4 	bl	1a014be4 <memcpy>
    return INV_SUCCESS;
1a008dfc:	2300      	movs	r3, #0
}
1a008dfe:	4618      	mov	r0, r3
1a008e00:	3708      	adds	r7, #8
1a008e02:	46bd      	mov	sp, r7
1a008e04:	bd80      	pop	{r7, pc}
1a008e06:	bf00      	nop
1a008e08:	10086930 	.word	0x10086930
1a008e0c:	10086940 	.word	0x10086940
1a008e10:	10086970 	.word	0x10086970

1a008e14 <inv_get_quaternion_set>:
 * @param[out] data 9-axis quaternion scaled such that 1.0 = 2^30.
 * @param[out] accuracy Accuracy of quaternion, 0-3, where 3 is most accurate.
 * @param[out] timestamp Timestamp of this quaternion in nanoseconds
 */
void inv_get_quaternion_set(long *data, int *accuracy, inv_time_t *timestamp)
{
1a008e14:	b580      	push	{r7, lr}
1a008e16:	b084      	sub	sp, #16
1a008e18:	af00      	add	r7, sp, #0
1a008e1a:	60f8      	str	r0, [r7, #12]
1a008e1c:	60b9      	str	r1, [r7, #8]
1a008e1e:	607a      	str	r2, [r7, #4]
    inv_get_quaternion(data);
1a008e20:	68f8      	ldr	r0, [r7, #12]
1a008e22:	f7ff ffd1 	bl	1a008dc8 <inv_get_quaternion>
    *timestamp = inv_get_last_timestamp();
1a008e26:	f7fe f86f 	bl	1a006f08 <inv_get_last_timestamp>
1a008e2a:	4602      	mov	r2, r0
1a008e2c:	687b      	ldr	r3, [r7, #4]
1a008e2e:	601a      	str	r2, [r3, #0]
    if (inv_get_compass_on()) {
1a008e30:	f7fe f832 	bl	1a006e98 <inv_get_compass_on>
1a008e34:	4603      	mov	r3, r0
1a008e36:	2b00      	cmp	r3, #0
1a008e38:	d005      	beq.n	1a008e46 <inv_get_quaternion_set+0x32>
        *accuracy = inv_get_mag_accuracy();
1a008e3a:	f7fe fdcf 	bl	1a0079dc <inv_get_mag_accuracy>
1a008e3e:	4602      	mov	r2, r0
1a008e40:	68bb      	ldr	r3, [r7, #8]
1a008e42:	601a      	str	r2, [r3, #0]
    }else if (inv_get_accel_on()) {
        *accuracy = inv_get_accel_accuracy();
    } else {
        *accuracy = 0;
    }
}
1a008e44:	e018      	b.n	1a008e78 <inv_get_quaternion_set+0x64>
{
    inv_get_quaternion(data);
    *timestamp = inv_get_last_timestamp();
    if (inv_get_compass_on()) {
        *accuracy = inv_get_mag_accuracy();
    } else if (inv_get_gyro_on()) {
1a008e46:	f7fe f83b 	bl	1a006ec0 <inv_get_gyro_on>
1a008e4a:	4603      	mov	r3, r0
1a008e4c:	2b00      	cmp	r3, #0
1a008e4e:	d005      	beq.n	1a008e5c <inv_get_quaternion_set+0x48>
        *accuracy = inv_get_gyro_accuracy();
1a008e50:	f7fe fdb8 	bl	1a0079c4 <inv_get_gyro_accuracy>
1a008e54:	4602      	mov	r2, r0
1a008e56:	68bb      	ldr	r3, [r7, #8]
1a008e58:	601a      	str	r2, [r3, #0]
    }else if (inv_get_accel_on()) {
        *accuracy = inv_get_accel_accuracy();
    } else {
        *accuracy = 0;
    }
}
1a008e5a:	e00d      	b.n	1a008e78 <inv_get_quaternion_set+0x64>
    *timestamp = inv_get_last_timestamp();
    if (inv_get_compass_on()) {
        *accuracy = inv_get_mag_accuracy();
    } else if (inv_get_gyro_on()) {
        *accuracy = inv_get_gyro_accuracy();
    }else if (inv_get_accel_on()) {
1a008e5c:	f7fe f842 	bl	1a006ee4 <inv_get_accel_on>
1a008e60:	4603      	mov	r3, r0
1a008e62:	2b00      	cmp	r3, #0
1a008e64:	d005      	beq.n	1a008e72 <inv_get_quaternion_set+0x5e>
        *accuracy = inv_get_accel_accuracy();
1a008e66:	f7fe fdcf 	bl	1a007a08 <inv_get_accel_accuracy>
1a008e6a:	4602      	mov	r2, r0
1a008e6c:	68bb      	ldr	r3, [r7, #8]
1a008e6e:	601a      	str	r2, [r3, #0]
    } else {
        *accuracy = 0;
    }
}
1a008e70:	e002      	b.n	1a008e78 <inv_get_quaternion_set+0x64>
    } else if (inv_get_gyro_on()) {
        *accuracy = inv_get_gyro_accuracy();
    }else if (inv_get_accel_on()) {
        *accuracy = inv_get_accel_accuracy();
    } else {
        *accuracy = 0;
1a008e72:	68bb      	ldr	r3, [r7, #8]
1a008e74:	2200      	movs	r2, #0
1a008e76:	601a      	str	r2, [r3, #0]
    }
}
1a008e78:	bf00      	nop
1a008e7a:	3710      	adds	r7, #16
1a008e7c:	46bd      	mov	sp, r7
1a008e7e:	bd80      	pop	{r7, pc}

1a008e80 <inv_generate_results>:
 * registered by inv_start_results_holder().
 * @param[in] sensor_cal New sensor data to process.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_generate_results(struct inv_sensor_cal_t *sensor_cal)
{
1a008e80:	b480      	push	{r7}
1a008e82:	b083      	sub	sp, #12
1a008e84:	af00      	add	r7, sp, #0
1a008e86:	6078      	str	r0, [r7, #4]
    rh.sensor = sensor_cal;
1a008e88:	4a05      	ldr	r2, [pc, #20]	; (1a008ea0 <inv_generate_results+0x20>)
1a008e8a:	687b      	ldr	r3, [r7, #4]
1a008e8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    return INV_SUCCESS;
1a008e90:	2300      	movs	r3, #0
}
1a008e92:	4618      	mov	r0, r3
1a008e94:	370c      	adds	r7, #12
1a008e96:	46bd      	mov	sp, r7
1a008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008e9c:	4770      	bx	lr
1a008e9e:	bf00      	nop
1a008ea0:	10086930 	.word	0x10086930

1a008ea4 <inv_start_results_holder>:
/** Function to turn on this module. This is automatically called by
 *  inv_enable_results_holder(). Typically not called by users.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_start_results_holder(void)
{
1a008ea4:	b580      	push	{r7, lr}
1a008ea6:	af00      	add	r7, sp, #0
    inv_register_data_cb(inv_generate_results, INV_PRIORITY_RESULTS_HOLDER,
1a008ea8:	2207      	movs	r2, #7
1a008eaa:	f44f 7148 	mov.w	r1, #800	; 0x320
1a008eae:	4803      	ldr	r0, [pc, #12]	; (1a008ebc <inv_start_results_holder+0x18>)
1a008eb0:	f7fe fb4e 	bl	1a007550 <inv_register_data_cb>
        INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
    return INV_SUCCESS;
1a008eb4:	2300      	movs	r3, #0
}
1a008eb6:	4618      	mov	r0, r3
1a008eb8:	bd80      	pop	{r7, pc}
1a008eba:	bf00      	nop
1a008ebc:	1a008e81 	.word	0x1a008e81

1a008ec0 <inv_init_results_holder>:
* enable function inv_enable_results_holder(). It may be called any time the feature is enabled, but
* is typically not needed to be called by outside callers.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_results_holder(void)
{
1a008ec0:	b580      	push	{r7, lr}
1a008ec2:	af00      	add	r7, sp, #0
    memset(&rh, 0, sizeof(rh));
1a008ec4:	2288      	movs	r2, #136	; 0x88
1a008ec6:	2100      	movs	r1, #0
1a008ec8:	4810      	ldr	r0, [pc, #64]	; (1a008f0c <inv_init_results_holder+0x4c>)
1a008eca:	f00b ff89 	bl	1a014de0 <memset>
    rh.mag_scale[0] = 1L<<30;
1a008ece:	4b0f      	ldr	r3, [pc, #60]	; (1a008f0c <inv_init_results_holder+0x4c>)
1a008ed0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a008ed4:	635a      	str	r2, [r3, #52]	; 0x34
    rh.mag_scale[1] = 1L<<30;
1a008ed6:	4b0d      	ldr	r3, [pc, #52]	; (1a008f0c <inv_init_results_holder+0x4c>)
1a008ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a008edc:	639a      	str	r2, [r3, #56]	; 0x38
    rh.mag_scale[2] = 1L<<30;
1a008ede:	4b0b      	ldr	r3, [pc, #44]	; (1a008f0c <inv_init_results_holder+0x4c>)
1a008ee0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a008ee4:	63da      	str	r2, [r3, #60]	; 0x3c
    rh.compass_correction[0] = 1L<<30;
1a008ee6:	4b09      	ldr	r3, [pc, #36]	; (1a008f0c <inv_init_results_holder+0x4c>)
1a008ee8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a008eec:	641a      	str	r2, [r3, #64]	; 0x40
    rh.gam_quat[0] = 1L<<30;
1a008eee:	4b07      	ldr	r3, [pc, #28]	; (1a008f0c <inv_init_results_holder+0x4c>)
1a008ef0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a008ef4:	611a      	str	r2, [r3, #16]
    rh.nav_quat[0] = 1L<<30;
1a008ef6:	4b05      	ldr	r3, [pc, #20]	; (1a008f0c <inv_init_results_holder+0x4c>)
1a008ef8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a008efc:	601a      	str	r2, [r3, #0]
    rh.quat_confidence_interval = (float)M_PI;
1a008efe:	4b03      	ldr	r3, [pc, #12]	; (1a008f0c <inv_init_results_holder+0x4c>)
1a008f00:	4a03      	ldr	r2, [pc, #12]	; (1a008f10 <inv_init_results_holder+0x50>)
1a008f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return INV_SUCCESS;
1a008f06:	2300      	movs	r3, #0
}
1a008f08:	4618      	mov	r0, r3
1a008f0a:	bd80      	pop	{r7, pc}
1a008f0c:	10086930 	.word	0x10086930
1a008f10:	40490fdb 	.word	0x40490fdb

1a008f14 <inv_enable_results_holder>:

/** Turns on storage of results.
*/
inv_error_t inv_enable_results_holder()
{
1a008f14:	b580      	push	{r7, lr}
1a008f16:	b082      	sub	sp, #8
1a008f18:	af00      	add	r7, sp, #0
    inv_error_t result;
    result = inv_init_results_holder();
1a008f1a:	f7ff ffd1 	bl	1a008ec0 <inv_init_results_holder>
1a008f1e:	6078      	str	r0, [r7, #4]
    if ( result ) {
1a008f20:	687b      	ldr	r3, [r7, #4]
1a008f22:	2b00      	cmp	r3, #0
1a008f24:	d001      	beq.n	1a008f2a <inv_enable_results_holder+0x16>
        return result;
1a008f26:	687b      	ldr	r3, [r7, #4]
1a008f28:	e004      	b.n	1a008f34 <inv_enable_results_holder+0x20>
    }

    result = inv_register_mpl_start_notification(inv_start_results_holder);
1a008f2a:	4804      	ldr	r0, [pc, #16]	; (1a008f3c <inv_enable_results_holder+0x28>)
1a008f2c:	f000 f8e4 	bl	1a0090f8 <inv_register_mpl_start_notification>
1a008f30:	6078      	str	r0, [r7, #4]
    return result;
1a008f32:	687b      	ldr	r3, [r7, #4]
}
1a008f34:	4618      	mov	r0, r3
1a008f36:	3708      	adds	r7, #8
1a008f38:	46bd      	mov	sp, r7
1a008f3a:	bd80      	pop	{r7, pc}
1a008f3c:	1a008ea5 	.word	0x1a008ea5

1a008f40 <inv_set_accel_bias_found>:
/** Sets whether we know the accel bias
 * @param[in] state Set to 1 if we know the accel bias. 
 *            Can be retrieved with inv_got_accel_bias()
 */
void inv_set_accel_bias_found(int state)
{
1a008f40:	b480      	push	{r7}
1a008f42:	b083      	sub	sp, #12
1a008f44:	af00      	add	r7, sp, #0
1a008f46:	6078      	str	r0, [r7, #4]
    rh.got_accel_bias = state;
1a008f48:	4a04      	ldr	r2, [pc, #16]	; (1a008f5c <inv_set_accel_bias_found+0x1c>)
1a008f4a:	687b      	ldr	r3, [r7, #4]
1a008f4c:	6553      	str	r3, [r2, #84]	; 0x54
}
1a008f4e:	bf00      	nop
1a008f50:	370c      	adds	r7, #12
1a008f52:	46bd      	mov	sp, r7
1a008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008f58:	4770      	bx	lr
1a008f5a:	bf00      	nop
1a008f5c:	10086930 	.word	0x10086930

1a008f60 <inv_got_compass_bias>:
/** Sets state of if we know the compass bias.
 * @return return 1 if we know the compass bias, 0 if not.
 *            it is set with inv_set_compass_bias_found()
 */
int inv_got_compass_bias()
{
1a008f60:	b480      	push	{r7}
1a008f62:	af00      	add	r7, sp, #0
    return rh.got_compass_bias;
1a008f64:	4b03      	ldr	r3, [pc, #12]	; (1a008f74 <inv_got_compass_bias+0x14>)
1a008f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
1a008f68:	4618      	mov	r0, r3
1a008f6a:	46bd      	mov	sp, r7
1a008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008f70:	4770      	bx	lr
1a008f72:	bf00      	nop
1a008f74:	10086930 	.word	0x10086930

1a008f78 <inv_set_compass_bias_found>:
/** Sets whether we know the compass bias
 * @param[in] state Set to 1 if we know the compass bias. 
 *            Can be retrieved with inv_got_compass_bias()
 */
void inv_set_compass_bias_found(int state)
{
1a008f78:	b480      	push	{r7}
1a008f7a:	b083      	sub	sp, #12
1a008f7c:	af00      	add	r7, sp, #0
1a008f7e:	6078      	str	r0, [r7, #4]
    rh.got_compass_bias = state;
1a008f80:	4a04      	ldr	r2, [pc, #16]	; (1a008f94 <inv_set_compass_bias_found+0x1c>)
1a008f82:	687b      	ldr	r3, [r7, #4]
1a008f84:	6713      	str	r3, [r2, #112]	; 0x70
}
1a008f86:	bf00      	nop
1a008f88:	370c      	adds	r7, #12
1a008f8a:	46bd      	mov	sp, r7
1a008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008f90:	4770      	bx	lr
1a008f92:	bf00      	nop
1a008f94:	10086930 	.word	0x10086930

1a008f98 <inv_set_compass_state>:

/** Sets the compass state.
 * @param[in] state Compass state. It can be retrieved with inv_get_compass_state().
 */
void inv_set_compass_state(int state)
{
1a008f98:	b480      	push	{r7}
1a008f9a:	b083      	sub	sp, #12
1a008f9c:	af00      	add	r7, sp, #0
1a008f9e:	6078      	str	r0, [r7, #4]
    rh.compass_state = state;
1a008fa0:	4a04      	ldr	r2, [pc, #16]	; (1a008fb4 <inv_set_compass_state+0x1c>)
1a008fa2:	687b      	ldr	r3, [r7, #4]
1a008fa4:	6793      	str	r3, [r2, #120]	; 0x78
}
1a008fa6:	bf00      	nop
1a008fa8:	370c      	adds	r7, #12
1a008faa:	46bd      	mov	sp, r7
1a008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008fb0:	4770      	bx	lr
1a008fb2:	bf00      	nop
1a008fb4:	10086930 	.word	0x10086930

1a008fb8 <inv_get_compass_state>:

/** Get's the compass state
 * @return the compass state that was set with inv_set_compass_state()
 */
int inv_get_compass_state()
{
1a008fb8:	b480      	push	{r7}
1a008fba:	af00      	add	r7, sp, #0
    return rh.compass_state;
1a008fbc:	4b03      	ldr	r3, [pc, #12]	; (1a008fcc <inv_get_compass_state+0x14>)
1a008fbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
1a008fc0:	4618      	mov	r0, r3
1a008fc2:	46bd      	mov	sp, r7
1a008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a008fc8:	4770      	bx	lr
1a008fca:	bf00      	nop
1a008fcc:	10086930 	.word	0x10086930

1a008fd0 <inv_set_compass_bias_error>:
/** Set compass bias error. See inv_get_compass_bias_error()
 * @param[in] bias_error Set's how accurate we know the compass bias. It is the 
 * error squared.
 */
void inv_set_compass_bias_error(const long *bias_error)
{
1a008fd0:	b580      	push	{r7, lr}
1a008fd2:	b082      	sub	sp, #8
1a008fd4:	af00      	add	r7, sp, #0
1a008fd6:	6078      	str	r0, [r7, #4]
    memcpy(rh.compass_bias_error, bias_error, sizeof(rh.compass_bias_error));
1a008fd8:	220c      	movs	r2, #12
1a008fda:	6879      	ldr	r1, [r7, #4]
1a008fdc:	4803      	ldr	r0, [pc, #12]	; (1a008fec <inv_set_compass_bias_error+0x1c>)
1a008fde:	f00b fe01 	bl	1a014be4 <memcpy>
}
1a008fe2:	bf00      	nop
1a008fe4:	3708      	adds	r7, #8
1a008fe6:	46bd      	mov	sp, r7
1a008fe8:	bd80      	pop	{r7, pc}
1a008fea:	bf00      	nop
1a008fec:	10086988 	.word	0x10086988

1a008ff0 <inv_get_compass_bias_error>:

/** Get's compass bias error. See inv_set_compass_bias_error() for setting.
 * @param[out] bias_error Accuracy as to how well the compass bias is known. It is the error squared.
 */
void inv_get_compass_bias_error(long *bias_error)
{
1a008ff0:	b580      	push	{r7, lr}
1a008ff2:	b082      	sub	sp, #8
1a008ff4:	af00      	add	r7, sp, #0
1a008ff6:	6078      	str	r0, [r7, #4]
    memcpy(bias_error, rh.compass_bias_error, sizeof(rh.compass_bias_error));
1a008ff8:	220c      	movs	r2, #12
1a008ffa:	4904      	ldr	r1, [pc, #16]	; (1a00900c <inv_get_compass_bias_error+0x1c>)
1a008ffc:	6878      	ldr	r0, [r7, #4]
1a008ffe:	f00b fdf1 	bl	1a014be4 <memcpy>
}
1a009002:	bf00      	nop
1a009004:	3708      	adds	r7, #8
1a009006:	46bd      	mov	sp, r7
1a009008:	bd80      	pop	{r7, pc}
1a00900a:	bf00      	nop
1a00900c:	10086988 	.word	0x10086988

1a009010 <inv_get_linear_accel>:
 *                with gravity removed
 *  @return     INV_SUCCESS if successful
 *              INV_ERROR_INVALID_PARAMETER if invalid input pointer
 */
inv_error_t inv_get_linear_accel(long *data)
{
1a009010:	b580      	push	{r7, lr}
1a009012:	b086      	sub	sp, #24
1a009014:	af00      	add	r7, sp, #0
1a009016:	6078      	str	r0, [r7, #4]
    long gravity[3];

    if (data != NULL)
1a009018:	687b      	ldr	r3, [r7, #4]
1a00901a:	2b00      	cmp	r3, #0
1a00901c:	d024      	beq.n	1a009068 <inv_get_linear_accel+0x58>
    {
        inv_get_accel_set(data, NULL, NULL);
1a00901e:	2200      	movs	r2, #0
1a009020:	2100      	movs	r1, #0
1a009022:	6878      	ldr	r0, [r7, #4]
1a009024:	f7fe fc46 	bl	1a0078b4 <inv_get_accel_set>
        inv_get_gravity(gravity);
1a009028:	f107 030c 	add.w	r3, r7, #12
1a00902c:	4618      	mov	r0, r3
1a00902e:	f7ff fe6b 	bl	1a008d08 <inv_get_gravity>
        data[0] -= gravity[0] >> 14;
1a009032:	687b      	ldr	r3, [r7, #4]
1a009034:	681a      	ldr	r2, [r3, #0]
1a009036:	68fb      	ldr	r3, [r7, #12]
1a009038:	139b      	asrs	r3, r3, #14
1a00903a:	1ad2      	subs	r2, r2, r3
1a00903c:	687b      	ldr	r3, [r7, #4]
1a00903e:	601a      	str	r2, [r3, #0]
        data[1] -= gravity[1] >> 14;
1a009040:	687b      	ldr	r3, [r7, #4]
1a009042:	3304      	adds	r3, #4
1a009044:	687a      	ldr	r2, [r7, #4]
1a009046:	3204      	adds	r2, #4
1a009048:	6811      	ldr	r1, [r2, #0]
1a00904a:	693a      	ldr	r2, [r7, #16]
1a00904c:	1392      	asrs	r2, r2, #14
1a00904e:	1a8a      	subs	r2, r1, r2
1a009050:	601a      	str	r2, [r3, #0]
        data[2] -= gravity[2] >> 14;
1a009052:	687b      	ldr	r3, [r7, #4]
1a009054:	3308      	adds	r3, #8
1a009056:	687a      	ldr	r2, [r7, #4]
1a009058:	3208      	adds	r2, #8
1a00905a:	6811      	ldr	r1, [r2, #0]
1a00905c:	697a      	ldr	r2, [r7, #20]
1a00905e:	1392      	asrs	r2, r2, #14
1a009060:	1a8a      	subs	r2, r1, r2
1a009062:	601a      	str	r2, [r3, #0]
        return INV_SUCCESS;
1a009064:	2300      	movs	r3, #0
1a009066:	e000      	b.n	1a00906a <inv_get_linear_accel+0x5a>
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
1a009068:	2316      	movs	r3, #22
    }
}
1a00906a:	4618      	mov	r0, r3
1a00906c:	3718      	adds	r7, #24
1a00906e:	46bd      	mov	sp, r7
1a009070:	bd80      	pop	{r7, pc}
1a009072:	bf00      	nop

1a009074 <inv_get_linear_accel_float>:
 *  @param[out] data    3-element vector of linear aceel float data
 *  @return     INV_SUCCESS if successful
 *              INV_ERROR_INVALID_PARAMETER if invalid input pointer
 */
inv_error_t inv_get_linear_accel_float(float *data)
{
1a009074:	b580      	push	{r7, lr}
1a009076:	b086      	sub	sp, #24
1a009078:	af00      	add	r7, sp, #0
1a00907a:	6078      	str	r0, [r7, #4]
    long tdata[3];
    unsigned char i;

    if (data != NULL && !inv_get_linear_accel(tdata)) {
1a00907c:	687b      	ldr	r3, [r7, #4]
1a00907e:	2b00      	cmp	r3, #0
1a009080:	d027      	beq.n	1a0090d2 <inv_get_linear_accel_float+0x5e>
1a009082:	f107 0308 	add.w	r3, r7, #8
1a009086:	4618      	mov	r0, r3
1a009088:	f7ff ffc2 	bl	1a009010 <inv_get_linear_accel>
1a00908c:	4603      	mov	r3, r0
1a00908e:	2b00      	cmp	r3, #0
1a009090:	d11f      	bne.n	1a0090d2 <inv_get_linear_accel_float+0x5e>
        for (i = 0; i < 3; ++i) {
1a009092:	2300      	movs	r3, #0
1a009094:	75fb      	strb	r3, [r7, #23]
1a009096:	e017      	b.n	1a0090c8 <inv_get_linear_accel_float+0x54>
            data[i] = ((float)tdata[i] / (1L << 16));
1a009098:	7dfb      	ldrb	r3, [r7, #23]
1a00909a:	009b      	lsls	r3, r3, #2
1a00909c:	687a      	ldr	r2, [r7, #4]
1a00909e:	441a      	add	r2, r3
1a0090a0:	7dfb      	ldrb	r3, [r7, #23]
1a0090a2:	009b      	lsls	r3, r3, #2
1a0090a4:	f107 0118 	add.w	r1, r7, #24
1a0090a8:	440b      	add	r3, r1
1a0090aa:	f853 3c10 	ldr.w	r3, [r3, #-16]
1a0090ae:	ee07 3a90 	vmov	s15, r3
1a0090b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
1a0090b6:	eddf 6a09 	vldr	s13, [pc, #36]	; 1a0090dc <inv_get_linear_accel_float+0x68>
1a0090ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
1a0090be:	edc2 7a00 	vstr	s15, [r2]
{
    long tdata[3];
    unsigned char i;

    if (data != NULL && !inv_get_linear_accel(tdata)) {
        for (i = 0; i < 3; ++i) {
1a0090c2:	7dfb      	ldrb	r3, [r7, #23]
1a0090c4:	3301      	adds	r3, #1
1a0090c6:	75fb      	strb	r3, [r7, #23]
1a0090c8:	7dfb      	ldrb	r3, [r7, #23]
1a0090ca:	2b02      	cmp	r3, #2
1a0090cc:	d9e4      	bls.n	1a009098 <inv_get_linear_accel_float+0x24>
            data[i] = ((float)tdata[i] / (1L << 16));
        }
        return INV_SUCCESS;
1a0090ce:	2300      	movs	r3, #0
1a0090d0:	e000      	b.n	1a0090d4 <inv_get_linear_accel_float+0x60>
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
1a0090d2:	2316      	movs	r3, #22
    }
}
1a0090d4:	4618      	mov	r0, r3
1a0090d6:	3718      	adds	r7, #24
1a0090d8:	46bd      	mov	sp, r7
1a0090da:	bd80      	pop	{r7, pc}
1a0090dc:	47800000 	.word	0x47800000

1a0090e0 <inv_init_start_manager>:

/** Initilize the start manager. Typically called by inv_start_mpl();
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_start_manager(void)
{
1a0090e0:	b580      	push	{r7, lr}
1a0090e2:	af00      	add	r7, sp, #0
    memset(&inv_start_cb, 0, sizeof(inv_start_cb));
1a0090e4:	2254      	movs	r2, #84	; 0x54
1a0090e6:	2100      	movs	r1, #0
1a0090e8:	4802      	ldr	r0, [pc, #8]	; (1a0090f4 <inv_init_start_manager+0x14>)
1a0090ea:	f00b fe79 	bl	1a014de0 <memset>
    return INV_SUCCESS;
1a0090ee:	2300      	movs	r3, #0
}
1a0090f0:	4618      	mov	r0, r3
1a0090f2:	bd80      	pop	{r7, pc}
1a0090f4:	100869b8 	.word	0x100869b8

1a0090f8 <inv_register_mpl_start_notification>:
* @param[in] start_cb Function callback that will be called when inv_start_mpl() is
*            called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
1a0090f8:	b480      	push	{r7}
1a0090fa:	b083      	sub	sp, #12
1a0090fc:	af00      	add	r7, sp, #0
1a0090fe:	6078      	str	r0, [r7, #4]
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
1a009100:	4b0c      	ldr	r3, [pc, #48]	; (1a009134 <inv_register_mpl_start_notification+0x3c>)
1a009102:	681b      	ldr	r3, [r3, #0]
1a009104:	2b13      	cmp	r3, #19
1a009106:	dd01      	ble.n	1a00910c <inv_register_mpl_start_notification+0x14>
        return INV_ERROR_INVALID_PARAMETER;
1a009108:	2316      	movs	r3, #22
1a00910a:	e00c      	b.n	1a009126 <inv_register_mpl_start_notification+0x2e>

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
1a00910c:	4b09      	ldr	r3, [pc, #36]	; (1a009134 <inv_register_mpl_start_notification+0x3c>)
1a00910e:	681b      	ldr	r3, [r3, #0]
1a009110:	4a08      	ldr	r2, [pc, #32]	; (1a009134 <inv_register_mpl_start_notification+0x3c>)
1a009112:	009b      	lsls	r3, r3, #2
1a009114:	4413      	add	r3, r2
1a009116:	687a      	ldr	r2, [r7, #4]
1a009118:	605a      	str	r2, [r3, #4]
    inv_start_cb.num_cb++;
1a00911a:	4b06      	ldr	r3, [pc, #24]	; (1a009134 <inv_register_mpl_start_notification+0x3c>)
1a00911c:	681b      	ldr	r3, [r3, #0]
1a00911e:	3301      	adds	r3, #1
1a009120:	4a04      	ldr	r2, [pc, #16]	; (1a009134 <inv_register_mpl_start_notification+0x3c>)
1a009122:	6013      	str	r3, [r2, #0]
    return INV_SUCCESS;
1a009124:	2300      	movs	r3, #0
}
1a009126:	4618      	mov	r0, r3
1a009128:	370c      	adds	r7, #12
1a00912a:	46bd      	mov	sp, r7
1a00912c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a009130:	4770      	bx	lr
1a009132:	bf00      	nop
1a009134:	100869b8 	.word	0x100869b8

1a009138 <inv_execute_mpl_start_notification>:
/** Callback all the functions that want to be notified when inv_start_mpl() was
* called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_execute_mpl_start_notification(void)
{
1a009138:	b580      	push	{r7, lr}
1a00913a:	b084      	sub	sp, #16
1a00913c:	af00      	add	r7, sp, #0
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;
1a00913e:	2300      	movs	r3, #0
1a009140:	60fb      	str	r3, [r7, #12]

    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
1a009142:	2300      	movs	r3, #0
1a009144:	60bb      	str	r3, [r7, #8]
1a009146:	e011      	b.n	1a00916c <inv_execute_mpl_start_notification+0x34>
        result = inv_start_cb.start_cb[kk]();
1a009148:	4a0d      	ldr	r2, [pc, #52]	; (1a009180 <inv_execute_mpl_start_notification+0x48>)
1a00914a:	68bb      	ldr	r3, [r7, #8]
1a00914c:	009b      	lsls	r3, r3, #2
1a00914e:	4413      	add	r3, r2
1a009150:	685b      	ldr	r3, [r3, #4]
1a009152:	4798      	blx	r3
1a009154:	6078      	str	r0, [r7, #4]
        if (result && (first_error == INV_SUCCESS)) {
1a009156:	687b      	ldr	r3, [r7, #4]
1a009158:	2b00      	cmp	r3, #0
1a00915a:	d004      	beq.n	1a009166 <inv_execute_mpl_start_notification+0x2e>
1a00915c:	68fb      	ldr	r3, [r7, #12]
1a00915e:	2b00      	cmp	r3, #0
1a009160:	d101      	bne.n	1a009166 <inv_execute_mpl_start_notification+0x2e>
            first_error = result;
1a009162:	687b      	ldr	r3, [r7, #4]
1a009164:	60fb      	str	r3, [r7, #12]
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;

    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
1a009166:	68bb      	ldr	r3, [r7, #8]
1a009168:	3301      	adds	r3, #1
1a00916a:	60bb      	str	r3, [r7, #8]
1a00916c:	4b04      	ldr	r3, [pc, #16]	; (1a009180 <inv_execute_mpl_start_notification+0x48>)
1a00916e:	681a      	ldr	r2, [r3, #0]
1a009170:	68bb      	ldr	r3, [r7, #8]
1a009172:	429a      	cmp	r2, r3
1a009174:	dce8      	bgt.n	1a009148 <inv_execute_mpl_start_notification+0x10>
        result = inv_start_cb.start_cb[kk]();
        if (result && (first_error == INV_SUCCESS)) {
            first_error = result;
        }
    }
    return first_error;
1a009176:	68fb      	ldr	r3, [r7, #12]
}
1a009178:	4618      	mov	r0, r3
1a00917a:	3710      	adds	r7, #16
1a00917c:	46bd      	mov	sp, r7
1a00917e:	bd80      	pop	{r7, pc}
1a009180:	100869b8 	.word	0x100869b8

1a009184 <inv_init_storage_manager>:
static struct data_storage_t ds;

/** Should be called once before using any of the storage methods. Typically
* called first by inv_init_mpl().*/
void inv_init_storage_manager()
{
1a009184:	b580      	push	{r7, lr}
1a009186:	af00      	add	r7, sp, #0
    memset(&ds, 0, sizeof(ds));
1a009188:	f44f 72cc 	mov.w	r2, #408	; 0x198
1a00918c:	2100      	movs	r1, #0
1a00918e:	4804      	ldr	r0, [pc, #16]	; (1a0091a0 <inv_init_storage_manager+0x1c>)
1a009190:	f00b fe26 	bl	1a014de0 <memset>
    ds.total_size = sizeof(struct data_header_t);
1a009194:	4b02      	ldr	r3, [pc, #8]	; (1a0091a0 <inv_init_storage_manager+0x1c>)
1a009196:	220c      	movs	r2, #12
1a009198:	605a      	str	r2, [r3, #4]
}
1a00919a:	bf00      	nop
1a00919c:	bd80      	pop	{r7, pc}
1a00919e:	bf00      	nop
1a0091a0:	10086a0c 	.word	0x10086a0c

1a0091a4 <inv_register_load_store>:
*                    The key should change when your type of data for storage changes.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
1a0091a4:	b480      	push	{r7}
1a0091a6:	b087      	sub	sp, #28
1a0091a8:	af00      	add	r7, sp, #0
1a0091aa:	60f8      	str	r0, [r7, #12]
1a0091ac:	60b9      	str	r1, [r7, #8]
1a0091ae:	607a      	str	r2, [r7, #4]
1a0091b0:	603b      	str	r3, [r7, #0]
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
1a0091b2:	2300      	movs	r3, #0
1a0091b4:	617b      	str	r3, [r7, #20]
1a0091b6:	e010      	b.n	1a0091da <inv_register_load_store+0x36>
        if (key == ds.hd[kk].key) {
1a0091b8:	4929      	ldr	r1, [pc, #164]	; (1a009260 <inv_register_load_store+0xbc>)
1a0091ba:	697a      	ldr	r2, [r7, #20]
1a0091bc:	4613      	mov	r3, r2
1a0091be:	005b      	lsls	r3, r3, #1
1a0091c0:	4413      	add	r3, r2
1a0091c2:	009b      	lsls	r3, r3, #2
1a0091c4:	440b      	add	r3, r1
1a0091c6:	33b0      	adds	r3, #176	; 0xb0
1a0091c8:	681a      	ldr	r2, [r3, #0]
1a0091ca:	683b      	ldr	r3, [r7, #0]
1a0091cc:	429a      	cmp	r2, r3
1a0091ce:	d101      	bne.n	1a0091d4 <inv_register_load_store+0x30>
            return INV_ERROR_INVALID_PARAMETER;
1a0091d0:	2316      	movs	r3, #22
1a0091d2:	e03e      	b.n	1a009252 <inv_register_load_store+0xae>
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
1a0091d4:	697b      	ldr	r3, [r7, #20]
1a0091d6:	3301      	adds	r3, #1
1a0091d8:	617b      	str	r3, [r7, #20]
1a0091da:	4b21      	ldr	r3, [pc, #132]	; (1a009260 <inv_register_load_store+0xbc>)
1a0091dc:	681a      	ldr	r2, [r3, #0]
1a0091de:	697b      	ldr	r3, [r7, #20]
1a0091e0:	429a      	cmp	r2, r3
1a0091e2:	dce9      	bgt.n	1a0091b8 <inv_register_load_store+0x14>
        if (key == ds.hd[kk].key) {
            return INV_ERROR_INVALID_PARAMETER;
        }
    }
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
1a0091e4:	4b1e      	ldr	r3, [pc, #120]	; (1a009260 <inv_register_load_store+0xbc>)
1a0091e6:	681b      	ldr	r3, [r3, #0]
1a0091e8:	2b13      	cmp	r3, #19
1a0091ea:	dd01      	ble.n	1a0091f0 <inv_register_load_store+0x4c>
        return INV_ERROR_INVALID_PARAMETER;
1a0091ec:	2316      	movs	r3, #22
1a0091ee:	e030      	b.n	1a009252 <inv_register_load_store+0xae>
    }
    // Add to list
    ds.hd[ds.num].key = key;
1a0091f0:	4b1b      	ldr	r3, [pc, #108]	; (1a009260 <inv_register_load_store+0xbc>)
1a0091f2:	681a      	ldr	r2, [r3, #0]
1a0091f4:	491a      	ldr	r1, [pc, #104]	; (1a009260 <inv_register_load_store+0xbc>)
1a0091f6:	4613      	mov	r3, r2
1a0091f8:	005b      	lsls	r3, r3, #1
1a0091fa:	4413      	add	r3, r2
1a0091fc:	009b      	lsls	r3, r3, #2
1a0091fe:	440b      	add	r3, r1
1a009200:	33b0      	adds	r3, #176	; 0xb0
1a009202:	683a      	ldr	r2, [r7, #0]
1a009204:	601a      	str	r2, [r3, #0]
    ds.hd[ds.num].size = size;
1a009206:	4b16      	ldr	r3, [pc, #88]	; (1a009260 <inv_register_load_store+0xbc>)
1a009208:	681a      	ldr	r2, [r3, #0]
1a00920a:	6879      	ldr	r1, [r7, #4]
1a00920c:	4814      	ldr	r0, [pc, #80]	; (1a009260 <inv_register_load_store+0xbc>)
1a00920e:	4613      	mov	r3, r2
1a009210:	005b      	lsls	r3, r3, #1
1a009212:	4413      	add	r3, r2
1a009214:	009b      	lsls	r3, r3, #2
1a009216:	4403      	add	r3, r0
1a009218:	33a8      	adds	r3, #168	; 0xa8
1a00921a:	6019      	str	r1, [r3, #0]
    ds.load[ds.num] = load_func;
1a00921c:	4b10      	ldr	r3, [pc, #64]	; (1a009260 <inv_register_load_store+0xbc>)
1a00921e:	681b      	ldr	r3, [r3, #0]
1a009220:	490f      	ldr	r1, [pc, #60]	; (1a009260 <inv_register_load_store+0xbc>)
1a009222:	3302      	adds	r3, #2
1a009224:	68fa      	ldr	r2, [r7, #12]
1a009226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ds.save[ds.num] = save_func;
1a00922a:	4b0d      	ldr	r3, [pc, #52]	; (1a009260 <inv_register_load_store+0xbc>)
1a00922c:	681b      	ldr	r3, [r3, #0]
1a00922e:	490c      	ldr	r1, [pc, #48]	; (1a009260 <inv_register_load_store+0xbc>)
1a009230:	3316      	adds	r3, #22
1a009232:	68ba      	ldr	r2, [r7, #8]
1a009234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ds.total_size += size + sizeof(struct data_header_t);
1a009238:	4b09      	ldr	r3, [pc, #36]	; (1a009260 <inv_register_load_store+0xbc>)
1a00923a:	685a      	ldr	r2, [r3, #4]
1a00923c:	687b      	ldr	r3, [r7, #4]
1a00923e:	4413      	add	r3, r2
1a009240:	330c      	adds	r3, #12
1a009242:	4a07      	ldr	r2, [pc, #28]	; (1a009260 <inv_register_load_store+0xbc>)
1a009244:	6053      	str	r3, [r2, #4]
    ds.num++;
1a009246:	4b06      	ldr	r3, [pc, #24]	; (1a009260 <inv_register_load_store+0xbc>)
1a009248:	681b      	ldr	r3, [r3, #0]
1a00924a:	3301      	adds	r3, #1
1a00924c:	4a04      	ldr	r2, [pc, #16]	; (1a009260 <inv_register_load_store+0xbc>)
1a00924e:	6013      	str	r3, [r2, #0]

    return INV_SUCCESS;
1a009250:	2300      	movs	r3, #0
}
1a009252:	4618      	mov	r0, r3
1a009254:	371c      	adds	r7, #28
1a009256:	46bd      	mov	sp, r7
1a009258:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00925c:	4770      	bx	lr
1a00925e:	bf00      	nop
1a009260:	10086a0c 	.word	0x10086a0c

1a009264 <inv_get_sensor_type_accel>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_accel(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a009264:	b580      	push	{r7, lr}
1a009266:	b084      	sub	sp, #16
1a009268:	af00      	add	r7, sp, #0
1a00926a:	60f8      	str	r0, [r7, #12]
1a00926c:	60b9      	str	r1, [r7, #8]
1a00926e:	607a      	str	r2, [r7, #4]
    inv_get_accel_set(data, accuracy, timestamp);
1a009270:	687a      	ldr	r2, [r7, #4]
1a009272:	68b9      	ldr	r1, [r7, #8]
1a009274:	68f8      	ldr	r0, [r7, #12]
1a009276:	f7fe fb1d 	bl	1a0078b4 <inv_get_accel_set>
    if (eMPL_out.accel_status & INV_NEW_DATA)
1a00927a:	4b06      	ldr	r3, [pc, #24]	; (1a009294 <inv_get_sensor_type_accel+0x30>)
1a00927c:	699b      	ldr	r3, [r3, #24]
1a00927e:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a009282:	2b00      	cmp	r3, #0
1a009284:	d001      	beq.n	1a00928a <inv_get_sensor_type_accel+0x26>
        return 1;
1a009286:	2301      	movs	r3, #1
1a009288:	e000      	b.n	1a00928c <inv_get_sensor_type_accel+0x28>
    else
        return 0;
1a00928a:	2300      	movs	r3, #0
}
1a00928c:	4618      	mov	r0, r3
1a00928e:	3710      	adds	r7, #16
1a009290:	46bd      	mov	sp, r7
1a009292:	bd80      	pop	{r7, pc}
1a009294:	10086ba4 	.word	0x10086ba4

1a009298 <inv_get_sensor_type_gyro>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated. 
 */
int inv_get_sensor_type_gyro(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a009298:	b580      	push	{r7, lr}
1a00929a:	b084      	sub	sp, #16
1a00929c:	af00      	add	r7, sp, #0
1a00929e:	60f8      	str	r0, [r7, #12]
1a0092a0:	60b9      	str	r1, [r7, #8]
1a0092a2:	607a      	str	r2, [r7, #4]
    inv_get_gyro_set(data, accuracy, timestamp);
1a0092a4:	687a      	ldr	r2, [r7, #4]
1a0092a6:	68b9      	ldr	r1, [r7, #8]
1a0092a8:	68f8      	ldr	r0, [r7, #12]
1a0092aa:	f7fe fb29 	bl	1a007900 <inv_get_gyro_set>
    if (eMPL_out.gyro_status & INV_NEW_DATA)
1a0092ae:	4b06      	ldr	r3, [pc, #24]	; (1a0092c8 <inv_get_sensor_type_gyro+0x30>)
1a0092b0:	695b      	ldr	r3, [r3, #20]
1a0092b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0092b6:	2b00      	cmp	r3, #0
1a0092b8:	d001      	beq.n	1a0092be <inv_get_sensor_type_gyro+0x26>
        return 1;
1a0092ba:	2301      	movs	r3, #1
1a0092bc:	e000      	b.n	1a0092c0 <inv_get_sensor_type_gyro+0x28>
    else
        return 0;
1a0092be:	2300      	movs	r3, #0
}
1a0092c0:	4618      	mov	r0, r3
1a0092c2:	3710      	adds	r7, #16
1a0092c4:	46bd      	mov	sp, r7
1a0092c6:	bd80      	pop	{r7, pc}
1a0092c8:	10086ba4 	.word	0x10086ba4

1a0092cc <inv_get_sensor_type_compass>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated. 
 */
int inv_get_sensor_type_compass(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a0092cc:	b580      	push	{r7, lr}
1a0092ce:	b084      	sub	sp, #16
1a0092d0:	af00      	add	r7, sp, #0
1a0092d2:	60f8      	str	r0, [r7, #12]
1a0092d4:	60b9      	str	r1, [r7, #8]
1a0092d6:	607a      	str	r2, [r7, #4]
    inv_get_compass_set(data, accuracy, timestamp);
1a0092d8:	687a      	ldr	r2, [r7, #4]
1a0092da:	68b9      	ldr	r1, [r7, #8]
1a0092dc:	68f8      	ldr	r0, [r7, #12]
1a0092de:	f7fe fb41 	bl	1a007964 <inv_get_compass_set>
    if (eMPL_out.compass_status & INV_NEW_DATA)
1a0092e2:	4b06      	ldr	r3, [pc, #24]	; (1a0092fc <inv_get_sensor_type_compass+0x30>)
1a0092e4:	69db      	ldr	r3, [r3, #28]
1a0092e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0092ea:	2b00      	cmp	r3, #0
1a0092ec:	d001      	beq.n	1a0092f2 <inv_get_sensor_type_compass+0x26>
        return 1;
1a0092ee:	2301      	movs	r3, #1
1a0092f0:	e000      	b.n	1a0092f4 <inv_get_sensor_type_compass+0x28>
    else
        return 0;
1a0092f2:	2300      	movs	r3, #0
}
1a0092f4:	4618      	mov	r0, r3
1a0092f6:	3710      	adds	r7, #16
1a0092f8:	46bd      	mov	sp, r7
1a0092fa:	bd80      	pop	{r7, pc}
1a0092fc:	10086ba4 	.word	0x10086ba4

1a009300 <inv_get_sensor_type_quat>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated. 
 */
int inv_get_sensor_type_quat(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a009300:	b580      	push	{r7, lr}
1a009302:	b084      	sub	sp, #16
1a009304:	af00      	add	r7, sp, #0
1a009306:	60f8      	str	r0, [r7, #12]
1a009308:	60b9      	str	r1, [r7, #8]
1a00930a:	607a      	str	r2, [r7, #4]
    memcpy(data, eMPL_out.quat, sizeof(eMPL_out.quat));
1a00930c:	2210      	movs	r2, #16
1a00930e:	4909      	ldr	r1, [pc, #36]	; (1a009334 <inv_get_sensor_type_quat+0x34>)
1a009310:	68f8      	ldr	r0, [r7, #12]
1a009312:	f00b fc67 	bl	1a014be4 <memcpy>
    accuracy[0] = eMPL_out.quat_accuracy;
1a009316:	4b07      	ldr	r3, [pc, #28]	; (1a009334 <inv_get_sensor_type_quat+0x34>)
1a009318:	691b      	ldr	r3, [r3, #16]
1a00931a:	b2da      	uxtb	r2, r3
1a00931c:	68bb      	ldr	r3, [r7, #8]
1a00931e:	701a      	strb	r2, [r3, #0]
    timestamp[0] = eMPL_out.nine_axis_timestamp;
1a009320:	4b04      	ldr	r3, [pc, #16]	; (1a009334 <inv_get_sensor_type_quat+0x34>)
1a009322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1a009324:	687b      	ldr	r3, [r7, #4]
1a009326:	601a      	str	r2, [r3, #0]
    return eMPL_out.nine_axis_status;
1a009328:	4b02      	ldr	r3, [pc, #8]	; (1a009334 <inv_get_sensor_type_quat+0x34>)
1a00932a:	6a1b      	ldr	r3, [r3, #32]
}
1a00932c:	4618      	mov	r0, r3
1a00932e:	3710      	adds	r7, #16
1a009330:	46bd      	mov	sp, r7
1a009332:	bd80      	pop	{r7, pc}
1a009334:	10086ba4 	.word	0x10086ba4

1a009338 <inv_get_sensor_type_heading>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated. 
 */
int inv_get_sensor_type_heading(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a009338:	b580      	push	{r7, lr}
1a00933a:	b08c      	sub	sp, #48	; 0x30
1a00933c:	af00      	add	r7, sp, #0
1a00933e:	60f8      	str	r0, [r7, #12]
1a009340:	60b9      	str	r1, [r7, #8]
1a009342:	607a      	str	r2, [r7, #4]
    long t1, t2, q00, q03, q12, q22;
    float fdata;

    q00 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[0]);
1a009344:	4b39      	ldr	r3, [pc, #228]	; (1a00942c <inv_get_sensor_type_heading+0xf4>)
1a009346:	681a      	ldr	r2, [r3, #0]
1a009348:	4b38      	ldr	r3, [pc, #224]	; (1a00942c <inv_get_sensor_type_heading+0xf4>)
1a00934a:	681b      	ldr	r3, [r3, #0]
1a00934c:	4619      	mov	r1, r3
1a00934e:	4610      	mov	r0, r2
1a009350:	f7fe fd4a 	bl	1a007de8 <inv_q29_mult>
1a009354:	62b8      	str	r0, [r7, #40]	; 0x28
    q03 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[3]);
1a009356:	4b35      	ldr	r3, [pc, #212]	; (1a00942c <inv_get_sensor_type_heading+0xf4>)
1a009358:	681a      	ldr	r2, [r3, #0]
1a00935a:	4b34      	ldr	r3, [pc, #208]	; (1a00942c <inv_get_sensor_type_heading+0xf4>)
1a00935c:	68db      	ldr	r3, [r3, #12]
1a00935e:	4619      	mov	r1, r3
1a009360:	4610      	mov	r0, r2
1a009362:	f7fe fd41 	bl	1a007de8 <inv_q29_mult>
1a009366:	6278      	str	r0, [r7, #36]	; 0x24
    q12 = inv_q29_mult(eMPL_out.quat[1], eMPL_out.quat[2]);
1a009368:	4b30      	ldr	r3, [pc, #192]	; (1a00942c <inv_get_sensor_type_heading+0xf4>)
1a00936a:	685a      	ldr	r2, [r3, #4]
1a00936c:	4b2f      	ldr	r3, [pc, #188]	; (1a00942c <inv_get_sensor_type_heading+0xf4>)
1a00936e:	689b      	ldr	r3, [r3, #8]
1a009370:	4619      	mov	r1, r3
1a009372:	4610      	mov	r0, r2
1a009374:	f7fe fd38 	bl	1a007de8 <inv_q29_mult>
1a009378:	6238      	str	r0, [r7, #32]
    q22 = inv_q29_mult(eMPL_out.quat[2], eMPL_out.quat[2]);
1a00937a:	4b2c      	ldr	r3, [pc, #176]	; (1a00942c <inv_get_sensor_type_heading+0xf4>)
1a00937c:	689a      	ldr	r2, [r3, #8]
1a00937e:	4b2b      	ldr	r3, [pc, #172]	; (1a00942c <inv_get_sensor_type_heading+0xf4>)
1a009380:	689b      	ldr	r3, [r3, #8]
1a009382:	4619      	mov	r1, r3
1a009384:	4610      	mov	r0, r2
1a009386:	f7fe fd2f 	bl	1a007de8 <inv_q29_mult>
1a00938a:	61f8      	str	r0, [r7, #28]

    /* X component of the Ybody axis in World frame */
    t1 = q12 - q03;
1a00938c:	6a3a      	ldr	r2, [r7, #32]
1a00938e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a009390:	1ad3      	subs	r3, r2, r3
1a009392:	61bb      	str	r3, [r7, #24]

    /* Y component of the Ybody axis in World frame */
    t2 = q22 + q00 - (1L << 30);
1a009394:	69fa      	ldr	r2, [r7, #28]
1a009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a009398:	4413      	add	r3, r2
1a00939a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
1a00939e:	617b      	str	r3, [r7, #20]
    fdata = atan2f((float) t1, (float) t2) * 180.f / (float) M_PI;
1a0093a0:	69bb      	ldr	r3, [r7, #24]
1a0093a2:	ee07 3a90 	vmov	s15, r3
1a0093a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a0093aa:	697b      	ldr	r3, [r7, #20]
1a0093ac:	ee07 3a10 	vmov	s14, r3
1a0093b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
1a0093b4:	ee17 1a10 	vmov	r1, s14
1a0093b8:	ee17 0a90 	vmov	r0, s15
1a0093bc:	f00c fa86 	bl	1a0158cc <atan2f>
1a0093c0:	ee07 0a10 	vmov	s14, r0
1a0093c4:	eddf 7a1a 	vldr	s15, [pc, #104]	; 1a009430 <inv_get_sensor_type_heading+0xf8>
1a0093c8:	ee27 7a27 	vmul.f32	s14, s14, s15
1a0093cc:	eddf 6a19 	vldr	s13, [pc, #100]	; 1a009434 <inv_get_sensor_type_heading+0xfc>
1a0093d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
1a0093d4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    if (fdata < 0.f)
1a0093d8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
1a0093dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
1a0093e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0093e4:	d507      	bpl.n	1a0093f6 <inv_get_sensor_type_heading+0xbe>
        fdata += 360.f;
1a0093e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
1a0093ea:	ed9f 7a13 	vldr	s14, [pc, #76]	; 1a009438 <inv_get_sensor_type_heading+0x100>
1a0093ee:	ee77 7a87 	vadd.f32	s15, s15, s14
1a0093f2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    data[0] = (long)(fdata * 65536.f);
1a0093f6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
1a0093fa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 1a00943c <inv_get_sensor_type_heading+0x104>
1a0093fe:	ee67 7a87 	vmul.f32	s15, s15, s14
1a009402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a009406:	ee17 2a90 	vmov	r2, s15
1a00940a:	68fb      	ldr	r3, [r7, #12]
1a00940c:	601a      	str	r2, [r3, #0]

    accuracy[0] = eMPL_out.quat_accuracy;
1a00940e:	4b07      	ldr	r3, [pc, #28]	; (1a00942c <inv_get_sensor_type_heading+0xf4>)
1a009410:	691b      	ldr	r3, [r3, #16]
1a009412:	b2da      	uxtb	r2, r3
1a009414:	68bb      	ldr	r3, [r7, #8]
1a009416:	701a      	strb	r2, [r3, #0]
    timestamp[0] = eMPL_out.nine_axis_timestamp;
1a009418:	4b04      	ldr	r3, [pc, #16]	; (1a00942c <inv_get_sensor_type_heading+0xf4>)
1a00941a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1a00941c:	687b      	ldr	r3, [r7, #4]
1a00941e:	601a      	str	r2, [r3, #0]
    return eMPL_out.nine_axis_status;
1a009420:	4b02      	ldr	r3, [pc, #8]	; (1a00942c <inv_get_sensor_type_heading+0xf4>)
1a009422:	6a1b      	ldr	r3, [r3, #32]
}
1a009424:	4618      	mov	r0, r3
1a009426:	3730      	adds	r7, #48	; 0x30
1a009428:	46bd      	mov	sp, r7
1a00942a:	bd80      	pop	{r7, pc}
1a00942c:	10086ba4 	.word	0x10086ba4
1a009430:	43340000 	.word	0x43340000
1a009434:	40490fdb 	.word	0x40490fdb
1a009438:	43b40000 	.word	0x43b40000
1a00943c:	47800000 	.word	0x47800000

1a009440 <inv_get_sensor_type_euler>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_euler(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a009440:	b580      	push	{r7, lr}
1a009442:	ed2d 8b02 	vpush	{d8}
1a009446:	b094      	sub	sp, #80	; 0x50
1a009448:	af00      	add	r7, sp, #0
1a00944a:	60f8      	str	r0, [r7, #12]
1a00944c:	60b9      	str	r1, [r7, #8]
1a00944e:	607a      	str	r2, [r7, #4]
    long t1, t2, t3;
    long q00, q01, q02, q03, q11, q12, q13, q22, q23, q33;
    float values[3];

    q00 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[0]);
1a009450:	4bb4      	ldr	r3, [pc, #720]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a009452:	681a      	ldr	r2, [r3, #0]
1a009454:	4bb3      	ldr	r3, [pc, #716]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a009456:	681b      	ldr	r3, [r3, #0]
1a009458:	4619      	mov	r1, r3
1a00945a:	4610      	mov	r0, r2
1a00945c:	f7fe fcc4 	bl	1a007de8 <inv_q29_mult>
1a009460:	64f8      	str	r0, [r7, #76]	; 0x4c
    q01 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[1]);
1a009462:	4bb0      	ldr	r3, [pc, #704]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a009464:	681a      	ldr	r2, [r3, #0]
1a009466:	4baf      	ldr	r3, [pc, #700]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a009468:	685b      	ldr	r3, [r3, #4]
1a00946a:	4619      	mov	r1, r3
1a00946c:	4610      	mov	r0, r2
1a00946e:	f7fe fcbb 	bl	1a007de8 <inv_q29_mult>
1a009472:	64b8      	str	r0, [r7, #72]	; 0x48
    q02 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[2]);
1a009474:	4bab      	ldr	r3, [pc, #684]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a009476:	681a      	ldr	r2, [r3, #0]
1a009478:	4baa      	ldr	r3, [pc, #680]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a00947a:	689b      	ldr	r3, [r3, #8]
1a00947c:	4619      	mov	r1, r3
1a00947e:	4610      	mov	r0, r2
1a009480:	f7fe fcb2 	bl	1a007de8 <inv_q29_mult>
1a009484:	6478      	str	r0, [r7, #68]	; 0x44
    q03 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[3]);
1a009486:	4ba7      	ldr	r3, [pc, #668]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a009488:	681a      	ldr	r2, [r3, #0]
1a00948a:	4ba6      	ldr	r3, [pc, #664]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a00948c:	68db      	ldr	r3, [r3, #12]
1a00948e:	4619      	mov	r1, r3
1a009490:	4610      	mov	r0, r2
1a009492:	f7fe fca9 	bl	1a007de8 <inv_q29_mult>
1a009496:	6438      	str	r0, [r7, #64]	; 0x40
    q11 = inv_q29_mult(eMPL_out.quat[1], eMPL_out.quat[1]);
1a009498:	4ba2      	ldr	r3, [pc, #648]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a00949a:	685a      	ldr	r2, [r3, #4]
1a00949c:	4ba1      	ldr	r3, [pc, #644]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a00949e:	685b      	ldr	r3, [r3, #4]
1a0094a0:	4619      	mov	r1, r3
1a0094a2:	4610      	mov	r0, r2
1a0094a4:	f7fe fca0 	bl	1a007de8 <inv_q29_mult>
1a0094a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    q12 = inv_q29_mult(eMPL_out.quat[1], eMPL_out.quat[2]);
1a0094aa:	4b9e      	ldr	r3, [pc, #632]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a0094ac:	685a      	ldr	r2, [r3, #4]
1a0094ae:	4b9d      	ldr	r3, [pc, #628]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a0094b0:	689b      	ldr	r3, [r3, #8]
1a0094b2:	4619      	mov	r1, r3
1a0094b4:	4610      	mov	r0, r2
1a0094b6:	f7fe fc97 	bl	1a007de8 <inv_q29_mult>
1a0094ba:	63b8      	str	r0, [r7, #56]	; 0x38
    q13 = inv_q29_mult(eMPL_out.quat[1], eMPL_out.quat[3]);
1a0094bc:	4b99      	ldr	r3, [pc, #612]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a0094be:	685a      	ldr	r2, [r3, #4]
1a0094c0:	4b98      	ldr	r3, [pc, #608]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a0094c2:	68db      	ldr	r3, [r3, #12]
1a0094c4:	4619      	mov	r1, r3
1a0094c6:	4610      	mov	r0, r2
1a0094c8:	f7fe fc8e 	bl	1a007de8 <inv_q29_mult>
1a0094cc:	6378      	str	r0, [r7, #52]	; 0x34
    q22 = inv_q29_mult(eMPL_out.quat[2], eMPL_out.quat[2]);
1a0094ce:	4b95      	ldr	r3, [pc, #596]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a0094d0:	689a      	ldr	r2, [r3, #8]
1a0094d2:	4b94      	ldr	r3, [pc, #592]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a0094d4:	689b      	ldr	r3, [r3, #8]
1a0094d6:	4619      	mov	r1, r3
1a0094d8:	4610      	mov	r0, r2
1a0094da:	f7fe fc85 	bl	1a007de8 <inv_q29_mult>
1a0094de:	6338      	str	r0, [r7, #48]	; 0x30
    q23 = inv_q29_mult(eMPL_out.quat[2], eMPL_out.quat[3]);
1a0094e0:	4b90      	ldr	r3, [pc, #576]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a0094e2:	689a      	ldr	r2, [r3, #8]
1a0094e4:	4b8f      	ldr	r3, [pc, #572]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a0094e6:	68db      	ldr	r3, [r3, #12]
1a0094e8:	4619      	mov	r1, r3
1a0094ea:	4610      	mov	r0, r2
1a0094ec:	f7fe fc7c 	bl	1a007de8 <inv_q29_mult>
1a0094f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    q33 = inv_q29_mult(eMPL_out.quat[3], eMPL_out.quat[3]);
1a0094f2:	4b8c      	ldr	r3, [pc, #560]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a0094f4:	68da      	ldr	r2, [r3, #12]
1a0094f6:	4b8b      	ldr	r3, [pc, #556]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a0094f8:	68db      	ldr	r3, [r3, #12]
1a0094fa:	4619      	mov	r1, r3
1a0094fc:	4610      	mov	r0, r2
1a0094fe:	f7fe fc73 	bl	1a007de8 <inv_q29_mult>
1a009502:	62b8      	str	r0, [r7, #40]	; 0x28

    /* X component of the Ybody axis in World frame */
    t1 = q12 - q03;
1a009504:	6bba      	ldr	r2, [r7, #56]	; 0x38
1a009506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a009508:	1ad3      	subs	r3, r2, r3
1a00950a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Y component of the Ybody axis in World frame */
    t2 = q22 + q00 - (1L << 30);
1a00950c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1a00950e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a009510:	4413      	add	r3, r2
1a009512:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
1a009516:	623b      	str	r3, [r7, #32]
    values[2] = -atan2f((float) t1, (float) t2) * 180.f / (float) M_PI;
1a009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a00951a:	ee07 3a90 	vmov	s15, r3
1a00951e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a009522:	6a3b      	ldr	r3, [r7, #32]
1a009524:	ee07 3a10 	vmov	s14, r3
1a009528:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
1a00952c:	ee17 1a10 	vmov	r1, s14
1a009530:	ee17 0a90 	vmov	r0, s15
1a009534:	f00c f9ca 	bl	1a0158cc <atan2f>
1a009538:	4603      	mov	r3, r0
1a00953a:	ee07 3a90 	vmov	s15, r3
1a00953e:	eef1 7a67 	vneg.f32	s15, s15
1a009542:	ed9f 7a79 	vldr	s14, [pc, #484]	; 1a009728 <inv_get_sensor_type_euler+0x2e8>
1a009546:	ee27 7a87 	vmul.f32	s14, s15, s14
1a00954a:	eddf 6a78 	vldr	s13, [pc, #480]	; 1a00972c <inv_get_sensor_type_euler+0x2ec>
1a00954e:	eec7 7a26 	vdiv.f32	s15, s14, s13
1a009552:	edc7 7a06 	vstr	s15, [r7, #24]

    /* Z component of the Ybody axis in World frame */
    t3 = q23 + q01;
1a009556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1a009558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
1a00955a:	4413      	add	r3, r2
1a00955c:	61fb      	str	r3, [r7, #28]
    values[0] =
        atan2f((float) t3,
1a00955e:	69fb      	ldr	r3, [r7, #28]
1a009560:	ee07 3a90 	vmov	s15, r3
1a009564:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
                sqrtf((float) t1 * t1 +
1a009568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a00956a:	ee07 3a90 	vmov	s15, r3
1a00956e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
1a009572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a009574:	ee07 3a90 	vmov	s15, r3
1a009578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a00957c:	ee27 7a27 	vmul.f32	s14, s14, s15
                      (float) t2 * t2)) * 180.f / (float) M_PI;
1a009580:	6a3b      	ldr	r3, [r7, #32]
1a009582:	ee07 3a90 	vmov	s15, r3
1a009586:	eef8 6ae7 	vcvt.f32.s32	s13, s15
1a00958a:	6a3b      	ldr	r3, [r7, #32]
1a00958c:	ee07 3a90 	vmov	s15, r3
1a009590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a009594:	ee66 7aa7 	vmul.f32	s15, s13, s15
    values[2] = -atan2f((float) t1, (float) t2) * 180.f / (float) M_PI;

    /* Z component of the Ybody axis in World frame */
    t3 = q23 + q01;
    values[0] =
        atan2f((float) t3,
1a009598:	ee77 7a27 	vadd.f32	s15, s14, s15
1a00959c:	ee17 0a90 	vmov	r0, s15
1a0095a0:	f00c f996 	bl	1a0158d0 <sqrtf>
1a0095a4:	4603      	mov	r3, r0
1a0095a6:	4619      	mov	r1, r3
1a0095a8:	ee18 0a10 	vmov	r0, s16
1a0095ac:	f00c f98e 	bl	1a0158cc <atan2f>
1a0095b0:	ee07 0a10 	vmov	s14, r0
                sqrtf((float) t1 * t1 +
                      (float) t2 * t2)) * 180.f / (float) M_PI;
1a0095b4:	eddf 7a5c 	vldr	s15, [pc, #368]	; 1a009728 <inv_get_sensor_type_euler+0x2e8>
1a0095b8:	ee27 7a27 	vmul.f32	s14, s14, s15
1a0095bc:	eddf 6a5b 	vldr	s13, [pc, #364]	; 1a00972c <inv_get_sensor_type_euler+0x2ec>
1a0095c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
    t2 = q22 + q00 - (1L << 30);
    values[2] = -atan2f((float) t1, (float) t2) * 180.f / (float) M_PI;

    /* Z component of the Ybody axis in World frame */
    t3 = q23 + q01;
    values[0] =
1a0095c4:	edc7 7a04 	vstr	s15, [r7, #16]
        atan2f((float) t3,
                sqrtf((float) t1 * t1 +
                      (float) t2 * t2)) * 180.f / (float) M_PI;
    /* Z component of the Zbody axis in World frame */
    t2 = q33 + q00 - (1L << 30);
1a0095c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a0095ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a0095cc:	4413      	add	r3, r2
1a0095ce:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
1a0095d2:	623b      	str	r3, [r7, #32]
    if (t2 < 0) {
1a0095d4:	6a3b      	ldr	r3, [r7, #32]
1a0095d6:	2b00      	cmp	r3, #0
1a0095d8:	da17      	bge.n	1a00960a <inv_get_sensor_type_euler+0x1ca>
        if (values[0] >= 0)
1a0095da:	edd7 7a04 	vldr	s15, [r7, #16]
1a0095de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
1a0095e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0095e6:	db08      	blt.n	1a0095fa <inv_get_sensor_type_euler+0x1ba>
            values[0] = 180.f - values[0];
1a0095e8:	edd7 7a04 	vldr	s15, [r7, #16]
1a0095ec:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 1a009728 <inv_get_sensor_type_euler+0x2e8>
1a0095f0:	ee77 7a67 	vsub.f32	s15, s14, s15
1a0095f4:	edc7 7a04 	vstr	s15, [r7, #16]
1a0095f8:	e007      	b.n	1a00960a <inv_get_sensor_type_euler+0x1ca>
        else
            values[0] = -180.f - values[0];
1a0095fa:	edd7 7a04 	vldr	s15, [r7, #16]
1a0095fe:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 1a009730 <inv_get_sensor_type_euler+0x2f0>
1a009602:	ee77 7a67 	vsub.f32	s15, s14, s15
1a009606:	edc7 7a04 	vstr	s15, [r7, #16]
    }

    /* X component of the Xbody axis in World frame */
    t1 = q11 + q00 - (1L << 30);
1a00960a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
1a00960c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00960e:	4413      	add	r3, r2
1a009610:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
1a009614:	627b      	str	r3, [r7, #36]	; 0x24
    /* Y component of the Xbody axis in World frame */
    t2 = q12 + q03;
1a009616:	6bba      	ldr	r2, [r7, #56]	; 0x38
1a009618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a00961a:	4413      	add	r3, r2
1a00961c:	623b      	str	r3, [r7, #32]
    /* Z component of the Xbody axis in World frame */
    t3 = q13 - q02;
1a00961e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1a009620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a009622:	1ad3      	subs	r3, r2, r3
1a009624:	61fb      	str	r3, [r7, #28]

    values[1] =
        (atan2f((float)(q33 + q00 - (1L << 30)), (float)(q13 - q02)) *
1a009626:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a009628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00962a:	4413      	add	r3, r2
1a00962c:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
1a009630:	ee07 3a90 	vmov	s15, r3
1a009634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a009638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1a00963a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a00963c:	1ad3      	subs	r3, r2, r3
1a00963e:	ee07 3a10 	vmov	s14, r3
1a009642:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
1a009646:	ee17 1a10 	vmov	r1, s14
1a00964a:	ee17 0a90 	vmov	r0, s15
1a00964e:	f00c f93d 	bl	1a0158cc <atan2f>
1a009652:	ee07 0a10 	vmov	s14, r0
1a009656:	eddf 7a34 	vldr	s15, [pc, #208]	; 1a009728 <inv_get_sensor_type_euler+0x2e8>
1a00965a:	ee27 7a27 	vmul.f32	s14, s14, s15
          180.f / (float) M_PI - 90);
1a00965e:	eddf 6a33 	vldr	s13, [pc, #204]	; 1a00972c <inv_get_sensor_type_euler+0x2ec>
1a009662:	eec7 7a26 	vdiv.f32	s15, s14, s13
1a009666:	ed9f 7a33 	vldr	s14, [pc, #204]	; 1a009734 <inv_get_sensor_type_euler+0x2f4>
1a00966a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    /* Y component of the Xbody axis in World frame */
    t2 = q12 + q03;
    /* Z component of the Xbody axis in World frame */
    t3 = q13 - q02;

    values[1] =
1a00966e:	edc7 7a05 	vstr	s15, [r7, #20]
        (atan2f((float)(q33 + q00 - (1L << 30)), (float)(q13 - q02)) *
          180.f / (float) M_PI - 90);
    if (values[1] >= 90)
1a009672:	edd7 7a05 	vldr	s15, [r7, #20]
1a009676:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 1a009734 <inv_get_sensor_type_euler+0x2f4>
1a00967a:	eef4 7ac7 	vcmpe.f32	s15, s14
1a00967e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a009682:	db07      	blt.n	1a009694 <inv_get_sensor_type_euler+0x254>
        values[1] = 180 - values[1];
1a009684:	edd7 7a05 	vldr	s15, [r7, #20]
1a009688:	ed9f 7a27 	vldr	s14, [pc, #156]	; 1a009728 <inv_get_sensor_type_euler+0x2e8>
1a00968c:	ee77 7a67 	vsub.f32	s15, s14, s15
1a009690:	edc7 7a05 	vstr	s15, [r7, #20]

    if (values[1] < -90)
1a009694:	edd7 7a05 	vldr	s15, [r7, #20]
1a009698:	ed9f 7a27 	vldr	s14, [pc, #156]	; 1a009738 <inv_get_sensor_type_euler+0x2f8>
1a00969c:	eef4 7ac7 	vcmpe.f32	s15, s14
1a0096a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0096a4:	d507      	bpl.n	1a0096b6 <inv_get_sensor_type_euler+0x276>
        values[1] = -180 - values[1];
1a0096a6:	edd7 7a05 	vldr	s15, [r7, #20]
1a0096aa:	ed9f 7a21 	vldr	s14, [pc, #132]	; 1a009730 <inv_get_sensor_type_euler+0x2f0>
1a0096ae:	ee77 7a67 	vsub.f32	s15, s14, s15
1a0096b2:	edc7 7a05 	vstr	s15, [r7, #20]
    data[0] = (long)(values[0] * 65536.f);
1a0096b6:	edd7 7a04 	vldr	s15, [r7, #16]
1a0096ba:	ed9f 7a20 	vldr	s14, [pc, #128]	; 1a00973c <inv_get_sensor_type_euler+0x2fc>
1a0096be:	ee67 7a87 	vmul.f32	s15, s15, s14
1a0096c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a0096c6:	ee17 2a90 	vmov	r2, s15
1a0096ca:	68fb      	ldr	r3, [r7, #12]
1a0096cc:	601a      	str	r2, [r3, #0]
    data[1] = (long)(values[1] * 65536.f);
1a0096ce:	68fb      	ldr	r3, [r7, #12]
1a0096d0:	3304      	adds	r3, #4
1a0096d2:	edd7 7a05 	vldr	s15, [r7, #20]
1a0096d6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 1a00973c <inv_get_sensor_type_euler+0x2fc>
1a0096da:	ee67 7a87 	vmul.f32	s15, s15, s14
1a0096de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a0096e2:	ee17 2a90 	vmov	r2, s15
1a0096e6:	601a      	str	r2, [r3, #0]
    data[2] = (long)(values[2] * 65536.f);
1a0096e8:	68fb      	ldr	r3, [r7, #12]
1a0096ea:	3308      	adds	r3, #8
1a0096ec:	edd7 7a06 	vldr	s15, [r7, #24]
1a0096f0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 1a00973c <inv_get_sensor_type_euler+0x2fc>
1a0096f4:	ee67 7a87 	vmul.f32	s15, s15, s14
1a0096f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a0096fc:	ee17 2a90 	vmov	r2, s15
1a009700:	601a      	str	r2, [r3, #0]

    accuracy[0] = eMPL_out.quat_accuracy;
1a009702:	4b08      	ldr	r3, [pc, #32]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a009704:	691b      	ldr	r3, [r3, #16]
1a009706:	b2da      	uxtb	r2, r3
1a009708:	68bb      	ldr	r3, [r7, #8]
1a00970a:	701a      	strb	r2, [r3, #0]
    timestamp[0] = eMPL_out.nine_axis_timestamp;
1a00970c:	4b05      	ldr	r3, [pc, #20]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a00970e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1a009710:	687b      	ldr	r3, [r7, #4]
1a009712:	601a      	str	r2, [r3, #0]
    return eMPL_out.nine_axis_status;
1a009714:	4b03      	ldr	r3, [pc, #12]	; (1a009724 <inv_get_sensor_type_euler+0x2e4>)
1a009716:	6a1b      	ldr	r3, [r3, #32]
}
1a009718:	4618      	mov	r0, r3
1a00971a:	3750      	adds	r7, #80	; 0x50
1a00971c:	46bd      	mov	sp, r7
1a00971e:	ecbd 8b02 	vpop	{d8}
1a009722:	bd80      	pop	{r7, pc}
1a009724:	10086ba4 	.word	0x10086ba4
1a009728:	43340000 	.word	0x43340000
1a00972c:	40490fdb 	.word	0x40490fdb
1a009730:	c3340000 	.word	0xc3340000
1a009734:	42b40000 	.word	0x42b40000
1a009738:	c2b40000 	.word	0xc2b40000
1a00973c:	47800000 	.word	0x47800000

1a009740 <inv_get_sensor_type_rot_mat>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_rot_mat(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1a009740:	b580      	push	{r7, lr}
1a009742:	b084      	sub	sp, #16
1a009744:	af00      	add	r7, sp, #0
1a009746:	60f8      	str	r0, [r7, #12]
1a009748:	60b9      	str	r1, [r7, #8]
1a00974a:	607a      	str	r2, [r7, #4]
    inv_quaternion_to_rotation(eMPL_out.quat, data);
1a00974c:	68f9      	ldr	r1, [r7, #12]
1a00974e:	4809      	ldr	r0, [pc, #36]	; (1a009774 <inv_get_sensor_type_rot_mat+0x34>)
1a009750:	f7fe ffba 	bl	1a0086c8 <inv_quaternion_to_rotation>
    accuracy[0] = eMPL_out.quat_accuracy;
1a009754:	4b07      	ldr	r3, [pc, #28]	; (1a009774 <inv_get_sensor_type_rot_mat+0x34>)
1a009756:	691b      	ldr	r3, [r3, #16]
1a009758:	b2da      	uxtb	r2, r3
1a00975a:	68bb      	ldr	r3, [r7, #8]
1a00975c:	701a      	strb	r2, [r3, #0]
    timestamp[0] = eMPL_out.nine_axis_timestamp;
1a00975e:	4b05      	ldr	r3, [pc, #20]	; (1a009774 <inv_get_sensor_type_rot_mat+0x34>)
1a009760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1a009762:	687b      	ldr	r3, [r7, #4]
1a009764:	601a      	str	r2, [r3, #0]
    return eMPL_out.nine_axis_status;
1a009766:	4b03      	ldr	r3, [pc, #12]	; (1a009774 <inv_get_sensor_type_rot_mat+0x34>)
1a009768:	6a1b      	ldr	r3, [r3, #32]
}
1a00976a:	4618      	mov	r0, r3
1a00976c:	3710      	adds	r7, #16
1a00976e:	46bd      	mov	sp, r7
1a009770:	bd80      	pop	{r7, pc}
1a009772:	bf00      	nop
1a009774:	10086ba4 	.word	0x10086ba4

1a009778 <inv_generate_eMPL_outputs>:

static inv_error_t inv_generate_eMPL_outputs
    (struct inv_sensor_cal_t *sensor_cal)
{
1a009778:	b580      	push	{r7, lr}
1a00977a:	b084      	sub	sp, #16
1a00977c:	af00      	add	r7, sp, #0
1a00977e:	6078      	str	r0, [r7, #4]
    int use_sensor;
    long sr = 1000;
1a009780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a009784:	60bb      	str	r3, [r7, #8]
    inv_get_quaternion_set(eMPL_out.quat, &eMPL_out.quat_accuracy, &eMPL_out.nine_axis_timestamp);
1a009786:	4a53      	ldr	r2, [pc, #332]	; (1a0098d4 <inv_generate_eMPL_outputs+0x15c>)
1a009788:	4953      	ldr	r1, [pc, #332]	; (1a0098d8 <inv_generate_eMPL_outputs+0x160>)
1a00978a:	4854      	ldr	r0, [pc, #336]	; (1a0098dc <inv_generate_eMPL_outputs+0x164>)
1a00978c:	f7ff fb42 	bl	1a008e14 <inv_get_quaternion_set>
    eMPL_out.gyro_status = sensor_cal->gyro.status;
1a009790:	687b      	ldr	r3, [r7, #4]
1a009792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a009794:	4a51      	ldr	r2, [pc, #324]	; (1a0098dc <inv_generate_eMPL_outputs+0x164>)
1a009796:	6153      	str	r3, [r2, #20]
    eMPL_out.accel_status = sensor_cal->accel.status;
1a009798:	687b      	ldr	r3, [r7, #4]
1a00979a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a00979c:	4a4f      	ldr	r2, [pc, #316]	; (1a0098dc <inv_generate_eMPL_outputs+0x164>)
1a00979e:	6193      	str	r3, [r2, #24]
    eMPL_out.compass_status = sensor_cal->compass.status;
1a0097a0:	687b      	ldr	r3, [r7, #4]
1a0097a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a0097a6:	4a4d      	ldr	r2, [pc, #308]	; (1a0098dc <inv_generate_eMPL_outputs+0x164>)
1a0097a8:	61d3      	str	r3, [r2, #28]
    
    /* Find the highest sample rate and tie sensor fusion timestamps to that one. */
    if (sensor_cal->gyro.status & INV_SENSOR_ON) {
1a0097aa:	687b      	ldr	r3, [r7, #4]
1a0097ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0097ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a0097b2:	2b00      	cmp	r3, #0
1a0097b4:	d004      	beq.n	1a0097c0 <inv_generate_eMPL_outputs+0x48>
        sr = sensor_cal->gyro.sample_rate_ms;
1a0097b6:	687b      	ldr	r3, [r7, #4]
1a0097b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0097ba:	60bb      	str	r3, [r7, #8]
        use_sensor = 0;
1a0097bc:	2300      	movs	r3, #0
1a0097be:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->accel.status & INV_SENSOR_ON) && (sr > sensor_cal->accel.sample_rate_ms)) {
1a0097c0:	687b      	ldr	r3, [r7, #4]
1a0097c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a0097c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a0097c8:	2b00      	cmp	r3, #0
1a0097ca:	d009      	beq.n	1a0097e0 <inv_generate_eMPL_outputs+0x68>
1a0097cc:	687b      	ldr	r3, [r7, #4]
1a0097ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
1a0097d0:	68bb      	ldr	r3, [r7, #8]
1a0097d2:	429a      	cmp	r2, r3
1a0097d4:	da04      	bge.n	1a0097e0 <inv_generate_eMPL_outputs+0x68>
        sr = sensor_cal->accel.sample_rate_ms;
1a0097d6:	687b      	ldr	r3, [r7, #4]
1a0097d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1a0097da:	60bb      	str	r3, [r7, #8]
        use_sensor = 1;
1a0097dc:	2301      	movs	r3, #1
1a0097de:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->compass.status & INV_SENSOR_ON) && (sr > sensor_cal->compass.sample_rate_ms)) {
1a0097e0:	687b      	ldr	r3, [r7, #4]
1a0097e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a0097e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a0097ea:	2b00      	cmp	r3, #0
1a0097ec:	d00b      	beq.n	1a009806 <inv_generate_eMPL_outputs+0x8e>
1a0097ee:	687b      	ldr	r3, [r7, #4]
1a0097f0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
1a0097f4:	68bb      	ldr	r3, [r7, #8]
1a0097f6:	429a      	cmp	r2, r3
1a0097f8:	da05      	bge.n	1a009806 <inv_generate_eMPL_outputs+0x8e>
        sr = sensor_cal->compass.sample_rate_ms;
1a0097fa:	687b      	ldr	r3, [r7, #4]
1a0097fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
1a009800:	60bb      	str	r3, [r7, #8]
        use_sensor = 2;
1a009802:	2302      	movs	r3, #2
1a009804:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->quat.status & INV_SENSOR_ON) && (sr > sensor_cal->quat.sample_rate_ms)) {
1a009806:	687b      	ldr	r3, [r7, #4]
1a009808:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a00980c:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a009810:	2b00      	cmp	r3, #0
1a009812:	d00b      	beq.n	1a00982c <inv_generate_eMPL_outputs+0xb4>
1a009814:	687b      	ldr	r3, [r7, #4]
1a009816:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
1a00981a:	68bb      	ldr	r3, [r7, #8]
1a00981c:	429a      	cmp	r2, r3
1a00981e:	da05      	bge.n	1a00982c <inv_generate_eMPL_outputs+0xb4>
        sr = sensor_cal->quat.sample_rate_ms;
1a009820:	687b      	ldr	r3, [r7, #4]
1a009822:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a009826:	60bb      	str	r3, [r7, #8]
        use_sensor = 3;
1a009828:	2303      	movs	r3, #3
1a00982a:	60fb      	str	r3, [r7, #12]
    }

    switch (use_sensor) {
1a00982c:	68fb      	ldr	r3, [r7, #12]
1a00982e:	2b02      	cmp	r3, #2
1a009830:	d025      	beq.n	1a00987e <inv_generate_eMPL_outputs+0x106>
1a009832:	2b03      	cmp	r3, #3
1a009834:	d036      	beq.n	1a0098a4 <inv_generate_eMPL_outputs+0x12c>
1a009836:	2b01      	cmp	r3, #1
1a009838:	d010      	beq.n	1a00985c <inv_generate_eMPL_outputs+0xe4>
    default:
    case 0:
        eMPL_out.nine_axis_status = (sensor_cal->gyro.status & INV_NEW_DATA) ? 1 : 0;
1a00983a:	687b      	ldr	r3, [r7, #4]
1a00983c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a00983e:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a009842:	2b00      	cmp	r3, #0
1a009844:	bf14      	ite	ne
1a009846:	2301      	movne	r3, #1
1a009848:	2300      	moveq	r3, #0
1a00984a:	b2db      	uxtb	r3, r3
1a00984c:	461a      	mov	r2, r3
1a00984e:	4b23      	ldr	r3, [pc, #140]	; (1a0098dc <inv_generate_eMPL_outputs+0x164>)
1a009850:	621a      	str	r2, [r3, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->gyro.timestamp;
1a009852:	687b      	ldr	r3, [r7, #4]
1a009854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1a009856:	4a21      	ldr	r2, [pc, #132]	; (1a0098dc <inv_generate_eMPL_outputs+0x164>)
1a009858:	6253      	str	r3, [r2, #36]	; 0x24
        break;
1a00985a:	e036      	b.n	1a0098ca <inv_generate_eMPL_outputs+0x152>
    case 1:
        eMPL_out.nine_axis_status = (sensor_cal->accel.status & INV_NEW_DATA) ? 1 : 0;
1a00985c:	687b      	ldr	r3, [r7, #4]
1a00985e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1a009860:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a009864:	2b00      	cmp	r3, #0
1a009866:	bf14      	ite	ne
1a009868:	2301      	movne	r3, #1
1a00986a:	2300      	moveq	r3, #0
1a00986c:	b2db      	uxtb	r3, r3
1a00986e:	461a      	mov	r2, r3
1a009870:	4b1a      	ldr	r3, [pc, #104]	; (1a0098dc <inv_generate_eMPL_outputs+0x164>)
1a009872:	621a      	str	r2, [r3, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->accel.timestamp;
1a009874:	687b      	ldr	r3, [r7, #4]
1a009876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1a009878:	4a18      	ldr	r2, [pc, #96]	; (1a0098dc <inv_generate_eMPL_outputs+0x164>)
1a00987a:	6253      	str	r3, [r2, #36]	; 0x24
        break;
1a00987c:	e025      	b.n	1a0098ca <inv_generate_eMPL_outputs+0x152>
    case 2:
        eMPL_out.nine_axis_status = (sensor_cal->compass.status & INV_NEW_DATA) ? 1 : 0;
1a00987e:	687b      	ldr	r3, [r7, #4]
1a009880:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
1a009884:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a009888:	2b00      	cmp	r3, #0
1a00988a:	bf14      	ite	ne
1a00988c:	2301      	movne	r3, #1
1a00988e:	2300      	moveq	r3, #0
1a009890:	b2db      	uxtb	r3, r3
1a009892:	461a      	mov	r2, r3
1a009894:	4b11      	ldr	r3, [pc, #68]	; (1a0098dc <inv_generate_eMPL_outputs+0x164>)
1a009896:	621a      	str	r2, [r3, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->compass.timestamp;
1a009898:	687b      	ldr	r3, [r7, #4]
1a00989a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
1a00989e:	4a0f      	ldr	r2, [pc, #60]	; (1a0098dc <inv_generate_eMPL_outputs+0x164>)
1a0098a0:	6253      	str	r3, [r2, #36]	; 0x24
        break;
1a0098a2:	e012      	b.n	1a0098ca <inv_generate_eMPL_outputs+0x152>
    case 3:
        eMPL_out.nine_axis_status = (sensor_cal->quat.status & INV_NEW_DATA) ? 1 : 0;
1a0098a4:	687b      	ldr	r3, [r7, #4]
1a0098a6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a0098aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0098ae:	2b00      	cmp	r3, #0
1a0098b0:	bf14      	ite	ne
1a0098b2:	2301      	movne	r3, #1
1a0098b4:	2300      	moveq	r3, #0
1a0098b6:	b2db      	uxtb	r3, r3
1a0098b8:	461a      	mov	r2, r3
1a0098ba:	4b08      	ldr	r3, [pc, #32]	; (1a0098dc <inv_generate_eMPL_outputs+0x164>)
1a0098bc:	621a      	str	r2, [r3, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->quat.timestamp;
1a0098be:	687b      	ldr	r3, [r7, #4]
1a0098c0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
1a0098c4:	4a05      	ldr	r2, [pc, #20]	; (1a0098dc <inv_generate_eMPL_outputs+0x164>)
1a0098c6:	6253      	str	r3, [r2, #36]	; 0x24
        break;
1a0098c8:	bf00      	nop
    }
    
    
    return INV_SUCCESS;
1a0098ca:	2300      	movs	r3, #0
}
1a0098cc:	4618      	mov	r0, r3
1a0098ce:	3710      	adds	r7, #16
1a0098d0:	46bd      	mov	sp, r7
1a0098d2:	bd80      	pop	{r7, pc}
1a0098d4:	10086bc8 	.word	0x10086bc8
1a0098d8:	10086bb4 	.word	0x10086bb4
1a0098dc:	10086ba4 	.word	0x10086ba4

1a0098e0 <inv_start_eMPL_outputs>:

static inv_error_t inv_start_eMPL_outputs(void)
{
1a0098e0:	b580      	push	{r7, lr}
1a0098e2:	af00      	add	r7, sp, #0
    return inv_register_data_cb(inv_generate_eMPL_outputs,
1a0098e4:	2207      	movs	r2, #7
1a0098e6:	f44f 7161 	mov.w	r1, #900	; 0x384
1a0098ea:	4803      	ldr	r0, [pc, #12]	; (1a0098f8 <inv_start_eMPL_outputs+0x18>)
1a0098ec:	f7fd fe30 	bl	1a007550 <inv_register_data_cb>
1a0098f0:	4603      	mov	r3, r0
        INV_PRIORITY_HAL_OUTPUTS, INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
}
1a0098f2:	4618      	mov	r0, r3
1a0098f4:	bd80      	pop	{r7, pc}
1a0098f6:	bf00      	nop
1a0098f8:	1a009779 	.word	0x1a009779

1a0098fc <inv_init_eMPL_outputs>:
{
    return inv_unregister_data_cb(inv_generate_eMPL_outputs);
}

static inv_error_t inv_init_eMPL_outputs(void)
{
1a0098fc:	b580      	push	{r7, lr}
1a0098fe:	af00      	add	r7, sp, #0
    memset(&eMPL_out, 0, sizeof(eMPL_out));
1a009900:	2228      	movs	r2, #40	; 0x28
1a009902:	2100      	movs	r1, #0
1a009904:	4802      	ldr	r0, [pc, #8]	; (1a009910 <inv_init_eMPL_outputs+0x14>)
1a009906:	f00b fa6b 	bl	1a014de0 <memset>
    return INV_SUCCESS;
1a00990a:	2300      	movs	r3, #0
}
1a00990c:	4618      	mov	r0, r3
1a00990e:	bd80      	pop	{r7, pc}
1a009910:	10086ba4 	.word	0x10086ba4

1a009914 <inv_enable_eMPL_outputs>:

/**
 *  @brief  Turns on creation and storage of HAL type results.
 */
inv_error_t inv_enable_eMPL_outputs(void)
{
1a009914:	b580      	push	{r7, lr}
1a009916:	b082      	sub	sp, #8
1a009918:	af00      	add	r7, sp, #0
    inv_error_t result;
    result = inv_init_eMPL_outputs();
1a00991a:	f7ff ffef 	bl	1a0098fc <inv_init_eMPL_outputs>
1a00991e:	6078      	str	r0, [r7, #4]
    if (result)
1a009920:	687b      	ldr	r3, [r7, #4]
1a009922:	2b00      	cmp	r3, #0
1a009924:	d001      	beq.n	1a00992a <inv_enable_eMPL_outputs+0x16>
        return result;
1a009926:	687b      	ldr	r3, [r7, #4]
1a009928:	e003      	b.n	1a009932 <inv_enable_eMPL_outputs+0x1e>
    return inv_register_mpl_start_notification(inv_start_eMPL_outputs);
1a00992a:	4804      	ldr	r0, [pc, #16]	; (1a00993c <inv_enable_eMPL_outputs+0x28>)
1a00992c:	f7ff fbe4 	bl	1a0090f8 <inv_register_mpl_start_notification>
1a009930:	4603      	mov	r3, r0
}
1a009932:	4618      	mov	r0, r3
1a009934:	3708      	adds	r7, #8
1a009936:	46bd      	mov	sp, r7
1a009938:	bd80      	pop	{r7, pc}
1a00993a:	bf00      	nop
1a00993c:	1a0098e1 	.word	0x1a0098e1

1a009940 <reg_int_cb>:
#define get_ms      getTimerMs
#define log_i     xprintf
#define log_e     xprintf
extern int i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t length, uint8_t const *data);
extern int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t length, uint8_t *data);
static inline int reg_int_cb(struct int_param_s *int_param) {
1a009940:	b480      	push	{r7}
1a009942:	b083      	sub	sp, #12
1a009944:	af00      	add	r7, sp, #0
1a009946:	6078      	str	r0, [r7, #4]
	return 0; //Not using interrupts
1a009948:	2300      	movs	r3, #0
}
1a00994a:	4618      	mov	r0, r3
1a00994c:	370c      	adds	r7, #12
1a00994e:	46bd      	mov	sp, r7
1a009950:	f85d 7b04 	ldr.w	r7, [sp], #4
1a009954:	4770      	bx	lr
1a009956:	bf00      	nop

1a009958 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
1a009958:	b580      	push	{r7, lr}
1a00995a:	b084      	sub	sp, #16
1a00995c:	af00      	add	r7, sp, #0
1a00995e:	4603      	mov	r3, r0
1a009960:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
1a009962:	4b29      	ldr	r3, [pc, #164]	; (1a009a08 <set_int_enable+0xb0>)
1a009964:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a009968:	2b00      	cmp	r3, #0
1a00996a:	d01c      	beq.n	1a0099a6 <set_int_enable+0x4e>
        if (enable)
1a00996c:	79fb      	ldrb	r3, [r7, #7]
1a00996e:	2b00      	cmp	r3, #0
1a009970:	d002      	beq.n	1a009978 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
1a009972:	2302      	movs	r3, #2
1a009974:	73fb      	strb	r3, [r7, #15]
1a009976:	e001      	b.n	1a00997c <set_int_enable+0x24>
        else
            tmp = 0x00;
1a009978:	2300      	movs	r3, #0
1a00997a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
1a00997c:	4b22      	ldr	r3, [pc, #136]	; (1a009a08 <set_int_enable+0xb0>)
1a00997e:	685b      	ldr	r3, [r3, #4]
1a009980:	7818      	ldrb	r0, [r3, #0]
1a009982:	4b21      	ldr	r3, [pc, #132]	; (1a009a08 <set_int_enable+0xb0>)
1a009984:	681b      	ldr	r3, [r3, #0]
1a009986:	7c59      	ldrb	r1, [r3, #17]
1a009988:	f107 030f 	add.w	r3, r7, #15
1a00998c:	2201      	movs	r2, #1
1a00998e:	f7f9 fa9f 	bl	1a002ed0 <i2c_write>
1a009992:	4603      	mov	r3, r0
1a009994:	2b00      	cmp	r3, #0
1a009996:	d002      	beq.n	1a00999e <set_int_enable+0x46>
            return -1;
1a009998:	f04f 33ff 	mov.w	r3, #4294967295
1a00999c:	e030      	b.n	1a009a00 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
1a00999e:	7bfa      	ldrb	r2, [r7, #15]
1a0099a0:	4b19      	ldr	r3, [pc, #100]	; (1a009a08 <set_int_enable+0xb0>)
1a0099a2:	745a      	strb	r2, [r3, #17]
1a0099a4:	e02b      	b.n	1a0099fe <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
1a0099a6:	4b18      	ldr	r3, [pc, #96]	; (1a009a08 <set_int_enable+0xb0>)
1a0099a8:	7a9b      	ldrb	r3, [r3, #10]
1a0099aa:	2b00      	cmp	r3, #0
1a0099ac:	d102      	bne.n	1a0099b4 <set_int_enable+0x5c>
            return -1;
1a0099ae:	f04f 33ff 	mov.w	r3, #4294967295
1a0099b2:	e025      	b.n	1a009a00 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
1a0099b4:	79fb      	ldrb	r3, [r7, #7]
1a0099b6:	2b00      	cmp	r3, #0
1a0099b8:	d005      	beq.n	1a0099c6 <set_int_enable+0x6e>
1a0099ba:	4b13      	ldr	r3, [pc, #76]	; (1a009a08 <set_int_enable+0xb0>)
1a0099bc:	7c5b      	ldrb	r3, [r3, #17]
1a0099be:	2b00      	cmp	r3, #0
1a0099c0:	d001      	beq.n	1a0099c6 <set_int_enable+0x6e>
            return 0;
1a0099c2:	2300      	movs	r3, #0
1a0099c4:	e01c      	b.n	1a009a00 <set_int_enable+0xa8>
        if (enable)
1a0099c6:	79fb      	ldrb	r3, [r7, #7]
1a0099c8:	2b00      	cmp	r3, #0
1a0099ca:	d002      	beq.n	1a0099d2 <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
1a0099cc:	2301      	movs	r3, #1
1a0099ce:	73fb      	strb	r3, [r7, #15]
1a0099d0:	e001      	b.n	1a0099d6 <set_int_enable+0x7e>
        else
            tmp = 0x00;
1a0099d2:	2300      	movs	r3, #0
1a0099d4:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
1a0099d6:	4b0c      	ldr	r3, [pc, #48]	; (1a009a08 <set_int_enable+0xb0>)
1a0099d8:	685b      	ldr	r3, [r3, #4]
1a0099da:	7818      	ldrb	r0, [r3, #0]
1a0099dc:	4b0a      	ldr	r3, [pc, #40]	; (1a009a08 <set_int_enable+0xb0>)
1a0099de:	681b      	ldr	r3, [r3, #0]
1a0099e0:	7c59      	ldrb	r1, [r3, #17]
1a0099e2:	f107 030f 	add.w	r3, r7, #15
1a0099e6:	2201      	movs	r2, #1
1a0099e8:	f7f9 fa72 	bl	1a002ed0 <i2c_write>
1a0099ec:	4603      	mov	r3, r0
1a0099ee:	2b00      	cmp	r3, #0
1a0099f0:	d002      	beq.n	1a0099f8 <set_int_enable+0xa0>
            return -1;
1a0099f2:	f04f 33ff 	mov.w	r3, #4294967295
1a0099f6:	e003      	b.n	1a009a00 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
1a0099f8:	7bfa      	ldrb	r2, [r7, #15]
1a0099fa:	4b03      	ldr	r3, [pc, #12]	; (1a009a08 <set_int_enable+0xb0>)
1a0099fc:	745a      	strb	r2, [r3, #17]
    }
    return 0;
1a0099fe:	2300      	movs	r3, #0
}
1a009a00:	4618      	mov	r0, r3
1a009a02:	3710      	adds	r7, #16
1a009a04:	46bd      	mov	sp, r7
1a009a06:	bd80      	pop	{r7, pc}
1a009a08:	10086034 	.word	0x10086034

1a009a0c <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
1a009a0c:	b580      	push	{r7, lr}
1a009a0e:	b084      	sub	sp, #16
1a009a10:	af00      	add	r7, sp, #0
1a009a12:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
1a009a14:	2380      	movs	r3, #128	; 0x80
1a009a16:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
1a009a18:	4b55      	ldr	r3, [pc, #340]	; (1a009b70 <mpu_init+0x164>)
1a009a1a:	685b      	ldr	r3, [r3, #4]
1a009a1c:	7818      	ldrb	r0, [r3, #0]
1a009a1e:	4b54      	ldr	r3, [pc, #336]	; (1a009b70 <mpu_init+0x164>)
1a009a20:	681b      	ldr	r3, [r3, #0]
1a009a22:	7d59      	ldrb	r1, [r3, #21]
1a009a24:	f107 0308 	add.w	r3, r7, #8
1a009a28:	2201      	movs	r2, #1
1a009a2a:	f7f9 fa51 	bl	1a002ed0 <i2c_write>
1a009a2e:	4603      	mov	r3, r0
1a009a30:	2b00      	cmp	r3, #0
1a009a32:	d002      	beq.n	1a009a3a <mpu_init+0x2e>
        return -1;
1a009a34:	f04f 33ff 	mov.w	r3, #4294967295
1a009a38:	e096      	b.n	1a009b68 <mpu_init+0x15c>
    delay_ms(100);
1a009a3a:	2064      	movs	r0, #100	; 0x64
1a009a3c:	f7fc fe60 	bl	1a006700 <timerDelayMs>

    /* Wake up chip. */
    data[0] = 0x00;
1a009a40:	2300      	movs	r3, #0
1a009a42:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
1a009a44:	4b4a      	ldr	r3, [pc, #296]	; (1a009b70 <mpu_init+0x164>)
1a009a46:	685b      	ldr	r3, [r3, #4]
1a009a48:	7818      	ldrb	r0, [r3, #0]
1a009a4a:	4b49      	ldr	r3, [pc, #292]	; (1a009b70 <mpu_init+0x164>)
1a009a4c:	681b      	ldr	r3, [r3, #0]
1a009a4e:	7d59      	ldrb	r1, [r3, #21]
1a009a50:	f107 0308 	add.w	r3, r7, #8
1a009a54:	2201      	movs	r2, #1
1a009a56:	f7f9 fa3b 	bl	1a002ed0 <i2c_write>
1a009a5a:	4603      	mov	r3, r0
1a009a5c:	2b00      	cmp	r3, #0
1a009a5e:	d002      	beq.n	1a009a66 <mpu_init+0x5a>
        return -1;
1a009a60:	f04f 33ff 	mov.w	r3, #4294967295
1a009a64:	e080      	b.n	1a009b68 <mpu_init+0x15c>

   st.chip_cfg.accel_half = 0;
1a009a66:	4b42      	ldr	r3, [pc, #264]	; (1a009b70 <mpu_init+0x164>)
1a009a68:	2200      	movs	r2, #0
1a009a6a:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
1a009a6c:	4b40      	ldr	r3, [pc, #256]	; (1a009b70 <mpu_init+0x164>)
1a009a6e:	22ff      	movs	r2, #255	; 0xff
1a009a70:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
1a009a72:	4b3f      	ldr	r3, [pc, #252]	; (1a009b70 <mpu_init+0x164>)
1a009a74:	22ff      	movs	r2, #255	; 0xff
1a009a76:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
1a009a78:	4b3d      	ldr	r3, [pc, #244]	; (1a009b70 <mpu_init+0x164>)
1a009a7a:	22ff      	movs	r2, #255	; 0xff
1a009a7c:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
1a009a7e:	4b3c      	ldr	r3, [pc, #240]	; (1a009b70 <mpu_init+0x164>)
1a009a80:	22ff      	movs	r2, #255	; 0xff
1a009a82:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
1a009a84:	4b3a      	ldr	r3, [pc, #232]	; (1a009b70 <mpu_init+0x164>)
1a009a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a009a8a:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
1a009a8c:	4b38      	ldr	r3, [pc, #224]	; (1a009b70 <mpu_init+0x164>)
1a009a8e:	22ff      	movs	r2, #255	; 0xff
1a009a90:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
1a009a92:	4b37      	ldr	r3, [pc, #220]	; (1a009b70 <mpu_init+0x164>)
1a009a94:	22ff      	movs	r2, #255	; 0xff
1a009a96:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
1a009a98:	4b35      	ldr	r3, [pc, #212]	; (1a009b70 <mpu_init+0x164>)
1a009a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a009a9e:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
1a009aa0:	4b33      	ldr	r3, [pc, #204]	; (1a009b70 <mpu_init+0x164>)
1a009aa2:	2201      	movs	r2, #1
1a009aa4:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
1a009aa6:	4b32      	ldr	r3, [pc, #200]	; (1a009b70 <mpu_init+0x164>)
1a009aa8:	2201      	movs	r2, #1
1a009aaa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
1a009aae:	4b30      	ldr	r3, [pc, #192]	; (1a009b70 <mpu_init+0x164>)
1a009ab0:	2200      	movs	r2, #0
1a009ab2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
1a009ab6:	4b2e      	ldr	r3, [pc, #184]	; (1a009b70 <mpu_init+0x164>)
1a009ab8:	2200      	movs	r2, #0
1a009aba:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
1a009abc:	4b2c      	ldr	r3, [pc, #176]	; (1a009b70 <mpu_init+0x164>)
1a009abe:	2200      	movs	r2, #0
1a009ac0:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
1a009ac2:	220c      	movs	r2, #12
1a009ac4:	2100      	movs	r1, #0
1a009ac6:	482b      	ldr	r0, [pc, #172]	; (1a009b74 <mpu_init+0x168>)
1a009ac8:	f00b f98a 	bl	1a014de0 <memset>
    st.chip_cfg.dmp_on = 0;
1a009acc:	4b28      	ldr	r3, [pc, #160]	; (1a009b70 <mpu_init+0x164>)
1a009ace:	2200      	movs	r2, #0
1a009ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
1a009ad4:	4b26      	ldr	r3, [pc, #152]	; (1a009b70 <mpu_init+0x164>)
1a009ad6:	2200      	movs	r2, #0
1a009ad8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
1a009adc:	4b24      	ldr	r3, [pc, #144]	; (1a009b70 <mpu_init+0x164>)
1a009ade:	2200      	movs	r2, #0
1a009ae0:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
1a009ae2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
1a009ae6:	f000 fa57 	bl	1a009f98 <mpu_set_gyro_fsr>
1a009aea:	4603      	mov	r3, r0
1a009aec:	2b00      	cmp	r3, #0
1a009aee:	d002      	beq.n	1a009af6 <mpu_init+0xea>
        return -1;
1a009af0:	f04f 33ff 	mov.w	r3, #4294967295
1a009af4:	e038      	b.n	1a009b68 <mpu_init+0x15c>
    if (mpu_set_accel_fsr(2))
1a009af6:	2002      	movs	r0, #2
1a009af8:	f000 fada 	bl	1a00a0b0 <mpu_set_accel_fsr>
1a009afc:	4603      	mov	r3, r0
1a009afe:	2b00      	cmp	r3, #0
1a009b00:	d002      	beq.n	1a009b08 <mpu_init+0xfc>
        return -1;
1a009b02:	f04f 33ff 	mov.w	r3, #4294967295
1a009b06:	e02f      	b.n	1a009b68 <mpu_init+0x15c>
    if (mpu_set_lpf(42))
1a009b08:	202a      	movs	r0, #42	; 0x2a
1a009b0a:	f000 fb39 	bl	1a00a180 <mpu_set_lpf>
1a009b0e:	4603      	mov	r3, r0
1a009b10:	2b00      	cmp	r3, #0
1a009b12:	d002      	beq.n	1a009b1a <mpu_init+0x10e>
        return -1;
1a009b14:	f04f 33ff 	mov.w	r3, #4294967295
1a009b18:	e026      	b.n	1a009b68 <mpu_init+0x15c>
    if (mpu_set_sample_rate(50))
1a009b1a:	2032      	movs	r0, #50	; 0x32
1a009b1c:	f000 fb98 	bl	1a00a250 <mpu_set_sample_rate>
1a009b20:	4603      	mov	r3, r0
1a009b22:	2b00      	cmp	r3, #0
1a009b24:	d002      	beq.n	1a009b2c <mpu_init+0x120>
        return -1;
1a009b26:	f04f 33ff 	mov.w	r3, #4294967295
1a009b2a:	e01d      	b.n	1a009b68 <mpu_init+0x15c>
    if (mpu_configure_fifo(0))
1a009b2c:	2000      	movs	r0, #0
1a009b2e:	f000 fc3d 	bl	1a00a3ac <mpu_configure_fifo>
1a009b32:	4603      	mov	r3, r0
1a009b34:	2b00      	cmp	r3, #0
1a009b36:	d002      	beq.n	1a009b3e <mpu_init+0x132>
        return -1;
1a009b38:	f04f 33ff 	mov.w	r3, #4294967295
1a009b3c:	e014      	b.n	1a009b68 <mpu_init+0x15c>

#ifndef EMPL_TARGET_STM32L    
    if (int_param)
1a009b3e:	687b      	ldr	r3, [r7, #4]
1a009b40:	2b00      	cmp	r3, #0
1a009b42:	d002      	beq.n	1a009b4a <mpu_init+0x13e>
        reg_int_cb(int_param);
1a009b44:	6878      	ldr	r0, [r7, #4]
1a009b46:	f7ff fefb 	bl	1a009940 <reg_int_cb>
#endif

#ifdef AK89xx_SECONDARY
    setup_compass();
1a009b4a:	f001 f86f 	bl	1a00ac2c <setup_compass>
    if (mpu_set_compass_sample_rate(10))
1a009b4e:	200a      	movs	r0, #10
1a009b50:	f000 fbec 	bl	1a00a32c <mpu_set_compass_sample_rate>
1a009b54:	4603      	mov	r3, r0
1a009b56:	2b00      	cmp	r3, #0
1a009b58:	d002      	beq.n	1a009b60 <mpu_init+0x154>
        return -1;
1a009b5a:	f04f 33ff 	mov.w	r3, #4294967295
1a009b5e:	e003      	b.n	1a009b68 <mpu_init+0x15c>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
1a009b60:	2000      	movs	r0, #0
1a009b62:	f000 fc75 	bl	1a00a450 <mpu_set_sensors>
    return 0;
1a009b66:	2300      	movs	r3, #0
}
1a009b68:	4618      	mov	r0, r3
1a009b6a:	3710      	adds	r7, #16
1a009b6c:	46bd      	mov	sp, r7
1a009b6e:	bd80      	pop	{r7, pc}
1a009b70:	10086034 	.word	0x10086034
1a009b74:	1008604a 	.word	0x1008604a

1a009b78 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
1a009b78:	b580      	push	{r7, lr}
1a009b7a:	b084      	sub	sp, #16
1a009b7c:	af00      	add	r7, sp, #0
1a009b7e:	4603      	mov	r3, r0
1a009b80:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    if (rate > 40)
1a009b82:	88fb      	ldrh	r3, [r7, #6]
1a009b84:	2b28      	cmp	r3, #40	; 0x28
1a009b86:	d902      	bls.n	1a009b8e <mpu_lp_accel_mode+0x16>
        return -1;
1a009b88:	f04f 33ff 	mov.w	r3, #4294967295
1a009b8c:	e06a      	b.n	1a009c64 <mpu_lp_accel_mode+0xec>

    if (!rate) {
1a009b8e:	88fb      	ldrh	r3, [r7, #6]
1a009b90:	2b00      	cmp	r3, #0
1a009b92:	d11c      	bne.n	1a009bce <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
1a009b94:	2000      	movs	r0, #0
1a009b96:	f000 fe8f 	bl	1a00a8b8 <mpu_set_int_latched>
        tmp[0] = 0;
1a009b9a:	2300      	movs	r3, #0
1a009b9c:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
1a009b9e:	2307      	movs	r3, #7
1a009ba0:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
1a009ba2:	4b32      	ldr	r3, [pc, #200]	; (1a009c6c <mpu_lp_accel_mode+0xf4>)
1a009ba4:	685b      	ldr	r3, [r3, #4]
1a009ba6:	7818      	ldrb	r0, [r3, #0]
1a009ba8:	4b30      	ldr	r3, [pc, #192]	; (1a009c6c <mpu_lp_accel_mode+0xf4>)
1a009baa:	681b      	ldr	r3, [r3, #0]
1a009bac:	7d59      	ldrb	r1, [r3, #21]
1a009bae:	f107 030c 	add.w	r3, r7, #12
1a009bb2:	2202      	movs	r2, #2
1a009bb4:	f7f9 f98c 	bl	1a002ed0 <i2c_write>
1a009bb8:	4603      	mov	r3, r0
1a009bba:	2b00      	cmp	r3, #0
1a009bbc:	d002      	beq.n	1a009bc4 <mpu_lp_accel_mode+0x4c>
            return -1;
1a009bbe:	f04f 33ff 	mov.w	r3, #4294967295
1a009bc2:	e04f      	b.n	1a009c64 <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
1a009bc4:	4b29      	ldr	r3, [pc, #164]	; (1a009c6c <mpu_lp_accel_mode+0xf4>)
1a009bc6:	2200      	movs	r2, #0
1a009bc8:	751a      	strb	r2, [r3, #20]
        return 0;
1a009bca:	2300      	movs	r3, #0
1a009bcc:	e04a      	b.n	1a009c64 <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
1a009bce:	2001      	movs	r0, #1
1a009bd0:	f000 fe72 	bl	1a00a8b8 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
1a009bd4:	2320      	movs	r3, #32
1a009bd6:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
1a009bd8:	88fb      	ldrh	r3, [r7, #6]
1a009bda:	2b01      	cmp	r3, #1
1a009bdc:	d105      	bne.n	1a009bea <mpu_lp_accel_mode+0x72>
        tmp[1] = INV_LPA_1_25HZ;
1a009bde:	2300      	movs	r3, #0
1a009be0:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
1a009be2:	2005      	movs	r0, #5
1a009be4:	f000 facc 	bl	1a00a180 <mpu_set_lpf>
1a009be8:	e016      	b.n	1a009c18 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 5) {
1a009bea:	88fb      	ldrh	r3, [r7, #6]
1a009bec:	2b05      	cmp	r3, #5
1a009bee:	d805      	bhi.n	1a009bfc <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_5HZ;
1a009bf0:	2301      	movs	r3, #1
1a009bf2:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
1a009bf4:	2005      	movs	r0, #5
1a009bf6:	f000 fac3 	bl	1a00a180 <mpu_set_lpf>
1a009bfa:	e00d      	b.n	1a009c18 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 20) {
1a009bfc:	88fb      	ldrh	r3, [r7, #6]
1a009bfe:	2b14      	cmp	r3, #20
1a009c00:	d805      	bhi.n	1a009c0e <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_20HZ;
1a009c02:	2302      	movs	r3, #2
1a009c04:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
1a009c06:	200a      	movs	r0, #10
1a009c08:	f000 faba 	bl	1a00a180 <mpu_set_lpf>
1a009c0c:	e004      	b.n	1a009c18 <mpu_lp_accel_mode+0xa0>
    } else {
        tmp[1] = INV_LPA_40HZ;
1a009c0e:	2303      	movs	r3, #3
1a009c10:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
1a009c12:	2014      	movs	r0, #20
1a009c14:	f000 fab4 	bl	1a00a180 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
1a009c18:	7b7b      	ldrb	r3, [r7, #13]
1a009c1a:	019b      	lsls	r3, r3, #6
1a009c1c:	b2db      	uxtb	r3, r3
1a009c1e:	f043 0307 	orr.w	r3, r3, #7
1a009c22:	b2db      	uxtb	r3, r3
1a009c24:	b2db      	uxtb	r3, r3
1a009c26:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
1a009c28:	4b10      	ldr	r3, [pc, #64]	; (1a009c6c <mpu_lp_accel_mode+0xf4>)
1a009c2a:	685b      	ldr	r3, [r3, #4]
1a009c2c:	7818      	ldrb	r0, [r3, #0]
1a009c2e:	4b0f      	ldr	r3, [pc, #60]	; (1a009c6c <mpu_lp_accel_mode+0xf4>)
1a009c30:	681b      	ldr	r3, [r3, #0]
1a009c32:	7d59      	ldrb	r1, [r3, #21]
1a009c34:	f107 030c 	add.w	r3, r7, #12
1a009c38:	2202      	movs	r2, #2
1a009c3a:	f7f9 f949 	bl	1a002ed0 <i2c_write>
1a009c3e:	4603      	mov	r3, r0
1a009c40:	2b00      	cmp	r3, #0
1a009c42:	d002      	beq.n	1a009c4a <mpu_lp_accel_mode+0xd2>
        return -1;
1a009c44:	f04f 33ff 	mov.w	r3, #4294967295
1a009c48:	e00c      	b.n	1a009c64 <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
1a009c4a:	4b08      	ldr	r3, [pc, #32]	; (1a009c6c <mpu_lp_accel_mode+0xf4>)
1a009c4c:	2208      	movs	r2, #8
1a009c4e:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
1a009c50:	4b06      	ldr	r3, [pc, #24]	; (1a009c6c <mpu_lp_accel_mode+0xf4>)
1a009c52:	2200      	movs	r2, #0
1a009c54:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
1a009c56:	4b05      	ldr	r3, [pc, #20]	; (1a009c6c <mpu_lp_accel_mode+0xf4>)
1a009c58:	2201      	movs	r2, #1
1a009c5a:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
1a009c5c:	2000      	movs	r0, #0
1a009c5e:	f000 fba5 	bl	1a00a3ac <mpu_configure_fifo>

    return 0;
1a009c62:	2300      	movs	r3, #0
}
1a009c64:	4618      	mov	r0, r3
1a009c66:	3710      	adds	r7, #16
1a009c68:	46bd      	mov	sp, r7
1a009c6a:	bd80      	pop	{r7, pc}
1a009c6c:	10086034 	.word	0x10086034

1a009c70 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
1a009c70:	b580      	push	{r7, lr}
1a009c72:	b084      	sub	sp, #16
1a009c74:	af00      	add	r7, sp, #0
1a009c76:	6078      	str	r0, [r7, #4]
1a009c78:	6039      	str	r1, [r7, #0]
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
1a009c7a:	4b28      	ldr	r3, [pc, #160]	; (1a009d1c <mpu_get_temperature+0xac>)
1a009c7c:	7a9b      	ldrb	r3, [r3, #10]
1a009c7e:	2b00      	cmp	r3, #0
1a009c80:	d102      	bne.n	1a009c88 <mpu_get_temperature+0x18>
        return -1;
1a009c82:	f04f 33ff 	mov.w	r3, #4294967295
1a009c86:	e045      	b.n	1a009d14 <mpu_get_temperature+0xa4>

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
1a009c88:	4b24      	ldr	r3, [pc, #144]	; (1a009d1c <mpu_get_temperature+0xac>)
1a009c8a:	685b      	ldr	r3, [r3, #4]
1a009c8c:	7818      	ldrb	r0, [r3, #0]
1a009c8e:	4b23      	ldr	r3, [pc, #140]	; (1a009d1c <mpu_get_temperature+0xac>)
1a009c90:	681b      	ldr	r3, [r3, #0]
1a009c92:	7c19      	ldrb	r1, [r3, #16]
1a009c94:	f107 030c 	add.w	r3, r7, #12
1a009c98:	2202      	movs	r2, #2
1a009c9a:	f7f9 f947 	bl	1a002f2c <i2c_read>
1a009c9e:	4603      	mov	r3, r0
1a009ca0:	2b00      	cmp	r3, #0
1a009ca2:	d002      	beq.n	1a009caa <mpu_get_temperature+0x3a>
        return -1;
1a009ca4:	f04f 33ff 	mov.w	r3, #4294967295
1a009ca8:	e034      	b.n	1a009d14 <mpu_get_temperature+0xa4>
    raw = (tmp[0] << 8) | tmp[1];
1a009caa:	7b3b      	ldrb	r3, [r7, #12]
1a009cac:	021b      	lsls	r3, r3, #8
1a009cae:	b29a      	uxth	r2, r3
1a009cb0:	7b7b      	ldrb	r3, [r7, #13]
1a009cb2:	b29b      	uxth	r3, r3
1a009cb4:	4313      	orrs	r3, r2
1a009cb6:	81fb      	strh	r3, [r7, #14]
    if (timestamp)
1a009cb8:	683b      	ldr	r3, [r7, #0]
1a009cba:	2b00      	cmp	r3, #0
1a009cbc:	d002      	beq.n	1a009cc4 <mpu_get_temperature+0x54>
        get_ms(timestamp);
1a009cbe:	6838      	ldr	r0, [r7, #0]
1a009cc0:	f7fc fd5c 	bl	1a00677c <getTimerMs>

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
1a009cc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
1a009cc8:	ee07 3a90 	vmov	s15, r3
1a009ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
1a009cd0:	4b12      	ldr	r3, [pc, #72]	; (1a009d1c <mpu_get_temperature+0xac>)
1a009cd2:	685b      	ldr	r3, [r3, #4]
1a009cd4:	891b      	ldrh	r3, [r3, #8]
1a009cd6:	b21b      	sxth	r3, r3
1a009cd8:	ee07 3a90 	vmov	s15, r3
1a009cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a009ce0:	ee77 6a67 	vsub.f32	s13, s14, s15
1a009ce4:	4b0d      	ldr	r3, [pc, #52]	; (1a009d1c <mpu_get_temperature+0xac>)
1a009ce6:	685b      	ldr	r3, [r3, #4]
1a009ce8:	88db      	ldrh	r3, [r3, #6]
1a009cea:	ee07 3a90 	vmov	s15, r3
1a009cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
1a009cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
1a009cf6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 1a009d20 <mpu_get_temperature+0xb0>
1a009cfa:	ee77 7a87 	vadd.f32	s15, s15, s14
1a009cfe:	ed9f 7a09 	vldr	s14, [pc, #36]	; 1a009d24 <mpu_get_temperature+0xb4>
1a009d02:	ee67 7a87 	vmul.f32	s15, s15, s14
1a009d06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a009d0a:	ee17 2a90 	vmov	r2, s15
1a009d0e:	687b      	ldr	r3, [r7, #4]
1a009d10:	601a      	str	r2, [r3, #0]
    return 0;
1a009d12:	2300      	movs	r3, #0
}
1a009d14:	4618      	mov	r0, r3
1a009d16:	3710      	adds	r7, #16
1a009d18:	46bd      	mov	sp, r7
1a009d1a:	bd80      	pop	{r7, pc}
1a009d1c:	10086034 	.word	0x10086034
1a009d20:	420c0000 	.word	0x420c0000
1a009d24:	47800000 	.word	0x47800000

1a009d28 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
1a009d28:	b580      	push	{r7, lr}
1a009d2a:	b082      	sub	sp, #8
1a009d2c:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1a009d2e:	4b7e      	ldr	r3, [pc, #504]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009d30:	7a9b      	ldrb	r3, [r3, #10]
1a009d32:	2b00      	cmp	r3, #0
1a009d34:	d102      	bne.n	1a009d3c <mpu_reset_fifo+0x14>
        return -1;
1a009d36:	f04f 33ff 	mov.w	r3, #4294967295
1a009d3a:	e0f1      	b.n	1a009f20 <mpu_reset_fifo+0x1f8>

    data = 0;
1a009d3c:	2300      	movs	r3, #0
1a009d3e:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1a009d40:	4b79      	ldr	r3, [pc, #484]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009d42:	685b      	ldr	r3, [r3, #4]
1a009d44:	7818      	ldrb	r0, [r3, #0]
1a009d46:	4b78      	ldr	r3, [pc, #480]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009d48:	681b      	ldr	r3, [r3, #0]
1a009d4a:	7c59      	ldrb	r1, [r3, #17]
1a009d4c:	1dfb      	adds	r3, r7, #7
1a009d4e:	2201      	movs	r2, #1
1a009d50:	f7f9 f8be 	bl	1a002ed0 <i2c_write>
1a009d54:	4603      	mov	r3, r0
1a009d56:	2b00      	cmp	r3, #0
1a009d58:	d002      	beq.n	1a009d60 <mpu_reset_fifo+0x38>
        return -1;
1a009d5a:	f04f 33ff 	mov.w	r3, #4294967295
1a009d5e:	e0df      	b.n	1a009f20 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
1a009d60:	4b71      	ldr	r3, [pc, #452]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009d62:	685b      	ldr	r3, [r3, #4]
1a009d64:	7818      	ldrb	r0, [r3, #0]
1a009d66:	4b70      	ldr	r3, [pc, #448]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009d68:	681b      	ldr	r3, [r3, #0]
1a009d6a:	7959      	ldrb	r1, [r3, #5]
1a009d6c:	1dfb      	adds	r3, r7, #7
1a009d6e:	2201      	movs	r2, #1
1a009d70:	f7f9 f8ae 	bl	1a002ed0 <i2c_write>
1a009d74:	4603      	mov	r3, r0
1a009d76:	2b00      	cmp	r3, #0
1a009d78:	d002      	beq.n	1a009d80 <mpu_reset_fifo+0x58>
        return -1;
1a009d7a:	f04f 33ff 	mov.w	r3, #4294967295
1a009d7e:	e0cf      	b.n	1a009f20 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1a009d80:	4b69      	ldr	r3, [pc, #420]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009d82:	685b      	ldr	r3, [r3, #4]
1a009d84:	7818      	ldrb	r0, [r3, #0]
1a009d86:	4b68      	ldr	r3, [pc, #416]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009d88:	681b      	ldr	r3, [r3, #0]
1a009d8a:	7919      	ldrb	r1, [r3, #4]
1a009d8c:	1dfb      	adds	r3, r7, #7
1a009d8e:	2201      	movs	r2, #1
1a009d90:	f7f9 f89e 	bl	1a002ed0 <i2c_write>
1a009d94:	4603      	mov	r3, r0
1a009d96:	2b00      	cmp	r3, #0
1a009d98:	d002      	beq.n	1a009da0 <mpu_reset_fifo+0x78>
        return -1;
1a009d9a:	f04f 33ff 	mov.w	r3, #4294967295
1a009d9e:	e0bf      	b.n	1a009f20 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
1a009da0:	4b61      	ldr	r3, [pc, #388]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009da2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a009da6:	2b00      	cmp	r3, #0
1a009da8:	d05c      	beq.n	1a009e64 <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
1a009daa:	230c      	movs	r3, #12
1a009dac:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1a009dae:	4b5e      	ldr	r3, [pc, #376]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009db0:	685b      	ldr	r3, [r3, #4]
1a009db2:	7818      	ldrb	r0, [r3, #0]
1a009db4:	4b5c      	ldr	r3, [pc, #368]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009db6:	681b      	ldr	r3, [r3, #0]
1a009db8:	7919      	ldrb	r1, [r3, #4]
1a009dba:	1dfb      	adds	r3, r7, #7
1a009dbc:	2201      	movs	r2, #1
1a009dbe:	f7f9 f887 	bl	1a002ed0 <i2c_write>
1a009dc2:	4603      	mov	r3, r0
1a009dc4:	2b00      	cmp	r3, #0
1a009dc6:	d002      	beq.n	1a009dce <mpu_reset_fifo+0xa6>
            return -1;
1a009dc8:	f04f 33ff 	mov.w	r3, #4294967295
1a009dcc:	e0a8      	b.n	1a009f20 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
1a009dce:	2032      	movs	r0, #50	; 0x32
1a009dd0:	f7fc fc96 	bl	1a006700 <timerDelayMs>
        data = BIT_DMP_EN | BIT_FIFO_EN;
1a009dd4:	23c0      	movs	r3, #192	; 0xc0
1a009dd6:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
1a009dd8:	4b53      	ldr	r3, [pc, #332]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009dda:	7a9b      	ldrb	r3, [r3, #10]
1a009ddc:	f003 0301 	and.w	r3, r3, #1
1a009de0:	2b00      	cmp	r3, #0
1a009de2:	d004      	beq.n	1a009dee <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
1a009de4:	79fb      	ldrb	r3, [r7, #7]
1a009de6:	f043 0320 	orr.w	r3, r3, #32
1a009dea:	b2db      	uxtb	r3, r3
1a009dec:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1a009dee:	4b4e      	ldr	r3, [pc, #312]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009df0:	685b      	ldr	r3, [r3, #4]
1a009df2:	7818      	ldrb	r0, [r3, #0]
1a009df4:	4b4c      	ldr	r3, [pc, #304]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009df6:	681b      	ldr	r3, [r3, #0]
1a009df8:	7919      	ldrb	r1, [r3, #4]
1a009dfa:	1dfb      	adds	r3, r7, #7
1a009dfc:	2201      	movs	r2, #1
1a009dfe:	f7f9 f867 	bl	1a002ed0 <i2c_write>
1a009e02:	4603      	mov	r3, r0
1a009e04:	2b00      	cmp	r3, #0
1a009e06:	d002      	beq.n	1a009e0e <mpu_reset_fifo+0xe6>
            return -1;
1a009e08:	f04f 33ff 	mov.w	r3, #4294967295
1a009e0c:	e088      	b.n	1a009f20 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
1a009e0e:	4b46      	ldr	r3, [pc, #280]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009e10:	7c5b      	ldrb	r3, [r3, #17]
1a009e12:	2b00      	cmp	r3, #0
1a009e14:	d002      	beq.n	1a009e1c <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
1a009e16:	2302      	movs	r3, #2
1a009e18:	71fb      	strb	r3, [r7, #7]
1a009e1a:	e001      	b.n	1a009e20 <mpu_reset_fifo+0xf8>
        else
            data = 0;
1a009e1c:	2300      	movs	r3, #0
1a009e1e:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1a009e20:	4b41      	ldr	r3, [pc, #260]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009e22:	685b      	ldr	r3, [r3, #4]
1a009e24:	7818      	ldrb	r0, [r3, #0]
1a009e26:	4b40      	ldr	r3, [pc, #256]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009e28:	681b      	ldr	r3, [r3, #0]
1a009e2a:	7c59      	ldrb	r1, [r3, #17]
1a009e2c:	1dfb      	adds	r3, r7, #7
1a009e2e:	2201      	movs	r2, #1
1a009e30:	f7f9 f84e 	bl	1a002ed0 <i2c_write>
1a009e34:	4603      	mov	r3, r0
1a009e36:	2b00      	cmp	r3, #0
1a009e38:	d002      	beq.n	1a009e40 <mpu_reset_fifo+0x118>
            return -1;
1a009e3a:	f04f 33ff 	mov.w	r3, #4294967295
1a009e3e:	e06f      	b.n	1a009f20 <mpu_reset_fifo+0x1f8>
        data = 0;
1a009e40:	2300      	movs	r3, #0
1a009e42:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
1a009e44:	4b38      	ldr	r3, [pc, #224]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009e46:	685b      	ldr	r3, [r3, #4]
1a009e48:	7818      	ldrb	r0, [r3, #0]
1a009e4a:	4b37      	ldr	r3, [pc, #220]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009e4c:	681b      	ldr	r3, [r3, #0]
1a009e4e:	7959      	ldrb	r1, [r3, #5]
1a009e50:	1dfb      	adds	r3, r7, #7
1a009e52:	2201      	movs	r2, #1
1a009e54:	f7f9 f83c 	bl	1a002ed0 <i2c_write>
1a009e58:	4603      	mov	r3, r0
1a009e5a:	2b00      	cmp	r3, #0
1a009e5c:	d05f      	beq.n	1a009f1e <mpu_reset_fifo+0x1f6>
            return -1;
1a009e5e:	f04f 33ff 	mov.w	r3, #4294967295
1a009e62:	e05d      	b.n	1a009f20 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
1a009e64:	2304      	movs	r3, #4
1a009e66:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1a009e68:	4b2f      	ldr	r3, [pc, #188]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009e6a:	685b      	ldr	r3, [r3, #4]
1a009e6c:	7818      	ldrb	r0, [r3, #0]
1a009e6e:	4b2e      	ldr	r3, [pc, #184]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009e70:	681b      	ldr	r3, [r3, #0]
1a009e72:	7919      	ldrb	r1, [r3, #4]
1a009e74:	1dfb      	adds	r3, r7, #7
1a009e76:	2201      	movs	r2, #1
1a009e78:	f7f9 f82a 	bl	1a002ed0 <i2c_write>
1a009e7c:	4603      	mov	r3, r0
1a009e7e:	2b00      	cmp	r3, #0
1a009e80:	d002      	beq.n	1a009e88 <mpu_reset_fifo+0x160>
            return -1;
1a009e82:	f04f 33ff 	mov.w	r3, #4294967295
1a009e86:	e04b      	b.n	1a009f20 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1a009e88:	4b27      	ldr	r3, [pc, #156]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009e8a:	7c9b      	ldrb	r3, [r3, #18]
1a009e8c:	2b00      	cmp	r3, #0
1a009e8e:	d105      	bne.n	1a009e9c <mpu_reset_fifo+0x174>
1a009e90:	4b25      	ldr	r3, [pc, #148]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009e92:	7a9b      	ldrb	r3, [r3, #10]
1a009e94:	f003 0301 	and.w	r3, r3, #1
1a009e98:	2b00      	cmp	r3, #0
1a009e9a:	d102      	bne.n	1a009ea2 <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
1a009e9c:	2340      	movs	r3, #64	; 0x40
1a009e9e:	71fb      	strb	r3, [r7, #7]
1a009ea0:	e001      	b.n	1a009ea6 <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
1a009ea2:	2360      	movs	r3, #96	; 0x60
1a009ea4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1a009ea6:	4b20      	ldr	r3, [pc, #128]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009ea8:	685b      	ldr	r3, [r3, #4]
1a009eaa:	7818      	ldrb	r0, [r3, #0]
1a009eac:	4b1e      	ldr	r3, [pc, #120]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009eae:	681b      	ldr	r3, [r3, #0]
1a009eb0:	7919      	ldrb	r1, [r3, #4]
1a009eb2:	1dfb      	adds	r3, r7, #7
1a009eb4:	2201      	movs	r2, #1
1a009eb6:	f7f9 f80b 	bl	1a002ed0 <i2c_write>
1a009eba:	4603      	mov	r3, r0
1a009ebc:	2b00      	cmp	r3, #0
1a009ebe:	d002      	beq.n	1a009ec6 <mpu_reset_fifo+0x19e>
            return -1;
1a009ec0:	f04f 33ff 	mov.w	r3, #4294967295
1a009ec4:	e02c      	b.n	1a009f20 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
1a009ec6:	2032      	movs	r0, #50	; 0x32
1a009ec8:	f7fc fc1a 	bl	1a006700 <timerDelayMs>
        if (st.chip_cfg.int_enable)
1a009ecc:	4b16      	ldr	r3, [pc, #88]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009ece:	7c5b      	ldrb	r3, [r3, #17]
1a009ed0:	2b00      	cmp	r3, #0
1a009ed2:	d002      	beq.n	1a009eda <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
1a009ed4:	2301      	movs	r3, #1
1a009ed6:	71fb      	strb	r3, [r7, #7]
1a009ed8:	e001      	b.n	1a009ede <mpu_reset_fifo+0x1b6>
        else
            data = 0;
1a009eda:	2300      	movs	r3, #0
1a009edc:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1a009ede:	4b12      	ldr	r3, [pc, #72]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009ee0:	685b      	ldr	r3, [r3, #4]
1a009ee2:	7818      	ldrb	r0, [r3, #0]
1a009ee4:	4b10      	ldr	r3, [pc, #64]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009ee6:	681b      	ldr	r3, [r3, #0]
1a009ee8:	7c59      	ldrb	r1, [r3, #17]
1a009eea:	1dfb      	adds	r3, r7, #7
1a009eec:	2201      	movs	r2, #1
1a009eee:	f7f8 ffef 	bl	1a002ed0 <i2c_write>
1a009ef2:	4603      	mov	r3, r0
1a009ef4:	2b00      	cmp	r3, #0
1a009ef6:	d002      	beq.n	1a009efe <mpu_reset_fifo+0x1d6>
            return -1;
1a009ef8:	f04f 33ff 	mov.w	r3, #4294967295
1a009efc:	e010      	b.n	1a009f20 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
1a009efe:	4b0a      	ldr	r3, [pc, #40]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009f00:	685b      	ldr	r3, [r3, #4]
1a009f02:	7818      	ldrb	r0, [r3, #0]
1a009f04:	4b08      	ldr	r3, [pc, #32]	; (1a009f28 <mpu_reset_fifo+0x200>)
1a009f06:	681b      	ldr	r3, [r3, #0]
1a009f08:	7959      	ldrb	r1, [r3, #5]
1a009f0a:	4b08      	ldr	r3, [pc, #32]	; (1a009f2c <mpu_reset_fifo+0x204>)
1a009f0c:	2201      	movs	r2, #1
1a009f0e:	f7f8 ffdf 	bl	1a002ed0 <i2c_write>
1a009f12:	4603      	mov	r3, r0
1a009f14:	2b00      	cmp	r3, #0
1a009f16:	d002      	beq.n	1a009f1e <mpu_reset_fifo+0x1f6>
            return -1;
1a009f18:	f04f 33ff 	mov.w	r3, #4294967295
1a009f1c:	e000      	b.n	1a009f20 <mpu_reset_fifo+0x1f8>
    }
    return 0;
1a009f1e:	2300      	movs	r3, #0
}
1a009f20:	4618      	mov	r0, r3
1a009f22:	3708      	adds	r7, #8
1a009f24:	46bd      	mov	sp, r7
1a009f26:	bd80      	pop	{r7, pc}
1a009f28:	10086034 	.word	0x10086034
1a009f2c:	10086044 	.word	0x10086044

1a009f30 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
1a009f30:	b480      	push	{r7}
1a009f32:	b083      	sub	sp, #12
1a009f34:	af00      	add	r7, sp, #0
1a009f36:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
1a009f38:	4b16      	ldr	r3, [pc, #88]	; (1a009f94 <mpu_get_gyro_fsr+0x64>)
1a009f3a:	7a1b      	ldrb	r3, [r3, #8]
1a009f3c:	2b03      	cmp	r3, #3
1a009f3e:	d81e      	bhi.n	1a009f7e <mpu_get_gyro_fsr+0x4e>
1a009f40:	a201      	add	r2, pc, #4	; (adr r2, 1a009f48 <mpu_get_gyro_fsr+0x18>)
1a009f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a009f46:	bf00      	nop
1a009f48:	1a009f59 	.word	0x1a009f59
1a009f4c:	1a009f61 	.word	0x1a009f61
1a009f50:	1a009f6b 	.word	0x1a009f6b
1a009f54:	1a009f75 	.word	0x1a009f75
    case INV_FSR_250DPS:
        fsr[0] = 250;
1a009f58:	687b      	ldr	r3, [r7, #4]
1a009f5a:	22fa      	movs	r2, #250	; 0xfa
1a009f5c:	801a      	strh	r2, [r3, #0]
        break;
1a009f5e:	e012      	b.n	1a009f86 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
1a009f60:	687b      	ldr	r3, [r7, #4]
1a009f62:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
1a009f66:	801a      	strh	r2, [r3, #0]
        break;
1a009f68:	e00d      	b.n	1a009f86 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
1a009f6a:	687b      	ldr	r3, [r7, #4]
1a009f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a009f70:	801a      	strh	r2, [r3, #0]
        break;
1a009f72:	e008      	b.n	1a009f86 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
1a009f74:	687b      	ldr	r3, [r7, #4]
1a009f76:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
1a009f7a:	801a      	strh	r2, [r3, #0]
        break;
1a009f7c:	e003      	b.n	1a009f86 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
1a009f7e:	687b      	ldr	r3, [r7, #4]
1a009f80:	2200      	movs	r2, #0
1a009f82:	801a      	strh	r2, [r3, #0]
        break;
1a009f84:	bf00      	nop
    }
    return 0;
1a009f86:	2300      	movs	r3, #0
}
1a009f88:	4618      	mov	r0, r3
1a009f8a:	370c      	adds	r7, #12
1a009f8c:	46bd      	mov	sp, r7
1a009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a009f92:	4770      	bx	lr
1a009f94:	10086034 	.word	0x10086034

1a009f98 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
1a009f98:	b580      	push	{r7, lr}
1a009f9a:	b084      	sub	sp, #16
1a009f9c:	af00      	add	r7, sp, #0
1a009f9e:	4603      	mov	r3, r0
1a009fa0:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1a009fa2:	4b25      	ldr	r3, [pc, #148]	; (1a00a038 <mpu_set_gyro_fsr+0xa0>)
1a009fa4:	7a9b      	ldrb	r3, [r3, #10]
1a009fa6:	2b00      	cmp	r3, #0
1a009fa8:	d102      	bne.n	1a009fb0 <mpu_set_gyro_fsr+0x18>
        return -1;
1a009faa:	f04f 33ff 	mov.w	r3, #4294967295
1a009fae:	e03f      	b.n	1a00a030 <mpu_set_gyro_fsr+0x98>

    switch (fsr) {
1a009fb0:	88fb      	ldrh	r3, [r7, #6]
1a009fb2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
1a009fb6:	d00f      	beq.n	1a009fd8 <mpu_set_gyro_fsr+0x40>
1a009fb8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
1a009fbc:	dc02      	bgt.n	1a009fc4 <mpu_set_gyro_fsr+0x2c>
1a009fbe:	2bfa      	cmp	r3, #250	; 0xfa
1a009fc0:	d007      	beq.n	1a009fd2 <mpu_set_gyro_fsr+0x3a>
1a009fc2:	e012      	b.n	1a009fea <mpu_set_gyro_fsr+0x52>
1a009fc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1a009fc8:	d009      	beq.n	1a009fde <mpu_set_gyro_fsr+0x46>
1a009fca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
1a009fce:	d009      	beq.n	1a009fe4 <mpu_set_gyro_fsr+0x4c>
1a009fd0:	e00b      	b.n	1a009fea <mpu_set_gyro_fsr+0x52>
    case 250:
        data = INV_FSR_250DPS << 3;
1a009fd2:	2300      	movs	r3, #0
1a009fd4:	73fb      	strb	r3, [r7, #15]
        break;
1a009fd6:	e00b      	b.n	1a009ff0 <mpu_set_gyro_fsr+0x58>
    case 500:
        data = INV_FSR_500DPS << 3;
1a009fd8:	2308      	movs	r3, #8
1a009fda:	73fb      	strb	r3, [r7, #15]
        break;
1a009fdc:	e008      	b.n	1a009ff0 <mpu_set_gyro_fsr+0x58>
    case 1000:
        data = INV_FSR_1000DPS << 3;
1a009fde:	2310      	movs	r3, #16
1a009fe0:	73fb      	strb	r3, [r7, #15]
        break;
1a009fe2:	e005      	b.n	1a009ff0 <mpu_set_gyro_fsr+0x58>
    case 2000:
        data = INV_FSR_2000DPS << 3;
1a009fe4:	2318      	movs	r3, #24
1a009fe6:	73fb      	strb	r3, [r7, #15]
        break;
1a009fe8:	e002      	b.n	1a009ff0 <mpu_set_gyro_fsr+0x58>
    default:
        return -1;
1a009fea:	f04f 33ff 	mov.w	r3, #4294967295
1a009fee:	e01f      	b.n	1a00a030 <mpu_set_gyro_fsr+0x98>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
1a009ff0:	4b11      	ldr	r3, [pc, #68]	; (1a00a038 <mpu_set_gyro_fsr+0xa0>)
1a009ff2:	7a1a      	ldrb	r2, [r3, #8]
1a009ff4:	7bfb      	ldrb	r3, [r7, #15]
1a009ff6:	08db      	lsrs	r3, r3, #3
1a009ff8:	b2db      	uxtb	r3, r3
1a009ffa:	429a      	cmp	r2, r3
1a009ffc:	d101      	bne.n	1a00a002 <mpu_set_gyro_fsr+0x6a>
        return 0;
1a009ffe:	2300      	movs	r3, #0
1a00a000:	e016      	b.n	1a00a030 <mpu_set_gyro_fsr+0x98>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
1a00a002:	4b0d      	ldr	r3, [pc, #52]	; (1a00a038 <mpu_set_gyro_fsr+0xa0>)
1a00a004:	685b      	ldr	r3, [r3, #4]
1a00a006:	7818      	ldrb	r0, [r3, #0]
1a00a008:	4b0b      	ldr	r3, [pc, #44]	; (1a00a038 <mpu_set_gyro_fsr+0xa0>)
1a00a00a:	681b      	ldr	r3, [r3, #0]
1a00a00c:	7999      	ldrb	r1, [r3, #6]
1a00a00e:	f107 030f 	add.w	r3, r7, #15
1a00a012:	2201      	movs	r2, #1
1a00a014:	f7f8 ff5c 	bl	1a002ed0 <i2c_write>
1a00a018:	4603      	mov	r3, r0
1a00a01a:	2b00      	cmp	r3, #0
1a00a01c:	d002      	beq.n	1a00a024 <mpu_set_gyro_fsr+0x8c>
        return -1;
1a00a01e:	f04f 33ff 	mov.w	r3, #4294967295
1a00a022:	e005      	b.n	1a00a030 <mpu_set_gyro_fsr+0x98>
    st.chip_cfg.gyro_fsr = data >> 3;
1a00a024:	7bfb      	ldrb	r3, [r7, #15]
1a00a026:	08db      	lsrs	r3, r3, #3
1a00a028:	b2da      	uxtb	r2, r3
1a00a02a:	4b03      	ldr	r3, [pc, #12]	; (1a00a038 <mpu_set_gyro_fsr+0xa0>)
1a00a02c:	721a      	strb	r2, [r3, #8]
    return 0;
1a00a02e:	2300      	movs	r3, #0
}
1a00a030:	4618      	mov	r0, r3
1a00a032:	3710      	adds	r7, #16
1a00a034:	46bd      	mov	sp, r7
1a00a036:	bd80      	pop	{r7, pc}
1a00a038:	10086034 	.word	0x10086034

1a00a03c <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
1a00a03c:	b480      	push	{r7}
1a00a03e:	b083      	sub	sp, #12
1a00a040:	af00      	add	r7, sp, #0
1a00a042:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
1a00a044:	4b19      	ldr	r3, [pc, #100]	; (1a00a0ac <mpu_get_accel_fsr+0x70>)
1a00a046:	7a5b      	ldrb	r3, [r3, #9]
1a00a048:	2b03      	cmp	r3, #3
1a00a04a:	d81b      	bhi.n	1a00a084 <mpu_get_accel_fsr+0x48>
1a00a04c:	a201      	add	r2, pc, #4	; (adr r2, 1a00a054 <mpu_get_accel_fsr+0x18>)
1a00a04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a00a052:	bf00      	nop
1a00a054:	1a00a065 	.word	0x1a00a065
1a00a058:	1a00a06d 	.word	0x1a00a06d
1a00a05c:	1a00a075 	.word	0x1a00a075
1a00a060:	1a00a07d 	.word	0x1a00a07d
    case INV_FSR_2G:
        fsr[0] = 2;
1a00a064:	687b      	ldr	r3, [r7, #4]
1a00a066:	2202      	movs	r2, #2
1a00a068:	701a      	strb	r2, [r3, #0]
        break;
1a00a06a:	e00e      	b.n	1a00a08a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
1a00a06c:	687b      	ldr	r3, [r7, #4]
1a00a06e:	2204      	movs	r2, #4
1a00a070:	701a      	strb	r2, [r3, #0]
        break;
1a00a072:	e00a      	b.n	1a00a08a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
1a00a074:	687b      	ldr	r3, [r7, #4]
1a00a076:	2208      	movs	r2, #8
1a00a078:	701a      	strb	r2, [r3, #0]
        break;
1a00a07a:	e006      	b.n	1a00a08a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
1a00a07c:	687b      	ldr	r3, [r7, #4]
1a00a07e:	2210      	movs	r2, #16
1a00a080:	701a      	strb	r2, [r3, #0]
        break;
1a00a082:	e002      	b.n	1a00a08a <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
1a00a084:	f04f 33ff 	mov.w	r3, #4294967295
1a00a088:	e00a      	b.n	1a00a0a0 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
1a00a08a:	4b08      	ldr	r3, [pc, #32]	; (1a00a0ac <mpu_get_accel_fsr+0x70>)
1a00a08c:	7cdb      	ldrb	r3, [r3, #19]
1a00a08e:	2b00      	cmp	r3, #0
1a00a090:	d005      	beq.n	1a00a09e <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
1a00a092:	687b      	ldr	r3, [r7, #4]
1a00a094:	781b      	ldrb	r3, [r3, #0]
1a00a096:	005b      	lsls	r3, r3, #1
1a00a098:	b2da      	uxtb	r2, r3
1a00a09a:	687b      	ldr	r3, [r7, #4]
1a00a09c:	701a      	strb	r2, [r3, #0]
    return 0;
1a00a09e:	2300      	movs	r3, #0
}
1a00a0a0:	4618      	mov	r0, r3
1a00a0a2:	370c      	adds	r7, #12
1a00a0a4:	46bd      	mov	sp, r7
1a00a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00a0aa:	4770      	bx	lr
1a00a0ac:	10086034 	.word	0x10086034

1a00a0b0 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
1a00a0b0:	b580      	push	{r7, lr}
1a00a0b2:	b084      	sub	sp, #16
1a00a0b4:	af00      	add	r7, sp, #0
1a00a0b6:	4603      	mov	r3, r0
1a00a0b8:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1a00a0ba:	4b30      	ldr	r3, [pc, #192]	; (1a00a17c <mpu_set_accel_fsr+0xcc>)
1a00a0bc:	7a9b      	ldrb	r3, [r3, #10]
1a00a0be:	2b00      	cmp	r3, #0
1a00a0c0:	d102      	bne.n	1a00a0c8 <mpu_set_accel_fsr+0x18>
        return -1;
1a00a0c2:	f04f 33ff 	mov.w	r3, #4294967295
1a00a0c6:	e054      	b.n	1a00a172 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
1a00a0c8:	79fb      	ldrb	r3, [r7, #7]
1a00a0ca:	3b02      	subs	r3, #2
1a00a0cc:	2b0e      	cmp	r3, #14
1a00a0ce:	d82d      	bhi.n	1a00a12c <mpu_set_accel_fsr+0x7c>
1a00a0d0:	a201      	add	r2, pc, #4	; (adr r2, 1a00a0d8 <mpu_set_accel_fsr+0x28>)
1a00a0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a00a0d6:	bf00      	nop
1a00a0d8:	1a00a115 	.word	0x1a00a115
1a00a0dc:	1a00a12d 	.word	0x1a00a12d
1a00a0e0:	1a00a11b 	.word	0x1a00a11b
1a00a0e4:	1a00a12d 	.word	0x1a00a12d
1a00a0e8:	1a00a12d 	.word	0x1a00a12d
1a00a0ec:	1a00a12d 	.word	0x1a00a12d
1a00a0f0:	1a00a121 	.word	0x1a00a121
1a00a0f4:	1a00a12d 	.word	0x1a00a12d
1a00a0f8:	1a00a12d 	.word	0x1a00a12d
1a00a0fc:	1a00a12d 	.word	0x1a00a12d
1a00a100:	1a00a12d 	.word	0x1a00a12d
1a00a104:	1a00a12d 	.word	0x1a00a12d
1a00a108:	1a00a12d 	.word	0x1a00a12d
1a00a10c:	1a00a12d 	.word	0x1a00a12d
1a00a110:	1a00a127 	.word	0x1a00a127
    case 2:
        data = INV_FSR_2G << 3;
1a00a114:	2300      	movs	r3, #0
1a00a116:	73fb      	strb	r3, [r7, #15]
        break;
1a00a118:	e00b      	b.n	1a00a132 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
1a00a11a:	2308      	movs	r3, #8
1a00a11c:	73fb      	strb	r3, [r7, #15]
        break;
1a00a11e:	e008      	b.n	1a00a132 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
1a00a120:	2310      	movs	r3, #16
1a00a122:	73fb      	strb	r3, [r7, #15]
        break;
1a00a124:	e005      	b.n	1a00a132 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
1a00a126:	2318      	movs	r3, #24
1a00a128:	73fb      	strb	r3, [r7, #15]
        break;
1a00a12a:	e002      	b.n	1a00a132 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
1a00a12c:	f04f 33ff 	mov.w	r3, #4294967295
1a00a130:	e01f      	b.n	1a00a172 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
1a00a132:	4b12      	ldr	r3, [pc, #72]	; (1a00a17c <mpu_set_accel_fsr+0xcc>)
1a00a134:	7a5a      	ldrb	r2, [r3, #9]
1a00a136:	7bfb      	ldrb	r3, [r7, #15]
1a00a138:	08db      	lsrs	r3, r3, #3
1a00a13a:	b2db      	uxtb	r3, r3
1a00a13c:	429a      	cmp	r2, r3
1a00a13e:	d101      	bne.n	1a00a144 <mpu_set_accel_fsr+0x94>
        return 0;
1a00a140:	2300      	movs	r3, #0
1a00a142:	e016      	b.n	1a00a172 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
1a00a144:	4b0d      	ldr	r3, [pc, #52]	; (1a00a17c <mpu_set_accel_fsr+0xcc>)
1a00a146:	685b      	ldr	r3, [r3, #4]
1a00a148:	7818      	ldrb	r0, [r3, #0]
1a00a14a:	4b0c      	ldr	r3, [pc, #48]	; (1a00a17c <mpu_set_accel_fsr+0xcc>)
1a00a14c:	681b      	ldr	r3, [r3, #0]
1a00a14e:	79d9      	ldrb	r1, [r3, #7]
1a00a150:	f107 030f 	add.w	r3, r7, #15
1a00a154:	2201      	movs	r2, #1
1a00a156:	f7f8 febb 	bl	1a002ed0 <i2c_write>
1a00a15a:	4603      	mov	r3, r0
1a00a15c:	2b00      	cmp	r3, #0
1a00a15e:	d002      	beq.n	1a00a166 <mpu_set_accel_fsr+0xb6>
        return -1;
1a00a160:	f04f 33ff 	mov.w	r3, #4294967295
1a00a164:	e005      	b.n	1a00a172 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
1a00a166:	7bfb      	ldrb	r3, [r7, #15]
1a00a168:	08db      	lsrs	r3, r3, #3
1a00a16a:	b2da      	uxtb	r2, r3
1a00a16c:	4b03      	ldr	r3, [pc, #12]	; (1a00a17c <mpu_set_accel_fsr+0xcc>)
1a00a16e:	725a      	strb	r2, [r3, #9]
    return 0;
1a00a170:	2300      	movs	r3, #0
}
1a00a172:	4618      	mov	r0, r3
1a00a174:	3710      	adds	r7, #16
1a00a176:	46bd      	mov	sp, r7
1a00a178:	bd80      	pop	{r7, pc}
1a00a17a:	bf00      	nop
1a00a17c:	10086034 	.word	0x10086034

1a00a180 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
1a00a180:	b580      	push	{r7, lr}
1a00a182:	b084      	sub	sp, #16
1a00a184:	af00      	add	r7, sp, #0
1a00a186:	4603      	mov	r3, r0
1a00a188:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1a00a18a:	4b23      	ldr	r3, [pc, #140]	; (1a00a218 <mpu_set_lpf+0x98>)
1a00a18c:	7a9b      	ldrb	r3, [r3, #10]
1a00a18e:	2b00      	cmp	r3, #0
1a00a190:	d102      	bne.n	1a00a198 <mpu_set_lpf+0x18>
        return -1;
1a00a192:	f04f 33ff 	mov.w	r3, #4294967295
1a00a196:	e03b      	b.n	1a00a210 <mpu_set_lpf+0x90>

    if (lpf >= 188)
1a00a198:	88fb      	ldrh	r3, [r7, #6]
1a00a19a:	2bbb      	cmp	r3, #187	; 0xbb
1a00a19c:	d902      	bls.n	1a00a1a4 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
1a00a19e:	2301      	movs	r3, #1
1a00a1a0:	73fb      	strb	r3, [r7, #15]
1a00a1a2:	e019      	b.n	1a00a1d8 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
1a00a1a4:	88fb      	ldrh	r3, [r7, #6]
1a00a1a6:	2b61      	cmp	r3, #97	; 0x61
1a00a1a8:	d902      	bls.n	1a00a1b0 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
1a00a1aa:	2302      	movs	r3, #2
1a00a1ac:	73fb      	strb	r3, [r7, #15]
1a00a1ae:	e013      	b.n	1a00a1d8 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
1a00a1b0:	88fb      	ldrh	r3, [r7, #6]
1a00a1b2:	2b29      	cmp	r3, #41	; 0x29
1a00a1b4:	d902      	bls.n	1a00a1bc <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
1a00a1b6:	2303      	movs	r3, #3
1a00a1b8:	73fb      	strb	r3, [r7, #15]
1a00a1ba:	e00d      	b.n	1a00a1d8 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
1a00a1bc:	88fb      	ldrh	r3, [r7, #6]
1a00a1be:	2b13      	cmp	r3, #19
1a00a1c0:	d902      	bls.n	1a00a1c8 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
1a00a1c2:	2304      	movs	r3, #4
1a00a1c4:	73fb      	strb	r3, [r7, #15]
1a00a1c6:	e007      	b.n	1a00a1d8 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
1a00a1c8:	88fb      	ldrh	r3, [r7, #6]
1a00a1ca:	2b09      	cmp	r3, #9
1a00a1cc:	d902      	bls.n	1a00a1d4 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
1a00a1ce:	2305      	movs	r3, #5
1a00a1d0:	73fb      	strb	r3, [r7, #15]
1a00a1d2:	e001      	b.n	1a00a1d8 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
1a00a1d4:	2306      	movs	r3, #6
1a00a1d6:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
1a00a1d8:	4b0f      	ldr	r3, [pc, #60]	; (1a00a218 <mpu_set_lpf+0x98>)
1a00a1da:	7ada      	ldrb	r2, [r3, #11]
1a00a1dc:	7bfb      	ldrb	r3, [r7, #15]
1a00a1de:	429a      	cmp	r2, r3
1a00a1e0:	d101      	bne.n	1a00a1e6 <mpu_set_lpf+0x66>
        return 0;
1a00a1e2:	2300      	movs	r3, #0
1a00a1e4:	e014      	b.n	1a00a210 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
1a00a1e6:	4b0c      	ldr	r3, [pc, #48]	; (1a00a218 <mpu_set_lpf+0x98>)
1a00a1e8:	685b      	ldr	r3, [r3, #4]
1a00a1ea:	7818      	ldrb	r0, [r3, #0]
1a00a1ec:	4b0a      	ldr	r3, [pc, #40]	; (1a00a218 <mpu_set_lpf+0x98>)
1a00a1ee:	681b      	ldr	r3, [r3, #0]
1a00a1f0:	7899      	ldrb	r1, [r3, #2]
1a00a1f2:	f107 030f 	add.w	r3, r7, #15
1a00a1f6:	2201      	movs	r2, #1
1a00a1f8:	f7f8 fe6a 	bl	1a002ed0 <i2c_write>
1a00a1fc:	4603      	mov	r3, r0
1a00a1fe:	2b00      	cmp	r3, #0
1a00a200:	d002      	beq.n	1a00a208 <mpu_set_lpf+0x88>
        return -1;
1a00a202:	f04f 33ff 	mov.w	r3, #4294967295
1a00a206:	e003      	b.n	1a00a210 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
1a00a208:	7bfa      	ldrb	r2, [r7, #15]
1a00a20a:	4b03      	ldr	r3, [pc, #12]	; (1a00a218 <mpu_set_lpf+0x98>)
1a00a20c:	72da      	strb	r2, [r3, #11]
    return 0;
1a00a20e:	2300      	movs	r3, #0
}
1a00a210:	4618      	mov	r0, r3
1a00a212:	3710      	adds	r7, #16
1a00a214:	46bd      	mov	sp, r7
1a00a216:	bd80      	pop	{r7, pc}
1a00a218:	10086034 	.word	0x10086034

1a00a21c <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
1a00a21c:	b480      	push	{r7}
1a00a21e:	b083      	sub	sp, #12
1a00a220:	af00      	add	r7, sp, #0
1a00a222:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
1a00a224:	4b09      	ldr	r3, [pc, #36]	; (1a00a24c <mpu_get_sample_rate+0x30>)
1a00a226:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a00a22a:	2b00      	cmp	r3, #0
1a00a22c:	d002      	beq.n	1a00a234 <mpu_get_sample_rate+0x18>
        return -1;
1a00a22e:	f04f 33ff 	mov.w	r3, #4294967295
1a00a232:	e004      	b.n	1a00a23e <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
1a00a234:	4b05      	ldr	r3, [pc, #20]	; (1a00a24c <mpu_get_sample_rate+0x30>)
1a00a236:	89da      	ldrh	r2, [r3, #14]
1a00a238:	687b      	ldr	r3, [r7, #4]
1a00a23a:	801a      	strh	r2, [r3, #0]
    return 0;
1a00a23c:	2300      	movs	r3, #0
}
1a00a23e:	4618      	mov	r0, r3
1a00a240:	370c      	adds	r7, #12
1a00a242:	46bd      	mov	sp, r7
1a00a244:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00a248:	4770      	bx	lr
1a00a24a:	bf00      	nop
1a00a24c:	10086034 	.word	0x10086034

1a00a250 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
1a00a250:	b580      	push	{r7, lr}
1a00a252:	b084      	sub	sp, #16
1a00a254:	af00      	add	r7, sp, #0
1a00a256:	4603      	mov	r3, r0
1a00a258:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1a00a25a:	4b33      	ldr	r3, [pc, #204]	; (1a00a328 <mpu_set_sample_rate+0xd8>)
1a00a25c:	7a9b      	ldrb	r3, [r3, #10]
1a00a25e:	2b00      	cmp	r3, #0
1a00a260:	d102      	bne.n	1a00a268 <mpu_set_sample_rate+0x18>
        return -1;
1a00a262:	f04f 33ff 	mov.w	r3, #4294967295
1a00a266:	e05b      	b.n	1a00a320 <mpu_set_sample_rate+0xd0>

    if (st.chip_cfg.dmp_on)
1a00a268:	4b2f      	ldr	r3, [pc, #188]	; (1a00a328 <mpu_set_sample_rate+0xd8>)
1a00a26a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a00a26e:	2b00      	cmp	r3, #0
1a00a270:	d002      	beq.n	1a00a278 <mpu_set_sample_rate+0x28>
        return -1;
1a00a272:	f04f 33ff 	mov.w	r3, #4294967295
1a00a276:	e053      	b.n	1a00a320 <mpu_set_sample_rate+0xd0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
1a00a278:	4b2b      	ldr	r3, [pc, #172]	; (1a00a328 <mpu_set_sample_rate+0xd8>)
1a00a27a:	7d1b      	ldrb	r3, [r3, #20]
1a00a27c:	2b00      	cmp	r3, #0
1a00a27e:	d00e      	beq.n	1a00a29e <mpu_set_sample_rate+0x4e>
            if (rate && (rate <= 40)) {
1a00a280:	88fb      	ldrh	r3, [r7, #6]
1a00a282:	2b00      	cmp	r3, #0
1a00a284:	d008      	beq.n	1a00a298 <mpu_set_sample_rate+0x48>
1a00a286:	88fb      	ldrh	r3, [r7, #6]
1a00a288:	2b28      	cmp	r3, #40	; 0x28
1a00a28a:	d805      	bhi.n	1a00a298 <mpu_set_sample_rate+0x48>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
1a00a28c:	88fb      	ldrh	r3, [r7, #6]
1a00a28e:	4618      	mov	r0, r3
1a00a290:	f7ff fc72 	bl	1a009b78 <mpu_lp_accel_mode>
                return 0;
1a00a294:	2300      	movs	r3, #0
1a00a296:	e043      	b.n	1a00a320 <mpu_set_sample_rate+0xd0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
1a00a298:	2000      	movs	r0, #0
1a00a29a:	f7ff fc6d 	bl	1a009b78 <mpu_lp_accel_mode>
        }
        if (rate < 4)
1a00a29e:	88fb      	ldrh	r3, [r7, #6]
1a00a2a0:	2b03      	cmp	r3, #3
1a00a2a2:	d802      	bhi.n	1a00a2aa <mpu_set_sample_rate+0x5a>
            rate = 4;
1a00a2a4:	2304      	movs	r3, #4
1a00a2a6:	80fb      	strh	r3, [r7, #6]
1a00a2a8:	e006      	b.n	1a00a2b8 <mpu_set_sample_rate+0x68>
        else if (rate > 1000)
1a00a2aa:	88fb      	ldrh	r3, [r7, #6]
1a00a2ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1a00a2b0:	d902      	bls.n	1a00a2b8 <mpu_set_sample_rate+0x68>
            rate = 1000;
1a00a2b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00a2b6:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
1a00a2b8:	88fb      	ldrh	r3, [r7, #6]
1a00a2ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00a2be:	fb92 f3f3 	sdiv	r3, r2, r3
1a00a2c2:	b2db      	uxtb	r3, r3
1a00a2c4:	3b01      	subs	r3, #1
1a00a2c6:	b2db      	uxtb	r3, r3
1a00a2c8:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
1a00a2ca:	4b17      	ldr	r3, [pc, #92]	; (1a00a328 <mpu_set_sample_rate+0xd8>)
1a00a2cc:	685b      	ldr	r3, [r3, #4]
1a00a2ce:	7818      	ldrb	r0, [r3, #0]
1a00a2d0:	4b15      	ldr	r3, [pc, #84]	; (1a00a328 <mpu_set_sample_rate+0xd8>)
1a00a2d2:	681b      	ldr	r3, [r3, #0]
1a00a2d4:	7859      	ldrb	r1, [r3, #1]
1a00a2d6:	f107 030f 	add.w	r3, r7, #15
1a00a2da:	2201      	movs	r2, #1
1a00a2dc:	f7f8 fdf8 	bl	1a002ed0 <i2c_write>
1a00a2e0:	4603      	mov	r3, r0
1a00a2e2:	2b00      	cmp	r3, #0
1a00a2e4:	d002      	beq.n	1a00a2ec <mpu_set_sample_rate+0x9c>
            return -1;
1a00a2e6:	f04f 33ff 	mov.w	r3, #4294967295
1a00a2ea:	e019      	b.n	1a00a320 <mpu_set_sample_rate+0xd0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
1a00a2ec:	7bfb      	ldrb	r3, [r7, #15]
1a00a2ee:	3301      	adds	r3, #1
1a00a2f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00a2f4:	fb92 f3f3 	sdiv	r3, r2, r3
1a00a2f8:	b29a      	uxth	r2, r3
1a00a2fa:	4b0b      	ldr	r3, [pc, #44]	; (1a00a328 <mpu_set_sample_rate+0xd8>)
1a00a2fc:	81da      	strh	r2, [r3, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
1a00a2fe:	4b0a      	ldr	r3, [pc, #40]	; (1a00a328 <mpu_set_sample_rate+0xd8>)
1a00a300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
1a00a302:	2b64      	cmp	r3, #100	; 0x64
1a00a304:	bf28      	it	cs
1a00a306:	2364      	movcs	r3, #100	; 0x64
1a00a308:	b29b      	uxth	r3, r3
1a00a30a:	4618      	mov	r0, r3
1a00a30c:	f000 f80e 	bl	1a00a32c <mpu_set_compass_sample_rate>
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
1a00a310:	4b05      	ldr	r3, [pc, #20]	; (1a00a328 <mpu_set_sample_rate+0xd8>)
1a00a312:	89db      	ldrh	r3, [r3, #14]
1a00a314:	085b      	lsrs	r3, r3, #1
1a00a316:	b29b      	uxth	r3, r3
1a00a318:	4618      	mov	r0, r3
1a00a31a:	f7ff ff31 	bl	1a00a180 <mpu_set_lpf>
        return 0;
1a00a31e:	2300      	movs	r3, #0
    }
}
1a00a320:	4618      	mov	r0, r3
1a00a322:	3710      	adds	r7, #16
1a00a324:	46bd      	mov	sp, r7
1a00a326:	bd80      	pop	{r7, pc}
1a00a328:	10086034 	.word	0x10086034

1a00a32c <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
1a00a32c:	b580      	push	{r7, lr}
1a00a32e:	b084      	sub	sp, #16
1a00a330:	af00      	add	r7, sp, #0
1a00a332:	4603      	mov	r3, r0
1a00a334:	80fb      	strh	r3, [r7, #6]
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
1a00a336:	88fb      	ldrh	r3, [r7, #6]
1a00a338:	2b00      	cmp	r3, #0
1a00a33a:	d007      	beq.n	1a00a34c <mpu_set_compass_sample_rate+0x20>
1a00a33c:	4b1a      	ldr	r3, [pc, #104]	; (1a00a3a8 <mpu_set_compass_sample_rate+0x7c>)
1a00a33e:	89db      	ldrh	r3, [r3, #14]
1a00a340:	88fa      	ldrh	r2, [r7, #6]
1a00a342:	429a      	cmp	r2, r3
1a00a344:	d802      	bhi.n	1a00a34c <mpu_set_compass_sample_rate+0x20>
1a00a346:	88fb      	ldrh	r3, [r7, #6]
1a00a348:	2b64      	cmp	r3, #100	; 0x64
1a00a34a:	d902      	bls.n	1a00a352 <mpu_set_compass_sample_rate+0x26>
        return -1;
1a00a34c:	f04f 33ff 	mov.w	r3, #4294967295
1a00a350:	e026      	b.n	1a00a3a0 <mpu_set_compass_sample_rate+0x74>

    div = st.chip_cfg.sample_rate / rate - 1;
1a00a352:	4b15      	ldr	r3, [pc, #84]	; (1a00a3a8 <mpu_set_compass_sample_rate+0x7c>)
1a00a354:	89da      	ldrh	r2, [r3, #14]
1a00a356:	88fb      	ldrh	r3, [r7, #6]
1a00a358:	fbb2 f3f3 	udiv	r3, r2, r3
1a00a35c:	b29b      	uxth	r3, r3
1a00a35e:	b2db      	uxtb	r3, r3
1a00a360:	3b01      	subs	r3, #1
1a00a362:	b2db      	uxtb	r3, r3
1a00a364:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
1a00a366:	4b10      	ldr	r3, [pc, #64]	; (1a00a3a8 <mpu_set_compass_sample_rate+0x7c>)
1a00a368:	685b      	ldr	r3, [r3, #4]
1a00a36a:	7818      	ldrb	r0, [r3, #0]
1a00a36c:	4b0e      	ldr	r3, [pc, #56]	; (1a00a3a8 <mpu_set_compass_sample_rate+0x7c>)
1a00a36e:	681b      	ldr	r3, [r3, #0]
1a00a370:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
1a00a374:	f107 030f 	add.w	r3, r7, #15
1a00a378:	2201      	movs	r2, #1
1a00a37a:	f7f8 fda9 	bl	1a002ed0 <i2c_write>
1a00a37e:	4603      	mov	r3, r0
1a00a380:	2b00      	cmp	r3, #0
1a00a382:	d002      	beq.n	1a00a38a <mpu_set_compass_sample_rate+0x5e>
        return -1;
1a00a384:	f04f 33ff 	mov.w	r3, #4294967295
1a00a388:	e00a      	b.n	1a00a3a0 <mpu_set_compass_sample_rate+0x74>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
1a00a38a:	4b07      	ldr	r3, [pc, #28]	; (1a00a3a8 <mpu_set_compass_sample_rate+0x7c>)
1a00a38c:	89db      	ldrh	r3, [r3, #14]
1a00a38e:	461a      	mov	r2, r3
1a00a390:	7bfb      	ldrb	r3, [r7, #15]
1a00a392:	3301      	adds	r3, #1
1a00a394:	fb92 f3f3 	sdiv	r3, r2, r3
1a00a398:	b29a      	uxth	r2, r3
1a00a39a:	4b03      	ldr	r3, [pc, #12]	; (1a00a3a8 <mpu_set_compass_sample_rate+0x7c>)
1a00a39c:	851a      	strh	r2, [r3, #40]	; 0x28
    return 0;
1a00a39e:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
1a00a3a0:	4618      	mov	r0, r3
1a00a3a2:	3710      	adds	r7, #16
1a00a3a4:	46bd      	mov	sp, r7
1a00a3a6:	bd80      	pop	{r7, pc}
1a00a3a8:	10086034 	.word	0x10086034

1a00a3ac <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
1a00a3ac:	b580      	push	{r7, lr}
1a00a3ae:	b084      	sub	sp, #16
1a00a3b0:	af00      	add	r7, sp, #0
1a00a3b2:	4603      	mov	r3, r0
1a00a3b4:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
1a00a3b6:	2300      	movs	r3, #0
1a00a3b8:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
1a00a3ba:	79fb      	ldrb	r3, [r7, #7]
1a00a3bc:	f023 0301 	bic.w	r3, r3, #1
1a00a3c0:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
1a00a3c2:	4b22      	ldr	r3, [pc, #136]	; (1a00a44c <mpu_configure_fifo+0xa0>)
1a00a3c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a00a3c8:	2b00      	cmp	r3, #0
1a00a3ca:	d001      	beq.n	1a00a3d0 <mpu_configure_fifo+0x24>
        return 0;
1a00a3cc:	2300      	movs	r3, #0
1a00a3ce:	e038      	b.n	1a00a442 <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
1a00a3d0:	4b1e      	ldr	r3, [pc, #120]	; (1a00a44c <mpu_configure_fifo+0xa0>)
1a00a3d2:	7a9b      	ldrb	r3, [r3, #10]
1a00a3d4:	2b00      	cmp	r3, #0
1a00a3d6:	d102      	bne.n	1a00a3de <mpu_configure_fifo+0x32>
            return -1;
1a00a3d8:	f04f 33ff 	mov.w	r3, #4294967295
1a00a3dc:	e031      	b.n	1a00a442 <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
1a00a3de:	4b1b      	ldr	r3, [pc, #108]	; (1a00a44c <mpu_configure_fifo+0xa0>)
1a00a3e0:	7c1b      	ldrb	r3, [r3, #16]
1a00a3e2:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
1a00a3e4:	4b19      	ldr	r3, [pc, #100]	; (1a00a44c <mpu_configure_fifo+0xa0>)
1a00a3e6:	7a9a      	ldrb	r2, [r3, #10]
1a00a3e8:	79fb      	ldrb	r3, [r7, #7]
1a00a3ea:	4013      	ands	r3, r2
1a00a3ec:	b2da      	uxtb	r2, r3
1a00a3ee:	4b17      	ldr	r3, [pc, #92]	; (1a00a44c <mpu_configure_fifo+0xa0>)
1a00a3f0:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
1a00a3f2:	4b16      	ldr	r3, [pc, #88]	; (1a00a44c <mpu_configure_fifo+0xa0>)
1a00a3f4:	7c1b      	ldrb	r3, [r3, #16]
1a00a3f6:	79fa      	ldrb	r2, [r7, #7]
1a00a3f8:	429a      	cmp	r2, r3
1a00a3fa:	d003      	beq.n	1a00a404 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
1a00a3fc:	f04f 33ff 	mov.w	r3, #4294967295
1a00a400:	60fb      	str	r3, [r7, #12]
1a00a402:	e001      	b.n	1a00a408 <mpu_configure_fifo+0x5c>
        else
            result = 0;
1a00a404:	2300      	movs	r3, #0
1a00a406:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
1a00a408:	79fb      	ldrb	r3, [r7, #7]
1a00a40a:	2b00      	cmp	r3, #0
1a00a40c:	d103      	bne.n	1a00a416 <mpu_configure_fifo+0x6a>
1a00a40e:	4b0f      	ldr	r3, [pc, #60]	; (1a00a44c <mpu_configure_fifo+0xa0>)
1a00a410:	7d1b      	ldrb	r3, [r3, #20]
1a00a412:	2b00      	cmp	r3, #0
1a00a414:	d003      	beq.n	1a00a41e <mpu_configure_fifo+0x72>
            set_int_enable(1);
1a00a416:	2001      	movs	r0, #1
1a00a418:	f7ff fa9e 	bl	1a009958 <set_int_enable>
1a00a41c:	e002      	b.n	1a00a424 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
1a00a41e:	2000      	movs	r0, #0
1a00a420:	f7ff fa9a 	bl	1a009958 <set_int_enable>
        if (sensors) {
1a00a424:	79fb      	ldrb	r3, [r7, #7]
1a00a426:	2b00      	cmp	r3, #0
1a00a428:	d00a      	beq.n	1a00a440 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
1a00a42a:	f7ff fc7d 	bl	1a009d28 <mpu_reset_fifo>
1a00a42e:	4603      	mov	r3, r0
1a00a430:	2b00      	cmp	r3, #0
1a00a432:	d005      	beq.n	1a00a440 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
1a00a434:	4a05      	ldr	r2, [pc, #20]	; (1a00a44c <mpu_configure_fifo+0xa0>)
1a00a436:	7afb      	ldrb	r3, [r7, #11]
1a00a438:	7413      	strb	r3, [r2, #16]
                return -1;
1a00a43a:	f04f 33ff 	mov.w	r3, #4294967295
1a00a43e:	e000      	b.n	1a00a442 <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
1a00a440:	68fb      	ldr	r3, [r7, #12]
}
1a00a442:	4618      	mov	r0, r3
1a00a444:	3710      	adds	r7, #16
1a00a446:	46bd      	mov	sp, r7
1a00a448:	bd80      	pop	{r7, pc}
1a00a44a:	bf00      	nop
1a00a44c:	10086034 	.word	0x10086034

1a00a450 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
1a00a450:	b580      	push	{r7, lr}
1a00a452:	b084      	sub	sp, #16
1a00a454:	af00      	add	r7, sp, #0
1a00a456:	4603      	mov	r3, r0
1a00a458:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
1a00a45a:	79fb      	ldrb	r3, [r7, #7]
1a00a45c:	f003 0370 	and.w	r3, r3, #112	; 0x70
1a00a460:	2b00      	cmp	r3, #0
1a00a462:	d002      	beq.n	1a00a46a <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
1a00a464:	2301      	movs	r3, #1
1a00a466:	73fb      	strb	r3, [r7, #15]
1a00a468:	e007      	b.n	1a00a47a <mpu_set_sensors+0x2a>
    else if (sensors)
1a00a46a:	79fb      	ldrb	r3, [r7, #7]
1a00a46c:	2b00      	cmp	r3, #0
1a00a46e:	d002      	beq.n	1a00a476 <mpu_set_sensors+0x26>
        data = 0;
1a00a470:	2300      	movs	r3, #0
1a00a472:	73fb      	strb	r3, [r7, #15]
1a00a474:	e001      	b.n	1a00a47a <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
1a00a476:	2340      	movs	r3, #64	; 0x40
1a00a478:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
1a00a47a:	4b63      	ldr	r3, [pc, #396]	; (1a00a608 <mpu_set_sensors+0x1b8>)
1a00a47c:	685b      	ldr	r3, [r3, #4]
1a00a47e:	7818      	ldrb	r0, [r3, #0]
1a00a480:	4b61      	ldr	r3, [pc, #388]	; (1a00a608 <mpu_set_sensors+0x1b8>)
1a00a482:	681b      	ldr	r3, [r3, #0]
1a00a484:	7d59      	ldrb	r1, [r3, #21]
1a00a486:	f107 030f 	add.w	r3, r7, #15
1a00a48a:	2201      	movs	r2, #1
1a00a48c:	f7f8 fd20 	bl	1a002ed0 <i2c_write>
1a00a490:	4603      	mov	r3, r0
1a00a492:	2b00      	cmp	r3, #0
1a00a494:	d005      	beq.n	1a00a4a2 <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
1a00a496:	4b5c      	ldr	r3, [pc, #368]	; (1a00a608 <mpu_set_sensors+0x1b8>)
1a00a498:	2200      	movs	r2, #0
1a00a49a:	729a      	strb	r2, [r3, #10]
        return -1;
1a00a49c:	f04f 33ff 	mov.w	r3, #4294967295
1a00a4a0:	e0ae      	b.n	1a00a600 <mpu_set_sensors+0x1b0>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
1a00a4a2:	7bfb      	ldrb	r3, [r7, #15]
1a00a4a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00a4a8:	b2da      	uxtb	r2, r3
1a00a4aa:	4b57      	ldr	r3, [pc, #348]	; (1a00a608 <mpu_set_sensors+0x1b8>)
1a00a4ac:	731a      	strb	r2, [r3, #12]

    data = 0;
1a00a4ae:	2300      	movs	r3, #0
1a00a4b0:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
1a00a4b2:	79fb      	ldrb	r3, [r7, #7]
1a00a4b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a00a4b8:	2b00      	cmp	r3, #0
1a00a4ba:	d104      	bne.n	1a00a4c6 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
1a00a4bc:	7bfb      	ldrb	r3, [r7, #15]
1a00a4be:	f043 0304 	orr.w	r3, r3, #4
1a00a4c2:	b2db      	uxtb	r3, r3
1a00a4c4:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
1a00a4c6:	79fb      	ldrb	r3, [r7, #7]
1a00a4c8:	f003 0320 	and.w	r3, r3, #32
1a00a4cc:	2b00      	cmp	r3, #0
1a00a4ce:	d104      	bne.n	1a00a4da <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
1a00a4d0:	7bfb      	ldrb	r3, [r7, #15]
1a00a4d2:	f043 0302 	orr.w	r3, r3, #2
1a00a4d6:	b2db      	uxtb	r3, r3
1a00a4d8:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
1a00a4da:	79fb      	ldrb	r3, [r7, #7]
1a00a4dc:	f003 0310 	and.w	r3, r3, #16
1a00a4e0:	2b00      	cmp	r3, #0
1a00a4e2:	d104      	bne.n	1a00a4ee <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
1a00a4e4:	7bfb      	ldrb	r3, [r7, #15]
1a00a4e6:	f043 0301 	orr.w	r3, r3, #1
1a00a4ea:	b2db      	uxtb	r3, r3
1a00a4ec:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
1a00a4ee:	79fb      	ldrb	r3, [r7, #7]
1a00a4f0:	f003 0308 	and.w	r3, r3, #8
1a00a4f4:	2b00      	cmp	r3, #0
1a00a4f6:	d104      	bne.n	1a00a502 <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
1a00a4f8:	7bfb      	ldrb	r3, [r7, #15]
1a00a4fa:	f043 0338 	orr.w	r3, r3, #56	; 0x38
1a00a4fe:	b2db      	uxtb	r3, r3
1a00a500:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
1a00a502:	4b41      	ldr	r3, [pc, #260]	; (1a00a608 <mpu_set_sensors+0x1b8>)
1a00a504:	685b      	ldr	r3, [r3, #4]
1a00a506:	7818      	ldrb	r0, [r3, #0]
1a00a508:	4b3f      	ldr	r3, [pc, #252]	; (1a00a608 <mpu_set_sensors+0x1b8>)
1a00a50a:	681b      	ldr	r3, [r3, #0]
1a00a50c:	7d99      	ldrb	r1, [r3, #22]
1a00a50e:	f107 030f 	add.w	r3, r7, #15
1a00a512:	2201      	movs	r2, #1
1a00a514:	f7f8 fcdc 	bl	1a002ed0 <i2c_write>
1a00a518:	4603      	mov	r3, r0
1a00a51a:	2b00      	cmp	r3, #0
1a00a51c:	d005      	beq.n	1a00a52a <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
1a00a51e:	4b3a      	ldr	r3, [pc, #232]	; (1a00a608 <mpu_set_sensors+0x1b8>)
1a00a520:	2200      	movs	r2, #0
1a00a522:	729a      	strb	r2, [r3, #10]
        return -1;
1a00a524:	f04f 33ff 	mov.w	r3, #4294967295
1a00a528:	e06a      	b.n	1a00a600 <mpu_set_sensors+0x1b0>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
1a00a52a:	79fb      	ldrb	r3, [r7, #7]
1a00a52c:	2b00      	cmp	r3, #0
1a00a52e:	d005      	beq.n	1a00a53c <mpu_set_sensors+0xec>
1a00a530:	79fb      	ldrb	r3, [r7, #7]
1a00a532:	2b08      	cmp	r3, #8
1a00a534:	d002      	beq.n	1a00a53c <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
1a00a536:	2000      	movs	r0, #0
1a00a538:	f000 f9be 	bl	1a00a8b8 <mpu_set_int_latched>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
1a00a53c:	4b32      	ldr	r3, [pc, #200]	; (1a00a608 <mpu_set_sensors+0x1b8>)
1a00a53e:	685b      	ldr	r3, [r3, #4]
1a00a540:	7818      	ldrb	r0, [r3, #0]
1a00a542:	4b31      	ldr	r3, [pc, #196]	; (1a00a608 <mpu_set_sensors+0x1b8>)
1a00a544:	681b      	ldr	r3, [r3, #0]
1a00a546:	7919      	ldrb	r1, [r3, #4]
1a00a548:	f107 030e 	add.w	r3, r7, #14
1a00a54c:	2201      	movs	r2, #1
1a00a54e:	f7f8 fced 	bl	1a002f2c <i2c_read>
1a00a552:	4603      	mov	r3, r0
1a00a554:	2b00      	cmp	r3, #0
1a00a556:	d002      	beq.n	1a00a55e <mpu_set_sensors+0x10e>
        return -1;
1a00a558:	f04f 33ff 	mov.w	r3, #4294967295
1a00a55c:	e050      	b.n	1a00a600 <mpu_set_sensors+0x1b0>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
1a00a55e:	79fb      	ldrb	r3, [r7, #7]
1a00a560:	f003 0301 	and.w	r3, r3, #1
1a00a564:	2b00      	cmp	r3, #0
1a00a566:	d007      	beq.n	1a00a578 <mpu_set_sensors+0x128>
        data = AKM_SINGLE_MEASUREMENT;
1a00a568:	2301      	movs	r3, #1
1a00a56a:	73fb      	strb	r3, [r7, #15]
        user_ctrl |= BIT_AUX_IF_EN;
1a00a56c:	7bbb      	ldrb	r3, [r7, #14]
1a00a56e:	f043 0320 	orr.w	r3, r3, #32
1a00a572:	b2db      	uxtb	r3, r3
1a00a574:	73bb      	strb	r3, [r7, #14]
1a00a576:	e006      	b.n	1a00a586 <mpu_set_sensors+0x136>
    } else {
        data = AKM_POWER_DOWN;
1a00a578:	2300      	movs	r3, #0
1a00a57a:	73fb      	strb	r3, [r7, #15]
        user_ctrl &= ~BIT_AUX_IF_EN;
1a00a57c:	7bbb      	ldrb	r3, [r7, #14]
1a00a57e:	f023 0320 	bic.w	r3, r3, #32
1a00a582:	b2db      	uxtb	r3, r3
1a00a584:	73bb      	strb	r3, [r7, #14]
    }
    if (st.chip_cfg.dmp_on)
1a00a586:	4b20      	ldr	r3, [pc, #128]	; (1a00a608 <mpu_set_sensors+0x1b8>)
1a00a588:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a00a58c:	2b00      	cmp	r3, #0
1a00a58e:	d005      	beq.n	1a00a59c <mpu_set_sensors+0x14c>
        user_ctrl |= BIT_DMP_EN;
1a00a590:	7bbb      	ldrb	r3, [r7, #14]
1a00a592:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a00a596:	b2db      	uxtb	r3, r3
1a00a598:	73bb      	strb	r3, [r7, #14]
1a00a59a:	e004      	b.n	1a00a5a6 <mpu_set_sensors+0x156>
    else
        user_ctrl &= ~BIT_DMP_EN;
1a00a59c:	7bbb      	ldrb	r3, [r7, #14]
1a00a59e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a00a5a2:	b2db      	uxtb	r3, r3
1a00a5a4:	73bb      	strb	r3, [r7, #14]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
1a00a5a6:	4b18      	ldr	r3, [pc, #96]	; (1a00a608 <mpu_set_sensors+0x1b8>)
1a00a5a8:	685b      	ldr	r3, [r3, #4]
1a00a5aa:	7818      	ldrb	r0, [r3, #0]
1a00a5ac:	4b16      	ldr	r3, [pc, #88]	; (1a00a608 <mpu_set_sensors+0x1b8>)
1a00a5ae:	681b      	ldr	r3, [r3, #0]
1a00a5b0:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
1a00a5b4:	f107 030f 	add.w	r3, r7, #15
1a00a5b8:	2201      	movs	r2, #1
1a00a5ba:	f7f8 fc89 	bl	1a002ed0 <i2c_write>
1a00a5be:	4603      	mov	r3, r0
1a00a5c0:	2b00      	cmp	r3, #0
1a00a5c2:	d002      	beq.n	1a00a5ca <mpu_set_sensors+0x17a>
        return -1;
1a00a5c4:	f04f 33ff 	mov.w	r3, #4294967295
1a00a5c8:	e01a      	b.n	1a00a600 <mpu_set_sensors+0x1b0>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
1a00a5ca:	4b0f      	ldr	r3, [pc, #60]	; (1a00a608 <mpu_set_sensors+0x1b8>)
1a00a5cc:	685b      	ldr	r3, [r3, #4]
1a00a5ce:	7818      	ldrb	r0, [r3, #0]
1a00a5d0:	4b0d      	ldr	r3, [pc, #52]	; (1a00a608 <mpu_set_sensors+0x1b8>)
1a00a5d2:	681b      	ldr	r3, [r3, #0]
1a00a5d4:	7919      	ldrb	r1, [r3, #4]
1a00a5d6:	f107 030e 	add.w	r3, r7, #14
1a00a5da:	2201      	movs	r2, #1
1a00a5dc:	f7f8 fc78 	bl	1a002ed0 <i2c_write>
1a00a5e0:	4603      	mov	r3, r0
1a00a5e2:	2b00      	cmp	r3, #0
1a00a5e4:	d002      	beq.n	1a00a5ec <mpu_set_sensors+0x19c>
        return -1;
1a00a5e6:	f04f 33ff 	mov.w	r3, #4294967295
1a00a5ea:	e009      	b.n	1a00a600 <mpu_set_sensors+0x1b0>
#endif
#endif

    st.chip_cfg.sensors = sensors;
1a00a5ec:	4a06      	ldr	r2, [pc, #24]	; (1a00a608 <mpu_set_sensors+0x1b8>)
1a00a5ee:	79fb      	ldrb	r3, [r7, #7]
1a00a5f0:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
1a00a5f2:	4b05      	ldr	r3, [pc, #20]	; (1a00a608 <mpu_set_sensors+0x1b8>)
1a00a5f4:	2200      	movs	r2, #0
1a00a5f6:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
1a00a5f8:	2032      	movs	r0, #50	; 0x32
1a00a5fa:	f7fc f881 	bl	1a006700 <timerDelayMs>
    return 0;
1a00a5fe:	2300      	movs	r3, #0
}
1a00a600:	4618      	mov	r0, r3
1a00a602:	3710      	adds	r7, #16
1a00a604:	46bd      	mov	sp, r7
1a00a606:	bd80      	pop	{r7, pc}
1a00a608:	10086034 	.word	0x10086034

1a00a60c <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
1a00a60c:	b580      	push	{r7, lr}
1a00a60e:	b086      	sub	sp, #24
1a00a610:	af00      	add	r7, sp, #0
1a00a612:	4603      	mov	r3, r0
1a00a614:	60b9      	str	r1, [r7, #8]
1a00a616:	607a      	str	r2, [r7, #4]
1a00a618:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
1a00a61a:	4b3a      	ldr	r3, [pc, #232]	; (1a00a704 <mpu_read_fifo_stream+0xf8>)
1a00a61c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a00a620:	2b00      	cmp	r3, #0
1a00a622:	d102      	bne.n	1a00a62a <mpu_read_fifo_stream+0x1e>
        return -1;
1a00a624:	f04f 33ff 	mov.w	r3, #4294967295
1a00a628:	e068      	b.n	1a00a6fc <mpu_read_fifo_stream+0xf0>
    if (!st.chip_cfg.sensors)
1a00a62a:	4b36      	ldr	r3, [pc, #216]	; (1a00a704 <mpu_read_fifo_stream+0xf8>)
1a00a62c:	7a9b      	ldrb	r3, [r3, #10]
1a00a62e:	2b00      	cmp	r3, #0
1a00a630:	d102      	bne.n	1a00a638 <mpu_read_fifo_stream+0x2c>
        return -1;
1a00a632:	f04f 33ff 	mov.w	r3, #4294967295
1a00a636:	e061      	b.n	1a00a6fc <mpu_read_fifo_stream+0xf0>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
1a00a638:	4b32      	ldr	r3, [pc, #200]	; (1a00a704 <mpu_read_fifo_stream+0xf8>)
1a00a63a:	685b      	ldr	r3, [r3, #4]
1a00a63c:	7818      	ldrb	r0, [r3, #0]
1a00a63e:	4b31      	ldr	r3, [pc, #196]	; (1a00a704 <mpu_read_fifo_stream+0xf8>)
1a00a640:	681b      	ldr	r3, [r3, #0]
1a00a642:	7b19      	ldrb	r1, [r3, #12]
1a00a644:	f107 0314 	add.w	r3, r7, #20
1a00a648:	2202      	movs	r2, #2
1a00a64a:	f7f8 fc6f 	bl	1a002f2c <i2c_read>
1a00a64e:	4603      	mov	r3, r0
1a00a650:	2b00      	cmp	r3, #0
1a00a652:	d002      	beq.n	1a00a65a <mpu_read_fifo_stream+0x4e>
        return -1;
1a00a654:	f04f 33ff 	mov.w	r3, #4294967295
1a00a658:	e050      	b.n	1a00a6fc <mpu_read_fifo_stream+0xf0>
    fifo_count = (tmp[0] << 8) | tmp[1];
1a00a65a:	7d3b      	ldrb	r3, [r7, #20]
1a00a65c:	021b      	lsls	r3, r3, #8
1a00a65e:	b29a      	uxth	r2, r3
1a00a660:	7d7b      	ldrb	r3, [r7, #21]
1a00a662:	b29b      	uxth	r3, r3
1a00a664:	4313      	orrs	r3, r2
1a00a666:	b29b      	uxth	r3, r3
1a00a668:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
1a00a66a:	8afa      	ldrh	r2, [r7, #22]
1a00a66c:	89fb      	ldrh	r3, [r7, #14]
1a00a66e:	429a      	cmp	r2, r3
1a00a670:	d205      	bcs.n	1a00a67e <mpu_read_fifo_stream+0x72>
        more[0] = 0;
1a00a672:	687b      	ldr	r3, [r7, #4]
1a00a674:	2200      	movs	r2, #0
1a00a676:	701a      	strb	r2, [r3, #0]
        return -1;
1a00a678:	f04f 33ff 	mov.w	r3, #4294967295
1a00a67c:	e03e      	b.n	1a00a6fc <mpu_read_fifo_stream+0xf0>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
1a00a67e:	4b21      	ldr	r3, [pc, #132]	; (1a00a704 <mpu_read_fifo_stream+0xf8>)
1a00a680:	685b      	ldr	r3, [r3, #4]
1a00a682:	885b      	ldrh	r3, [r3, #2]
1a00a684:	085b      	lsrs	r3, r3, #1
1a00a686:	b29b      	uxth	r3, r3
1a00a688:	8afa      	ldrh	r2, [r7, #22]
1a00a68a:	429a      	cmp	r2, r3
1a00a68c:	d91a      	bls.n	1a00a6c4 <mpu_read_fifo_stream+0xb8>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
1a00a68e:	4b1d      	ldr	r3, [pc, #116]	; (1a00a704 <mpu_read_fifo_stream+0xf8>)
1a00a690:	685b      	ldr	r3, [r3, #4]
1a00a692:	7818      	ldrb	r0, [r3, #0]
1a00a694:	4b1b      	ldr	r3, [pc, #108]	; (1a00a704 <mpu_read_fifo_stream+0xf8>)
1a00a696:	681b      	ldr	r3, [r3, #0]
1a00a698:	7cd9      	ldrb	r1, [r3, #19]
1a00a69a:	f107 0314 	add.w	r3, r7, #20
1a00a69e:	2201      	movs	r2, #1
1a00a6a0:	f7f8 fc44 	bl	1a002f2c <i2c_read>
1a00a6a4:	4603      	mov	r3, r0
1a00a6a6:	2b00      	cmp	r3, #0
1a00a6a8:	d002      	beq.n	1a00a6b0 <mpu_read_fifo_stream+0xa4>
            return -1;
1a00a6aa:	f04f 33ff 	mov.w	r3, #4294967295
1a00a6ae:	e025      	b.n	1a00a6fc <mpu_read_fifo_stream+0xf0>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
1a00a6b0:	7d3b      	ldrb	r3, [r7, #20]
1a00a6b2:	f003 0310 	and.w	r3, r3, #16
1a00a6b6:	2b00      	cmp	r3, #0
1a00a6b8:	d004      	beq.n	1a00a6c4 <mpu_read_fifo_stream+0xb8>
            mpu_reset_fifo();
1a00a6ba:	f7ff fb35 	bl	1a009d28 <mpu_reset_fifo>
            return -2;
1a00a6be:	f06f 0301 	mvn.w	r3, #1
1a00a6c2:	e01b      	b.n	1a00a6fc <mpu_read_fifo_stream+0xf0>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
1a00a6c4:	4b0f      	ldr	r3, [pc, #60]	; (1a00a704 <mpu_read_fifo_stream+0xf8>)
1a00a6c6:	685b      	ldr	r3, [r3, #4]
1a00a6c8:	7818      	ldrb	r0, [r3, #0]
1a00a6ca:	4b0e      	ldr	r3, [pc, #56]	; (1a00a704 <mpu_read_fifo_stream+0xf8>)
1a00a6cc:	681b      	ldr	r3, [r3, #0]
1a00a6ce:	7b59      	ldrb	r1, [r3, #13]
1a00a6d0:	89fb      	ldrh	r3, [r7, #14]
1a00a6d2:	b2da      	uxtb	r2, r3
1a00a6d4:	68bb      	ldr	r3, [r7, #8]
1a00a6d6:	f7f8 fc29 	bl	1a002f2c <i2c_read>
1a00a6da:	4603      	mov	r3, r0
1a00a6dc:	2b00      	cmp	r3, #0
1a00a6de:	d002      	beq.n	1a00a6e6 <mpu_read_fifo_stream+0xda>
        return -1;
1a00a6e0:	f04f 33ff 	mov.w	r3, #4294967295
1a00a6e4:	e00a      	b.n	1a00a6fc <mpu_read_fifo_stream+0xf0>
    more[0] = fifo_count / length - 1;
1a00a6e6:	8afa      	ldrh	r2, [r7, #22]
1a00a6e8:	89fb      	ldrh	r3, [r7, #14]
1a00a6ea:	fbb2 f3f3 	udiv	r3, r2, r3
1a00a6ee:	b29b      	uxth	r3, r3
1a00a6f0:	b2db      	uxtb	r3, r3
1a00a6f2:	3b01      	subs	r3, #1
1a00a6f4:	b2da      	uxtb	r2, r3
1a00a6f6:	687b      	ldr	r3, [r7, #4]
1a00a6f8:	701a      	strb	r2, [r3, #0]
    return 0;
1a00a6fa:	2300      	movs	r3, #0
}
1a00a6fc:	4618      	mov	r0, r3
1a00a6fe:	3718      	adds	r7, #24
1a00a700:	46bd      	mov	sp, r7
1a00a702:	bd80      	pop	{r7, pc}
1a00a704:	10086034 	.word	0x10086034

1a00a708 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
1a00a708:	b580      	push	{r7, lr}
1a00a70a:	b084      	sub	sp, #16
1a00a70c:	af00      	add	r7, sp, #0
1a00a70e:	4603      	mov	r3, r0
1a00a710:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
1a00a712:	4b5f      	ldr	r3, [pc, #380]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a714:	7c9b      	ldrb	r3, [r3, #18]
1a00a716:	79fa      	ldrb	r2, [r7, #7]
1a00a718:	429a      	cmp	r2, r3
1a00a71a:	d101      	bne.n	1a00a720 <mpu_set_bypass+0x18>
        return 0;
1a00a71c:	2300      	movs	r3, #0
1a00a71e:	e0b2      	b.n	1a00a886 <mpu_set_bypass+0x17e>

    if (bypass_on) {
1a00a720:	79fb      	ldrb	r3, [r7, #7]
1a00a722:	2b00      	cmp	r3, #0
1a00a724:	d050      	beq.n	1a00a7c8 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
1a00a726:	4b5a      	ldr	r3, [pc, #360]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a728:	685b      	ldr	r3, [r3, #4]
1a00a72a:	7818      	ldrb	r0, [r3, #0]
1a00a72c:	4b58      	ldr	r3, [pc, #352]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a72e:	681b      	ldr	r3, [r3, #0]
1a00a730:	7919      	ldrb	r1, [r3, #4]
1a00a732:	f107 030f 	add.w	r3, r7, #15
1a00a736:	2201      	movs	r2, #1
1a00a738:	f7f8 fbf8 	bl	1a002f2c <i2c_read>
1a00a73c:	4603      	mov	r3, r0
1a00a73e:	2b00      	cmp	r3, #0
1a00a740:	d002      	beq.n	1a00a748 <mpu_set_bypass+0x40>
            return -1;
1a00a742:	f04f 33ff 	mov.w	r3, #4294967295
1a00a746:	e09e      	b.n	1a00a886 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
1a00a748:	7bfb      	ldrb	r3, [r7, #15]
1a00a74a:	f023 0320 	bic.w	r3, r3, #32
1a00a74e:	b2db      	uxtb	r3, r3
1a00a750:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
1a00a752:	4b4f      	ldr	r3, [pc, #316]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a754:	685b      	ldr	r3, [r3, #4]
1a00a756:	7818      	ldrb	r0, [r3, #0]
1a00a758:	4b4d      	ldr	r3, [pc, #308]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a75a:	681b      	ldr	r3, [r3, #0]
1a00a75c:	7919      	ldrb	r1, [r3, #4]
1a00a75e:	f107 030f 	add.w	r3, r7, #15
1a00a762:	2201      	movs	r2, #1
1a00a764:	f7f8 fbb4 	bl	1a002ed0 <i2c_write>
1a00a768:	4603      	mov	r3, r0
1a00a76a:	2b00      	cmp	r3, #0
1a00a76c:	d002      	beq.n	1a00a774 <mpu_set_bypass+0x6c>
            return -1;
1a00a76e:	f04f 33ff 	mov.w	r3, #4294967295
1a00a772:	e088      	b.n	1a00a886 <mpu_set_bypass+0x17e>
        delay_ms(3);
1a00a774:	2003      	movs	r0, #3
1a00a776:	f7fb ffc3 	bl	1a006700 <timerDelayMs>
        tmp = BIT_BYPASS_EN;
1a00a77a:	2302      	movs	r3, #2
1a00a77c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
1a00a77e:	4b44      	ldr	r3, [pc, #272]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a780:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
1a00a784:	2b00      	cmp	r3, #0
1a00a786:	d004      	beq.n	1a00a792 <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
1a00a788:	7bfb      	ldrb	r3, [r7, #15]
1a00a78a:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a00a78e:	b2db      	uxtb	r3, r3
1a00a790:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
1a00a792:	4b3f      	ldr	r3, [pc, #252]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a794:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
1a00a798:	2b00      	cmp	r3, #0
1a00a79a:	d004      	beq.n	1a00a7a6 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
1a00a79c:	7bfb      	ldrb	r3, [r7, #15]
1a00a79e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00a7a2:	b2db      	uxtb	r3, r3
1a00a7a4:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
1a00a7a6:	4b3a      	ldr	r3, [pc, #232]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a7a8:	685b      	ldr	r3, [r3, #4]
1a00a7aa:	7818      	ldrb	r0, [r3, #0]
1a00a7ac:	4b38      	ldr	r3, [pc, #224]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a7ae:	681b      	ldr	r3, [r3, #0]
1a00a7b0:	7dd9      	ldrb	r1, [r3, #23]
1a00a7b2:	f107 030f 	add.w	r3, r7, #15
1a00a7b6:	2201      	movs	r2, #1
1a00a7b8:	f7f8 fb8a 	bl	1a002ed0 <i2c_write>
1a00a7bc:	4603      	mov	r3, r0
1a00a7be:	2b00      	cmp	r3, #0
1a00a7c0:	d05d      	beq.n	1a00a87e <mpu_set_bypass+0x176>
            return -1;
1a00a7c2:	f04f 33ff 	mov.w	r3, #4294967295
1a00a7c6:	e05e      	b.n	1a00a886 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
1a00a7c8:	4b31      	ldr	r3, [pc, #196]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a7ca:	685b      	ldr	r3, [r3, #4]
1a00a7cc:	7818      	ldrb	r0, [r3, #0]
1a00a7ce:	4b30      	ldr	r3, [pc, #192]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a7d0:	681b      	ldr	r3, [r3, #0]
1a00a7d2:	7919      	ldrb	r1, [r3, #4]
1a00a7d4:	f107 030f 	add.w	r3, r7, #15
1a00a7d8:	2201      	movs	r2, #1
1a00a7da:	f7f8 fba7 	bl	1a002f2c <i2c_read>
1a00a7de:	4603      	mov	r3, r0
1a00a7e0:	2b00      	cmp	r3, #0
1a00a7e2:	d002      	beq.n	1a00a7ea <mpu_set_bypass+0xe2>
            return -1;
1a00a7e4:	f04f 33ff 	mov.w	r3, #4294967295
1a00a7e8:	e04d      	b.n	1a00a886 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
1a00a7ea:	4b29      	ldr	r3, [pc, #164]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a7ec:	7a9b      	ldrb	r3, [r3, #10]
1a00a7ee:	f003 0301 	and.w	r3, r3, #1
1a00a7f2:	2b00      	cmp	r3, #0
1a00a7f4:	d005      	beq.n	1a00a802 <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
1a00a7f6:	7bfb      	ldrb	r3, [r7, #15]
1a00a7f8:	f043 0320 	orr.w	r3, r3, #32
1a00a7fc:	b2db      	uxtb	r3, r3
1a00a7fe:	73fb      	strb	r3, [r7, #15]
1a00a800:	e004      	b.n	1a00a80c <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
1a00a802:	7bfb      	ldrb	r3, [r7, #15]
1a00a804:	f023 0320 	bic.w	r3, r3, #32
1a00a808:	b2db      	uxtb	r3, r3
1a00a80a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
1a00a80c:	4b20      	ldr	r3, [pc, #128]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a80e:	685b      	ldr	r3, [r3, #4]
1a00a810:	7818      	ldrb	r0, [r3, #0]
1a00a812:	4b1f      	ldr	r3, [pc, #124]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a814:	681b      	ldr	r3, [r3, #0]
1a00a816:	7919      	ldrb	r1, [r3, #4]
1a00a818:	f107 030f 	add.w	r3, r7, #15
1a00a81c:	2201      	movs	r2, #1
1a00a81e:	f7f8 fb57 	bl	1a002ed0 <i2c_write>
1a00a822:	4603      	mov	r3, r0
1a00a824:	2b00      	cmp	r3, #0
1a00a826:	d002      	beq.n	1a00a82e <mpu_set_bypass+0x126>
            return -1;
1a00a828:	f04f 33ff 	mov.w	r3, #4294967295
1a00a82c:	e02b      	b.n	1a00a886 <mpu_set_bypass+0x17e>
        delay_ms(3);
1a00a82e:	2003      	movs	r0, #3
1a00a830:	f7fb ff66 	bl	1a006700 <timerDelayMs>
        if (st.chip_cfg.active_low_int)
1a00a834:	4b16      	ldr	r3, [pc, #88]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a836:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
1a00a83a:	2b00      	cmp	r3, #0
1a00a83c:	d002      	beq.n	1a00a844 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
1a00a83e:	2380      	movs	r3, #128	; 0x80
1a00a840:	73fb      	strb	r3, [r7, #15]
1a00a842:	e001      	b.n	1a00a848 <mpu_set_bypass+0x140>
        else
            tmp = 0;
1a00a844:	2300      	movs	r3, #0
1a00a846:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
1a00a848:	4b11      	ldr	r3, [pc, #68]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a84a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
1a00a84e:	2b00      	cmp	r3, #0
1a00a850:	d004      	beq.n	1a00a85c <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
1a00a852:	7bfb      	ldrb	r3, [r7, #15]
1a00a854:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00a858:	b2db      	uxtb	r3, r3
1a00a85a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
1a00a85c:	4b0c      	ldr	r3, [pc, #48]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a85e:	685b      	ldr	r3, [r3, #4]
1a00a860:	7818      	ldrb	r0, [r3, #0]
1a00a862:	4b0b      	ldr	r3, [pc, #44]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a864:	681b      	ldr	r3, [r3, #0]
1a00a866:	7dd9      	ldrb	r1, [r3, #23]
1a00a868:	f107 030f 	add.w	r3, r7, #15
1a00a86c:	2201      	movs	r2, #1
1a00a86e:	f7f8 fb2f 	bl	1a002ed0 <i2c_write>
1a00a872:	4603      	mov	r3, r0
1a00a874:	2b00      	cmp	r3, #0
1a00a876:	d002      	beq.n	1a00a87e <mpu_set_bypass+0x176>
            return -1;
1a00a878:	f04f 33ff 	mov.w	r3, #4294967295
1a00a87c:	e003      	b.n	1a00a886 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
1a00a87e:	4a04      	ldr	r2, [pc, #16]	; (1a00a890 <mpu_set_bypass+0x188>)
1a00a880:	79fb      	ldrb	r3, [r7, #7]
1a00a882:	7493      	strb	r3, [r2, #18]
    return 0;
1a00a884:	2300      	movs	r3, #0
}
1a00a886:	4618      	mov	r0, r3
1a00a888:	3710      	adds	r7, #16
1a00a88a:	46bd      	mov	sp, r7
1a00a88c:	bd80      	pop	{r7, pc}
1a00a88e:	bf00      	nop
1a00a890:	10086034 	.word	0x10086034

1a00a894 <mpu_set_int_level>:
 *  @brief      Set interrupt level.
 *  @param[in]  active_low  1 for active low, 0 for active high.
 *  @return     0 if successful.
 */
int mpu_set_int_level(unsigned char active_low)
{
1a00a894:	b480      	push	{r7}
1a00a896:	b083      	sub	sp, #12
1a00a898:	af00      	add	r7, sp, #0
1a00a89a:	4603      	mov	r3, r0
1a00a89c:	71fb      	strb	r3, [r7, #7]
    st.chip_cfg.active_low_int = active_low;
1a00a89e:	4a05      	ldr	r2, [pc, #20]	; (1a00a8b4 <mpu_set_int_level+0x20>)
1a00a8a0:	79fb      	ldrb	r3, [r7, #7]
1a00a8a2:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    return 0;
1a00a8a6:	2300      	movs	r3, #0
}
1a00a8a8:	4618      	mov	r0, r3
1a00a8aa:	370c      	adds	r7, #12
1a00a8ac:	46bd      	mov	sp, r7
1a00a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00a8b2:	4770      	bx	lr
1a00a8b4:	10086034 	.word	0x10086034

1a00a8b8 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
1a00a8b8:	b580      	push	{r7, lr}
1a00a8ba:	b084      	sub	sp, #16
1a00a8bc:	af00      	add	r7, sp, #0
1a00a8be:	4603      	mov	r3, r0
1a00a8c0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
1a00a8c2:	4b1e      	ldr	r3, [pc, #120]	; (1a00a93c <mpu_set_int_latched+0x84>)
1a00a8c4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
1a00a8c8:	79fa      	ldrb	r2, [r7, #7]
1a00a8ca:	429a      	cmp	r2, r3
1a00a8cc:	d101      	bne.n	1a00a8d2 <mpu_set_int_latched+0x1a>
        return 0;
1a00a8ce:	2300      	movs	r3, #0
1a00a8d0:	e030      	b.n	1a00a934 <mpu_set_int_latched+0x7c>

    if (enable)
1a00a8d2:	79fb      	ldrb	r3, [r7, #7]
1a00a8d4:	2b00      	cmp	r3, #0
1a00a8d6:	d002      	beq.n	1a00a8de <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
1a00a8d8:	2330      	movs	r3, #48	; 0x30
1a00a8da:	73fb      	strb	r3, [r7, #15]
1a00a8dc:	e001      	b.n	1a00a8e2 <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
1a00a8de:	2300      	movs	r3, #0
1a00a8e0:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
1a00a8e2:	4b16      	ldr	r3, [pc, #88]	; (1a00a93c <mpu_set_int_latched+0x84>)
1a00a8e4:	7c9b      	ldrb	r3, [r3, #18]
1a00a8e6:	2b00      	cmp	r3, #0
1a00a8e8:	d004      	beq.n	1a00a8f4 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
1a00a8ea:	7bfb      	ldrb	r3, [r7, #15]
1a00a8ec:	f043 0302 	orr.w	r3, r3, #2
1a00a8f0:	b2db      	uxtb	r3, r3
1a00a8f2:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
1a00a8f4:	4b11      	ldr	r3, [pc, #68]	; (1a00a93c <mpu_set_int_latched+0x84>)
1a00a8f6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
1a00a8fa:	2b00      	cmp	r3, #0
1a00a8fc:	d004      	beq.n	1a00a908 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
1a00a8fe:	7bfb      	ldrb	r3, [r7, #15]
1a00a900:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a00a904:	b2db      	uxtb	r3, r3
1a00a906:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
1a00a908:	4b0c      	ldr	r3, [pc, #48]	; (1a00a93c <mpu_set_int_latched+0x84>)
1a00a90a:	685b      	ldr	r3, [r3, #4]
1a00a90c:	7818      	ldrb	r0, [r3, #0]
1a00a90e:	4b0b      	ldr	r3, [pc, #44]	; (1a00a93c <mpu_set_int_latched+0x84>)
1a00a910:	681b      	ldr	r3, [r3, #0]
1a00a912:	7dd9      	ldrb	r1, [r3, #23]
1a00a914:	f107 030f 	add.w	r3, r7, #15
1a00a918:	2201      	movs	r2, #1
1a00a91a:	f7f8 fad9 	bl	1a002ed0 <i2c_write>
1a00a91e:	4603      	mov	r3, r0
1a00a920:	2b00      	cmp	r3, #0
1a00a922:	d002      	beq.n	1a00a92a <mpu_set_int_latched+0x72>
        return -1;
1a00a924:	f04f 33ff 	mov.w	r3, #4294967295
1a00a928:	e004      	b.n	1a00a934 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
1a00a92a:	4a04      	ldr	r2, [pc, #16]	; (1a00a93c <mpu_set_int_latched+0x84>)
1a00a92c:	79fb      	ldrb	r3, [r7, #7]
1a00a92e:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
1a00a932:	2300      	movs	r3, #0
}
1a00a934:	4618      	mov	r0, r3
1a00a936:	3710      	adds	r7, #16
1a00a938:	46bd      	mov	sp, r7
1a00a93a:	bd80      	pop	{r7, pc}
1a00a93c:	10086034 	.word	0x10086034

1a00a940 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
1a00a940:	b580      	push	{r7, lr}
1a00a942:	b084      	sub	sp, #16
1a00a944:	af00      	add	r7, sp, #0
1a00a946:	4603      	mov	r3, r0
1a00a948:	603a      	str	r2, [r7, #0]
1a00a94a:	80fb      	strh	r3, [r7, #6]
1a00a94c:	460b      	mov	r3, r1
1a00a94e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
1a00a950:	683b      	ldr	r3, [r7, #0]
1a00a952:	2b00      	cmp	r3, #0
1a00a954:	d102      	bne.n	1a00a95c <mpu_write_mem+0x1c>
        return -1;
1a00a956:	f04f 33ff 	mov.w	r3, #4294967295
1a00a95a:	e03d      	b.n	1a00a9d8 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
1a00a95c:	4b20      	ldr	r3, [pc, #128]	; (1a00a9e0 <mpu_write_mem+0xa0>)
1a00a95e:	7a9b      	ldrb	r3, [r3, #10]
1a00a960:	2b00      	cmp	r3, #0
1a00a962:	d102      	bne.n	1a00a96a <mpu_write_mem+0x2a>
        return -1;
1a00a964:	f04f 33ff 	mov.w	r3, #4294967295
1a00a968:	e036      	b.n	1a00a9d8 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
1a00a96a:	88fb      	ldrh	r3, [r7, #6]
1a00a96c:	0a1b      	lsrs	r3, r3, #8
1a00a96e:	b29b      	uxth	r3, r3
1a00a970:	b2db      	uxtb	r3, r3
1a00a972:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
1a00a974:	88fb      	ldrh	r3, [r7, #6]
1a00a976:	b2db      	uxtb	r3, r3
1a00a978:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
1a00a97a:	7b7b      	ldrb	r3, [r7, #13]
1a00a97c:	461a      	mov	r2, r3
1a00a97e:	88bb      	ldrh	r3, [r7, #4]
1a00a980:	4413      	add	r3, r2
1a00a982:	4a17      	ldr	r2, [pc, #92]	; (1a00a9e0 <mpu_write_mem+0xa0>)
1a00a984:	6852      	ldr	r2, [r2, #4]
1a00a986:	8952      	ldrh	r2, [r2, #10]
1a00a988:	4293      	cmp	r3, r2
1a00a98a:	dd02      	ble.n	1a00a992 <mpu_write_mem+0x52>
        return -1;
1a00a98c:	f04f 33ff 	mov.w	r3, #4294967295
1a00a990:	e022      	b.n	1a00a9d8 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
1a00a992:	4b13      	ldr	r3, [pc, #76]	; (1a00a9e0 <mpu_write_mem+0xa0>)
1a00a994:	685b      	ldr	r3, [r3, #4]
1a00a996:	7818      	ldrb	r0, [r3, #0]
1a00a998:	4b11      	ldr	r3, [pc, #68]	; (1a00a9e0 <mpu_write_mem+0xa0>)
1a00a99a:	681b      	ldr	r3, [r3, #0]
1a00a99c:	7ed9      	ldrb	r1, [r3, #27]
1a00a99e:	f107 030c 	add.w	r3, r7, #12
1a00a9a2:	2202      	movs	r2, #2
1a00a9a4:	f7f8 fa94 	bl	1a002ed0 <i2c_write>
1a00a9a8:	4603      	mov	r3, r0
1a00a9aa:	2b00      	cmp	r3, #0
1a00a9ac:	d002      	beq.n	1a00a9b4 <mpu_write_mem+0x74>
        return -1;
1a00a9ae:	f04f 33ff 	mov.w	r3, #4294967295
1a00a9b2:	e011      	b.n	1a00a9d8 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
1a00a9b4:	4b0a      	ldr	r3, [pc, #40]	; (1a00a9e0 <mpu_write_mem+0xa0>)
1a00a9b6:	685b      	ldr	r3, [r3, #4]
1a00a9b8:	7818      	ldrb	r0, [r3, #0]
1a00a9ba:	4b09      	ldr	r3, [pc, #36]	; (1a00a9e0 <mpu_write_mem+0xa0>)
1a00a9bc:	681b      	ldr	r3, [r3, #0]
1a00a9be:	7e19      	ldrb	r1, [r3, #24]
1a00a9c0:	88bb      	ldrh	r3, [r7, #4]
1a00a9c2:	b2da      	uxtb	r2, r3
1a00a9c4:	683b      	ldr	r3, [r7, #0]
1a00a9c6:	f7f8 fa83 	bl	1a002ed0 <i2c_write>
1a00a9ca:	4603      	mov	r3, r0
1a00a9cc:	2b00      	cmp	r3, #0
1a00a9ce:	d002      	beq.n	1a00a9d6 <mpu_write_mem+0x96>
        return -1;
1a00a9d0:	f04f 33ff 	mov.w	r3, #4294967295
1a00a9d4:	e000      	b.n	1a00a9d8 <mpu_write_mem+0x98>
    return 0;
1a00a9d6:	2300      	movs	r3, #0
}
1a00a9d8:	4618      	mov	r0, r3
1a00a9da:	3710      	adds	r7, #16
1a00a9dc:	46bd      	mov	sp, r7
1a00a9de:	bd80      	pop	{r7, pc}
1a00a9e0:	10086034 	.word	0x10086034

1a00a9e4 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
1a00a9e4:	b580      	push	{r7, lr}
1a00a9e6:	b084      	sub	sp, #16
1a00a9e8:	af00      	add	r7, sp, #0
1a00a9ea:	4603      	mov	r3, r0
1a00a9ec:	603a      	str	r2, [r7, #0]
1a00a9ee:	80fb      	strh	r3, [r7, #6]
1a00a9f0:	460b      	mov	r3, r1
1a00a9f2:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
1a00a9f4:	683b      	ldr	r3, [r7, #0]
1a00a9f6:	2b00      	cmp	r3, #0
1a00a9f8:	d102      	bne.n	1a00aa00 <mpu_read_mem+0x1c>
        return -1;
1a00a9fa:	f04f 33ff 	mov.w	r3, #4294967295
1a00a9fe:	e03d      	b.n	1a00aa7c <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
1a00aa00:	4b20      	ldr	r3, [pc, #128]	; (1a00aa84 <mpu_read_mem+0xa0>)
1a00aa02:	7a9b      	ldrb	r3, [r3, #10]
1a00aa04:	2b00      	cmp	r3, #0
1a00aa06:	d102      	bne.n	1a00aa0e <mpu_read_mem+0x2a>
        return -1;
1a00aa08:	f04f 33ff 	mov.w	r3, #4294967295
1a00aa0c:	e036      	b.n	1a00aa7c <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
1a00aa0e:	88fb      	ldrh	r3, [r7, #6]
1a00aa10:	0a1b      	lsrs	r3, r3, #8
1a00aa12:	b29b      	uxth	r3, r3
1a00aa14:	b2db      	uxtb	r3, r3
1a00aa16:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
1a00aa18:	88fb      	ldrh	r3, [r7, #6]
1a00aa1a:	b2db      	uxtb	r3, r3
1a00aa1c:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
1a00aa1e:	7b7b      	ldrb	r3, [r7, #13]
1a00aa20:	461a      	mov	r2, r3
1a00aa22:	88bb      	ldrh	r3, [r7, #4]
1a00aa24:	4413      	add	r3, r2
1a00aa26:	4a17      	ldr	r2, [pc, #92]	; (1a00aa84 <mpu_read_mem+0xa0>)
1a00aa28:	6852      	ldr	r2, [r2, #4]
1a00aa2a:	8952      	ldrh	r2, [r2, #10]
1a00aa2c:	4293      	cmp	r3, r2
1a00aa2e:	dd02      	ble.n	1a00aa36 <mpu_read_mem+0x52>
        return -1;
1a00aa30:	f04f 33ff 	mov.w	r3, #4294967295
1a00aa34:	e022      	b.n	1a00aa7c <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
1a00aa36:	4b13      	ldr	r3, [pc, #76]	; (1a00aa84 <mpu_read_mem+0xa0>)
1a00aa38:	685b      	ldr	r3, [r3, #4]
1a00aa3a:	7818      	ldrb	r0, [r3, #0]
1a00aa3c:	4b11      	ldr	r3, [pc, #68]	; (1a00aa84 <mpu_read_mem+0xa0>)
1a00aa3e:	681b      	ldr	r3, [r3, #0]
1a00aa40:	7ed9      	ldrb	r1, [r3, #27]
1a00aa42:	f107 030c 	add.w	r3, r7, #12
1a00aa46:	2202      	movs	r2, #2
1a00aa48:	f7f8 fa42 	bl	1a002ed0 <i2c_write>
1a00aa4c:	4603      	mov	r3, r0
1a00aa4e:	2b00      	cmp	r3, #0
1a00aa50:	d002      	beq.n	1a00aa58 <mpu_read_mem+0x74>
        return -1;
1a00aa52:	f04f 33ff 	mov.w	r3, #4294967295
1a00aa56:	e011      	b.n	1a00aa7c <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
1a00aa58:	4b0a      	ldr	r3, [pc, #40]	; (1a00aa84 <mpu_read_mem+0xa0>)
1a00aa5a:	685b      	ldr	r3, [r3, #4]
1a00aa5c:	7818      	ldrb	r0, [r3, #0]
1a00aa5e:	4b09      	ldr	r3, [pc, #36]	; (1a00aa84 <mpu_read_mem+0xa0>)
1a00aa60:	681b      	ldr	r3, [r3, #0]
1a00aa62:	7e19      	ldrb	r1, [r3, #24]
1a00aa64:	88bb      	ldrh	r3, [r7, #4]
1a00aa66:	b2da      	uxtb	r2, r3
1a00aa68:	683b      	ldr	r3, [r7, #0]
1a00aa6a:	f7f8 fa5f 	bl	1a002f2c <i2c_read>
1a00aa6e:	4603      	mov	r3, r0
1a00aa70:	2b00      	cmp	r3, #0
1a00aa72:	d002      	beq.n	1a00aa7a <mpu_read_mem+0x96>
        return -1;
1a00aa74:	f04f 33ff 	mov.w	r3, #4294967295
1a00aa78:	e000      	b.n	1a00aa7c <mpu_read_mem+0x98>
    return 0;
1a00aa7a:	2300      	movs	r3, #0
}
1a00aa7c:	4618      	mov	r0, r3
1a00aa7e:	3710      	adds	r7, #16
1a00aa80:	46bd      	mov	sp, r7
1a00aa82:	bd80      	pop	{r7, pc}
1a00aa84:	10086034 	.word	0x10086034

1a00aa88 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
1a00aa88:	b580      	push	{r7, lr}
1a00aa8a:	b08a      	sub	sp, #40	; 0x28
1a00aa8c:	af00      	add	r7, sp, #0
1a00aa8e:	60b9      	str	r1, [r7, #8]
1a00aa90:	4611      	mov	r1, r2
1a00aa92:	461a      	mov	r2, r3
1a00aa94:	4603      	mov	r3, r0
1a00aa96:	81fb      	strh	r3, [r7, #14]
1a00aa98:	460b      	mov	r3, r1
1a00aa9a:	81bb      	strh	r3, [r7, #12]
1a00aa9c:	4613      	mov	r3, r2
1a00aa9e:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
1a00aaa0:	4b37      	ldr	r3, [pc, #220]	; (1a00ab80 <mpu_load_firmware+0xf8>)
1a00aaa2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
1a00aaa6:	2b00      	cmp	r3, #0
1a00aaa8:	d002      	beq.n	1a00aab0 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
1a00aaaa:	f04f 33ff 	mov.w	r3, #4294967295
1a00aaae:	e062      	b.n	1a00ab76 <mpu_load_firmware+0xee>

    if (!firmware)
1a00aab0:	68bb      	ldr	r3, [r7, #8]
1a00aab2:	2b00      	cmp	r3, #0
1a00aab4:	d102      	bne.n	1a00aabc <mpu_load_firmware+0x34>
        return -1;
1a00aab6:	f04f 33ff 	mov.w	r3, #4294967295
1a00aaba:	e05c      	b.n	1a00ab76 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
1a00aabc:	2300      	movs	r3, #0
1a00aabe:	84fb      	strh	r3, [r7, #38]	; 0x26
1a00aac0:	e034      	b.n	1a00ab2c <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
1a00aac2:	89fa      	ldrh	r2, [r7, #14]
1a00aac4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
1a00aac6:	1ad3      	subs	r3, r2, r3
1a00aac8:	2b10      	cmp	r3, #16
1a00aaca:	bfa8      	it	ge
1a00aacc:	2310      	movge	r3, #16
1a00aace:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
1a00aad0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
1a00aad2:	68ba      	ldr	r2, [r7, #8]
1a00aad4:	441a      	add	r2, r3
1a00aad6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
1a00aad8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
1a00aada:	4618      	mov	r0, r3
1a00aadc:	f7ff ff30 	bl	1a00a940 <mpu_write_mem>
1a00aae0:	4603      	mov	r3, r0
1a00aae2:	2b00      	cmp	r3, #0
1a00aae4:	d002      	beq.n	1a00aaec <mpu_load_firmware+0x64>
            return -1;
1a00aae6:	f04f 33ff 	mov.w	r3, #4294967295
1a00aaea:	e044      	b.n	1a00ab76 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
1a00aaec:	f107 0214 	add.w	r2, r7, #20
1a00aaf0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
1a00aaf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
1a00aaf4:	4618      	mov	r0, r3
1a00aaf6:	f7ff ff75 	bl	1a00a9e4 <mpu_read_mem>
1a00aafa:	4603      	mov	r3, r0
1a00aafc:	2b00      	cmp	r3, #0
1a00aafe:	d002      	beq.n	1a00ab06 <mpu_load_firmware+0x7e>
            return -1;
1a00ab00:	f04f 33ff 	mov.w	r3, #4294967295
1a00ab04:	e037      	b.n	1a00ab76 <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
1a00ab06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
1a00ab08:	68ba      	ldr	r2, [r7, #8]
1a00ab0a:	4413      	add	r3, r2
1a00ab0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
1a00ab0e:	f107 0114 	add.w	r1, r7, #20
1a00ab12:	4618      	mov	r0, r3
1a00ab14:	f00a f834 	bl	1a014b80 <memcmp>
1a00ab18:	4603      	mov	r3, r0
1a00ab1a:	2b00      	cmp	r3, #0
1a00ab1c:	d002      	beq.n	1a00ab24 <mpu_load_firmware+0x9c>
            return -2;
1a00ab1e:	f06f 0301 	mvn.w	r3, #1
1a00ab22:	e028      	b.n	1a00ab76 <mpu_load_firmware+0xee>
        /* DMP should only be loaded once. */
        return -1;

    if (!firmware)
        return -1;
    for (ii = 0; ii < length; ii += this_write) {
1a00ab24:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
1a00ab26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
1a00ab28:	4413      	add	r3, r2
1a00ab2a:	84fb      	strh	r3, [r7, #38]	; 0x26
1a00ab2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
1a00ab2e:	89fb      	ldrh	r3, [r7, #14]
1a00ab30:	429a      	cmp	r2, r3
1a00ab32:	d3c6      	bcc.n	1a00aac2 <mpu_load_firmware+0x3a>
        if (memcmp(firmware+ii, cur, this_write))
            return -2;
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
1a00ab34:	89bb      	ldrh	r3, [r7, #12]
1a00ab36:	0a1b      	lsrs	r3, r3, #8
1a00ab38:	b29b      	uxth	r3, r3
1a00ab3a:	b2db      	uxtb	r3, r3
1a00ab3c:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
1a00ab3e:	89bb      	ldrh	r3, [r7, #12]
1a00ab40:	b2db      	uxtb	r3, r3
1a00ab42:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
1a00ab44:	4b0e      	ldr	r3, [pc, #56]	; (1a00ab80 <mpu_load_firmware+0xf8>)
1a00ab46:	685b      	ldr	r3, [r3, #4]
1a00ab48:	7818      	ldrb	r0, [r3, #0]
1a00ab4a:	4b0d      	ldr	r3, [pc, #52]	; (1a00ab80 <mpu_load_firmware+0xf8>)
1a00ab4c:	681b      	ldr	r3, [r3, #0]
1a00ab4e:	7f59      	ldrb	r1, [r3, #29]
1a00ab50:	f107 0310 	add.w	r3, r7, #16
1a00ab54:	2202      	movs	r2, #2
1a00ab56:	f7f8 f9bb 	bl	1a002ed0 <i2c_write>
1a00ab5a:	4603      	mov	r3, r0
1a00ab5c:	2b00      	cmp	r3, #0
1a00ab5e:	d002      	beq.n	1a00ab66 <mpu_load_firmware+0xde>
        return -1;
1a00ab60:	f04f 33ff 	mov.w	r3, #4294967295
1a00ab64:	e007      	b.n	1a00ab76 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
1a00ab66:	4b06      	ldr	r3, [pc, #24]	; (1a00ab80 <mpu_load_firmware+0xf8>)
1a00ab68:	2201      	movs	r2, #1
1a00ab6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
1a00ab6e:	4a04      	ldr	r2, [pc, #16]	; (1a00ab80 <mpu_load_firmware+0xf8>)
1a00ab70:	88fb      	ldrh	r3, [r7, #6]
1a00ab72:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
1a00ab74:	2300      	movs	r3, #0
}
1a00ab76:	4618      	mov	r0, r3
1a00ab78:	3728      	adds	r7, #40	; 0x28
1a00ab7a:	46bd      	mov	sp, r7
1a00ab7c:	bd80      	pop	{r7, pc}
1a00ab7e:	bf00      	nop
1a00ab80:	10086034 	.word	0x10086034

1a00ab84 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
1a00ab84:	b580      	push	{r7, lr}
1a00ab86:	b084      	sub	sp, #16
1a00ab88:	af00      	add	r7, sp, #0
1a00ab8a:	4603      	mov	r3, r0
1a00ab8c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
1a00ab8e:	4b26      	ldr	r3, [pc, #152]	; (1a00ac28 <mpu_set_dmp_state+0xa4>)
1a00ab90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a00ab94:	79fa      	ldrb	r2, [r7, #7]
1a00ab96:	429a      	cmp	r2, r3
1a00ab98:	d101      	bne.n	1a00ab9e <mpu_set_dmp_state+0x1a>
        return 0;
1a00ab9a:	2300      	movs	r3, #0
1a00ab9c:	e040      	b.n	1a00ac20 <mpu_set_dmp_state+0x9c>

    if (enable) {
1a00ab9e:	79fb      	ldrb	r3, [r7, #7]
1a00aba0:	2b00      	cmp	r3, #0
1a00aba2:	d027      	beq.n	1a00abf4 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
1a00aba4:	4b20      	ldr	r3, [pc, #128]	; (1a00ac28 <mpu_set_dmp_state+0xa4>)
1a00aba6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
1a00abaa:	2b00      	cmp	r3, #0
1a00abac:	d102      	bne.n	1a00abb4 <mpu_set_dmp_state+0x30>
            return -1;
1a00abae:	f04f 33ff 	mov.w	r3, #4294967295
1a00abb2:	e035      	b.n	1a00ac20 <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
1a00abb4:	2000      	movs	r0, #0
1a00abb6:	f7fe fecf 	bl	1a009958 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
1a00abba:	2000      	movs	r0, #0
1a00abbc:	f7ff fda4 	bl	1a00a708 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
1a00abc0:	4b19      	ldr	r3, [pc, #100]	; (1a00ac28 <mpu_set_dmp_state+0xa4>)
1a00abc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
1a00abc4:	4618      	mov	r0, r3
1a00abc6:	f7ff fb43 	bl	1a00a250 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
1a00abca:	2300      	movs	r3, #0
1a00abcc:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
1a00abce:	4b16      	ldr	r3, [pc, #88]	; (1a00ac28 <mpu_set_dmp_state+0xa4>)
1a00abd0:	685b      	ldr	r3, [r3, #4]
1a00abd2:	7818      	ldrb	r0, [r3, #0]
1a00abd4:	f107 030f 	add.w	r3, r7, #15
1a00abd8:	2201      	movs	r2, #1
1a00abda:	2123      	movs	r1, #35	; 0x23
1a00abdc:	f7f8 f978 	bl	1a002ed0 <i2c_write>
        st.chip_cfg.dmp_on = 1;
1a00abe0:	4b11      	ldr	r3, [pc, #68]	; (1a00ac28 <mpu_set_dmp_state+0xa4>)
1a00abe2:	2201      	movs	r2, #1
1a00abe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
1a00abe8:	2001      	movs	r0, #1
1a00abea:	f7fe feb5 	bl	1a009958 <set_int_enable>
        mpu_reset_fifo();
1a00abee:	f7ff f89b 	bl	1a009d28 <mpu_reset_fifo>
1a00abf2:	e014      	b.n	1a00ac1e <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
1a00abf4:	2000      	movs	r0, #0
1a00abf6:	f7fe feaf 	bl	1a009958 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
1a00abfa:	4b0b      	ldr	r3, [pc, #44]	; (1a00ac28 <mpu_set_dmp_state+0xa4>)
1a00abfc:	7c1b      	ldrb	r3, [r3, #16]
1a00abfe:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
1a00ac00:	4b09      	ldr	r3, [pc, #36]	; (1a00ac28 <mpu_set_dmp_state+0xa4>)
1a00ac02:	685b      	ldr	r3, [r3, #4]
1a00ac04:	7818      	ldrb	r0, [r3, #0]
1a00ac06:	f107 030f 	add.w	r3, r7, #15
1a00ac0a:	2201      	movs	r2, #1
1a00ac0c:	2123      	movs	r1, #35	; 0x23
1a00ac0e:	f7f8 f95f 	bl	1a002ed0 <i2c_write>
        st.chip_cfg.dmp_on = 0;
1a00ac12:	4b05      	ldr	r3, [pc, #20]	; (1a00ac28 <mpu_set_dmp_state+0xa4>)
1a00ac14:	2200      	movs	r2, #0
1a00ac16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
1a00ac1a:	f7ff f885 	bl	1a009d28 <mpu_reset_fifo>
    }
    return 0;
1a00ac1e:	2300      	movs	r3, #0
}
1a00ac20:	4618      	mov	r0, r3
1a00ac22:	3710      	adds	r7, #16
1a00ac24:	46bd      	mov	sp, r7
1a00ac26:	bd80      	pop	{r7, pc}
1a00ac28:	10086034 	.word	0x10086034

1a00ac2c <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
1a00ac2c:	b580      	push	{r7, lr}
1a00ac2e:	b084      	sub	sp, #16
1a00ac30:	af00      	add	r7, sp, #0
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
1a00ac32:	2001      	movs	r0, #1
1a00ac34:	f7ff fd68 	bl	1a00a708 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
1a00ac38:	230c      	movs	r3, #12
1a00ac3a:	73fb      	strb	r3, [r7, #15]
1a00ac3c:	e00f      	b.n	1a00ac5e <setup_compass+0x32>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
1a00ac3e:	1d3b      	adds	r3, r7, #4
1a00ac40:	7bf8      	ldrb	r0, [r7, #15]
1a00ac42:	2201      	movs	r2, #1
1a00ac44:	2100      	movs	r1, #0
1a00ac46:	f7f8 f971 	bl	1a002f2c <i2c_read>
1a00ac4a:	60b8      	str	r0, [r7, #8]
        if (!result && (data[0] == AKM_WHOAMI))
1a00ac4c:	68bb      	ldr	r3, [r7, #8]
1a00ac4e:	2b00      	cmp	r3, #0
1a00ac50:	d102      	bne.n	1a00ac58 <setup_compass+0x2c>
1a00ac52:	793b      	ldrb	r3, [r7, #4]
1a00ac54:	2b48      	cmp	r3, #72	; 0x48
1a00ac56:	d006      	beq.n	1a00ac66 <setup_compass+0x3a>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
1a00ac58:	7bfb      	ldrb	r3, [r7, #15]
1a00ac5a:	3301      	adds	r3, #1
1a00ac5c:	73fb      	strb	r3, [r7, #15]
1a00ac5e:	7bfb      	ldrb	r3, [r7, #15]
1a00ac60:	2b0f      	cmp	r3, #15
1a00ac62:	d9ec      	bls.n	1a00ac3e <setup_compass+0x12>
1a00ac64:	e000      	b.n	1a00ac68 <setup_compass+0x3c>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
1a00ac66:	bf00      	nop
    }

    if (akm_addr > 0x0F) {
1a00ac68:	7bfb      	ldrb	r3, [r7, #15]
1a00ac6a:	2b0f      	cmp	r3, #15
1a00ac6c:	d905      	bls.n	1a00ac7a <setup_compass+0x4e>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
1a00ac6e:	4898      	ldr	r0, [pc, #608]	; (1a00aed0 <setup_compass+0x2a4>)
1a00ac70:	f7fc f808 	bl	1a006c84 <xprintf>
        return -1;
1a00ac74:	f04f 33ff 	mov.w	r3, #4294967295
1a00ac78:	e125      	b.n	1a00aec6 <setup_compass+0x29a>
    }

    st.chip_cfg.compass_addr = akm_addr;
1a00ac7a:	4a96      	ldr	r2, [pc, #600]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ac7c:	7bfb      	ldrb	r3, [r7, #15]
1a00ac7e:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

    data[0] = AKM_POWER_DOWN;
1a00ac82:	2300      	movs	r3, #0
1a00ac84:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1a00ac86:	4b93      	ldr	r3, [pc, #588]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ac88:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
1a00ac8c:	1d3b      	adds	r3, r7, #4
1a00ac8e:	2201      	movs	r2, #1
1a00ac90:	210a      	movs	r1, #10
1a00ac92:	f7f8 f91d 	bl	1a002ed0 <i2c_write>
1a00ac96:	4603      	mov	r3, r0
1a00ac98:	2b00      	cmp	r3, #0
1a00ac9a:	d002      	beq.n	1a00aca2 <setup_compass+0x76>
        return -1;
1a00ac9c:	f04f 33ff 	mov.w	r3, #4294967295
1a00aca0:	e111      	b.n	1a00aec6 <setup_compass+0x29a>
    delay_ms(1);
1a00aca2:	2001      	movs	r0, #1
1a00aca4:	f7fb fd2c 	bl	1a006700 <timerDelayMs>

    data[0] = AKM_FUSE_ROM_ACCESS;
1a00aca8:	230f      	movs	r3, #15
1a00acaa:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1a00acac:	4b89      	ldr	r3, [pc, #548]	; (1a00aed4 <setup_compass+0x2a8>)
1a00acae:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
1a00acb2:	1d3b      	adds	r3, r7, #4
1a00acb4:	2201      	movs	r2, #1
1a00acb6:	210a      	movs	r1, #10
1a00acb8:	f7f8 f90a 	bl	1a002ed0 <i2c_write>
1a00acbc:	4603      	mov	r3, r0
1a00acbe:	2b00      	cmp	r3, #0
1a00acc0:	d002      	beq.n	1a00acc8 <setup_compass+0x9c>
        return -1;
1a00acc2:	f04f 33ff 	mov.w	r3, #4294967295
1a00acc6:	e0fe      	b.n	1a00aec6 <setup_compass+0x29a>
    delay_ms(1);
1a00acc8:	2001      	movs	r0, #1
1a00acca:	f7fb fd19 	bl	1a006700 <timerDelayMs>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
1a00acce:	4b81      	ldr	r3, [pc, #516]	; (1a00aed4 <setup_compass+0x2a8>)
1a00acd0:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
1a00acd4:	1d3b      	adds	r3, r7, #4
1a00acd6:	2203      	movs	r2, #3
1a00acd8:	2110      	movs	r1, #16
1a00acda:	f7f8 f927 	bl	1a002f2c <i2c_read>
1a00acde:	4603      	mov	r3, r0
1a00ace0:	2b00      	cmp	r3, #0
1a00ace2:	d002      	beq.n	1a00acea <setup_compass+0xbe>
        return -1;
1a00ace4:	f04f 33ff 	mov.w	r3, #4294967295
1a00ace8:	e0ed      	b.n	1a00aec6 <setup_compass+0x29a>
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
1a00acea:	793b      	ldrb	r3, [r7, #4]
1a00acec:	b29b      	uxth	r3, r3
1a00acee:	3380      	adds	r3, #128	; 0x80
1a00acf0:	b29b      	uxth	r3, r3
1a00acf2:	b29a      	uxth	r2, r3
1a00acf4:	4b77      	ldr	r3, [pc, #476]	; (1a00aed4 <setup_compass+0x2a8>)
1a00acf6:	859a      	strh	r2, [r3, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
1a00acf8:	797b      	ldrb	r3, [r7, #5]
1a00acfa:	b29b      	uxth	r3, r3
1a00acfc:	3380      	adds	r3, #128	; 0x80
1a00acfe:	b29b      	uxth	r3, r3
1a00ad00:	b29a      	uxth	r2, r3
1a00ad02:	4b74      	ldr	r3, [pc, #464]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ad04:	85da      	strh	r2, [r3, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
1a00ad06:	79bb      	ldrb	r3, [r7, #6]
1a00ad08:	b29b      	uxth	r3, r3
1a00ad0a:	3380      	adds	r3, #128	; 0x80
1a00ad0c:	b29b      	uxth	r3, r3
1a00ad0e:	b29a      	uxth	r2, r3
1a00ad10:	4b70      	ldr	r3, [pc, #448]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ad12:	861a      	strh	r2, [r3, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
1a00ad14:	2300      	movs	r3, #0
1a00ad16:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1a00ad18:	4b6e      	ldr	r3, [pc, #440]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ad1a:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
1a00ad1e:	1d3b      	adds	r3, r7, #4
1a00ad20:	2201      	movs	r2, #1
1a00ad22:	210a      	movs	r1, #10
1a00ad24:	f7f8 f8d4 	bl	1a002ed0 <i2c_write>
1a00ad28:	4603      	mov	r3, r0
1a00ad2a:	2b00      	cmp	r3, #0
1a00ad2c:	d002      	beq.n	1a00ad34 <setup_compass+0x108>
        return -1;
1a00ad2e:	f04f 33ff 	mov.w	r3, #4294967295
1a00ad32:	e0c8      	b.n	1a00aec6 <setup_compass+0x29a>
    delay_ms(1);
1a00ad34:	2001      	movs	r0, #1
1a00ad36:	f7fb fce3 	bl	1a006700 <timerDelayMs>

    mpu_set_bypass(0);
1a00ad3a:	2000      	movs	r0, #0
1a00ad3c:	f7ff fce4 	bl	1a00a708 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
1a00ad40:	2340      	movs	r3, #64	; 0x40
1a00ad42:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
1a00ad44:	4b63      	ldr	r3, [pc, #396]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ad46:	685b      	ldr	r3, [r3, #4]
1a00ad48:	7818      	ldrb	r0, [r3, #0]
1a00ad4a:	4b62      	ldr	r3, [pc, #392]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ad4c:	681b      	ldr	r3, [r3, #0]
1a00ad4e:	7e99      	ldrb	r1, [r3, #26]
1a00ad50:	1d3b      	adds	r3, r7, #4
1a00ad52:	2201      	movs	r2, #1
1a00ad54:	f7f8 f8bc 	bl	1a002ed0 <i2c_write>
1a00ad58:	4603      	mov	r3, r0
1a00ad5a:	2b00      	cmp	r3, #0
1a00ad5c:	d002      	beq.n	1a00ad64 <setup_compass+0x138>
        return -1;
1a00ad5e:	f04f 33ff 	mov.w	r3, #4294967295
1a00ad62:	e0b0      	b.n	1a00aec6 <setup_compass+0x29a>

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
1a00ad64:	4b5b      	ldr	r3, [pc, #364]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ad66:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
1a00ad6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a00ad6e:	b2db      	uxtb	r3, r3
1a00ad70:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
1a00ad72:	4b58      	ldr	r3, [pc, #352]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ad74:	685b      	ldr	r3, [r3, #4]
1a00ad76:	7818      	ldrb	r0, [r3, #0]
1a00ad78:	4b56      	ldr	r3, [pc, #344]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ad7a:	681b      	ldr	r3, [r3, #0]
1a00ad7c:	7f99      	ldrb	r1, [r3, #30]
1a00ad7e:	1d3b      	adds	r3, r7, #4
1a00ad80:	2201      	movs	r2, #1
1a00ad82:	f7f8 f8a5 	bl	1a002ed0 <i2c_write>
1a00ad86:	4603      	mov	r3, r0
1a00ad88:	2b00      	cmp	r3, #0
1a00ad8a:	d002      	beq.n	1a00ad92 <setup_compass+0x166>
        return -1;
1a00ad8c:	f04f 33ff 	mov.w	r3, #4294967295
1a00ad90:	e099      	b.n	1a00aec6 <setup_compass+0x29a>

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
1a00ad92:	2302      	movs	r3, #2
1a00ad94:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
1a00ad96:	4b4f      	ldr	r3, [pc, #316]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ad98:	685b      	ldr	r3, [r3, #4]
1a00ad9a:	7818      	ldrb	r0, [r3, #0]
1a00ad9c:	4b4d      	ldr	r3, [pc, #308]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ad9e:	681b      	ldr	r3, [r3, #0]
1a00ada0:	7fd9      	ldrb	r1, [r3, #31]
1a00ada2:	1d3b      	adds	r3, r7, #4
1a00ada4:	2201      	movs	r2, #1
1a00ada6:	f7f8 f893 	bl	1a002ed0 <i2c_write>
1a00adaa:	4603      	mov	r3, r0
1a00adac:	2b00      	cmp	r3, #0
1a00adae:	d002      	beq.n	1a00adb6 <setup_compass+0x18a>
        return -1;
1a00adb0:	f04f 33ff 	mov.w	r3, #4294967295
1a00adb4:	e087      	b.n	1a00aec6 <setup_compass+0x29a>

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
1a00adb6:	2388      	movs	r3, #136	; 0x88
1a00adb8:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
1a00adba:	4b46      	ldr	r3, [pc, #280]	; (1a00aed4 <setup_compass+0x2a8>)
1a00adbc:	685b      	ldr	r3, [r3, #4]
1a00adbe:	7818      	ldrb	r0, [r3, #0]
1a00adc0:	4b44      	ldr	r3, [pc, #272]	; (1a00aed4 <setup_compass+0x2a8>)
1a00adc2:	681b      	ldr	r3, [r3, #0]
1a00adc4:	f893 1020 	ldrb.w	r1, [r3, #32]
1a00adc8:	1d3b      	adds	r3, r7, #4
1a00adca:	2201      	movs	r2, #1
1a00adcc:	f7f8 f880 	bl	1a002ed0 <i2c_write>
1a00add0:	4603      	mov	r3, r0
1a00add2:	2b00      	cmp	r3, #0
1a00add4:	d002      	beq.n	1a00addc <setup_compass+0x1b0>
        return -1;
1a00add6:	f04f 33ff 	mov.w	r3, #4294967295
1a00adda:	e074      	b.n	1a00aec6 <setup_compass+0x29a>

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
1a00addc:	4b3d      	ldr	r3, [pc, #244]	; (1a00aed4 <setup_compass+0x2a8>)
1a00adde:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
1a00ade2:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
1a00ade4:	4b3b      	ldr	r3, [pc, #236]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ade6:	685b      	ldr	r3, [r3, #4]
1a00ade8:	7818      	ldrb	r0, [r3, #0]
1a00adea:	4b3a      	ldr	r3, [pc, #232]	; (1a00aed4 <setup_compass+0x2a8>)
1a00adec:	681b      	ldr	r3, [r3, #0]
1a00adee:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
1a00adf2:	1d3b      	adds	r3, r7, #4
1a00adf4:	2201      	movs	r2, #1
1a00adf6:	f7f8 f86b 	bl	1a002ed0 <i2c_write>
1a00adfa:	4603      	mov	r3, r0
1a00adfc:	2b00      	cmp	r3, #0
1a00adfe:	d002      	beq.n	1a00ae06 <setup_compass+0x1da>
        return -1;
1a00ae00:	f04f 33ff 	mov.w	r3, #4294967295
1a00ae04:	e05f      	b.n	1a00aec6 <setup_compass+0x29a>

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
1a00ae06:	230a      	movs	r3, #10
1a00ae08:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
1a00ae0a:	4b32      	ldr	r3, [pc, #200]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ae0c:	685b      	ldr	r3, [r3, #4]
1a00ae0e:	7818      	ldrb	r0, [r3, #0]
1a00ae10:	4b30      	ldr	r3, [pc, #192]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ae12:	681b      	ldr	r3, [r3, #0]
1a00ae14:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
1a00ae18:	1d3b      	adds	r3, r7, #4
1a00ae1a:	2201      	movs	r2, #1
1a00ae1c:	f7f8 f858 	bl	1a002ed0 <i2c_write>
1a00ae20:	4603      	mov	r3, r0
1a00ae22:	2b00      	cmp	r3, #0
1a00ae24:	d002      	beq.n	1a00ae2c <setup_compass+0x200>
        return -1;
1a00ae26:	f04f 33ff 	mov.w	r3, #4294967295
1a00ae2a:	e04c      	b.n	1a00aec6 <setup_compass+0x29a>

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
1a00ae2c:	2381      	movs	r3, #129	; 0x81
1a00ae2e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
1a00ae30:	4b28      	ldr	r3, [pc, #160]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ae32:	685b      	ldr	r3, [r3, #4]
1a00ae34:	7818      	ldrb	r0, [r3, #0]
1a00ae36:	4b27      	ldr	r3, [pc, #156]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ae38:	681b      	ldr	r3, [r3, #0]
1a00ae3a:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
1a00ae3e:	1d3b      	adds	r3, r7, #4
1a00ae40:	2201      	movs	r2, #1
1a00ae42:	f7f8 f845 	bl	1a002ed0 <i2c_write>
1a00ae46:	4603      	mov	r3, r0
1a00ae48:	2b00      	cmp	r3, #0
1a00ae4a:	d002      	beq.n	1a00ae52 <setup_compass+0x226>
        return -1;
1a00ae4c:	f04f 33ff 	mov.w	r3, #4294967295
1a00ae50:	e039      	b.n	1a00aec6 <setup_compass+0x29a>

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
1a00ae52:	2301      	movs	r3, #1
1a00ae54:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
1a00ae56:	4b1f      	ldr	r3, [pc, #124]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ae58:	685b      	ldr	r3, [r3, #4]
1a00ae5a:	7818      	ldrb	r0, [r3, #0]
1a00ae5c:	4b1d      	ldr	r3, [pc, #116]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ae5e:	681b      	ldr	r3, [r3, #0]
1a00ae60:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
1a00ae64:	1d3b      	adds	r3, r7, #4
1a00ae66:	2201      	movs	r2, #1
1a00ae68:	f7f8 f832 	bl	1a002ed0 <i2c_write>
1a00ae6c:	4603      	mov	r3, r0
1a00ae6e:	2b00      	cmp	r3, #0
1a00ae70:	d002      	beq.n	1a00ae78 <setup_compass+0x24c>
        return -1;
1a00ae72:	f04f 33ff 	mov.w	r3, #4294967295
1a00ae76:	e026      	b.n	1a00aec6 <setup_compass+0x29a>

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
1a00ae78:	2303      	movs	r3, #3
1a00ae7a:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
1a00ae7c:	4b15      	ldr	r3, [pc, #84]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ae7e:	685b      	ldr	r3, [r3, #4]
1a00ae80:	7818      	ldrb	r0, [r3, #0]
1a00ae82:	4b14      	ldr	r3, [pc, #80]	; (1a00aed4 <setup_compass+0x2a8>)
1a00ae84:	681b      	ldr	r3, [r3, #0]
1a00ae86:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
1a00ae8a:	1d3b      	adds	r3, r7, #4
1a00ae8c:	2201      	movs	r2, #1
1a00ae8e:	f7f8 f81f 	bl	1a002ed0 <i2c_write>
1a00ae92:	4603      	mov	r3, r0
1a00ae94:	2b00      	cmp	r3, #0
1a00ae96:	d002      	beq.n	1a00ae9e <setup_compass+0x272>
        return -1;
1a00ae98:	f04f 33ff 	mov.w	r3, #4294967295
1a00ae9c:	e013      	b.n	1a00aec6 <setup_compass+0x29a>

#ifdef MPU9150
    /* For the MPU9150, the auxiliary I2C bus needs to be set to VDD. */
    data[0] = BIT_I2C_MST_VDDIO;
1a00ae9e:	2380      	movs	r3, #128	; 0x80
1a00aea0:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
1a00aea2:	4b0c      	ldr	r3, [pc, #48]	; (1a00aed4 <setup_compass+0x2a8>)
1a00aea4:	685b      	ldr	r3, [r3, #4]
1a00aea6:	7818      	ldrb	r0, [r3, #0]
1a00aea8:	4b0a      	ldr	r3, [pc, #40]	; (1a00aed4 <setup_compass+0x2a8>)
1a00aeaa:	681b      	ldr	r3, [r3, #0]
1a00aeac:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
1a00aeb0:	1d3b      	adds	r3, r7, #4
1a00aeb2:	2201      	movs	r2, #1
1a00aeb4:	f7f8 f80c 	bl	1a002ed0 <i2c_write>
1a00aeb8:	4603      	mov	r3, r0
1a00aeba:	2b00      	cmp	r3, #0
1a00aebc:	d002      	beq.n	1a00aec4 <setup_compass+0x298>
        return -1;
1a00aebe:	f04f 33ff 	mov.w	r3, #4294967295
1a00aec2:	e000      	b.n	1a00aec6 <setup_compass+0x29a>
#endif

    return 0;
1a00aec4:	2300      	movs	r3, #0
}
1a00aec6:	4618      	mov	r0, r3
1a00aec8:	3710      	adds	r7, #16
1a00aeca:	46bd      	mov	sp, r7
1a00aecc:	bd80      	pop	{r7, pc}
1a00aece:	bf00      	nop
1a00aed0:	1a019e2c 	.word	0x1a019e2c
1a00aed4:	10086034 	.word	0x10086034

1a00aed8 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
1a00aed8:	b580      	push	{r7, lr}
1a00aeda:	b086      	sub	sp, #24
1a00aedc:	af00      	add	r7, sp, #0
1a00aede:	6078      	str	r0, [r7, #4]
1a00aee0:	6039      	str	r1, [r7, #0]
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1a00aee2:	4b40      	ldr	r3, [pc, #256]	; (1a00afe4 <mpu_get_compass_reg+0x10c>)
1a00aee4:	7a9b      	ldrb	r3, [r3, #10]
1a00aee6:	f003 0301 	and.w	r3, r3, #1
1a00aeea:	2b00      	cmp	r3, #0
1a00aeec:	d102      	bne.n	1a00aef4 <mpu_get_compass_reg+0x1c>
        return -1;
1a00aeee:	f04f 33ff 	mov.w	r3, #4294967295
1a00aef2:	e072      	b.n	1a00afda <mpu_get_compass_reg+0x102>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
1a00aef4:	4b3b      	ldr	r3, [pc, #236]	; (1a00afe4 <mpu_get_compass_reg+0x10c>)
1a00aef6:	685b      	ldr	r3, [r3, #4]
1a00aef8:	7818      	ldrb	r0, [r3, #0]
1a00aefa:	4b3a      	ldr	r3, [pc, #232]	; (1a00afe4 <mpu_get_compass_reg+0x10c>)
1a00aefc:	681b      	ldr	r3, [r3, #0]
1a00aefe:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
1a00af02:	f107 030c 	add.w	r3, r7, #12
1a00af06:	2208      	movs	r2, #8
1a00af08:	f7f8 f810 	bl	1a002f2c <i2c_read>
1a00af0c:	4603      	mov	r3, r0
1a00af0e:	2b00      	cmp	r3, #0
1a00af10:	d002      	beq.n	1a00af18 <mpu_get_compass_reg+0x40>
        return -1;
1a00af12:	f04f 33ff 	mov.w	r3, #4294967295
1a00af16:	e060      	b.n	1a00afda <mpu_get_compass_reg+0x102>
#endif

#if defined AK8975_SECONDARY
    /* AK8975 doesn't have the overrun error bit. */
    if (!(tmp[0] & AKM_DATA_READY))
1a00af18:	7b3b      	ldrb	r3, [r7, #12]
1a00af1a:	f003 0301 	and.w	r3, r3, #1
1a00af1e:	2b00      	cmp	r3, #0
1a00af20:	d102      	bne.n	1a00af28 <mpu_get_compass_reg+0x50>
        return -2;
1a00af22:	f06f 0301 	mvn.w	r3, #1
1a00af26:	e058      	b.n	1a00afda <mpu_get_compass_reg+0x102>
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
1a00af28:	7cfb      	ldrb	r3, [r7, #19]
1a00af2a:	b2db      	uxtb	r3, r3
1a00af2c:	b25b      	sxtb	r3, r3
1a00af2e:	2b00      	cmp	r3, #0
1a00af30:	db04      	blt.n	1a00af3c <mpu_get_compass_reg+0x64>
1a00af32:	7cfb      	ldrb	r3, [r7, #19]
1a00af34:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a00af38:	2b00      	cmp	r3, #0
1a00af3a:	d002      	beq.n	1a00af42 <mpu_get_compass_reg+0x6a>
        return -3;
1a00af3c:	f06f 0302 	mvn.w	r3, #2
1a00af40:	e04b      	b.n	1a00afda <mpu_get_compass_reg+0x102>
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
1a00af42:	7bbb      	ldrb	r3, [r7, #14]
1a00af44:	021b      	lsls	r3, r3, #8
1a00af46:	b29a      	uxth	r2, r3
1a00af48:	7b7b      	ldrb	r3, [r7, #13]
1a00af4a:	b29b      	uxth	r3, r3
1a00af4c:	4313      	orrs	r3, r2
1a00af4e:	b29a      	uxth	r2, r3
1a00af50:	687b      	ldr	r3, [r7, #4]
1a00af52:	801a      	strh	r2, [r3, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
1a00af54:	687b      	ldr	r3, [r7, #4]
1a00af56:	3302      	adds	r3, #2
1a00af58:	7c3a      	ldrb	r2, [r7, #16]
1a00af5a:	0212      	lsls	r2, r2, #8
1a00af5c:	b291      	uxth	r1, r2
1a00af5e:	7bfa      	ldrb	r2, [r7, #15]
1a00af60:	b292      	uxth	r2, r2
1a00af62:	430a      	orrs	r2, r1
1a00af64:	b292      	uxth	r2, r2
1a00af66:	801a      	strh	r2, [r3, #0]
    data[2] = (tmp[6] << 8) | tmp[5];
1a00af68:	687b      	ldr	r3, [r7, #4]
1a00af6a:	3304      	adds	r3, #4
1a00af6c:	7cba      	ldrb	r2, [r7, #18]
1a00af6e:	0212      	lsls	r2, r2, #8
1a00af70:	b291      	uxth	r1, r2
1a00af72:	7c7a      	ldrb	r2, [r7, #17]
1a00af74:	b292      	uxth	r2, r2
1a00af76:	430a      	orrs	r2, r1
1a00af78:	b292      	uxth	r2, r2
1a00af7a:	801a      	strh	r2, [r3, #0]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
1a00af7c:	687b      	ldr	r3, [r7, #4]
1a00af7e:	881b      	ldrh	r3, [r3, #0]
1a00af80:	b21b      	sxth	r3, r3
1a00af82:	4a18      	ldr	r2, [pc, #96]	; (1a00afe4 <mpu_get_compass_reg+0x10c>)
1a00af84:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
1a00af86:	b212      	sxth	r2, r2
1a00af88:	fb02 f303 	mul.w	r3, r2, r3
1a00af8c:	121b      	asrs	r3, r3, #8
1a00af8e:	b29a      	uxth	r2, r3
1a00af90:	687b      	ldr	r3, [r7, #4]
1a00af92:	801a      	strh	r2, [r3, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
1a00af94:	687b      	ldr	r3, [r7, #4]
1a00af96:	3302      	adds	r3, #2
1a00af98:	687a      	ldr	r2, [r7, #4]
1a00af9a:	3202      	adds	r2, #2
1a00af9c:	8812      	ldrh	r2, [r2, #0]
1a00af9e:	b212      	sxth	r2, r2
1a00afa0:	4910      	ldr	r1, [pc, #64]	; (1a00afe4 <mpu_get_compass_reg+0x10c>)
1a00afa2:	8dc9      	ldrh	r1, [r1, #46]	; 0x2e
1a00afa4:	b209      	sxth	r1, r1
1a00afa6:	fb01 f202 	mul.w	r2, r1, r2
1a00afaa:	1212      	asrs	r2, r2, #8
1a00afac:	b292      	uxth	r2, r2
1a00afae:	801a      	strh	r2, [r3, #0]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
1a00afb0:	687b      	ldr	r3, [r7, #4]
1a00afb2:	3304      	adds	r3, #4
1a00afb4:	687a      	ldr	r2, [r7, #4]
1a00afb6:	3204      	adds	r2, #4
1a00afb8:	8812      	ldrh	r2, [r2, #0]
1a00afba:	b212      	sxth	r2, r2
1a00afbc:	4909      	ldr	r1, [pc, #36]	; (1a00afe4 <mpu_get_compass_reg+0x10c>)
1a00afbe:	8e09      	ldrh	r1, [r1, #48]	; 0x30
1a00afc0:	b209      	sxth	r1, r1
1a00afc2:	fb01 f202 	mul.w	r2, r1, r2
1a00afc6:	1212      	asrs	r2, r2, #8
1a00afc8:	b292      	uxth	r2, r2
1a00afca:	801a      	strh	r2, [r3, #0]

    if (timestamp)
1a00afcc:	683b      	ldr	r3, [r7, #0]
1a00afce:	2b00      	cmp	r3, #0
1a00afd0:	d002      	beq.n	1a00afd8 <mpu_get_compass_reg+0x100>
        get_ms(timestamp);
1a00afd2:	6838      	ldr	r0, [r7, #0]
1a00afd4:	f7fb fbd2 	bl	1a00677c <getTimerMs>
    return 0;
1a00afd8:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
1a00afda:	4618      	mov	r0, r3
1a00afdc:	3718      	adds	r7, #24
1a00afde:	46bd      	mov	sp, r7
1a00afe0:	bd80      	pop	{r7, pc}
1a00afe2:	bf00      	nop
1a00afe4:	10086034 	.word	0x10086034

1a00afe8 <mpu_get_compass_fsr>:
 *  @brief      Get the compass full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
1a00afe8:	b480      	push	{r7}
1a00afea:	b083      	sub	sp, #12
1a00afec:	af00      	add	r7, sp, #0
1a00afee:	6078      	str	r0, [r7, #4]
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
1a00aff0:	4b05      	ldr	r3, [pc, #20]	; (1a00b008 <mpu_get_compass_fsr+0x20>)
1a00aff2:	685b      	ldr	r3, [r3, #4]
1a00aff4:	899a      	ldrh	r2, [r3, #12]
1a00aff6:	687b      	ldr	r3, [r7, #4]
1a00aff8:	801a      	strh	r2, [r3, #0]
    return 0;
1a00affa:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
1a00affc:	4618      	mov	r0, r3
1a00affe:	370c      	adds	r7, #12
1a00b000:	46bd      	mov	sp, r7
1a00b002:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00b006:	4770      	bx	lr
1a00b008:	10086034 	.word	0x10086034

1a00b00c <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
1a00b00c:	b580      	push	{r7, lr}
1a00b00e:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
1a00b010:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a00b014:	23c8      	movs	r3, #200	; 0xc8
1a00b016:	4904      	ldr	r1, [pc, #16]	; (1a00b028 <dmp_load_motion_driver_firmware+0x1c>)
1a00b018:	f640 30f6 	movw	r0, #3062	; 0xbf6
1a00b01c:	f7ff fd34 	bl	1a00aa88 <mpu_load_firmware>
1a00b020:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
1a00b022:	4618      	mov	r0, r3
1a00b024:	bd80      	pop	{r7, pc}
1a00b026:	bf00      	nop
1a00b028:	1a019e40 	.word	0x1a019e40

1a00b02c <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
1a00b02c:	b580      	push	{r7, lr}
1a00b02e:	b088      	sub	sp, #32
1a00b030:	af00      	add	r7, sp, #0
1a00b032:	4603      	mov	r3, r0
1a00b034:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
1a00b036:	4a6b      	ldr	r2, [pc, #428]	; (1a00b1e4 <dmp_set_orientation+0x1b8>)
1a00b038:	f107 0314 	add.w	r3, r7, #20
1a00b03c:	8811      	ldrh	r1, [r2, #0]
1a00b03e:	7892      	ldrb	r2, [r2, #2]
1a00b040:	8019      	strh	r1, [r3, #0]
1a00b042:	709a      	strb	r2, [r3, #2]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
1a00b044:	4a68      	ldr	r2, [pc, #416]	; (1a00b1e8 <dmp_set_orientation+0x1bc>)
1a00b046:	f107 0310 	add.w	r3, r7, #16
1a00b04a:	8811      	ldrh	r1, [r2, #0]
1a00b04c:	7892      	ldrb	r2, [r2, #2]
1a00b04e:	8019      	strh	r1, [r3, #0]
1a00b050:	709a      	strb	r2, [r3, #2]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
1a00b052:	4a66      	ldr	r2, [pc, #408]	; (1a00b1ec <dmp_set_orientation+0x1c0>)
1a00b054:	f107 030c 	add.w	r3, r7, #12
1a00b058:	8811      	ldrh	r1, [r2, #0]
1a00b05a:	7892      	ldrb	r2, [r2, #2]
1a00b05c:	8019      	strh	r1, [r3, #0]
1a00b05e:	709a      	strb	r2, [r3, #2]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
1a00b060:	4a63      	ldr	r2, [pc, #396]	; (1a00b1f0 <dmp_set_orientation+0x1c4>)
1a00b062:	f107 0308 	add.w	r3, r7, #8
1a00b066:	8811      	ldrh	r1, [r2, #0]
1a00b068:	7892      	ldrb	r2, [r2, #2]
1a00b06a:	8019      	strh	r1, [r3, #0]
1a00b06c:	709a      	strb	r2, [r3, #2]

    gyro_regs[0] = gyro_axes[orient & 3];
1a00b06e:	88fb      	ldrh	r3, [r7, #6]
1a00b070:	f003 0303 	and.w	r3, r3, #3
1a00b074:	f107 0220 	add.w	r2, r7, #32
1a00b078:	4413      	add	r3, r2
1a00b07a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
1a00b07e:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
1a00b080:	88fb      	ldrh	r3, [r7, #6]
1a00b082:	08db      	lsrs	r3, r3, #3
1a00b084:	b29b      	uxth	r3, r3
1a00b086:	f003 0303 	and.w	r3, r3, #3
1a00b08a:	f107 0220 	add.w	r2, r7, #32
1a00b08e:	4413      	add	r3, r2
1a00b090:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
1a00b094:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
1a00b096:	88fb      	ldrh	r3, [r7, #6]
1a00b098:	099b      	lsrs	r3, r3, #6
1a00b09a:	b29b      	uxth	r3, r3
1a00b09c:	f003 0303 	and.w	r3, r3, #3
1a00b0a0:	f107 0220 	add.w	r2, r7, #32
1a00b0a4:	4413      	add	r3, r2
1a00b0a6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
1a00b0aa:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
1a00b0ac:	88fb      	ldrh	r3, [r7, #6]
1a00b0ae:	f003 0303 	and.w	r3, r3, #3
1a00b0b2:	f107 0220 	add.w	r2, r7, #32
1a00b0b6:	4413      	add	r3, r2
1a00b0b8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
1a00b0bc:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
1a00b0be:	88fb      	ldrh	r3, [r7, #6]
1a00b0c0:	08db      	lsrs	r3, r3, #3
1a00b0c2:	b29b      	uxth	r3, r3
1a00b0c4:	f003 0303 	and.w	r3, r3, #3
1a00b0c8:	f107 0220 	add.w	r2, r7, #32
1a00b0cc:	4413      	add	r3, r2
1a00b0ce:	f813 3c10 	ldrb.w	r3, [r3, #-16]
1a00b0d2:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
1a00b0d4:	88fb      	ldrh	r3, [r7, #6]
1a00b0d6:	099b      	lsrs	r3, r3, #6
1a00b0d8:	b29b      	uxth	r3, r3
1a00b0da:	f003 0303 	and.w	r3, r3, #3
1a00b0de:	f107 0220 	add.w	r2, r7, #32
1a00b0e2:	4413      	add	r3, r2
1a00b0e4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
1a00b0e8:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
1a00b0ea:	f107 031c 	add.w	r3, r7, #28
1a00b0ee:	461a      	mov	r2, r3
1a00b0f0:	2103      	movs	r1, #3
1a00b0f2:	f240 4026 	movw	r0, #1062	; 0x426
1a00b0f6:	f7ff fc23 	bl	1a00a940 <mpu_write_mem>
1a00b0fa:	4603      	mov	r3, r0
1a00b0fc:	2b00      	cmp	r3, #0
1a00b0fe:	d002      	beq.n	1a00b106 <dmp_set_orientation+0xda>
        return -1;
1a00b100:	f04f 33ff 	mov.w	r3, #4294967295
1a00b104:	e06a      	b.n	1a00b1dc <dmp_set_orientation+0x1b0>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
1a00b106:	f107 0318 	add.w	r3, r7, #24
1a00b10a:	461a      	mov	r2, r3
1a00b10c:	2103      	movs	r1, #3
1a00b10e:	f240 402a 	movw	r0, #1066	; 0x42a
1a00b112:	f7ff fc15 	bl	1a00a940 <mpu_write_mem>
1a00b116:	4603      	mov	r3, r0
1a00b118:	2b00      	cmp	r3, #0
1a00b11a:	d002      	beq.n	1a00b122 <dmp_set_orientation+0xf6>
        return -1;
1a00b11c:	f04f 33ff 	mov.w	r3, #4294967295
1a00b120:	e05c      	b.n	1a00b1dc <dmp_set_orientation+0x1b0>

    memcpy(gyro_regs, gyro_sign, 3);
1a00b122:	f107 010c 	add.w	r1, r7, #12
1a00b126:	f107 031c 	add.w	r3, r7, #28
1a00b12a:	2203      	movs	r2, #3
1a00b12c:	4618      	mov	r0, r3
1a00b12e:	f009 fd59 	bl	1a014be4 <memcpy>
    memcpy(accel_regs, accel_sign, 3);
1a00b132:	f107 0108 	add.w	r1, r7, #8
1a00b136:	f107 0318 	add.w	r3, r7, #24
1a00b13a:	2203      	movs	r2, #3
1a00b13c:	4618      	mov	r0, r3
1a00b13e:	f009 fd51 	bl	1a014be4 <memcpy>
    if (orient & 4) {
1a00b142:	88fb      	ldrh	r3, [r7, #6]
1a00b144:	f003 0304 	and.w	r3, r3, #4
1a00b148:	2b00      	cmp	r3, #0
1a00b14a:	d009      	beq.n	1a00b160 <dmp_set_orientation+0x134>
        gyro_regs[0] |= 1;
1a00b14c:	7f3b      	ldrb	r3, [r7, #28]
1a00b14e:	f043 0301 	orr.w	r3, r3, #1
1a00b152:	b2db      	uxtb	r3, r3
1a00b154:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
1a00b156:	7e3b      	ldrb	r3, [r7, #24]
1a00b158:	f043 0301 	orr.w	r3, r3, #1
1a00b15c:	b2db      	uxtb	r3, r3
1a00b15e:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
1a00b160:	88fb      	ldrh	r3, [r7, #6]
1a00b162:	f003 0320 	and.w	r3, r3, #32
1a00b166:	2b00      	cmp	r3, #0
1a00b168:	d009      	beq.n	1a00b17e <dmp_set_orientation+0x152>
        gyro_regs[1] |= 1;
1a00b16a:	7f7b      	ldrb	r3, [r7, #29]
1a00b16c:	f043 0301 	orr.w	r3, r3, #1
1a00b170:	b2db      	uxtb	r3, r3
1a00b172:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
1a00b174:	7e7b      	ldrb	r3, [r7, #25]
1a00b176:	f043 0301 	orr.w	r3, r3, #1
1a00b17a:	b2db      	uxtb	r3, r3
1a00b17c:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
1a00b17e:	88fb      	ldrh	r3, [r7, #6]
1a00b180:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a00b184:	2b00      	cmp	r3, #0
1a00b186:	d009      	beq.n	1a00b19c <dmp_set_orientation+0x170>
        gyro_regs[2] |= 1;
1a00b188:	7fbb      	ldrb	r3, [r7, #30]
1a00b18a:	f043 0301 	orr.w	r3, r3, #1
1a00b18e:	b2db      	uxtb	r3, r3
1a00b190:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
1a00b192:	7ebb      	ldrb	r3, [r7, #26]
1a00b194:	f043 0301 	orr.w	r3, r3, #1
1a00b198:	b2db      	uxtb	r3, r3
1a00b19a:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
1a00b19c:	f107 031c 	add.w	r3, r7, #28
1a00b1a0:	461a      	mov	r2, r3
1a00b1a2:	2103      	movs	r1, #3
1a00b1a4:	f44f 6088 	mov.w	r0, #1088	; 0x440
1a00b1a8:	f7ff fbca 	bl	1a00a940 <mpu_write_mem>
1a00b1ac:	4603      	mov	r3, r0
1a00b1ae:	2b00      	cmp	r3, #0
1a00b1b0:	d002      	beq.n	1a00b1b8 <dmp_set_orientation+0x18c>
        return -1;
1a00b1b2:	f04f 33ff 	mov.w	r3, #4294967295
1a00b1b6:	e011      	b.n	1a00b1dc <dmp_set_orientation+0x1b0>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
1a00b1b8:	f107 0318 	add.w	r3, r7, #24
1a00b1bc:	461a      	mov	r2, r3
1a00b1be:	2103      	movs	r1, #3
1a00b1c0:	f240 4031 	movw	r0, #1073	; 0x431
1a00b1c4:	f7ff fbbc 	bl	1a00a940 <mpu_write_mem>
1a00b1c8:	4603      	mov	r3, r0
1a00b1ca:	2b00      	cmp	r3, #0
1a00b1cc:	d002      	beq.n	1a00b1d4 <dmp_set_orientation+0x1a8>
        return -1;
1a00b1ce:	f04f 33ff 	mov.w	r3, #4294967295
1a00b1d2:	e003      	b.n	1a00b1dc <dmp_set_orientation+0x1b0>
    dmp.orient = orient;
1a00b1d4:	4a07      	ldr	r2, [pc, #28]	; (1a00b1f4 <dmp_set_orientation+0x1c8>)
1a00b1d6:	88fb      	ldrh	r3, [r7, #6]
1a00b1d8:	8113      	strh	r3, [r2, #8]
    return 0;
1a00b1da:	2300      	movs	r3, #0
}
1a00b1dc:	4618      	mov	r0, r3
1a00b1de:	3720      	adds	r7, #32
1a00b1e0:	46bd      	mov	sp, r7
1a00b1e2:	bd80      	pop	{r7, pc}
1a00b1e4:	1a01aa38 	.word	0x1a01aa38
1a00b1e8:	1a01aa3c 	.word	0x1a01aa3c
1a00b1ec:	1a01aa40 	.word	0x1a01aa40
1a00b1f0:	1a01aa44 	.word	0x1a01aa44
1a00b1f4:	10086bcc 	.word	0x10086bcc

1a00b1f8 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
1a00b1f8:	b580      	push	{r7, lr}
1a00b1fa:	b088      	sub	sp, #32
1a00b1fc:	af00      	add	r7, sp, #0
1a00b1fe:	4603      	mov	r3, r0
1a00b200:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
1a00b202:	4a20      	ldr	r2, [pc, #128]	; (1a00b284 <dmp_set_fifo_rate+0x8c>)
1a00b204:	f107 0310 	add.w	r3, r7, #16
1a00b208:	6810      	ldr	r0, [r2, #0]
1a00b20a:	6851      	ldr	r1, [r2, #4]
1a00b20c:	6892      	ldr	r2, [r2, #8]
1a00b20e:	c307      	stmia	r3!, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
1a00b210:	88fb      	ldrh	r3, [r7, #6]
1a00b212:	2bc8      	cmp	r3, #200	; 0xc8
1a00b214:	d902      	bls.n	1a00b21c <dmp_set_fifo_rate+0x24>
        return -1;
1a00b216:	f04f 33ff 	mov.w	r3, #4294967295
1a00b21a:	e02e      	b.n	1a00b27a <dmp_set_fifo_rate+0x82>
    div = DMP_SAMPLE_RATE / rate - 1;
1a00b21c:	88fb      	ldrh	r3, [r7, #6]
1a00b21e:	22c8      	movs	r2, #200	; 0xc8
1a00b220:	fb92 f3f3 	sdiv	r3, r2, r3
1a00b224:	b29b      	uxth	r3, r3
1a00b226:	3b01      	subs	r3, #1
1a00b228:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
1a00b22a:	8bfb      	ldrh	r3, [r7, #30]
1a00b22c:	0a1b      	lsrs	r3, r3, #8
1a00b22e:	b29b      	uxth	r3, r3
1a00b230:	b2db      	uxtb	r3, r3
1a00b232:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
1a00b234:	8bfb      	ldrh	r3, [r7, #30]
1a00b236:	b2db      	uxtb	r3, r3
1a00b238:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
1a00b23a:	f107 0308 	add.w	r3, r7, #8
1a00b23e:	461a      	mov	r2, r3
1a00b240:	2102      	movs	r1, #2
1a00b242:	f240 2016 	movw	r0, #534	; 0x216
1a00b246:	f7ff fb7b 	bl	1a00a940 <mpu_write_mem>
1a00b24a:	4603      	mov	r3, r0
1a00b24c:	2b00      	cmp	r3, #0
1a00b24e:	d002      	beq.n	1a00b256 <dmp_set_fifo_rate+0x5e>
        return -1;
1a00b250:	f04f 33ff 	mov.w	r3, #4294967295
1a00b254:	e011      	b.n	1a00b27a <dmp_set_fifo_rate+0x82>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
1a00b256:	f107 0310 	add.w	r3, r7, #16
1a00b25a:	461a      	mov	r2, r3
1a00b25c:	210c      	movs	r1, #12
1a00b25e:	f640 20c1 	movw	r0, #2753	; 0xac1
1a00b262:	f7ff fb6d 	bl	1a00a940 <mpu_write_mem>
1a00b266:	4603      	mov	r3, r0
1a00b268:	2b00      	cmp	r3, #0
1a00b26a:	d002      	beq.n	1a00b272 <dmp_set_fifo_rate+0x7a>
        return -1;
1a00b26c:	f04f 33ff 	mov.w	r3, #4294967295
1a00b270:	e003      	b.n	1a00b27a <dmp_set_fifo_rate+0x82>

    dmp.fifo_rate = rate;
1a00b272:	4a05      	ldr	r2, [pc, #20]	; (1a00b288 <dmp_set_fifo_rate+0x90>)
1a00b274:	88fb      	ldrh	r3, [r7, #6]
1a00b276:	8193      	strh	r3, [r2, #12]
    return 0;
1a00b278:	2300      	movs	r3, #0
}
1a00b27a:	4618      	mov	r0, r3
1a00b27c:	3720      	adds	r7, #32
1a00b27e:	46bd      	mov	sp, r7
1a00b280:	bd80      	pop	{r7, pc}
1a00b282:	bf00      	nop
1a00b284:	1a01aa48 	.word	0x1a01aa48
1a00b288:	10086bcc 	.word	0x10086bcc

1a00b28c <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
1a00b28c:	b580      	push	{r7, lr}
1a00b28e:	b086      	sub	sp, #24
1a00b290:	af00      	add	r7, sp, #0
1a00b292:	4603      	mov	r3, r0
1a00b294:	460a      	mov	r2, r1
1a00b296:	71fb      	strb	r3, [r7, #7]
1a00b298:	4613      	mov	r3, r2
1a00b29a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
1a00b29c:	79fb      	ldrb	r3, [r7, #7]
1a00b29e:	f003 0307 	and.w	r3, r3, #7
1a00b2a2:	2b00      	cmp	r3, #0
1a00b2a4:	d003      	beq.n	1a00b2ae <dmp_set_tap_thresh+0x22>
1a00b2a6:	88bb      	ldrh	r3, [r7, #4]
1a00b2a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
1a00b2ac:	d902      	bls.n	1a00b2b4 <dmp_set_tap_thresh+0x28>
        return -1;
1a00b2ae:	f04f 33ff 	mov.w	r3, #4294967295
1a00b2b2:	e113      	b.n	1a00b4dc <dmp_set_tap_thresh+0x250>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
1a00b2b4:	88bb      	ldrh	r3, [r7, #4]
1a00b2b6:	ee07 3a90 	vmov	s15, r3
1a00b2ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1a00b2be:	eddf 6a89 	vldr	s13, [pc, #548]	; 1a00b4e4 <dmp_set_tap_thresh+0x258>
1a00b2c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
1a00b2c6:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
1a00b2ca:	f107 030b 	add.w	r3, r7, #11
1a00b2ce:	4618      	mov	r0, r3
1a00b2d0:	f7fe feb4 	bl	1a00a03c <mpu_get_accel_fsr>
    switch (accel_fsr) {
1a00b2d4:	7afb      	ldrb	r3, [r7, #11]
1a00b2d6:	3b02      	subs	r3, #2
1a00b2d8:	2b0e      	cmp	r3, #14
1a00b2da:	f200 8085 	bhi.w	1a00b3e8 <dmp_set_tap_thresh+0x15c>
1a00b2de:	a201      	add	r2, pc, #4	; (adr r2, 1a00b2e4 <dmp_set_tap_thresh+0x58>)
1a00b2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a00b2e4:	1a00b321 	.word	0x1a00b321
1a00b2e8:	1a00b3e9 	.word	0x1a00b3e9
1a00b2ec:	1a00b353 	.word	0x1a00b353
1a00b2f0:	1a00b3e9 	.word	0x1a00b3e9
1a00b2f4:	1a00b3e9 	.word	0x1a00b3e9
1a00b2f8:	1a00b3e9 	.word	0x1a00b3e9
1a00b2fc:	1a00b385 	.word	0x1a00b385
1a00b300:	1a00b3e9 	.word	0x1a00b3e9
1a00b304:	1a00b3e9 	.word	0x1a00b3e9
1a00b308:	1a00b3e9 	.word	0x1a00b3e9
1a00b30c:	1a00b3e9 	.word	0x1a00b3e9
1a00b310:	1a00b3e9 	.word	0x1a00b3e9
1a00b314:	1a00b3e9 	.word	0x1a00b3e9
1a00b318:	1a00b3e9 	.word	0x1a00b3e9
1a00b31c:	1a00b3b7 	.word	0x1a00b3b7
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
1a00b320:	edd7 7a04 	vldr	s15, [r7, #16]
1a00b324:	ed9f 7a70 	vldr	s14, [pc, #448]	; 1a00b4e8 <dmp_set_tap_thresh+0x25c>
1a00b328:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00b32c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1a00b330:	edc7 7a00 	vstr	s15, [r7]
1a00b334:	883b      	ldrh	r3, [r7, #0]
1a00b336:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
1a00b338:	edd7 7a04 	vldr	s15, [r7, #16]
1a00b33c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 1a00b4ec <dmp_set_tap_thresh+0x260>
1a00b340:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00b344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1a00b348:	edc7 7a00 	vstr	s15, [r7]
1a00b34c:	883b      	ldrh	r3, [r7, #0]
1a00b34e:	82bb      	strh	r3, [r7, #20]
        break;
1a00b350:	e04d      	b.n	1a00b3ee <dmp_set_tap_thresh+0x162>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
1a00b352:	edd7 7a04 	vldr	s15, [r7, #16]
1a00b356:	ed9f 7a66 	vldr	s14, [pc, #408]	; 1a00b4f0 <dmp_set_tap_thresh+0x264>
1a00b35a:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00b35e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1a00b362:	edc7 7a00 	vstr	s15, [r7]
1a00b366:	883b      	ldrh	r3, [r7, #0]
1a00b368:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
1a00b36a:	edd7 7a04 	vldr	s15, [r7, #16]
1a00b36e:	ed9f 7a61 	vldr	s14, [pc, #388]	; 1a00b4f4 <dmp_set_tap_thresh+0x268>
1a00b372:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00b376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1a00b37a:	edc7 7a00 	vstr	s15, [r7]
1a00b37e:	883b      	ldrh	r3, [r7, #0]
1a00b380:	82bb      	strh	r3, [r7, #20]
        break;
1a00b382:	e034      	b.n	1a00b3ee <dmp_set_tap_thresh+0x162>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
1a00b384:	edd7 7a04 	vldr	s15, [r7, #16]
1a00b388:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 1a00b4f8 <dmp_set_tap_thresh+0x26c>
1a00b38c:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00b390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1a00b394:	edc7 7a00 	vstr	s15, [r7]
1a00b398:	883b      	ldrh	r3, [r7, #0]
1a00b39a:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
1a00b39c:	edd7 7a04 	vldr	s15, [r7, #16]
1a00b3a0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 1a00b4fc <dmp_set_tap_thresh+0x270>
1a00b3a4:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00b3a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1a00b3ac:	edc7 7a00 	vstr	s15, [r7]
1a00b3b0:	883b      	ldrh	r3, [r7, #0]
1a00b3b2:	82bb      	strh	r3, [r7, #20]
        break;
1a00b3b4:	e01b      	b.n	1a00b3ee <dmp_set_tap_thresh+0x162>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
1a00b3b6:	edd7 7a04 	vldr	s15, [r7, #16]
1a00b3ba:	ed9f 7a51 	vldr	s14, [pc, #324]	; 1a00b500 <dmp_set_tap_thresh+0x274>
1a00b3be:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00b3c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1a00b3c6:	edc7 7a00 	vstr	s15, [r7]
1a00b3ca:	883b      	ldrh	r3, [r7, #0]
1a00b3cc:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
1a00b3ce:	edd7 7a04 	vldr	s15, [r7, #16]
1a00b3d2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 1a00b504 <dmp_set_tap_thresh+0x278>
1a00b3d6:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00b3da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1a00b3de:	edc7 7a00 	vstr	s15, [r7]
1a00b3e2:	883b      	ldrh	r3, [r7, #0]
1a00b3e4:	82bb      	strh	r3, [r7, #20]
        break;
1a00b3e6:	e002      	b.n	1a00b3ee <dmp_set_tap_thresh+0x162>
    default:
        return -1;
1a00b3e8:	f04f 33ff 	mov.w	r3, #4294967295
1a00b3ec:	e076      	b.n	1a00b4dc <dmp_set_tap_thresh+0x250>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
1a00b3ee:	8afb      	ldrh	r3, [r7, #22]
1a00b3f0:	0a1b      	lsrs	r3, r3, #8
1a00b3f2:	b29b      	uxth	r3, r3
1a00b3f4:	b2db      	uxtb	r3, r3
1a00b3f6:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
1a00b3f8:	8afb      	ldrh	r3, [r7, #22]
1a00b3fa:	b2db      	uxtb	r3, r3
1a00b3fc:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
1a00b3fe:	8abb      	ldrh	r3, [r7, #20]
1a00b400:	0a1b      	lsrs	r3, r3, #8
1a00b402:	b29b      	uxth	r3, r3
1a00b404:	b2db      	uxtb	r3, r3
1a00b406:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
1a00b408:	8abb      	ldrh	r3, [r7, #20]
1a00b40a:	b2db      	uxtb	r3, r3
1a00b40c:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
1a00b40e:	79fb      	ldrb	r3, [r7, #7]
1a00b410:	f003 0301 	and.w	r3, r3, #1
1a00b414:	2b00      	cmp	r3, #0
1a00b416:	d01c      	beq.n	1a00b452 <dmp_set_tap_thresh+0x1c6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
1a00b418:	f107 030c 	add.w	r3, r7, #12
1a00b41c:	461a      	mov	r2, r3
1a00b41e:	2102      	movs	r1, #2
1a00b420:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
1a00b424:	f7ff fa8c 	bl	1a00a940 <mpu_write_mem>
1a00b428:	4603      	mov	r3, r0
1a00b42a:	2b00      	cmp	r3, #0
1a00b42c:	d002      	beq.n	1a00b434 <dmp_set_tap_thresh+0x1a8>
            return -1;
1a00b42e:	f04f 33ff 	mov.w	r3, #4294967295
1a00b432:	e053      	b.n	1a00b4dc <dmp_set_tap_thresh+0x250>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
1a00b434:	f107 030c 	add.w	r3, r7, #12
1a00b438:	3302      	adds	r3, #2
1a00b43a:	461a      	mov	r2, r3
1a00b43c:	2102      	movs	r1, #2
1a00b43e:	f44f 7092 	mov.w	r0, #292	; 0x124
1a00b442:	f7ff fa7d 	bl	1a00a940 <mpu_write_mem>
1a00b446:	4603      	mov	r3, r0
1a00b448:	2b00      	cmp	r3, #0
1a00b44a:	d002      	beq.n	1a00b452 <dmp_set_tap_thresh+0x1c6>
            return -1;
1a00b44c:	f04f 33ff 	mov.w	r3, #4294967295
1a00b450:	e044      	b.n	1a00b4dc <dmp_set_tap_thresh+0x250>
    }
    if (axis & TAP_Y) {
1a00b452:	79fb      	ldrb	r3, [r7, #7]
1a00b454:	f003 0302 	and.w	r3, r3, #2
1a00b458:	2b00      	cmp	r3, #0
1a00b45a:	d01c      	beq.n	1a00b496 <dmp_set_tap_thresh+0x20a>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
1a00b45c:	f107 030c 	add.w	r3, r7, #12
1a00b460:	461a      	mov	r2, r3
1a00b462:	2102      	movs	r1, #2
1a00b464:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
1a00b468:	f7ff fa6a 	bl	1a00a940 <mpu_write_mem>
1a00b46c:	4603      	mov	r3, r0
1a00b46e:	2b00      	cmp	r3, #0
1a00b470:	d002      	beq.n	1a00b478 <dmp_set_tap_thresh+0x1ec>
            return -1;
1a00b472:	f04f 33ff 	mov.w	r3, #4294967295
1a00b476:	e031      	b.n	1a00b4dc <dmp_set_tap_thresh+0x250>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
1a00b478:	f107 030c 	add.w	r3, r7, #12
1a00b47c:	3302      	adds	r3, #2
1a00b47e:	461a      	mov	r2, r3
1a00b480:	2102      	movs	r1, #2
1a00b482:	f44f 7094 	mov.w	r0, #296	; 0x128
1a00b486:	f7ff fa5b 	bl	1a00a940 <mpu_write_mem>
1a00b48a:	4603      	mov	r3, r0
1a00b48c:	2b00      	cmp	r3, #0
1a00b48e:	d002      	beq.n	1a00b496 <dmp_set_tap_thresh+0x20a>
            return -1;
1a00b490:	f04f 33ff 	mov.w	r3, #4294967295
1a00b494:	e022      	b.n	1a00b4dc <dmp_set_tap_thresh+0x250>
    }
    if (axis & TAP_Z) {
1a00b496:	79fb      	ldrb	r3, [r7, #7]
1a00b498:	f003 0304 	and.w	r3, r3, #4
1a00b49c:	2b00      	cmp	r3, #0
1a00b49e:	d01c      	beq.n	1a00b4da <dmp_set_tap_thresh+0x24e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
1a00b4a0:	f107 030c 	add.w	r3, r7, #12
1a00b4a4:	461a      	mov	r2, r3
1a00b4a6:	2102      	movs	r1, #2
1a00b4a8:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
1a00b4ac:	f7ff fa48 	bl	1a00a940 <mpu_write_mem>
1a00b4b0:	4603      	mov	r3, r0
1a00b4b2:	2b00      	cmp	r3, #0
1a00b4b4:	d002      	beq.n	1a00b4bc <dmp_set_tap_thresh+0x230>
            return -1;
1a00b4b6:	f04f 33ff 	mov.w	r3, #4294967295
1a00b4ba:	e00f      	b.n	1a00b4dc <dmp_set_tap_thresh+0x250>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
1a00b4bc:	f107 030c 	add.w	r3, r7, #12
1a00b4c0:	3302      	adds	r3, #2
1a00b4c2:	461a      	mov	r2, r3
1a00b4c4:	2102      	movs	r1, #2
1a00b4c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
1a00b4ca:	f7ff fa39 	bl	1a00a940 <mpu_write_mem>
1a00b4ce:	4603      	mov	r3, r0
1a00b4d0:	2b00      	cmp	r3, #0
1a00b4d2:	d002      	beq.n	1a00b4da <dmp_set_tap_thresh+0x24e>
            return -1;
1a00b4d4:	f04f 33ff 	mov.w	r3, #4294967295
1a00b4d8:	e000      	b.n	1a00b4dc <dmp_set_tap_thresh+0x250>
    }
    return 0;
1a00b4da:	2300      	movs	r3, #0
}
1a00b4dc:	4618      	mov	r0, r3
1a00b4de:	3718      	adds	r7, #24
1a00b4e0:	46bd      	mov	sp, r7
1a00b4e2:	bd80      	pop	{r7, pc}
1a00b4e4:	43480000 	.word	0x43480000
1a00b4e8:	46800000 	.word	0x46800000
1a00b4ec:	46400000 	.word	0x46400000
1a00b4f0:	46000000 	.word	0x46000000
1a00b4f4:	45c00000 	.word	0x45c00000
1a00b4f8:	45800000 	.word	0x45800000
1a00b4fc:	45400000 	.word	0x45400000
1a00b500:	45000000 	.word	0x45000000
1a00b504:	44c00000 	.word	0x44c00000

1a00b508 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
1a00b508:	b580      	push	{r7, lr}
1a00b50a:	b084      	sub	sp, #16
1a00b50c:	af00      	add	r7, sp, #0
1a00b50e:	4603      	mov	r3, r0
1a00b510:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
1a00b512:	2300      	movs	r3, #0
1a00b514:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
1a00b516:	79fb      	ldrb	r3, [r7, #7]
1a00b518:	f003 0301 	and.w	r3, r3, #1
1a00b51c:	2b00      	cmp	r3, #0
1a00b51e:	d004      	beq.n	1a00b52a <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
1a00b520:	7bfb      	ldrb	r3, [r7, #15]
1a00b522:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00b526:	b2db      	uxtb	r3, r3
1a00b528:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
1a00b52a:	79fb      	ldrb	r3, [r7, #7]
1a00b52c:	f003 0302 	and.w	r3, r3, #2
1a00b530:	2b00      	cmp	r3, #0
1a00b532:	d004      	beq.n	1a00b53e <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
1a00b534:	7bfb      	ldrb	r3, [r7, #15]
1a00b536:	f043 030c 	orr.w	r3, r3, #12
1a00b53a:	b2db      	uxtb	r3, r3
1a00b53c:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
1a00b53e:	79fb      	ldrb	r3, [r7, #7]
1a00b540:	f003 0304 	and.w	r3, r3, #4
1a00b544:	2b00      	cmp	r3, #0
1a00b546:	d004      	beq.n	1a00b552 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
1a00b548:	7bfb      	ldrb	r3, [r7, #15]
1a00b54a:	f043 0303 	orr.w	r3, r3, #3
1a00b54e:	b2db      	uxtb	r3, r3
1a00b550:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
1a00b552:	f107 030f 	add.w	r3, r7, #15
1a00b556:	461a      	mov	r2, r3
1a00b558:	2101      	movs	r1, #1
1a00b55a:	f44f 70a4 	mov.w	r0, #328	; 0x148
1a00b55e:	f7ff f9ef 	bl	1a00a940 <mpu_write_mem>
1a00b562:	4603      	mov	r3, r0
}
1a00b564:	4618      	mov	r0, r3
1a00b566:	3710      	adds	r7, #16
1a00b568:	46bd      	mov	sp, r7
1a00b56a:	bd80      	pop	{r7, pc}

1a00b56c <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
1a00b56c:	b580      	push	{r7, lr}
1a00b56e:	b084      	sub	sp, #16
1a00b570:	af00      	add	r7, sp, #0
1a00b572:	4603      	mov	r3, r0
1a00b574:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
1a00b576:	79fb      	ldrb	r3, [r7, #7]
1a00b578:	2b00      	cmp	r3, #0
1a00b57a:	d102      	bne.n	1a00b582 <dmp_set_tap_count+0x16>
        min_taps = 1;
1a00b57c:	2301      	movs	r3, #1
1a00b57e:	71fb      	strb	r3, [r7, #7]
1a00b580:	e004      	b.n	1a00b58c <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
1a00b582:	79fb      	ldrb	r3, [r7, #7]
1a00b584:	2b04      	cmp	r3, #4
1a00b586:	d901      	bls.n	1a00b58c <dmp_set_tap_count+0x20>
        min_taps = 4;
1a00b588:	2304      	movs	r3, #4
1a00b58a:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
1a00b58c:	79fb      	ldrb	r3, [r7, #7]
1a00b58e:	3b01      	subs	r3, #1
1a00b590:	b2db      	uxtb	r3, r3
1a00b592:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
1a00b594:	f107 030f 	add.w	r3, r7, #15
1a00b598:	461a      	mov	r2, r3
1a00b59a:	2101      	movs	r1, #1
1a00b59c:	f240 104f 	movw	r0, #335	; 0x14f
1a00b5a0:	f7ff f9ce 	bl	1a00a940 <mpu_write_mem>
1a00b5a4:	4603      	mov	r3, r0
}
1a00b5a6:	4618      	mov	r0, r3
1a00b5a8:	3710      	adds	r7, #16
1a00b5aa:	46bd      	mov	sp, r7
1a00b5ac:	bd80      	pop	{r7, pc}
1a00b5ae:	bf00      	nop

1a00b5b0 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
1a00b5b0:	b580      	push	{r7, lr}
1a00b5b2:	b084      	sub	sp, #16
1a00b5b4:	af00      	add	r7, sp, #0
1a00b5b6:	4603      	mov	r3, r0
1a00b5b8:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
1a00b5ba:	88fb      	ldrh	r3, [r7, #6]
1a00b5bc:	4a0c      	ldr	r2, [pc, #48]	; (1a00b5f0 <dmp_set_tap_time+0x40>)
1a00b5be:	fba2 2303 	umull	r2, r3, r2, r3
1a00b5c2:	089b      	lsrs	r3, r3, #2
1a00b5c4:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
1a00b5c6:	89fb      	ldrh	r3, [r7, #14]
1a00b5c8:	0a1b      	lsrs	r3, r3, #8
1a00b5ca:	b29b      	uxth	r3, r3
1a00b5cc:	b2db      	uxtb	r3, r3
1a00b5ce:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1a00b5d0:	89fb      	ldrh	r3, [r7, #14]
1a00b5d2:	b2db      	uxtb	r3, r3
1a00b5d4:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
1a00b5d6:	f107 030c 	add.w	r3, r7, #12
1a00b5da:	461a      	mov	r2, r3
1a00b5dc:	2102      	movs	r1, #2
1a00b5de:	f44f 70ef 	mov.w	r0, #478	; 0x1de
1a00b5e2:	f7ff f9ad 	bl	1a00a940 <mpu_write_mem>
1a00b5e6:	4603      	mov	r3, r0
}
1a00b5e8:	4618      	mov	r0, r3
1a00b5ea:	3710      	adds	r7, #16
1a00b5ec:	46bd      	mov	sp, r7
1a00b5ee:	bd80      	pop	{r7, pc}
1a00b5f0:	cccccccd 	.word	0xcccccccd

1a00b5f4 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
1a00b5f4:	b580      	push	{r7, lr}
1a00b5f6:	b084      	sub	sp, #16
1a00b5f8:	af00      	add	r7, sp, #0
1a00b5fa:	4603      	mov	r3, r0
1a00b5fc:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
1a00b5fe:	88fb      	ldrh	r3, [r7, #6]
1a00b600:	4a0c      	ldr	r2, [pc, #48]	; (1a00b634 <dmp_set_tap_time_multi+0x40>)
1a00b602:	fba2 2303 	umull	r2, r3, r2, r3
1a00b606:	089b      	lsrs	r3, r3, #2
1a00b608:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
1a00b60a:	89fb      	ldrh	r3, [r7, #14]
1a00b60c:	0a1b      	lsrs	r3, r3, #8
1a00b60e:	b29b      	uxth	r3, r3
1a00b610:	b2db      	uxtb	r3, r3
1a00b612:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1a00b614:	89fb      	ldrh	r3, [r7, #14]
1a00b616:	b2db      	uxtb	r3, r3
1a00b618:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
1a00b61a:	f107 030c 	add.w	r3, r7, #12
1a00b61e:	461a      	mov	r2, r3
1a00b620:	2102      	movs	r1, #2
1a00b622:	f44f 70ed 	mov.w	r0, #474	; 0x1da
1a00b626:	f7ff f98b 	bl	1a00a940 <mpu_write_mem>
1a00b62a:	4603      	mov	r3, r0
}
1a00b62c:	4618      	mov	r0, r3
1a00b62e:	3710      	adds	r7, #16
1a00b630:	46bd      	mov	sp, r7
1a00b632:	bd80      	pop	{r7, pc}
1a00b634:	cccccccd 	.word	0xcccccccd

1a00b638 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
1a00b638:	b580      	push	{r7, lr}
1a00b63a:	b084      	sub	sp, #16
1a00b63c:	af00      	add	r7, sp, #0
1a00b63e:	6078      	str	r0, [r7, #4]
1a00b640:	460b      	mov	r3, r1
1a00b642:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
1a00b644:	687b      	ldr	r3, [r7, #4]
1a00b646:	4a13      	ldr	r2, [pc, #76]	; (1a00b694 <dmp_set_shake_reject_thresh+0x5c>)
1a00b648:	fb82 1203 	smull	r1, r2, r2, r3
1a00b64c:	1192      	asrs	r2, r2, #6
1a00b64e:	17db      	asrs	r3, r3, #31
1a00b650:	1ad3      	subs	r3, r2, r3
1a00b652:	887a      	ldrh	r2, [r7, #2]
1a00b654:	fb02 f303 	mul.w	r3, r2, r3
1a00b658:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
1a00b65a:	68fb      	ldr	r3, [r7, #12]
1a00b65c:	161b      	asrs	r3, r3, #24
1a00b65e:	b2db      	uxtb	r3, r3
1a00b660:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
1a00b662:	68fb      	ldr	r3, [r7, #12]
1a00b664:	141b      	asrs	r3, r3, #16
1a00b666:	b2db      	uxtb	r3, r3
1a00b668:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
1a00b66a:	68fb      	ldr	r3, [r7, #12]
1a00b66c:	121b      	asrs	r3, r3, #8
1a00b66e:	b2db      	uxtb	r3, r3
1a00b670:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
1a00b672:	68fb      	ldr	r3, [r7, #12]
1a00b674:	b2db      	uxtb	r3, r3
1a00b676:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
1a00b678:	f107 0308 	add.w	r3, r7, #8
1a00b67c:	461a      	mov	r2, r3
1a00b67e:	2104      	movs	r1, #4
1a00b680:	f44f 70ae 	mov.w	r0, #348	; 0x15c
1a00b684:	f7ff f95c 	bl	1a00a940 <mpu_write_mem>
1a00b688:	4603      	mov	r3, r0
}
1a00b68a:	4618      	mov	r0, r3
1a00b68c:	3710      	adds	r7, #16
1a00b68e:	46bd      	mov	sp, r7
1a00b690:	bd80      	pop	{r7, pc}
1a00b692:	bf00      	nop
1a00b694:	10624dd3 	.word	0x10624dd3

1a00b698 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
1a00b698:	b580      	push	{r7, lr}
1a00b69a:	b084      	sub	sp, #16
1a00b69c:	af00      	add	r7, sp, #0
1a00b69e:	4603      	mov	r3, r0
1a00b6a0:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
1a00b6a2:	88fb      	ldrh	r3, [r7, #6]
1a00b6a4:	4a0c      	ldr	r2, [pc, #48]	; (1a00b6d8 <dmp_set_shake_reject_time+0x40>)
1a00b6a6:	fba2 2303 	umull	r2, r3, r2, r3
1a00b6aa:	089b      	lsrs	r3, r3, #2
1a00b6ac:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
1a00b6ae:	88fb      	ldrh	r3, [r7, #6]
1a00b6b0:	0a1b      	lsrs	r3, r3, #8
1a00b6b2:	b29b      	uxth	r3, r3
1a00b6b4:	b2db      	uxtb	r3, r3
1a00b6b6:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
1a00b6b8:	88fb      	ldrh	r3, [r7, #6]
1a00b6ba:	b2db      	uxtb	r3, r3
1a00b6bc:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
1a00b6be:	f107 030c 	add.w	r3, r7, #12
1a00b6c2:	461a      	mov	r2, r3
1a00b6c4:	2102      	movs	r1, #2
1a00b6c6:	f44f 70ad 	mov.w	r0, #346	; 0x15a
1a00b6ca:	f7ff f939 	bl	1a00a940 <mpu_write_mem>
1a00b6ce:	4603      	mov	r3, r0
}
1a00b6d0:	4618      	mov	r0, r3
1a00b6d2:	3710      	adds	r7, #16
1a00b6d4:	46bd      	mov	sp, r7
1a00b6d6:	bd80      	pop	{r7, pc}
1a00b6d8:	cccccccd 	.word	0xcccccccd

1a00b6dc <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
1a00b6dc:	b580      	push	{r7, lr}
1a00b6de:	b084      	sub	sp, #16
1a00b6e0:	af00      	add	r7, sp, #0
1a00b6e2:	4603      	mov	r3, r0
1a00b6e4:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
1a00b6e6:	88fb      	ldrh	r3, [r7, #6]
1a00b6e8:	4a0c      	ldr	r2, [pc, #48]	; (1a00b71c <dmp_set_shake_reject_timeout+0x40>)
1a00b6ea:	fba2 2303 	umull	r2, r3, r2, r3
1a00b6ee:	089b      	lsrs	r3, r3, #2
1a00b6f0:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
1a00b6f2:	88fb      	ldrh	r3, [r7, #6]
1a00b6f4:	0a1b      	lsrs	r3, r3, #8
1a00b6f6:	b29b      	uxth	r3, r3
1a00b6f8:	b2db      	uxtb	r3, r3
1a00b6fa:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
1a00b6fc:	88fb      	ldrh	r3, [r7, #6]
1a00b6fe:	b2db      	uxtb	r3, r3
1a00b700:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
1a00b702:	f107 030c 	add.w	r3, r7, #12
1a00b706:	461a      	mov	r2, r3
1a00b708:	2102      	movs	r1, #2
1a00b70a:	f44f 70ac 	mov.w	r0, #344	; 0x158
1a00b70e:	f7ff f917 	bl	1a00a940 <mpu_write_mem>
1a00b712:	4603      	mov	r3, r0
}
1a00b714:	4618      	mov	r0, r3
1a00b716:	3710      	adds	r7, #16
1a00b718:	46bd      	mov	sp, r7
1a00b71a:	bd80      	pop	{r7, pc}
1a00b71c:	cccccccd 	.word	0xcccccccd

1a00b720 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
1a00b720:	b580      	push	{r7, lr}
1a00b722:	b086      	sub	sp, #24
1a00b724:	af00      	add	r7, sp, #0
1a00b726:	4603      	mov	r3, r0
1a00b728:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
1a00b72a:	2302      	movs	r3, #2
1a00b72c:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
1a00b72e:	23ca      	movs	r3, #202	; 0xca
1a00b730:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
1a00b732:	23e3      	movs	r3, #227	; 0xe3
1a00b734:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
1a00b736:	2309      	movs	r3, #9
1a00b738:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
1a00b73a:	f107 030c 	add.w	r3, r7, #12
1a00b73e:	461a      	mov	r2, r3
1a00b740:	2104      	movs	r1, #4
1a00b742:	2068      	movs	r0, #104	; 0x68
1a00b744:	f7ff f8fc 	bl	1a00a940 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
1a00b748:	23a3      	movs	r3, #163	; 0xa3
1a00b74a:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
1a00b74c:	88fb      	ldrh	r3, [r7, #6]
1a00b74e:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a00b752:	2b00      	cmp	r3, #0
1a00b754:	d006      	beq.n	1a00b764 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
1a00b756:	23c0      	movs	r3, #192	; 0xc0
1a00b758:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
1a00b75a:	23c8      	movs	r3, #200	; 0xc8
1a00b75c:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
1a00b75e:	23c2      	movs	r3, #194	; 0xc2
1a00b760:	73fb      	strb	r3, [r7, #15]
1a00b762:	e005      	b.n	1a00b770 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
1a00b764:	23a3      	movs	r3, #163	; 0xa3
1a00b766:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
1a00b768:	23a3      	movs	r3, #163	; 0xa3
1a00b76a:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
1a00b76c:	23a3      	movs	r3, #163	; 0xa3
1a00b76e:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
1a00b770:	88fb      	ldrh	r3, [r7, #6]
1a00b772:	f403 73c0 	and.w	r3, r3, #384	; 0x180
1a00b776:	2b00      	cmp	r3, #0
1a00b778:	d006      	beq.n	1a00b788 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
1a00b77a:	23c4      	movs	r3, #196	; 0xc4
1a00b77c:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
1a00b77e:	23cc      	movs	r3, #204	; 0xcc
1a00b780:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
1a00b782:	23c6      	movs	r3, #198	; 0xc6
1a00b784:	74bb      	strb	r3, [r7, #18]
1a00b786:	e005      	b.n	1a00b794 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
1a00b788:	23a3      	movs	r3, #163	; 0xa3
1a00b78a:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
1a00b78c:	23a3      	movs	r3, #163	; 0xa3
1a00b78e:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
1a00b790:	23a3      	movs	r3, #163	; 0xa3
1a00b792:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
1a00b794:	23a3      	movs	r3, #163	; 0xa3
1a00b796:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
1a00b798:	23a3      	movs	r3, #163	; 0xa3
1a00b79a:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
1a00b79c:	23a3      	movs	r3, #163	; 0xa3
1a00b79e:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
1a00b7a0:	f107 030c 	add.w	r3, r7, #12
1a00b7a4:	461a      	mov	r2, r3
1a00b7a6:	210a      	movs	r1, #10
1a00b7a8:	f640 20a7 	movw	r0, #2727	; 0xaa7
1a00b7ac:	f7ff f8c8 	bl	1a00a940 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1a00b7b0:	88fb      	ldrh	r3, [r7, #6]
1a00b7b2:	f003 0303 	and.w	r3, r3, #3
1a00b7b6:	2b00      	cmp	r3, #0
1a00b7b8:	d002      	beq.n	1a00b7c0 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
1a00b7ba:	2320      	movs	r3, #32
1a00b7bc:	733b      	strb	r3, [r7, #12]
1a00b7be:	e001      	b.n	1a00b7c4 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
1a00b7c0:	23d8      	movs	r3, #216	; 0xd8
1a00b7c2:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
1a00b7c4:	f107 030c 	add.w	r3, r7, #12
1a00b7c8:	461a      	mov	r2, r3
1a00b7ca:	2101      	movs	r1, #1
1a00b7cc:	f640 20b6 	movw	r0, #2742	; 0xab6
1a00b7d0:	f7ff f8b6 	bl	1a00a940 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
1a00b7d4:	88fb      	ldrh	r3, [r7, #6]
1a00b7d6:	f003 0320 	and.w	r3, r3, #32
1a00b7da:	2b00      	cmp	r3, #0
1a00b7dc:	d003      	beq.n	1a00b7e6 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
1a00b7de:	2001      	movs	r0, #1
1a00b7e0:	f000 f8c6 	bl	1a00b970 <dmp_enable_gyro_cal>
1a00b7e4:	e002      	b.n	1a00b7ec <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
1a00b7e6:	2000      	movs	r0, #0
1a00b7e8:	f000 f8c2 	bl	1a00b970 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
1a00b7ec:	88fb      	ldrh	r3, [r7, #6]
1a00b7ee:	f403 73c0 	and.w	r3, r3, #384	; 0x180
1a00b7f2:	2b00      	cmp	r3, #0
1a00b7f4:	d01d      	beq.n	1a00b832 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
1a00b7f6:	88fb      	ldrh	r3, [r7, #6]
1a00b7f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
1a00b7fc:	2b00      	cmp	r3, #0
1a00b7fe:	d008      	beq.n	1a00b812 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
1a00b800:	23b2      	movs	r3, #178	; 0xb2
1a00b802:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
1a00b804:	238b      	movs	r3, #139	; 0x8b
1a00b806:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
1a00b808:	23b6      	movs	r3, #182	; 0xb6
1a00b80a:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
1a00b80c:	239b      	movs	r3, #155	; 0x9b
1a00b80e:	73fb      	strb	r3, [r7, #15]
1a00b810:	e007      	b.n	1a00b822 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
1a00b812:	23b0      	movs	r3, #176	; 0xb0
1a00b814:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
1a00b816:	2380      	movs	r3, #128	; 0x80
1a00b818:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
1a00b81a:	23b4      	movs	r3, #180	; 0xb4
1a00b81c:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
1a00b81e:	2390      	movs	r3, #144	; 0x90
1a00b820:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
1a00b822:	f107 030c 	add.w	r3, r7, #12
1a00b826:	461a      	mov	r2, r3
1a00b828:	2104      	movs	r1, #4
1a00b82a:	f640 20a2 	movw	r0, #2722	; 0xaa2
1a00b82e:	f7ff f887 	bl	1a00a940 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
1a00b832:	88fb      	ldrh	r3, [r7, #6]
1a00b834:	f003 0301 	and.w	r3, r3, #1
1a00b838:	2b00      	cmp	r3, #0
1a00b83a:	d025      	beq.n	1a00b888 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
1a00b83c:	23f8      	movs	r3, #248	; 0xf8
1a00b83e:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
1a00b840:	f107 030c 	add.w	r3, r7, #12
1a00b844:	461a      	mov	r2, r3
1a00b846:	2101      	movs	r1, #1
1a00b848:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
1a00b84c:	f7ff f878 	bl	1a00a940 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
1a00b850:	21fa      	movs	r1, #250	; 0xfa
1a00b852:	2007      	movs	r0, #7
1a00b854:	f7ff fd1a 	bl	1a00b28c <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
1a00b858:	2007      	movs	r0, #7
1a00b85a:	f7ff fe55 	bl	1a00b508 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
1a00b85e:	2001      	movs	r0, #1
1a00b860:	f7ff fe84 	bl	1a00b56c <dmp_set_tap_count>
        dmp_set_tap_time(100);
1a00b864:	2064      	movs	r0, #100	; 0x64
1a00b866:	f7ff fea3 	bl	1a00b5b0 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
1a00b86a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00b86e:	f7ff fec1 	bl	1a00b5f4 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
1a00b872:	21c8      	movs	r1, #200	; 0xc8
1a00b874:	483c      	ldr	r0, [pc, #240]	; (1a00b968 <dmp_enable_feature+0x248>)
1a00b876:	f7ff fedf 	bl	1a00b638 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
1a00b87a:	2028      	movs	r0, #40	; 0x28
1a00b87c:	f7ff ff0c 	bl	1a00b698 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
1a00b880:	200a      	movs	r0, #10
1a00b882:	f7ff ff2b 	bl	1a00b6dc <dmp_set_shake_reject_timeout>
1a00b886:	e009      	b.n	1a00b89c <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
1a00b888:	23d8      	movs	r3, #216	; 0xd8
1a00b88a:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
1a00b88c:	f107 030c 	add.w	r3, r7, #12
1a00b890:	461a      	mov	r2, r3
1a00b892:	2101      	movs	r1, #1
1a00b894:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
1a00b898:	f7ff f852 	bl	1a00a940 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
1a00b89c:	88fb      	ldrh	r3, [r7, #6]
1a00b89e:	f003 0302 	and.w	r3, r3, #2
1a00b8a2:	2b00      	cmp	r3, #0
1a00b8a4:	d002      	beq.n	1a00b8ac <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
1a00b8a6:	23d9      	movs	r3, #217	; 0xd9
1a00b8a8:	733b      	strb	r3, [r7, #12]
1a00b8aa:	e001      	b.n	1a00b8b0 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
1a00b8ac:	23d8      	movs	r3, #216	; 0xd8
1a00b8ae:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
1a00b8b0:	f107 030c 	add.w	r3, r7, #12
1a00b8b4:	461a      	mov	r2, r3
1a00b8b6:	2101      	movs	r1, #1
1a00b8b8:	f240 703d 	movw	r0, #1853	; 0x73d
1a00b8bc:	f7ff f840 	bl	1a00a940 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
1a00b8c0:	88fb      	ldrh	r3, [r7, #6]
1a00b8c2:	f003 0304 	and.w	r3, r3, #4
1a00b8c6:	2b00      	cmp	r3, #0
1a00b8c8:	d003      	beq.n	1a00b8d2 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
1a00b8ca:	2001      	movs	r0, #1
1a00b8cc:	f000 f884 	bl	1a00b9d8 <dmp_enable_lp_quat>
1a00b8d0:	e002      	b.n	1a00b8d8 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
1a00b8d2:	2000      	movs	r0, #0
1a00b8d4:	f000 f880 	bl	1a00b9d8 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
1a00b8d8:	88fb      	ldrh	r3, [r7, #6]
1a00b8da:	f003 0310 	and.w	r3, r3, #16
1a00b8de:	2b00      	cmp	r3, #0
1a00b8e0:	d003      	beq.n	1a00b8ea <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
1a00b8e2:	2001      	movs	r0, #1
1a00b8e4:	f000 f8a0 	bl	1a00ba28 <dmp_enable_6x_lp_quat>
1a00b8e8:	e002      	b.n	1a00b8f0 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
1a00b8ea:	2000      	movs	r0, #0
1a00b8ec:	f000 f89c 	bl	1a00ba28 <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
1a00b8f0:	88fb      	ldrh	r3, [r7, #6]
1a00b8f2:	f043 0308 	orr.w	r3, r3, #8
1a00b8f6:	b29a      	uxth	r2, r3
1a00b8f8:	4b1c      	ldr	r3, [pc, #112]	; (1a00b96c <dmp_enable_feature+0x24c>)
1a00b8fa:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
1a00b8fc:	f7fe fa14 	bl	1a009d28 <mpu_reset_fifo>

    dmp.packet_length = 0;
1a00b900:	4b1a      	ldr	r3, [pc, #104]	; (1a00b96c <dmp_enable_feature+0x24c>)
1a00b902:	2200      	movs	r2, #0
1a00b904:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
1a00b906:	88fb      	ldrh	r3, [r7, #6]
1a00b908:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a00b90c:	2b00      	cmp	r3, #0
1a00b90e:	d005      	beq.n	1a00b91c <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
1a00b910:	4b16      	ldr	r3, [pc, #88]	; (1a00b96c <dmp_enable_feature+0x24c>)
1a00b912:	7b9b      	ldrb	r3, [r3, #14]
1a00b914:	3306      	adds	r3, #6
1a00b916:	b2da      	uxtb	r2, r3
1a00b918:	4b14      	ldr	r3, [pc, #80]	; (1a00b96c <dmp_enable_feature+0x24c>)
1a00b91a:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
1a00b91c:	88fb      	ldrh	r3, [r7, #6]
1a00b91e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
1a00b922:	2b00      	cmp	r3, #0
1a00b924:	d005      	beq.n	1a00b932 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
1a00b926:	4b11      	ldr	r3, [pc, #68]	; (1a00b96c <dmp_enable_feature+0x24c>)
1a00b928:	7b9b      	ldrb	r3, [r3, #14]
1a00b92a:	3306      	adds	r3, #6
1a00b92c:	b2da      	uxtb	r2, r3
1a00b92e:	4b0f      	ldr	r3, [pc, #60]	; (1a00b96c <dmp_enable_feature+0x24c>)
1a00b930:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
1a00b932:	88fb      	ldrh	r3, [r7, #6]
1a00b934:	f003 0314 	and.w	r3, r3, #20
1a00b938:	2b00      	cmp	r3, #0
1a00b93a:	d005      	beq.n	1a00b948 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
1a00b93c:	4b0b      	ldr	r3, [pc, #44]	; (1a00b96c <dmp_enable_feature+0x24c>)
1a00b93e:	7b9b      	ldrb	r3, [r3, #14]
1a00b940:	3310      	adds	r3, #16
1a00b942:	b2da      	uxtb	r2, r3
1a00b944:	4b09      	ldr	r3, [pc, #36]	; (1a00b96c <dmp_enable_feature+0x24c>)
1a00b946:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1a00b948:	88fb      	ldrh	r3, [r7, #6]
1a00b94a:	f003 0303 	and.w	r3, r3, #3
1a00b94e:	2b00      	cmp	r3, #0
1a00b950:	d005      	beq.n	1a00b95e <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
1a00b952:	4b06      	ldr	r3, [pc, #24]	; (1a00b96c <dmp_enable_feature+0x24c>)
1a00b954:	7b9b      	ldrb	r3, [r3, #14]
1a00b956:	3304      	adds	r3, #4
1a00b958:	b2da      	uxtb	r2, r3
1a00b95a:	4b04      	ldr	r3, [pc, #16]	; (1a00b96c <dmp_enable_feature+0x24c>)
1a00b95c:	739a      	strb	r2, [r3, #14]

    return 0;
1a00b95e:	2300      	movs	r3, #0
}
1a00b960:	4618      	mov	r0, r3
1a00b962:	3718      	adds	r7, #24
1a00b964:	46bd      	mov	sp, r7
1a00b966:	bd80      	pop	{r7, pc}
1a00b968:	02cae309 	.word	0x02cae309
1a00b96c:	10086bcc 	.word	0x10086bcc

1a00b970 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
1a00b970:	b580      	push	{r7, lr}
1a00b972:	b088      	sub	sp, #32
1a00b974:	af00      	add	r7, sp, #0
1a00b976:	4603      	mov	r3, r0
1a00b978:	71fb      	strb	r3, [r7, #7]
    if (enable) {
1a00b97a:	79fb      	ldrb	r3, [r7, #7]
1a00b97c:	2b00      	cmp	r3, #0
1a00b97e:	d011      	beq.n	1a00b9a4 <dmp_enable_gyro_cal+0x34>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
1a00b980:	4a13      	ldr	r2, [pc, #76]	; (1a00b9d0 <dmp_enable_gyro_cal+0x60>)
1a00b982:	f107 0314 	add.w	r3, r7, #20
1a00b986:	6810      	ldr	r0, [r2, #0]
1a00b988:	6851      	ldr	r1, [r2, #4]
1a00b98a:	c303      	stmia	r3!, {r0, r1}
1a00b98c:	7a12      	ldrb	r2, [r2, #8]
1a00b98e:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
1a00b990:	f107 0314 	add.w	r3, r7, #20
1a00b994:	461a      	mov	r2, r3
1a00b996:	2109      	movs	r1, #9
1a00b998:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
1a00b99c:	f7fe ffd0 	bl	1a00a940 <mpu_write_mem>
1a00b9a0:	4603      	mov	r3, r0
1a00b9a2:	e010      	b.n	1a00b9c6 <dmp_enable_gyro_cal+0x56>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
1a00b9a4:	4a0b      	ldr	r2, [pc, #44]	; (1a00b9d4 <dmp_enable_gyro_cal+0x64>)
1a00b9a6:	f107 0308 	add.w	r3, r7, #8
1a00b9aa:	6810      	ldr	r0, [r2, #0]
1a00b9ac:	6851      	ldr	r1, [r2, #4]
1a00b9ae:	c303      	stmia	r3!, {r0, r1}
1a00b9b0:	7a12      	ldrb	r2, [r2, #8]
1a00b9b2:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
1a00b9b4:	f107 0308 	add.w	r3, r7, #8
1a00b9b8:	461a      	mov	r2, r3
1a00b9ba:	2109      	movs	r1, #9
1a00b9bc:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
1a00b9c0:	f7fe ffbe 	bl	1a00a940 <mpu_write_mem>
1a00b9c4:	4603      	mov	r3, r0
    }
}
1a00b9c6:	4618      	mov	r0, r3
1a00b9c8:	3720      	adds	r7, #32
1a00b9ca:	46bd      	mov	sp, r7
1a00b9cc:	bd80      	pop	{r7, pc}
1a00b9ce:	bf00      	nop
1a00b9d0:	1a01aa54 	.word	0x1a01aa54
1a00b9d4:	1a01aa60 	.word	0x1a01aa60

1a00b9d8 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
1a00b9d8:	b580      	push	{r7, lr}
1a00b9da:	b084      	sub	sp, #16
1a00b9dc:	af00      	add	r7, sp, #0
1a00b9de:	4603      	mov	r3, r0
1a00b9e0:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
1a00b9e2:	79fb      	ldrb	r3, [r7, #7]
1a00b9e4:	2b00      	cmp	r3, #0
1a00b9e6:	d008      	beq.n	1a00b9fa <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
1a00b9e8:	23c0      	movs	r3, #192	; 0xc0
1a00b9ea:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
1a00b9ec:	23c2      	movs	r3, #194	; 0xc2
1a00b9ee:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
1a00b9f0:	23c4      	movs	r3, #196	; 0xc4
1a00b9f2:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
1a00b9f4:	23c6      	movs	r3, #198	; 0xc6
1a00b9f6:	73fb      	strb	r3, [r7, #15]
1a00b9f8:	e006      	b.n	1a00ba08 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
1a00b9fa:	f107 030c 	add.w	r3, r7, #12
1a00b9fe:	2204      	movs	r2, #4
1a00ba00:	218b      	movs	r1, #139	; 0x8b
1a00ba02:	4618      	mov	r0, r3
1a00ba04:	f009 f9ec 	bl	1a014de0 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
1a00ba08:	f107 030c 	add.w	r3, r7, #12
1a00ba0c:	461a      	mov	r2, r3
1a00ba0e:	2104      	movs	r1, #4
1a00ba10:	f640 2098 	movw	r0, #2712	; 0xa98
1a00ba14:	f7fe ff94 	bl	1a00a940 <mpu_write_mem>

    return mpu_reset_fifo();
1a00ba18:	f7fe f986 	bl	1a009d28 <mpu_reset_fifo>
1a00ba1c:	4603      	mov	r3, r0
}
1a00ba1e:	4618      	mov	r0, r3
1a00ba20:	3710      	adds	r7, #16
1a00ba22:	46bd      	mov	sp, r7
1a00ba24:	bd80      	pop	{r7, pc}
1a00ba26:	bf00      	nop

1a00ba28 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
1a00ba28:	b580      	push	{r7, lr}
1a00ba2a:	b084      	sub	sp, #16
1a00ba2c:	af00      	add	r7, sp, #0
1a00ba2e:	4603      	mov	r3, r0
1a00ba30:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
1a00ba32:	79fb      	ldrb	r3, [r7, #7]
1a00ba34:	2b00      	cmp	r3, #0
1a00ba36:	d008      	beq.n	1a00ba4a <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
1a00ba38:	2320      	movs	r3, #32
1a00ba3a:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
1a00ba3c:	2328      	movs	r3, #40	; 0x28
1a00ba3e:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
1a00ba40:	2330      	movs	r3, #48	; 0x30
1a00ba42:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
1a00ba44:	2338      	movs	r3, #56	; 0x38
1a00ba46:	73fb      	strb	r3, [r7, #15]
1a00ba48:	e006      	b.n	1a00ba58 <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
1a00ba4a:	f107 030c 	add.w	r3, r7, #12
1a00ba4e:	2204      	movs	r2, #4
1a00ba50:	21a3      	movs	r1, #163	; 0xa3
1a00ba52:	4618      	mov	r0, r3
1a00ba54:	f009 f9c4 	bl	1a014de0 <memset>

    mpu_write_mem(CFG_8, 4, regs);
1a00ba58:	f107 030c 	add.w	r3, r7, #12
1a00ba5c:	461a      	mov	r2, r3
1a00ba5e:	2104      	movs	r1, #4
1a00ba60:	f640 209e 	movw	r0, #2718	; 0xa9e
1a00ba64:	f7fe ff6c 	bl	1a00a940 <mpu_write_mem>

    return mpu_reset_fifo();
1a00ba68:	f7fe f95e 	bl	1a009d28 <mpu_reset_fifo>
1a00ba6c:	4603      	mov	r3, r0
}
1a00ba6e:	4618      	mov	r0, r3
1a00ba70:	3710      	adds	r7, #16
1a00ba72:	46bd      	mov	sp, r7
1a00ba74:	bd80      	pop	{r7, pc}
1a00ba76:	bf00      	nop

1a00ba78 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
1a00ba78:	b580      	push	{r7, lr}
1a00ba7a:	b084      	sub	sp, #16
1a00ba7c:	af00      	add	r7, sp, #0
1a00ba7e:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
1a00ba80:	687b      	ldr	r3, [r7, #4]
1a00ba82:	3303      	adds	r3, #3
1a00ba84:	781b      	ldrb	r3, [r3, #0]
1a00ba86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
1a00ba8a:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
1a00ba8c:	687b      	ldr	r3, [r7, #4]
1a00ba8e:	3303      	adds	r3, #3
1a00ba90:	781b      	ldrb	r3, [r3, #0]
1a00ba92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a00ba96:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
1a00ba98:	687b      	ldr	r3, [r7, #4]
1a00ba9a:	3301      	adds	r3, #1
1a00ba9c:	781b      	ldrb	r3, [r3, #0]
1a00ba9e:	f003 0301 	and.w	r3, r3, #1
1a00baa2:	2b00      	cmp	r3, #0
1a00baa4:	d012      	beq.n	1a00bacc <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
1a00baa6:	7bbb      	ldrb	r3, [r7, #14]
1a00baa8:	08db      	lsrs	r3, r3, #3
1a00baaa:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
1a00baac:	7bbb      	ldrb	r3, [r7, #14]
1a00baae:	f003 0307 	and.w	r3, r3, #7
1a00bab2:	b2db      	uxtb	r3, r3
1a00bab4:	3301      	adds	r3, #1
1a00bab6:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
1a00bab8:	4b10      	ldr	r3, [pc, #64]	; (1a00bafc <decode_gesture+0x84>)
1a00baba:	681b      	ldr	r3, [r3, #0]
1a00babc:	2b00      	cmp	r3, #0
1a00babe:	d005      	beq.n	1a00bacc <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
1a00bac0:	4b0e      	ldr	r3, [pc, #56]	; (1a00bafc <decode_gesture+0x84>)
1a00bac2:	681b      	ldr	r3, [r3, #0]
1a00bac4:	7b39      	ldrb	r1, [r7, #12]
1a00bac6:	7b7a      	ldrb	r2, [r7, #13]
1a00bac8:	4610      	mov	r0, r2
1a00baca:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
1a00bacc:	687b      	ldr	r3, [r7, #4]
1a00bace:	3301      	adds	r3, #1
1a00bad0:	781b      	ldrb	r3, [r3, #0]
1a00bad2:	f003 0308 	and.w	r3, r3, #8
1a00bad6:	2b00      	cmp	r3, #0
1a00bad8:	d00a      	beq.n	1a00baf0 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
1a00bada:	4b08      	ldr	r3, [pc, #32]	; (1a00bafc <decode_gesture+0x84>)
1a00badc:	685b      	ldr	r3, [r3, #4]
1a00bade:	2b00      	cmp	r3, #0
1a00bae0:	d006      	beq.n	1a00baf0 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
1a00bae2:	4b06      	ldr	r3, [pc, #24]	; (1a00bafc <decode_gesture+0x84>)
1a00bae4:	685b      	ldr	r3, [r3, #4]
1a00bae6:	7bfa      	ldrb	r2, [r7, #15]
1a00bae8:	0992      	lsrs	r2, r2, #6
1a00baea:	b2d2      	uxtb	r2, r2
1a00baec:	4610      	mov	r0, r2
1a00baee:	4798      	blx	r3
    }

    return 0;
1a00baf0:	2300      	movs	r3, #0
}
1a00baf2:	4618      	mov	r0, r3
1a00baf4:	3710      	adds	r7, #16
1a00baf6:	46bd      	mov	sp, r7
1a00baf8:	bd80      	pop	{r7, pc}
1a00bafa:	bf00      	nop
1a00bafc:	10086bcc 	.word	0x10086bcc

1a00bb00 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
1a00bb00:	b580      	push	{r7, lr}
1a00bb02:	b092      	sub	sp, #72	; 0x48
1a00bb04:	af00      	add	r7, sp, #0
1a00bb06:	60f8      	str	r0, [r7, #12]
1a00bb08:	60b9      	str	r1, [r7, #8]
1a00bb0a:	607a      	str	r2, [r7, #4]
1a00bb0c:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
1a00bb0e:	2300      	movs	r3, #0
1a00bb10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
1a00bb14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00bb16:	2200      	movs	r2, #0
1a00bb18:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
1a00bb1a:	4bb1      	ldr	r3, [pc, #708]	; (1a00bde0 <dmp_read_fifo+0x2e0>)
1a00bb1c:	7b9b      	ldrb	r3, [r3, #14]
1a00bb1e:	b29b      	uxth	r3, r3
1a00bb20:	f107 0120 	add.w	r1, r7, #32
1a00bb24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
1a00bb26:	4618      	mov	r0, r3
1a00bb28:	f7fe fd70 	bl	1a00a60c <mpu_read_fifo_stream>
1a00bb2c:	4603      	mov	r3, r0
1a00bb2e:	2b00      	cmp	r3, #0
1a00bb30:	d002      	beq.n	1a00bb38 <dmp_read_fifo+0x38>
        return -1;
1a00bb32:	f04f 33ff 	mov.w	r3, #4294967295
1a00bb36:	e14e      	b.n	1a00bdd6 <dmp_read_fifo+0x2d6>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
1a00bb38:	4ba9      	ldr	r3, [pc, #676]	; (1a00bde0 <dmp_read_fifo+0x2e0>)
1a00bb3a:	895b      	ldrh	r3, [r3, #10]
1a00bb3c:	f003 0314 	and.w	r3, r3, #20
1a00bb40:	2b00      	cmp	r3, #0
1a00bb42:	f000 8086 	beq.w	1a00bc52 <dmp_read_fifo+0x152>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
1a00bb46:	f897 3020 	ldrb.w	r3, [r7, #32]
1a00bb4a:	061a      	lsls	r2, r3, #24
1a00bb4c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
1a00bb50:	041b      	lsls	r3, r3, #16
1a00bb52:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
1a00bb54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
1a00bb58:	021b      	lsls	r3, r3, #8
    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
1a00bb5a:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
1a00bb5c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
1a00bb60:	431a      	orrs	r2, r3
    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
1a00bb62:	687b      	ldr	r3, [r7, #4]
1a00bb64:	601a      	str	r2, [r3, #0]
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
1a00bb66:	687b      	ldr	r3, [r7, #4]
1a00bb68:	3304      	adds	r3, #4
1a00bb6a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
1a00bb6e:	0611      	lsls	r1, r2, #24
1a00bb70:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
1a00bb74:	0412      	lsls	r2, r2, #16
1a00bb76:	4311      	orrs	r1, r2
            ((long)fifo_data[6] << 8) | fifo_data[7];
1a00bb78:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
1a00bb7c:	0212      	lsls	r2, r2, #8
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
1a00bb7e:	430a      	orrs	r2, r1
            ((long)fifo_data[6] << 8) | fifo_data[7];
1a00bb80:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
1a00bb84:	430a      	orrs	r2, r1
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
1a00bb86:	601a      	str	r2, [r3, #0]
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
1a00bb88:	687b      	ldr	r3, [r7, #4]
1a00bb8a:	3308      	adds	r3, #8
1a00bb8c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
1a00bb90:	0611      	lsls	r1, r2, #24
1a00bb92:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
1a00bb96:	0412      	lsls	r2, r2, #16
1a00bb98:	4311      	orrs	r1, r2
            ((long)fifo_data[10] << 8) | fifo_data[11];
1a00bb9a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
1a00bb9e:	0212      	lsls	r2, r2, #8
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
1a00bba0:	430a      	orrs	r2, r1
            ((long)fifo_data[10] << 8) | fifo_data[11];
1a00bba2:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
1a00bba6:	430a      	orrs	r2, r1
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
1a00bba8:	601a      	str	r2, [r3, #0]
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
1a00bbaa:	687b      	ldr	r3, [r7, #4]
1a00bbac:	330c      	adds	r3, #12
1a00bbae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
1a00bbb2:	0611      	lsls	r1, r2, #24
1a00bbb4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
1a00bbb8:	0412      	lsls	r2, r2, #16
1a00bbba:	4311      	orrs	r1, r2
            ((long)fifo_data[14] << 8) | fifo_data[15];
1a00bbbc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
1a00bbc0:	0212      	lsls	r2, r2, #8
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
1a00bbc2:	430a      	orrs	r2, r1
            ((long)fifo_data[14] << 8) | fifo_data[15];
1a00bbc4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
1a00bbc8:	430a      	orrs	r2, r1
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
1a00bbca:	601a      	str	r2, [r3, #0]
            ((long)fifo_data[14] << 8) | fifo_data[15];
        ii += 16;
1a00bbcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
1a00bbd0:	3310      	adds	r3, #16
1a00bbd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
1a00bbd6:	687b      	ldr	r3, [r7, #4]
1a00bbd8:	681b      	ldr	r3, [r3, #0]
1a00bbda:	141b      	asrs	r3, r3, #16
1a00bbdc:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
1a00bbde:	687b      	ldr	r3, [r7, #4]
1a00bbe0:	3304      	adds	r3, #4
1a00bbe2:	681b      	ldr	r3, [r3, #0]
1a00bbe4:	141b      	asrs	r3, r3, #16
1a00bbe6:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
1a00bbe8:	687b      	ldr	r3, [r7, #4]
1a00bbea:	3308      	adds	r3, #8
1a00bbec:	681b      	ldr	r3, [r3, #0]
1a00bbee:	141b      	asrs	r3, r3, #16
1a00bbf0:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
1a00bbf2:	687b      	ldr	r3, [r7, #4]
1a00bbf4:	330c      	adds	r3, #12
1a00bbf6:	681b      	ldr	r3, [r3, #0]
1a00bbf8:	141b      	asrs	r3, r3, #16
1a00bbfa:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
1a00bbfc:	693b      	ldr	r3, [r7, #16]
1a00bbfe:	693a      	ldr	r2, [r7, #16]
1a00bc00:	fb02 f203 	mul.w	r2, r2, r3
1a00bc04:	697b      	ldr	r3, [r7, #20]
1a00bc06:	6979      	ldr	r1, [r7, #20]
1a00bc08:	fb01 f303 	mul.w	r3, r1, r3
1a00bc0c:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
1a00bc0e:	69bb      	ldr	r3, [r7, #24]
1a00bc10:	69b9      	ldr	r1, [r7, #24]
1a00bc12:	fb01 f303 	mul.w	r3, r1, r3
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
1a00bc16:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
1a00bc18:	69fb      	ldr	r3, [r7, #28]
1a00bc1a:	69f9      	ldr	r1, [r7, #28]
1a00bc1c:	fb01 f303 	mul.w	r3, r1, r3
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
1a00bc20:	4413      	add	r3, r2
1a00bc22:	643b      	str	r3, [r7, #64]	; 0x40
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
1a00bc24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a00bc26:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
1a00bc2a:	db03      	blt.n	1a00bc34 <dmp_read_fifo+0x134>
1a00bc2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1a00bc2e:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
1a00bc32:	dd07      	ble.n	1a00bc44 <dmp_read_fifo+0x144>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
1a00bc34:	f7fe f878 	bl	1a009d28 <mpu_reset_fifo>
            sensors[0] = 0;
1a00bc38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00bc3a:	2200      	movs	r2, #0
1a00bc3c:	801a      	strh	r2, [r3, #0]
            return -1;
1a00bc3e:	f04f 33ff 	mov.w	r3, #4294967295
1a00bc42:	e0c8      	b.n	1a00bdd6 <dmp_read_fifo+0x2d6>
        }
        sensors[0] |= INV_WXYZ_QUAT;
1a00bc44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00bc46:	881b      	ldrh	r3, [r3, #0]
1a00bc48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a00bc4c:	b29a      	uxth	r2, r3
1a00bc4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00bc50:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
1a00bc52:	4b63      	ldr	r3, [pc, #396]	; (1a00bde0 <dmp_read_fifo+0x2e0>)
1a00bc54:	895b      	ldrh	r3, [r3, #10]
1a00bc56:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a00bc5a:	2b00      	cmp	r3, #0
1a00bc5c:	d051      	beq.n	1a00bd02 <dmp_read_fifo+0x202>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
1a00bc5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
1a00bc62:	f107 0248 	add.w	r2, r7, #72	; 0x48
1a00bc66:	4413      	add	r3, r2
1a00bc68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
1a00bc6c:	021b      	lsls	r3, r3, #8
1a00bc6e:	b29a      	uxth	r2, r3
1a00bc70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
1a00bc74:	3301      	adds	r3, #1
1a00bc76:	f107 0148 	add.w	r1, r7, #72	; 0x48
1a00bc7a:	440b      	add	r3, r1
1a00bc7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
1a00bc80:	b29b      	uxth	r3, r3
1a00bc82:	4313      	orrs	r3, r2
1a00bc84:	b29a      	uxth	r2, r3
1a00bc86:	68bb      	ldr	r3, [r7, #8]
1a00bc88:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
1a00bc8a:	68bb      	ldr	r3, [r7, #8]
1a00bc8c:	3302      	adds	r3, #2
1a00bc8e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
1a00bc92:	3202      	adds	r2, #2
1a00bc94:	f107 0148 	add.w	r1, r7, #72	; 0x48
1a00bc98:	440a      	add	r2, r1
1a00bc9a:	f812 2c28 	ldrb.w	r2, [r2, #-40]
1a00bc9e:	0212      	lsls	r2, r2, #8
1a00bca0:	b291      	uxth	r1, r2
1a00bca2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
1a00bca6:	3203      	adds	r2, #3
1a00bca8:	f107 0048 	add.w	r0, r7, #72	; 0x48
1a00bcac:	4402      	add	r2, r0
1a00bcae:	f812 2c28 	ldrb.w	r2, [r2, #-40]
1a00bcb2:	b292      	uxth	r2, r2
1a00bcb4:	430a      	orrs	r2, r1
1a00bcb6:	b292      	uxth	r2, r2
1a00bcb8:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
1a00bcba:	68bb      	ldr	r3, [r7, #8]
1a00bcbc:	3304      	adds	r3, #4
1a00bcbe:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
1a00bcc2:	3204      	adds	r2, #4
1a00bcc4:	f107 0148 	add.w	r1, r7, #72	; 0x48
1a00bcc8:	440a      	add	r2, r1
1a00bcca:	f812 2c28 	ldrb.w	r2, [r2, #-40]
1a00bcce:	0212      	lsls	r2, r2, #8
1a00bcd0:	b291      	uxth	r1, r2
1a00bcd2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
1a00bcd6:	3205      	adds	r2, #5
1a00bcd8:	f107 0048 	add.w	r0, r7, #72	; 0x48
1a00bcdc:	4402      	add	r2, r0
1a00bcde:	f812 2c28 	ldrb.w	r2, [r2, #-40]
1a00bce2:	b292      	uxth	r2, r2
1a00bce4:	430a      	orrs	r2, r1
1a00bce6:	b292      	uxth	r2, r2
1a00bce8:	801a      	strh	r2, [r3, #0]
        ii += 6;
1a00bcea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
1a00bcee:	3306      	adds	r3, #6
1a00bcf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
1a00bcf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00bcf6:	881b      	ldrh	r3, [r3, #0]
1a00bcf8:	f043 0308 	orr.w	r3, r3, #8
1a00bcfc:	b29a      	uxth	r2, r3
1a00bcfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00bd00:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
1a00bd02:	4b37      	ldr	r3, [pc, #220]	; (1a00bde0 <dmp_read_fifo+0x2e0>)
1a00bd04:	895b      	ldrh	r3, [r3, #10]
1a00bd06:	f403 73c0 	and.w	r3, r3, #384	; 0x180
1a00bd0a:	2b00      	cmp	r3, #0
1a00bd0c:	d051      	beq.n	1a00bdb2 <dmp_read_fifo+0x2b2>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
1a00bd0e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
1a00bd12:	f107 0248 	add.w	r2, r7, #72	; 0x48
1a00bd16:	4413      	add	r3, r2
1a00bd18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
1a00bd1c:	021b      	lsls	r3, r3, #8
1a00bd1e:	b29a      	uxth	r2, r3
1a00bd20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
1a00bd24:	3301      	adds	r3, #1
1a00bd26:	f107 0148 	add.w	r1, r7, #72	; 0x48
1a00bd2a:	440b      	add	r3, r1
1a00bd2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
1a00bd30:	b29b      	uxth	r3, r3
1a00bd32:	4313      	orrs	r3, r2
1a00bd34:	b29a      	uxth	r2, r3
1a00bd36:	68fb      	ldr	r3, [r7, #12]
1a00bd38:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
1a00bd3a:	68fb      	ldr	r3, [r7, #12]
1a00bd3c:	3302      	adds	r3, #2
1a00bd3e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
1a00bd42:	3202      	adds	r2, #2
1a00bd44:	f107 0148 	add.w	r1, r7, #72	; 0x48
1a00bd48:	440a      	add	r2, r1
1a00bd4a:	f812 2c28 	ldrb.w	r2, [r2, #-40]
1a00bd4e:	0212      	lsls	r2, r2, #8
1a00bd50:	b291      	uxth	r1, r2
1a00bd52:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
1a00bd56:	3203      	adds	r2, #3
1a00bd58:	f107 0048 	add.w	r0, r7, #72	; 0x48
1a00bd5c:	4402      	add	r2, r0
1a00bd5e:	f812 2c28 	ldrb.w	r2, [r2, #-40]
1a00bd62:	b292      	uxth	r2, r2
1a00bd64:	430a      	orrs	r2, r1
1a00bd66:	b292      	uxth	r2, r2
1a00bd68:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
1a00bd6a:	68fb      	ldr	r3, [r7, #12]
1a00bd6c:	3304      	adds	r3, #4
1a00bd6e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
1a00bd72:	3204      	adds	r2, #4
1a00bd74:	f107 0148 	add.w	r1, r7, #72	; 0x48
1a00bd78:	440a      	add	r2, r1
1a00bd7a:	f812 2c28 	ldrb.w	r2, [r2, #-40]
1a00bd7e:	0212      	lsls	r2, r2, #8
1a00bd80:	b291      	uxth	r1, r2
1a00bd82:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
1a00bd86:	3205      	adds	r2, #5
1a00bd88:	f107 0048 	add.w	r0, r7, #72	; 0x48
1a00bd8c:	4402      	add	r2, r0
1a00bd8e:	f812 2c28 	ldrb.w	r2, [r2, #-40]
1a00bd92:	b292      	uxth	r2, r2
1a00bd94:	430a      	orrs	r2, r1
1a00bd96:	b292      	uxth	r2, r2
1a00bd98:	801a      	strh	r2, [r3, #0]
        ii += 6;
1a00bd9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
1a00bd9e:	3306      	adds	r3, #6
1a00bda0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
1a00bda4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00bda6:	881b      	ldrh	r3, [r3, #0]
1a00bda8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1a00bdac:	b29a      	uxth	r2, r3
1a00bdae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00bdb0:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1a00bdb2:	4b0b      	ldr	r3, [pc, #44]	; (1a00bde0 <dmp_read_fifo+0x2e0>)
1a00bdb4:	895b      	ldrh	r3, [r3, #10]
1a00bdb6:	f003 0303 	and.w	r3, r3, #3
1a00bdba:	2b00      	cmp	r3, #0
1a00bdbc:	d007      	beq.n	1a00bdce <dmp_read_fifo+0x2ce>
        decode_gesture(fifo_data + ii);
1a00bdbe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
1a00bdc2:	f107 0220 	add.w	r2, r7, #32
1a00bdc6:	4413      	add	r3, r2
1a00bdc8:	4618      	mov	r0, r3
1a00bdca:	f7ff fe55 	bl	1a00ba78 <decode_gesture>

    get_ms(timestamp);
1a00bdce:	6838      	ldr	r0, [r7, #0]
1a00bdd0:	f7fa fcd4 	bl	1a00677c <getTimerMs>
    return 0;
1a00bdd4:	2300      	movs	r3, #0
}
1a00bdd6:	4618      	mov	r0, r3
1a00bdd8:	3748      	adds	r7, #72	; 0x48
1a00bdda:	46bd      	mov	sp, r7
1a00bddc:	bd80      	pop	{r7, pc}
1a00bdde:	bf00      	nop
1a00bde0:	10086bcc 	.word	0x10086bcc

1a00bde4 <inv_start_in_use_auto_calibration>:
1a00bde4:	4802      	ldr	r0, [pc, #8]	; (1a00bdf0 <inv_start_in_use_auto_calibration+0xc>)
1a00bde6:	f240 3152 	movw	r1, #850	; 0x352
1a00bdea:	2201      	movs	r2, #1
1a00bdec:	f7fb bbb0 	b.w	1a007550 <inv_register_data_cb>
1a00bdf0:	1a00c249 	.word	0x1a00c249

1a00bdf4 <set_sample_rate>:
1a00bdf4:	b538      	push	{r3, r4, r5, lr}
1a00bdf6:	4605      	mov	r5, r0
1a00bdf8:	f008 fa4e 	bl	1a014298 <__aeabi_i2f>
1a00bdfc:	490c      	ldr	r1, [pc, #48]	; (1a00be30 <set_sample_rate+0x3c>)
1a00bdfe:	4c0d      	ldr	r4, [pc, #52]	; (1a00be34 <set_sample_rate+0x40>)
1a00be00:	f008 fa9e 	bl	1a014340 <__aeabi_fmul>
1a00be04:	490c      	ldr	r1, [pc, #48]	; (1a00be38 <set_sample_rate+0x44>)
1a00be06:	f008 fb4f 	bl	1a0144a8 <__aeabi_fdiv>
1a00be0a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
1a00be0e:	f008 fa97 	bl	1a014340 <__aeabi_fmul>
1a00be12:	f007 fe21 	bl	1a013a58 <__aeabi_f2d>
1a00be16:	f009 fa17 	bl	1a015248 <cos>
1a00be1a:	2200      	movs	r2, #0
1a00be1c:	4b07      	ldr	r3, [pc, #28]	; (1a00be3c <set_sample_rate+0x48>)
1a00be1e:	f007 fe6f 	bl	1a013b00 <__aeabi_dmul>
1a00be22:	f008 f907 	bl	1a014034 <__aeabi_d2iz>
1a00be26:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
1a00be2a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
1a00be2e:	bd38      	pop	{r3, r4, r5, pc}
1a00be30:	40278d36 	.word	0x40278d36
1a00be34:	10086be0 	.word	0x10086be0
1a00be38:	49742400 	.word	0x49742400
1a00be3c:	41d00000 	.word	0x41d00000

1a00be40 <inv_combine_data_calculate_bias.part.1>:
1a00be40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00be42:	4c2b      	ldr	r4, [pc, #172]	; (1a00bef0 <inv_combine_data_calculate_bias.part.1+0xb0>)
1a00be44:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a00be48:	4613      	mov	r3, r2
1a00be4a:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
1a00be4e:	f504 75d4 	add.w	r5, r4, #424	; 0x1a8
1a00be52:	4607      	mov	r7, r0
1a00be54:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
1a00be58:	f000 ff4e 	bl	1a00ccf8 <inv_combine_compass_data>
1a00be5c:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
1a00be60:	4629      	mov	r1, r5
1a00be62:	f104 0250 	add.w	r2, r4, #80	; 0x50
1a00be66:	f001 f977 	bl	1a00d158 <inv_compute_bias>
1a00be6a:	4606      	mov	r6, r0
1a00be6c:	b908      	cbnz	r0, 1a00be72 <inv_combine_data_calculate_bias.part.1+0x32>
1a00be6e:	4630      	mov	r0, r6
1a00be70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00be72:	6863      	ldr	r3, [r4, #4]
1a00be74:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
1a00be78:	3301      	adds	r3, #1
1a00be7a:	6063      	str	r3, [r4, #4]
1a00be7c:	f008 f8da 	bl	1a014034 <__aeabi_d2iz>
1a00be80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
1a00be82:	f7fb ffd7 	bl	1a007e34 <inv_q30_mult>
1a00be86:	f008 fa07 	bl	1a014298 <__aeabi_i2f>
1a00be8a:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a00be8e:	f008 fa57 	bl	1a014340 <__aeabi_fmul>
1a00be92:	f007 fde1 	bl	1a013a58 <__aeabi_f2d>
1a00be96:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
1a00be9a:	e9d5 0100 	ldrd	r0, r1, [r5]
1a00be9e:	f008 f8c9 	bl	1a014034 <__aeabi_d2iz>
1a00bea2:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
1a00bea6:	65a0      	str	r0, [r4, #88]	; 0x58
1a00bea8:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00beac:	f008 f8c2 	bl	1a014034 <__aeabi_d2iz>
1a00beb0:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
1a00beb4:	65e0      	str	r0, [r4, #92]	; 0x5c
1a00beb6:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00beba:	f008 f8bb 	bl	1a014034 <__aeabi_d2iz>
1a00bebe:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
1a00bec2:	6620      	str	r0, [r4, #96]	; 0x60
1a00bec4:	a308      	add	r3, pc, #32	; (adr r3, 1a00bee8 <inv_combine_data_calculate_bias.part.1+0xa8>)
1a00bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00beca:	e9d1 0100 	ldrd	r0, r1, [r1]
1a00bece:	f008 f8a7 	bl	1a014020 <__aeabi_dcmpgt>
1a00bed2:	2800      	cmp	r0, #0
1a00bed4:	d0cb      	beq.n	1a00be6e <inv_combine_data_calculate_bias.part.1+0x2e>
1a00bed6:	4a07      	ldr	r2, [pc, #28]	; (1a00bef4 <inv_combine_data_calculate_bias.part.1+0xb4>)
1a00bed8:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
1a00bedc:	4601      	mov	r1, r0
1a00bede:	4613      	mov	r3, r2
1a00bee0:	f000 ff0a 	bl	1a00ccf8 <inv_combine_compass_data>
1a00bee4:	4630      	mov	r0, r6
1a00bee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00bee8:	00000000 	.word	0x00000000
1a00beec:	40a77000 	.word	0x40a77000
1a00bef0:	10086be0 	.word	0x10086be0
1a00bef4:	3ecccccd 	.word	0x3ecccccd

1a00bef8 <inv_get_current_calibrated_accel>:
1a00bef8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00befa:	4b0f      	ldr	r3, [pc, #60]	; (1a00bf38 <inv_get_current_calibrated_accel+0x40>)
1a00befc:	f9b0 e04a 	ldrsh.w	lr, [r0, #74]	; 0x4a
1a00bf00:	f9b0 704c 	ldrsh.w	r7, [r0, #76]	; 0x4c
1a00bf04:	f9b0 c048 	ldrsh.w	ip, [r0, #72]	; 0x48
1a00bf08:	6e5e      	ldr	r6, [r3, #100]	; 0x64
1a00bf0a:	6e9d      	ldr	r5, [r3, #104]	; 0x68
1a00bf0c:	6edc      	ldr	r4, [r3, #108]	; 0x6c
1a00bf0e:	4602      	mov	r2, r0
1a00bf10:	b085      	sub	sp, #20
1a00bf12:	460b      	mov	r3, r1
1a00bf14:	ebc6 460c 	rsb	r6, r6, ip, lsl #16
1a00bf18:	ebc5 450e 	rsb	r5, r5, lr, lsl #16
1a00bf1c:	ebc4 4407 	rsb	r4, r4, r7, lsl #16
1a00bf20:	6e91      	ldr	r1, [r2, #104]	; 0x68
1a00bf22:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
1a00bf26:	9601      	str	r6, [sp, #4]
1a00bf28:	aa01      	add	r2, sp, #4
1a00bf2a:	9502      	str	r5, [sp, #8]
1a00bf2c:	9403      	str	r4, [sp, #12]
1a00bf2e:	f7fc fd27 	bl	1a008980 <inv_convert_to_body_with_scale>
1a00bf32:	b005      	add	sp, #20
1a00bf34:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00bf36:	bf00      	nop
1a00bf38:	10086be0 	.word	0x10086be0

1a00bf3c <inv_sort_order_4_T>:
1a00bf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00bf3e:	6906      	ldr	r6, [r0, #16]
1a00bf40:	68c5      	ldr	r5, [r0, #12]
1a00bf42:	4604      	mov	r4, r0
1a00bf44:	4631      	mov	r1, r6
1a00bf46:	4628      	mov	r0, r5
1a00bf48:	f008 fbb6 	bl	1a0146b8 <__aeabi_fcmpgt>
1a00bf4c:	b190      	cbz	r0, 1a00bf74 <inv_sort_order_4_T+0x38>
1a00bf4e:	6967      	ldr	r7, [r4, #20]
1a00bf50:	4628      	mov	r0, r5
1a00bf52:	4639      	mov	r1, r7
1a00bf54:	f008 fbb0 	bl	1a0146b8 <__aeabi_fcmpgt>
1a00bf58:	b160      	cbz	r0, 1a00bf74 <inv_sort_order_4_T+0x38>
1a00bf5a:	2300      	movs	r3, #0
1a00bf5c:	6423      	str	r3, [r4, #64]	; 0x40
1a00bf5e:	4630      	mov	r0, r6
1a00bf60:	4639      	mov	r1, r7
1a00bf62:	f008 fb9f 	bl	1a0146a4 <__aeabi_fcmpge>
1a00bf66:	2800      	cmp	r0, #0
1a00bf68:	d02b      	beq.n	1a00bfc2 <inv_sort_order_4_T+0x86>
1a00bf6a:	2301      	movs	r3, #1
1a00bf6c:	6463      	str	r3, [r4, #68]	; 0x44
1a00bf6e:	2302      	movs	r3, #2
1a00bf70:	64a3      	str	r3, [r4, #72]	; 0x48
1a00bf72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00bf74:	4628      	mov	r0, r5
1a00bf76:	4631      	mov	r1, r6
1a00bf78:	f008 fb80 	bl	1a01467c <__aeabi_fcmplt>
1a00bf7c:	b188      	cbz	r0, 1a00bfa2 <inv_sort_order_4_T+0x66>
1a00bf7e:	6967      	ldr	r7, [r4, #20]
1a00bf80:	4630      	mov	r0, r6
1a00bf82:	4639      	mov	r1, r7
1a00bf84:	f008 fb98 	bl	1a0146b8 <__aeabi_fcmpgt>
1a00bf88:	b158      	cbz	r0, 1a00bfa2 <inv_sort_order_4_T+0x66>
1a00bf8a:	2301      	movs	r3, #1
1a00bf8c:	6423      	str	r3, [r4, #64]	; 0x40
1a00bf8e:	4628      	mov	r0, r5
1a00bf90:	4639      	mov	r1, r7
1a00bf92:	f008 fb87 	bl	1a0146a4 <__aeabi_fcmpge>
1a00bf96:	b1c8      	cbz	r0, 1a00bfcc <inv_sort_order_4_T+0x90>
1a00bf98:	2300      	movs	r3, #0
1a00bf9a:	6463      	str	r3, [r4, #68]	; 0x44
1a00bf9c:	2302      	movs	r3, #2
1a00bf9e:	64a3      	str	r3, [r4, #72]	; 0x48
1a00bfa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00bfa2:	2302      	movs	r3, #2
1a00bfa4:	6423      	str	r3, [r4, #64]	; 0x40
1a00bfa6:	4628      	mov	r0, r5
1a00bfa8:	4631      	mov	r1, r6
1a00bfaa:	f008 fb7b 	bl	1a0146a4 <__aeabi_fcmpge>
1a00bfae:	b918      	cbnz	r0, 1a00bfb8 <inv_sort_order_4_T+0x7c>
1a00bfb0:	2301      	movs	r3, #1
1a00bfb2:	6463      	str	r3, [r4, #68]	; 0x44
1a00bfb4:	64a0      	str	r0, [r4, #72]	; 0x48
1a00bfb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00bfb8:	2300      	movs	r3, #0
1a00bfba:	6463      	str	r3, [r4, #68]	; 0x44
1a00bfbc:	2301      	movs	r3, #1
1a00bfbe:	64a3      	str	r3, [r4, #72]	; 0x48
1a00bfc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00bfc2:	2302      	movs	r3, #2
1a00bfc4:	6463      	str	r3, [r4, #68]	; 0x44
1a00bfc6:	2301      	movs	r3, #1
1a00bfc8:	64a3      	str	r3, [r4, #72]	; 0x48
1a00bfca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00bfcc:	2302      	movs	r3, #2
1a00bfce:	6463      	str	r3, [r4, #68]	; 0x44
1a00bfd0:	64a0      	str	r0, [r4, #72]	; 0x48
1a00bfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a00bfd4 <inv_init_check_sample_balance_parameter>:
1a00bfd4:	2300      	movs	r3, #0
1a00bfd6:	2114      	movs	r1, #20
1a00bfd8:	2200      	movs	r2, #0
1a00bfda:	6581      	str	r1, [r0, #88]	; 0x58
1a00bfdc:	6003      	str	r3, [r0, #0]
1a00bfde:	210a      	movs	r1, #10
1a00bfe0:	6243      	str	r3, [r0, #36]	; 0x24
1a00bfe2:	6043      	str	r3, [r0, #4]
1a00bfe4:	6283      	str	r3, [r0, #40]	; 0x28
1a00bfe6:	6083      	str	r3, [r0, #8]
1a00bfe8:	62c3      	str	r3, [r0, #44]	; 0x2c
1a00bfea:	2301      	movs	r3, #1
1a00bfec:	6601      	str	r1, [r0, #96]	; 0x60
1a00bfee:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
1a00bff2:	64c2      	str	r2, [r0, #76]	; 0x4c
1a00bff4:	6743      	str	r3, [r0, #116]	; 0x74
1a00bff6:	6782      	str	r2, [r0, #120]	; 0x78
1a00bff8:	6542      	str	r2, [r0, #84]	; 0x54
1a00bffa:	4770      	bx	lr

1a00bffc <inv_add_accel_block_data>:
1a00bffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00c000:	b087      	sub	sp, #28
1a00c002:	4669      	mov	r1, sp
1a00c004:	f7ff ff78 	bl	1a00bef8 <inv_get_current_calibrated_accel>
1a00c008:	2600      	movs	r6, #0
1a00c00a:	2400      	movs	r4, #0
1a00c00c:	2500      	movs	r5, #0
1a00c00e:	af03      	add	r7, sp, #12
1a00c010:	f85d 0006 	ldr.w	r0, [sp, r6]
1a00c014:	f008 f940 	bl	1a014298 <__aeabi_i2f>
1a00c018:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a00c01c:	f008 f990 	bl	1a014340 <__aeabi_fmul>
1a00c020:	4601      	mov	r1, r0
1a00c022:	51b8      	str	r0, [r7, r6]
1a00c024:	f008 f98c 	bl	1a014340 <__aeabi_fmul>
1a00c028:	f007 fd16 	bl	1a013a58 <__aeabi_f2d>
1a00c02c:	4602      	mov	r2, r0
1a00c02e:	460b      	mov	r3, r1
1a00c030:	4620      	mov	r0, r4
1a00c032:	4629      	mov	r1, r5
1a00c034:	f007 fbb2 	bl	1a01379c <__adddf3>
1a00c038:	3604      	adds	r6, #4
1a00c03a:	2e0c      	cmp	r6, #12
1a00c03c:	4604      	mov	r4, r0
1a00c03e:	460d      	mov	r5, r1
1a00c040:	d1e6      	bne.n	1a00c010 <inv_add_accel_block_data+0x14>
1a00c042:	f009 fb9b 	bl	1a01577c <sqrt>
1a00c046:	4f13      	ldr	r7, [pc, #76]	; (1a00c094 <inv_add_accel_block_data+0x98>)
1a00c048:	4604      	mov	r4, r0
1a00c04a:	460d      	mov	r5, r1
1a00c04c:	ae02      	add	r6, sp, #8
1a00c04e:	f10d 0914 	add.w	r9, sp, #20
1a00c052:	f856 0f04 	ldr.w	r0, [r6, #4]!
1a00c056:	f8d7 8000 	ldr.w	r8, [r7]
1a00c05a:	f007 fcfd 	bl	1a013a58 <__aeabi_f2d>
1a00c05e:	4622      	mov	r2, r4
1a00c060:	462b      	mov	r3, r5
1a00c062:	f007 fe77 	bl	1a013d54 <__aeabi_ddiv>
1a00c066:	f008 f80d 	bl	1a014084 <__aeabi_d2f>
1a00c06a:	4601      	mov	r1, r0
1a00c06c:	4640      	mov	r0, r8
1a00c06e:	f008 f85f 	bl	1a014130 <__addsf3>
1a00c072:	454e      	cmp	r6, r9
1a00c074:	f847 0b04 	str.w	r0, [r7], #4
1a00c078:	d1eb      	bne.n	1a00c052 <inv_add_accel_block_data+0x56>
1a00c07a:	4b07      	ldr	r3, [pc, #28]	; (1a00c098 <inv_add_accel_block_data+0x9c>)
1a00c07c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
1a00c080:	3201      	adds	r2, #1
1a00c082:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
1a00c086:	2201      	movs	r2, #1
1a00c088:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
1a00c08c:	b007      	add	sp, #28
1a00c08e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00c092:	bf00      	nop
1a00c094:	10087010 	.word	0x10087010
1a00c098:	10086be0 	.word	0x10086be0
1a00c09c:	ffffffff 	.word	0xffffffff

1a00c0a0 <inv_check_sample_balance>:
1a00c0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00c0a4:	4605      	mov	r5, r0
1a00c0a6:	b083      	sub	sp, #12
1a00c0a8:	6d00      	ldr	r0, [r0, #80]	; 0x50
1a00c0aa:	f008 f8f5 	bl	1a014298 <__aeabi_i2f>
1a00c0ae:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
1a00c0b2:	4683      	mov	fp, r0
1a00c0b4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
1a00c0b8:	4648      	mov	r0, r9
1a00c0ba:	f008 f837 	bl	1a01412c <__aeabi_fsub>
1a00c0be:	462c      	mov	r4, r5
1a00c0c0:	9001      	str	r0, [sp, #4]
1a00c0c2:	2600      	movs	r6, #0
1a00c0c4:	4659      	mov	r1, fp
1a00c0c6:	59a8      	ldr	r0, [r5, r6]
1a00c0c8:	f008 f9ee 	bl	1a0144a8 <__aeabi_fdiv>
1a00c0cc:	2100      	movs	r1, #0
1a00c0ce:	4607      	mov	r7, r0
1a00c0d0:	f008 fae8 	bl	1a0146a4 <__aeabi_fcmpge>
1a00c0d4:	2800      	cmp	r0, #0
1a00c0d6:	d053      	beq.n	1a00c180 <inv_check_sample_balance+0xe0>
1a00c0d8:	46b8      	mov	r8, r7
1a00c0da:	f8d4 a018 	ldr.w	sl, [r4, #24]
1a00c0de:	2100      	movs	r1, #0
1a00c0e0:	4650      	mov	r0, sl
1a00c0e2:	f008 fadf 	bl	1a0146a4 <__aeabi_fcmpge>
1a00c0e6:	2800      	cmp	r0, #0
1a00c0e8:	d046      	beq.n	1a00c178 <inv_check_sample_balance+0xd8>
1a00c0ea:	4651      	mov	r1, sl
1a00c0ec:	4640      	mov	r0, r8
1a00c0ee:	f008 f81d 	bl	1a01412c <__aeabi_fsub>
1a00c0f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
1a00c0f4:	6320      	str	r0, [r4, #48]	; 0x30
1a00c0f6:	61a7      	str	r7, [r4, #24]
1a00c0f8:	9801      	ldr	r0, [sp, #4]
1a00c0fa:	f008 f921 	bl	1a014340 <__aeabi_fmul>
1a00c0fe:	4601      	mov	r1, r0
1a00c100:	4638      	mov	r0, r7
1a00c102:	f008 f815 	bl	1a014130 <__addsf3>
1a00c106:	4649      	mov	r1, r9
1a00c108:	f008 f9ce 	bl	1a0144a8 <__aeabi_fdiv>
1a00c10c:	2100      	movs	r1, #0
1a00c10e:	6260      	str	r0, [r4, #36]	; 0x24
1a00c110:	4607      	mov	r7, r0
1a00c112:	f008 fac7 	bl	1a0146a4 <__aeabi_fcmpge>
1a00c116:	2800      	cmp	r0, #0
1a00c118:	d02b      	beq.n	1a00c172 <inv_check_sample_balance+0xd2>
1a00c11a:	2200      	movs	r2, #0
1a00c11c:	60e7      	str	r7, [r4, #12]
1a00c11e:	51aa      	str	r2, [r5, r6]
1a00c120:	3604      	adds	r6, #4
1a00c122:	3404      	adds	r4, #4
1a00c124:	2e0c      	cmp	r6, #12
1a00c126:	d1cd      	bne.n	1a00c0c4 <inv_check_sample_balance+0x24>
1a00c128:	4628      	mov	r0, r5
1a00c12a:	f7ff ff07 	bl	1a00bf3c <inv_sort_order_4_T>
1a00c12e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
1a00c130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1a00c134:	da01      	bge.n	1a00c13a <inv_check_sample_balance+0x9a>
1a00c136:	3301      	adds	r3, #1
1a00c138:	64eb      	str	r3, [r5, #76]	; 0x4c
1a00c13a:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
1a00c13e:	6c2c      	ldr	r4, [r5, #64]	; 0x40
1a00c140:	2b05      	cmp	r3, #5
1a00c142:	d813      	bhi.n	1a00c16c <inv_check_sample_balance+0xcc>
1a00c144:	e8df f003 	tbb	[pc, r3]
1a00c148:	644e453d 	.word	0x644e453d
1a00c14c:	1f03      	.short	0x1f03
1a00c14e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
1a00c152:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
1a00c154:	68e0      	ldr	r0, [r4, #12]
1a00c156:	f008 fa9b 	bl	1a014690 <__aeabi_fcmple>
1a00c15a:	b138      	cbz	r0, 1a00c16c <inv_check_sample_balance+0xcc>
1a00c15c:	2205      	movs	r2, #5
1a00c15e:	2301      	movs	r3, #1
1a00c160:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
1a00c164:	2200      	movs	r2, #0
1a00c166:	64ea      	str	r2, [r5, #76]	; 0x4c
1a00c168:	676b      	str	r3, [r5, #116]	; 0x74
1a00c16a:	67ab      	str	r3, [r5, #120]	; 0x78
1a00c16c:	b003      	add	sp, #12
1a00c16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00c172:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
1a00c176:	e7d0      	b.n	1a00c11a <inv_check_sample_balance+0x7a>
1a00c178:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
1a00c17c:	469a      	mov	sl, r3
1a00c17e:	e7b4      	b.n	1a00c0ea <inv_check_sample_balance+0x4a>
1a00c180:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
1a00c184:	e7a9      	b.n	1a00c0da <inv_check_sample_balance+0x3a>
1a00c186:	eb05 0384 	add.w	r3, r5, r4, lsl #2
1a00c18a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
1a00c18c:	68d8      	ldr	r0, [r3, #12]
1a00c18e:	f008 fa7f 	bl	1a014690 <__aeabi_fcmple>
1a00c192:	b978      	cbnz	r0, 1a00c1b4 <inv_check_sample_balance+0x114>
1a00c194:	340c      	adds	r4, #12
1a00c196:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
1a00c19a:	f007 fc5d 	bl	1a013a58 <__aeabi_f2d>
1a00c19e:	a328      	add	r3, pc, #160	; (adr r3, 1a00c240 <inv_check_sample_balance+0x1a0>)
1a00c1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00c1a4:	f007 ff28 	bl	1a013ff8 <__aeabi_dcmple>
1a00c1a8:	2800      	cmp	r0, #0
1a00c1aa:	d040      	beq.n	1a00c22e <inv_check_sample_balance+0x18e>
1a00c1ac:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1a00c1ae:	6e2b      	ldr	r3, [r5, #96]	; 0x60
1a00c1b0:	429a      	cmp	r2, r3
1a00c1b2:	dbdb      	blt.n	1a00c16c <inv_check_sample_balance+0xcc>
1a00c1b4:	2301      	movs	r3, #1
1a00c1b6:	2203      	movs	r2, #3
1a00c1b8:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
1a00c1bc:	676b      	str	r3, [r5, #116]	; 0x74
1a00c1be:	67ab      	str	r3, [r5, #120]	; 0x78
1a00c1c0:	e7d4      	b.n	1a00c16c <inv_check_sample_balance+0xcc>
1a00c1c2:	2301      	movs	r3, #1
1a00c1c4:	2200      	movs	r2, #0
1a00c1c6:	676b      	str	r3, [r5, #116]	; 0x74
1a00c1c8:	67ab      	str	r3, [r5, #120]	; 0x78
1a00c1ca:	64ea      	str	r2, [r5, #76]	; 0x4c
1a00c1cc:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
1a00c1d0:	e7cc      	b.n	1a00c16c <inv_check_sample_balance+0xcc>
1a00c1d2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
1a00c1d4:	2b01      	cmp	r3, #1
1a00c1d6:	d1c9      	bne.n	1a00c16c <inv_check_sample_balance+0xcc>
1a00c1d8:	2302      	movs	r3, #2
1a00c1da:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
1a00c1de:	2300      	movs	r3, #0
1a00c1e0:	67ab      	str	r3, [r5, #120]	; 0x78
1a00c1e2:	e7c3      	b.n	1a00c16c <inv_check_sample_balance+0xcc>
1a00c1e4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
1a00c1e8:	6e69      	ldr	r1, [r5, #100]	; 0x64
1a00c1ea:	68e4      	ldr	r4, [r4, #12]
1a00c1ec:	4620      	mov	r0, r4
1a00c1ee:	f008 fa59 	bl	1a0146a4 <__aeabi_fcmpge>
1a00c1f2:	b9a8      	cbnz	r0, 1a00c220 <inv_check_sample_balance+0x180>
1a00c1f4:	4620      	mov	r0, r4
1a00c1f6:	6ea9      	ldr	r1, [r5, #104]	; 0x68
1a00c1f8:	f008 fa4a 	bl	1a014690 <__aeabi_fcmple>
1a00c1fc:	2301      	movs	r3, #1
1a00c1fe:	2800      	cmp	r0, #0
1a00c200:	d1d9      	bne.n	1a00c1b6 <inv_check_sample_balance+0x116>
1a00c202:	2205      	movs	r2, #5
1a00c204:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
1a00c208:	64e8      	str	r0, [r5, #76]	; 0x4c
1a00c20a:	676b      	str	r3, [r5, #116]	; 0x74
1a00c20c:	67ab      	str	r3, [r5, #120]	; 0x78
1a00c20e:	e7ad      	b.n	1a00c16c <inv_check_sample_balance+0xcc>
1a00c210:	eb05 0484 	add.w	r4, r5, r4, lsl #2
1a00c214:	6e69      	ldr	r1, [r5, #100]	; 0x64
1a00c216:	68e0      	ldr	r0, [r4, #12]
1a00c218:	f008 fa44 	bl	1a0146a4 <__aeabi_fcmpge>
1a00c21c:	2800      	cmp	r0, #0
1a00c21e:	d0a5      	beq.n	1a00c16c <inv_check_sample_balance+0xcc>
1a00c220:	2300      	movs	r3, #0
1a00c222:	2204      	movs	r2, #4
1a00c224:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
1a00c228:	676b      	str	r3, [r5, #116]	; 0x74
1a00c22a:	67ab      	str	r3, [r5, #120]	; 0x78
1a00c22c:	e79e      	b.n	1a00c16c <inv_check_sample_balance+0xcc>
1a00c22e:	2304      	movs	r3, #4
1a00c230:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
1a00c234:	64e8      	str	r0, [r5, #76]	; 0x4c
1a00c236:	6768      	str	r0, [r5, #116]	; 0x74
1a00c238:	67a8      	str	r0, [r5, #120]	; 0x78
1a00c23a:	e797      	b.n	1a00c16c <inv_check_sample_balance+0xcc>
1a00c23c:	f3af 8000 	nop.w
1a00c240:	9999999a 	.word	0x9999999a
1a00c244:	bfa99999 	.word	0xbfa99999

1a00c248 <inv_auto_calibrate>:
1a00c248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00c24c:	4606      	mov	r6, r0
1a00c24e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
1a00c250:	f8df 9248 	ldr.w	r9, [pc, #584]	; 1a00c49c <inv_auto_calibrate+0x254>
1a00c254:	b09f      	sub	sp, #124	; 0x7c
1a00c256:	f644 631f 	movw	r3, #19999	; 0x4e1f
1a00c25a:	2400      	movs	r4, #0
1a00c25c:	4298      	cmp	r0, r3
1a00c25e:	9411      	str	r4, [sp, #68]	; 0x44
1a00c260:	9412      	str	r4, [sp, #72]	; 0x48
1a00c262:	9413      	str	r4, [sp, #76]	; 0x4c
1a00c264:	dd21      	ble.n	1a00c2aa <inv_auto_calibrate+0x62>
1a00c266:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
1a00c26a:	4298      	cmp	r0, r3
1a00c26c:	d001      	beq.n	1a00c272 <inv_auto_calibrate+0x2a>
1a00c26e:	f7ff fdc1 	bl	1a00bdf4 <set_sample_rate>
1a00c272:	6b33      	ldr	r3, [r6, #48]	; 0x30
1a00c274:	4c89      	ldr	r4, [pc, #548]	; (1a00c49c <inv_auto_calibrate+0x254>)
1a00c276:	f8c9 34b0 	str.w	r3, [r9, #1200]	; 0x4b0
1a00c27a:	4630      	mov	r0, r6
1a00c27c:	f7ff febe 	bl	1a00bffc <inv_add_accel_block_data>
1a00c280:	f8d9 2484 	ldr.w	r2, [r9, #1156]	; 0x484
1a00c284:	f8d9 3480 	ldr.w	r3, [r9, #1152]	; 0x480
1a00c288:	429a      	cmp	r2, r3
1a00c28a:	da1a      	bge.n	1a00c2c2 <inv_auto_calibrate+0x7a>
1a00c28c:	f8d9 34a8 	ldr.w	r3, [r9, #1192]	; 0x4a8
1a00c290:	4a82      	ldr	r2, [pc, #520]	; (1a00c49c <inv_auto_calibrate+0x254>)
1a00c292:	2b01      	cmp	r3, #1
1a00c294:	d021      	beq.n	1a00c2da <inv_auto_calibrate+0x92>
1a00c296:	f8d9 34a4 	ldr.w	r3, [r9, #1188]	; 0x4a4
1a00c29a:	4c80      	ldr	r4, [pc, #512]	; (1a00c49c <inv_auto_calibrate+0x254>)
1a00c29c:	2b01      	cmp	r3, #1
1a00c29e:	f000 8105 	beq.w	1a00c4ac <inv_auto_calibrate+0x264>
1a00c2a2:	2000      	movs	r0, #0
1a00c2a4:	b01f      	add	sp, #124	; 0x7c
1a00c2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00c2aa:	f8d9 2348 	ldr.w	r2, [r9, #840]	; 0x348
1a00c2ae:	1880      	adds	r0, r0, r2
1a00c2b0:	4298      	cmp	r0, r3
1a00c2b2:	f8c9 0348 	str.w	r0, [r9, #840]	; 0x348
1a00c2b6:	ddf4      	ble.n	1a00c2a2 <inv_auto_calibrate+0x5a>
1a00c2b8:	f7ff fd9c 	bl	1a00bdf4 <set_sample_rate>
1a00c2bc:	f8c9 4348 	str.w	r4, [r9, #840]	; 0x348
1a00c2c0:	e7d7      	b.n	1a00c272 <inv_auto_calibrate+0x2a>
1a00c2c2:	f504 6086 	add.w	r0, r4, #1072	; 0x430
1a00c2c6:	f7ff feeb 	bl	1a00c0a0 <inv_check_sample_balance>
1a00c2ca:	2300      	movs	r3, #0
1a00c2cc:	f8c4 3484 	str.w	r3, [r4, #1156]	; 0x484
1a00c2d0:	f8d9 34a8 	ldr.w	r3, [r9, #1192]	; 0x4a8
1a00c2d4:	4a71      	ldr	r2, [pc, #452]	; (1a00c49c <inv_auto_calibrate+0x254>)
1a00c2d6:	2b01      	cmp	r3, #1
1a00c2d8:	d1dd      	bne.n	1a00c296 <inv_auto_calibrate+0x4e>
1a00c2da:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
1a00c2de:	2b01      	cmp	r3, #1
1a00c2e0:	f000 823e 	beq.w	1a00c760 <inv_auto_calibrate+0x518>
1a00c2e4:	ad14      	add	r5, sp, #80	; 0x50
1a00c2e6:	4629      	mov	r1, r5
1a00c2e8:	4630      	mov	r0, r6
1a00c2ea:	f7ff fe05 	bl	1a00bef8 <inv_get_current_calibrated_accel>
1a00c2ee:	a817      	add	r0, sp, #92	; 0x5c
1a00c2f0:	f7fc fd0a 	bl	1a008d08 <inv_get_gravity>
1a00c2f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
1a00c2f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a00c2f8:	4869      	ldr	r0, [pc, #420]	; (1a00c4a0 <inv_auto_calibrate+0x258>)
1a00c2fa:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 1a00c4a8 <inv_auto_calibrate+0x260>
1a00c2fe:	eba2 3ea3 	sub.w	lr, r2, r3, asr #14
1a00c302:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a00c304:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a00c306:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
1a00c30a:	eba2 37a3 	sub.w	r7, r2, r3, asr #14
1a00c30e:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a00c310:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a00c312:	9715      	str	r7, [sp, #84]	; 0x54
1a00c314:	eba2 33a3 	sub.w	r3, r2, r3, asr #14
1a00c318:	1d01      	adds	r1, r0, #4
1a00c31a:	2260      	movs	r2, #96	; 0x60
1a00c31c:	f100 0418 	add.w	r4, r0, #24
1a00c320:	9316      	str	r3, [sp, #88]	; 0x58
1a00c322:	f008 fcf9 	bl	1a014d18 <memmove>
1a00c326:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
1a00c32a:	ad1a      	add	r5, sp, #104	; 0x68
1a00c32c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
1a00c330:	4628      	mov	r0, r5
1a00c332:	f7fc fe6d 	bl	1a009010 <inv_get_linear_accel>
1a00c336:	f104 0158 	add.w	r1, r4, #88	; 0x58
1a00c33a:	2260      	movs	r2, #96	; 0x60
1a00c33c:	f104 0054 	add.w	r0, r4, #84	; 0x54
1a00c340:	f008 fcea 	bl	1a014d18 <memmove>
1a00c344:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
1a00c348:	f104 036c 	add.w	r3, r4, #108	; 0x6c
1a00c34c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
1a00c350:	f8d9 142c 	ldr.w	r1, [r9, #1068]	; 0x42c
1a00c354:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a00c356:	910b      	str	r1, [sp, #44]	; 0x2c
1a00c358:	9a1a      	ldr	r2, [sp, #104]	; 0x68
1a00c35a:	991c      	ldr	r1, [sp, #112]	; 0x70
1a00c35c:	9308      	str	r3, [sp, #32]
1a00c35e:	f04f 0c00 	mov.w	ip, #0
1a00c362:	f5a4 7959 	sub.w	r9, r4, #868	; 0x364
1a00c366:	960c      	str	r6, [sp, #48]	; 0x30
1a00c368:	9207      	str	r2, [sp, #28]
1a00c36a:	9106      	str	r1, [sp, #24]
1a00c36c:	464b      	mov	r3, r9
1a00c36e:	f8cd c010 	str.w	ip, [sp, #16]
1a00c372:	f8cd c00c 	str.w	ip, [sp, #12]
1a00c376:	4666      	mov	r6, ip
1a00c378:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
1a00c37c:	f8d3 434c 	ldr.w	r4, [r3, #844]	; 0x34c
1a00c380:	f8d3 1350 	ldr.w	r1, [r3, #848]	; 0x350
1a00c384:	f8d3 53b8 	ldr.w	r5, [r3, #952]	; 0x3b8
1a00c388:	f8d3 a3c0 	ldr.w	sl, [r3, #960]	; 0x3c0
1a00c38c:	f8d3 7354 	ldr.w	r7, [r3, #852]	; 0x354
1a00c390:	f8d3 03bc 	ldr.w	r0, [r3, #956]	; 0x3bc
1a00c394:	fb8b 8204 	smull	r8, r2, fp, r4
1a00c398:	17e4      	asrs	r4, r4, #31
1a00c39a:	fb8b c901 	smull	ip, r9, fp, r1
1a00c39e:	9209      	str	r2, [sp, #36]	; 0x24
1a00c3a0:	9402      	str	r4, [sp, #8]
1a00c3a2:	fb8b 4205 	smull	r4, r2, fp, r5
1a00c3a6:	f8cd 9004 	str.w	r9, [sp, #4]
1a00c3aa:	ea4f 78e1 	mov.w	r8, r1, asr #31
1a00c3ae:	fb8b 9400 	smull	r9, r4, fp, r0
1a00c3b2:	fb8b 1c07 	smull	r1, ip, fp, r7
1a00c3b6:	920a      	str	r2, [sp, #40]	; 0x28
1a00c3b8:	f8dd 9008 	ldr.w	r9, [sp, #8]
1a00c3bc:	fb8b 210a 	smull	r2, r1, fp, sl
1a00c3c0:	ea4f 72ea 	mov.w	r2, sl, asr #31
1a00c3c4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
1a00c3c8:	ebc9 096a 	rsb	r9, r9, sl, asr #1
1a00c3cc:	17ff      	asrs	r7, r7, #31
1a00c3ce:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a00c3d2:	ebc2 0261 	rsb	r2, r2, r1, asr #1
1a00c3d6:	ebc7 076c 	rsb	r7, r7, ip, asr #1
1a00c3da:	9909      	ldr	r1, [sp, #36]	; 0x24
1a00c3dc:	f8dd c00c 	ldr.w	ip, [sp, #12]
1a00c3e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
1a00c3e4:	f8dd 9004 	ldr.w	r9, [sp, #4]
1a00c3e8:	17ed      	asrs	r5, r5, #31
1a00c3ea:	448c      	add	ip, r1
1a00c3ec:	9907      	ldr	r1, [sp, #28]
1a00c3ee:	f8cd c00c 	str.w	ip, [sp, #12]
1a00c3f2:	17c0      	asrs	r0, r0, #31
1a00c3f4:	ebc5 056a 	rsb	r5, r5, sl, asr #1
1a00c3f8:	ebc0 0064 	rsb	r0, r0, r4, asr #1
1a00c3fc:	1949      	adds	r1, r1, r5
1a00c3fe:	9c04      	ldr	r4, [sp, #16]
1a00c400:	9107      	str	r1, [sp, #28]
1a00c402:	ebc8 0869 	rsb	r8, r8, r9, asr #1
1a00c406:	9906      	ldr	r1, [sp, #24]
1a00c408:	4444      	add	r4, r8
1a00c40a:	1889      	adds	r1, r1, r2
1a00c40c:	9404      	str	r4, [sp, #16]
1a00c40e:	4a25      	ldr	r2, [pc, #148]	; (1a00c4a4 <inv_auto_calibrate+0x25c>)
1a00c410:	9c08      	ldr	r4, [sp, #32]
1a00c412:	9106      	str	r1, [sp, #24]
1a00c414:	330c      	adds	r3, #12
1a00c416:	1824      	adds	r4, r4, r0
1a00c418:	4293      	cmp	r3, r2
1a00c41a:	443e      	add	r6, r7
1a00c41c:	9408      	str	r4, [sp, #32]
1a00c41e:	d1ad      	bne.n	1a00c37c <inv_auto_calibrate+0x134>
1a00c420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00c422:	9907      	ldr	r1, [sp, #28]
1a00c424:	9f03      	ldr	r7, [sp, #12]
1a00c426:	9d04      	ldr	r5, [sp, #16]
1a00c428:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
1a00c42c:	f103 0009 	add.w	r0, r3, #9
1a00c430:	9b06      	ldr	r3, [sp, #24]
1a00c432:	f8c9 042c 	str.w	r0, [r9, #1068]	; 0x42c
1a00c436:	2900      	cmp	r1, #0
1a00c438:	bfb8      	it	lt
1a00c43a:	4249      	neglt	r1, r1
1a00c43c:	46b4      	mov	ip, r6
1a00c43e:	4622      	mov	r2, r4
1a00c440:	2f00      	cmp	r7, #0
1a00c442:	bfb8      	it	lt
1a00c444:	427f      	neglt	r7, r7
1a00c446:	2a00      	cmp	r2, #0
1a00c448:	bfb8      	it	lt
1a00c44a:	4252      	neglt	r2, r2
1a00c44c:	2b00      	cmp	r3, #0
1a00c44e:	bfb8      	it	lt
1a00c450:	425b      	neglt	r3, r3
1a00c452:	2d00      	cmp	r5, #0
1a00c454:	bfb8      	it	lt
1a00c456:	426d      	neglt	r5, r5
1a00c458:	ea8c 74ec 	eor.w	r4, ip, ip, asr #31
1a00c45c:	eba4 74ec 	sub.w	r4, r4, ip, asr #31
1a00c460:	428f      	cmp	r7, r1
1a00c462:	911a      	str	r1, [sp, #104]	; 0x68
1a00c464:	bfac      	ite	ge
1a00c466:	2100      	movge	r1, #0
1a00c468:	2101      	movlt	r1, #1
1a00c46a:	4295      	cmp	r5, r2
1a00c46c:	bfb8      	it	lt
1a00c46e:	3101      	addlt	r1, #1
1a00c470:	429c      	cmp	r4, r3
1a00c472:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a00c474:	921b      	str	r2, [sp, #108]	; 0x6c
1a00c476:	931c      	str	r3, [sp, #112]	; 0x70
1a00c478:	f6bf af0d 	bge.w	1a00c296 <inv_auto_calibrate+0x4e>
1a00c47c:	2808      	cmp	r0, #8
1a00c47e:	f77f af0a 	ble.w	1a00c296 <inv_auto_calibrate+0x4e>
1a00c482:	2902      	cmp	r1, #2
1a00c484:	f47f af07 	bne.w	1a00c296 <inv_auto_calibrate+0x4e>
1a00c488:	f899 1424 	ldrb.w	r1, [r9, #1060]	; 0x424
1a00c48c:	4b03      	ldr	r3, [pc, #12]	; (1a00c49c <inv_auto_calibrate+0x254>)
1a00c48e:	2902      	cmp	r1, #2
1a00c490:	f200 816a 	bhi.w	1a00c768 <inv_auto_calibrate+0x520>
1a00c494:	4608      	mov	r0, r1
1a00c496:	f7fa fe3b 	bl	1a007110 <inv_set_accel_accuracy>
1a00c49a:	e6fc      	b.n	1a00c296 <inv_auto_calibrate+0x4e>
1a00c49c:	10086be0 	.word	0x10086be0
1a00c4a0:	10086f2c 	.word	0x10086f2c
1a00c4a4:	10086c4c 	.word	0x10086c4c
1a00c4a8:	38e38e39 	.word	0x38e38e39
1a00c4ac:	a811      	add	r0, sp, #68	; 0x44
1a00c4ae:	f7fc fde1 	bl	1a009074 <inv_get_linear_accel_float>
1a00c4b2:	9811      	ldr	r0, [sp, #68]	; 0x44
1a00c4b4:	9f12      	ldr	r7, [sp, #72]	; 0x48
1a00c4b6:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
1a00c4ba:	4601      	mov	r1, r0
1a00c4bc:	f007 ff40 	bl	1a014340 <__aeabi_fmul>
1a00c4c0:	4639      	mov	r1, r7
1a00c4c2:	4605      	mov	r5, r0
1a00c4c4:	4638      	mov	r0, r7
1a00c4c6:	f007 ff3b 	bl	1a014340 <__aeabi_fmul>
1a00c4ca:	4601      	mov	r1, r0
1a00c4cc:	4628      	mov	r0, r5
1a00c4ce:	f007 fe2f 	bl	1a014130 <__addsf3>
1a00c4d2:	4641      	mov	r1, r8
1a00c4d4:	4605      	mov	r5, r0
1a00c4d6:	4640      	mov	r0, r8
1a00c4d8:	f007 ff32 	bl	1a014340 <__aeabi_fmul>
1a00c4dc:	4601      	mov	r1, r0
1a00c4de:	4628      	mov	r0, r5
1a00c4e0:	f007 fe26 	bl	1a014130 <__addsf3>
1a00c4e4:	f009 f9f4 	bl	1a0158d0 <sqrtf>
1a00c4e8:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
1a00c4ec:	60e0      	str	r0, [r4, #12]
1a00c4ee:	f007 ff27 	bl	1a014340 <__aeabi_fmul>
1a00c4f2:	f008 f8eb 	bl	1a0146cc <__aeabi_f2iz>
1a00c4f6:	ad1a      	add	r5, sp, #104	; 0x68
1a00c4f8:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
1a00c4fc:	f04f 0a00 	mov.w	sl, #0
1a00c500:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
1a00c504:	a80f      	add	r0, sp, #60	; 0x3c
1a00c506:	f8ad a03e 	strh.w	sl, [sp, #62]	; 0x3e
1a00c50a:	f8ad a040 	strh.w	sl, [sp, #64]	; 0x40
1a00c50e:	f002 fe17 	bl	1a00f140 <inv_fast_nomot_store_data>
1a00c512:	4628      	mov	r0, r5
1a00c514:	f7fc fc58 	bl	1a008dc8 <inv_get_quaternion>
1a00c518:	6f21      	ldr	r1, [r4, #112]	; 0x70
1a00c51a:	981a      	ldr	r0, [sp, #104]	; 0x68
1a00c51c:	f7fb fc8a 	bl	1a007e34 <inv_q30_mult>
1a00c520:	6f61      	ldr	r1, [r4, #116]	; 0x74
1a00c522:	9003      	str	r0, [sp, #12]
1a00c524:	981b      	ldr	r0, [sp, #108]	; 0x6c
1a00c526:	f7fb fc85 	bl	1a007e34 <inv_q30_mult>
1a00c52a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
1a00c52c:	4680      	mov	r8, r0
1a00c52e:	981c      	ldr	r0, [sp, #112]	; 0x70
1a00c530:	f7fb fc80 	bl	1a007e34 <inv_q30_mult>
1a00c534:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
1a00c536:	4607      	mov	r7, r0
1a00c538:	981d      	ldr	r0, [sp, #116]	; 0x74
1a00c53a:	f7fb fc7b 	bl	1a007e34 <inv_q30_mult>
1a00c53e:	9006      	str	r0, [sp, #24]
1a00c540:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00c544:	3470      	adds	r4, #112	; 0x70
1a00c546:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00c54a:	46b3      	mov	fp, r6
1a00c54c:	ad17      	add	r5, sp, #92	; 0x5c
1a00c54e:	f9bb 0048 	ldrsh.w	r0, [fp, #72]	; 0x48
1a00c552:	6eb1      	ldr	r1, [r6, #104]	; 0x68
1a00c554:	4c8c      	ldr	r4, [pc, #560]	; (1a00c788 <inv_auto_calibrate+0x540>)
1a00c556:	0400      	lsls	r0, r0, #16
1a00c558:	f7fb fc6c 	bl	1a007e34 <inv_q30_mult>
1a00c55c:	f007 fe9c 	bl	1a014298 <__aeabi_i2f>
1a00c560:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a00c564:	f007 feec 	bl	1a014340 <__aeabi_fmul>
1a00c568:	eb09 030a 	add.w	r3, r9, sl
1a00c56c:	f10b 0b02 	add.w	fp, fp, #2
1a00c570:	6158      	str	r0, [r3, #20]
1a00c572:	f9bb 3046 	ldrsh.w	r3, [fp, #70]	; 0x46
1a00c576:	041b      	lsls	r3, r3, #16
1a00c578:	f845 300a 	str.w	r3, [r5, sl]
1a00c57c:	f10a 0a04 	add.w	sl, sl, #4
1a00c580:	f1ba 0f0c 	cmp.w	sl, #12
1a00c584:	d1e3      	bne.n	1a00c54e <inv_auto_calibrate+0x306>
1a00c586:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
1a00c58a:	4629      	mov	r1, r5
1a00c58c:	f000 fc5e 	bl	1a00ce4c <inv_set_terms>
1a00c590:	f8d4 2328 	ldr.w	r2, [r4, #808]	; 0x328
1a00c594:	6823      	ldr	r3, [r4, #0]
1a00c596:	429a      	cmp	r2, r3
1a00c598:	f6ff ae83 	blt.w	1a00c2a2 <inv_auto_calibrate+0x5a>
1a00c59c:	f8d6 00e4 	ldr.w	r0, [r6, #228]	; 0xe4
1a00c5a0:	f007 fe7a 	bl	1a014298 <__aeabi_i2f>
1a00c5a4:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a00c5a8:	f007 feca 	bl	1a014340 <__aeabi_fmul>
1a00c5ac:	f8d4 a0d8 	ldr.w	sl, [r4, #216]	; 0xd8
1a00c5b0:	4605      	mov	r5, r0
1a00c5b2:	2100      	movs	r1, #0
1a00c5b4:	4650      	mov	r0, sl
1a00c5b6:	f008 f857 	bl	1a014668 <__aeabi_fcmpeq>
1a00c5ba:	b938      	cbnz	r0, 1a00c5cc <inv_auto_calibrate+0x384>
1a00c5bc:	4628      	mov	r0, r5
1a00c5be:	4651      	mov	r1, sl
1a00c5c0:	f007 fdb4 	bl	1a01412c <__aeabi_fsub>
1a00c5c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a00c5c8:	f8c4 00dc 	str.w	r0, [r4, #220]	; 0xdc
1a00c5cc:	f8d9 3008 	ldr.w	r3, [r9, #8]
1a00c5d0:	f8c9 50d8 	str.w	r5, [r9, #216]	; 0xd8
1a00c5d4:	2b05      	cmp	r3, #5
1a00c5d6:	d80e      	bhi.n	1a00c5f6 <inv_auto_calibrate+0x3ae>
1a00c5d8:	e8df f003 	tbb	[pc, r3]
1a00c5dc:	03030303 	.word	0x03030303
1a00c5e0:	818b      	.short	0x818b
1a00c5e2:	4b6a      	ldr	r3, [pc, #424]	; (1a00c78c <inv_auto_calibrate+0x544>)
1a00c5e4:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
1a00c5e8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
1a00c5ec:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
1a00c5f0:	23c8      	movs	r3, #200	; 0xc8
1a00c5f2:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
1a00c5f6:	6b33      	ldr	r3, [r6, #48]	; 0x30
1a00c5f8:	4865      	ldr	r0, [pc, #404]	; (1a00c790 <inv_auto_calibrate+0x548>)
1a00c5fa:	05db      	lsls	r3, r3, #23
1a00c5fc:	d565      	bpl.n	1a00c6ca <inv_auto_calibrate+0x482>
1a00c5fe:	f002 fc15 	bl	1a00ee2c <inv_fast_nomot_parameter>
1a00c602:	f007 fe5f 	bl	1a0142c4 <__aeabi_l2f>
1a00c606:	4963      	ldr	r1, [pc, #396]	; (1a00c794 <inv_auto_calibrate+0x54c>)
1a00c608:	f007 ff4e 	bl	1a0144a8 <__aeabi_fdiv>
1a00c60c:	f8c9 0010 	str.w	r0, [r9, #16]
1a00c610:	4d5d      	ldr	r5, [pc, #372]	; (1a00c788 <inv_auto_calibrate+0x540>)
1a00c612:	2298      	movs	r2, #152	; 0x98
1a00c614:	2100      	movs	r1, #0
1a00c616:	f505 702c 	add.w	r0, r5, #688	; 0x2b0
1a00c61a:	f008 fbe1 	bl	1a014de0 <memset>
1a00c61e:	f8dd a00c 	ldr.w	sl, [sp, #12]
1a00c622:	f8dd c018 	ldr.w	ip, [sp, #24]
1a00c626:	f8d9 2084 	ldr.w	r2, [r9, #132]	; 0x84
1a00c62a:	44d0      	add	r8, sl
1a00c62c:	4447      	add	r7, r8
1a00c62e:	eb07 030c 	add.w	r3, r7, ip
1a00c632:	4293      	cmp	r3, r2
1a00c634:	dd67      	ble.n	1a00c706 <inv_auto_calibrate+0x4be>
1a00c636:	692f      	ldr	r7, [r5, #16]
1a00c638:	2100      	movs	r1, #0
1a00c63a:	4638      	mov	r0, r7
1a00c63c:	f008 f83c 	bl	1a0146b8 <__aeabi_fcmpgt>
1a00c640:	2800      	cmp	r0, #0
1a00c642:	d060      	beq.n	1a00c706 <inv_auto_calibrate+0x4be>
1a00c644:	4638      	mov	r0, r7
1a00c646:	6ba9      	ldr	r1, [r5, #56]	; 0x38
1a00c648:	f008 f818 	bl	1a01467c <__aeabi_fcmplt>
1a00c64c:	2800      	cmp	r0, #0
1a00c64e:	d05a      	beq.n	1a00c706 <inv_auto_calibrate+0x4be>
1a00c650:	686a      	ldr	r2, [r5, #4]
1a00c652:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a00c654:	429a      	cmp	r2, r3
1a00c656:	f2c0 8178 	blt.w	1a00c94a <inv_auto_calibrate+0x702>
1a00c65a:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
1a00c65e:	f007 f9fb 	bl	1a013a58 <__aeabi_f2d>
1a00c662:	a347      	add	r3, pc, #284	; (adr r3, 1a00c780 <inv_auto_calibrate+0x538>)
1a00c664:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00c668:	f007 fcda 	bl	1a014020 <__aeabi_dcmpgt>
1a00c66c:	2800      	cmp	r0, #0
1a00c66e:	f040 8179 	bne.w	1a00c964 <inv_auto_calibrate+0x71c>
1a00c672:	f8d9 4014 	ldr.w	r4, [r9, #20]
1a00c676:	f8d9 6018 	ldr.w	r6, [r9, #24]
1a00c67a:	f8d9 501c 	ldr.w	r5, [r9, #28]
1a00c67e:	f8c9 40b4 	str.w	r4, [r9, #180]	; 0xb4
1a00c682:	f8c9 60b8 	str.w	r6, [r9, #184]	; 0xb8
1a00c686:	f8c9 50bc 	str.w	r5, [r9, #188]	; 0xbc
1a00c68a:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 1a00c788 <inv_auto_calibrate+0x540>
1a00c68e:	46a2      	mov	sl, r4
1a00c690:	46c8      	mov	r8, r9
1a00c692:	f04f 0b03 	mov.w	fp, #3
1a00c696:	4651      	mov	r1, sl
1a00c698:	f8d8 0020 	ldr.w	r0, [r8, #32]
1a00c69c:	f007 ffee 	bl	1a01467c <__aeabi_fcmplt>
1a00c6a0:	4651      	mov	r1, sl
1a00c6a2:	b108      	cbz	r0, 1a00c6a8 <inv_auto_calibrate+0x460>
1a00c6a4:	f8c8 a020 	str.w	sl, [r8, #32]
1a00c6a8:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
1a00c6ac:	f008 f804 	bl	1a0146b8 <__aeabi_fcmpgt>
1a00c6b0:	f10b 3bff 	add.w	fp, fp, #4294967295
1a00c6b4:	b108      	cbz	r0, 1a00c6ba <inv_auto_calibrate+0x472>
1a00c6b6:	f8c8 a02c 	str.w	sl, [r8, #44]	; 0x2c
1a00c6ba:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
1a00c6be:	f108 0804 	add.w	r8, r8, #4
1a00c6c2:	d075      	beq.n	1a00c7b0 <inv_auto_calibrate+0x568>
1a00c6c4:	f8d8 a0b4 	ldr.w	sl, [r8, #180]	; 0xb4
1a00c6c8:	e7e5      	b.n	1a00c696 <inv_auto_calibrate+0x44e>
1a00c6ca:	f002 fc67 	bl	1a00ef9c <inv_fast_nomot_parameter_3rd>
1a00c6ce:	f007 fdf9 	bl	1a0142c4 <__aeabi_l2f>
1a00c6d2:	4931      	ldr	r1, [pc, #196]	; (1a00c798 <inv_auto_calibrate+0x550>)
1a00c6d4:	f007 fee8 	bl	1a0144a8 <__aeabi_fdiv>
1a00c6d8:	f8c9 0010 	str.w	r0, [r9, #16]
1a00c6dc:	e798      	b.n	1a00c610 <inv_auto_calibrate+0x3c8>
1a00c6de:	4b2f      	ldr	r3, [pc, #188]	; (1a00c79c <inv_auto_calibrate+0x554>)
1a00c6e0:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
1a00c6e4:	4b2e      	ldr	r3, [pc, #184]	; (1a00c7a0 <inv_auto_calibrate+0x558>)
1a00c6e6:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
1a00c6ea:	2332      	movs	r3, #50	; 0x32
1a00c6ec:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
1a00c6f0:	e781      	b.n	1a00c5f6 <inv_auto_calibrate+0x3ae>
1a00c6f2:	4b2c      	ldr	r3, [pc, #176]	; (1a00c7a4 <inv_auto_calibrate+0x55c>)
1a00c6f4:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
1a00c6f8:	4b2b      	ldr	r3, [pc, #172]	; (1a00c7a8 <inv_auto_calibrate+0x560>)
1a00c6fa:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
1a00c6fe:	2364      	movs	r3, #100	; 0x64
1a00c700:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
1a00c704:	e777      	b.n	1a00c5f6 <inv_auto_calibrate+0x3ae>
1a00c706:	696c      	ldr	r4, [r5, #20]
1a00c708:	69ae      	ldr	r6, [r5, #24]
1a00c70a:	69ed      	ldr	r5, [r5, #28]
1a00c70c:	4f1e      	ldr	r7, [pc, #120]	; (1a00c788 <inv_auto_calibrate+0x540>)
1a00c70e:	f04f 0803 	mov.w	r8, #3
1a00c712:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
1a00c716:	6979      	ldr	r1, [r7, #20]
1a00c718:	f007 fd08 	bl	1a01412c <__aeabi_fsub>
1a00c71c:	f108 38ff 	add.w	r8, r8, #4294967295
1a00c720:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a00c724:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
1a00c728:	3704      	adds	r7, #4
1a00c72a:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
1a00c72e:	d1f0      	bne.n	1a00c712 <inv_auto_calibrate+0x4ca>
1a00c730:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
1a00c734:	f8d9 00a4 	ldr.w	r0, [r9, #164]	; 0xa4
1a00c738:	f007 fcfa 	bl	1a014130 <__addsf3>
1a00c73c:	f8d9 10ac 	ldr.w	r1, [r9, #172]	; 0xac
1a00c740:	f007 fcf6 	bl	1a014130 <__addsf3>
1a00c744:	4641      	mov	r1, r8
1a00c746:	f8c9 00b0 	str.w	r0, [r9, #176]	; 0xb0
1a00c74a:	22e8      	movs	r2, #232	; 0xe8
1a00c74c:	4817      	ldr	r0, [pc, #92]	; (1a00c7ac <inv_auto_calibrate+0x564>)
1a00c74e:	f8c9 4098 	str.w	r4, [r9, #152]	; 0x98
1a00c752:	f8c9 609c 	str.w	r6, [r9, #156]	; 0x9c
1a00c756:	f8c9 50a0 	str.w	r5, [r9, #160]	; 0xa0
1a00c75a:	f008 fb41 	bl	1a014de0 <memset>
1a00c75e:	e5a0      	b.n	1a00c2a2 <inv_auto_calibrate+0x5a>
1a00c760:	2300      	movs	r3, #0
1a00c762:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
1a00c766:	e5bd      	b.n	1a00c2e4 <inv_auto_calibrate+0x9c>
1a00c768:	f103 0064 	add.w	r0, r3, #100	; 0x64
1a00c76c:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
1a00c770:	f7fa fce6 	bl	1a007140 <inv_set_accel_bias_mask>
1a00c774:	2001      	movs	r0, #1
1a00c776:	f7fc fbe3 	bl	1a008f40 <inv_set_accel_bias_found>
1a00c77a:	e58c      	b.n	1a00c296 <inv_auto_calibrate+0x4e>
1a00c77c:	f3af 8000 	nop.w
1a00c780:	9999999a 	.word	0x9999999a
1a00c784:	3fa99999 	.word	0x3fa99999
1a00c788:	10086be0 	.word	0x10086be0
1a00c78c:	44bb8000 	.word	0x44bb8000
1a00c790:	10086e90 	.word	0x10086e90
1a00c794:	47c35000 	.word	0x47c35000
1a00c798:	49742400 	.word	0x49742400
1a00c79c:	42700000 	.word	0x42700000
1a00c7a0:	3fb33333 	.word	0x3fb33333
1a00c7a4:	43960000 	.word	0x43960000
1a00c7a8:	3f99999a 	.word	0x3f99999a
1a00c7ac:	10086da8 	.word	0x10086da8
1a00c7b0:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
1a00c7b4:	f8d9 0020 	ldr.w	r0, [r9, #32]
1a00c7b8:	f007 fcb8 	bl	1a01412c <__aeabi_fsub>
1a00c7bc:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
1a00c7c0:	f8c9 00cc 	str.w	r0, [r9, #204]	; 0xcc
1a00c7c4:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
1a00c7c8:	f007 fcb0 	bl	1a01412c <__aeabi_fsub>
1a00c7cc:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
1a00c7d0:	f8c9 00d0 	str.w	r0, [r9, #208]	; 0xd0
1a00c7d4:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
1a00c7d8:	f007 fca8 	bl	1a01412c <__aeabi_fsub>
1a00c7dc:	e9d9 2314 	ldrd	r2, r3, [r9, #80]	; 0x50
1a00c7e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
1a00c7e4:	46d8      	mov	r8, fp
1a00c7e6:	f8d9 a03c 	ldr.w	sl, [r9, #60]	; 0x3c
1a00c7ea:	f8c9 00d4 	str.w	r0, [r9, #212]	; 0xd4
1a00c7ee:	f889 b424 	strb.w	fp, [r9, #1060]	; 0x424
1a00c7f2:	f8c9 b428 	str.w	fp, [r9, #1064]	; 0x428
1a00c7f6:	f8cd 8018 	str.w	r8, [sp, #24]
1a00c7fa:	f8cd 800c 	str.w	r8, [sp, #12]
1a00c7fe:	eb09 038b 	add.w	r3, r9, fp, lsl #2
1a00c802:	4651      	mov	r1, sl
1a00c804:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
1a00c808:	f007 ff4c 	bl	1a0146a4 <__aeabi_fcmpge>
1a00c80c:	2200      	movs	r2, #0
1a00c80e:	4b66      	ldr	r3, [pc, #408]	; (1a00c9a8 <inv_auto_calibrate+0x760>)
1a00c810:	b1c0      	cbz	r0, 1a00c844 <inv_auto_calibrate+0x5fc>
1a00c812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00c816:	f006 ffbf 	bl	1a013798 <__aeabi_dsub>
1a00c81a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a00c81e:	4619      	mov	r1, r3
1a00c820:	a359      	add	r3, pc, #356	; (adr r3, 1a00c988 <inv_auto_calibrate+0x740>)
1a00c822:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00c826:	f007 fbdd 	bl	1a013fe4 <__aeabi_dcmplt>
1a00c82a:	9b03      	ldr	r3, [sp, #12]
1a00c82c:	f04f 0c01 	mov.w	ip, #1
1a00c830:	1c5a      	adds	r2, r3, #1
1a00c832:	fa0c f30b 	lsl.w	r3, ip, fp
1a00c836:	b128      	cbz	r0, 1a00c844 <inv_auto_calibrate+0x5fc>
1a00c838:	9906      	ldr	r1, [sp, #24]
1a00c83a:	b2d2      	uxtb	r2, r2
1a00c83c:	4319      	orrs	r1, r3
1a00c83e:	9203      	str	r2, [sp, #12]
1a00c840:	9106      	str	r1, [sp, #24]
1a00c842:	4690      	mov	r8, r2
1a00c844:	f10b 0b01 	add.w	fp, fp, #1
1a00c848:	f1bb 0f03 	cmp.w	fp, #3
1a00c84c:	d1d7      	bne.n	1a00c7fe <inv_auto_calibrate+0x5b6>
1a00c84e:	9a06      	ldr	r2, [sp, #24]
1a00c850:	9b03      	ldr	r3, [sp, #12]
1a00c852:	f8df a15c 	ldr.w	sl, [pc, #348]	; 1a00c9b0 <inv_auto_calibrate+0x768>
1a00c856:	f889 8424 	strb.w	r8, [r9, #1060]	; 0x424
1a00c85a:	f8c9 2428 	str.w	r2, [r9, #1064]	; 0x428
1a00c85e:	2b00      	cmp	r3, #0
1a00c860:	d047      	beq.n	1a00c8f2 <inv_auto_calibrate+0x6aa>
1a00c862:	f50a 73d4 	add.w	r3, sl, #424	; 0x1a8
1a00c866:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00c86a:	f007 fbe3 	bl	1a014034 <__aeabi_d2iz>
1a00c86e:	f50a 73d8 	add.w	r3, sl, #432	; 0x1b0
1a00c872:	f8ca 0064 	str.w	r0, [sl, #100]	; 0x64
1a00c876:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00c87a:	f007 fbdb 	bl	1a014034 <__aeabi_d2iz>
1a00c87e:	f50a 73dc 	add.w	r3, sl, #440	; 0x1b8
1a00c882:	f8ca 0068 	str.w	r0, [sl, #104]	; 0x68
1a00c886:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00c88a:	f007 fbd3 	bl	1a014034 <__aeabi_d2iz>
1a00c88e:	f8da 3008 	ldr.w	r3, [sl, #8]
1a00c892:	f8ca 006c 	str.w	r0, [sl, #108]	; 0x6c
1a00c896:	2200      	movs	r2, #0
1a00c898:	2b03      	cmp	r3, #3
1a00c89a:	bfd8      	it	le
1a00c89c:	9903      	ldrle	r1, [sp, #12]
1a00c89e:	f8ca 242c 	str.w	r2, [sl, #1068]	; 0x42c
1a00c8a2:	9a03      	ldr	r2, [sp, #12]
1a00c8a4:	bfd8      	it	le
1a00c8a6:	f8ca 1008 	strle.w	r1, [sl, #8]
1a00c8aa:	2a03      	cmp	r2, #3
1a00c8ac:	d121      	bne.n	1a00c8f2 <inv_auto_calibrate+0x6aa>
1a00c8ae:	f8d9 000c 	ldr.w	r0, [r9, #12]
1a00c8b2:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1a00c9b0 <inv_auto_calibrate+0x768>
1a00c8b6:	f007 f8cf 	bl	1a013a58 <__aeabi_f2d>
1a00c8ba:	a335      	add	r3, pc, #212	; (adr r3, 1a00c990 <inv_auto_calibrate+0x748>)
1a00c8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00c8c0:	f007 fb90 	bl	1a013fe4 <__aeabi_dcmplt>
1a00c8c4:	b1a8      	cbz	r0, 1a00c8f2 <inv_auto_calibrate+0x6aa>
1a00c8c6:	2200      	movs	r2, #0
1a00c8c8:	4b37      	ldr	r3, [pc, #220]	; (1a00c9a8 <inv_auto_calibrate+0x760>)
1a00c8ca:	e9d8 0114 	ldrd	r0, r1, [r8, #80]	; 0x50
1a00c8ce:	f006 ff63 	bl	1a013798 <__aeabi_dsub>
1a00c8d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a00c8d6:	4619      	mov	r1, r3
1a00c8d8:	a32b      	add	r3, pc, #172	; (adr r3, 1a00c988 <inv_auto_calibrate+0x740>)
1a00c8da:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00c8de:	f007 fb81 	bl	1a013fe4 <__aeabi_dcmplt>
1a00c8e2:	b130      	cbz	r0, 1a00c8f2 <inv_auto_calibrate+0x6aa>
1a00c8e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00c8e8:	2b03      	cmp	r3, #3
1a00c8ea:	d102      	bne.n	1a00c8f2 <inv_auto_calibrate+0x6aa>
1a00c8ec:	2304      	movs	r3, #4
1a00c8ee:	f8c8 3008 	str.w	r3, [r8, #8]
1a00c8f2:	4638      	mov	r0, r7
1a00c8f4:	492d      	ldr	r1, [pc, #180]	; (1a00c9ac <inv_auto_calibrate+0x764>)
1a00c8f6:	f007 fec1 	bl	1a01467c <__aeabi_fcmplt>
1a00c8fa:	2800      	cmp	r0, #0
1a00c8fc:	f43f af06 	beq.w	1a00c70c <inv_auto_calibrate+0x4c4>
1a00c900:	f8d9 000c 	ldr.w	r0, [r9, #12]
1a00c904:	4f2a      	ldr	r7, [pc, #168]	; (1a00c9b0 <inv_auto_calibrate+0x768>)
1a00c906:	f007 f8a7 	bl	1a013a58 <__aeabi_f2d>
1a00c90a:	a323      	add	r3, pc, #140	; (adr r3, 1a00c998 <inv_auto_calibrate+0x750>)
1a00c90c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00c910:	f007 fb68 	bl	1a013fe4 <__aeabi_dcmplt>
1a00c914:	2800      	cmp	r0, #0
1a00c916:	f43f aef9 	beq.w	1a00c70c <inv_auto_calibrate+0x4c4>
1a00c91a:	2200      	movs	r2, #0
1a00c91c:	4b22      	ldr	r3, [pc, #136]	; (1a00c9a8 <inv_auto_calibrate+0x760>)
1a00c91e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
1a00c922:	f006 ff39 	bl	1a013798 <__aeabi_dsub>
1a00c926:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a00c92a:	4619      	mov	r1, r3
1a00c92c:	a31c      	add	r3, pc, #112	; (adr r3, 1a00c9a0 <inv_auto_calibrate+0x758>)
1a00c92e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00c932:	f007 fb57 	bl	1a013fe4 <__aeabi_dcmplt>
1a00c936:	2800      	cmp	r0, #0
1a00c938:	f43f aee8 	beq.w	1a00c70c <inv_auto_calibrate+0x4c4>
1a00c93c:	68bb      	ldr	r3, [r7, #8]
1a00c93e:	2b04      	cmp	r3, #4
1a00c940:	f47f aee4 	bne.w	1a00c70c <inv_auto_calibrate+0x4c4>
1a00c944:	2305      	movs	r3, #5
1a00c946:	60bb      	str	r3, [r7, #8]
1a00c948:	e6e0      	b.n	1a00c70c <inv_auto_calibrate+0x4c4>
1a00c94a:	f8d5 34a4 	ldr.w	r3, [r5, #1188]	; 0x4a4
1a00c94e:	2b01      	cmp	r3, #1
1a00c950:	f47f aca7 	bne.w	1a00c2a2 <inv_auto_calibrate+0x5a>
1a00c954:	4630      	mov	r0, r6
1a00c956:	f7ff fa73 	bl	1a00be40 <inv_combine_data_calculate_bias.part.1>
1a00c95a:	2800      	cmp	r0, #0
1a00c95c:	f43f aca1 	beq.w	1a00c2a2 <inv_auto_calibrate+0x5a>
1a00c960:	692f      	ldr	r7, [r5, #16]
1a00c962:	e686      	b.n	1a00c672 <inv_auto_calibrate+0x42a>
1a00c964:	f8d5 34a4 	ldr.w	r3, [r5, #1188]	; 0x4a4
1a00c968:	2b01      	cmp	r3, #1
1a00c96a:	f47f ac9a 	bne.w	1a00c2a2 <inv_auto_calibrate+0x5a>
1a00c96e:	4630      	mov	r0, r6
1a00c970:	f7ff fa66 	bl	1a00be40 <inv_combine_data_calculate_bias.part.1>
1a00c974:	2800      	cmp	r0, #0
1a00c976:	f43f ac94 	beq.w	1a00c2a2 <inv_auto_calibrate+0x5a>
1a00c97a:	2300      	movs	r3, #0
1a00c97c:	692f      	ldr	r7, [r5, #16]
1a00c97e:	606b      	str	r3, [r5, #4]
1a00c980:	e677      	b.n	1a00c672 <inv_auto_calibrate+0x42a>
1a00c982:	bf00      	nop
1a00c984:	f3af 8000 	nop.w
1a00c988:	9999999a 	.word	0x9999999a
1a00c98c:	3fb99999 	.word	0x3fb99999
1a00c990:	c28f5c29 	.word	0xc28f5c29
1a00c994:	3fbc28f5 	.word	0x3fbc28f5
1a00c998:	8d4fdf3b 	.word	0x8d4fdf3b
1a00c99c:	3f926e97 	.word	0x3f926e97
1a00c9a0:	b020c49c 	.word	0xb020c49c
1a00c9a4:	3f916872 	.word	0x3f916872
1a00c9a8:	3ff00000 	.word	0x3ff00000
1a00c9ac:	437a0000 	.word	0x437a0000
1a00c9b0:	10086be0 	.word	0x10086be0
1a00c9b4:	f3af 8000 	nop.w

1a00c9b8 <inv_init_in_use_auto_calibration>:
1a00c9b8:	b538      	push	{r3, r4, r5, lr}
1a00c9ba:	4c19      	ldr	r4, [pc, #100]	; (1a00ca20 <inv_init_in_use_auto_calibration+0x68>)
1a00c9bc:	2100      	movs	r1, #0
1a00c9be:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
1a00c9c2:	4620      	mov	r0, r4
1a00c9c4:	f008 fa0c 	bl	1a014de0 <memset>
1a00c9c8:	230a      	movs	r3, #10
1a00c9ca:	6023      	str	r3, [r4, #0]
1a00c9cc:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
1a00c9d0:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
1a00c9d4:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
1a00c9d8:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
1a00c9dc:	231e      	movs	r3, #30
1a00c9de:	f8c4 348c 	str.w	r3, [r4, #1164]	; 0x48c
1a00c9e2:	4b10      	ldr	r3, [pc, #64]	; (1a00ca24 <inv_init_in_use_auto_calibration+0x6c>)
1a00c9e4:	4a10      	ldr	r2, [pc, #64]	; (1a00ca28 <inv_init_in_use_auto_calibration+0x70>)
1a00c9e6:	f8c4 3498 	str.w	r3, [r4, #1176]	; 0x498
1a00c9ea:	4b10      	ldr	r3, [pc, #64]	; (1a00ca2c <inv_init_in_use_auto_calibration+0x74>)
1a00c9ec:	4910      	ldr	r1, [pc, #64]	; (1a00ca30 <inv_init_in_use_auto_calibration+0x78>)
1a00c9ee:	62e2      	str	r2, [r4, #44]	; 0x2c
1a00c9f0:	6322      	str	r2, [r4, #48]	; 0x30
1a00c9f2:	6362      	str	r2, [r4, #52]	; 0x34
1a00c9f4:	f8c4 3494 	str.w	r3, [r4, #1172]	; 0x494
1a00c9f8:	2214      	movs	r2, #20
1a00c9fa:	4b0e      	ldr	r3, [pc, #56]	; (1a00ca34 <inv_init_in_use_auto_calibration+0x7c>)
1a00c9fc:	f8c4 2488 	str.w	r2, [r4, #1160]	; 0x488
1a00ca00:	2019      	movs	r0, #25
1a00ca02:	2201      	movs	r2, #1
1a00ca04:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
1a00ca08:	6221      	str	r1, [r4, #32]
1a00ca0a:	6725      	str	r5, [r4, #112]	; 0x70
1a00ca0c:	6261      	str	r1, [r4, #36]	; 0x24
1a00ca0e:	62a1      	str	r1, [r4, #40]	; 0x28
1a00ca10:	f8c4 24a4 	str.w	r2, [r4, #1188]	; 0x4a4
1a00ca14:	f8c4 349c 	str.w	r3, [r4, #1180]	; 0x49c
1a00ca18:	f002 feb6 	bl	1a00f788 <inv_set_default_number_of_samples>
1a00ca1c:	2000      	movs	r0, #0
1a00ca1e:	bd38      	pop	{r3, r4, r5, pc}
1a00ca20:	10086be0 	.word	0x10086be0
1a00ca24:	3ecccccd 	.word	0x3ecccccd
1a00ca28:	461c4000 	.word	0x461c4000
1a00ca2c:	3f4ccccd 	.word	0x3f4ccccd
1a00ca30:	c61c4000 	.word	0xc61c4000
1a00ca34:	3f333333 	.word	0x3f333333

1a00ca38 <inv_enable_in_use_auto_calibration>:
1a00ca38:	b508      	push	{r3, lr}
1a00ca3a:	f7ff ffbd 	bl	1a00c9b8 <inv_init_in_use_auto_calibration>
1a00ca3e:	b100      	cbz	r0, 1a00ca42 <inv_enable_in_use_auto_calibration+0xa>
1a00ca40:	bd08      	pop	{r3, pc}
1a00ca42:	4802      	ldr	r0, [pc, #8]	; (1a00ca4c <inv_enable_in_use_auto_calibration+0x14>)
1a00ca44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a00ca48:	f7fc bb56 	b.w	1a0090f8 <inv_register_mpl_start_notification>
1a00ca4c:	1a00bde5 	.word	0x1a00bde5

1a00ca50 <inv_start_vector_compass_cal>:
1a00ca50:	4802      	ldr	r0, [pc, #8]	; (1a00ca5c <inv_start_vector_compass_cal+0xc>)
1a00ca52:	f44f 71c8 	mov.w	r1, #400	; 0x190
1a00ca56:	2204      	movs	r2, #4
1a00ca58:	f7fa bd7a 	b.w	1a007550 <inv_register_data_cb>
1a00ca5c:	1a00ec29 	.word	0x1a00ec29

1a00ca60 <inv_check_peaks.part.0.constprop.4>:
1a00ca60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00ca64:	4e76      	ldr	r6, [pc, #472]	; (1a00cc40 <inv_check_peaks.part.0.constprop.4+0x1e0>)
1a00ca66:	f9b6 30c2 	ldrsh.w	r3, [r6, #194]	; 0xc2
1a00ca6a:	f9b6 a0bc 	ldrsh.w	sl, [r6, #188]	; 0xbc
1a00ca6e:	b087      	sub	sp, #28
1a00ca70:	4604      	mov	r4, r0
1a00ca72:	ebc3 000a 	rsb	r0, r3, sl
1a00ca76:	460d      	mov	r5, r1
1a00ca78:	f006 ffdc 	bl	1a013a34 <__aeabi_i2d>
1a00ca7c:	4622      	mov	r2, r4
1a00ca7e:	462b      	mov	r3, r5
1a00ca80:	e9cd 0100 	strd	r0, r1, [sp]
1a00ca84:	f007 faae 	bl	1a013fe4 <__aeabi_dcmplt>
1a00ca88:	f9b6 20ca 	ldrsh.w	r2, [r6, #202]	; 0xca
1a00ca8c:	f9b6 30d0 	ldrsh.w	r3, [r6, #208]	; 0xd0
1a00ca90:	f110 0b00 	adds.w	fp, r0, #0
1a00ca94:	ebc3 0002 	rsb	r0, r3, r2
1a00ca98:	bf18      	it	ne
1a00ca9a:	f04f 0b01 	movne.w	fp, #1
1a00ca9e:	f006 ffc9 	bl	1a013a34 <__aeabi_i2d>
1a00caa2:	4680      	mov	r8, r0
1a00caa4:	4689      	mov	r9, r1
1a00caa6:	4620      	mov	r0, r4
1a00caa8:	4629      	mov	r1, r5
1a00caaa:	4642      	mov	r2, r8
1a00caac:	464b      	mov	r3, r9
1a00caae:	f007 fab7 	bl	1a014020 <__aeabi_dcmpgt>
1a00cab2:	b108      	cbz	r0, 1a00cab8 <inv_check_peaks.part.0.constprop.4+0x58>
1a00cab4:	f10b 0b01 	add.w	fp, fp, #1
1a00cab8:	f9b6 30de 	ldrsh.w	r3, [r6, #222]	; 0xde
1a00cabc:	f9b6 00d8 	ldrsh.w	r0, [r6, #216]	; 0xd8
1a00cac0:	1ac0      	subs	r0, r0, r3
1a00cac2:	f006 ffb7 	bl	1a013a34 <__aeabi_i2d>
1a00cac6:	4606      	mov	r6, r0
1a00cac8:	460f      	mov	r7, r1
1a00caca:	4620      	mov	r0, r4
1a00cacc:	4629      	mov	r1, r5
1a00cace:	4632      	mov	r2, r6
1a00cad0:	463b      	mov	r3, r7
1a00cad2:	f007 faa5 	bl	1a014020 <__aeabi_dcmpgt>
1a00cad6:	b108      	cbz	r0, 1a00cadc <inv_check_peaks.part.0.constprop.4+0x7c>
1a00cad8:	f10b 0b01 	add.w	fp, fp, #1
1a00cadc:	f1bb 0f01 	cmp.w	fp, #1
1a00cae0:	dd03      	ble.n	1a00caea <inv_check_peaks.part.0.constprop.4+0x8a>
1a00cae2:	2001      	movs	r0, #1
1a00cae4:	b007      	add	sp, #28
1a00cae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00caea:	2200      	movs	r2, #0
1a00caec:	4620      	mov	r0, r4
1a00caee:	4629      	mov	r1, r5
1a00caf0:	4b54      	ldr	r3, [pc, #336]	; (1a00cc44 <inv_check_peaks.part.0.constprop.4+0x1e4>)
1a00caf2:	f007 f805 	bl	1a013b00 <__aeabi_dmul>
1a00caf6:	4604      	mov	r4, r0
1a00caf8:	460d      	mov	r5, r1
1a00cafa:	4622      	mov	r2, r4
1a00cafc:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00cb00:	462b      	mov	r3, r5
1a00cb02:	f007 fa8d 	bl	1a014020 <__aeabi_dcmpgt>
1a00cb06:	4622      	mov	r2, r4
1a00cb08:	f110 0b00 	adds.w	fp, r0, #0
1a00cb0c:	462b      	mov	r3, r5
1a00cb0e:	4640      	mov	r0, r8
1a00cb10:	4649      	mov	r1, r9
1a00cb12:	bf18      	it	ne
1a00cb14:	f04f 0b01 	movne.w	fp, #1
1a00cb18:	f007 fa82 	bl	1a014020 <__aeabi_dcmpgt>
1a00cb1c:	b108      	cbz	r0, 1a00cb22 <inv_check_peaks.part.0.constprop.4+0xc2>
1a00cb1e:	f10b 0b01 	add.w	fp, fp, #1
1a00cb22:	4630      	mov	r0, r6
1a00cb24:	4639      	mov	r1, r7
1a00cb26:	4622      	mov	r2, r4
1a00cb28:	462b      	mov	r3, r5
1a00cb2a:	f007 fa79 	bl	1a014020 <__aeabi_dcmpgt>
1a00cb2e:	2800      	cmp	r0, #0
1a00cb30:	d178      	bne.n	1a00cc24 <inv_check_peaks.part.0.constprop.4+0x1c4>
1a00cb32:	f1bb 0f00 	cmp.w	fp, #0
1a00cb36:	d175      	bne.n	1a00cc24 <inv_check_peaks.part.0.constprop.4+0x1c4>
1a00cb38:	4b43      	ldr	r3, [pc, #268]	; (1a00cc48 <inv_check_peaks.part.0.constprop.4+0x1e8>)
1a00cb3a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 1a00cc40 <inv_check_peaks.part.0.constprop.4+0x1e0>
1a00cb3e:	f8cd b014 	str.w	fp, [sp, #20]
1a00cb42:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	; 0xd0
1a00cb46:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
1a00cb4a:	e9cd 0100 	strd	r0, r1, [sp]
1a00cb4e:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
1a00cb52:	f108 0924 	add.w	r9, r8, #36	; 0x24
1a00cb56:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a00cb5a:	46ab      	mov	fp, r5
1a00cb5c:	4650      	mov	r0, sl
1a00cb5e:	46a2      	mov	sl, r4
1a00cb60:	f006 ff68 	bl	1a013a34 <__aeabi_i2d>
1a00cb64:	4652      	mov	r2, sl
1a00cb66:	465b      	mov	r3, fp
1a00cb68:	f006 fe16 	bl	1a013798 <__aeabi_dsub>
1a00cb6c:	4604      	mov	r4, r0
1a00cb6e:	f9b8 00c2 	ldrsh.w	r0, [r8, #194]	; 0xc2
1a00cb72:	460d      	mov	r5, r1
1a00cb74:	f006 ff5e 	bl	1a013a34 <__aeabi_i2d>
1a00cb78:	4652      	mov	r2, sl
1a00cb7a:	465b      	mov	r3, fp
1a00cb7c:	f006 fe0c 	bl	1a013798 <__aeabi_dsub>
1a00cb80:	4602      	mov	r2, r0
1a00cb82:	460b      	mov	r3, r1
1a00cb84:	4620      	mov	r0, r4
1a00cb86:	4629      	mov	r1, r5
1a00cb88:	f006 ffba 	bl	1a013b00 <__aeabi_dmul>
1a00cb8c:	4606      	mov	r6, r0
1a00cb8e:	f9b8 00be 	ldrsh.w	r0, [r8, #190]	; 0xbe
1a00cb92:	460f      	mov	r7, r1
1a00cb94:	f006 ff4e 	bl	1a013a34 <__aeabi_i2d>
1a00cb98:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00cb9c:	f006 fdfc 	bl	1a013798 <__aeabi_dsub>
1a00cba0:	4604      	mov	r4, r0
1a00cba2:	f9b8 00c4 	ldrsh.w	r0, [r8, #196]	; 0xc4
1a00cba6:	460d      	mov	r5, r1
1a00cba8:	f006 ff44 	bl	1a013a34 <__aeabi_i2d>
1a00cbac:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00cbb0:	f006 fdf2 	bl	1a013798 <__aeabi_dsub>
1a00cbb4:	4602      	mov	r2, r0
1a00cbb6:	460b      	mov	r3, r1
1a00cbb8:	4620      	mov	r0, r4
1a00cbba:	4629      	mov	r1, r5
1a00cbbc:	f006 ffa0 	bl	1a013b00 <__aeabi_dmul>
1a00cbc0:	4602      	mov	r2, r0
1a00cbc2:	460b      	mov	r3, r1
1a00cbc4:	4630      	mov	r0, r6
1a00cbc6:	4639      	mov	r1, r7
1a00cbc8:	f006 fde8 	bl	1a01379c <__adddf3>
1a00cbcc:	4606      	mov	r6, r0
1a00cbce:	f9b8 00c0 	ldrsh.w	r0, [r8, #192]	; 0xc0
1a00cbd2:	460f      	mov	r7, r1
1a00cbd4:	f006 ff2e 	bl	1a013a34 <__aeabi_i2d>
1a00cbd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00cbdc:	f006 fddc 	bl	1a013798 <__aeabi_dsub>
1a00cbe0:	4604      	mov	r4, r0
1a00cbe2:	f9b8 00c6 	ldrsh.w	r0, [r8, #198]	; 0xc6
1a00cbe6:	460d      	mov	r5, r1
1a00cbe8:	f006 ff24 	bl	1a013a34 <__aeabi_i2d>
1a00cbec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00cbf0:	f006 fdd2 	bl	1a013798 <__aeabi_dsub>
1a00cbf4:	4602      	mov	r2, r0
1a00cbf6:	460b      	mov	r3, r1
1a00cbf8:	4620      	mov	r0, r4
1a00cbfa:	4629      	mov	r1, r5
1a00cbfc:	f006 ff80 	bl	1a013b00 <__aeabi_dmul>
1a00cc00:	4602      	mov	r2, r0
1a00cc02:	460b      	mov	r3, r1
1a00cc04:	4630      	mov	r0, r6
1a00cc06:	4639      	mov	r1, r7
1a00cc08:	f006 fdc8 	bl	1a01379c <__adddf3>
1a00cc0c:	2200      	movs	r2, #0
1a00cc0e:	2300      	movs	r3, #0
1a00cc10:	f108 080c 	add.w	r8, r8, #12
1a00cc14:	f007 f9e6 	bl	1a013fe4 <__aeabi_dcmplt>
1a00cc18:	b970      	cbnz	r0, 1a00cc38 <inv_check_peaks.part.0.constprop.4+0x1d8>
1a00cc1a:	45c8      	cmp	r8, r9
1a00cc1c:	d004      	beq.n	1a00cc28 <inv_check_peaks.part.0.constprop.4+0x1c8>
1a00cc1e:	f9b8 00bc 	ldrsh.w	r0, [r8, #188]	; 0xbc
1a00cc22:	e79d      	b.n	1a00cb60 <inv_check_peaks.part.0.constprop.4+0x100>
1a00cc24:	2002      	movs	r0, #2
1a00cc26:	e75d      	b.n	1a00cae4 <inv_check_peaks.part.0.constprop.4+0x84>
1a00cc28:	f8dd b014 	ldr.w	fp, [sp, #20]
1a00cc2c:	f1bb 0f01 	cmp.w	fp, #1
1a00cc30:	bfcc      	ite	gt
1a00cc32:	2000      	movgt	r0, #0
1a00cc34:	2001      	movle	r0, #1
1a00cc36:	e755      	b.n	1a00cae4 <inv_check_peaks.part.0.constprop.4+0x84>
1a00cc38:	9905      	ldr	r1, [sp, #20]
1a00cc3a:	3101      	adds	r1, #1
1a00cc3c:	9105      	str	r1, [sp, #20]
1a00cc3e:	e7ec      	b.n	1a00cc1a <inv_check_peaks.part.0.constprop.4+0x1ba>
1a00cc40:	10087ad0 	.word	0x10087ad0
1a00cc44:	40040000 	.word	0x40040000
1a00cc48:	10087900 	.word	0x10087900

1a00cc4c <inv_cheap_rand>:
1a00cc4c:	4a0c      	ldr	r2, [pc, #48]	; (1a00cc80 <inv_cheap_rand+0x34>)
1a00cc4e:	490d      	ldr	r1, [pc, #52]	; (1a00cc84 <inv_cheap_rand+0x38>)
1a00cc50:	6810      	ldr	r0, [r2, #0]
1a00cc52:	b470      	push	{r4, r5, r6}
1a00cc54:	4d0c      	ldr	r5, [pc, #48]	; (1a00cc88 <inv_cheap_rand+0x3c>)
1a00cc56:	680c      	ldr	r4, [r1, #0]
1a00cc58:	682e      	ldr	r6, [r5, #0]
1a00cc5a:	01c3      	lsls	r3, r0, #7
1a00cc5c:	ea83 03d0 	eor.w	r3, r3, r0, lsr #3
1a00cc60:	ea83 1306 	eor.w	r3, r3, r6, lsl #4
1a00cc64:	ea83 04c4 	eor.w	r4, r3, r4, lsl #3
1a00cc68:	0340      	lsls	r0, r0, #13
1a00cc6a:	ea80 1054 	eor.w	r0, r0, r4, lsr #5
1a00cc6e:	0ade      	lsrs	r6, r3, #11
1a00cc70:	ea86 2040 	eor.w	r0, r6, r0, lsl #9
1a00cc74:	602b      	str	r3, [r5, #0]
1a00cc76:	600c      	str	r4, [r1, #0]
1a00cc78:	6010      	str	r0, [r2, #0]
1a00cc7a:	bc70      	pop	{r4, r5, r6}
1a00cc7c:	4770      	bx	lr
1a00cc7e:	bf00      	nop
1a00cc80:	10086074 	.word	0x10086074
1a00cc84:	1008606c 	.word	0x1008606c
1a00cc88:	10086070 	.word	0x10086070

1a00cc8c <inv_cheap_gaussian>:
1a00cc8c:	b570      	push	{r4, r5, r6, lr}
1a00cc8e:	4606      	mov	r6, r0
1a00cc90:	f7ff ffdc 	bl	1a00cc4c <inv_cheap_rand>
1a00cc94:	f007 fafc 	bl	1a014290 <__aeabi_ui2f>
1a00cc98:	4916      	ldr	r1, [pc, #88]	; (1a00ccf4 <inv_cheap_gaussian+0x68>)
1a00cc9a:	f007 fb51 	bl	1a014340 <__aeabi_fmul>
1a00cc9e:	f04f 513e 	mov.w	r1, #796917760	; 0x2f800000
1a00cca2:	f007 fb4d 	bl	1a014340 <__aeabi_fmul>
1a00cca6:	f008 fba3 	bl	1a0153f0 <cosf>
1a00ccaa:	4605      	mov	r5, r0
1a00ccac:	f7ff ffce 	bl	1a00cc4c <inv_cheap_rand>
1a00ccb0:	f007 faee 	bl	1a014290 <__aeabi_ui2f>
1a00ccb4:	f04f 513e 	mov.w	r1, #796917760	; 0x2f800000
1a00ccb8:	f007 fb42 	bl	1a014340 <__aeabi_fmul>
1a00ccbc:	2100      	movs	r1, #0
1a00ccbe:	4604      	mov	r4, r0
1a00ccc0:	f007 fcd2 	bl	1a014668 <__aeabi_fcmpeq>
1a00ccc4:	b108      	cbz	r0, 1a00ccca <inv_cheap_gaussian+0x3e>
1a00ccc6:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
1a00ccca:	4620      	mov	r0, r4
1a00cccc:	f006 fec4 	bl	1a013a58 <__aeabi_f2d>
1a00ccd0:	f008 fcd6 	bl	1a015680 <log>
1a00ccd4:	2200      	movs	r2, #0
1a00ccd6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
1a00ccda:	f006 ff11 	bl	1a013b00 <__aeabi_dmul>
1a00ccde:	f007 f9d1 	bl	1a014084 <__aeabi_d2f>
1a00cce2:	f008 fdf5 	bl	1a0158d0 <sqrtf>
1a00cce6:	4631      	mov	r1, r6
1a00cce8:	f007 fb2a 	bl	1a014340 <__aeabi_fmul>
1a00ccec:	4629      	mov	r1, r5
1a00ccee:	f007 fb27 	bl	1a014340 <__aeabi_fmul>
1a00ccf2:	bd70      	pop	{r4, r5, r6, pc}
1a00ccf4:	40c90fdb 	.word	0x40c90fdb

1a00ccf8 <inv_combine_compass_data>:
1a00ccf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00ccfc:	b085      	sub	sp, #20
1a00ccfe:	461c      	mov	r4, r3
1a00cd00:	9003      	str	r0, [sp, #12]
1a00cd02:	4610      	mov	r0, r2
1a00cd04:	468b      	mov	fp, r1
1a00cd06:	f006 fea7 	bl	1a013a58 <__aeabi_f2d>
1a00cd0a:	e9cd 0100 	strd	r0, r1, [sp]
1a00cd0e:	4620      	mov	r0, r4
1a00cd10:	f006 fea2 	bl	1a013a58 <__aeabi_f2d>
1a00cd14:	9e03      	ldr	r6, [sp, #12]
1a00cd16:	4604      	mov	r4, r0
1a00cd18:	e9d6 2330 	ldrd	r2, r3, [r6, #192]	; 0xc0
1a00cd1c:	460d      	mov	r5, r1
1a00cd1e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00cd22:	f006 feed 	bl	1a013b00 <__aeabi_dmul>
1a00cd26:	e9db 2330 	ldrd	r2, r3, [fp, #192]	; 0xc0
1a00cd2a:	4606      	mov	r6, r0
1a00cd2c:	460f      	mov	r7, r1
1a00cd2e:	4620      	mov	r0, r4
1a00cd30:	4629      	mov	r1, r5
1a00cd32:	f006 fee5 	bl	1a013b00 <__aeabi_dmul>
1a00cd36:	4602      	mov	r2, r0
1a00cd38:	460b      	mov	r3, r1
1a00cd3a:	4630      	mov	r0, r6
1a00cd3c:	4639      	mov	r1, r7
1a00cd3e:	f006 fd2d 	bl	1a01379c <__adddf3>
1a00cd42:	9e03      	ldr	r6, [sp, #12]
1a00cd44:	e9c6 0130 	strd	r0, r1, [r6, #192]	; 0xc0
1a00cd48:	46b0      	mov	r8, r6
1a00cd4a:	46d9      	mov	r9, fp
1a00cd4c:	f04f 0a00 	mov.w	sl, #0
1a00cd50:	e9d8 2300 	ldrd	r2, r3, [r8]
1a00cd54:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00cd58:	f006 fed2 	bl	1a013b00 <__aeabi_dmul>
1a00cd5c:	e9d9 2300 	ldrd	r2, r3, [r9]
1a00cd60:	4606      	mov	r6, r0
1a00cd62:	460f      	mov	r7, r1
1a00cd64:	4620      	mov	r0, r4
1a00cd66:	4629      	mov	r1, r5
1a00cd68:	f006 feca 	bl	1a013b00 <__aeabi_dmul>
1a00cd6c:	4602      	mov	r2, r0
1a00cd6e:	460b      	mov	r3, r1
1a00cd70:	4630      	mov	r0, r6
1a00cd72:	4639      	mov	r1, r7
1a00cd74:	f006 fd12 	bl	1a01379c <__adddf3>
1a00cd78:	e9d8 2324 	ldrd	r2, r3, [r8, #144]	; 0x90
1a00cd7c:	e9c8 0100 	strd	r0, r1, [r8]
1a00cd80:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00cd84:	f006 febc 	bl	1a013b00 <__aeabi_dmul>
1a00cd88:	e9d9 2324 	ldrd	r2, r3, [r9, #144]	; 0x90
1a00cd8c:	4606      	mov	r6, r0
1a00cd8e:	460f      	mov	r7, r1
1a00cd90:	4620      	mov	r0, r4
1a00cd92:	4629      	mov	r1, r5
1a00cd94:	f006 feb4 	bl	1a013b00 <__aeabi_dmul>
1a00cd98:	4602      	mov	r2, r0
1a00cd9a:	460b      	mov	r3, r1
1a00cd9c:	4630      	mov	r0, r6
1a00cd9e:	4639      	mov	r1, r7
1a00cda0:	f006 fcfc 	bl	1a01379c <__adddf3>
1a00cda4:	f10a 0a01 	add.w	sl, sl, #1
1a00cda8:	f1ba 0f06 	cmp.w	sl, #6
1a00cdac:	e9c8 0124 	strd	r0, r1, [r8, #144]	; 0x90
1a00cdb0:	f109 0908 	add.w	r9, r9, #8
1a00cdb4:	f108 0808 	add.w	r8, r8, #8
1a00cdb8:	d1ca      	bne.n	1a00cd50 <inv_combine_compass_data+0x58>
1a00cdba:	9e03      	ldr	r6, [sp, #12]
1a00cdbc:	f10b 0940 	add.w	r9, fp, #64	; 0x40
1a00cdc0:	f106 0a48 	add.w	sl, r6, #72	; 0x48
1a00cdc4:	f04f 0800 	mov.w	r8, #0
1a00cdc8:	e9da 2300 	ldrd	r2, r3, [sl]
1a00cdcc:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00cdd0:	f006 fe96 	bl	1a013b00 <__aeabi_dmul>
1a00cdd4:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
1a00cdd8:	4606      	mov	r6, r0
1a00cdda:	460f      	mov	r7, r1
1a00cddc:	4620      	mov	r0, r4
1a00cdde:	4629      	mov	r1, r5
1a00cde0:	f006 fe8e 	bl	1a013b00 <__aeabi_dmul>
1a00cde4:	4602      	mov	r2, r0
1a00cde6:	460b      	mov	r3, r1
1a00cde8:	4630      	mov	r0, r6
1a00cdea:	4639      	mov	r1, r7
1a00cdec:	f006 fcd6 	bl	1a01379c <__adddf3>
1a00cdf0:	f108 0801 	add.w	r8, r8, #1
1a00cdf4:	f1b8 0f09 	cmp.w	r8, #9
1a00cdf8:	e8ea 0102 	strd	r0, r1, [sl], #8
1a00cdfc:	d1e4      	bne.n	1a00cdc8 <inv_combine_compass_data+0xd0>
1a00cdfe:	9e03      	ldr	r6, [sp, #12]
1a00ce00:	f106 0930 	add.w	r9, r6, #48	; 0x30
1a00ce04:	46ca      	mov	sl, r9
1a00ce06:	f04f 0800 	mov.w	r8, #0
1a00ce0a:	46d9      	mov	r9, fp
1a00ce0c:	e9da 2300 	ldrd	r2, r3, [sl]
1a00ce10:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00ce14:	f006 fe74 	bl	1a013b00 <__aeabi_dmul>
1a00ce18:	eb09 0308 	add.w	r3, r9, r8
1a00ce1c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
1a00ce20:	4606      	mov	r6, r0
1a00ce22:	460f      	mov	r7, r1
1a00ce24:	4620      	mov	r0, r4
1a00ce26:	4629      	mov	r1, r5
1a00ce28:	f006 fe6a 	bl	1a013b00 <__aeabi_dmul>
1a00ce2c:	4602      	mov	r2, r0
1a00ce2e:	460b      	mov	r3, r1
1a00ce30:	4630      	mov	r0, r6
1a00ce32:	4639      	mov	r1, r7
1a00ce34:	f006 fcb2 	bl	1a01379c <__adddf3>
1a00ce38:	f108 0808 	add.w	r8, r8, #8
1a00ce3c:	f1b8 0f18 	cmp.w	r8, #24
1a00ce40:	e8ea 0102 	strd	r0, r1, [sl], #8
1a00ce44:	d1e2      	bne.n	1a00ce0c <inv_combine_compass_data+0x114>
1a00ce46:	b005      	add	sp, #20
1a00ce48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a00ce4c <inv_set_terms>:
1a00ce4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00ce50:	4682      	mov	sl, r0
1a00ce52:	b08e      	sub	sp, #56	; 0x38
1a00ce54:	6808      	ldr	r0, [r1, #0]
1a00ce56:	460c      	mov	r4, r1
1a00ce58:	f006 fdec 	bl	1a013a34 <__aeabi_i2d>
1a00ce5c:	4680      	mov	r8, r0
1a00ce5e:	6860      	ldr	r0, [r4, #4]
1a00ce60:	4689      	mov	r9, r1
1a00ce62:	f006 fde7 	bl	1a013a34 <__aeabi_i2d>
1a00ce66:	4606      	mov	r6, r0
1a00ce68:	68a0      	ldr	r0, [r4, #8]
1a00ce6a:	460f      	mov	r7, r1
1a00ce6c:	f006 fde2 	bl	1a013a34 <__aeabi_i2d>
1a00ce70:	2200      	movs	r2, #0
1a00ce72:	4604      	mov	r4, r0
1a00ce74:	460d      	mov	r5, r1
1a00ce76:	4b93      	ldr	r3, [pc, #588]	; (1a00d0c4 <inv_set_terms+0x278>)
1a00ce78:	e9da 0130 	ldrd	r0, r1, [sl, #192]	; 0xc0
1a00ce7c:	f006 fc8e 	bl	1a01379c <__adddf3>
1a00ce80:	4642      	mov	r2, r8
1a00ce82:	464b      	mov	r3, r9
1a00ce84:	e9ca 0130 	strd	r0, r1, [sl, #192]	; 0xc0
1a00ce88:	e9da 010c 	ldrd	r0, r1, [sl, #48]	; 0x30
1a00ce8c:	f006 fc86 	bl	1a01379c <__adddf3>
1a00ce90:	4632      	mov	r2, r6
1a00ce92:	463b      	mov	r3, r7
1a00ce94:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
1a00ce98:	e9da 010e 	ldrd	r0, r1, [sl, #56]	; 0x38
1a00ce9c:	f006 fc7e 	bl	1a01379c <__adddf3>
1a00cea0:	4622      	mov	r2, r4
1a00cea2:	462b      	mov	r3, r5
1a00cea4:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
1a00cea8:	e9da 0110 	ldrd	r0, r1, [sl, #64]	; 0x40
1a00ceac:	f006 fc76 	bl	1a01379c <__adddf3>
1a00ceb0:	4642      	mov	r2, r8
1a00ceb2:	e9ca 0110 	strd	r0, r1, [sl, #64]	; 0x40
1a00ceb6:	464b      	mov	r3, r9
1a00ceb8:	4640      	mov	r0, r8
1a00ceba:	4649      	mov	r1, r9
1a00cebc:	f006 fe20 	bl	1a013b00 <__aeabi_dmul>
1a00cec0:	4602      	mov	r2, r0
1a00cec2:	460b      	mov	r3, r1
1a00cec4:	e9cd 0104 	strd	r0, r1, [sp, #16]
1a00cec8:	e9da 0100 	ldrd	r0, r1, [sl]
1a00cecc:	f006 fc66 	bl	1a01379c <__adddf3>
1a00ced0:	4632      	mov	r2, r6
1a00ced2:	e9ca 0100 	strd	r0, r1, [sl]
1a00ced6:	463b      	mov	r3, r7
1a00ced8:	4640      	mov	r0, r8
1a00ceda:	4649      	mov	r1, r9
1a00cedc:	f006 fe10 	bl	1a013b00 <__aeabi_dmul>
1a00cee0:	4602      	mov	r2, r0
1a00cee2:	460b      	mov	r3, r1
1a00cee4:	e9cd 0100 	strd	r0, r1, [sp]
1a00cee8:	e9da 0102 	ldrd	r0, r1, [sl, #8]
1a00ceec:	f006 fc56 	bl	1a01379c <__adddf3>
1a00cef0:	4622      	mov	r2, r4
1a00cef2:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a00cef6:	462b      	mov	r3, r5
1a00cef8:	4640      	mov	r0, r8
1a00cefa:	4649      	mov	r1, r9
1a00cefc:	f006 fe00 	bl	1a013b00 <__aeabi_dmul>
1a00cf00:	4602      	mov	r2, r0
1a00cf02:	460b      	mov	r3, r1
1a00cf04:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a00cf08:	e9da 0104 	ldrd	r0, r1, [sl, #16]
1a00cf0c:	f006 fc46 	bl	1a01379c <__adddf3>
1a00cf10:	4632      	mov	r2, r6
1a00cf12:	e9ca 0104 	strd	r0, r1, [sl, #16]
1a00cf16:	463b      	mov	r3, r7
1a00cf18:	4630      	mov	r0, r6
1a00cf1a:	4639      	mov	r1, r7
1a00cf1c:	f006 fdf0 	bl	1a013b00 <__aeabi_dmul>
1a00cf20:	4602      	mov	r2, r0
1a00cf22:	460b      	mov	r3, r1
1a00cf24:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a00cf28:	e9da 0106 	ldrd	r0, r1, [sl, #24]
1a00cf2c:	f006 fc36 	bl	1a01379c <__adddf3>
1a00cf30:	4622      	mov	r2, r4
1a00cf32:	e9ca 0106 	strd	r0, r1, [sl, #24]
1a00cf36:	462b      	mov	r3, r5
1a00cf38:	4630      	mov	r0, r6
1a00cf3a:	4639      	mov	r1, r7
1a00cf3c:	f006 fde0 	bl	1a013b00 <__aeabi_dmul>
1a00cf40:	4602      	mov	r2, r0
1a00cf42:	460b      	mov	r3, r1
1a00cf44:	e9cd 0108 	strd	r0, r1, [sp, #32]
1a00cf48:	e9da 0108 	ldrd	r0, r1, [sl, #32]
1a00cf4c:	f006 fc26 	bl	1a01379c <__adddf3>
1a00cf50:	4622      	mov	r2, r4
1a00cf52:	e9ca 0108 	strd	r0, r1, [sl, #32]
1a00cf56:	462b      	mov	r3, r5
1a00cf58:	4620      	mov	r0, r4
1a00cf5a:	4629      	mov	r1, r5
1a00cf5c:	f006 fdd0 	bl	1a013b00 <__aeabi_dmul>
1a00cf60:	4602      	mov	r2, r0
1a00cf62:	460b      	mov	r3, r1
1a00cf64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00cf68:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
1a00cf6c:	f006 fc16 	bl	1a01379c <__adddf3>
1a00cf70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00cf74:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
1a00cf78:	4640      	mov	r0, r8
1a00cf7a:	4649      	mov	r1, r9
1a00cf7c:	f006 fdc0 	bl	1a013b00 <__aeabi_dmul>
1a00cf80:	4602      	mov	r2, r0
1a00cf82:	460b      	mov	r3, r1
1a00cf84:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00cf88:	e9da 0112 	ldrd	r0, r1, [sl, #72]	; 0x48
1a00cf8c:	f006 fc06 	bl	1a01379c <__adddf3>
1a00cf90:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00cf94:	e9ca 0112 	strd	r0, r1, [sl, #72]	; 0x48
1a00cf98:	4630      	mov	r0, r6
1a00cf9a:	4639      	mov	r1, r7
1a00cf9c:	f006 fdb0 	bl	1a013b00 <__aeabi_dmul>
1a00cfa0:	4602      	mov	r2, r0
1a00cfa2:	460b      	mov	r3, r1
1a00cfa4:	e9da 0114 	ldrd	r0, r1, [sl, #80]	; 0x50
1a00cfa8:	f006 fbf8 	bl	1a01379c <__adddf3>
1a00cfac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00cfb0:	e9ca 0114 	strd	r0, r1, [sl, #80]	; 0x50
1a00cfb4:	4620      	mov	r0, r4
1a00cfb6:	4629      	mov	r1, r5
1a00cfb8:	f006 fda2 	bl	1a013b00 <__aeabi_dmul>
1a00cfbc:	4602      	mov	r2, r0
1a00cfbe:	460b      	mov	r3, r1
1a00cfc0:	e9da 0116 	ldrd	r0, r1, [sl, #88]	; 0x58
1a00cfc4:	f006 fbea 	bl	1a01379c <__adddf3>
1a00cfc8:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00cfcc:	e9ca 0116 	strd	r0, r1, [sl, #88]	; 0x58
1a00cfd0:	4640      	mov	r0, r8
1a00cfd2:	4649      	mov	r1, r9
1a00cfd4:	f006 fd94 	bl	1a013b00 <__aeabi_dmul>
1a00cfd8:	4602      	mov	r2, r0
1a00cfda:	460b      	mov	r3, r1
1a00cfdc:	e9da 0118 	ldrd	r0, r1, [sl, #96]	; 0x60
1a00cfe0:	f006 fbdc 	bl	1a01379c <__adddf3>
1a00cfe4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1a00cfe8:	e9ca 0118 	strd	r0, r1, [sl, #96]	; 0x60
1a00cfec:	4630      	mov	r0, r6
1a00cfee:	4639      	mov	r1, r7
1a00cff0:	f006 fd86 	bl	1a013b00 <__aeabi_dmul>
1a00cff4:	4602      	mov	r2, r0
1a00cff6:	460b      	mov	r3, r1
1a00cff8:	e9cd 0100 	strd	r0, r1, [sp]
1a00cffc:	e9da 011a 	ldrd	r0, r1, [sl, #104]	; 0x68
1a00d000:	f006 fbcc 	bl	1a01379c <__adddf3>
1a00d004:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00d008:	e9ca 011a 	strd	r0, r1, [sl, #104]	; 0x68
1a00d00c:	4620      	mov	r0, r4
1a00d00e:	4629      	mov	r1, r5
1a00d010:	f006 fd76 	bl	1a013b00 <__aeabi_dmul>
1a00d014:	4602      	mov	r2, r0
1a00d016:	460b      	mov	r3, r1
1a00d018:	e9da 011c 	ldrd	r0, r1, [sl, #112]	; 0x70
1a00d01c:	f006 fbbe 	bl	1a01379c <__adddf3>
1a00d020:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00d024:	e9ca 011c 	strd	r0, r1, [sl, #112]	; 0x70
1a00d028:	4640      	mov	r0, r8
1a00d02a:	4649      	mov	r1, r9
1a00d02c:	f006 fd68 	bl	1a013b00 <__aeabi_dmul>
1a00d030:	4602      	mov	r2, r0
1a00d032:	460b      	mov	r3, r1
1a00d034:	e9da 011e 	ldrd	r0, r1, [sl, #120]	; 0x78
1a00d038:	f006 fbb0 	bl	1a01379c <__adddf3>
1a00d03c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00d040:	e9ca 011e 	strd	r0, r1, [sl, #120]	; 0x78
1a00d044:	4630      	mov	r0, r6
1a00d046:	4639      	mov	r1, r7
1a00d048:	f006 fd5a 	bl	1a013b00 <__aeabi_dmul>
1a00d04c:	4602      	mov	r2, r0
1a00d04e:	460b      	mov	r3, r1
1a00d050:	e9da 0120 	ldrd	r0, r1, [sl, #128]	; 0x80
1a00d054:	f006 fba2 	bl	1a01379c <__adddf3>
1a00d058:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00d05c:	e9ca 0120 	strd	r0, r1, [sl, #128]	; 0x80
1a00d060:	4620      	mov	r0, r4
1a00d062:	4629      	mov	r1, r5
1a00d064:	f006 fd4c 	bl	1a013b00 <__aeabi_dmul>
1a00d068:	4602      	mov	r2, r0
1a00d06a:	460b      	mov	r3, r1
1a00d06c:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a00d070:	e9da 0122 	ldrd	r0, r1, [sl, #136]	; 0x88
1a00d074:	f006 fb92 	bl	1a01379c <__adddf3>
1a00d078:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
1a00d07c:	e9ca 0122 	strd	r0, r1, [sl, #136]	; 0x88
1a00d080:	4640      	mov	r0, r8
1a00d082:	4649      	mov	r1, r9
1a00d084:	f006 fd3c 	bl	1a013b00 <__aeabi_dmul>
1a00d088:	4602      	mov	r2, r0
1a00d08a:	460b      	mov	r3, r1
1a00d08c:	e9da 0124 	ldrd	r0, r1, [sl, #144]	; 0x90
1a00d090:	f006 fb84 	bl	1a01379c <__adddf3>
1a00d094:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00d098:	e9ca 0124 	strd	r0, r1, [sl, #144]	; 0x90
1a00d09c:	4630      	mov	r0, r6
1a00d09e:	4639      	mov	r1, r7
1a00d0a0:	f006 fd2e 	bl	1a013b00 <__aeabi_dmul>
1a00d0a4:	4602      	mov	r2, r0
1a00d0a6:	460b      	mov	r3, r1
1a00d0a8:	e9da 0126 	ldrd	r0, r1, [sl, #152]	; 0x98
1a00d0ac:	f006 fb76 	bl	1a01379c <__adddf3>
1a00d0b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00d0b4:	e9ca 0126 	strd	r0, r1, [sl, #152]	; 0x98
1a00d0b8:	4620      	mov	r0, r4
1a00d0ba:	4629      	mov	r1, r5
1a00d0bc:	f006 fd20 	bl	1a013b00 <__aeabi_dmul>
1a00d0c0:	e002      	b.n	1a00d0c8 <inv_set_terms+0x27c>
1a00d0c2:	bf00      	nop
1a00d0c4:	3ff00000 	.word	0x3ff00000
1a00d0c8:	4602      	mov	r2, r0
1a00d0ca:	460b      	mov	r3, r1
1a00d0cc:	e9da 0128 	ldrd	r0, r1, [sl, #160]	; 0xa0
1a00d0d0:	f006 fb64 	bl	1a01379c <__adddf3>
1a00d0d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00d0d8:	e9ca 0128 	strd	r0, r1, [sl, #160]	; 0xa0
1a00d0dc:	4630      	mov	r0, r6
1a00d0de:	4639      	mov	r1, r7
1a00d0e0:	f006 fd0e 	bl	1a013b00 <__aeabi_dmul>
1a00d0e4:	4602      	mov	r2, r0
1a00d0e6:	460b      	mov	r3, r1
1a00d0e8:	4630      	mov	r0, r6
1a00d0ea:	4639      	mov	r1, r7
1a00d0ec:	f006 fd08 	bl	1a013b00 <__aeabi_dmul>
1a00d0f0:	4602      	mov	r2, r0
1a00d0f2:	460b      	mov	r3, r1
1a00d0f4:	e9da 012a 	ldrd	r0, r1, [sl, #168]	; 0xa8
1a00d0f8:	f006 fb50 	bl	1a01379c <__adddf3>
1a00d0fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00d100:	e9ca 012a 	strd	r0, r1, [sl, #168]	; 0xa8
1a00d104:	4620      	mov	r0, r4
1a00d106:	4629      	mov	r1, r5
1a00d108:	f006 fcfa 	bl	1a013b00 <__aeabi_dmul>
1a00d10c:	4602      	mov	r2, r0
1a00d10e:	460b      	mov	r3, r1
1a00d110:	4620      	mov	r0, r4
1a00d112:	4629      	mov	r1, r5
1a00d114:	f006 fcf4 	bl	1a013b00 <__aeabi_dmul>
1a00d118:	4602      	mov	r2, r0
1a00d11a:	460b      	mov	r3, r1
1a00d11c:	e9da 012c 	ldrd	r0, r1, [sl, #176]	; 0xb0
1a00d120:	f006 fb3c 	bl	1a01379c <__adddf3>
1a00d124:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1a00d128:	e9ca 012c 	strd	r0, r1, [sl, #176]	; 0xb0
1a00d12c:	4620      	mov	r0, r4
1a00d12e:	4629      	mov	r1, r5
1a00d130:	f006 fce6 	bl	1a013b00 <__aeabi_dmul>
1a00d134:	4602      	mov	r2, r0
1a00d136:	460b      	mov	r3, r1
1a00d138:	4620      	mov	r0, r4
1a00d13a:	4629      	mov	r1, r5
1a00d13c:	f006 fce0 	bl	1a013b00 <__aeabi_dmul>
1a00d140:	4602      	mov	r2, r0
1a00d142:	460b      	mov	r3, r1
1a00d144:	e9da 012e 	ldrd	r0, r1, [sl, #184]	; 0xb8
1a00d148:	f006 fb28 	bl	1a01379c <__adddf3>
1a00d14c:	e9ca 012e 	strd	r0, r1, [sl, #184]	; 0xb8
1a00d150:	b00e      	add	sp, #56	; 0x38
1a00d152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00d156:	bf00      	nop

1a00d158 <inv_compute_bias>:
1a00d158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00d15c:	e9d0 8930 	ldrd	r8, r9, [r0, #192]	; 0xc0
1a00d160:	e9d0 4500 	ldrd	r4, r5, [r0]
1a00d164:	b0b3      	sub	sp, #204	; 0xcc
1a00d166:	4606      	mov	r6, r0
1a00d168:	e9d0 ab0c 	ldrd	sl, fp, [r0, #48]	; 0x30
1a00d16c:	462b      	mov	r3, r5
1a00d16e:	9231      	str	r2, [sp, #196]	; 0xc4
1a00d170:	460f      	mov	r7, r1
1a00d172:	4622      	mov	r2, r4
1a00d174:	4640      	mov	r0, r8
1a00d176:	4649      	mov	r1, r9
1a00d178:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
1a00d17c:	f006 fcc0 	bl	1a013b00 <__aeabi_dmul>
1a00d180:	4652      	mov	r2, sl
1a00d182:	4604      	mov	r4, r0
1a00d184:	460d      	mov	r5, r1
1a00d186:	465b      	mov	r3, fp
1a00d188:	4650      	mov	r0, sl
1a00d18a:	4659      	mov	r1, fp
1a00d18c:	f006 fcb8 	bl	1a013b00 <__aeabi_dmul>
1a00d190:	4602      	mov	r2, r0
1a00d192:	460b      	mov	r3, r1
1a00d194:	4620      	mov	r0, r4
1a00d196:	4629      	mov	r1, r5
1a00d198:	f006 fafe 	bl	1a013798 <__aeabi_dsub>
1a00d19c:	e9d6 4506 	ldrd	r4, r5, [r6, #24]
1a00d1a0:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
1a00d1a4:	e9d6 450e 	ldrd	r4, r5, [r6, #56]	; 0x38
1a00d1a8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
1a00d1ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a00d1b0:	4640      	mov	r0, r8
1a00d1b2:	4649      	mov	r1, r9
1a00d1b4:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a00d1b8:	f006 fca2 	bl	1a013b00 <__aeabi_dmul>
1a00d1bc:	4604      	mov	r4, r0
1a00d1be:	460d      	mov	r5, r1
1a00d1c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00d1c4:	4602      	mov	r2, r0
1a00d1c6:	460b      	mov	r3, r1
1a00d1c8:	f006 fc9a 	bl	1a013b00 <__aeabi_dmul>
1a00d1cc:	4602      	mov	r2, r0
1a00d1ce:	460b      	mov	r3, r1
1a00d1d0:	4620      	mov	r0, r4
1a00d1d2:	4629      	mov	r1, r5
1a00d1d4:	f006 fae0 	bl	1a013798 <__aeabi_dsub>
1a00d1d8:	e9d6 450a 	ldrd	r4, r5, [r6, #40]	; 0x28
1a00d1dc:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
1a00d1e0:	e9d6 4510 	ldrd	r4, r5, [r6, #64]	; 0x40
1a00d1e4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
1a00d1e8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a00d1ec:	4640      	mov	r0, r8
1a00d1ee:	4649      	mov	r1, r9
1a00d1f0:	e9cd 4504 	strd	r4, r5, [sp, #16]
1a00d1f4:	f006 fc84 	bl	1a013b00 <__aeabi_dmul>
1a00d1f8:	4604      	mov	r4, r0
1a00d1fa:	460d      	mov	r5, r1
1a00d1fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00d200:	4602      	mov	r2, r0
1a00d202:	460b      	mov	r3, r1
1a00d204:	f006 fc7c 	bl	1a013b00 <__aeabi_dmul>
1a00d208:	4602      	mov	r2, r0
1a00d20a:	460b      	mov	r3, r1
1a00d20c:	4620      	mov	r0, r4
1a00d20e:	4629      	mov	r1, r5
1a00d210:	f006 fac2 	bl	1a013798 <__aeabi_dsub>
1a00d214:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
1a00d218:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
1a00d21c:	4640      	mov	r0, r8
1a00d21e:	4649      	mov	r1, r9
1a00d220:	f006 fc6e 	bl	1a013b00 <__aeabi_dmul>
1a00d224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00d228:	4604      	mov	r4, r0
1a00d22a:	460d      	mov	r5, r1
1a00d22c:	4650      	mov	r0, sl
1a00d22e:	4659      	mov	r1, fp
1a00d230:	f006 fc66 	bl	1a013b00 <__aeabi_dmul>
1a00d234:	4602      	mov	r2, r0
1a00d236:	460b      	mov	r3, r1
1a00d238:	4620      	mov	r0, r4
1a00d23a:	4629      	mov	r1, r5
1a00d23c:	f006 faac 	bl	1a013798 <__aeabi_dsub>
1a00d240:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
1a00d244:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a00d248:	4640      	mov	r0, r8
1a00d24a:	4649      	mov	r1, r9
1a00d24c:	f006 fc58 	bl	1a013b00 <__aeabi_dmul>
1a00d250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00d254:	4604      	mov	r4, r0
1a00d256:	460d      	mov	r5, r1
1a00d258:	4650      	mov	r0, sl
1a00d25a:	4659      	mov	r1, fp
1a00d25c:	f006 fc50 	bl	1a013b00 <__aeabi_dmul>
1a00d260:	4602      	mov	r2, r0
1a00d262:	460b      	mov	r3, r1
1a00d264:	4620      	mov	r0, r4
1a00d266:	4629      	mov	r1, r5
1a00d268:	f006 fa96 	bl	1a013798 <__aeabi_dsub>
1a00d26c:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
1a00d270:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00d274:	4640      	mov	r0, r8
1a00d276:	4649      	mov	r1, r9
1a00d278:	f006 fc42 	bl	1a013b00 <__aeabi_dmul>
1a00d27c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00d280:	4604      	mov	r4, r0
1a00d282:	460d      	mov	r5, r1
1a00d284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00d288:	f006 fc3a 	bl	1a013b00 <__aeabi_dmul>
1a00d28c:	4602      	mov	r2, r0
1a00d28e:	460b      	mov	r3, r1
1a00d290:	4620      	mov	r0, r4
1a00d292:	4629      	mov	r1, r5
1a00d294:	f006 fa80 	bl	1a013798 <__aeabi_dsub>
1a00d298:	e9cd 0108 	strd	r0, r1, [sp, #32]
1a00d29c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1a00d2a0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
1a00d2a4:	f006 fc2c 	bl	1a013b00 <__aeabi_dmul>
1a00d2a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
1a00d2ac:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
1a00d2b0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a00d2b4:	f006 fc24 	bl	1a013b00 <__aeabi_dmul>
1a00d2b8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
1a00d2bc:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
1a00d2c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00d2c4:	f006 fc1c 	bl	1a013b00 <__aeabi_dmul>
1a00d2c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1a00d2cc:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
1a00d2d0:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a00d2d4:	f006 fc14 	bl	1a013b00 <__aeabi_dmul>
1a00d2d8:	4604      	mov	r4, r0
1a00d2da:	460d      	mov	r5, r1
1a00d2dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00d2e0:	4602      	mov	r2, r0
1a00d2e2:	460b      	mov	r3, r1
1a00d2e4:	f006 fa5a 	bl	1a01379c <__adddf3>
1a00d2e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
1a00d2ec:	f006 fc08 	bl	1a013b00 <__aeabi_dmul>
1a00d2f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00d2f4:	f006 fc04 	bl	1a013b00 <__aeabi_dmul>
1a00d2f8:	4602      	mov	r2, r0
1a00d2fa:	460b      	mov	r3, r1
1a00d2fc:	4620      	mov	r0, r4
1a00d2fe:	4629      	mov	r1, r5
1a00d300:	f006 fa4a 	bl	1a013798 <__aeabi_dsub>
1a00d304:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
1a00d308:	4604      	mov	r4, r0
1a00d30a:	460d      	mov	r5, r1
1a00d30c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a00d310:	f006 fbf6 	bl	1a013b00 <__aeabi_dmul>
1a00d314:	4602      	mov	r2, r0
1a00d316:	460b      	mov	r3, r1
1a00d318:	4620      	mov	r0, r4
1a00d31a:	4629      	mov	r1, r5
1a00d31c:	f006 fa3e 	bl	1a01379c <__adddf3>
1a00d320:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00d324:	4604      	mov	r4, r0
1a00d326:	460d      	mov	r5, r1
1a00d328:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00d32c:	f006 fbe8 	bl	1a013b00 <__aeabi_dmul>
1a00d330:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00d334:	f006 fbe4 	bl	1a013b00 <__aeabi_dmul>
1a00d338:	4602      	mov	r2, r0
1a00d33a:	460b      	mov	r3, r1
1a00d33c:	4620      	mov	r0, r4
1a00d33e:	4629      	mov	r1, r5
1a00d340:	f006 fa2c 	bl	1a01379c <__adddf3>
1a00d344:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
1a00d348:	4604      	mov	r4, r0
1a00d34a:	460d      	mov	r5, r1
1a00d34c:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
1a00d350:	f006 fbd6 	bl	1a013b00 <__aeabi_dmul>
1a00d354:	4602      	mov	r2, r0
1a00d356:	460b      	mov	r3, r1
1a00d358:	4620      	mov	r0, r4
1a00d35a:	4629      	mov	r1, r5
1a00d35c:	f006 fa1c 	bl	1a013798 <__aeabi_dsub>
1a00d360:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
1a00d364:	e9d6 4512 	ldrd	r4, r5, [r6, #72]	; 0x48
1a00d368:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
1a00d36c:	e9d6 4514 	ldrd	r4, r5, [r6, #80]	; 0x50
1a00d370:	e9cd 4500 	strd	r4, r5, [sp]
1a00d374:	e9d6 4516 	ldrd	r4, r5, [r6, #88]	; 0x58
1a00d378:	e9cd 4522 	strd	r4, r5, [sp, #136]	; 0x88
1a00d37c:	e9d6 4518 	ldrd	r4, r5, [r6, #96]	; 0x60
1a00d380:	e9cd 4524 	strd	r4, r5, [sp, #144]	; 0x90
1a00d384:	e9d6 451a 	ldrd	r4, r5, [r6, #104]	; 0x68
1a00d388:	e9cd 4526 	strd	r4, r5, [sp, #152]	; 0x98
1a00d38c:	e9d6 451c 	ldrd	r4, r5, [r6, #112]	; 0x70
1a00d390:	e9cd 4528 	strd	r4, r5, [sp, #160]	; 0xa0
1a00d394:	e9d6 451e 	ldrd	r4, r5, [r6, #120]	; 0x78
1a00d398:	e9cd 452a 	strd	r4, r5, [sp, #168]	; 0xa8
1a00d39c:	e9d6 4520 	ldrd	r4, r5, [r6, #128]	; 0x80
1a00d3a0:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
1a00d3a4:	e9d6 4522 	ldrd	r4, r5, [r6, #136]	; 0x88
1a00d3a8:	2200      	movs	r2, #0
1a00d3aa:	2300      	movs	r3, #0
1a00d3ac:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
1a00d3b0:	f006 fe0e 	bl	1a013fd0 <__aeabi_dcmpeq>
1a00d3b4:	b120      	cbz	r0, 1a00d3c0 <inv_compute_bias+0x268>
1a00d3b6:	2300      	movs	r3, #0
1a00d3b8:	4618      	mov	r0, r3
1a00d3ba:	b033      	add	sp, #204	; 0xcc
1a00d3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00d3c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00d3c4:	4640      	mov	r0, r8
1a00d3c6:	4649      	mov	r1, r9
1a00d3c8:	f006 fb9a 	bl	1a013b00 <__aeabi_dmul>
1a00d3cc:	4652      	mov	r2, sl
1a00d3ce:	4604      	mov	r4, r0
1a00d3d0:	460d      	mov	r5, r1
1a00d3d2:	465b      	mov	r3, fp
1a00d3d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00d3d8:	f006 fb92 	bl	1a013b00 <__aeabi_dmul>
1a00d3dc:	4602      	mov	r2, r0
1a00d3de:	460b      	mov	r3, r1
1a00d3e0:	4620      	mov	r0, r4
1a00d3e2:	4629      	mov	r1, r5
1a00d3e4:	f006 f9d8 	bl	1a013798 <__aeabi_dsub>
1a00d3e8:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00d3ec:	4604      	mov	r4, r0
1a00d3ee:	460d      	mov	r5, r1
1a00d3f0:	4640      	mov	r0, r8
1a00d3f2:	4649      	mov	r1, r9
1a00d3f4:	f006 fb84 	bl	1a013b00 <__aeabi_dmul>
1a00d3f8:	4602      	mov	r2, r0
1a00d3fa:	460b      	mov	r3, r1
1a00d3fc:	4620      	mov	r0, r4
1a00d3fe:	4629      	mov	r1, r5
1a00d400:	f006 f9cc 	bl	1a01379c <__adddf3>
1a00d404:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
1a00d408:	4604      	mov	r4, r0
1a00d40a:	460d      	mov	r5, r1
1a00d40c:	4650      	mov	r0, sl
1a00d40e:	4659      	mov	r1, fp
1a00d410:	f006 fb76 	bl	1a013b00 <__aeabi_dmul>
1a00d414:	4602      	mov	r2, r0
1a00d416:	460b      	mov	r3, r1
1a00d418:	4620      	mov	r0, r4
1a00d41a:	4629      	mov	r1, r5
1a00d41c:	f006 f9bc 	bl	1a013798 <__aeabi_dsub>
1a00d420:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
1a00d424:	4604      	mov	r4, r0
1a00d426:	460d      	mov	r5, r1
1a00d428:	4640      	mov	r0, r8
1a00d42a:	4649      	mov	r1, r9
1a00d42c:	f006 fb68 	bl	1a013b00 <__aeabi_dmul>
1a00d430:	4602      	mov	r2, r0
1a00d432:	460b      	mov	r3, r1
1a00d434:	4620      	mov	r0, r4
1a00d436:	4629      	mov	r1, r5
1a00d438:	f006 f9b0 	bl	1a01379c <__adddf3>
1a00d43c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
1a00d440:	4604      	mov	r4, r0
1a00d442:	460d      	mov	r5, r1
1a00d444:	4650      	mov	r0, sl
1a00d446:	4659      	mov	r1, fp
1a00d448:	f006 fb5a 	bl	1a013b00 <__aeabi_dmul>
1a00d44c:	4602      	mov	r2, r0
1a00d44e:	460b      	mov	r3, r1
1a00d450:	4620      	mov	r0, r4
1a00d452:	4629      	mov	r1, r5
1a00d454:	f006 f9a0 	bl	1a013798 <__aeabi_dsub>
1a00d458:	2200      	movs	r2, #0
1a00d45a:	4b96      	ldr	r3, [pc, #600]	; (1a00d6b4 <inv_compute_bias+0x55c>)
1a00d45c:	f006 fb50 	bl	1a013b00 <__aeabi_dmul>
1a00d460:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
1a00d464:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00d468:	4640      	mov	r0, r8
1a00d46a:	4649      	mov	r1, r9
1a00d46c:	f006 fb48 	bl	1a013b00 <__aeabi_dmul>
1a00d470:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00d474:	4604      	mov	r4, r0
1a00d476:	460d      	mov	r5, r1
1a00d478:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00d47c:	f006 fb40 	bl	1a013b00 <__aeabi_dmul>
1a00d480:	4602      	mov	r2, r0
1a00d482:	460b      	mov	r3, r1
1a00d484:	4620      	mov	r0, r4
1a00d486:	4629      	mov	r1, r5
1a00d488:	f006 f986 	bl	1a013798 <__aeabi_dsub>
1a00d48c:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
1a00d490:	4604      	mov	r4, r0
1a00d492:	460d      	mov	r5, r1
1a00d494:	4640      	mov	r0, r8
1a00d496:	4649      	mov	r1, r9
1a00d498:	f006 fb32 	bl	1a013b00 <__aeabi_dmul>
1a00d49c:	4602      	mov	r2, r0
1a00d49e:	460b      	mov	r3, r1
1a00d4a0:	4620      	mov	r0, r4
1a00d4a2:	4629      	mov	r1, r5
1a00d4a4:	f006 f97a 	bl	1a01379c <__adddf3>
1a00d4a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00d4ac:	4604      	mov	r4, r0
1a00d4ae:	460d      	mov	r5, r1
1a00d4b0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
1a00d4b4:	f006 fb24 	bl	1a013b00 <__aeabi_dmul>
1a00d4b8:	4602      	mov	r2, r0
1a00d4ba:	460b      	mov	r3, r1
1a00d4bc:	4620      	mov	r0, r4
1a00d4be:	4629      	mov	r1, r5
1a00d4c0:	f006 f96a 	bl	1a013798 <__aeabi_dsub>
1a00d4c4:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
1a00d4c8:	4604      	mov	r4, r0
1a00d4ca:	460d      	mov	r5, r1
1a00d4cc:	4640      	mov	r0, r8
1a00d4ce:	4649      	mov	r1, r9
1a00d4d0:	f006 fb16 	bl	1a013b00 <__aeabi_dmul>
1a00d4d4:	4602      	mov	r2, r0
1a00d4d6:	460b      	mov	r3, r1
1a00d4d8:	4620      	mov	r0, r4
1a00d4da:	4629      	mov	r1, r5
1a00d4dc:	f006 f95e 	bl	1a01379c <__adddf3>
1a00d4e0:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
1a00d4e4:	4604      	mov	r4, r0
1a00d4e6:	460d      	mov	r5, r1
1a00d4e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00d4ec:	f006 fb08 	bl	1a013b00 <__aeabi_dmul>
1a00d4f0:	4602      	mov	r2, r0
1a00d4f2:	460b      	mov	r3, r1
1a00d4f4:	4620      	mov	r0, r4
1a00d4f6:	4629      	mov	r1, r5
1a00d4f8:	f006 f94e 	bl	1a013798 <__aeabi_dsub>
1a00d4fc:	2200      	movs	r2, #0
1a00d4fe:	4b6d      	ldr	r3, [pc, #436]	; (1a00d6b4 <inv_compute_bias+0x55c>)
1a00d500:	f006 fafe 	bl	1a013b00 <__aeabi_dmul>
1a00d504:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
1a00d508:	4682      	mov	sl, r0
1a00d50a:	468b      	mov	fp, r1
1a00d50c:	4640      	mov	r0, r8
1a00d50e:	4649      	mov	r1, r9
1a00d510:	f006 faf6 	bl	1a013b00 <__aeabi_dmul>
1a00d514:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00d518:	4604      	mov	r4, r0
1a00d51a:	460d      	mov	r5, r1
1a00d51c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00d520:	f006 faee 	bl	1a013b00 <__aeabi_dmul>
1a00d524:	4602      	mov	r2, r0
1a00d526:	460b      	mov	r3, r1
1a00d528:	4620      	mov	r0, r4
1a00d52a:	4629      	mov	r1, r5
1a00d52c:	f006 f934 	bl	1a013798 <__aeabi_dsub>
1a00d530:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
1a00d534:	4604      	mov	r4, r0
1a00d536:	460d      	mov	r5, r1
1a00d538:	4640      	mov	r0, r8
1a00d53a:	4649      	mov	r1, r9
1a00d53c:	f006 fae0 	bl	1a013b00 <__aeabi_dmul>
1a00d540:	4602      	mov	r2, r0
1a00d542:	460b      	mov	r3, r1
1a00d544:	4620      	mov	r0, r4
1a00d546:	4629      	mov	r1, r5
1a00d548:	f006 f928 	bl	1a01379c <__adddf3>
1a00d54c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00d550:	4604      	mov	r4, r0
1a00d552:	460d      	mov	r5, r1
1a00d554:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
1a00d558:	f006 fad2 	bl	1a013b00 <__aeabi_dmul>
1a00d55c:	4602      	mov	r2, r0
1a00d55e:	460b      	mov	r3, r1
1a00d560:	4620      	mov	r0, r4
1a00d562:	4629      	mov	r1, r5
1a00d564:	f006 f918 	bl	1a013798 <__aeabi_dsub>
1a00d568:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
1a00d56c:	4604      	mov	r4, r0
1a00d56e:	460d      	mov	r5, r1
1a00d570:	4640      	mov	r0, r8
1a00d572:	4649      	mov	r1, r9
1a00d574:	f006 fac4 	bl	1a013b00 <__aeabi_dmul>
1a00d578:	4602      	mov	r2, r0
1a00d57a:	460b      	mov	r3, r1
1a00d57c:	4620      	mov	r0, r4
1a00d57e:	4629      	mov	r1, r5
1a00d580:	f006 f90c 	bl	1a01379c <__adddf3>
1a00d584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00d588:	4604      	mov	r4, r0
1a00d58a:	460d      	mov	r5, r1
1a00d58c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
1a00d590:	f006 fab6 	bl	1a013b00 <__aeabi_dmul>
1a00d594:	4602      	mov	r2, r0
1a00d596:	460b      	mov	r3, r1
1a00d598:	4620      	mov	r0, r4
1a00d59a:	4629      	mov	r1, r5
1a00d59c:	f006 f8fc 	bl	1a013798 <__aeabi_dsub>
1a00d5a0:	2200      	movs	r2, #0
1a00d5a2:	4b44      	ldr	r3, [pc, #272]	; (1a00d6b4 <inv_compute_bias+0x55c>)
1a00d5a4:	f006 faac 	bl	1a013b00 <__aeabi_dmul>
1a00d5a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
1a00d5ac:	4680      	mov	r8, r0
1a00d5ae:	4689      	mov	r9, r1
1a00d5b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00d5b4:	f006 faa4 	bl	1a013b00 <__aeabi_dmul>
1a00d5b8:	4642      	mov	r2, r8
1a00d5ba:	464b      	mov	r3, r9
1a00d5bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
1a00d5c0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a00d5c4:	f006 fa9c 	bl	1a013b00 <__aeabi_dmul>
1a00d5c8:	4652      	mov	r2, sl
1a00d5ca:	4604      	mov	r4, r0
1a00d5cc:	460d      	mov	r5, r1
1a00d5ce:	465b      	mov	r3, fp
1a00d5d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00d5d4:	f006 fa94 	bl	1a013b00 <__aeabi_dmul>
1a00d5d8:	4602      	mov	r2, r0
1a00d5da:	460b      	mov	r3, r1
1a00d5dc:	4620      	mov	r0, r4
1a00d5de:	4629      	mov	r1, r5
1a00d5e0:	f006 f8da 	bl	1a013798 <__aeabi_dsub>
1a00d5e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
1a00d5e8:	f006 fa8a 	bl	1a013b00 <__aeabi_dmul>
1a00d5ec:	4604      	mov	r4, r0
1a00d5ee:	460d      	mov	r5, r1
1a00d5f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00d5f4:	4602      	mov	r2, r0
1a00d5f6:	460b      	mov	r3, r1
1a00d5f8:	f006 fa82 	bl	1a013b00 <__aeabi_dmul>
1a00d5fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00d600:	f006 fa7e 	bl	1a013b00 <__aeabi_dmul>
1a00d604:	4602      	mov	r2, r0
1a00d606:	460b      	mov	r3, r1
1a00d608:	4620      	mov	r0, r4
1a00d60a:	4629      	mov	r1, r5
1a00d60c:	f006 f8c6 	bl	1a01379c <__adddf3>
1a00d610:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
1a00d614:	4604      	mov	r4, r0
1a00d616:	460d      	mov	r5, r1
1a00d618:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a00d61c:	f006 fa70 	bl	1a013b00 <__aeabi_dmul>
1a00d620:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00d624:	f006 fa6c 	bl	1a013b00 <__aeabi_dmul>
1a00d628:	4602      	mov	r2, r0
1a00d62a:	460b      	mov	r3, r1
1a00d62c:	4620      	mov	r0, r4
1a00d62e:	4629      	mov	r1, r5
1a00d630:	f006 f8b2 	bl	1a013798 <__aeabi_dsub>
1a00d634:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
1a00d638:	4604      	mov	r4, r0
1a00d63a:	460d      	mov	r5, r1
1a00d63c:	4650      	mov	r0, sl
1a00d63e:	4659      	mov	r1, fp
1a00d640:	f006 fa5e 	bl	1a013b00 <__aeabi_dmul>
1a00d644:	4602      	mov	r2, r0
1a00d646:	460b      	mov	r3, r1
1a00d648:	4620      	mov	r0, r4
1a00d64a:	4629      	mov	r1, r5
1a00d64c:	f006 f8a6 	bl	1a01379c <__adddf3>
1a00d650:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00d654:	4604      	mov	r4, r0
1a00d656:	460d      	mov	r5, r1
1a00d658:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00d65c:	f006 fa50 	bl	1a013b00 <__aeabi_dmul>
1a00d660:	4642      	mov	r2, r8
1a00d662:	464b      	mov	r3, r9
1a00d664:	f006 fa4c 	bl	1a013b00 <__aeabi_dmul>
1a00d668:	4602      	mov	r2, r0
1a00d66a:	460b      	mov	r3, r1
1a00d66c:	4620      	mov	r0, r4
1a00d66e:	4629      	mov	r1, r5
1a00d670:	f006 f892 	bl	1a013798 <__aeabi_dsub>
1a00d674:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
1a00d678:	f006 fb6c 	bl	1a013d54 <__aeabi_ddiv>
1a00d67c:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a00d680:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
1a00d684:	4642      	mov	r2, r8
1a00d686:	464b      	mov	r3, r9
1a00d688:	e9c7 4500 	strd	r4, r5, [r7]
1a00d68c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00d690:	f006 fa36 	bl	1a013b00 <__aeabi_dmul>
1a00d694:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00d698:	4604      	mov	r4, r0
1a00d69a:	460d      	mov	r5, r1
1a00d69c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00d6a0:	f006 fa2e 	bl	1a013b00 <__aeabi_dmul>
1a00d6a4:	4602      	mov	r2, r0
1a00d6a6:	460b      	mov	r3, r1
1a00d6a8:	4620      	mov	r0, r4
1a00d6aa:	4629      	mov	r1, r5
1a00d6ac:	f006 f874 	bl	1a013798 <__aeabi_dsub>
1a00d6b0:	e002      	b.n	1a00d6b8 <inv_compute_bias+0x560>
1a00d6b2:	bf00      	nop
1a00d6b4:	3fe00000 	.word	0x3fe00000
1a00d6b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00d6bc:	f006 fa20 	bl	1a013b00 <__aeabi_dmul>
1a00d6c0:	4604      	mov	r4, r0
1a00d6c2:	460d      	mov	r5, r1
1a00d6c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00d6c8:	4602      	mov	r2, r0
1a00d6ca:	460b      	mov	r3, r1
1a00d6cc:	f006 fa18 	bl	1a013b00 <__aeabi_dmul>
1a00d6d0:	4652      	mov	r2, sl
1a00d6d2:	465b      	mov	r3, fp
1a00d6d4:	f006 fa14 	bl	1a013b00 <__aeabi_dmul>
1a00d6d8:	4602      	mov	r2, r0
1a00d6da:	460b      	mov	r3, r1
1a00d6dc:	4620      	mov	r0, r4
1a00d6de:	4629      	mov	r1, r5
1a00d6e0:	f006 f85c 	bl	1a01379c <__adddf3>
1a00d6e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
1a00d6e8:	4604      	mov	r4, r0
1a00d6ea:	460d      	mov	r5, r1
1a00d6ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00d6f0:	f006 fa06 	bl	1a013b00 <__aeabi_dmul>
1a00d6f4:	4652      	mov	r2, sl
1a00d6f6:	465b      	mov	r3, fp
1a00d6f8:	f006 fa02 	bl	1a013b00 <__aeabi_dmul>
1a00d6fc:	4602      	mov	r2, r0
1a00d6fe:	460b      	mov	r3, r1
1a00d700:	4620      	mov	r0, r4
1a00d702:	4629      	mov	r1, r5
1a00d704:	f006 f848 	bl	1a013798 <__aeabi_dsub>
1a00d708:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
1a00d70c:	4604      	mov	r4, r0
1a00d70e:	460d      	mov	r5, r1
1a00d710:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00d714:	f006 f9f4 	bl	1a013b00 <__aeabi_dmul>
1a00d718:	4602      	mov	r2, r0
1a00d71a:	460b      	mov	r3, r1
1a00d71c:	4620      	mov	r0, r4
1a00d71e:	4629      	mov	r1, r5
1a00d720:	f006 f83c 	bl	1a01379c <__adddf3>
1a00d724:	4642      	mov	r2, r8
1a00d726:	4604      	mov	r4, r0
1a00d728:	460d      	mov	r5, r1
1a00d72a:	464b      	mov	r3, r9
1a00d72c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00d730:	f006 f9e6 	bl	1a013b00 <__aeabi_dmul>
1a00d734:	4602      	mov	r2, r0
1a00d736:	460b      	mov	r3, r1
1a00d738:	4620      	mov	r0, r4
1a00d73a:	4629      	mov	r1, r5
1a00d73c:	f006 f82c 	bl	1a013798 <__aeabi_dsub>
1a00d740:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
1a00d744:	f006 fb06 	bl	1a013d54 <__aeabi_ddiv>
1a00d748:	4652      	mov	r2, sl
1a00d74a:	e9cd 0104 	strd	r0, r1, [sp, #16]
1a00d74e:	465b      	mov	r3, fp
1a00d750:	e9c7 0102 	strd	r0, r1, [r7, #8]
1a00d754:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00d758:	f006 f9d2 	bl	1a013b00 <__aeabi_dmul>
1a00d75c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00d760:	4604      	mov	r4, r0
1a00d762:	460d      	mov	r5, r1
1a00d764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00d768:	f006 f9ca 	bl	1a013b00 <__aeabi_dmul>
1a00d76c:	4602      	mov	r2, r0
1a00d76e:	460b      	mov	r3, r1
1a00d770:	4620      	mov	r0, r4
1a00d772:	4629      	mov	r1, r5
1a00d774:	f006 f810 	bl	1a013798 <__aeabi_dsub>
1a00d778:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00d77c:	f006 f9c0 	bl	1a013b00 <__aeabi_dmul>
1a00d780:	4604      	mov	r4, r0
1a00d782:	460d      	mov	r5, r1
1a00d784:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00d788:	4602      	mov	r2, r0
1a00d78a:	460b      	mov	r3, r1
1a00d78c:	f006 f9b8 	bl	1a013b00 <__aeabi_dmul>
1a00d790:	4642      	mov	r2, r8
1a00d792:	464b      	mov	r3, r9
1a00d794:	f006 f9b4 	bl	1a013b00 <__aeabi_dmul>
1a00d798:	4602      	mov	r2, r0
1a00d79a:	460b      	mov	r3, r1
1a00d79c:	4620      	mov	r0, r4
1a00d79e:	4629      	mov	r1, r5
1a00d7a0:	f005 fffc 	bl	1a01379c <__adddf3>
1a00d7a4:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
1a00d7a8:	4604      	mov	r4, r0
1a00d7aa:	460d      	mov	r5, r1
1a00d7ac:	4640      	mov	r0, r8
1a00d7ae:	4649      	mov	r1, r9
1a00d7b0:	f006 f9a6 	bl	1a013b00 <__aeabi_dmul>
1a00d7b4:	4602      	mov	r2, r0
1a00d7b6:	460b      	mov	r3, r1
1a00d7b8:	4620      	mov	r0, r4
1a00d7ba:	4629      	mov	r1, r5
1a00d7bc:	f005 ffec 	bl	1a013798 <__aeabi_dsub>
1a00d7c0:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
1a00d7c4:	4604      	mov	r4, r0
1a00d7c6:	460d      	mov	r5, r1
1a00d7c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00d7cc:	f006 f998 	bl	1a013b00 <__aeabi_dmul>
1a00d7d0:	4602      	mov	r2, r0
1a00d7d2:	460b      	mov	r3, r1
1a00d7d4:	4620      	mov	r0, r4
1a00d7d6:	4629      	mov	r1, r5
1a00d7d8:	f005 ffe0 	bl	1a01379c <__adddf3>
1a00d7dc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a00d7e0:	4604      	mov	r4, r0
1a00d7e2:	460d      	mov	r5, r1
1a00d7e4:	4650      	mov	r0, sl
1a00d7e6:	4659      	mov	r1, fp
1a00d7e8:	f006 f98a 	bl	1a013b00 <__aeabi_dmul>
1a00d7ec:	4602      	mov	r2, r0
1a00d7ee:	460b      	mov	r3, r1
1a00d7f0:	4620      	mov	r0, r4
1a00d7f2:	4629      	mov	r1, r5
1a00d7f4:	f005 ffd0 	bl	1a013798 <__aeabi_dsub>
1a00d7f8:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
1a00d7fc:	f006 faaa 	bl	1a013d54 <__aeabi_ddiv>
1a00d800:	460d      	mov	r5, r1
1a00d802:	4604      	mov	r4, r0
1a00d804:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00d808:	e9c7 4504 	strd	r4, r5, [r7, #16]
1a00d80c:	4602      	mov	r2, r0
1a00d80e:	460b      	mov	r3, r1
1a00d810:	f006 f976 	bl	1a013b00 <__aeabi_dmul>
1a00d814:	4680      	mov	r8, r0
1a00d816:	4689      	mov	r9, r1
1a00d818:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00d81c:	4602      	mov	r2, r0
1a00d81e:	460b      	mov	r3, r1
1a00d820:	f006 f96e 	bl	1a013b00 <__aeabi_dmul>
1a00d824:	4602      	mov	r2, r0
1a00d826:	460b      	mov	r3, r1
1a00d828:	4640      	mov	r0, r8
1a00d82a:	4649      	mov	r1, r9
1a00d82c:	f005 ffb6 	bl	1a01379c <__adddf3>
1a00d830:	462b      	mov	r3, r5
1a00d832:	4680      	mov	r8, r0
1a00d834:	4689      	mov	r9, r1
1a00d836:	4622      	mov	r2, r4
1a00d838:	4629      	mov	r1, r5
1a00d83a:	4620      	mov	r0, r4
1a00d83c:	f006 f960 	bl	1a013b00 <__aeabi_dmul>
1a00d840:	4602      	mov	r2, r0
1a00d842:	460b      	mov	r3, r1
1a00d844:	4640      	mov	r0, r8
1a00d846:	4649      	mov	r1, r9
1a00d848:	f005 ffa8 	bl	1a01379c <__adddf3>
1a00d84c:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
1a00d850:	4682      	mov	sl, r0
1a00d852:	468b      	mov	fp, r1
1a00d854:	e9d6 0100 	ldrd	r0, r1, [r6]
1a00d858:	f005 ffa0 	bl	1a01379c <__adddf3>
1a00d85c:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	; 0x28
1a00d860:	f005 ff9c 	bl	1a01379c <__adddf3>
1a00d864:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a00d868:	e9d6 230c 	ldrd	r2, r3, [r6, #48]	; 0x30
1a00d86c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00d870:	f006 f946 	bl	1a013b00 <__aeabi_dmul>
1a00d874:	e9d6 230e 	ldrd	r2, r3, [r6, #56]	; 0x38
1a00d878:	4680      	mov	r8, r0
1a00d87a:	4689      	mov	r9, r1
1a00d87c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00d880:	f006 f93e 	bl	1a013b00 <__aeabi_dmul>
1a00d884:	4602      	mov	r2, r0
1a00d886:	460b      	mov	r3, r1
1a00d888:	4640      	mov	r0, r8
1a00d88a:	4649      	mov	r1, r9
1a00d88c:	f005 ff86 	bl	1a01379c <__adddf3>
1a00d890:	e9d6 2310 	ldrd	r2, r3, [r6, #64]	; 0x40
1a00d894:	4680      	mov	r8, r0
1a00d896:	4689      	mov	r9, r1
1a00d898:	4620      	mov	r0, r4
1a00d89a:	4629      	mov	r1, r5
1a00d89c:	f006 f930 	bl	1a013b00 <__aeabi_dmul>
1a00d8a0:	4602      	mov	r2, r0
1a00d8a2:	460b      	mov	r3, r1
1a00d8a4:	4640      	mov	r0, r8
1a00d8a6:	4649      	mov	r1, r9
1a00d8a8:	f005 ff78 	bl	1a01379c <__adddf3>
1a00d8ac:	4602      	mov	r2, r0
1a00d8ae:	460b      	mov	r3, r1
1a00d8b0:	f005 ff74 	bl	1a01379c <__adddf3>
1a00d8b4:	4602      	mov	r2, r0
1a00d8b6:	460b      	mov	r3, r1
1a00d8b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00d8bc:	f005 ff6c 	bl	1a013798 <__aeabi_dsub>
1a00d8c0:	e9d6 2330 	ldrd	r2, r3, [r6, #192]	; 0xc0
1a00d8c4:	f006 fa46 	bl	1a013d54 <__aeabi_ddiv>
1a00d8c8:	460b      	mov	r3, r1
1a00d8ca:	4602      	mov	r2, r0
1a00d8cc:	4659      	mov	r1, fp
1a00d8ce:	4650      	mov	r0, sl
1a00d8d0:	f005 ff64 	bl	1a01379c <__adddf3>
1a00d8d4:	f007 ff52 	bl	1a01577c <sqrt>
1a00d8d8:	9d31      	ldr	r5, [sp, #196]	; 0xc4
1a00d8da:	2301      	movs	r3, #1
1a00d8dc:	e9c5 0100 	strd	r0, r1, [r5]
1a00d8e0:	e56a      	b.n	1a00d3b8 <inv_compute_bias+0x260>
1a00d8e2:	bf00      	nop

1a00d8e4 <inv_center_sum>:
1a00d8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00d8e8:	e9d1 8900 	ldrd	r8, r9, [r1]
1a00d8ec:	e9d0 4530 	ldrd	r4, r5, [r0, #192]	; 0xc0
1a00d8f0:	b099      	sub	sp, #100	; 0x64
1a00d8f2:	4606      	mov	r6, r0
1a00d8f4:	460f      	mov	r7, r1
1a00d8f6:	4642      	mov	r2, r8
1a00d8f8:	464b      	mov	r3, r9
1a00d8fa:	4620      	mov	r0, r4
1a00d8fc:	4629      	mov	r1, r5
1a00d8fe:	e9cd 4504 	strd	r4, r5, [sp, #16]
1a00d902:	f006 f8fd 	bl	1a013b00 <__aeabi_dmul>
1a00d906:	e9d6 4500 	ldrd	r4, r5, [r6]
1a00d90a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00d90e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00d912:	4640      	mov	r0, r8
1a00d914:	4649      	mov	r1, r9
1a00d916:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
1a00d91a:	f006 f8f1 	bl	1a013b00 <__aeabi_dmul>
1a00d91e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
1a00d922:	f006 f8ed 	bl	1a013b00 <__aeabi_dmul>
1a00d926:	e9d6 ab0c 	ldrd	sl, fp, [r6, #48]	; 0x30
1a00d92a:	4604      	mov	r4, r0
1a00d92c:	460d      	mov	r5, r1
1a00d92e:	4642      	mov	r2, r8
1a00d930:	464b      	mov	r3, r9
1a00d932:	4640      	mov	r0, r8
1a00d934:	4649      	mov	r1, r9
1a00d936:	f006 f8e3 	bl	1a013b00 <__aeabi_dmul>
1a00d93a:	4652      	mov	r2, sl
1a00d93c:	465b      	mov	r3, fp
1a00d93e:	f006 f8df 	bl	1a013b00 <__aeabi_dmul>
1a00d942:	4602      	mov	r2, r0
1a00d944:	460b      	mov	r3, r1
1a00d946:	4650      	mov	r0, sl
1a00d948:	4659      	mov	r1, fp
1a00d94a:	f006 f8d9 	bl	1a013b00 <__aeabi_dmul>
1a00d94e:	4602      	mov	r2, r0
1a00d950:	460b      	mov	r3, r1
1a00d952:	4620      	mov	r0, r4
1a00d954:	4629      	mov	r1, r5
1a00d956:	f005 ff1f 	bl	1a013798 <__aeabi_dsub>
1a00d95a:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	; 0x48
1a00d95e:	4604      	mov	r4, r0
1a00d960:	460d      	mov	r5, r1
1a00d962:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00d966:	f006 f8cb 	bl	1a013b00 <__aeabi_dmul>
1a00d96a:	4602      	mov	r2, r0
1a00d96c:	460b      	mov	r3, r1
1a00d96e:	4620      	mov	r0, r4
1a00d970:	4629      	mov	r1, r5
1a00d972:	f005 ff11 	bl	1a013798 <__aeabi_dsub>
1a00d976:	e9cd 0100 	strd	r0, r1, [sp]
1a00d97a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00d97e:	4602      	mov	r2, r0
1a00d980:	460b      	mov	r3, r1
1a00d982:	f005 ff0b 	bl	1a01379c <__adddf3>
1a00d986:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a00d98a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
1a00d98e:	4640      	mov	r0, r8
1a00d990:	4649      	mov	r1, r9
1a00d992:	f006 f8b5 	bl	1a013b00 <__aeabi_dmul>
1a00d996:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
1a00d99a:	4622      	mov	r2, r4
1a00d99c:	462b      	mov	r3, r5
1a00d99e:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a00d9a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a00d9a6:	f006 f8ab 	bl	1a013b00 <__aeabi_dmul>
1a00d9aa:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
1a00d9ae:	f006 f8a7 	bl	1a013b00 <__aeabi_dmul>
1a00d9b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
1a00d9b6:	4604      	mov	r4, r0
1a00d9b8:	460d      	mov	r5, r1
1a00d9ba:	4640      	mov	r0, r8
1a00d9bc:	4649      	mov	r1, r9
1a00d9be:	f006 f89f 	bl	1a013b00 <__aeabi_dmul>
1a00d9c2:	4602      	mov	r2, r0
1a00d9c4:	460b      	mov	r3, r1
1a00d9c6:	4650      	mov	r0, sl
1a00d9c8:	4659      	mov	r1, fp
1a00d9ca:	f006 f899 	bl	1a013b00 <__aeabi_dmul>
1a00d9ce:	4602      	mov	r2, r0
1a00d9d0:	460b      	mov	r3, r1
1a00d9d2:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00d9d6:	f005 fee1 	bl	1a01379c <__adddf3>
1a00d9da:	4602      	mov	r2, r0
1a00d9dc:	460b      	mov	r3, r1
1a00d9de:	4620      	mov	r0, r4
1a00d9e0:	4629      	mov	r1, r5
1a00d9e2:	f005 fedb 	bl	1a01379c <__adddf3>
1a00d9e6:	4642      	mov	r2, r8
1a00d9e8:	e9cd 0100 	strd	r0, r1, [sp]
1a00d9ec:	464b      	mov	r3, r9
1a00d9ee:	4640      	mov	r0, r8
1a00d9f0:	4649      	mov	r1, r9
1a00d9f2:	f005 fed3 	bl	1a01379c <__adddf3>
1a00d9f6:	e9d6 450e 	ldrd	r4, r5, [r6, #56]	; 0x38
1a00d9fa:	e9cd 0108 	strd	r0, r1, [sp, #32]
1a00d9fe:	4602      	mov	r2, r0
1a00da00:	460b      	mov	r3, r1
1a00da02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00da06:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
1a00da0a:	f006 f879 	bl	1a013b00 <__aeabi_dmul>
1a00da0e:	4602      	mov	r2, r0
1a00da10:	460b      	mov	r3, r1
1a00da12:	4650      	mov	r0, sl
1a00da14:	4659      	mov	r1, fp
1a00da16:	f006 f873 	bl	1a013b00 <__aeabi_dmul>
1a00da1a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a00da1e:	f006 f86f 	bl	1a013b00 <__aeabi_dmul>
1a00da22:	4602      	mov	r2, r0
1a00da24:	460b      	mov	r3, r1
1a00da26:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00da2a:	f005 feb5 	bl	1a013798 <__aeabi_dsub>
1a00da2e:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
1a00da32:	4604      	mov	r4, r0
1a00da34:	460d      	mov	r5, r1
1a00da36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00da3a:	f006 f861 	bl	1a013b00 <__aeabi_dmul>
1a00da3e:	4602      	mov	r2, r0
1a00da40:	460b      	mov	r3, r1
1a00da42:	4620      	mov	r0, r4
1a00da44:	4629      	mov	r1, r5
1a00da46:	f005 fea7 	bl	1a013798 <__aeabi_dsub>
1a00da4a:	4652      	mov	r2, sl
1a00da4c:	4604      	mov	r4, r0
1a00da4e:	460d      	mov	r5, r1
1a00da50:	465b      	mov	r3, fp
1a00da52:	4640      	mov	r0, r8
1a00da54:	4649      	mov	r1, r9
1a00da56:	f006 f853 	bl	1a013b00 <__aeabi_dmul>
1a00da5a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
1a00da5e:	e9cd 8900 	strd	r8, r9, [sp]
1a00da62:	4642      	mov	r2, r8
1a00da64:	464b      	mov	r3, r9
1a00da66:	e9d6 8906 	ldrd	r8, r9, [r6, #24]
1a00da6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a00da6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00da72:	e9cd 8906 	strd	r8, r9, [sp, #24]
1a00da76:	f006 f843 	bl	1a013b00 <__aeabi_dmul>
1a00da7a:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
1a00da7e:	f006 f83f 	bl	1a013b00 <__aeabi_dmul>
1a00da82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1a00da86:	4680      	mov	r8, r0
1a00da88:	4689      	mov	r9, r1
1a00da8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00da8e:	f006 f837 	bl	1a013b00 <__aeabi_dmul>
1a00da92:	4602      	mov	r2, r0
1a00da94:	460b      	mov	r3, r1
1a00da96:	4620      	mov	r0, r4
1a00da98:	4629      	mov	r1, r5
1a00da9a:	f005 fe7f 	bl	1a01379c <__adddf3>
1a00da9e:	4602      	mov	r2, r0
1a00daa0:	460b      	mov	r3, r1
1a00daa2:	4640      	mov	r0, r8
1a00daa4:	4649      	mov	r1, r9
1a00daa6:	f005 fe79 	bl	1a01379c <__adddf3>
1a00daaa:	e9d6 8910 	ldrd	r8, r9, [r6, #64]	; 0x40
1a00daae:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00dab2:	4604      	mov	r4, r0
1a00dab4:	460d      	mov	r5, r1
1a00dab6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00daba:	e9cd 8908 	strd	r8, r9, [sp, #32]
1a00dabe:	f006 f81f 	bl	1a013b00 <__aeabi_dmul>
1a00dac2:	4602      	mov	r2, r0
1a00dac4:	460b      	mov	r3, r1
1a00dac6:	4650      	mov	r0, sl
1a00dac8:	4659      	mov	r1, fp
1a00daca:	f006 f819 	bl	1a013b00 <__aeabi_dmul>
1a00dace:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00dad2:	f006 f815 	bl	1a013b00 <__aeabi_dmul>
1a00dad6:	4602      	mov	r2, r0
1a00dad8:	460b      	mov	r3, r1
1a00dada:	4620      	mov	r0, r4
1a00dadc:	4629      	mov	r1, r5
1a00dade:	f005 fe5b 	bl	1a013798 <__aeabi_dsub>
1a00dae2:	e9d6 2316 	ldrd	r2, r3, [r6, #88]	; 0x58
1a00dae6:	4604      	mov	r4, r0
1a00dae8:	460d      	mov	r5, r1
1a00daea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00daee:	f006 f807 	bl	1a013b00 <__aeabi_dmul>
1a00daf2:	4602      	mov	r2, r0
1a00daf4:	460b      	mov	r3, r1
1a00daf6:	4620      	mov	r0, r4
1a00daf8:	4629      	mov	r1, r5
1a00dafa:	f005 fe4d 	bl	1a013798 <__aeabi_dsub>
1a00dafe:	2200      	movs	r2, #0
1a00db00:	4680      	mov	r8, r0
1a00db02:	4689      	mov	r9, r1
1a00db04:	4b96      	ldr	r3, [pc, #600]	; (1a00dd60 <inv_center_sum+0x47c>)
1a00db06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00db0a:	f005 fff9 	bl	1a013b00 <__aeabi_dmul>
1a00db0e:	e9d6 ab0a 	ldrd	sl, fp, [r6, #40]	; 0x28
1a00db12:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
1a00db16:	e9d6 2324 	ldrd	r2, r3, [r6, #144]	; 0x90
1a00db1a:	f005 fff1 	bl	1a013b00 <__aeabi_dmul>
1a00db1e:	4652      	mov	r2, sl
1a00db20:	4604      	mov	r4, r0
1a00db22:	460d      	mov	r5, r1
1a00db24:	465b      	mov	r3, fp
1a00db26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00db2a:	f005 ffe9 	bl	1a013b00 <__aeabi_dmul>
1a00db2e:	4602      	mov	r2, r0
1a00db30:	460b      	mov	r3, r1
1a00db32:	4640      	mov	r0, r8
1a00db34:	4649      	mov	r1, r9
1a00db36:	f005 fe31 	bl	1a01379c <__adddf3>
1a00db3a:	4602      	mov	r2, r0
1a00db3c:	460b      	mov	r3, r1
1a00db3e:	4620      	mov	r0, r4
1a00db40:	4629      	mov	r1, r5
1a00db42:	f005 fe2b 	bl	1a01379c <__adddf3>
1a00db46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00db4a:	4604      	mov	r4, r0
1a00db4c:	460d      	mov	r5, r1
1a00db4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00db52:	f005 ffd5 	bl	1a013b00 <__aeabi_dmul>
1a00db56:	2200      	movs	r2, #0
1a00db58:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00db5c:	4b80      	ldr	r3, [pc, #512]	; (1a00dd60 <inv_center_sum+0x47c>)
1a00db5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00db62:	f005 ffcd 	bl	1a013b00 <__aeabi_dmul>
1a00db66:	4602      	mov	r2, r0
1a00db68:	460b      	mov	r3, r1
1a00db6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00db6e:	f005 ffc7 	bl	1a013b00 <__aeabi_dmul>
1a00db72:	4602      	mov	r2, r0
1a00db74:	460b      	mov	r3, r1
1a00db76:	4620      	mov	r0, r4
1a00db78:	4629      	mov	r1, r5
1a00db7a:	f005 fe0d 	bl	1a013798 <__aeabi_dsub>
1a00db7e:	e9d6 2318 	ldrd	r2, r3, [r6, #96]	; 0x60
1a00db82:	4604      	mov	r4, r0
1a00db84:	460d      	mov	r5, r1
1a00db86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00db8a:	f005 ffb9 	bl	1a013b00 <__aeabi_dmul>
1a00db8e:	4602      	mov	r2, r0
1a00db90:	460b      	mov	r3, r1
1a00db92:	4620      	mov	r0, r4
1a00db94:	4629      	mov	r1, r5
1a00db96:	f005 fdff 	bl	1a013798 <__aeabi_dsub>
1a00db9a:	2200      	movs	r2, #0
1a00db9c:	4680      	mov	r8, r0
1a00db9e:	4689      	mov	r9, r1
1a00dba0:	4b70      	ldr	r3, [pc, #448]	; (1a00dd64 <inv_center_sum+0x480>)
1a00dba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00dba6:	f005 ffab 	bl	1a013b00 <__aeabi_dmul>
1a00dbaa:	e9d6 232a 	ldrd	r2, r3, [r6, #168]	; 0xa8
1a00dbae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a00dbb2:	f005 ffa5 	bl	1a013b00 <__aeabi_dmul>
1a00dbb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00dbba:	4604      	mov	r4, r0
1a00dbbc:	460d      	mov	r5, r1
1a00dbbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00dbc2:	f005 ff9d 	bl	1a013b00 <__aeabi_dmul>
1a00dbc6:	4602      	mov	r2, r0
1a00dbc8:	460b      	mov	r3, r1
1a00dbca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00dbce:	f005 ff97 	bl	1a013b00 <__aeabi_dmul>
1a00dbd2:	4602      	mov	r2, r0
1a00dbd4:	460b      	mov	r3, r1
1a00dbd6:	4640      	mov	r0, r8
1a00dbd8:	4649      	mov	r1, r9
1a00dbda:	f005 fddf 	bl	1a01379c <__adddf3>
1a00dbde:	4602      	mov	r2, r0
1a00dbe0:	460b      	mov	r3, r1
1a00dbe2:	4620      	mov	r0, r4
1a00dbe4:	4629      	mov	r1, r5
1a00dbe6:	f005 fdd9 	bl	1a01379c <__adddf3>
1a00dbea:	2200      	movs	r2, #0
1a00dbec:	4604      	mov	r4, r0
1a00dbee:	460d      	mov	r5, r1
1a00dbf0:	4b5c      	ldr	r3, [pc, #368]	; (1a00dd64 <inv_center_sum+0x480>)
1a00dbf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00dbf6:	f005 ff83 	bl	1a013b00 <__aeabi_dmul>
1a00dbfa:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00dbfe:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
1a00dc02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00dc06:	f005 ff7b 	bl	1a013b00 <__aeabi_dmul>
1a00dc0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
1a00dc0e:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
1a00dc12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00dc16:	f005 ff73 	bl	1a013b00 <__aeabi_dmul>
1a00dc1a:	4602      	mov	r2, r0
1a00dc1c:	460b      	mov	r3, r1
1a00dc1e:	4620      	mov	r0, r4
1a00dc20:	4629      	mov	r1, r5
1a00dc22:	f005 fdb9 	bl	1a013798 <__aeabi_dsub>
1a00dc26:	e9d6 231e 	ldrd	r2, r3, [r6, #120]	; 0x78
1a00dc2a:	4604      	mov	r4, r0
1a00dc2c:	460d      	mov	r5, r1
1a00dc2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00dc32:	f005 ff65 	bl	1a013b00 <__aeabi_dmul>
1a00dc36:	4602      	mov	r2, r0
1a00dc38:	460b      	mov	r3, r1
1a00dc3a:	4620      	mov	r0, r4
1a00dc3c:	4629      	mov	r1, r5
1a00dc3e:	f005 fdab 	bl	1a013798 <__aeabi_dsub>
1a00dc42:	e9d6 232c 	ldrd	r2, r3, [r6, #176]	; 0xb0
1a00dc46:	4680      	mov	r8, r0
1a00dc48:	4689      	mov	r9, r1
1a00dc4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00dc4e:	f005 ff57 	bl	1a013b00 <__aeabi_dmul>
1a00dc52:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00dc56:	4604      	mov	r4, r0
1a00dc58:	460d      	mov	r5, r1
1a00dc5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00dc5e:	f005 ff4f 	bl	1a013b00 <__aeabi_dmul>
1a00dc62:	4602      	mov	r2, r0
1a00dc64:	460b      	mov	r3, r1
1a00dc66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00dc6a:	f005 ff49 	bl	1a013b00 <__aeabi_dmul>
1a00dc6e:	4602      	mov	r2, r0
1a00dc70:	460b      	mov	r3, r1
1a00dc72:	4640      	mov	r0, r8
1a00dc74:	4649      	mov	r1, r9
1a00dc76:	f005 fd91 	bl	1a01379c <__adddf3>
1a00dc7a:	4602      	mov	r2, r0
1a00dc7c:	460b      	mov	r3, r1
1a00dc7e:	4620      	mov	r0, r4
1a00dc80:	4629      	mov	r1, r5
1a00dc82:	f005 fd8b 	bl	1a01379c <__adddf3>
1a00dc86:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00dc8a:	4680      	mov	r8, r0
1a00dc8c:	4689      	mov	r9, r1
1a00dc8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00dc92:	f005 ff35 	bl	1a013b00 <__aeabi_dmul>
1a00dc96:	4602      	mov	r2, r0
1a00dc98:	460b      	mov	r3, r1
1a00dc9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00dc9e:	f005 ff2f 	bl	1a013b00 <__aeabi_dmul>
1a00dca2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
1a00dca6:	4604      	mov	r4, r0
1a00dca8:	460d      	mov	r5, r1
1a00dcaa:	4650      	mov	r0, sl
1a00dcac:	4659      	mov	r1, fp
1a00dcae:	f005 ff27 	bl	1a013b00 <__aeabi_dmul>
1a00dcb2:	4602      	mov	r2, r0
1a00dcb4:	460b      	mov	r3, r1
1a00dcb6:	4640      	mov	r0, r8
1a00dcb8:	4649      	mov	r1, r9
1a00dcba:	f005 fd6d 	bl	1a013798 <__aeabi_dsub>
1a00dcbe:	4602      	mov	r2, r0
1a00dcc0:	460b      	mov	r3, r1
1a00dcc2:	4620      	mov	r0, r4
1a00dcc4:	4629      	mov	r1, r5
1a00dcc6:	f005 fd69 	bl	1a01379c <__adddf3>
1a00dcca:	4604      	mov	r4, r0
1a00dccc:	460d      	mov	r5, r1
1a00dcce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00dcd2:	4602      	mov	r2, r0
1a00dcd4:	460b      	mov	r3, r1
1a00dcd6:	f005 ff13 	bl	1a013b00 <__aeabi_dmul>
1a00dcda:	4602      	mov	r2, r0
1a00dcdc:	460b      	mov	r3, r1
1a00dcde:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00dce2:	f005 ff0d 	bl	1a013b00 <__aeabi_dmul>
1a00dce6:	4602      	mov	r2, r0
1a00dce8:	460b      	mov	r3, r1
1a00dcea:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00dcee:	f005 ff07 	bl	1a013b00 <__aeabi_dmul>
1a00dcf2:	4602      	mov	r2, r0
1a00dcf4:	460b      	mov	r3, r1
1a00dcf6:	4620      	mov	r0, r4
1a00dcf8:	4629      	mov	r1, r5
1a00dcfa:	f005 fd4d 	bl	1a013798 <__aeabi_dsub>
1a00dcfe:	e9d6 231a 	ldrd	r2, r3, [r6, #104]	; 0x68
1a00dd02:	4604      	mov	r4, r0
1a00dd04:	460d      	mov	r5, r1
1a00dd06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00dd0a:	f005 fef9 	bl	1a013b00 <__aeabi_dmul>
1a00dd0e:	4602      	mov	r2, r0
1a00dd10:	460b      	mov	r3, r1
1a00dd12:	4620      	mov	r0, r4
1a00dd14:	4629      	mov	r1, r5
1a00dd16:	f005 fd3f 	bl	1a013798 <__aeabi_dsub>
1a00dd1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00dd1e:	4680      	mov	r8, r0
1a00dd20:	4689      	mov	r9, r1
1a00dd22:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a00dd26:	f005 feeb 	bl	1a013b00 <__aeabi_dmul>
1a00dd2a:	4602      	mov	r2, r0
1a00dd2c:	460b      	mov	r3, r1
1a00dd2e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00dd32:	f005 fee5 	bl	1a013b00 <__aeabi_dmul>
1a00dd36:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
1a00dd3a:	f005 fee1 	bl	1a013b00 <__aeabi_dmul>
1a00dd3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1a00dd42:	4604      	mov	r4, r0
1a00dd44:	460d      	mov	r5, r1
1a00dd46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00dd4a:	f005 fed9 	bl	1a013b00 <__aeabi_dmul>
1a00dd4e:	4602      	mov	r2, r0
1a00dd50:	460b      	mov	r3, r1
1a00dd52:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00dd56:	f005 fed3 	bl	1a013b00 <__aeabi_dmul>
1a00dd5a:	4602      	mov	r2, r0
1a00dd5c:	e004      	b.n	1a00dd68 <inv_center_sum+0x484>
1a00dd5e:	bf00      	nop
1a00dd60:	3fd00000 	.word	0x3fd00000
1a00dd64:	3fe00000 	.word	0x3fe00000
1a00dd68:	460b      	mov	r3, r1
1a00dd6a:	4640      	mov	r0, r8
1a00dd6c:	4649      	mov	r1, r9
1a00dd6e:	f005 fd15 	bl	1a01379c <__adddf3>
1a00dd72:	4602      	mov	r2, r0
1a00dd74:	460b      	mov	r3, r1
1a00dd76:	4620      	mov	r0, r4
1a00dd78:	4629      	mov	r1, r5
1a00dd7a:	f005 fd0f 	bl	1a01379c <__adddf3>
1a00dd7e:	4604      	mov	r4, r0
1a00dd80:	460d      	mov	r5, r1
1a00dd82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00dd86:	4602      	mov	r2, r0
1a00dd88:	460b      	mov	r3, r1
1a00dd8a:	f005 fd07 	bl	1a01379c <__adddf3>
1a00dd8e:	4602      	mov	r2, r0
1a00dd90:	460b      	mov	r3, r1
1a00dd92:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00dd96:	f005 feb3 	bl	1a013b00 <__aeabi_dmul>
1a00dd9a:	4602      	mov	r2, r0
1a00dd9c:	460b      	mov	r3, r1
1a00dd9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00dda2:	f005 fead 	bl	1a013b00 <__aeabi_dmul>
1a00dda6:	4602      	mov	r2, r0
1a00dda8:	460b      	mov	r3, r1
1a00ddaa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00ddae:	f005 fea7 	bl	1a013b00 <__aeabi_dmul>
1a00ddb2:	4602      	mov	r2, r0
1a00ddb4:	460b      	mov	r3, r1
1a00ddb6:	4620      	mov	r0, r4
1a00ddb8:	4629      	mov	r1, r5
1a00ddba:	f005 fced 	bl	1a013798 <__aeabi_dsub>
1a00ddbe:	e9d6 231c 	ldrd	r2, r3, [r6, #112]	; 0x70
1a00ddc2:	4604      	mov	r4, r0
1a00ddc4:	460d      	mov	r5, r1
1a00ddc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00ddca:	f005 fe99 	bl	1a013b00 <__aeabi_dmul>
1a00ddce:	4602      	mov	r2, r0
1a00ddd0:	460b      	mov	r3, r1
1a00ddd2:	4620      	mov	r0, r4
1a00ddd4:	4629      	mov	r1, r5
1a00ddd6:	f005 fcdf 	bl	1a013798 <__aeabi_dsub>
1a00ddda:	e9d6 2326 	ldrd	r2, r3, [r6, #152]	; 0x98
1a00ddde:	4680      	mov	r8, r0
1a00dde0:	4689      	mov	r9, r1
1a00dde2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
1a00dde6:	f005 fe8b 	bl	1a013b00 <__aeabi_dmul>
1a00ddea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a00ddee:	4604      	mov	r4, r0
1a00ddf0:	460d      	mov	r5, r1
1a00ddf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00ddf6:	f005 fe83 	bl	1a013b00 <__aeabi_dmul>
1a00ddfa:	4602      	mov	r2, r0
1a00ddfc:	460b      	mov	r3, r1
1a00ddfe:	4650      	mov	r0, sl
1a00de00:	4659      	mov	r1, fp
1a00de02:	f005 fe7d 	bl	1a013b00 <__aeabi_dmul>
1a00de06:	4602      	mov	r2, r0
1a00de08:	460b      	mov	r3, r1
1a00de0a:	4640      	mov	r0, r8
1a00de0c:	4649      	mov	r1, r9
1a00de0e:	f005 fcc5 	bl	1a01379c <__adddf3>
1a00de12:	4602      	mov	r2, r0
1a00de14:	460b      	mov	r3, r1
1a00de16:	4620      	mov	r0, r4
1a00de18:	4629      	mov	r1, r5
1a00de1a:	f005 fcbf 	bl	1a01379c <__adddf3>
1a00de1e:	2200      	movs	r2, #0
1a00de20:	4604      	mov	r4, r0
1a00de22:	460d      	mov	r5, r1
1a00de24:	4b64      	ldr	r3, [pc, #400]	; (1a00dfb8 <inv_center_sum+0x6d4>)
1a00de26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00de2a:	f005 fe69 	bl	1a013b00 <__aeabi_dmul>
1a00de2e:	4602      	mov	r2, r0
1a00de30:	460b      	mov	r3, r1
1a00de32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00de36:	f005 fe63 	bl	1a013b00 <__aeabi_dmul>
1a00de3a:	4602      	mov	r2, r0
1a00de3c:	460b      	mov	r3, r1
1a00de3e:	4620      	mov	r0, r4
1a00de40:	4629      	mov	r1, r5
1a00de42:	f005 fca9 	bl	1a013798 <__aeabi_dsub>
1a00de46:	e9d6 2320 	ldrd	r2, r3, [r6, #128]	; 0x80
1a00de4a:	4604      	mov	r4, r0
1a00de4c:	460d      	mov	r5, r1
1a00de4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00de52:	f005 fe55 	bl	1a013b00 <__aeabi_dmul>
1a00de56:	4602      	mov	r2, r0
1a00de58:	460b      	mov	r3, r1
1a00de5a:	4620      	mov	r0, r4
1a00de5c:	4629      	mov	r1, r5
1a00de5e:	f005 fc9b 	bl	1a013798 <__aeabi_dsub>
1a00de62:	e9d6 232e 	ldrd	r2, r3, [r6, #184]	; 0xb8
1a00de66:	4680      	mov	r8, r0
1a00de68:	4689      	mov	r9, r1
1a00de6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00de6e:	f005 fe47 	bl	1a013b00 <__aeabi_dmul>
1a00de72:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00de76:	4604      	mov	r4, r0
1a00de78:	460d      	mov	r5, r1
1a00de7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00de7e:	f005 fe3f 	bl	1a013b00 <__aeabi_dmul>
1a00de82:	4602      	mov	r2, r0
1a00de84:	460b      	mov	r3, r1
1a00de86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00de8a:	f005 fe39 	bl	1a013b00 <__aeabi_dmul>
1a00de8e:	4602      	mov	r2, r0
1a00de90:	460b      	mov	r3, r1
1a00de92:	4640      	mov	r0, r8
1a00de94:	4649      	mov	r1, r9
1a00de96:	f005 fc81 	bl	1a01379c <__adddf3>
1a00de9a:	4602      	mov	r2, r0
1a00de9c:	460b      	mov	r3, r1
1a00de9e:	4620      	mov	r0, r4
1a00dea0:	4629      	mov	r1, r5
1a00dea2:	f005 fc7b 	bl	1a01379c <__adddf3>
1a00dea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00deaa:	4680      	mov	r8, r0
1a00deac:	4689      	mov	r9, r1
1a00deae:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00deb2:	f005 fe25 	bl	1a013b00 <__aeabi_dmul>
1a00deb6:	4602      	mov	r2, r0
1a00deb8:	460b      	mov	r3, r1
1a00deba:	4650      	mov	r0, sl
1a00debc:	4659      	mov	r1, fp
1a00debe:	f005 fe1f 	bl	1a013b00 <__aeabi_dmul>
1a00dec2:	2200      	movs	r2, #0
1a00dec4:	4604      	mov	r4, r0
1a00dec6:	460d      	mov	r5, r1
1a00dec8:	4b3c      	ldr	r3, [pc, #240]	; (1a00dfbc <inv_center_sum+0x6d8>)
1a00deca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00dece:	f005 fe17 	bl	1a013b00 <__aeabi_dmul>
1a00ded2:	4602      	mov	r2, r0
1a00ded4:	460b      	mov	r3, r1
1a00ded6:	4650      	mov	r0, sl
1a00ded8:	4659      	mov	r1, fp
1a00deda:	f005 fe11 	bl	1a013b00 <__aeabi_dmul>
1a00dede:	4602      	mov	r2, r0
1a00dee0:	460b      	mov	r3, r1
1a00dee2:	4640      	mov	r0, r8
1a00dee4:	4649      	mov	r1, r9
1a00dee6:	f005 fc57 	bl	1a013798 <__aeabi_dsub>
1a00deea:	4602      	mov	r2, r0
1a00deec:	460b      	mov	r3, r1
1a00deee:	4620      	mov	r0, r4
1a00def0:	4629      	mov	r1, r5
1a00def2:	f005 fc53 	bl	1a01379c <__adddf3>
1a00def6:	4604      	mov	r4, r0
1a00def8:	460d      	mov	r5, r1
1a00defa:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00defe:	4602      	mov	r2, r0
1a00df00:	460b      	mov	r3, r1
1a00df02:	f005 fdfd 	bl	1a013b00 <__aeabi_dmul>
1a00df06:	4602      	mov	r2, r0
1a00df08:	460b      	mov	r3, r1
1a00df0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00df0e:	f005 fdf7 	bl	1a013b00 <__aeabi_dmul>
1a00df12:	4602      	mov	r2, r0
1a00df14:	460b      	mov	r3, r1
1a00df16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00df1a:	f005 fdf1 	bl	1a013b00 <__aeabi_dmul>
1a00df1e:	4602      	mov	r2, r0
1a00df20:	460b      	mov	r3, r1
1a00df22:	4620      	mov	r0, r4
1a00df24:	4629      	mov	r1, r5
1a00df26:	f005 fc37 	bl	1a013798 <__aeabi_dsub>
1a00df2a:	e9d6 2322 	ldrd	r2, r3, [r6, #136]	; 0x88
1a00df2e:	4604      	mov	r4, r0
1a00df30:	460d      	mov	r5, r1
1a00df32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00df36:	f005 fde3 	bl	1a013b00 <__aeabi_dmul>
1a00df3a:	4602      	mov	r2, r0
1a00df3c:	460b      	mov	r3, r1
1a00df3e:	4620      	mov	r0, r4
1a00df40:	4629      	mov	r1, r5
1a00df42:	f005 fc29 	bl	1a013798 <__aeabi_dsub>
1a00df46:	e9d6 2328 	ldrd	r2, r3, [r6, #160]	; 0xa0
1a00df4a:	4604      	mov	r4, r0
1a00df4c:	460d      	mov	r5, r1
1a00df4e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
1a00df52:	f005 fdd5 	bl	1a013b00 <__aeabi_dmul>
1a00df56:	4652      	mov	r2, sl
1a00df58:	4606      	mov	r6, r0
1a00df5a:	460f      	mov	r7, r1
1a00df5c:	465b      	mov	r3, fp
1a00df5e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00df62:	f005 fdcd 	bl	1a013b00 <__aeabi_dmul>
1a00df66:	4602      	mov	r2, r0
1a00df68:	460b      	mov	r3, r1
1a00df6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00df6e:	f005 fdc7 	bl	1a013b00 <__aeabi_dmul>
1a00df72:	4602      	mov	r2, r0
1a00df74:	460b      	mov	r3, r1
1a00df76:	4620      	mov	r0, r4
1a00df78:	4629      	mov	r1, r5
1a00df7a:	f005 fc0f 	bl	1a01379c <__adddf3>
1a00df7e:	4602      	mov	r2, r0
1a00df80:	460b      	mov	r3, r1
1a00df82:	4630      	mov	r0, r6
1a00df84:	4639      	mov	r1, r7
1a00df86:	f005 fc09 	bl	1a01379c <__adddf3>
1a00df8a:	2200      	movs	r2, #0
1a00df8c:	4604      	mov	r4, r0
1a00df8e:	460d      	mov	r5, r1
1a00df90:	4650      	mov	r0, sl
1a00df92:	4659      	mov	r1, fp
1a00df94:	4b08      	ldr	r3, [pc, #32]	; (1a00dfb8 <inv_center_sum+0x6d4>)
1a00df96:	f005 fdb3 	bl	1a013b00 <__aeabi_dmul>
1a00df9a:	4602      	mov	r2, r0
1a00df9c:	460b      	mov	r3, r1
1a00df9e:	4650      	mov	r0, sl
1a00dfa0:	4659      	mov	r1, fp
1a00dfa2:	f005 fdad 	bl	1a013b00 <__aeabi_dmul>
1a00dfa6:	4602      	mov	r2, r0
1a00dfa8:	460b      	mov	r3, r1
1a00dfaa:	4620      	mov	r0, r4
1a00dfac:	4629      	mov	r1, r5
1a00dfae:	f005 fbf3 	bl	1a013798 <__aeabi_dsub>
1a00dfb2:	b019      	add	sp, #100	; 0x64
1a00dfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00dfb8:	3fd00000 	.word	0x3fd00000
1a00dfbc:	3fe00000 	.word	0x3fe00000

1a00dfc0 <inv_get_current_calibrated_compass>:
1a00dfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00dfc2:	4604      	mov	r4, r0
1a00dfc4:	b087      	sub	sp, #28
1a00dfc6:	f9b4 508c 	ldrsh.w	r5, [r4, #140]	; 0x8c
1a00dfca:	f9b4 208e 	ldrsh.w	r2, [r4, #142]	; 0x8e
1a00dfce:	f9b4 3090 	ldrsh.w	r3, [r4, #144]	; 0x90
1a00dfd2:	0412      	lsls	r2, r2, #16
1a00dfd4:	041b      	lsls	r3, r3, #16
1a00dfd6:	a803      	add	r0, sp, #12
1a00dfd8:	042d      	lsls	r5, r5, #16
1a00dfda:	460f      	mov	r7, r1
1a00dfdc:	9500      	str	r5, [sp, #0]
1a00dfde:	9201      	str	r2, [sp, #4]
1a00dfe0:	9302      	str	r3, [sp, #8]
1a00dfe2:	f7f9 f843 	bl	1a00706c <inv_get_compass_bias>
1a00dfe6:	9a03      	ldr	r2, [sp, #12]
1a00dfe8:	f8b4 0088 	ldrh.w	r0, [r4, #136]	; 0x88
1a00dfec:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
1a00dff0:	9c00      	ldr	r4, [sp, #0]
1a00dff2:	9b01      	ldr	r3, [sp, #4]
1a00dff4:	1aa4      	subs	r4, r4, r2
1a00dff6:	9a04      	ldr	r2, [sp, #16]
1a00dff8:	1a9e      	subs	r6, r3, r2
1a00dffa:	9b02      	ldr	r3, [sp, #8]
1a00dffc:	9a05      	ldr	r2, [sp, #20]
1a00dffe:	1a9d      	subs	r5, r3, r2
1a00e000:	466a      	mov	r2, sp
1a00e002:	463b      	mov	r3, r7
1a00e004:	e88d 0050 	stmia.w	sp, {r4, r6}
1a00e008:	9502      	str	r5, [sp, #8]
1a00e00a:	f7fa fcb9 	bl	1a008980 <inv_convert_to_body_with_scale>
1a00e00e:	b007      	add	sp, #28
1a00e010:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00e012:	bf00      	nop

1a00e014 <inv_add_compass_block_data>:
1a00e014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00e018:	b086      	sub	sp, #24
1a00e01a:	460e      	mov	r6, r1
1a00e01c:	4669      	mov	r1, sp
1a00e01e:	f7ff ffcf 	bl	1a00dfc0 <inv_get_current_calibrated_compass>
1a00e022:	f04f 0800 	mov.w	r8, #0
1a00e026:	2400      	movs	r4, #0
1a00e028:	2500      	movs	r5, #0
1a00e02a:	af03      	add	r7, sp, #12
1a00e02c:	f85d 0008 	ldr.w	r0, [sp, r8]
1a00e030:	f006 f932 	bl	1a014298 <__aeabi_i2f>
1a00e034:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a00e038:	f006 f982 	bl	1a014340 <__aeabi_fmul>
1a00e03c:	4601      	mov	r1, r0
1a00e03e:	f847 0008 	str.w	r0, [r7, r8]
1a00e042:	f006 f97d 	bl	1a014340 <__aeabi_fmul>
1a00e046:	f005 fd07 	bl	1a013a58 <__aeabi_f2d>
1a00e04a:	4602      	mov	r2, r0
1a00e04c:	460b      	mov	r3, r1
1a00e04e:	4620      	mov	r0, r4
1a00e050:	4629      	mov	r1, r5
1a00e052:	f005 fba3 	bl	1a01379c <__adddf3>
1a00e056:	f108 0804 	add.w	r8, r8, #4
1a00e05a:	f1b8 0f0c 	cmp.w	r8, #12
1a00e05e:	4604      	mov	r4, r0
1a00e060:	460d      	mov	r5, r1
1a00e062:	d1e3      	bne.n	1a00e02c <inv_add_compass_block_data+0x18>
1a00e064:	f007 fb8a 	bl	1a01577c <sqrt>
1a00e068:	f04f 0800 	mov.w	r8, #0
1a00e06c:	4604      	mov	r4, r0
1a00e06e:	460d      	mov	r5, r1
1a00e070:	f857 0008 	ldr.w	r0, [r7, r8]
1a00e074:	f005 fcf0 	bl	1a013a58 <__aeabi_f2d>
1a00e078:	4622      	mov	r2, r4
1a00e07a:	462b      	mov	r3, r5
1a00e07c:	f005 fe6a 	bl	1a013d54 <__aeabi_ddiv>
1a00e080:	f006 f800 	bl	1a014084 <__aeabi_d2f>
1a00e084:	4601      	mov	r1, r0
1a00e086:	f856 0008 	ldr.w	r0, [r6, r8]
1a00e08a:	f006 f851 	bl	1a014130 <__addsf3>
1a00e08e:	f846 0008 	str.w	r0, [r6, r8]
1a00e092:	f108 0804 	add.w	r8, r8, #4
1a00e096:	f1b8 0f0c 	cmp.w	r8, #12
1a00e09a:	d1e9      	bne.n	1a00e070 <inv_add_compass_block_data+0x5c>
1a00e09c:	6d73      	ldr	r3, [r6, #84]	; 0x54
1a00e09e:	3301      	adds	r3, #1
1a00e0a0:	6573      	str	r3, [r6, #84]	; 0x54
1a00e0a2:	f7fa ff5d 	bl	1a008f60 <inv_got_compass_bias>
1a00e0a6:	67f0      	str	r0, [r6, #124]	; 0x7c
1a00e0a8:	b006      	add	sp, #24
1a00e0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00e0ae:	bf00      	nop

1a00e0b0 <inv_check_sim>:
1a00e0b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00e0b4:	b09d      	sub	sp, #116	; 0x74
1a00e0b6:	2355      	movs	r3, #85	; 0x55
1a00e0b8:	2200      	movs	r2, #0
1a00e0ba:	4604      	mov	r4, r0
1a00e0bc:	a806      	add	r0, sp, #24
1a00e0be:	9304      	str	r3, [sp, #16]
1a00e0c0:	9305      	str	r3, [sp, #20]
1a00e0c2:	9202      	str	r2, [sp, #8]
1a00e0c4:	9203      	str	r2, [sp, #12]
1a00e0c6:	f7fa fe6f 	bl	1a008da8 <inv_get_6axis_quaternion>
1a00e0ca:	a806      	add	r0, sp, #24
1a00e0cc:	a90a      	add	r1, sp, #40	; 0x28
1a00e0ce:	f7f9 ffd5 	bl	1a00807c <inv_q_invert>
1a00e0d2:	aa0e      	add	r2, sp, #56	; 0x38
1a00e0d4:	a80a      	add	r0, sp, #40	; 0x28
1a00e0d6:	a902      	add	r1, sp, #8
1a00e0d8:	f7f9 fed2 	bl	1a007e80 <inv_q_mult>
1a00e0dc:	a906      	add	r1, sp, #24
1a00e0de:	a80e      	add	r0, sp, #56	; 0x38
1a00e0e0:	aa12      	add	r2, sp, #72	; 0x48
1a00e0e2:	f7f9 fecd 	bl	1a007e80 <inv_q_mult>
1a00e0e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a00e0e8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
1a00e0ea:	4843      	ldr	r0, [pc, #268]	; (1a00e1f8 <inv_check_sim+0x148>)
1a00e0ec:	f503 7296 	add.w	r2, r3, #300	; 0x12c
1a00e0f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00e0f2:	9214      	str	r2, [sp, #80]	; 0x50
1a00e0f4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
1a00e0f8:	f505 7596 	add.w	r5, r5, #300	; 0x12c
1a00e0fc:	9315      	str	r3, [sp, #84]	; 0x54
1a00e0fe:	9513      	str	r5, [sp, #76]	; 0x4c
1a00e100:	f7fe fdc4 	bl	1a00cc8c <inv_cheap_gaussian>
1a00e104:	f006 fae2 	bl	1a0146cc <__aeabi_f2iz>
1a00e108:	182d      	adds	r5, r5, r0
1a00e10a:	483b      	ldr	r0, [pc, #236]	; (1a00e1f8 <inv_check_sim+0x148>)
1a00e10c:	9e14      	ldr	r6, [sp, #80]	; 0x50
1a00e10e:	9513      	str	r5, [sp, #76]	; 0x4c
1a00e110:	f7fe fdbc 	bl	1a00cc8c <inv_cheap_gaussian>
1a00e114:	f006 fada 	bl	1a0146cc <__aeabi_f2iz>
1a00e118:	1836      	adds	r6, r6, r0
1a00e11a:	4837      	ldr	r0, [pc, #220]	; (1a00e1f8 <inv_check_sim+0x148>)
1a00e11c:	9d15      	ldr	r5, [sp, #84]	; 0x54
1a00e11e:	9614      	str	r6, [sp, #80]	; 0x50
1a00e120:	f7fe fdb4 	bl	1a00cc8c <inv_cheap_gaussian>
1a00e124:	f006 fad2 	bl	1a0146cc <__aeabi_f2iz>
1a00e128:	a913      	add	r1, sp, #76	; 0x4c
1a00e12a:	182d      	adds	r5, r5, r0
1a00e12c:	4620      	mov	r0, r4
1a00e12e:	9515      	str	r5, [sp, #84]	; 0x54
1a00e130:	f7fe fe8c 	bl	1a00ce4c <inv_set_terms>
1a00e134:	e9d4 0130 	ldrd	r0, r1, [r4, #192]	; 0xc0
1a00e138:	2200      	movs	r2, #0
1a00e13a:	4b30      	ldr	r3, [pc, #192]	; (1a00e1fc <inv_check_sim+0x14c>)
1a00e13c:	f005 ff70 	bl	1a014020 <__aeabi_dcmpgt>
1a00e140:	b928      	cbnz	r0, 1a00e14e <inv_check_sim+0x9e>
1a00e142:	a129      	add	r1, pc, #164	; (adr r1, 1a00e1e8 <inv_check_sim+0x138>)
1a00e144:	e9d1 0100 	ldrd	r0, r1, [r1]
1a00e148:	b01d      	add	sp, #116	; 0x74
1a00e14a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00e14e:	4620      	mov	r0, r4
1a00e150:	a916      	add	r1, sp, #88	; 0x58
1a00e152:	466a      	mov	r2, sp
1a00e154:	f7ff f800 	bl	1a00d158 <inv_compute_bias>
1a00e158:	2800      	cmp	r0, #0
1a00e15a:	d0f2      	beq.n	1a00e142 <inv_check_sim+0x92>
1a00e15c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
1a00e160:	a323      	add	r3, pc, #140	; (adr r3, 1a00e1f0 <inv_check_sim+0x140>)
1a00e162:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00e166:	f005 fb17 	bl	1a013798 <__aeabi_dsub>
1a00e16a:	a321      	add	r3, pc, #132	; (adr r3, 1a00e1f0 <inv_check_sim+0x140>)
1a00e16c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00e170:	4604      	mov	r4, r0
1a00e172:	460d      	mov	r5, r1
1a00e174:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
1a00e178:	f005 fb0e 	bl	1a013798 <__aeabi_dsub>
1a00e17c:	a31c      	add	r3, pc, #112	; (adr r3, 1a00e1f0 <inv_check_sim+0x140>)
1a00e17e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00e182:	4680      	mov	r8, r0
1a00e184:	4689      	mov	r9, r1
1a00e186:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a00e18a:	f005 fb05 	bl	1a013798 <__aeabi_dsub>
1a00e18e:	4622      	mov	r2, r4
1a00e190:	4606      	mov	r6, r0
1a00e192:	460f      	mov	r7, r1
1a00e194:	462b      	mov	r3, r5
1a00e196:	4620      	mov	r0, r4
1a00e198:	4629      	mov	r1, r5
1a00e19a:	f005 fcb1 	bl	1a013b00 <__aeabi_dmul>
1a00e19e:	4642      	mov	r2, r8
1a00e1a0:	4604      	mov	r4, r0
1a00e1a2:	460d      	mov	r5, r1
1a00e1a4:	464b      	mov	r3, r9
1a00e1a6:	4640      	mov	r0, r8
1a00e1a8:	4649      	mov	r1, r9
1a00e1aa:	f005 fca9 	bl	1a013b00 <__aeabi_dmul>
1a00e1ae:	4602      	mov	r2, r0
1a00e1b0:	460b      	mov	r3, r1
1a00e1b2:	4620      	mov	r0, r4
1a00e1b4:	4629      	mov	r1, r5
1a00e1b6:	f005 faf1 	bl	1a01379c <__adddf3>
1a00e1ba:	4632      	mov	r2, r6
1a00e1bc:	4604      	mov	r4, r0
1a00e1be:	460d      	mov	r5, r1
1a00e1c0:	463b      	mov	r3, r7
1a00e1c2:	4630      	mov	r0, r6
1a00e1c4:	4639      	mov	r1, r7
1a00e1c6:	f005 fc9b 	bl	1a013b00 <__aeabi_dmul>
1a00e1ca:	4602      	mov	r2, r0
1a00e1cc:	460b      	mov	r3, r1
1a00e1ce:	4620      	mov	r0, r4
1a00e1d0:	4629      	mov	r1, r5
1a00e1d2:	f005 fae3 	bl	1a01379c <__adddf3>
1a00e1d6:	f007 fad1 	bl	1a01577c <sqrt>
1a00e1da:	2200      	movs	r2, #0
1a00e1dc:	4b08      	ldr	r3, [pc, #32]	; (1a00e200 <inv_check_sim+0x150>)
1a00e1de:	f005 fdb9 	bl	1a013d54 <__aeabi_ddiv>
1a00e1e2:	e7b1      	b.n	1a00e148 <inv_check_sim+0x98>
1a00e1e4:	f3af 8000 	nop.w
1a00e1e8:	55555555 	.word	0x55555555
1a00e1ec:	4074d555 	.word	0x4074d555
1a00e1f0:	00000000 	.word	0x00000000
1a00e1f4:	4072c000 	.word	0x4072c000
1a00e1f8:	41280000 	.word	0x41280000
1a00e1fc:	40340000 	.word	0x40340000
1a00e200:	40080000 	.word	0x40080000
1a00e204:	f3af 8000 	nop.w

1a00e208 <inv_reset_data_collection>:
1a00e208:	b570      	push	{r4, r5, r6, lr}
1a00e20a:	26e8      	movs	r6, #232	; 0xe8
1a00e20c:	4c0f      	ldr	r4, [pc, #60]	; (1a00e24c <inv_reset_data_collection+0x44>)
1a00e20e:	4810      	ldr	r0, [pc, #64]	; (1a00e250 <inv_reset_data_collection+0x48>)
1a00e210:	2100      	movs	r1, #0
1a00e212:	4632      	mov	r2, r6
1a00e214:	f006 fde4 	bl	1a014de0 <memset>
1a00e218:	f44f 4500 	mov.w	r5, #32768	; 0x8000
1a00e21c:	f647 73ff 	movw	r3, #32767	; 0x7fff
1a00e220:	480c      	ldr	r0, [pc, #48]	; (1a00e254 <inv_reset_data_collection+0x4c>)
1a00e222:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
1a00e226:	2100      	movs	r1, #0
1a00e228:	4632      	mov	r2, r6
1a00e22a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
1a00e22e:	f8a4 30de 	strh.w	r3, [r4, #222]	; 0xde
1a00e232:	f8a4 50bc 	strh.w	r5, [r4, #188]	; 0xbc
1a00e236:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
1a00e23a:	f8a4 50d8 	strh.w	r5, [r4, #216]	; 0xd8
1a00e23e:	f006 fdcf 	bl	1a014de0 <memset>
1a00e242:	2300      	movs	r3, #0
1a00e244:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
1a00e248:	bd70      	pop	{r4, r5, r6, pc}
1a00e24a:	bf00      	nop
1a00e24c:	10087ad0 	.word	0x10087ad0
1a00e250:	10087900 	.word	0x10087900
1a00e254:	10087c78 	.word	0x10087c78

1a00e258 <inv_process_compass_only_cal>:
1a00e258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00e25c:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00e25e:	4f06      	ldr	r7, [pc, #24]	; (1a00e278 <inv_process_compass_only_cal+0x20>)
1a00e260:	b0e1      	sub	sp, #388	; 0x184
1a00e262:	4680      	mov	r8, r0
1a00e264:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
1a00e268:	f7fa fce0 	bl	1a008c2c <inv_get_large_mag_field>
1a00e26c:	4604      	mov	r4, r0
1a00e26e:	b128      	cbz	r0, 1a00e27c <inv_process_compass_only_cal+0x24>
1a00e270:	2000      	movs	r0, #0
1a00e272:	b061      	add	sp, #388	; 0x184
1a00e274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00e278:	10087ad0 	.word	0x10087ad0
1a00e27c:	f7fa fe9c 	bl	1a008fb8 <inv_get_compass_state>
1a00e280:	2804      	cmp	r0, #4
1a00e282:	d0f5      	beq.n	1a00e270 <inv_process_compass_only_cal+0x18>
1a00e284:	4640      	mov	r0, r8
1a00e286:	f507 7190 	add.w	r1, r7, #288	; 0x120
1a00e28a:	f7ff fec3 	bl	1a00e014 <inv_add_compass_block_data>
1a00e28e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
1a00e292:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
1a00e296:	429a      	cmp	r2, r3
1a00e298:	f280 8178 	bge.w	1a00e58c <inv_process_compass_only_cal+0x334>
1a00e29c:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
1a00e2a0:	05d9      	lsls	r1, r3, #23
1a00e2a2:	f100 8161 	bmi.w	1a00e568 <inv_process_compass_only_cal+0x310>
1a00e2a6:	f8d8 10a0 	ldr.w	r1, [r8, #160]	; 0xa0
1a00e2aa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
1a00e2ae:	4ba6      	ldr	r3, [pc, #664]	; (1a00e548 <inv_process_compass_only_cal+0x2f0>)
1a00e2b0:	1a8a      	subs	r2, r1, r2
1a00e2b2:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
1a00e2b6:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
1a00e2ba:	f5b1 2fa0 	cmp.w	r1, #327680	; 0x50000
1a00e2be:	f300 816f 	bgt.w	1a00e5a0 <inv_process_compass_only_cal+0x348>
1a00e2c2:	f8d8 00a4 	ldr.w	r0, [r8, #164]	; 0xa4
1a00e2c6:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
1a00e2ca:	1a41      	subs	r1, r0, r1
1a00e2cc:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
1a00e2d0:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
1a00e2d4:	f5b0 2fa0 	cmp.w	r0, #327680	; 0x50000
1a00e2d8:	f300 8162 	bgt.w	1a00e5a0 <inv_process_compass_only_cal+0x348>
1a00e2dc:	f8d8 40a8 	ldr.w	r4, [r8, #168]	; 0xa8
1a00e2e0:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
1a00e2e4:	1a20      	subs	r0, r4, r0
1a00e2e6:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
1a00e2ea:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
1a00e2ee:	f5b4 2fa0 	cmp.w	r4, #327680	; 0x50000
1a00e2f2:	dc13      	bgt.n	1a00e31c <inv_process_compass_only_cal+0xc4>
1a00e2f4:	1209      	asrs	r1, r1, #8
1a00e2f6:	1212      	asrs	r2, r2, #8
1a00e2f8:	fb01 f101 	mul.w	r1, r1, r1
1a00e2fc:	1200      	asrs	r0, r0, #8
1a00e2fe:	fb02 1202 	mla	r2, r2, r2, r1
1a00e302:	fb00 2000 	mla	r0, r0, r0, r2
1a00e306:	f5b0 3f40 	cmp.w	r0, #196608	; 0x30000
1a00e30a:	f280 8146 	bge.w	1a00e59a <inv_process_compass_only_cal+0x342>
1a00e30e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
1a00e312:	2a00      	cmp	r2, #0
1a00e314:	ddac      	ble.n	1a00e270 <inv_process_compass_only_cal+0x18>
1a00e316:	3a01      	subs	r2, #1
1a00e318:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
1a00e31c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
1a00e320:	4c89      	ldr	r4, [pc, #548]	; (1a00e548 <inv_process_compass_only_cal+0x2f0>)
1a00e322:	2b01      	cmp	r3, #1
1a00e324:	f000 81ac 	beq.w	1a00e680 <inv_process_compass_only_cal+0x428>
1a00e328:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
1a00e32c:	2b00      	cmp	r3, #0
1a00e32e:	dd03      	ble.n	1a00e338 <inv_process_compass_only_cal+0xe0>
1a00e330:	4a85      	ldr	r2, [pc, #532]	; (1a00e548 <inv_process_compass_only_cal+0x2f0>)
1a00e332:	3b01      	subs	r3, #1
1a00e334:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
1a00e338:	f8df b228 	ldr.w	fp, [pc, #552]	; 1a00e564 <inv_process_compass_only_cal+0x30c>
1a00e33c:	2200      	movs	r2, #0
1a00e33e:	2300      	movs	r3, #0
1a00e340:	e9db 0130 	ldrd	r0, r1, [fp, #192]	; 0xc0
1a00e344:	f005 fe6c 	bl	1a014020 <__aeabi_dcmpgt>
1a00e348:	b1b0      	cbz	r0, 1a00e378 <inv_process_compass_only_cal+0x120>
1a00e34a:	22e8      	movs	r2, #232	; 0xe8
1a00e34c:	4659      	mov	r1, fp
1a00e34e:	a826      	add	r0, sp, #152	; 0x98
1a00e350:	f006 fc48 	bl	1a014be4 <memcpy>
1a00e354:	4658      	mov	r0, fp
1a00e356:	a914      	add	r1, sp, #80	; 0x50
1a00e358:	f7fe fd78 	bl	1a00ce4c <inv_set_terms>
1a00e35c:	4658      	mov	r0, fp
1a00e35e:	f10b 01c8 	add.w	r1, fp, #200	; 0xc8
1a00e362:	aa0e      	add	r2, sp, #56	; 0x38
1a00e364:	f7fe fef8 	bl	1a00d158 <inv_compute_bias>
1a00e368:	2800      	cmp	r0, #0
1a00e36a:	f040 8121 	bne.w	1a00e5b0 <inv_process_compass_only_cal+0x358>
1a00e36e:	4658      	mov	r0, fp
1a00e370:	a926      	add	r1, sp, #152	; 0x98
1a00e372:	22e8      	movs	r2, #232	; 0xe8
1a00e374:	f006 fc36 	bl	1a014be4 <memcpy>
1a00e378:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
1a00e37c:	05da      	lsls	r2, r3, #23
1a00e37e:	d504      	bpl.n	1a00e38a <inv_process_compass_only_cal+0x132>
1a00e380:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
1a00e384:	05db      	lsls	r3, r3, #23
1a00e386:	f100 8175 	bmi.w	1a00e674 <inv_process_compass_only_cal+0x41c>
1a00e38a:	4d70      	ldr	r5, [pc, #448]	; (1a00e54c <inv_process_compass_only_cal+0x2f4>)
1a00e38c:	2400      	movs	r4, #0
1a00e38e:	e9cd 4508 	strd	r4, r5, [sp, #32]
1a00e392:	4d6f      	ldr	r5, [pc, #444]	; (1a00e550 <inv_process_compass_only_cal+0x2f8>)
1a00e394:	4b6f      	ldr	r3, [pc, #444]	; (1a00e554 <inv_process_compass_only_cal+0x2fc>)
1a00e396:	2200      	movs	r2, #0
1a00e398:	e9d5 0130 	ldrd	r0, r1, [r5, #192]	; 0xc0
1a00e39c:	f005 fe22 	bl	1a013fe4 <__aeabi_dcmplt>
1a00e3a0:	2800      	cmp	r0, #0
1a00e3a2:	f47f af65 	bne.w	1a00e270 <inv_process_compass_only_cal+0x18>
1a00e3a6:	4628      	mov	r0, r5
1a00e3a8:	f105 01c8 	add.w	r1, r5, #200	; 0xc8
1a00e3ac:	aa0e      	add	r2, sp, #56	; 0x38
1a00e3ae:	f7fe fed3 	bl	1a00d158 <inv_compute_bias>
1a00e3b2:	2800      	cmp	r0, #0
1a00e3b4:	f43f af5c 	beq.w	1a00e270 <inv_process_compass_only_cal+0x18>
1a00e3b8:	f8d8 00ac 	ldr.w	r0, [r8, #172]	; 0xac
1a00e3bc:	4d62      	ldr	r5, [pc, #392]	; (1a00e548 <inv_process_compass_only_cal+0x2f0>)
1a00e3be:	f005 fb39 	bl	1a013a34 <__aeabi_i2d>
1a00e3c2:	4602      	mov	r2, r0
1a00e3c4:	460b      	mov	r3, r1
1a00e3c6:	a15e      	add	r1, pc, #376	; (adr r1, 1a00e540 <inv_process_compass_only_cal+0x2e8>)
1a00e3c8:	e9d1 0100 	ldrd	r0, r1, [r1]
1a00e3cc:	f005 fcc2 	bl	1a013d54 <__aeabi_ddiv>
1a00e3d0:	4b5f      	ldr	r3, [pc, #380]	; (1a00e550 <inv_process_compass_only_cal+0x2f8>)
1a00e3d2:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
1a00e3d6:	e9cd 2300 	strd	r2, r3, [sp]
1a00e3da:	4b5d      	ldr	r3, [pc, #372]	; (1a00e550 <inv_process_compass_only_cal+0x2f8>)
1a00e3dc:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
1a00e3e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
1a00e3e4:	4b5a      	ldr	r3, [pc, #360]	; (1a00e550 <inv_process_compass_only_cal+0x2f8>)
1a00e3e6:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
1a00e3ea:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00e3ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a00e3f2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
1a00e3f6:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00e3fa:	eb07 04c1 	add.w	r4, r7, r1, lsl #3
1a00e3fe:	e9c4 2300 	strd	r2, r3, [r4]
1a00e402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a00e406:	e9c4 2302 	strd	r2, r3, [r4, #8]
1a00e40a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00e40e:	3103      	adds	r1, #3
1a00e410:	2914      	cmp	r1, #20
1a00e412:	e9c4 2304 	strd	r2, r3, [r4, #16]
1a00e416:	f300 81be 	bgt.w	1a00e796 <inv_process_compass_only_cal+0x53e>
1a00e41a:	f8c5 10a8 	str.w	r1, [r5, #168]	; 0xa8
1a00e41e:	4c4a      	ldr	r4, [pc, #296]	; (1a00e548 <inv_process_compass_only_cal+0x2f0>)
1a00e420:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
1a00e424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a00e426:	ad1a      	add	r5, sp, #104	; 0x68
1a00e428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a00e42a:	e894 0003 	ldmia.w	r4, {r0, r1}
1a00e42e:	f1a4 0710 	sub.w	r7, r4, #16
1a00e432:	463e      	mov	r6, r7
1a00e434:	e885 0003 	stmia.w	r5, {r0, r1}
1a00e438:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1a00e43a:	ad20      	add	r5, sp, #128	; 0x80
1a00e43c:	9507      	str	r5, [sp, #28]
1a00e43e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a00e440:	e894 0003 	ldmia.w	r4, {r0, r1}
1a00e444:	e885 0003 	stmia.w	r5, {r0, r1}
1a00e448:	f04f 0a02 	mov.w	sl, #2
1a00e44c:	ae1a      	add	r6, sp, #104	; 0x68
1a00e44e:	eb07 09ca 	add.w	r9, r7, sl, lsl #3
1a00e452:	f10d 0880 	add.w	r8, sp, #128	; 0x80
1a00e456:	e9f9 4502 	ldrd	r4, r5, [r9, #8]!
1a00e45a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
1a00e45e:	4622      	mov	r2, r4
1a00e460:	462b      	mov	r3, r5
1a00e462:	f005 fddd 	bl	1a014020 <__aeabi_dcmpgt>
1a00e466:	b108      	cbz	r0, 1a00e46c <inv_process_compass_only_cal+0x214>
1a00e468:	e946 4502 	strd	r4, r5, [r6, #-8]
1a00e46c:	e8f8 2302 	ldrd	r2, r3, [r8], #8
1a00e470:	4620      	mov	r0, r4
1a00e472:	4629      	mov	r1, r5
1a00e474:	f005 fdd4 	bl	1a014020 <__aeabi_dcmpgt>
1a00e478:	b108      	cbz	r0, 1a00e47e <inv_process_compass_only_cal+0x226>
1a00e47a:	e948 4502 	strd	r4, r5, [r8, #-8]
1a00e47e:	9c07      	ldr	r4, [sp, #28]
1a00e480:	42a6      	cmp	r6, r4
1a00e482:	d1e8      	bne.n	1a00e456 <inv_process_compass_only_cal+0x1fe>
1a00e484:	f10a 0a03 	add.w	sl, sl, #3
1a00e488:	f1ba 0f14 	cmp.w	sl, #20
1a00e48c:	d1de      	bne.n	1a00e44c <inv_process_compass_only_cal+0x1f4>
1a00e48e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
1a00e492:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
1a00e496:	f005 f97f 	bl	1a013798 <__aeabi_dsub>
1a00e49a:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
1a00e49e:	4604      	mov	r4, r0
1a00e4a0:	460d      	mov	r5, r1
1a00e4a2:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
1a00e4a6:	f005 f977 	bl	1a013798 <__aeabi_dsub>
1a00e4aa:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
1a00e4ae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00e4b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00e4b6:	4620      	mov	r0, r4
1a00e4b8:	4629      	mov	r1, r5
1a00e4ba:	f005 fdb1 	bl	1a014020 <__aeabi_dcmpgt>
1a00e4be:	b108      	cbz	r0, 1a00e4c4 <inv_process_compass_only_cal+0x26c>
1a00e4c0:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
1a00e4c4:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
1a00e4c8:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
1a00e4cc:	f005 f964 	bl	1a013798 <__aeabi_dsub>
1a00e4d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a00e4d4:	4604      	mov	r4, r0
1a00e4d6:	460d      	mov	r5, r1
1a00e4d8:	f005 fd84 	bl	1a013fe4 <__aeabi_dcmplt>
1a00e4dc:	b108      	cbz	r0, 1a00e4e2 <inv_process_compass_only_cal+0x28a>
1a00e4de:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
1a00e4e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00e4e6:	4622      	mov	r2, r4
1a00e4e8:	462b      	mov	r3, r5
1a00e4ea:	f005 fd7b 	bl	1a013fe4 <__aeabi_dcmplt>
1a00e4ee:	b130      	cbz	r0, 1a00e4fe <inv_process_compass_only_cal+0x2a6>
1a00e4f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00e4f4:	2200      	movs	r2, #0
1a00e4f6:	4b18      	ldr	r3, [pc, #96]	; (1a00e558 <inv_process_compass_only_cal+0x300>)
1a00e4f8:	f005 fd74 	bl	1a013fe4 <__aeabi_dcmplt>
1a00e4fc:	b9e8      	cbnz	r0, 1a00e53a <inv_process_compass_only_cal+0x2e2>
1a00e4fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00e502:	4622      	mov	r2, r4
1a00e504:	462b      	mov	r3, r5
1a00e506:	f005 fd8b 	bl	1a014020 <__aeabi_dcmpgt>
1a00e50a:	2800      	cmp	r0, #0
1a00e50c:	f000 814b 	beq.w	1a00e7a6 <inv_process_compass_only_cal+0x54e>
1a00e510:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a00e514:	2200      	movs	r2, #0
1a00e516:	4b11      	ldr	r3, [pc, #68]	; (1a00e55c <inv_process_compass_only_cal+0x304>)
1a00e518:	f005 fd64 	bl	1a013fe4 <__aeabi_dcmplt>
1a00e51c:	2800      	cmp	r0, #0
1a00e51e:	f040 8153 	bne.w	1a00e7c8 <inv_process_compass_only_cal+0x570>
1a00e522:	4e0b      	ldr	r6, [pc, #44]	; (1a00e550 <inv_process_compass_only_cal+0x2f8>)
1a00e524:	e9d6 4530 	ldrd	r4, r5, [r6, #192]	; 0xc0
1a00e528:	4620      	mov	r0, r4
1a00e52a:	4629      	mov	r1, r5
1a00e52c:	2200      	movs	r2, #0
1a00e52e:	4b0c      	ldr	r3, [pc, #48]	; (1a00e560 <inv_process_compass_only_cal+0x308>)
1a00e530:	f005 fd76 	bl	1a014020 <__aeabi_dcmpgt>
1a00e534:	2800      	cmp	r0, #0
1a00e536:	f43f ae9b 	beq.w	1a00e270 <inv_process_compass_only_cal+0x18>
1a00e53a:	f7ff fe65 	bl	1a00e208 <inv_reset_data_collection>
1a00e53e:	e697      	b.n	1a00e270 <inv_process_compass_only_cal+0x18>
1a00e540:	9999999a 	.word	0x9999999a
1a00e544:	41a99999 	.word	0x41a99999
1a00e548:	10087ad0 	.word	0x10087ad0
1a00e54c:	40080000 	.word	0x40080000
1a00e550:	10087900 	.word	0x10087900
1a00e554:	40340000 	.word	0x40340000
1a00e558:	3ff80000 	.word	0x3ff80000
1a00e55c:	40100000 	.word	0x40100000
1a00e560:	409f4000 	.word	0x409f4000
1a00e564:	100879e8 	.word	0x100879e8
1a00e568:	f108 0018 	add.w	r0, r8, #24
1a00e56c:	f7f9 fc16 	bl	1a007d9c <inv_get_gyro_sum_of_sqr>
1a00e570:	f5b0 4fc8 	cmp.w	r0, #25600	; 0x6400
1a00e574:	f080 8113 	bcs.w	1a00e79e <inv_process_compass_only_cal+0x546>
1a00e578:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
1a00e57c:	2b00      	cmp	r3, #0
1a00e57e:	f77f ae77 	ble.w	1a00e270 <inv_process_compass_only_cal+0x18>
1a00e582:	4a8b      	ldr	r2, [pc, #556]	; (1a00e7b0 <inv_process_compass_only_cal+0x558>)
1a00e584:	3b01      	subs	r3, #1
1a00e586:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
1a00e58a:	e6c7      	b.n	1a00e31c <inv_process_compass_only_cal+0xc4>
1a00e58c:	f507 7090 	add.w	r0, r7, #288	; 0x120
1a00e590:	f7fd fd86 	bl	1a00c0a0 <inv_check_sample_balance>
1a00e594:	f8c7 4174 	str.w	r4, [r7, #372]	; 0x174
1a00e598:	e680      	b.n	1a00e29c <inv_process_compass_only_cal+0x44>
1a00e59a:	2204      	movs	r2, #4
1a00e59c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
1a00e5a0:	f108 02a0 	add.w	r2, r8, #160	; 0xa0
1a00e5a4:	ca07      	ldmia	r2, {r0, r1, r2}
1a00e5a6:	f503 738a 	add.w	r3, r3, #276	; 0x114
1a00e5aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
1a00e5ae:	e6b5      	b.n	1a00e31c <inv_process_compass_only_cal+0xc4>
1a00e5b0:	4658      	mov	r0, fp
1a00e5b2:	f10b 01c8 	add.w	r1, fp, #200	; 0xc8
1a00e5b6:	f7ff f995 	bl	1a00d8e4 <inv_center_sum>
1a00e5ba:	4e7e      	ldr	r6, [pc, #504]	; (1a00e7b4 <inv_process_compass_only_cal+0x55c>)
1a00e5bc:	e9d6 2300 	ldrd	r2, r3, [r6]
1a00e5c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
1a00e5c4:	f005 f8e8 	bl	1a013798 <__aeabi_dsub>
1a00e5c8:	2200      	movs	r2, #0
1a00e5ca:	4604      	mov	r4, r0
1a00e5cc:	460d      	mov	r5, r1
1a00e5ce:	4b7a      	ldr	r3, [pc, #488]	; (1a00e7b8 <inv_process_compass_only_cal+0x560>)
1a00e5d0:	e9db 0130 	ldrd	r0, r1, [fp, #192]	; 0xc0
1a00e5d4:	f005 f8e0 	bl	1a013798 <__aeabi_dsub>
1a00e5d8:	4602      	mov	r2, r0
1a00e5da:	460b      	mov	r3, r1
1a00e5dc:	4620      	mov	r0, r4
1a00e5de:	4629      	mov	r1, r5
1a00e5e0:	f005 fbb8 	bl	1a013d54 <__aeabi_ddiv>
1a00e5e4:	f007 f8ca 	bl	1a01577c <sqrt>
1a00e5e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a00e5ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00e5f0:	4610      	mov	r0, r2
1a00e5f2:	4619      	mov	r1, r3
1a00e5f4:	e9db 4530 	ldrd	r4, r5, [fp, #192]	; 0xc0
1a00e5f8:	f005 f8d0 	bl	1a01379c <__adddf3>
1a00e5fc:	2200      	movs	r2, #0
1a00e5fe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00e602:	4b6d      	ldr	r3, [pc, #436]	; (1a00e7b8 <inv_process_compass_only_cal+0x560>)
1a00e604:	4620      	mov	r0, r4
1a00e606:	4629      	mov	r1, r5
1a00e608:	f005 f8c6 	bl	1a013798 <__aeabi_dsub>
1a00e60c:	4602      	mov	r2, r0
1a00e60e:	460b      	mov	r3, r1
1a00e610:	4620      	mov	r0, r4
1a00e612:	4629      	mov	r1, r5
1a00e614:	f005 fa74 	bl	1a013b00 <__aeabi_dmul>
1a00e618:	4602      	mov	r2, r0
1a00e61a:	460b      	mov	r3, r1
1a00e61c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00e620:	f005 fb98 	bl	1a013d54 <__aeabi_ddiv>
1a00e624:	2200      	movs	r2, #0
1a00e626:	2300      	movs	r3, #0
1a00e628:	4604      	mov	r4, r0
1a00e62a:	460d      	mov	r5, r1
1a00e62c:	f005 fcda 	bl	1a013fe4 <__aeabi_dcmplt>
1a00e630:	b118      	cbz	r0, 1a00e63a <inv_process_compass_only_cal+0x3e2>
1a00e632:	4620      	mov	r0, r4
1a00e634:	4629      	mov	r1, r5
1a00e636:	f007 f8a1 	bl	1a01577c <sqrt>
1a00e63a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
1a00e63e:	4c5c      	ldr	r4, [pc, #368]	; (1a00e7b0 <inv_process_compass_only_cal+0x558>)
1a00e640:	f005 fa0a 	bl	1a013a58 <__aeabi_f2d>
1a00e644:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
1a00e648:	f005 fa5a 	bl	1a013b00 <__aeabi_dmul>
1a00e64c:	4602      	mov	r2, r0
1a00e64e:	460b      	mov	r3, r1
1a00e650:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00e654:	f005 fce4 	bl	1a014020 <__aeabi_dcmpgt>
1a00e658:	2800      	cmp	r0, #0
1a00e65a:	f040 808f 	bne.w	1a00e77c <inv_process_compass_only_cal+0x524>
1a00e65e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
1a00e662:	2b00      	cmp	r3, #0
1a00e664:	f340 81f0 	ble.w	1a00ea48 <inv_process_compass_only_cal+0x7f0>
1a00e668:	a926      	add	r1, sp, #152	; 0x98
1a00e66a:	22e8      	movs	r2, #232	; 0xe8
1a00e66c:	4853      	ldr	r0, [pc, #332]	; (1a00e7bc <inv_process_compass_only_cal+0x564>)
1a00e66e:	f006 fab9 	bl	1a014be4 <memcpy>
1a00e672:	e681      	b.n	1a00e378 <inv_process_compass_only_cal+0x120>
1a00e674:	4852      	ldr	r0, [pc, #328]	; (1a00e7c0 <inv_process_compass_only_cal+0x568>)
1a00e676:	f7ff fd1b 	bl	1a00e0b0 <inv_check_sim>
1a00e67a:	e9cd 0108 	strd	r0, r1, [sp, #32]
1a00e67e:	e688      	b.n	1a00e392 <inv_process_compass_only_cal+0x13a>
1a00e680:	f9b8 108c 	ldrsh.w	r1, [r8, #140]	; 0x8c
1a00e684:	f9b8 208e 	ldrsh.w	r2, [r8, #142]	; 0x8e
1a00e688:	f9b8 3090 	ldrsh.w	r3, [r8, #144]	; 0x90
1a00e68c:	9114      	str	r1, [sp, #80]	; 0x50
1a00e68e:	484d      	ldr	r0, [pc, #308]	; (1a00e7c4 <inv_process_compass_only_cal+0x56c>)
1a00e690:	9215      	str	r2, [sp, #84]	; 0x54
1a00e692:	a914      	add	r1, sp, #80	; 0x50
1a00e694:	9316      	str	r3, [sp, #88]	; 0x58
1a00e696:	f7fe fbd9 	bl	1a00ce4c <inv_set_terms>
1a00e69a:	f8b8 308c 	ldrh.w	r3, [r8, #140]	; 0x8c
1a00e69e:	f9b4 10bc 	ldrsh.w	r1, [r4, #188]	; 0xbc
1a00e6a2:	b21a      	sxth	r2, r3
1a00e6a4:	4291      	cmp	r1, r2
1a00e6a6:	da0c      	bge.n	1a00e6c2 <inv_process_compass_only_cal+0x46a>
1a00e6a8:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
1a00e6ac:	f8b8 308e 	ldrh.w	r3, [r8, #142]	; 0x8e
1a00e6b0:	f8a4 30be 	strh.w	r3, [r4, #190]	; 0xbe
1a00e6b4:	f8b8 3090 	ldrh.w	r3, [r8, #144]	; 0x90
1a00e6b8:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
1a00e6bc:	f8b8 308c 	ldrh.w	r3, [r8, #140]	; 0x8c
1a00e6c0:	b21a      	sxth	r2, r3
1a00e6c2:	f9b7 00c2 	ldrsh.w	r0, [r7, #194]	; 0xc2
1a00e6c6:	493a      	ldr	r1, [pc, #232]	; (1a00e7b0 <inv_process_compass_only_cal+0x558>)
1a00e6c8:	4290      	cmp	r0, r2
1a00e6ca:	dd09      	ble.n	1a00e6e0 <inv_process_compass_only_cal+0x488>
1a00e6cc:	f8a1 30c2 	strh.w	r3, [r1, #194]	; 0xc2
1a00e6d0:	f8b8 308e 	ldrh.w	r3, [r8, #142]	; 0x8e
1a00e6d4:	f8a1 30c4 	strh.w	r3, [r1, #196]	; 0xc4
1a00e6d8:	f8b8 3090 	ldrh.w	r3, [r8, #144]	; 0x90
1a00e6dc:	f8a1 30c6 	strh.w	r3, [r1, #198]	; 0xc6
1a00e6e0:	f9b7 10ca 	ldrsh.w	r1, [r7, #202]	; 0xca
1a00e6e4:	f9b8 308e 	ldrsh.w	r3, [r8, #142]	; 0x8e
1a00e6e8:	4a31      	ldr	r2, [pc, #196]	; (1a00e7b0 <inv_process_compass_only_cal+0x558>)
1a00e6ea:	4299      	cmp	r1, r3
1a00e6ec:	da0d      	bge.n	1a00e70a <inv_process_compass_only_cal+0x4b2>
1a00e6ee:	f8b8 308c 	ldrh.w	r3, [r8, #140]	; 0x8c
1a00e6f2:	f8a2 30c8 	strh.w	r3, [r2, #200]	; 0xc8
1a00e6f6:	f8b8 308e 	ldrh.w	r3, [r8, #142]	; 0x8e
1a00e6fa:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca
1a00e6fe:	f8b8 3090 	ldrh.w	r3, [r8, #144]	; 0x90
1a00e702:	f8a2 30cc 	strh.w	r3, [r2, #204]	; 0xcc
1a00e706:	f9b8 308e 	ldrsh.w	r3, [r8, #142]	; 0x8e
1a00e70a:	f9b7 10d0 	ldrsh.w	r1, [r7, #208]	; 0xd0
1a00e70e:	4a28      	ldr	r2, [pc, #160]	; (1a00e7b0 <inv_process_compass_only_cal+0x558>)
1a00e710:	4299      	cmp	r1, r3
1a00e712:	dd0b      	ble.n	1a00e72c <inv_process_compass_only_cal+0x4d4>
1a00e714:	f8b8 308c 	ldrh.w	r3, [r8, #140]	; 0x8c
1a00e718:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
1a00e71c:	f8b8 308e 	ldrh.w	r3, [r8, #142]	; 0x8e
1a00e720:	f8a2 30d0 	strh.w	r3, [r2, #208]	; 0xd0
1a00e724:	f8b8 3090 	ldrh.w	r3, [r8, #144]	; 0x90
1a00e728:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
1a00e72c:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
1a00e730:	f9b8 3090 	ldrsh.w	r3, [r8, #144]	; 0x90
1a00e734:	4a1e      	ldr	r2, [pc, #120]	; (1a00e7b0 <inv_process_compass_only_cal+0x558>)
1a00e736:	4299      	cmp	r1, r3
1a00e738:	da0d      	bge.n	1a00e756 <inv_process_compass_only_cal+0x4fe>
1a00e73a:	f8b8 308c 	ldrh.w	r3, [r8, #140]	; 0x8c
1a00e73e:	f8a2 30d4 	strh.w	r3, [r2, #212]	; 0xd4
1a00e742:	f8b8 308e 	ldrh.w	r3, [r8, #142]	; 0x8e
1a00e746:	f8a2 30d6 	strh.w	r3, [r2, #214]	; 0xd6
1a00e74a:	f8b8 3090 	ldrh.w	r3, [r8, #144]	; 0x90
1a00e74e:	f8a2 30d8 	strh.w	r3, [r2, #216]	; 0xd8
1a00e752:	f9b8 3090 	ldrsh.w	r3, [r8, #144]	; 0x90
1a00e756:	f9b7 10de 	ldrsh.w	r1, [r7, #222]	; 0xde
1a00e75a:	4a15      	ldr	r2, [pc, #84]	; (1a00e7b0 <inv_process_compass_only_cal+0x558>)
1a00e75c:	4299      	cmp	r1, r3
1a00e75e:	f77f ade3 	ble.w	1a00e328 <inv_process_compass_only_cal+0xd0>
1a00e762:	f8b8 308c 	ldrh.w	r3, [r8, #140]	; 0x8c
1a00e766:	f8a2 30da 	strh.w	r3, [r2, #218]	; 0xda
1a00e76a:	f8b8 308e 	ldrh.w	r3, [r8, #142]	; 0x8e
1a00e76e:	f8a2 30dc 	strh.w	r3, [r2, #220]	; 0xdc
1a00e772:	f8b8 3090 	ldrh.w	r3, [r8, #144]	; 0x90
1a00e776:	f8a2 30de 	strh.w	r3, [r2, #222]	; 0xde
1a00e77a:	e5d5      	b.n	1a00e328 <inv_process_compass_only_cal+0xd0>
1a00e77c:	a926      	add	r1, sp, #152	; 0x98
1a00e77e:	22e8      	movs	r2, #232	; 0xe8
1a00e780:	480e      	ldr	r0, [pc, #56]	; (1a00e7bc <inv_process_compass_only_cal+0x564>)
1a00e782:	f006 fa2f 	bl	1a014be4 <memcpy>
1a00e786:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00e78a:	f002 f949 	bl	1a010a20 <inv_set_magnetic_disturbance>
1a00e78e:	230a      	movs	r3, #10
1a00e790:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
1a00e794:	e5f0      	b.n	1a00e378 <inv_process_compass_only_cal+0x120>
1a00e796:	2300      	movs	r3, #0
1a00e798:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
1a00e79c:	e63f      	b.n	1a00e41e <inv_process_compass_only_cal+0x1c6>
1a00e79e:	2304      	movs	r3, #4
1a00e7a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
1a00e7a4:	e5ba      	b.n	1a00e31c <inv_process_compass_only_cal+0xc4>
1a00e7a6:	4807      	ldr	r0, [pc, #28]	; (1a00e7c4 <inv_process_compass_only_cal+0x56c>)
1a00e7a8:	e9d0 4530 	ldrd	r4, r5, [r0, #192]	; 0xc0
1a00e7ac:	e6bc      	b.n	1a00e528 <inv_process_compass_only_cal+0x2d0>
1a00e7ae:	bf00      	nop
1a00e7b0:	10087ad0 	.word	0x10087ad0
1a00e7b4:	10087bd0 	.word	0x10087bd0
1a00e7b8:	3ff00000 	.word	0x3ff00000
1a00e7bc:	100879e8 	.word	0x100879e8
1a00e7c0:	10087c78 	.word	0x10087c78
1a00e7c4:	10087900 	.word	0x10087900
1a00e7c8:	4895      	ldr	r0, [pc, #596]	; (1a00ea20 <inv_process_compass_only_cal+0x7c8>)
1a00e7ca:	4b96      	ldr	r3, [pc, #600]	; (1a00ea24 <inv_process_compass_only_cal+0x7cc>)
1a00e7cc:	4e94      	ldr	r6, [pc, #592]	; (1a00ea20 <inv_process_compass_only_cal+0x7c8>)
1a00e7ce:	e9d0 4530 	ldrd	r4, r5, [r0, #192]	; 0xc0
1a00e7d2:	2200      	movs	r2, #0
1a00e7d4:	4620      	mov	r0, r4
1a00e7d6:	4629      	mov	r1, r5
1a00e7d8:	f005 fc22 	bl	1a014020 <__aeabi_dcmpgt>
1a00e7dc:	2800      	cmp	r0, #0
1a00e7de:	f43f aea3 	beq.w	1a00e528 <inv_process_compass_only_cal+0x2d0>
1a00e7e2:	e9db 0130 	ldrd	r0, r1, [fp, #192]	; 0xc0
1a00e7e6:	2200      	movs	r2, #0
1a00e7e8:	2300      	movs	r3, #0
1a00e7ea:	f8df a254 	ldr.w	sl, [pc, #596]	; 1a00ea40 <inv_process_compass_only_cal+0x7e8>
1a00e7ee:	f005 fbef 	bl	1a013fd0 <__aeabi_dcmpeq>
1a00e7f2:	2800      	cmp	r0, #0
1a00e7f4:	f040 8162 	bne.w	1a00eabc <inv_process_compass_only_cal+0x864>
1a00e7f8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
1a00e7fc:	f8df 9244 	ldr.w	r9, [pc, #580]	; 1a00ea44 <inv_process_compass_only_cal+0x7ec>
1a00e800:	f005 f918 	bl	1a013a34 <__aeabi_i2d>
1a00e804:	4622      	mov	r2, r4
1a00e806:	462b      	mov	r3, r5
1a00e808:	f005 faa4 	bl	1a013d54 <__aeabi_ddiv>
1a00e80c:	a380      	add	r3, pc, #512	; (adr r3, 1a00ea10 <inv_process_compass_only_cal+0x7b8>)
1a00e80e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00e812:	f005 fc05 	bl	1a014020 <__aeabi_dcmpgt>
1a00e816:	2800      	cmp	r0, #0
1a00e818:	f47f ae8f 	bne.w	1a00e53a <inv_process_compass_only_cal+0x2e2>
1a00e81c:	4630      	mov	r0, r6
1a00e81e:	f106 01c8 	add.w	r1, r6, #200	; 0xc8
1a00e822:	f7ff f85f 	bl	1a00d8e4 <inv_center_sum>
1a00e826:	4602      	mov	r2, r0
1a00e828:	460b      	mov	r3, r1
1a00e82a:	e9cd 0108 	strd	r0, r1, [sp, #32]
1a00e82e:	f004 ffb5 	bl	1a01379c <__adddf3>
1a00e832:	2200      	movs	r2, #0
1a00e834:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00e838:	4b7b      	ldr	r3, [pc, #492]	; (1a00ea28 <inv_process_compass_only_cal+0x7d0>)
1a00e83a:	4620      	mov	r0, r4
1a00e83c:	4629      	mov	r1, r5
1a00e83e:	f004 ffab 	bl	1a013798 <__aeabi_dsub>
1a00e842:	4602      	mov	r2, r0
1a00e844:	460b      	mov	r3, r1
1a00e846:	4620      	mov	r0, r4
1a00e848:	4629      	mov	r1, r5
1a00e84a:	f005 f959 	bl	1a013b00 <__aeabi_dmul>
1a00e84e:	4602      	mov	r2, r0
1a00e850:	460b      	mov	r3, r1
1a00e852:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00e856:	f005 fa7d 	bl	1a013d54 <__aeabi_ddiv>
1a00e85a:	f006 ff8f 	bl	1a01577c <sqrt>
1a00e85e:	4604      	mov	r4, r0
1a00e860:	f8d9 00e8 	ldr.w	r0, [r9, #232]	; 0xe8
1a00e864:	460d      	mov	r5, r1
1a00e866:	f005 f8f7 	bl	1a013a58 <__aeabi_f2d>
1a00e86a:	e9d9 2338 	ldrd	r2, r3, [r9, #224]	; 0xe0
1a00e86e:	f005 f947 	bl	1a013b00 <__aeabi_dmul>
1a00e872:	4602      	mov	r2, r0
1a00e874:	460b      	mov	r3, r1
1a00e876:	4620      	mov	r0, r4
1a00e878:	4629      	mov	r1, r5
1a00e87a:	f005 fbd1 	bl	1a014020 <__aeabi_dcmpgt>
1a00e87e:	2800      	cmp	r0, #0
1a00e880:	f47f ae5b 	bne.w	1a00e53a <inv_process_compass_only_cal+0x2e2>
1a00e884:	f8d9 00ac 	ldr.w	r0, [r9, #172]	; 0xac
1a00e888:	f005 f8d4 	bl	1a013a34 <__aeabi_i2d>
1a00e88c:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
1a00e890:	4602      	mov	r2, r0
1a00e892:	460b      	mov	r3, r1
1a00e894:	4620      	mov	r0, r4
1a00e896:	4629      	mov	r1, r5
1a00e898:	f005 fbc2 	bl	1a014020 <__aeabi_dcmpgt>
1a00e89c:	2800      	cmp	r0, #0
1a00e89e:	f47f ace7 	bne.w	1a00e270 <inv_process_compass_only_cal+0x18>
1a00e8a2:	f8d9 00b0 	ldr.w	r0, [r9, #176]	; 0xb0
1a00e8a6:	f005 f8c5 	bl	1a013a34 <__aeabi_i2d>
1a00e8aa:	4602      	mov	r2, r0
1a00e8ac:	460b      	mov	r3, r1
1a00e8ae:	4620      	mov	r0, r4
1a00e8b0:	4629      	mov	r1, r5
1a00e8b2:	f005 fb97 	bl	1a013fe4 <__aeabi_dcmplt>
1a00e8b6:	2800      	cmp	r0, #0
1a00e8b8:	f47f acda 	bne.w	1a00e270 <inv_process_compass_only_cal+0x18>
1a00e8bc:	4620      	mov	r0, r4
1a00e8be:	4629      	mov	r1, r5
1a00e8c0:	f7fe f8ce 	bl	1a00ca60 <inv_check_peaks.part.0.constprop.4>
1a00e8c4:	2800      	cmp	r0, #0
1a00e8c6:	f47f acd3 	bne.w	1a00e270 <inv_process_compass_only_cal+0x18>
1a00e8ca:	e9da 2332 	ldrd	r2, r3, [sl, #200]	; 0xc8
1a00e8ce:	e9d6 0132 	ldrd	r0, r1, [r6, #200]	; 0xc8
1a00e8d2:	f004 ff61 	bl	1a013798 <__aeabi_dsub>
1a00e8d6:	e9da 2334 	ldrd	r2, r3, [sl, #208]	; 0xd0
1a00e8da:	4604      	mov	r4, r0
1a00e8dc:	460d      	mov	r5, r1
1a00e8de:	e9d6 0134 	ldrd	r0, r1, [r6, #208]	; 0xd0
1a00e8e2:	f004 ff59 	bl	1a013798 <__aeabi_dsub>
1a00e8e6:	e9da 2336 	ldrd	r2, r3, [sl, #216]	; 0xd8
1a00e8ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00e8ee:	e9d6 0136 	ldrd	r0, r1, [r6, #216]	; 0xd8
1a00e8f2:	f004 ff51 	bl	1a013798 <__aeabi_dsub>
1a00e8f6:	4622      	mov	r2, r4
1a00e8f8:	4682      	mov	sl, r0
1a00e8fa:	468b      	mov	fp, r1
1a00e8fc:	462b      	mov	r3, r5
1a00e8fe:	4620      	mov	r0, r4
1a00e900:	4629      	mov	r1, r5
1a00e902:	f005 f8fd 	bl	1a013b00 <__aeabi_dmul>
1a00e906:	4604      	mov	r4, r0
1a00e908:	460d      	mov	r5, r1
1a00e90a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00e90e:	4602      	mov	r2, r0
1a00e910:	460b      	mov	r3, r1
1a00e912:	f005 f8f5 	bl	1a013b00 <__aeabi_dmul>
1a00e916:	4602      	mov	r2, r0
1a00e918:	460b      	mov	r3, r1
1a00e91a:	4620      	mov	r0, r4
1a00e91c:	4629      	mov	r1, r5
1a00e91e:	f004 ff3d 	bl	1a01379c <__adddf3>
1a00e922:	4652      	mov	r2, sl
1a00e924:	4604      	mov	r4, r0
1a00e926:	460d      	mov	r5, r1
1a00e928:	465b      	mov	r3, fp
1a00e92a:	4650      	mov	r0, sl
1a00e92c:	4659      	mov	r1, fp
1a00e92e:	f005 f8e7 	bl	1a013b00 <__aeabi_dmul>
1a00e932:	4602      	mov	r2, r0
1a00e934:	460b      	mov	r3, r1
1a00e936:	4620      	mov	r0, r4
1a00e938:	4629      	mov	r1, r5
1a00e93a:	f004 ff2f 	bl	1a01379c <__adddf3>
1a00e93e:	f006 ff1d 	bl	1a01577c <sqrt>
1a00e942:	4604      	mov	r4, r0
1a00e944:	460d      	mov	r5, r1
1a00e946:	f8d8 00ac 	ldr.w	r0, [r8, #172]	; 0xac
1a00e94a:	f005 f873 	bl	1a013a34 <__aeabi_i2d>
1a00e94e:	4622      	mov	r2, r4
1a00e950:	462b      	mov	r3, r5
1a00e952:	f005 f8d5 	bl	1a013b00 <__aeabi_dmul>
1a00e956:	2200      	movs	r2, #0
1a00e958:	4b34      	ldr	r3, [pc, #208]	; (1a00ea2c <inv_process_compass_only_cal+0x7d4>)
1a00e95a:	f005 f8d1 	bl	1a013b00 <__aeabi_dmul>
1a00e95e:	2200      	movs	r2, #0
1a00e960:	4b33      	ldr	r3, [pc, #204]	; (1a00ea30 <inv_process_compass_only_cal+0x7d8>)
1a00e962:	4604      	mov	r4, r0
1a00e964:	460d      	mov	r5, r1
1a00e966:	f005 fb5b 	bl	1a014020 <__aeabi_dcmpgt>
1a00e96a:	b9c8      	cbnz	r0, 1a00e9a0 <inv_process_compass_only_cal+0x748>
1a00e96c:	4620      	mov	r0, r4
1a00e96e:	4629      	mov	r1, r5
1a00e970:	2200      	movs	r2, #0
1a00e972:	4b30      	ldr	r3, [pc, #192]	; (1a00ea34 <inv_process_compass_only_cal+0x7dc>)
1a00e974:	f005 fb54 	bl	1a014020 <__aeabi_dcmpgt>
1a00e978:	2800      	cmp	r0, #0
1a00e97a:	f43f adde 	beq.w	1a00e53a <inv_process_compass_only_cal+0x2e2>
1a00e97e:	4d28      	ldr	r5, [pc, #160]	; (1a00ea20 <inv_process_compass_only_cal+0x7c8>)
1a00e980:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
1a00e984:	f005 f856 	bl	1a013a34 <__aeabi_i2d>
1a00e988:	e9d5 2330 	ldrd	r2, r3, [r5, #192]	; 0xc0
1a00e98c:	f005 f9e2 	bl	1a013d54 <__aeabi_ddiv>
1a00e990:	a321      	add	r3, pc, #132	; (adr r3, 1a00ea18 <inv_process_compass_only_cal+0x7c0>)
1a00e992:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00e996:	f005 fb25 	bl	1a013fe4 <__aeabi_dcmplt>
1a00e99a:	2800      	cmp	r0, #0
1a00e99c:	f43f adcd 	beq.w	1a00e53a <inv_process_compass_only_cal+0x2e2>
1a00e9a0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
1a00e9a4:	2b01      	cmp	r3, #1
1a00e9a6:	f47f adc8 	bne.w	1a00e53a <inv_process_compass_only_cal+0x2e2>
1a00e9aa:	4e1d      	ldr	r6, [pc, #116]	; (1a00ea20 <inv_process_compass_only_cal+0x7c8>)
1a00e9ac:	4c22      	ldr	r4, [pc, #136]	; (1a00ea38 <inv_process_compass_only_cal+0x7e0>)
1a00e9ae:	2000      	movs	r0, #0
1a00e9b0:	f7fa faf2 	bl	1a008f98 <inv_set_compass_state>
1a00e9b4:	e9d6 0132 	ldrd	r0, r1, [r6, #200]	; 0xc8
1a00e9b8:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
1a00e9bc:	2200      	movs	r2, #0
1a00e9be:	4b1f      	ldr	r3, [pc, #124]	; (1a00ea3c <inv_process_compass_only_cal+0x7e4>)
1a00e9c0:	e9c4 6700 	strd	r6, r7, [r4]
1a00e9c4:	f005 f89c 	bl	1a013b00 <__aeabi_dmul>
1a00e9c8:	f005 fb34 	bl	1a014034 <__aeabi_d2iz>
1a00e9cc:	4f14      	ldr	r7, [pc, #80]	; (1a00ea20 <inv_process_compass_only_cal+0x7c8>)
1a00e9ce:	4b1b      	ldr	r3, [pc, #108]	; (1a00ea3c <inv_process_compass_only_cal+0x7e4>)
1a00e9d0:	9011      	str	r0, [sp, #68]	; 0x44
1a00e9d2:	2200      	movs	r2, #0
1a00e9d4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
1a00e9d8:	f005 f892 	bl	1a013b00 <__aeabi_dmul>
1a00e9dc:	f005 fb2a 	bl	1a014034 <__aeabi_d2iz>
1a00e9e0:	2200      	movs	r2, #0
1a00e9e2:	4b16      	ldr	r3, [pc, #88]	; (1a00ea3c <inv_process_compass_only_cal+0x7e4>)
1a00e9e4:	9012      	str	r0, [sp, #72]	; 0x48
1a00e9e6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
1a00e9ea:	f005 f889 	bl	1a013b00 <__aeabi_dmul>
1a00e9ee:	f005 fb21 	bl	1a014034 <__aeabi_d2iz>
1a00e9f2:	2103      	movs	r1, #3
1a00e9f4:	9013      	str	r0, [sp, #76]	; 0x4c
1a00e9f6:	a811      	add	r0, sp, #68	; 0x44
1a00e9f8:	f7f8 fb4a 	bl	1a007090 <inv_set_compass_bias>
1a00e9fc:	4810      	ldr	r0, [pc, #64]	; (1a00ea40 <inv_process_compass_only_cal+0x7e8>)
1a00e9fe:	4639      	mov	r1, r7
1a00ea00:	2200      	movs	r2, #0
1a00ea02:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
1a00ea06:	f7fe f977 	bl	1a00ccf8 <inv_combine_compass_data>
1a00ea0a:	e596      	b.n	1a00e53a <inv_process_compass_only_cal+0x2e2>
1a00ea0c:	f3af 8000 	nop.w
1a00ea10:	70a3d70a 	.word	0x70a3d70a
1a00ea14:	3fe70a3d 	.word	0x3fe70a3d
1a00ea18:	33333333 	.word	0x33333333
1a00ea1c:	3fc33333 	.word	0x3fc33333
1a00ea20:	10087900 	.word	0x10087900
1a00ea24:	403e0000 	.word	0x403e0000
1a00ea28:	3ff00000 	.word	0x3ff00000
1a00ea2c:	3e100000 	.word	0x3e100000
1a00ea30:	40100000 	.word	0x40100000
1a00ea34:	40040000 	.word	0x40040000
1a00ea38:	10087bd0 	.word	0x10087bd0
1a00ea3c:	40f00000 	.word	0x40f00000
1a00ea40:	100879e8 	.word	0x100879e8
1a00ea44:	10087ad0 	.word	0x10087ad0
1a00ea48:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
1a00ea4c:	2b01      	cmp	r3, #1
1a00ea4e:	f47f ac93 	bne.w	1a00e378 <inv_process_compass_only_cal+0x120>
1a00ea52:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
1a00ea56:	2000      	movs	r0, #0
1a00ea58:	3301      	adds	r3, #1
1a00ea5a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
1a00ea5e:	f7fa fa9b 	bl	1a008f98 <inv_set_compass_state>
1a00ea62:	2200      	movs	r2, #0
1a00ea64:	4b69      	ldr	r3, [pc, #420]	; (1a00ec0c <inv_process_compass_only_cal+0x9b4>)
1a00ea66:	e9db 0132 	ldrd	r0, r1, [fp, #200]	; 0xc8
1a00ea6a:	f005 f849 	bl	1a013b00 <__aeabi_dmul>
1a00ea6e:	f005 fae1 	bl	1a014034 <__aeabi_d2iz>
1a00ea72:	2200      	movs	r2, #0
1a00ea74:	4b65      	ldr	r3, [pc, #404]	; (1a00ec0c <inv_process_compass_only_cal+0x9b4>)
1a00ea76:	9011      	str	r0, [sp, #68]	; 0x44
1a00ea78:	e9db 0134 	ldrd	r0, r1, [fp, #208]	; 0xd0
1a00ea7c:	f005 f840 	bl	1a013b00 <__aeabi_dmul>
1a00ea80:	f005 fad8 	bl	1a014034 <__aeabi_d2iz>
1a00ea84:	2200      	movs	r2, #0
1a00ea86:	4b61      	ldr	r3, [pc, #388]	; (1a00ec0c <inv_process_compass_only_cal+0x9b4>)
1a00ea88:	9012      	str	r0, [sp, #72]	; 0x48
1a00ea8a:	e9db 0136 	ldrd	r0, r1, [fp, #216]	; 0xd8
1a00ea8e:	f005 f837 	bl	1a013b00 <__aeabi_dmul>
1a00ea92:	f005 facf 	bl	1a014034 <__aeabi_d2iz>
1a00ea96:	2103      	movs	r1, #3
1a00ea98:	9013      	str	r0, [sp, #76]	; 0x4c
1a00ea9a:	a811      	add	r0, sp, #68	; 0x44
1a00ea9c:	f7f8 faf8 	bl	1a007090 <inv_set_compass_bias>
1a00eaa0:	e9db 0130 	ldrd	r0, r1, [fp, #192]	; 0xc0
1a00eaa4:	2200      	movs	r2, #0
1a00eaa6:	4b5a      	ldr	r3, [pc, #360]	; (1a00ec10 <inv_process_compass_only_cal+0x9b8>)
1a00eaa8:	f005 faba 	bl	1a014020 <__aeabi_dcmpgt>
1a00eaac:	2800      	cmp	r0, #0
1a00eaae:	f040 809e 	bne.w	1a00ebee <inv_process_compass_only_cal+0x996>
1a00eab2:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
1a00eab6:	e9c6 4500 	strd	r4, r5, [r6]
1a00eaba:	e45d      	b.n	1a00e378 <inv_process_compass_only_cal+0x120>
1a00eabc:	4630      	mov	r0, r6
1a00eabe:	f106 01c8 	add.w	r1, r6, #200	; 0xc8
1a00eac2:	f7fe ff0f 	bl	1a00d8e4 <inv_center_sum>
1a00eac6:	4e53      	ldr	r6, [pc, #332]	; (1a00ec14 <inv_process_compass_only_cal+0x9bc>)
1a00eac8:	4680      	mov	r8, r0
1a00eaca:	f506 7e80 	add.w	lr, r6, #256	; 0x100
1a00eace:	4689      	mov	r9, r1
1a00ead0:	e9ce 8900 	strd	r8, r9, [lr]
1a00ead4:	4602      	mov	r2, r0
1a00ead6:	460b      	mov	r3, r1
1a00ead8:	f004 fe60 	bl	1a01379c <__adddf3>
1a00eadc:	2200      	movs	r2, #0
1a00eade:	4680      	mov	r8, r0
1a00eae0:	4689      	mov	r9, r1
1a00eae2:	4620      	mov	r0, r4
1a00eae4:	4629      	mov	r1, r5
1a00eae6:	4b4c      	ldr	r3, [pc, #304]	; (1a00ec18 <inv_process_compass_only_cal+0x9c0>)
1a00eae8:	f004 fe56 	bl	1a013798 <__aeabi_dsub>
1a00eaec:	4602      	mov	r2, r0
1a00eaee:	460b      	mov	r3, r1
1a00eaf0:	4620      	mov	r0, r4
1a00eaf2:	4629      	mov	r1, r5
1a00eaf4:	f005 f804 	bl	1a013b00 <__aeabi_dmul>
1a00eaf8:	4602      	mov	r2, r0
1a00eafa:	460b      	mov	r3, r1
1a00eafc:	4640      	mov	r0, r8
1a00eafe:	4649      	mov	r1, r9
1a00eb00:	f005 f928 	bl	1a013d54 <__aeabi_ddiv>
1a00eb04:	f006 fe3a 	bl	1a01577c <sqrt>
1a00eb08:	4604      	mov	r4, r0
1a00eb0a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
1a00eb0e:	460d      	mov	r5, r1
1a00eb10:	f004 ffa2 	bl	1a013a58 <__aeabi_f2d>
1a00eb14:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
1a00eb18:	f004 fff2 	bl	1a013b00 <__aeabi_dmul>
1a00eb1c:	4602      	mov	r2, r0
1a00eb1e:	460b      	mov	r3, r1
1a00eb20:	4620      	mov	r0, r4
1a00eb22:	4629      	mov	r1, r5
1a00eb24:	f005 fa7c 	bl	1a014020 <__aeabi_dcmpgt>
1a00eb28:	2800      	cmp	r0, #0
1a00eb2a:	f47f ad06 	bne.w	1a00e53a <inv_process_compass_only_cal+0x2e2>
1a00eb2e:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
1a00eb32:	f004 ff7f 	bl	1a013a34 <__aeabi_i2d>
1a00eb36:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
1a00eb3a:	4602      	mov	r2, r0
1a00eb3c:	460b      	mov	r3, r1
1a00eb3e:	4620      	mov	r0, r4
1a00eb40:	4629      	mov	r1, r5
1a00eb42:	f005 fa6d 	bl	1a014020 <__aeabi_dcmpgt>
1a00eb46:	2800      	cmp	r0, #0
1a00eb48:	f47f ab92 	bne.w	1a00e270 <inv_process_compass_only_cal+0x18>
1a00eb4c:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
1a00eb50:	f004 ff70 	bl	1a013a34 <__aeabi_i2d>
1a00eb54:	4602      	mov	r2, r0
1a00eb56:	460b      	mov	r3, r1
1a00eb58:	4620      	mov	r0, r4
1a00eb5a:	4629      	mov	r1, r5
1a00eb5c:	f005 fa42 	bl	1a013fe4 <__aeabi_dcmplt>
1a00eb60:	2800      	cmp	r0, #0
1a00eb62:	f47f ab85 	bne.w	1a00e270 <inv_process_compass_only_cal+0x18>
1a00eb66:	4620      	mov	r0, r4
1a00eb68:	4629      	mov	r1, r5
1a00eb6a:	f7fd ff79 	bl	1a00ca60 <inv_check_peaks.part.0.constprop.4>
1a00eb6e:	2802      	cmp	r0, #2
1a00eb70:	f43f ace3 	beq.w	1a00e53a <inv_process_compass_only_cal+0x2e2>
1a00eb74:	2800      	cmp	r0, #0
1a00eb76:	f47f ab7b 	bne.w	1a00e270 <inv_process_compass_only_cal+0x18>
1a00eb7a:	f8d6 3198 	ldr.w	r3, [r6, #408]	; 0x198
1a00eb7e:	2b01      	cmp	r3, #1
1a00eb80:	f47f ab76 	bne.w	1a00e270 <inv_process_compass_only_cal+0x18>
1a00eb84:	f7fa fa08 	bl	1a008f98 <inv_set_compass_state>
1a00eb88:	4a24      	ldr	r2, [pc, #144]	; (1a00ec1c <inv_process_compass_only_cal+0x9c4>)
1a00eb8a:	4b20      	ldr	r3, [pc, #128]	; (1a00ec0c <inv_process_compass_only_cal+0x9b4>)
1a00eb8c:	4c23      	ldr	r4, [pc, #140]	; (1a00ec1c <inv_process_compass_only_cal+0x9c4>)
1a00eb8e:	e9d2 0132 	ldrd	r0, r1, [r2, #200]	; 0xc8
1a00eb92:	2200      	movs	r2, #0
1a00eb94:	f004 ffb4 	bl	1a013b00 <__aeabi_dmul>
1a00eb98:	f005 fa4c 	bl	1a014034 <__aeabi_d2iz>
1a00eb9c:	2200      	movs	r2, #0
1a00eb9e:	4b1b      	ldr	r3, [pc, #108]	; (1a00ec0c <inv_process_compass_only_cal+0x9b4>)
1a00eba0:	9011      	str	r0, [sp, #68]	; 0x44
1a00eba2:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
1a00eba6:	f004 ffab 	bl	1a013b00 <__aeabi_dmul>
1a00ebaa:	f005 fa43 	bl	1a014034 <__aeabi_d2iz>
1a00ebae:	2200      	movs	r2, #0
1a00ebb0:	4b16      	ldr	r3, [pc, #88]	; (1a00ec0c <inv_process_compass_only_cal+0x9b4>)
1a00ebb2:	9012      	str	r0, [sp, #72]	; 0x48
1a00ebb4:	e9d4 0136 	ldrd	r0, r1, [r4, #216]	; 0xd8
1a00ebb8:	f004 ffa2 	bl	1a013b00 <__aeabi_dmul>
1a00ebbc:	f005 fa3a 	bl	1a014034 <__aeabi_d2iz>
1a00ebc0:	2103      	movs	r1, #3
1a00ebc2:	9013      	str	r0, [sp, #76]	; 0x4c
1a00ebc4:	a811      	add	r0, sp, #68	; 0x44
1a00ebc6:	f7f8 fa63 	bl	1a007090 <inv_set_compass_bias>
1a00ebca:	2001      	movs	r0, #1
1a00ebcc:	f7fa f9d4 	bl	1a008f78 <inv_set_compass_bias_found>
1a00ebd0:	2319      	movs	r3, #25
1a00ebd2:	a817      	add	r0, sp, #92	; 0x5c
1a00ebd4:	9317      	str	r3, [sp, #92]	; 0x5c
1a00ebd6:	9318      	str	r3, [sp, #96]	; 0x60
1a00ebd8:	9319      	str	r3, [sp, #100]	; 0x64
1a00ebda:	f7fa f9f9 	bl	1a008fd0 <inv_set_compass_bias_error>
1a00ebde:	4810      	ldr	r0, [pc, #64]	; (1a00ec20 <inv_process_compass_only_cal+0x9c8>)
1a00ebe0:	4621      	mov	r1, r4
1a00ebe2:	2200      	movs	r2, #0
1a00ebe4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
1a00ebe8:	f7fe f886 	bl	1a00ccf8 <inv_combine_compass_data>
1a00ebec:	e4a5      	b.n	1a00e53a <inv_process_compass_only_cal+0x2e2>
1a00ebee:	480c      	ldr	r0, [pc, #48]	; (1a00ec20 <inv_process_compass_only_cal+0x9c8>)
1a00ebf0:	4a0c      	ldr	r2, [pc, #48]	; (1a00ec24 <inv_process_compass_only_cal+0x9cc>)
1a00ebf2:	4601      	mov	r1, r0
1a00ebf4:	4613      	mov	r3, r2
1a00ebf6:	f7fe f87f 	bl	1a00ccf8 <inv_combine_compass_data>
1a00ebfa:	4809      	ldr	r0, [pc, #36]	; (1a00ec20 <inv_process_compass_only_cal+0x9c8>)
1a00ebfc:	f100 01c8 	add.w	r1, r0, #200	; 0xc8
1a00ec00:	f7fe fe70 	bl	1a00d8e4 <inv_center_sum>
1a00ec04:	e9cd 0108 	strd	r0, r1, [sp, #32]
1a00ec08:	e753      	b.n	1a00eab2 <inv_process_compass_only_cal+0x85a>
1a00ec0a:	bf00      	nop
1a00ec0c:	40f00000 	.word	0x40f00000
1a00ec10:	409f4000 	.word	0x409f4000
1a00ec14:	10087ad0 	.word	0x10087ad0
1a00ec18:	3ff00000 	.word	0x3ff00000
1a00ec1c:	10087900 	.word	0x10087900
1a00ec20:	100879e8 	.word	0x100879e8
1a00ec24:	3ee66666 	.word	0x3ee66666

1a00ec28 <inv_generate_vector_compass_cal>:
1a00ec28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00ec2a:	4c27      	ldr	r4, [pc, #156]	; (1a00ecc8 <inv_generate_vector_compass_cal+0xa0>)
1a00ec2c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
1a00ec30:	4605      	mov	r5, r0
1a00ec32:	b1bb      	cbz	r3, 1a00ec64 <inv_generate_vector_compass_cal+0x3c>
1a00ec34:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
1a00ec38:	f644 631f 	movw	r3, #19999	; 0x4e1f
1a00ec3c:	429a      	cmp	r2, r3
1a00ec3e:	dc08      	bgt.n	1a00ec52 <inv_generate_vector_compass_cal+0x2a>
1a00ec40:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
1a00ec44:	4820      	ldr	r0, [pc, #128]	; (1a00ecc8 <inv_generate_vector_compass_cal+0xa0>)
1a00ec46:	1852      	adds	r2, r2, r1
1a00ec48:	429a      	cmp	r2, r3
1a00ec4a:	dd07      	ble.n	1a00ec5c <inv_generate_vector_compass_cal+0x34>
1a00ec4c:	2300      	movs	r3, #0
1a00ec4e:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
1a00ec52:	4628      	mov	r0, r5
1a00ec54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a00ec58:	f7ff bafe 	b.w	1a00e258 <inv_process_compass_only_cal>
1a00ec5c:	f8c0 2110 	str.w	r2, [r0, #272]	; 0x110
1a00ec60:	2000      	movs	r0, #0
1a00ec62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00ec64:	f8d0 60ac 	ldr.w	r6, [r0, #172]	; 0xac
1a00ec68:	b1f6      	cbz	r6, 1a00eca8 <inv_generate_vector_compass_cal+0x80>
1a00ec6a:	17f7      	asrs	r7, r6, #31
1a00ec6c:	4632      	mov	r2, r6
1a00ec6e:	463b      	mov	r3, r7
1a00ec70:	2000      	movs	r0, #0
1a00ec72:	2119      	movs	r1, #25
1a00ec74:	f005 fd50 	bl	1a014718 <__aeabi_ldivmod>
1a00ec78:	4632      	mov	r2, r6
1a00ec7a:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
1a00ec7e:	463b      	mov	r3, r7
1a00ec80:	2000      	movs	r0, #0
1a00ec82:	2105      	movs	r1, #5
1a00ec84:	f005 fd48 	bl	1a014718 <__aeabi_ldivmod>
1a00ec88:	4632      	mov	r2, r6
1a00ec8a:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
1a00ec8e:	463b      	mov	r3, r7
1a00ec90:	2000      	movs	r0, #0
1a00ec92:	2196      	movs	r1, #150	; 0x96
1a00ec94:	f005 fd40 	bl	1a014718 <__aeabi_ldivmod>
1a00ec98:	f004 fecc 	bl	1a013a34 <__aeabi_i2d>
1a00ec9c:	e9c4 0138 	strd	r0, r1, [r4, #224]	; 0xe0
1a00eca0:	2301      	movs	r3, #1
1a00eca2:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
1a00eca6:	e7c5      	b.n	1a00ec34 <inv_generate_vector_compass_cal+0xc>
1a00eca8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
1a00ecac:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
1a00ecb0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
1a00ecb4:	a302      	add	r3, pc, #8	; (adr r3, 1a00ecc0 <inv_generate_vector_compass_cal+0x98>)
1a00ecb6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00ecba:	e9c4 2338 	strd	r2, r3, [r4, #224]	; 0xe0
1a00ecbe:	e7ef      	b.n	1a00eca0 <inv_generate_vector_compass_cal+0x78>
1a00ecc0:	ffc00000 	.word	0xffc00000
1a00ecc4:	41dfffff 	.word	0x41dfffff
1a00ecc8:	10087ad0 	.word	0x10087ad0
1a00eccc:	f3af 8000 	nop.w

1a00ecd0 <inv_init_vector_compass_cal>:
1a00ecd0:	b510      	push	{r4, lr}
1a00ecd2:	4c15      	ldr	r4, [pc, #84]	; (1a00ed28 <inv_init_vector_compass_cal+0x58>)
1a00ecd4:	4815      	ldr	r0, [pc, #84]	; (1a00ed2c <inv_init_vector_compass_cal+0x5c>)
1a00ecd6:	2100      	movs	r1, #0
1a00ecd8:	22e8      	movs	r2, #232	; 0xe8
1a00ecda:	f006 f881 	bl	1a014de0 <memset>
1a00ecde:	f7ff fa93 	bl	1a00e208 <inv_reset_data_collection>
1a00ece2:	2100      	movs	r1, #0
1a00ece4:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
1a00ece8:	4620      	mov	r0, r4
1a00ecea:	f006 f879 	bl	1a014de0 <memset>
1a00ecee:	f504 7090 	add.w	r0, r4, #288	; 0x120
1a00ecf2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
1a00ecf6:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
1a00ecfa:	f7fd f96b 	bl	1a00bfd4 <inv_init_check_sample_balance_parameter>
1a00ecfe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
1a00ed02:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
1a00ed06:	230a      	movs	r3, #10
1a00ed08:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
1a00ed0c:	231e      	movs	r3, #30
1a00ed0e:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
1a00ed12:	4b07      	ldr	r3, [pc, #28]	; (1a00ed30 <inv_init_vector_compass_cal+0x60>)
1a00ed14:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
1a00ed18:	4b06      	ldr	r3, [pc, #24]	; (1a00ed34 <inv_init_vector_compass_cal+0x64>)
1a00ed1a:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
1a00ed1e:	4b06      	ldr	r3, [pc, #24]	; (1a00ed38 <inv_init_vector_compass_cal+0x68>)
1a00ed20:	2000      	movs	r0, #0
1a00ed22:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
1a00ed26:	bd10      	pop	{r4, pc}
1a00ed28:	10087ad0 	.word	0x10087ad0
1a00ed2c:	100879e8 	.word	0x100879e8
1a00ed30:	3ecccccd 	.word	0x3ecccccd
1a00ed34:	3f333333 	.word	0x3f333333
1a00ed38:	3f19999a 	.word	0x3f19999a

1a00ed3c <inv_enable_vector_compass_cal>:
1a00ed3c:	b508      	push	{r3, lr}
1a00ed3e:	f7ff ffc7 	bl	1a00ecd0 <inv_init_vector_compass_cal>
1a00ed42:	b100      	cbz	r0, 1a00ed46 <inv_enable_vector_compass_cal+0xa>
1a00ed44:	bd08      	pop	{r3, pc}
1a00ed46:	4802      	ldr	r0, [pc, #8]	; (1a00ed50 <inv_enable_vector_compass_cal+0x14>)
1a00ed48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a00ed4c:	f7fa b9d4 	b.w	1a0090f8 <inv_register_mpl_start_notification>
1a00ed50:	1a00ca51 	.word	0x1a00ca51

1a00ed54 <inv_init_maxmin>:
1a00ed54:	07c1      	lsls	r1, r0, #31
1a00ed56:	d50a      	bpl.n	1a00ed6e <inv_init_maxmin+0x1a>
1a00ed58:	4b18      	ldr	r3, [pc, #96]	; (1a00edbc <inv_init_maxmin+0x68>)
1a00ed5a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
1a00ed5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a00ed62:	6699      	str	r1, [r3, #104]	; 0x68
1a00ed64:	66d9      	str	r1, [r3, #108]	; 0x6c
1a00ed66:	6719      	str	r1, [r3, #112]	; 0x70
1a00ed68:	675a      	str	r2, [r3, #116]	; 0x74
1a00ed6a:	679a      	str	r2, [r3, #120]	; 0x78
1a00ed6c:	67da      	str	r2, [r3, #124]	; 0x7c
1a00ed6e:	0782      	lsls	r2, r0, #30
1a00ed70:	d510      	bpl.n	1a00ed94 <inv_init_maxmin+0x40>
1a00ed72:	4b12      	ldr	r3, [pc, #72]	; (1a00edbc <inv_init_maxmin+0x68>)
1a00ed74:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
1a00ed78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a00ed7c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
1a00ed80:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
1a00ed84:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
1a00ed88:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
1a00ed8c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
1a00ed90:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
1a00ed94:	0743      	lsls	r3, r0, #29
1a00ed96:	d510      	bpl.n	1a00edba <inv_init_maxmin+0x66>
1a00ed98:	4b08      	ldr	r3, [pc, #32]	; (1a00edbc <inv_init_maxmin+0x68>)
1a00ed9a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
1a00ed9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a00eda2:	f8c3 1198 	str.w	r1, [r3, #408]	; 0x198
1a00eda6:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
1a00edaa:	f8c3 11a0 	str.w	r1, [r3, #416]	; 0x1a0
1a00edae:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
1a00edb2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
1a00edb6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
1a00edba:	4770      	bx	lr
1a00edbc:	10087d60 	.word	0x10087d60

1a00edc0 <inv_start_fast_nomot>:
1a00edc0:	b510      	push	{r4, lr}
1a00edc2:	4c0d      	ldr	r4, [pc, #52]	; (1a00edf8 <inv_start_fast_nomot+0x38>)
1a00edc4:	2100      	movs	r1, #0
1a00edc6:	f44f 7218 	mov.w	r2, #608	; 0x260
1a00edca:	4620      	mov	r0, r4
1a00edcc:	f006 f808 	bl	1a014de0 <memset>
1a00edd0:	2007      	movs	r0, #7
1a00edd2:	f7ff ffbf 	bl	1a00ed54 <inv_init_maxmin>
1a00edd6:	2301      	movs	r3, #1
1a00edd8:	4618      	mov	r0, r3
1a00edda:	2103      	movs	r1, #3
1a00eddc:	2200      	movs	r2, #0
1a00edde:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
1a00ede2:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
1a00ede6:	f7f8 ff1b 	bl	1a007c20 <inv_set_message>
1a00edea:	4804      	ldr	r0, [pc, #16]	; (1a00edfc <inv_start_fast_nomot+0x3c>)
1a00edec:	2164      	movs	r1, #100	; 0x64
1a00edee:	2207      	movs	r2, #7
1a00edf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a00edf4:	f7f8 bbac 	b.w	1a007550 <inv_register_data_cb>
1a00edf8:	10087d60 	.word	0x10087d60
1a00edfc:	1a00f439 	.word	0x1a00f439

1a00ee00 <inv_reset_packet>:
1a00ee00:	b538      	push	{r3, r4, r5, lr}
1a00ee02:	4d09      	ldr	r5, [pc, #36]	; (1a00ee28 <inv_reset_packet+0x28>)
1a00ee04:	2498      	movs	r4, #152	; 0x98
1a00ee06:	2100      	movs	r1, #0
1a00ee08:	4622      	mov	r2, r4
1a00ee0a:	4628      	mov	r0, r5
1a00ee0c:	f005 ffe8 	bl	1a014de0 <memset>
1a00ee10:	f505 7098 	add.w	r0, r5, #304	; 0x130
1a00ee14:	2100      	movs	r1, #0
1a00ee16:	4622      	mov	r2, r4
1a00ee18:	f005 ffe2 	bl	1a014de0 <memset>
1a00ee1c:	2005      	movs	r0, #5
1a00ee1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a00ee22:	f7ff bf97 	b.w	1a00ed54 <inv_init_maxmin>
1a00ee26:	bf00      	nop
1a00ee28:	10087d68 	.word	0x10087d68

1a00ee2c <inv_fast_nomot_parameter>:
1a00ee2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00ee30:	6f83      	ldr	r3, [r0, #120]	; 0x78
1a00ee32:	b085      	sub	sp, #20
1a00ee34:	2b00      	cmp	r3, #0
1a00ee36:	f000 80a6 	beq.w	1a00ef86 <inv_fast_nomot_parameter+0x15a>
1a00ee3a:	4680      	mov	r8, r0
1a00ee3c:	2100      	movs	r1, #0
1a00ee3e:	2000      	movs	r0, #0
1a00ee40:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a00ee44:	f04f 0b00 	mov.w	fp, #0
1a00ee48:	f8cd b004 	str.w	fp, [sp, #4]
1a00ee4c:	f8d8 e000 	ldr.w	lr, [r8]
1a00ee50:	f8d8 c004 	ldr.w	ip, [r8, #4]
1a00ee54:	e9d8 ab06 	ldrd	sl, fp, [r8, #24]
1a00ee58:	fbae 010e 	umull	r0, r1, lr, lr
1a00ee5c:	fb0e f30c 	mul.w	r3, lr, ip
1a00ee60:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00ee64:	4654      	mov	r4, sl
1a00ee66:	465d      	mov	r5, fp
1a00ee68:	1a24      	subs	r4, r4, r0
1a00ee6a:	eb65 0501 	sbc.w	r5, r5, r1
1a00ee6e:	1922      	adds	r2, r4, r4
1a00ee70:	eb45 0305 	adc.w	r3, r5, r5
1a00ee74:	1912      	adds	r2, r2, r4
1a00ee76:	eb43 0305 	adc.w	r3, r3, r5
1a00ee7a:	1812      	adds	r2, r2, r0
1a00ee7c:	eb43 0301 	adc.w	r3, r3, r1
1a00ee80:	e9d8 670c 	ldrd	r6, r7, [r8, #48]	; 0x30
1a00ee84:	fb0e f403 	mul.w	r4, lr, r3
1a00ee88:	1800      	adds	r0, r0, r0
1a00ee8a:	fb0c 4402 	mla	r4, ip, r2, r4
1a00ee8e:	fbae 2302 	umull	r2, r3, lr, r2
1a00ee92:	eb41 0101 	adc.w	r1, r1, r1
1a00ee96:	18e3      	adds	r3, r4, r3
1a00ee98:	1b96      	subs	r6, r2, r6
1a00ee9a:	eb63 0707 	sbc.w	r7, r3, r7
1a00ee9e:	fb0e f301 	mul.w	r3, lr, r1
1a00eea2:	fb0a f20b 	mul.w	r2, sl, fp
1a00eea6:	fbaa 450a 	umull	r4, r5, sl, sl
1a00eeaa:	fb0c 3300 	mla	r3, ip, r0, r3
1a00eeae:	fbae 0100 	umull	r0, r1, lr, r0
1a00eeb2:	eb05 0542 	add.w	r5, r5, r2, lsl #1
1a00eeb6:	f1c6 0a00 	rsb	sl, r6, #0
1a00eeba:	1859      	adds	r1, r3, r1
1a00eebc:	f06f 0b03 	mvn.w	fp, #3
1a00eec0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
1a00eec4:	f1c4 0900 	rsb	r9, r4, #0
1a00eec8:	fb0b a707 	mla	r7, fp, r7, sl
1a00eecc:	fba6 ab0b 	umull	sl, fp, r6, fp
1a00eed0:	f06f 0602 	mvn.w	r6, #2
1a00eed4:	44bb      	add	fp, r7
1a00eed6:	f8cd 9000 	str.w	r9, [sp]
1a00eeda:	fb06 9905 	mla	r9, r6, r5, r9
1a00eede:	fba4 4506 	umull	r4, r5, r4, r6
1a00eee2:	fb0e f601 	mul.w	r6, lr, r1
1a00eee6:	fb0c 6600 	mla	r6, ip, r0, r6
1a00eeea:	fb0e f70b 	mul.w	r7, lr, fp
1a00eeee:	444d      	add	r5, r9
1a00eef0:	fbae 0100 	umull	r0, r1, lr, r0
1a00eef4:	1912      	adds	r2, r2, r4
1a00eef6:	eb43 0305 	adc.w	r3, r3, r5
1a00eefa:	1871      	adds	r1, r6, r1
1a00eefc:	fb0c 7c0a 	mla	ip, ip, sl, r7
1a00ef00:	1812      	adds	r2, r2, r0
1a00ef02:	fbae 670a 	umull	r6, r7, lr, sl
1a00ef06:	eb43 0301 	adc.w	r3, r3, r1
1a00ef0a:	f8dd 9004 	ldr.w	r9, [sp, #4]
1a00ef0e:	1992      	adds	r2, r2, r6
1a00ef10:	4467      	add	r7, ip
1a00ef12:	eb43 0307 	adc.w	r3, r3, r7
1a00ef16:	f109 0901 	add.w	r9, r9, #1
1a00ef1a:	2a00      	cmp	r2, #0
1a00ef1c:	f173 0b00 	sbcs.w	fp, r3, #0
1a00ef20:	f8cd 9004 	str.w	r9, [sp, #4]
1a00ef24:	f108 0808 	add.w	r8, r8, #8
1a00ef28:	db30      	blt.n	1a00ef8c <inv_fast_nomot_parameter+0x160>
1a00ef2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00ef2e:	4290      	cmp	r0, r2
1a00ef30:	4199      	sbcs	r1, r3
1a00ef32:	da01      	bge.n	1a00ef38 <inv_fast_nomot_parameter+0x10c>
1a00ef34:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a00ef38:	9a01      	ldr	r2, [sp, #4]
1a00ef3a:	2a03      	cmp	r2, #3
1a00ef3c:	d186      	bne.n	1a00ee4c <inv_fast_nomot_parameter+0x20>
1a00ef3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00ef42:	f005 f9bf 	bl	1a0142c4 <__aeabi_l2f>
1a00ef46:	4b13      	ldr	r3, [pc, #76]	; (1a00ef94 <inv_fast_nomot_parameter+0x168>)
1a00ef48:	6b99      	ldr	r1, [r3, #56]	; 0x38
1a00ef4a:	f005 faad 	bl	1a0144a8 <__aeabi_fdiv>
1a00ef4e:	f005 fc4b 	bl	1a0147e8 <__aeabi_f2lz>
1a00ef52:	4b11      	ldr	r3, [pc, #68]	; (1a00ef98 <inv_fast_nomot_parameter+0x16c>)
1a00ef54:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
1a00ef58:	00a4      	lsls	r4, r4, #2
1a00ef5a:	f1c4 0620 	rsb	r6, r4, #32
1a00ef5e:	f1a4 0520 	sub.w	r5, r4, #32
1a00ef62:	fa20 f204 	lsr.w	r2, r0, r4
1a00ef66:	fa01 f606 	lsl.w	r6, r1, r6
1a00ef6a:	fa41 f005 	asr.w	r0, r1, r5
1a00ef6e:	4332      	orrs	r2, r6
1a00ef70:	ea12 0225 	ands.w	r2, r2, r5, asr #32
1a00ef74:	bf38      	it	cc
1a00ef76:	4602      	movcc	r2, r0
1a00ef78:	fa41 f304 	asr.w	r3, r1, r4
1a00ef7c:	4610      	mov	r0, r2
1a00ef7e:	4619      	mov	r1, r3
1a00ef80:	b005      	add	sp, #20
1a00ef82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00ef86:	2200      	movs	r2, #0
1a00ef88:	2300      	movs	r3, #0
1a00ef8a:	e7f7      	b.n	1a00ef7c <inv_fast_nomot_parameter+0x150>
1a00ef8c:	4252      	negs	r2, r2
1a00ef8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00ef92:	e7ca      	b.n	1a00ef2a <inv_fast_nomot_parameter+0xfe>
1a00ef94:	10087098 	.word	0x10087098
1a00ef98:	10087d60 	.word	0x10087d60

1a00ef9c <inv_fast_nomot_parameter_3rd>:
1a00ef9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00efa0:	6f83      	ldr	r3, [r0, #120]	; 0x78
1a00efa2:	2b00      	cmp	r3, #0
1a00efa4:	d05a      	beq.n	1a00f05c <inv_fast_nomot_parameter_3rd+0xc0>
1a00efa6:	f100 0e28 	add.w	lr, r0, #40	; 0x28
1a00efaa:	2100      	movs	r1, #0
1a00efac:	2000      	movs	r0, #0
1a00efae:	f04f 0c00 	mov.w	ip, #0
1a00efb2:	f85e 8c28 	ldr.w	r8, [lr, #-40]
1a00efb6:	f85e 9c24 	ldr.w	r9, [lr, #-36]
1a00efba:	e95e 4504 	ldrd	r4, r5, [lr, #-16]
1a00efbe:	fb08 f309 	mul.w	r3, r8, r9
1a00efc2:	fba8 6708 	umull	r6, r7, r8, r8
1a00efc6:	eb07 0743 	add.w	r7, r7, r3, lsl #1
1a00efca:	1ba4      	subs	r4, r4, r6
1a00efcc:	eb65 0507 	sbc.w	r5, r5, r7
1a00efd0:	1922      	adds	r2, r4, r4
1a00efd2:	eb45 0305 	adc.w	r3, r5, r5
1a00efd6:	1912      	adds	r2, r2, r4
1a00efd8:	eb43 0305 	adc.w	r3, r3, r5
1a00efdc:	1992      	adds	r2, r2, r6
1a00efde:	eb43 0307 	adc.w	r3, r3, r7
1a00efe2:	fb02 f909 	mul.w	r9, r2, r9
1a00efe6:	e9fe 4502 	ldrd	r4, r5, [lr, #8]!
1a00efea:	fb08 9903 	mla	r9, r8, r3, r9
1a00efee:	fba2 2308 	umull	r2, r3, r2, r8
1a00eff2:	444b      	add	r3, r9
1a00eff4:	1b12      	subs	r2, r2, r4
1a00eff6:	eb63 0305 	sbc.w	r3, r3, r5
1a00effa:	2a00      	cmp	r2, #0
1a00effc:	f173 0400 	sbcs.w	r4, r3, #0
1a00f000:	f10c 0c01 	add.w	ip, ip, #1
1a00f004:	db2d      	blt.n	1a00f062 <inv_fast_nomot_parameter_3rd+0xc6>
1a00f006:	4290      	cmp	r0, r2
1a00f008:	eb71 0403 	sbcs.w	r4, r1, r3
1a00f00c:	bfbc      	itt	lt
1a00f00e:	4610      	movlt	r0, r2
1a00f010:	4619      	movlt	r1, r3
1a00f012:	f1bc 0f03 	cmp.w	ip, #3
1a00f016:	d1cc      	bne.n	1a00efb2 <inv_fast_nomot_parameter_3rd+0x16>
1a00f018:	f005 f954 	bl	1a0142c4 <__aeabi_l2f>
1a00f01c:	4b13      	ldr	r3, [pc, #76]	; (1a00f06c <inv_fast_nomot_parameter_3rd+0xd0>)
1a00f01e:	6b99      	ldr	r1, [r3, #56]	; 0x38
1a00f020:	f005 fa42 	bl	1a0144a8 <__aeabi_fdiv>
1a00f024:	f005 fbe0 	bl	1a0147e8 <__aeabi_f2lz>
1a00f028:	4b11      	ldr	r3, [pc, #68]	; (1a00f070 <inv_fast_nomot_parameter_3rd+0xd4>)
1a00f02a:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
1a00f02e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
1a00f032:	f1c4 0620 	rsb	r6, r4, #32
1a00f036:	f1a4 0520 	sub.w	r5, r4, #32
1a00f03a:	fa20 f204 	lsr.w	r2, r0, r4
1a00f03e:	fa01 f606 	lsl.w	r6, r1, r6
1a00f042:	fa41 f005 	asr.w	r0, r1, r5
1a00f046:	4332      	orrs	r2, r6
1a00f048:	ea12 0225 	ands.w	r2, r2, r5, asr #32
1a00f04c:	bf38      	it	cc
1a00f04e:	4602      	movcc	r2, r0
1a00f050:	fa41 f304 	asr.w	r3, r1, r4
1a00f054:	4610      	mov	r0, r2
1a00f056:	4619      	mov	r1, r3
1a00f058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00f05c:	2200      	movs	r2, #0
1a00f05e:	2300      	movs	r3, #0
1a00f060:	e7f8      	b.n	1a00f054 <inv_fast_nomot_parameter_3rd+0xb8>
1a00f062:	4252      	negs	r2, r2
1a00f064:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00f068:	e7cd      	b.n	1a00f006 <inv_fast_nomot_parameter_3rd+0x6a>
1a00f06a:	bf00      	nop
1a00f06c:	10087098 	.word	0x10087098
1a00f070:	10087d60 	.word	0x10087d60

1a00f074 <inv_fast_nomot_set_gyro_bias>:
1a00f074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00f078:	4b2f      	ldr	r3, [pc, #188]	; (1a00f138 <inv_fast_nomot_set_gyro_bias+0xc4>)
1a00f07a:	b084      	sub	sp, #16
1a00f07c:	461d      	mov	r5, r3
1a00f07e:	f8d3 e210 	ldr.w	lr, [r3, #528]	; 0x210
1a00f082:	461a      	mov	r2, r3
1a00f084:	4607      	mov	r7, r0
1a00f086:	2300      	movs	r3, #0
1a00f088:	ae01      	add	r6, sp, #4
1a00f08a:	18e8      	adds	r0, r5, r3
1a00f08c:	f852 1f08 	ldr.w	r1, [r2, #8]!
1a00f090:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
1a00f094:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1a00f138 <inv_fast_nomot_set_gyro_bias+0xc4>
1a00f098:	fa01 f10e 	lsl.w	r1, r1, lr
1a00f09c:	eb01 4104 	add.w	r1, r1, r4, lsl #16
1a00f0a0:	50f1      	str	r1, [r6, r3]
1a00f0a2:	3304      	adds	r3, #4
1a00f0a4:	2b0c      	cmp	r3, #12
1a00f0a6:	d1f0      	bne.n	1a00f08a <inv_fast_nomot_set_gyro_bias+0x16>
1a00f0a8:	2100      	movs	r1, #0
1a00f0aa:	2298      	movs	r2, #152	; 0x98
1a00f0ac:	f108 0008 	add.w	r0, r8, #8
1a00f0b0:	f005 fe96 	bl	1a014de0 <memset>
1a00f0b4:	2001      	movs	r0, #1
1a00f0b6:	f7ff fe4d 	bl	1a00ed54 <inv_init_maxmin>
1a00f0ba:	f898 31e8 	ldrb.w	r3, [r8, #488]	; 0x1e8
1a00f0be:	2b04      	cmp	r3, #4
1a00f0c0:	d030      	beq.n	1a00f124 <inv_fast_nomot_set_gyro_bias+0xb0>
1a00f0c2:	4c1e      	ldr	r4, [pc, #120]	; (1a00f13c <inv_fast_nomot_set_gyro_bias+0xc8>)
1a00f0c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
1a00f0c6:	9f01      	ldr	r7, [sp, #4]
1a00f0c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00f0cc:	c80d      	ldmia	r0, {r0, r2, r3}
1a00f0ce:	1a3f      	subs	r7, r7, r0
1a00f0d0:	9802      	ldr	r0, [sp, #8]
1a00f0d2:	1a82      	subs	r2, r0, r2
1a00f0d4:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
1a00f0d8:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
1a00f0dc:	9a03      	ldr	r2, [sp, #12]
1a00f0de:	2f00      	cmp	r7, #0
1a00f0e0:	bfb8      	it	lt
1a00f0e2:	427f      	neglt	r7, r7
1a00f0e4:	1ad3      	subs	r3, r2, r3
1a00f0e6:	2b00      	cmp	r3, #0
1a00f0e8:	bfb8      	it	lt
1a00f0ea:	425b      	neglt	r3, r3
1a00f0ec:	4287      	cmp	r7, r0
1a00f0ee:	bfa8      	it	ge
1a00f0f0:	4638      	movge	r0, r7
1a00f0f2:	4298      	cmp	r0, r3
1a00f0f4:	bfb8      	it	lt
1a00f0f6:	4618      	movlt	r0, r3
1a00f0f8:	f7f8 fe9c 	bl	1a007e34 <inv_q30_mult>
1a00f0fc:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
1a00f100:	4298      	cmp	r0, r3
1a00f102:	da06      	bge.n	1a00f112 <inv_fast_nomot_set_gyro_bias+0x9e>
1a00f104:	4630      	mov	r0, r6
1a00f106:	2103      	movs	r1, #3
1a00f108:	f7f8 f85e 	bl	1a0071c8 <inv_set_gyro_bias>
1a00f10c:	2002      	movs	r0, #2
1a00f10e:	f7f9 fdb9 	bl	1a008c84 <inv_set_motion_state>
1a00f112:	9b01      	ldr	r3, [sp, #4]
1a00f114:	6263      	str	r3, [r4, #36]	; 0x24
1a00f116:	9b02      	ldr	r3, [sp, #8]
1a00f118:	62a3      	str	r3, [r4, #40]	; 0x28
1a00f11a:	9b03      	ldr	r3, [sp, #12]
1a00f11c:	62e3      	str	r3, [r4, #44]	; 0x2c
1a00f11e:	b004      	add	sp, #16
1a00f120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00f124:	f8d8 3218 	ldr.w	r3, [r8, #536]	; 0x218
1a00f128:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
1a00f12c:	ddc9      	ble.n	1a00f0c2 <inv_fast_nomot_set_gyro_bias+0x4e>
1a00f12e:	2305      	movs	r3, #5
1a00f130:	f888 31e8 	strb.w	r3, [r8, #488]	; 0x1e8
1a00f134:	e7c5      	b.n	1a00f0c2 <inv_fast_nomot_set_gyro_bias+0x4e>
1a00f136:	bf00      	nop
1a00f138:	10087d60 	.word	0x10087d60
1a00f13c:	10087098 	.word	0x10087098

1a00f140 <inv_fast_nomot_store_data>:
1a00f140:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
1a00f144:	6f8a      	ldr	r2, [r1, #120]	; 0x78
1a00f146:	b082      	sub	sp, #8
1a00f148:	f04f 0900 	mov.w	r9, #0
1a00f14c:	468a      	mov	sl, r1
1a00f14e:	9200      	str	r2, [sp, #0]
1a00f150:	9001      	str	r0, [sp, #4]
1a00f152:	468c      	mov	ip, r1
1a00f154:	f101 0860 	add.w	r8, r1, #96	; 0x60
1a00f158:	46cb      	mov	fp, r9
1a00f15a:	9b00      	ldr	r3, [sp, #0]
1a00f15c:	2b00      	cmp	r3, #0
1a00f15e:	d03d      	beq.n	1a00f1dc <inv_fast_nomot_store_data+0x9c>
1a00f160:	9b01      	ldr	r3, [sp, #4]
1a00f162:	f933 2009 	ldrsh.w	r2, [r3, r9]
1a00f166:	f8dc 307c 	ldr.w	r3, [ip, #124]	; 0x7c
1a00f16a:	1ad2      	subs	r2, r2, r3
1a00f16c:	4614      	mov	r4, r2
1a00f16e:	17d5      	asrs	r5, r2, #31
1a00f170:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
1a00f174:	4293      	cmp	r3, r2
1a00f176:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
1a00f17a:	bfb8      	it	lt
1a00f17c:	f8cc 2060 	strlt.w	r2, [ip, #96]	; 0x60
1a00f180:	4293      	cmp	r3, r2
1a00f182:	bfc8      	it	gt
1a00f184:	f8cc 206c 	strgt.w	r2, [ip, #108]	; 0x6c
1a00f188:	eb0a 06cb 	add.w	r6, sl, fp, lsl #3
1a00f18c:	2201      	movs	r2, #1
1a00f18e:	2300      	movs	r3, #0
1a00f190:	e9d6 0100 	ldrd	r0, r1, [r6]
1a00f194:	fb02 f705 	mul.w	r7, r2, r5
1a00f198:	fb04 7703 	mla	r7, r4, r3, r7
1a00f19c:	fba2 2304 	umull	r2, r3, r2, r4
1a00f1a0:	1880      	adds	r0, r0, r2
1a00f1a2:	443b      	add	r3, r7
1a00f1a4:	eb41 0103 	adc.w	r1, r1, r3
1a00f1a8:	e8e6 0106 	strd	r0, r1, [r6], #24
1a00f1ac:	4546      	cmp	r6, r8
1a00f1ae:	d1ef      	bne.n	1a00f190 <inv_fast_nomot_store_data+0x50>
1a00f1b0:	f10b 0b01 	add.w	fp, fp, #1
1a00f1b4:	f1bb 0f03 	cmp.w	fp, #3
1a00f1b8:	f106 0808 	add.w	r8, r6, #8
1a00f1bc:	f10c 0c04 	add.w	ip, ip, #4
1a00f1c0:	f109 0902 	add.w	r9, r9, #2
1a00f1c4:	d1c9      	bne.n	1a00f15a <inv_fast_nomot_store_data+0x1a>
1a00f1c6:	9a00      	ldr	r2, [sp, #0]
1a00f1c8:	1c53      	adds	r3, r2, #1
1a00f1ca:	f8ca 3078 	str.w	r3, [sl, #120]	; 0x78
1a00f1ce:	2301      	movs	r3, #1
1a00f1d0:	f8ca 3090 	str.w	r3, [sl, #144]	; 0x90
1a00f1d4:	b002      	add	sp, #8
1a00f1d6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
1a00f1da:	4770      	bx	lr
1a00f1dc:	9a01      	ldr	r2, [sp, #4]
1a00f1de:	f932 3009 	ldrsh.w	r3, [r2, r9]
1a00f1e2:	9a00      	ldr	r2, [sp, #0]
1a00f1e4:	f8cc 307c 	str.w	r3, [ip, #124]	; 0x7c
1a00f1e8:	2400      	movs	r4, #0
1a00f1ea:	2500      	movs	r5, #0
1a00f1ec:	e7c0      	b.n	1a00f170 <inv_fast_nomot_store_data+0x30>
1a00f1ee:	bf00      	nop

1a00f1f0 <inv_fast_nomot_store_data_compass>:
1a00f1f0:	6803      	ldr	r3, [r0, #0]
1a00f1f2:	66d3      	str	r3, [r2, #108]	; 0x6c
1a00f1f4:	6843      	ldr	r3, [r0, #4]
1a00f1f6:	6713      	str	r3, [r2, #112]	; 0x70
1a00f1f8:	6883      	ldr	r3, [r0, #8]
1a00f1fa:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
1a00f1fe:	b4f0      	push	{r4, r5, r6, r7}
1a00f200:	6f97      	ldr	r7, [r2, #120]	; 0x78
1a00f202:	6753      	str	r3, [r2, #116]	; 0x74
1a00f204:	b17f      	cbz	r7, 1a00f226 <inv_fast_nomot_store_data_compass+0x36>
1a00f206:	4613      	mov	r3, r2
1a00f208:	2100      	movs	r1, #0
1a00f20a:	5846      	ldr	r6, [r0, r1]
1a00f20c:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
1a00f20e:	6e1d      	ldr	r5, [r3, #96]	; 0x60
1a00f210:	1b34      	subs	r4, r6, r4
1a00f212:	2c00      	cmp	r4, #0
1a00f214:	bfb8      	it	lt
1a00f216:	4264      	neglt	r4, r4
1a00f218:	3104      	adds	r1, #4
1a00f21a:	42ac      	cmp	r4, r5
1a00f21c:	bfc8      	it	gt
1a00f21e:	661c      	strgt	r4, [r3, #96]	; 0x60
1a00f220:	3304      	adds	r3, #4
1a00f222:	290c      	cmp	r1, #12
1a00f224:	d1f1      	bne.n	1a00f20a <inv_fast_nomot_store_data_compass+0x1a>
1a00f226:	3701      	adds	r7, #1
1a00f228:	2301      	movs	r3, #1
1a00f22a:	6797      	str	r7, [r2, #120]	; 0x78
1a00f22c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
1a00f230:	bcf0      	pop	{r4, r5, r6, r7}
1a00f232:	4770      	bx	lr

1a00f234 <inv_reset_min_max_gyro_accel_statistics>:
1a00f234:	4a0b      	ldr	r2, [pc, #44]	; (1a00f264 <inv_reset_min_max_gyro_accel_statistics+0x30>)
1a00f236:	4611      	mov	r1, r2
1a00f238:	2300      	movs	r3, #0
1a00f23a:	f841 3b04 	str.w	r3, [r1], #4
1a00f23e:	3104      	adds	r1, #4
1a00f240:	6053      	str	r3, [r2, #4]
1a00f242:	f841 3b04 	str.w	r3, [r1], #4
1a00f246:	6213      	str	r3, [r2, #32]
1a00f248:	600b      	str	r3, [r1, #0]
1a00f24a:	6253      	str	r3, [r2, #36]	; 0x24
1a00f24c:	6293      	str	r3, [r2, #40]	; 0x28
1a00f24e:	62d3      	str	r3, [r2, #44]	; 0x2c
1a00f250:	6113      	str	r3, [r2, #16]
1a00f252:	6153      	str	r3, [r2, #20]
1a00f254:	6193      	str	r3, [r2, #24]
1a00f256:	61d3      	str	r3, [r2, #28]
1a00f258:	6313      	str	r3, [r2, #48]	; 0x30
1a00f25a:	6353      	str	r3, [r2, #52]	; 0x34
1a00f25c:	6393      	str	r3, [r2, #56]	; 0x38
1a00f25e:	63d3      	str	r3, [r2, #60]	; 0x3c
1a00f260:	4770      	bx	lr
1a00f262:	bf00      	nop
1a00f264:	10087f80 	.word	0x10087f80

1a00f268 <inv_detect_motion_by_gyro_accel>:
1a00f268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00f26c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 1a00f398 <inv_detect_motion_by_gyro_accel+0x130>
1a00f270:	4f46      	ldr	r7, [pc, #280]	; (1a00f38c <inv_detect_motion_by_gyro_accel+0x124>)
1a00f272:	f8d8 6074 	ldr.w	r6, [r8, #116]	; 0x74
1a00f276:	f8d8 506c 	ldr.w	r5, [r8, #108]	; 0x6c
1a00f27a:	f8d8 4078 	ldr.w	r4, [r8, #120]	; 0x78
1a00f27e:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
1a00f282:	f8d8 207c 	ldr.w	r2, [r8, #124]	; 0x7c
1a00f286:	f8d8 1070 	ldr.w	r1, [r8, #112]	; 0x70
1a00f28a:	1b9e      	subs	r6, r3, r6
1a00f28c:	1b2c      	subs	r4, r5, r4
1a00f28e:	42b4      	cmp	r4, r6
1a00f290:	bfb8      	it	lt
1a00f292:	4634      	movlt	r4, r6
1a00f294:	1a89      	subs	r1, r1, r2
1a00f296:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
1a00f298:	428c      	cmp	r4, r1
1a00f29a:	bfac      	ite	ge
1a00f29c:	4622      	movge	r2, r4
1a00f29e:	460a      	movlt	r2, r1
1a00f2a0:	4296      	cmp	r6, r2
1a00f2a2:	db2f      	blt.n	1a00f304 <inv_detect_motion_by_gyro_accel+0x9c>
1a00f2a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00f2a6:	05de      	lsls	r6, r3, #23
1a00f2a8:	d403      	bmi.n	1a00f2b2 <inv_detect_motion_by_gyro_accel+0x4a>
1a00f2aa:	2602      	movs	r6, #2
1a00f2ac:	4630      	mov	r0, r6
1a00f2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00f2b2:	f8d8 3000 	ldr.w	r3, [r8]
1a00f2b6:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
1a00f2ba:	429a      	cmp	r2, r3
1a00f2bc:	dbf5      	blt.n	1a00f2aa <inv_detect_motion_by_gyro_accel+0x42>
1a00f2be:	6f42      	ldr	r2, [r0, #116]	; 0x74
1a00f2c0:	05d0      	lsls	r0, r2, #23
1a00f2c2:	d525      	bpl.n	1a00f310 <inv_detect_motion_by_gyro_accel+0xa8>
1a00f2c4:	f8d8 21b0 	ldr.w	r2, [r8, #432]	; 0x1b0
1a00f2c8:	4293      	cmp	r3, r2
1a00f2ca:	dcee      	bgt.n	1a00f2aa <inv_detect_motion_by_gyro_accel+0x42>
1a00f2cc:	f508 709c 	add.w	r0, r8, #312	; 0x138
1a00f2d0:	f7ff fdac 	bl	1a00ee2c <inv_fast_nomot_parameter>
1a00f2d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
1a00f2d8:	0d04      	lsrs	r4, r0, #20
1a00f2da:	ea44 3401 	orr.w	r4, r4, r1, lsl #12
1a00f2de:	150d      	asrs	r5, r1, #20
1a00f2e0:	42a2      	cmp	r2, r4
1a00f2e2:	eb73 0005 	sbcs.w	r0, r3, r5
1a00f2e6:	f508 71ec 	add.w	r1, r8, #472	; 0x1d8
1a00f2ea:	e9c1 4500 	strd	r4, r5, [r1]
1a00f2ee:	db36      	blt.n	1a00f35e <inv_detect_motion_by_gyro_accel+0xf6>
1a00f2f0:	2601      	movs	r6, #1
1a00f2f2:	2100      	movs	r1, #0
1a00f2f4:	2298      	movs	r2, #152	; 0x98
1a00f2f6:	4826      	ldr	r0, [pc, #152]	; (1a00f390 <inv_detect_motion_by_gyro_accel+0x128>)
1a00f2f8:	f005 fd72 	bl	1a014de0 <memset>
1a00f2fc:	2004      	movs	r0, #4
1a00f2fe:	f7ff fd29 	bl	1a00ed54 <inv_init_maxmin>
1a00f302:	e006      	b.n	1a00f312 <inv_detect_motion_by_gyro_accel+0xaa>
1a00f304:	2600      	movs	r6, #0
1a00f306:	f7ff fd7b 	bl	1a00ee00 <inv_reset_packet>
1a00f30a:	4630      	mov	r0, r6
1a00f30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00f310:	2601      	movs	r6, #1
1a00f312:	4820      	ldr	r0, [pc, #128]	; (1a00f394 <inv_detect_motion_by_gyro_accel+0x12c>)
1a00f314:	f7ff fd8a 	bl	1a00ee2c <inv_fast_nomot_parameter>
1a00f318:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
1a00f31c:	460b      	mov	r3, r1
1a00f31e:	491e      	ldr	r1, [pc, #120]	; (1a00f398 <inv_detect_motion_by_gyro_accel+0x130>)
1a00f320:	4602      	mov	r2, r0
1a00f322:	f501 70f8 	add.w	r0, r1, #496	; 0x1f0
1a00f326:	e9c0 2300 	strd	r2, r3, [r0]
1a00f32a:	4294      	cmp	r4, r2
1a00f32c:	eb75 0003 	sbcs.w	r0, r5, r3
1a00f330:	dabc      	bge.n	1a00f2ac <inv_detect_motion_by_gyro_accel+0x44>
1a00f332:	f8d1 4228 	ldr.w	r4, [r1, #552]	; 0x228
1a00f336:	b16c      	cbz	r4, 1a00f354 <inv_detect_motion_by_gyro_accel+0xec>
1a00f338:	460d      	mov	r5, r1
1a00f33a:	e9f5 0188 	ldrd	r0, r1, [r5, #544]!	; 0x220
1a00f33e:	4282      	cmp	r2, r0
1a00f340:	eb73 0601 	sbcs.w	r6, r3, r1
1a00f344:	da01      	bge.n	1a00f34a <inv_detect_motion_by_gyro_accel+0xe2>
1a00f346:	e9c5 2300 	strd	r2, r3, [r5]
1a00f34a:	3401      	adds	r4, #1
1a00f34c:	f8c8 4228 	str.w	r4, [r8, #552]	; 0x228
1a00f350:	2600      	movs	r6, #0
1a00f352:	e7ab      	b.n	1a00f2ac <inv_detect_motion_by_gyro_accel+0x44>
1a00f354:	f501 7108 	add.w	r1, r1, #544	; 0x220
1a00f358:	e9c1 2300 	strd	r2, r3, [r1]
1a00f35c:	e7f5      	b.n	1a00f34a <inv_detect_motion_by_gyro_accel+0xe2>
1a00f35e:	f8d8 1238 	ldr.w	r1, [r8, #568]	; 0x238
1a00f362:	b941      	cbnz	r1, 1a00f376 <inv_detect_motion_by_gyro_accel+0x10e>
1a00f364:	f508 730c 	add.w	r3, r8, #560	; 0x230
1a00f368:	e9c3 4500 	strd	r4, r5, [r3]
1a00f36c:	3101      	adds	r1, #1
1a00f36e:	f8c8 1238 	str.w	r1, [r8, #568]	; 0x238
1a00f372:	2600      	movs	r6, #0
1a00f374:	e7bd      	b.n	1a00f2f2 <inv_detect_motion_by_gyro_accel+0x8a>
1a00f376:	4640      	mov	r0, r8
1a00f378:	e9f0 238c 	ldrd	r2, r3, [r0, #560]!	; 0x230
1a00f37c:	4294      	cmp	r4, r2
1a00f37e:	eb75 0603 	sbcs.w	r6, r5, r3
1a00f382:	daf3      	bge.n	1a00f36c <inv_detect_motion_by_gyro_accel+0x104>
1a00f384:	e9c0 4500 	strd	r4, r5, [r0]
1a00f388:	e7f0      	b.n	1a00f36c <inv_detect_motion_by_gyro_accel+0x104>
1a00f38a:	bf00      	nop
1a00f38c:	10087098 	.word	0x10087098
1a00f390:	10087e98 	.word	0x10087e98
1a00f394:	10087d68 	.word	0x10087d68
1a00f398:	10087d60 	.word	0x10087d60

1a00f39c <inv_sensor_data_preprocess>:
1a00f39c:	b530      	push	{r4, r5, lr}
1a00f39e:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00f3a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
1a00f3a4:	2bc0      	cmp	r3, #192	; 0xc0
1a00f3a6:	b085      	sub	sp, #20
1a00f3a8:	4604      	mov	r4, r0
1a00f3aa:	d039      	beq.n	1a00f420 <inv_sensor_data_preprocess+0x84>
1a00f3ac:	6f63      	ldr	r3, [r4, #116]	; 0x74
1a00f3ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
1a00f3b2:	2bc0      	cmp	r3, #192	; 0xc0
1a00f3b4:	d02e      	beq.n	1a00f414 <inv_sensor_data_preprocess+0x78>
1a00f3b6:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
1a00f3ba:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
1a00f3be:	2ac0      	cmp	r2, #192	; 0xc0
1a00f3c0:	d018      	beq.n	1a00f3f4 <inv_sensor_data_preprocess+0x58>
1a00f3c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
1a00f3c6:	2b60      	cmp	r3, #96	; 0x60
1a00f3c8:	d001      	beq.n	1a00f3ce <inv_sensor_data_preprocess+0x32>
1a00f3ca:	b005      	add	sp, #20
1a00f3cc:	bd30      	pop	{r4, r5, pc}
1a00f3ce:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
1a00f3d2:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
1a00f3d6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
1a00f3da:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
1a00f3de:	4a13      	ldr	r2, [pc, #76]	; (1a00f42c <inv_sensor_data_preprocess+0x90>)
1a00f3e0:	1384      	asrs	r4, r0, #14
1a00f3e2:	13ad      	asrs	r5, r5, #14
1a00f3e4:	139b      	asrs	r3, r3, #14
1a00f3e6:	a801      	add	r0, sp, #4
1a00f3e8:	9501      	str	r5, [sp, #4]
1a00f3ea:	9402      	str	r4, [sp, #8]
1a00f3ec:	9303      	str	r3, [sp, #12]
1a00f3ee:	f7ff feff 	bl	1a00f1f0 <inv_fast_nomot_store_data_compass>
1a00f3f2:	e7ea      	b.n	1a00f3ca <inv_sensor_data_preprocess+0x2e>
1a00f3f4:	f9b4 008c 	ldrsh.w	r0, [r4, #140]	; 0x8c
1a00f3f8:	f9b4 508e 	ldrsh.w	r5, [r4, #142]	; 0x8e
1a00f3fc:	f9b4 3090 	ldrsh.w	r3, [r4, #144]	; 0x90
1a00f400:	9001      	str	r0, [sp, #4]
1a00f402:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
1a00f406:	4a09      	ldr	r2, [pc, #36]	; (1a00f42c <inv_sensor_data_preprocess+0x90>)
1a00f408:	9502      	str	r5, [sp, #8]
1a00f40a:	a801      	add	r0, sp, #4
1a00f40c:	9303      	str	r3, [sp, #12]
1a00f40e:	f7ff feef 	bl	1a00f1f0 <inv_fast_nomot_store_data_compass>
1a00f412:	e7da      	b.n	1a00f3ca <inv_sensor_data_preprocess+0x2e>
1a00f414:	f104 0048 	add.w	r0, r4, #72	; 0x48
1a00f418:	4905      	ldr	r1, [pc, #20]	; (1a00f430 <inv_sensor_data_preprocess+0x94>)
1a00f41a:	f7ff fe91 	bl	1a00f140 <inv_fast_nomot_store_data>
1a00f41e:	e7ca      	b.n	1a00f3b6 <inv_sensor_data_preprocess+0x1a>
1a00f420:	3004      	adds	r0, #4
1a00f422:	4904      	ldr	r1, [pc, #16]	; (1a00f434 <inv_sensor_data_preprocess+0x98>)
1a00f424:	f7ff fe8c 	bl	1a00f140 <inv_fast_nomot_store_data>
1a00f428:	e7c0      	b.n	1a00f3ac <inv_sensor_data_preprocess+0x10>
1a00f42a:	bf00      	nop
1a00f42c:	10087e00 	.word	0x10087e00
1a00f430:	10087e98 	.word	0x10087e98
1a00f434:	10087d68 	.word	0x10087d68

1a00f438 <inv_generate_fast_nomot>:
1a00f438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00f43c:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00f43e:	05d9      	lsls	r1, r3, #23
1a00f440:	4607      	mov	r7, r0
1a00f442:	f140 8087 	bpl.w	1a00f554 <inv_generate_fast_nomot+0x11c>
1a00f446:	6f42      	ldr	r2, [r0, #116]	; 0x74
1a00f448:	f002 0250 	and.w	r2, r2, #80	; 0x50
1a00f44c:	2a40      	cmp	r2, #64	; 0x40
1a00f44e:	f000 8084 	beq.w	1a00f55a <inv_generate_fast_nomot+0x122>
1a00f452:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
1a00f456:	f002 0250 	and.w	r2, r2, #80	; 0x50
1a00f45a:	2a40      	cmp	r2, #64	; 0x40
1a00f45c:	f003 0350 	and.w	r3, r3, #80	; 0x50
1a00f460:	d07b      	beq.n	1a00f55a <inv_generate_fast_nomot+0x122>
1a00f462:	2b40      	cmp	r3, #64	; 0x40
1a00f464:	d079      	beq.n	1a00f55a <inv_generate_fast_nomot+0x122>
1a00f466:	4ec0      	ldr	r6, [pc, #768]	; (1a00f768 <inv_generate_fast_nomot+0x330>)
1a00f468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a00f46a:	f8d6 2208 	ldr.w	r2, [r6, #520]	; 0x208
1a00f46e:	4cbe      	ldr	r4, [pc, #760]	; (1a00f768 <inv_generate_fast_nomot+0x330>)
1a00f470:	429a      	cmp	r2, r3
1a00f472:	d01a      	beq.n	1a00f4aa <inv_generate_fast_nomot+0x72>
1a00f474:	2b09      	cmp	r3, #9
1a00f476:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
1a00f47a:	4dbc      	ldr	r5, [pc, #752]	; (1a00f76c <inv_generate_fast_nomot+0x334>)
1a00f47c:	f340 812e 	ble.w	1a00f6dc <inv_generate_fast_nomot+0x2a4>
1a00f480:	6b6b      	ldr	r3, [r5, #52]	; 0x34
1a00f482:	6b2a      	ldr	r2, [r5, #48]	; 0x30
1a00f484:	6ba9      	ldr	r1, [r5, #56]	; 0x38
1a00f486:	6022      	str	r2, [r4, #0]
1a00f488:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
1a00f48c:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
1a00f490:	461a      	mov	r2, r3
1a00f492:	f1c2 0210 	rsb	r2, r2, #16
1a00f496:	2119      	movs	r1, #25
1a00f498:	fa01 f303 	lsl.w	r3, r1, r3
1a00f49c:	f8c6 2210 	str.w	r2, [r6, #528]	; 0x210
1a00f4a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
1a00f4a4:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
1a00f4a8:	63eb      	str	r3, [r5, #60]	; 0x3c
1a00f4aa:	4638      	mov	r0, r7
1a00f4ac:	f7ff ff76 	bl	1a00f39c <inv_sensor_data_preprocess>
1a00f4b0:	f896 31e8 	ldrb.w	r3, [r6, #488]	; 0x1e8
1a00f4b4:	2b06      	cmp	r3, #6
1a00f4b6:	d84d      	bhi.n	1a00f554 <inv_generate_fast_nomot+0x11c>
1a00f4b8:	e8df f013 	tbh	[pc, r3, lsl #1]
1a00f4bc:	00e000d1 	.word	0x00e000d1
1a00f4c0:	000700c8 	.word	0x000700c8
1a00f4c4:	007b009f 	.word	0x007b009f
1a00f4c8:	0058      	.short	0x0058
1a00f4ca:	4638      	mov	r0, r7
1a00f4cc:	f7ff fecc 	bl	1a00f268 <inv_detect_motion_by_gyro_accel>
1a00f4d0:	2800      	cmp	r0, #0
1a00f4d2:	f000 80ff 	beq.w	1a00f6d4 <inv_generate_fast_nomot+0x29c>
1a00f4d6:	2801      	cmp	r0, #1
1a00f4d8:	d13c      	bne.n	1a00f554 <inv_generate_fast_nomot+0x11c>
1a00f4da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
1a00f4de:	05da      	lsls	r2, r3, #23
1a00f4e0:	f140 814a 	bpl.w	1a00f778 <inv_generate_fast_nomot+0x340>
1a00f4e4:	f8d6 2100 	ldr.w	r2, [r6, #256]	; 0x100
1a00f4e8:	f8d6 4104 	ldr.w	r4, [r6, #260]	; 0x104
1a00f4ec:	4d9f      	ldr	r5, [pc, #636]	; (1a00f76c <inv_generate_fast_nomot+0x334>)
1a00f4ee:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
1a00f4f2:	499d      	ldr	r1, [pc, #628]	; (1a00f768 <inv_generate_fast_nomot+0x330>)
1a00f4f4:	42a2      	cmp	r2, r4
1a00f4f6:	bfa8      	it	ge
1a00f4f8:	4614      	movge	r4, r2
1a00f4fa:	e9d5 8902 	ldrd	r8, r9, [r5, #8]
1a00f4fe:	4284      	cmp	r4, r0
1a00f500:	bfa8      	it	ge
1a00f502:	4620      	movge	r0, r4
1a00f504:	4602      	mov	r2, r0
1a00f506:	17c3      	asrs	r3, r0, #31
1a00f508:	f501 70e8 	add.w	r0, r1, #464	; 0x1d0
1a00f50c:	e9c0 2300 	strd	r2, r3, [r0]
1a00f510:	4590      	cmp	r8, r2
1a00f512:	eb79 0003 	sbcs.w	r0, r9, r3
1a00f516:	f280 8117 	bge.w	1a00f748 <inv_generate_fast_nomot+0x310>
1a00f51a:	2305      	movs	r3, #5
1a00f51c:	f881 31e8 	strb.w	r3, [r1, #488]	; 0x1e8
1a00f520:	4993      	ldr	r1, [pc, #588]	; (1a00f770 <inv_generate_fast_nomot+0x338>)
1a00f522:	f8d6 5258 	ldr.w	r5, [r6, #600]	; 0x258
1a00f526:	e9d1 2300 	ldrd	r2, r3, [r1]
1a00f52a:	2d00      	cmp	r5, #0
1a00f52c:	f040 80fb 	bne.w	1a00f726 <inv_generate_fast_nomot+0x2ee>
1a00f530:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
1a00f534:	498f      	ldr	r1, [pc, #572]	; (1a00f774 <inv_generate_fast_nomot+0x33c>)
1a00f536:	f8d6 4248 	ldr.w	r4, [r6, #584]	; 0x248
1a00f53a:	3501      	adds	r5, #1
1a00f53c:	f8c6 5258 	str.w	r5, [r6, #600]	; 0x258
1a00f540:	e9d1 2300 	ldrd	r2, r3, [r1]
1a00f544:	2c00      	cmp	r4, #0
1a00f546:	f040 80e3 	bne.w	1a00f710 <inv_generate_fast_nomot+0x2d8>
1a00f54a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
1a00f54e:	3401      	adds	r4, #1
1a00f550:	f8c6 4248 	str.w	r4, [r6, #584]	; 0x248
1a00f554:	2000      	movs	r0, #0
1a00f556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00f55a:	4e83      	ldr	r6, [pc, #524]	; (1a00f768 <inv_generate_fast_nomot+0x330>)
1a00f55c:	f7ff fc50 	bl	1a00ee00 <inv_reset_packet>
1a00f560:	2300      	movs	r3, #0
1a00f562:	f8c6 31e0 	str.w	r3, [r6, #480]	; 0x1e0
1a00f566:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
1a00f56a:	e77d      	b.n	1a00f468 <inv_generate_fast_nomot+0x30>
1a00f56c:	4638      	mov	r0, r7
1a00f56e:	f7ff fe7b 	bl	1a00f268 <inv_detect_motion_by_gyro_accel>
1a00f572:	2801      	cmp	r0, #1
1a00f574:	4604      	mov	r4, r0
1a00f576:	f000 80c7 	beq.w	1a00f708 <inv_generate_fast_nomot+0x2d0>
1a00f57a:	2800      	cmp	r0, #0
1a00f57c:	d1ea      	bne.n	1a00f554 <inv_generate_fast_nomot+0x11c>
1a00f57e:	f7ff fc3f 	bl	1a00ee00 <inv_reset_packet>
1a00f582:	f506 7086 	add.w	r0, r6, #268	; 0x10c
1a00f586:	c807      	ldmia	r0, {r0, r1, r2}
1a00f588:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
1a00f58c:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
1a00f590:	f8c6 4100 	str.w	r4, [r6, #256]	; 0x100
1a00f594:	f8c6 1120 	str.w	r1, [r6, #288]	; 0x120
1a00f598:	f8c6 4104 	str.w	r4, [r6, #260]	; 0x104
1a00f59c:	f8c6 2124 	str.w	r2, [r6, #292]	; 0x124
1a00f5a0:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
1a00f5a4:	f8c6 312c 	str.w	r3, [r6, #300]	; 0x12c
1a00f5a8:	f8c6 4118 	str.w	r4, [r6, #280]	; 0x118
1a00f5ac:	f8c6 4130 	str.w	r4, [r6, #304]	; 0x130
1a00f5b0:	e7d0      	b.n	1a00f554 <inv_generate_fast_nomot+0x11c>
1a00f5b2:	2306      	movs	r3, #6
1a00f5b4:	2001      	movs	r0, #1
1a00f5b6:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
1a00f5ba:	f7f9 fb63 	bl	1a008c84 <inv_set_motion_state>
1a00f5be:	f7ff fc1f 	bl	1a00ee00 <inv_reset_packet>
1a00f5c2:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
1a00f5c6:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
1a00f5ca:	f8d6 1114 	ldr.w	r1, [r6, #276]	; 0x114
1a00f5ce:	f8d6 2128 	ldr.w	r2, [r6, #296]	; 0x128
1a00f5d2:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
1a00f5d6:	2300      	movs	r3, #0
1a00f5d8:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
1a00f5dc:	f8c6 0120 	str.w	r0, [r6, #288]	; 0x120
1a00f5e0:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
1a00f5e4:	f8c6 1124 	str.w	r1, [r6, #292]	; 0x124
1a00f5e8:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
1a00f5ec:	f8c6 212c 	str.w	r2, [r6, #300]	; 0x12c
1a00f5f0:	f8c6 3118 	str.w	r3, [r6, #280]	; 0x118
1a00f5f4:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
1a00f5f8:	e7ac      	b.n	1a00f554 <inv_generate_fast_nomot+0x11c>
1a00f5fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
1a00f5fe:	05db      	lsls	r3, r3, #23
1a00f600:	d519      	bpl.n	1a00f636 <inv_generate_fast_nomot+0x1fe>
1a00f602:	f8d6 5100 	ldr.w	r5, [r6, #256]	; 0x100
1a00f606:	f8d6 4104 	ldr.w	r4, [r6, #260]	; 0x104
1a00f60a:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
1a00f60e:	4956      	ldr	r1, [pc, #344]	; (1a00f768 <inv_generate_fast_nomot+0x330>)
1a00f610:	42a5      	cmp	r5, r4
1a00f612:	bfa8      	it	ge
1a00f614:	462c      	movge	r4, r5
1a00f616:	4284      	cmp	r4, r0
1a00f618:	bfa8      	it	ge
1a00f61a:	4620      	movge	r0, r4
1a00f61c:	4c53      	ldr	r4, [pc, #332]	; (1a00f76c <inv_generate_fast_nomot+0x334>)
1a00f61e:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
1a00f622:	4602      	mov	r2, r0
1a00f624:	17c3      	asrs	r3, r0, #31
1a00f626:	f501 70e8 	add.w	r0, r1, #464	; 0x1d0
1a00f62a:	e9c0 2300 	strd	r2, r3, [r0]
1a00f62e:	4294      	cmp	r4, r2
1a00f630:	eb75 0003 	sbcs.w	r0, r5, r3
1a00f634:	db64      	blt.n	1a00f700 <inv_generate_fast_nomot+0x2c8>
1a00f636:	4638      	mov	r0, r7
1a00f638:	f7ff fe16 	bl	1a00f268 <inv_detect_motion_by_gyro_accel>
1a00f63c:	2800      	cmp	r0, #0
1a00f63e:	d049      	beq.n	1a00f6d4 <inv_generate_fast_nomot+0x29c>
1a00f640:	2801      	cmp	r0, #1
1a00f642:	d187      	bne.n	1a00f554 <inv_generate_fast_nomot+0x11c>
1a00f644:	4638      	mov	r0, r7
1a00f646:	f7ff fd15 	bl	1a00f074 <inv_fast_nomot_set_gyro_bias>
1a00f64a:	e769      	b.n	1a00f520 <inv_generate_fast_nomot+0xe8>
1a00f64c:	2303      	movs	r3, #3
1a00f64e:	4638      	mov	r0, r7
1a00f650:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
1a00f654:	f7ff fd0e 	bl	1a00f074 <inv_fast_nomot_set_gyro_bias>
1a00f658:	f7ff fbd2 	bl	1a00ee00 <inv_reset_packet>
1a00f65c:	e77a      	b.n	1a00f554 <inv_generate_fast_nomot+0x11c>
1a00f65e:	f8d6 31e0 	ldr.w	r3, [r6, #480]	; 0x1e0
1a00f662:	1c5a      	adds	r2, r3, #1
1a00f664:	2b09      	cmp	r3, #9
1a00f666:	f8c6 21e0 	str.w	r2, [r6, #480]	; 0x1e0
1a00f66a:	f77f af73 	ble.w	1a00f554 <inv_generate_fast_nomot+0x11c>
1a00f66e:	f7ff fbc7 	bl	1a00ee00 <inv_reset_packet>
1a00f672:	4b3d      	ldr	r3, [pc, #244]	; (1a00f768 <inv_generate_fast_nomot+0x330>)
1a00f674:	2201      	movs	r2, #1
1a00f676:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
1a00f67a:	e76b      	b.n	1a00f554 <inv_generate_fast_nomot+0x11c>
1a00f67c:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
1a00f680:	4c39      	ldr	r4, [pc, #228]	; (1a00f768 <inv_generate_fast_nomot+0x330>)
1a00f682:	2b01      	cmp	r3, #1
1a00f684:	f47f af66 	bne.w	1a00f554 <inv_generate_fast_nomot+0x11c>
1a00f688:	4638      	mov	r0, r7
1a00f68a:	f7ff fded 	bl	1a00f268 <inv_detect_motion_by_gyro_accel>
1a00f68e:	2800      	cmp	r0, #0
1a00f690:	d154      	bne.n	1a00f73c <inv_generate_fast_nomot+0x304>
1a00f692:	2305      	movs	r3, #5
1a00f694:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
1a00f698:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
1a00f69c:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
1a00f6a0:	f8d6 1114 	ldr.w	r1, [r6, #276]	; 0x114
1a00f6a4:	f8d6 2128 	ldr.w	r2, [r6, #296]	; 0x128
1a00f6a8:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
1a00f6ac:	2300      	movs	r3, #0
1a00f6ae:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
1a00f6b2:	f8c6 0120 	str.w	r0, [r6, #288]	; 0x120
1a00f6b6:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
1a00f6ba:	f8c6 1124 	str.w	r1, [r6, #292]	; 0x124
1a00f6be:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
1a00f6c2:	f8c6 212c 	str.w	r2, [r6, #300]	; 0x12c
1a00f6c6:	f8c6 3118 	str.w	r3, [r6, #280]	; 0x118
1a00f6ca:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
1a00f6ce:	f7ff fdb1 	bl	1a00f234 <inv_reset_min_max_gyro_accel_statistics>
1a00f6d2:	e73f      	b.n	1a00f554 <inv_generate_fast_nomot+0x11c>
1a00f6d4:	2305      	movs	r3, #5
1a00f6d6:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
1a00f6da:	e73b      	b.n	1a00f554 <inv_generate_fast_nomot+0x11c>
1a00f6dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
1a00f6de:	6b6a      	ldr	r2, [r5, #52]	; 0x34
1a00f6e0:	005b      	lsls	r3, r3, #1
1a00f6e2:	3201      	adds	r2, #1
1a00f6e4:	4618      	mov	r0, r3
1a00f6e6:	6023      	str	r3, [r4, #0]
1a00f6e8:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
1a00f6ec:	f004 fdd4 	bl	1a014298 <__aeabi_i2f>
1a00f6f0:	f006 f8ee 	bl	1a0158d0 <sqrtf>
1a00f6f4:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
1a00f6f8:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
1a00f6fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
1a00f6fe:	e6c8      	b.n	1a00f492 <inv_generate_fast_nomot+0x5a>
1a00f700:	2305      	movs	r3, #5
1a00f702:	f881 31e8 	strb.w	r3, [r1, #488]	; 0x1e8
1a00f706:	e725      	b.n	1a00f554 <inv_generate_fast_nomot+0x11c>
1a00f708:	2302      	movs	r3, #2
1a00f70a:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
1a00f70e:	e721      	b.n	1a00f554 <inv_generate_fast_nomot+0x11c>
1a00f710:	460d      	mov	r5, r1
1a00f712:	e9f5 0114 	ldrd	r0, r1, [r5, #80]!	; 0x50
1a00f716:	4290      	cmp	r0, r2
1a00f718:	eb71 0703 	sbcs.w	r7, r1, r3
1a00f71c:	f6bf af17 	bge.w	1a00f54e <inv_generate_fast_nomot+0x116>
1a00f720:	e9c5 2300 	strd	r2, r3, [r5]
1a00f724:	e713      	b.n	1a00f54e <inv_generate_fast_nomot+0x116>
1a00f726:	460c      	mov	r4, r1
1a00f728:	e9f4 011e 	ldrd	r0, r1, [r4, #120]!	; 0x78
1a00f72c:	4290      	cmp	r0, r2
1a00f72e:	eb71 0703 	sbcs.w	r7, r1, r3
1a00f732:	f6bf aeff 	bge.w	1a00f534 <inv_generate_fast_nomot+0xfc>
1a00f736:	e9c4 2300 	strd	r2, r3, [r4]
1a00f73a:	e6fb      	b.n	1a00f534 <inv_generate_fast_nomot+0xfc>
1a00f73c:	2801      	cmp	r0, #1
1a00f73e:	d1ab      	bne.n	1a00f698 <inv_generate_fast_nomot+0x260>
1a00f740:	2302      	movs	r3, #2
1a00f742:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
1a00f746:	e7a7      	b.n	1a00f698 <inv_generate_fast_nomot+0x260>
1a00f748:	f8d1 2128 	ldr.w	r2, [r1, #296]	; 0x128
1a00f74c:	f8d1 312c 	ldr.w	r3, [r1, #300]	; 0x12c
1a00f750:	6a28      	ldr	r0, [r5, #32]
1a00f752:	1ad3      	subs	r3, r2, r3
1a00f754:	4283      	cmp	r3, r0
1a00f756:	f4ff aee3 	bcc.w	1a00f520 <inv_generate_fast_nomot+0xe8>
1a00f75a:	2304      	movs	r3, #4
1a00f75c:	4638      	mov	r0, r7
1a00f75e:	f881 31e8 	strb.w	r3, [r1, #488]	; 0x1e8
1a00f762:	f7ff fc87 	bl	1a00f074 <inv_fast_nomot_set_gyro_bias>
1a00f766:	e6db      	b.n	1a00f520 <inv_generate_fast_nomot+0xe8>
1a00f768:	10087d60 	.word	0x10087d60
1a00f76c:	10087098 	.word	0x10087098
1a00f770:	10087f38 	.word	0x10087f38
1a00f774:	10087f50 	.word	0x10087f50
1a00f778:	2304      	movs	r3, #4
1a00f77a:	4638      	mov	r0, r7
1a00f77c:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
1a00f780:	f7ff fc78 	bl	1a00f074 <inv_fast_nomot_set_gyro_bias>
1a00f784:	e6cc      	b.n	1a00f520 <inv_generate_fast_nomot+0xe8>
1a00f786:	bf00      	nop

1a00f788 <inv_set_default_number_of_samples>:
1a00f788:	b510      	push	{r4, lr}
1a00f78a:	2300      	movs	r3, #0
1a00f78c:	1040      	asrs	r0, r0, #1
1a00f78e:	2800      	cmp	r0, #0
1a00f790:	d112      	bne.n	1a00f7b8 <inv_set_default_number_of_samples+0x30>
1a00f792:	3301      	adds	r3, #1
1a00f794:	2201      	movs	r2, #1
1a00f796:	fa02 f203 	lsl.w	r2, r2, r3
1a00f79a:	4c09      	ldr	r4, [pc, #36]	; (1a00f7c0 <inv_set_default_number_of_samples+0x38>)
1a00f79c:	4610      	mov	r0, r2
1a00f79e:	6322      	str	r2, [r4, #48]	; 0x30
1a00f7a0:	6363      	str	r3, [r4, #52]	; 0x34
1a00f7a2:	f004 fd79 	bl	1a014298 <__aeabi_i2f>
1a00f7a6:	f006 f893 	bl	1a0158d0 <sqrtf>
1a00f7aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a00f7ac:	63a0      	str	r0, [r4, #56]	; 0x38
1a00f7ae:	2219      	movs	r2, #25
1a00f7b0:	fa02 f303 	lsl.w	r3, r2, r3
1a00f7b4:	63e3      	str	r3, [r4, #60]	; 0x3c
1a00f7b6:	bd10      	pop	{r4, pc}
1a00f7b8:	f103 0301 	add.w	r3, r3, #1
1a00f7bc:	dce6      	bgt.n	1a00f78c <inv_set_default_number_of_samples+0x4>
1a00f7be:	e7e8      	b.n	1a00f792 <inv_set_default_number_of_samples+0xa>
1a00f7c0:	10087098 	.word	0x10087098

1a00f7c4 <inv_init_fast_nomot>:
1a00f7c4:	b538      	push	{r3, r4, r5, lr}
1a00f7c6:	4d15      	ldr	r5, [pc, #84]	; (1a00f81c <inv_init_fast_nomot+0x58>)
1a00f7c8:	4c15      	ldr	r4, [pc, #84]	; (1a00f820 <inv_init_fast_nomot+0x5c>)
1a00f7ca:	2100      	movs	r1, #0
1a00f7cc:	f44f 7218 	mov.w	r2, #608	; 0x260
1a00f7d0:	4628      	mov	r0, r5
1a00f7d2:	f005 fb05 	bl	1a014de0 <memset>
1a00f7d6:	2100      	movs	r1, #0
1a00f7d8:	2240      	movs	r2, #64	; 0x40
1a00f7da:	4620      	mov	r0, r4
1a00f7dc:	f005 fb00 	bl	1a014de0 <memset>
1a00f7e0:	2007      	movs	r0, #7
1a00f7e2:	f7ff fab7 	bl	1a00ed54 <inv_init_maxmin>
1a00f7e6:	2300      	movs	r3, #0
1a00f7e8:	f240 52dc 	movw	r2, #1500	; 0x5dc
1a00f7ec:	e9c4 2306 	strd	r2, r3, [r4, #24]
1a00f7f0:	2214      	movs	r2, #20
1a00f7f2:	2300      	movs	r3, #0
1a00f7f4:	e9c4 2302 	strd	r2, r3, [r4, #8]
1a00f7f8:	f44f 7216 	mov.w	r2, #600	; 0x258
1a00f7fc:	2300      	movs	r3, #0
1a00f7fe:	e9c4 2304 	strd	r2, r3, [r4, #16]
1a00f802:	4b08      	ldr	r3, [pc, #32]	; (1a00f824 <inv_init_fast_nomot+0x60>)
1a00f804:	2019      	movs	r0, #25
1a00f806:	6223      	str	r3, [r4, #32]
1a00f808:	2301      	movs	r3, #1
1a00f80a:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
1a00f80e:	f7ff ffbb 	bl	1a00f788 <inv_set_default_number_of_samples>
1a00f812:	2000      	movs	r0, #0
1a00f814:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
1a00f818:	bd38      	pop	{r3, r4, r5, pc}
1a00f81a:	bf00      	nop
1a00f81c:	10087d60 	.word	0x10087d60
1a00f820:	10087098 	.word	0x10087098
1a00f824:	2faf0800 	.word	0x2faf0800

1a00f828 <inv_enable_fast_nomot>:
1a00f828:	b508      	push	{r3, lr}
1a00f82a:	f7ff ffcb 	bl	1a00f7c4 <inv_init_fast_nomot>
1a00f82e:	b100      	cbz	r0, 1a00f832 <inv_enable_fast_nomot+0xa>
1a00f830:	bd08      	pop	{r3, pc}
1a00f832:	4802      	ldr	r0, [pc, #8]	; (1a00f83c <inv_enable_fast_nomot+0x14>)
1a00f834:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a00f838:	f7f9 bc5e 	b.w	1a0090f8 <inv_register_mpl_start_notification>
1a00f83c:	1a00edc1 	.word	0x1a00edc1

1a00f840 <inv_start_9x_sensor_fusion>:
1a00f840:	4802      	ldr	r0, [pc, #8]	; (1a00f84c <inv_start_9x_sensor_fusion+0xc>)
1a00f842:	f44f 7116 	mov.w	r1, #600	; 0x258
1a00f846:	2204      	movs	r2, #4
1a00f848:	f7f7 be82 	b.w	1a007550 <inv_register_data_cb>
1a00f84c:	1a00fddd 	.word	0x1a00fddd

1a00f850 <inv_filter_correction_angle>:
1a00f850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00f854:	4689      	mov	r9, r1
1a00f856:	6b41      	ldr	r1, [r0, #52]	; 0x34
1a00f858:	2900      	cmp	r1, #0
1a00f85a:	4692      	mov	sl, r2
1a00f85c:	4698      	mov	r8, r3
1a00f85e:	f2c0 80b6 	blt.w	1a00f9ce <inv_filter_correction_angle+0x17e>
1a00f862:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
1a00f866:	3b03      	subs	r3, #3
1a00f868:	f1d3 0b00 	rsbs	fp, r3, #0
1a00f86c:	eb5b 0b03 	adcs.w	fp, fp, r3
1a00f870:	4869      	ldr	r0, [pc, #420]	; (1a00fa18 <inv_filter_correction_angle+0x1c8>)
1a00f872:	f1a0 07bc 	sub.w	r7, r0, #188	; 0xbc
1a00f876:	1d01      	adds	r1, r0, #4
1a00f878:	2224      	movs	r2, #36	; 0x24
1a00f87a:	f005 fa4d 	bl	1a014d18 <memmove>
1a00f87e:	2500      	movs	r5, #0
1a00f880:	f8c7 90e0 	str.w	r9, [r7, #224]	; 0xe0
1a00f884:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
1a00f888:	f107 06e0 	add.w	r6, r7, #224	; 0xe0
1a00f88c:	f854 1f04 	ldr.w	r1, [r4, #4]!
1a00f890:	4628      	mov	r0, r5
1a00f892:	f004 fc4d 	bl	1a014130 <__addsf3>
1a00f896:	42b4      	cmp	r4, r6
1a00f898:	4605      	mov	r5, r0
1a00f89a:	d1f7      	bne.n	1a00f88c <inv_filter_correction_angle+0x3c>
1a00f89c:	495f      	ldr	r1, [pc, #380]	; (1a00fa1c <inv_filter_correction_angle+0x1cc>)
1a00f89e:	f004 fe03 	bl	1a0144a8 <__aeabi_fdiv>
1a00f8a2:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
1a00f8a6:	4604      	mov	r4, r0
1a00f8a8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
1a00f8ac:	4b5c      	ldr	r3, [pc, #368]	; (1a00fa20 <inv_filter_correction_angle+0x1d0>)
1a00f8ae:	dd16      	ble.n	1a00f8de <inv_filter_correction_angle+0x8e>
1a00f8b0:	22c8      	movs	r2, #200	; 0xc8
1a00f8b2:	4640      	mov	r0, r8
1a00f8b4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
1a00f8b8:	f004 fcee 	bl	1a014298 <__aeabi_i2f>
1a00f8bc:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
1a00f8c0:	4605      	mov	r5, r0
1a00f8c2:	4648      	mov	r0, r9
1a00f8c4:	db74      	blt.n	1a00f9b0 <inv_filter_correction_angle+0x160>
1a00f8c6:	4957      	ldr	r1, [pc, #348]	; (1a00fa24 <inv_filter_correction_angle+0x1d4>)
1a00f8c8:	f004 fdee 	bl	1a0144a8 <__aeabi_fdiv>
1a00f8cc:	4601      	mov	r1, r0
1a00f8ce:	4628      	mov	r0, r5
1a00f8d0:	f004 fd36 	bl	1a014340 <__aeabi_fmul>
1a00f8d4:	4954      	ldr	r1, [pc, #336]	; (1a00fa28 <inv_filter_correction_angle+0x1d8>)
1a00f8d6:	f004 fde7 	bl	1a0144a8 <__aeabi_fdiv>
1a00f8da:	4605      	mov	r5, r0
1a00f8dc:	e021      	b.n	1a00f922 <inv_filter_correction_angle+0xd2>
1a00f8de:	4a53      	ldr	r2, [pc, #332]	; (1a00fa2c <inv_filter_correction_angle+0x1dc>)
1a00f8e0:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
1a00f8e4:	fb82 0208 	smull	r0, r2, r2, r8
1a00f8e8:	ea4f 70e8 	mov.w	r0, r8, asr #31
1a00f8ec:	eba0 22e2 	sub.w	r2, r0, r2, asr #11
1a00f8f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a00f8f4:	1856      	adds	r6, r2, r1
1a00f8f6:	2e00      	cmp	r6, #0
1a00f8f8:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
1a00f8fc:	494c      	ldr	r1, [pc, #304]	; (1a00fa30 <inv_filter_correction_angle+0x1e0>)
1a00f8fe:	4648      	mov	r0, r9
1a00f900:	db68      	blt.n	1a00f9d4 <inv_filter_correction_angle+0x184>
1a00f902:	f004 fdd1 	bl	1a0144a8 <__aeabi_fdiv>
1a00f906:	4605      	mov	r5, r0
1a00f908:	4640      	mov	r0, r8
1a00f90a:	f004 fcc5 	bl	1a014298 <__aeabi_i2f>
1a00f90e:	4601      	mov	r1, r0
1a00f910:	4628      	mov	r0, r5
1a00f912:	f004 fd15 	bl	1a014340 <__aeabi_fmul>
1a00f916:	4944      	ldr	r1, [pc, #272]	; (1a00fa28 <inv_filter_correction_angle+0x1d8>)
1a00f918:	f004 fdc6 	bl	1a0144a8 <__aeabi_fdiv>
1a00f91c:	4605      	mov	r5, r0
1a00f91e:	2e00      	cmp	r6, #0
1a00f920:	d069      	beq.n	1a00f9f6 <inv_filter_correction_angle+0x1a6>
1a00f922:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
1a00f926:	b103      	cbz	r3, 1a00f92a <inv_filter_correction_angle+0xda>
1a00f928:	464d      	mov	r5, r9
1a00f92a:	4b42      	ldr	r3, [pc, #264]	; (1a00fa34 <inv_filter_correction_angle+0x1e4>)
1a00f92c:	4598      	cmp	r8, r3
1a00f92e:	bf08      	it	eq
1a00f930:	464d      	moveq	r5, r9
1a00f932:	4628      	mov	r0, r5
1a00f934:	2100      	movs	r1, #0
1a00f936:	f004 fe97 	bl	1a014668 <__aeabi_fcmpeq>
1a00f93a:	2800      	cmp	r0, #0
1a00f93c:	d043      	beq.n	1a00f9c6 <inv_filter_correction_angle+0x176>
1a00f93e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
1a00f942:	4621      	mov	r1, r4
1a00f944:	f004 fbf2 	bl	1a01412c <__aeabi_fsub>
1a00f948:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a00f94c:	f004 f884 	bl	1a013a58 <__aeabi_f2d>
1a00f950:	a32d      	add	r3, pc, #180	; (adr r3, 1a00fa08 <inv_filter_correction_angle+0x1b8>)
1a00f952:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00f956:	f004 fb63 	bl	1a014020 <__aeabi_dcmpgt>
1a00f95a:	b330      	cbz	r0, 1a00f9aa <inv_filter_correction_angle+0x15a>
1a00f95c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
1a00f960:	2100      	movs	r1, #0
1a00f962:	f004 fe81 	bl	1a014668 <__aeabi_fcmpeq>
1a00f966:	b300      	cbz	r0, 1a00f9aa <inv_filter_correction_angle+0x15a>
1a00f968:	f1bb 0f00 	cmp.w	fp, #0
1a00f96c:	d01d      	beq.n	1a00f9aa <inv_filter_correction_angle+0x15a>
1a00f96e:	4b2c      	ldr	r3, [pc, #176]	; (1a00fa20 <inv_filter_correction_angle+0x1d0>)
1a00f970:	22c8      	movs	r2, #200	; 0xc8
1a00f972:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
1a00f976:	4648      	mov	r0, r9
1a00f978:	f004 f86e 	bl	1a013a58 <__aeabi_f2d>
1a00f97c:	2200      	movs	r2, #0
1a00f97e:	4b2e      	ldr	r3, [pc, #184]	; (1a00fa38 <inv_filter_correction_angle+0x1e8>)
1a00f980:	f004 f9e8 	bl	1a013d54 <__aeabi_ddiv>
1a00f984:	4604      	mov	r4, r0
1a00f986:	4640      	mov	r0, r8
1a00f988:	460d      	mov	r5, r1
1a00f98a:	f004 f853 	bl	1a013a34 <__aeabi_i2d>
1a00f98e:	4602      	mov	r2, r0
1a00f990:	460b      	mov	r3, r1
1a00f992:	4620      	mov	r0, r4
1a00f994:	4629      	mov	r1, r5
1a00f996:	f004 f8b3 	bl	1a013b00 <__aeabi_dmul>
1a00f99a:	a31d      	add	r3, pc, #116	; (adr r3, 1a00fa10 <inv_filter_correction_angle+0x1c0>)
1a00f99c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00f9a0:	f004 f9d8 	bl	1a013d54 <__aeabi_ddiv>
1a00f9a4:	f004 fb6e 	bl	1a014084 <__aeabi_d2f>
1a00f9a8:	4605      	mov	r5, r0
1a00f9aa:	4628      	mov	r0, r5
1a00f9ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00f9b0:	4922      	ldr	r1, [pc, #136]	; (1a00fa3c <inv_filter_correction_angle+0x1ec>)
1a00f9b2:	f004 fd79 	bl	1a0144a8 <__aeabi_fdiv>
1a00f9b6:	4629      	mov	r1, r5
1a00f9b8:	f004 fcc2 	bl	1a014340 <__aeabi_fmul>
1a00f9bc:	491a      	ldr	r1, [pc, #104]	; (1a00fa28 <inv_filter_correction_angle+0x1d8>)
1a00f9be:	f004 fd73 	bl	1a0144a8 <__aeabi_fdiv>
1a00f9c2:	4605      	mov	r5, r0
1a00f9c4:	e7ad      	b.n	1a00f922 <inv_filter_correction_angle+0xd2>
1a00f9c6:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
1a00f9ca:	4620      	mov	r0, r4
1a00f9cc:	e7b9      	b.n	1a00f942 <inv_filter_correction_angle+0xf2>
1a00f9ce:	f04f 0b00 	mov.w	fp, #0
1a00f9d2:	e74d      	b.n	1a00f870 <inv_filter_correction_angle+0x20>
1a00f9d4:	2200      	movs	r2, #0
1a00f9d6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
1a00f9da:	f004 fd65 	bl	1a0144a8 <__aeabi_fdiv>
1a00f9de:	4605      	mov	r5, r0
1a00f9e0:	4640      	mov	r0, r8
1a00f9e2:	f004 fc59 	bl	1a014298 <__aeabi_i2f>
1a00f9e6:	4601      	mov	r1, r0
1a00f9e8:	4628      	mov	r0, r5
1a00f9ea:	f004 fca9 	bl	1a014340 <__aeabi_fmul>
1a00f9ee:	490e      	ldr	r1, [pc, #56]	; (1a00fa28 <inv_filter_correction_angle+0x1d8>)
1a00f9f0:	f004 fd5a 	bl	1a0144a8 <__aeabi_fdiv>
1a00f9f4:	4605      	mov	r5, r0
1a00f9f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
1a00f9fa:	2b01      	cmp	r3, #1
1a00f9fc:	bf08      	it	eq
1a00f9fe:	2500      	moveq	r5, #0
1a00fa00:	e78f      	b.n	1a00f922 <inv_filter_correction_angle+0xd2>
1a00fa02:	bf00      	nop
1a00fa04:	f3af 8000 	nop.w
1a00fa08:	cac08312 	.word	0xcac08312
1a00fa0c:	3fb645a1 	.word	0x3fb645a1
1a00fa10:	00000000 	.word	0x00000000
1a00fa14:	40b38800 	.word	0x40b38800
1a00fa18:	1008807c 	.word	0x1008807c
1a00fa1c:	41200000 	.word	0x41200000
1a00fa20:	10087fc0 	.word	0x10087fc0
1a00fa24:	42480000 	.word	0x42480000
1a00fa28:	459c4000 	.word	0x459c4000
1a00fa2c:	68db8bad 	.word	0x68db8bad
1a00fa30:	43c80000 	.word	0x43c80000
1a00fa34:	000f4240 	.word	0x000f4240
1a00fa38:	40790000 	.word	0x40790000
1a00fa3c:	43480000 	.word	0x43480000

1a00fa40 <inv_perform_9x_fusion>:
1a00fa40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00fa44:	4ec2      	ldr	r6, [pc, #776]	; (1a00fd50 <inv_perform_9x_fusion+0x310>)
1a00fa46:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
1a00fa4a:	b0ab      	sub	sp, #172	; 0xac
1a00fa4c:	2400      	movs	r4, #0
1a00fa4e:	2b03      	cmp	r3, #3
1a00fa50:	9403      	str	r4, [sp, #12]
1a00fa52:	9404      	str	r4, [sp, #16]
1a00fa54:	9405      	str	r4, [sp, #20]
1a00fa56:	9001      	str	r0, [sp, #4]
1a00fa58:	f000 8176 	beq.w	1a00fd48 <inv_perform_9x_fusion+0x308>
1a00fa5c:	f10d 0824 	add.w	r8, sp, #36	; 0x24
1a00fa60:	1933      	adds	r3, r6, r4
1a00fa62:	4dbb      	ldr	r5, [pc, #748]	; (1a00fd50 <inv_perform_9x_fusion+0x310>)
1a00fa64:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
1a00fa68:	f004 fc16 	bl	1a014298 <__aeabi_i2f>
1a00fa6c:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a00fa70:	f004 fc66 	bl	1a014340 <__aeabi_fmul>
1a00fa74:	f848 0004 	str.w	r0, [r8, r4]
1a00fa78:	3404      	adds	r4, #4
1a00fa7a:	2c10      	cmp	r4, #16
1a00fa7c:	d1f0      	bne.n	1a00fa60 <inv_perform_9x_fusion+0x20>
1a00fa7e:	af1d      	add	r7, sp, #116	; 0x74
1a00fa80:	ac06      	add	r4, sp, #24
1a00fa82:	4638      	mov	r0, r7
1a00fa84:	f7f9 f990 	bl	1a008da8 <inv_get_6axis_quaternion>
1a00fa88:	4620      	mov	r0, r4
1a00fa8a:	f7f9 f93d 	bl	1a008d08 <inv_get_gravity>
1a00fa8e:	223c      	movs	r2, #60	; 0x3c
1a00fa90:	f105 010c 	add.w	r1, r5, #12
1a00fa94:	4628      	mov	r0, r5
1a00fa96:	f005 f93f 	bl	1a014d18 <memmove>
1a00fa9a:	2250      	movs	r2, #80	; 0x50
1a00fa9c:	f105 0158 	add.w	r1, r5, #88	; 0x58
1a00faa0:	f105 0048 	add.w	r0, r5, #72	; 0x48
1a00faa4:	f005 f938 	bl	1a014d18 <memmove>
1a00faa8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
1a00faac:	f105 033c 	add.w	r3, r5, #60	; 0x3c
1a00fab0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
1a00fab4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
1a00fab8:	f8d5 c124 	ldr.w	ip, [r5, #292]	; 0x124
1a00fabc:	f10c 0401 	add.w	r4, ip, #1
1a00fac0:	f105 0e98 	add.w	lr, r5, #152	; 0x98
1a00fac4:	2c06      	cmp	r4, #6
1a00fac6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
1a00faca:	f8c5 4124 	str.w	r4, [r5, #292]	; 0x124
1a00face:	f340 80fe 	ble.w	1a00fcce <inv_perform_9x_fusion+0x28e>
1a00fad2:	2306      	movs	r3, #6
1a00fad4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
1a00fad8:	2400      	movs	r4, #0
1a00fada:	9a01      	ldr	r2, [sp, #4]
1a00fadc:	f8df a288 	ldr.w	sl, [pc, #648]	; 1a00fd68 <inv_perform_9x_fusion+0x328>
1a00fae0:	ad21      	add	r5, sp, #132	; 0x84
1a00fae2:	f102 0ba0 	add.w	fp, r2, #160	; 0xa0
1a00fae6:	eb06 1104 	add.w	r1, r6, r4, lsl #4
1a00faea:	489a      	ldr	r0, [pc, #616]	; (1a00fd54 <inv_perform_9x_fusion+0x314>)
1a00faec:	3148      	adds	r1, #72	; 0x48
1a00faee:	462a      	mov	r2, r5
1a00faf0:	f7f8 f9c6 	bl	1a007e80 <inv_q_mult>
1a00faf4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
1a00faf8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
1a00fafc:	4658      	mov	r0, fp
1a00fafe:	462a      	mov	r2, r5
1a00fb00:	f7f8 f8c4 	bl	1a007c8c <inv_compass_angle>
1a00fb04:	f02a 4100 	bic.w	r1, sl, #2147483648	; 0x80000000
1a00fb08:	4681      	mov	r9, r0
1a00fb0a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a00fb0e:	3401      	adds	r4, #1
1a00fb10:	f004 fdb4 	bl	1a01467c <__aeabi_fcmplt>
1a00fb14:	b100      	cbz	r0, 1a00fb18 <inv_perform_9x_fusion+0xd8>
1a00fb16:	46ca      	mov	sl, r9
1a00fb18:	2c05      	cmp	r4, #5
1a00fb1a:	dde4      	ble.n	1a00fae6 <inv_perform_9x_fusion+0xa6>
1a00fb1c:	9b01      	ldr	r3, [sp, #4]
1a00fb1e:	f103 0018 	add.w	r0, r3, #24
1a00fb22:	f7f8 f93b 	bl	1a007d9c <inv_get_gyro_sum_of_sqr>
1a00fb26:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
1a00fb2a:	498b      	ldr	r1, [pc, #556]	; (1a00fd58 <inv_perform_9x_fusion+0x318>)
1a00fb2c:	0982      	lsrs	r2, r0, #6
1a00fb2e:	428b      	cmp	r3, r1
1a00fb30:	bfa8      	it	ge
1a00fb32:	460b      	movge	r3, r1
1a00fb34:	9801      	ldr	r0, [sp, #4]
1a00fb36:	4651      	mov	r1, sl
1a00fb38:	f7ff fe8a 	bl	1a00f850 <inv_filter_correction_angle>
1a00fb3c:	f8d6 10ec 	ldr.w	r1, [r6, #236]	; 0xec
1a00fb40:	f004 fbfe 	bl	1a014340 <__aeabi_fmul>
1a00fb44:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
1a00fb48:	a819      	add	r0, sp, #100	; 0x64
1a00fb4a:	f7f9 f92d 	bl	1a008da8 <inv_get_6axis_quaternion>
1a00fb4e:	a819      	add	r0, sp, #100	; 0x64
1a00fb50:	4629      	mov	r1, r5
1a00fb52:	f7f8 fdb9 	bl	1a0086c8 <inv_quaternion_to_rotation>
1a00fb56:	a919      	add	r1, sp, #100	; 0x64
1a00fb58:	463a      	mov	r2, r7
1a00fb5a:	4880      	ldr	r0, [pc, #512]	; (1a00fd5c <inv_perform_9x_fusion+0x31c>)
1a00fb5c:	f7f8 f990 	bl	1a007e80 <inv_q_mult>
1a00fb60:	a819      	add	r0, sp, #100	; 0x64
1a00fb62:	497e      	ldr	r1, [pc, #504]	; (1a00fd5c <inv_perform_9x_fusion+0x31c>)
1a00fb64:	f7f8 fa8a 	bl	1a00807c <inv_q_invert>
1a00fb68:	f10d 0e08 	add.w	lr, sp, #8
1a00fb6c:	4628      	mov	r0, r5
1a00fb6e:	f10d 0c14 	add.w	ip, sp, #20
1a00fb72:	2300      	movs	r3, #0
1a00fb74:	2400      	movs	r4, #0
1a00fb76:	2500      	movs	r5, #0
1a00fb78:	18fa      	adds	r2, r7, r3
1a00fb7a:	58c1      	ldr	r1, [r0, r3]
1a00fb7c:	6852      	ldr	r2, [r2, #4]
1a00fb7e:	3304      	adds	r3, #4
1a00fb80:	2b0c      	cmp	r3, #12
1a00fb82:	fbc2 4501 	smlal	r4, r5, r2, r1
1a00fb86:	d1f7      	bne.n	1a00fb78 <inv_perform_9x_fusion+0x138>
1a00fb88:	0fa3      	lsrs	r3, r4, #30
1a00fb8a:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
1a00fb8e:	f84e 3f04 	str.w	r3, [lr, #4]!
1a00fb92:	300c      	adds	r0, #12
1a00fb94:	45e6      	cmp	lr, ip
1a00fb96:	d1ec      	bne.n	1a00fb72 <inv_perform_9x_fusion+0x132>
1a00fb98:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
1a00fb9c:	2b00      	cmp	r3, #0
1a00fb9e:	f040 809f 	bne.w	1a00fce0 <inv_perform_9x_fusion+0x2a0>
1a00fba2:	9f05      	ldr	r7, [sp, #20]
1a00fba4:	4278      	negs	r0, r7
1a00fba6:	f004 fb77 	bl	1a014298 <__aeabi_i2f>
1a00fbaa:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a00fbae:	f004 fbc7 	bl	1a014340 <__aeabi_fmul>
1a00fbb2:	4605      	mov	r5, r0
1a00fbb4:	f005 fc1c 	bl	1a0153f0 <cosf>
1a00fbb8:	2400      	movs	r4, #0
1a00fbba:	9011      	str	r0, [sp, #68]	; 0x44
1a00fbbc:	4628      	mov	r0, r5
1a00fbbe:	9412      	str	r4, [sp, #72]	; 0x48
1a00fbc0:	9413      	str	r4, [sp, #76]	; 0x4c
1a00fbc2:	f005 fcb9 	bl	1a015538 <sinf>
1a00fbc6:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
1a00fbca:	9014      	str	r0, [sp, #80]	; 0x50
1a00fbcc:	4864      	ldr	r0, [pc, #400]	; (1a00fd60 <inv_perform_9x_fusion+0x320>)
1a00fbce:	fb80 2003 	smull	r2, r0, r0, r3
1a00fbd2:	17db      	asrs	r3, r3, #31
1a00fbd4:	ebc3 20e0 	rsb	r0, r3, r0, asr #11
1a00fbd8:	f004 fb5e 	bl	1a014298 <__aeabi_i2f>
1a00fbdc:	4605      	mov	r5, r0
1a00fbde:	4638      	mov	r0, r7
1a00fbe0:	f004 fb5a 	bl	1a014298 <__aeabi_i2f>
1a00fbe4:	495f      	ldr	r1, [pc, #380]	; (1a00fd64 <inv_perform_9x_fusion+0x324>)
1a00fbe6:	f004 fc5f 	bl	1a0144a8 <__aeabi_fdiv>
1a00fbea:	4629      	mov	r1, r5
1a00fbec:	f004 fc5c 	bl	1a0144a8 <__aeabi_fdiv>
1a00fbf0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
1a00fbf4:	f004 fba4 	bl	1a014340 <__aeabi_fmul>
1a00fbf8:	f004 fd68 	bl	1a0146cc <__aeabi_f2iz>
1a00fbfc:	0040      	lsls	r0, r0, #1
1a00fbfe:	f004 fb4b 	bl	1a014298 <__aeabi_i2f>
1a00fc02:	4958      	ldr	r1, [pc, #352]	; (1a00fd64 <inv_perform_9x_fusion+0x324>)
1a00fc04:	f004 fb9c 	bl	1a014340 <__aeabi_fmul>
1a00fc08:	4601      	mov	r1, r0
1a00fc0a:	4628      	mov	r0, r5
1a00fc0c:	f004 fb98 	bl	1a014340 <__aeabi_fmul>
1a00fc10:	f004 fd5c 	bl	1a0146cc <__aeabi_f2iz>
1a00fc14:	f004 fb40 	bl	1a014298 <__aeabi_i2f>
1a00fc18:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a00fc1c:	f004 fb90 	bl	1a014340 <__aeabi_fmul>
1a00fc20:	4605      	mov	r5, r0
1a00fc22:	f005 fbe5 	bl	1a0153f0 <cosf>
1a00fc26:	9015      	str	r0, [sp, #84]	; 0x54
1a00fc28:	4628      	mov	r0, r5
1a00fc2a:	9416      	str	r4, [sp, #88]	; 0x58
1a00fc2c:	9417      	str	r4, [sp, #92]	; 0x5c
1a00fc2e:	f005 fc83 	bl	1a015538 <sinf>
1a00fc32:	ad11      	add	r5, sp, #68	; 0x44
1a00fc34:	9018      	str	r0, [sp, #96]	; 0x60
1a00fc36:	4629      	mov	r1, r5
1a00fc38:	4640      	mov	r0, r8
1a00fc3a:	aa0d      	add	r2, sp, #52	; 0x34
1a00fc3c:	f7f8 fa76 	bl	1a00812c <inv_q_multf>
1a00fc40:	a80d      	add	r0, sp, #52	; 0x34
1a00fc42:	a915      	add	r1, sp, #84	; 0x54
1a00fc44:	462a      	mov	r2, r5
1a00fc46:	f7f8 fa71 	bl	1a00812c <inv_q_multf>
1a00fc4a:	9b01      	ldr	r3, [sp, #4]
1a00fc4c:	f8d3 70bc 	ldr.w	r7, [r3, #188]	; 0xbc
1a00fc50:	2f00      	cmp	r7, #0
1a00fc52:	dd11      	ble.n	1a00fc78 <inv_perform_9x_fusion+0x238>
1a00fc54:	2400      	movs	r4, #0
1a00fc56:	5928      	ldr	r0, [r5, r4]
1a00fc58:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a00fc5c:	f848 0004 	str.w	r0, [r8, r4]
1a00fc60:	f004 fb6e 	bl	1a014340 <__aeabi_fmul>
1a00fc64:	f004 fd32 	bl	1a0146cc <__aeabi_f2iz>
1a00fc68:	1933      	adds	r3, r6, r4
1a00fc6a:	3404      	adds	r4, #4
1a00fc6c:	2c10      	cmp	r4, #16
1a00fc6e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
1a00fc72:	d1f0      	bne.n	1a00fc56 <inv_perform_9x_fusion+0x216>
1a00fc74:	2f03      	cmp	r7, #3
1a00fc76:	d079      	beq.n	1a00fd6c <inv_perform_9x_fusion+0x32c>
1a00fc78:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
1a00fc7c:	4c34      	ldr	r4, [pc, #208]	; (1a00fd50 <inv_perform_9x_fusion+0x310>)
1a00fc7e:	f004 fb0b 	bl	1a014298 <__aeabi_i2f>
1a00fc82:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a00fc86:	f004 fb5b 	bl	1a014340 <__aeabi_fmul>
1a00fc8a:	900d      	str	r0, [sp, #52]	; 0x34
1a00fc8c:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
1a00fc90:	f004 fb02 	bl	1a014298 <__aeabi_i2f>
1a00fc94:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a00fc98:	f004 fb52 	bl	1a014340 <__aeabi_fmul>
1a00fc9c:	900e      	str	r0, [sp, #56]	; 0x38
1a00fc9e:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
1a00fca2:	f004 faf9 	bl	1a014298 <__aeabi_i2f>
1a00fca6:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a00fcaa:	f004 fb49 	bl	1a014340 <__aeabi_fmul>
1a00fcae:	900f      	str	r0, [sp, #60]	; 0x3c
1a00fcb0:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
1a00fcb4:	f004 faf0 	bl	1a014298 <__aeabi_i2f>
1a00fcb8:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a00fcbc:	f004 fb40 	bl	1a014340 <__aeabi_fmul>
1a00fcc0:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
1a00fcc4:	9010      	str	r0, [sp, #64]	; 0x40
1a00fcc6:	b973      	cbnz	r3, 1a00fce6 <inv_perform_9x_fusion+0x2a6>
1a00fcc8:	b02b      	add	sp, #172	; 0xac
1a00fcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00fcce:	f1cc 0405 	rsb	r4, ip, #5
1a00fcd2:	2c05      	cmp	r4, #5
1a00fcd4:	f77f af01 	ble.w	1a00fada <inv_perform_9x_fusion+0x9a>
1a00fcd8:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1a00fd68 <inv_perform_9x_fusion+0x328>
1a00fcdc:	ad21      	add	r5, sp, #132	; 0x84
1a00fcde:	e71d      	b.n	1a00fb1c <inv_perform_9x_fusion+0xdc>
1a00fce0:	2000      	movs	r0, #0
1a00fce2:	4607      	mov	r7, r0
1a00fce4:	e75f      	b.n	1a00fba6 <inv_perform_9x_fusion+0x166>
1a00fce6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
1a00fcea:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
1a00fcee:	f004 fb27 	bl	1a014340 <__aeabi_fmul>
1a00fcf2:	4605      	mov	r5, r0
1a00fcf4:	f005 fb7c 	bl	1a0153f0 <cosf>
1a00fcf8:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a00fcfc:	f004 fb20 	bl	1a014340 <__aeabi_fmul>
1a00fd00:	f004 fce4 	bl	1a0146cc <__aeabi_f2iz>
1a00fd04:	2300      	movs	r3, #0
1a00fd06:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
1a00fd0a:	4628      	mov	r0, r5
1a00fd0c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
1a00fd10:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
1a00fd14:	f005 fc10 	bl	1a015538 <sinf>
1a00fd18:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a00fd1c:	f004 fb10 	bl	1a014340 <__aeabi_fmul>
1a00fd20:	f004 fcd4 	bl	1a0146cc <__aeabi_f2iz>
1a00fd24:	9a01      	ldr	r2, [sp, #4]
1a00fd26:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
1a00fd2a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
1a00fd2e:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
1a00fd32:	f7f8 ff49 	bl	1a008bc8 <inv_set_compass_correction>
1a00fd36:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
1a00fd3a:	2b00      	cmp	r3, #0
1a00fd3c:	d0c4      	beq.n	1a00fcc8 <inv_perform_9x_fusion+0x288>
1a00fd3e:	4a04      	ldr	r2, [pc, #16]	; (1a00fd50 <inv_perform_9x_fusion+0x310>)
1a00fd40:	3b01      	subs	r3, #1
1a00fd42:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
1a00fd46:	e7bf      	b.n	1a00fcc8 <inv_perform_9x_fusion+0x288>
1a00fd48:	2302      	movs	r3, #2
1a00fd4a:	f8c6 3120 	str.w	r3, [r6, #288]	; 0x120
1a00fd4e:	e7bb      	b.n	1a00fcc8 <inv_perform_9x_fusion+0x288>
1a00fd50:	10087fc0 	.word	0x10087fc0
1a00fd54:	10088068 	.word	0x10088068
1a00fd58:	000f4240 	.word	0x000f4240
1a00fd5c:	100880bc 	.word	0x100880bc
1a00fd60:	68db8bad 	.word	0x68db8bad
1a00fd64:	473702e1 	.word	0x473702e1
1a00fd68:	49742400 	.word	0x49742400
1a00fd6c:	f001 f946 	bl	1a010ffc <inv_get_magnetic_disturbance_state>
1a00fd70:	4604      	mov	r4, r0
1a00fd72:	2800      	cmp	r0, #0
1a00fd74:	d180      	bne.n	1a00fc78 <inv_perform_9x_fusion+0x238>
1a00fd76:	4b17      	ldr	r3, [pc, #92]	; (1a00fdd4 <inv_perform_9x_fusion+0x394>)
1a00fd78:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
1a00fd7c:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
1a00fd80:	f004 fade 	bl	1a014340 <__aeabi_fmul>
1a00fd84:	4607      	mov	r7, r0
1a00fd86:	f005 fb33 	bl	1a0153f0 <cosf>
1a00fd8a:	2300      	movs	r3, #0
1a00fd8c:	9015      	str	r0, [sp, #84]	; 0x54
1a00fd8e:	4638      	mov	r0, r7
1a00fd90:	9316      	str	r3, [sp, #88]	; 0x58
1a00fd92:	9317      	str	r3, [sp, #92]	; 0x5c
1a00fd94:	f005 fbd0 	bl	1a015538 <sinf>
1a00fd98:	a915      	add	r1, sp, #84	; 0x54
1a00fd9a:	9018      	str	r0, [sp, #96]	; 0x60
1a00fd9c:	462a      	mov	r2, r5
1a00fd9e:	4640      	mov	r0, r8
1a00fda0:	f7f8 f9c4 	bl	1a00812c <inv_q_multf>
1a00fda4:	4628      	mov	r0, r5
1a00fda6:	f7f8 facf 	bl	1a008348 <inv_q_normalizef>
1a00fdaa:	5928      	ldr	r0, [r5, r4]
1a00fdac:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a00fdb0:	f004 fac6 	bl	1a014340 <__aeabi_fmul>
1a00fdb4:	f004 fc8a 	bl	1a0146cc <__aeabi_f2iz>
1a00fdb8:	1933      	adds	r3, r6, r4
1a00fdba:	3404      	adds	r4, #4
1a00fdbc:	2c10      	cmp	r4, #16
1a00fdbe:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
1a00fdc2:	d1f2      	bne.n	1a00fdaa <inv_perform_9x_fusion+0x36a>
1a00fdc4:	9b01      	ldr	r3, [sp, #4]
1a00fdc6:	4804      	ldr	r0, [pc, #16]	; (1a00fdd8 <inv_perform_9x_fusion+0x398>)
1a00fdc8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
1a00fdcc:	f7f8 fefc 	bl	1a008bc8 <inv_set_compass_correction>
1a00fdd0:	e7b1      	b.n	1a00fd36 <inv_perform_9x_fusion+0x2f6>
1a00fdd2:	bf00      	nop
1a00fdd4:	10087fc0 	.word	0x10087fc0
1a00fdd8:	10088068 	.word	0x10088068

1a00fddc <inv_process_9x_sensor_fusion_cb>:
1a00fddc:	b538      	push	{r3, r4, r5, lr}
1a00fdde:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
1a00fde2:	f013 0210 	ands.w	r2, r3, #16
1a00fde6:	4b21      	ldr	r3, [pc, #132]	; (1a00fe6c <inv_process_9x_sensor_fusion_cb+0x90>)
1a00fde8:	d104      	bne.n	1a00fdf4 <inv_process_9x_sensor_fusion_cb+0x18>
1a00fdea:	2103      	movs	r1, #3
1a00fdec:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
1a00fdf0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
1a00fdf4:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
1a00fdf8:	05d2      	lsls	r2, r2, #23
1a00fdfa:	d407      	bmi.n	1a00fe0c <inv_process_9x_sensor_fusion_cb+0x30>
1a00fdfc:	6b02      	ldr	r2, [r0, #48]	; 0x30
1a00fdfe:	f412 7280 	ands.w	r2, r2, #256	; 0x100
1a00fe02:	d028      	beq.n	1a00fe56 <inv_process_9x_sensor_fusion_cb+0x7a>
1a00fe04:	6f42      	ldr	r2, [r0, #116]	; 0x74
1a00fe06:	f412 7280 	ands.w	r2, r2, #256	; 0x100
1a00fe0a:	d024      	beq.n	1a00fe56 <inv_process_9x_sensor_fusion_cb+0x7a>
1a00fe0c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
1a00fe10:	4b16      	ldr	r3, [pc, #88]	; (1a00fe6c <inv_process_9x_sensor_fusion_cb+0x90>)
1a00fe12:	b172      	cbz	r2, 1a00fe32 <inv_process_9x_sensor_fusion_cb+0x56>
1a00fe14:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
1a00fe18:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
1a00fe1c:	4c14      	ldr	r4, [pc, #80]	; (1a00fe70 <inv_process_9x_sensor_fusion_cb+0x94>)
1a00fe1e:	1a8a      	subs	r2, r1, r2
1a00fe20:	fba4 1202 	umull	r1, r2, r4, r2
1a00fe24:	0992      	lsrs	r2, r2, #6
1a00fe26:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
1a00fe2a:	f7ff fe09 	bl	1a00fa40 <inv_perform_9x_fusion>
1a00fe2e:	2000      	movs	r0, #0
1a00fe30:	bd38      	pop	{r3, r4, r5, pc}
1a00fe32:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
1a00fe36:	f644 641f 	movw	r4, #19999	; 0x4e1f
1a00fe3a:	42a1      	cmp	r1, r4
1a00fe3c:	dc12      	bgt.n	1a00fe64 <inv_process_9x_sensor_fusion_cb+0x88>
1a00fe3e:	f8d3 512c 	ldr.w	r5, [r3, #300]	; 0x12c
1a00fe42:	1949      	adds	r1, r1, r5
1a00fe44:	42a1      	cmp	r1, r4
1a00fe46:	f8c3 112c 	str.w	r1, [r3, #300]	; 0x12c
1a00fe4a:	ddf0      	ble.n	1a00fe2e <inv_process_9x_sensor_fusion_cb+0x52>
1a00fe4c:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
1a00fe50:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
1a00fe54:	e7e9      	b.n	1a00fe2a <inv_process_9x_sensor_fusion_cb+0x4e>
1a00fe56:	2103      	movs	r1, #3
1a00fe58:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
1a00fe5c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
1a00fe60:	2000      	movs	r0, #0
1a00fe62:	bd38      	pop	{r3, r4, r5, pc}
1a00fe64:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
1a00fe68:	e7df      	b.n	1a00fe2a <inv_process_9x_sensor_fusion_cb+0x4e>
1a00fe6a:	bf00      	nop
1a00fe6c:	10087fc0 	.word	0x10087fc0
1a00fe70:	10624dd3 	.word	0x10624dd3

1a00fe74 <inv_init_9x_fusion>:
1a00fe74:	b510      	push	{r4, lr}
1a00fe76:	4c0d      	ldr	r4, [pc, #52]	; (1a00feac <inv_init_9x_fusion+0x38>)
1a00fe78:	2100      	movs	r1, #0
1a00fe7a:	f44f 729c 	mov.w	r2, #312	; 0x138
1a00fe7e:	4620      	mov	r0, r4
1a00fe80:	f004 ffae 	bl	1a014de0 <memset>
1a00fe84:	4620      	mov	r0, r4
1a00fe86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a00fe8a:	f840 3fa8 	str.w	r3, [r0, #168]!
1a00fe8e:	2100      	movs	r1, #0
1a00fe90:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
1a00fe94:	f7f8 fe98 	bl	1a008bc8 <inv_set_compass_correction>
1a00fe98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00fe9c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
1a00fea0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
1a00fea4:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
1a00fea8:	bd10      	pop	{r4, pc}
1a00feaa:	bf00      	nop
1a00feac:	10087fc0 	.word	0x10087fc0

1a00feb0 <inv_9x_fusion_use_timestamps>:
1a00feb0:	4b02      	ldr	r3, [pc, #8]	; (1a00febc <inv_9x_fusion_use_timestamps+0xc>)
1a00feb2:	f8c3 0134 	str.w	r0, [r3, #308]	; 0x134
1a00feb6:	2000      	movs	r0, #0
1a00feb8:	4770      	bx	lr
1a00feba:	bf00      	nop
1a00febc:	10087fc0 	.word	0x10087fc0

1a00fec0 <inv_enable_9x_sensor_fusion>:
1a00fec0:	b508      	push	{r3, lr}
1a00fec2:	f7ff ffd7 	bl	1a00fe74 <inv_init_9x_fusion>
1a00fec6:	4b05      	ldr	r3, [pc, #20]	; (1a00fedc <inv_enable_9x_sensor_fusion+0x1c>)
1a00fec8:	4805      	ldr	r0, [pc, #20]	; (1a00fee0 <inv_enable_9x_sensor_fusion+0x20>)
1a00feca:	2200      	movs	r2, #0
1a00fecc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
1a00fed0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
1a00fed4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a00fed8:	f7f9 b90e 	b.w	1a0090f8 <inv_register_mpl_start_notification>
1a00fedc:	10087fc0 	.word	0x10087fc0
1a00fee0:	1a00f841 	.word	0x1a00f841

1a00fee4 <inv_gtc_store>:
1a00fee4:	b470      	push	{r4, r5, r6}
1a00fee6:	4e0b      	ldr	r6, [pc, #44]	; (1a00ff14 <inv_gtc_store+0x30>)
1a00fee8:	f506 73d2 	add.w	r3, r6, #420	; 0x1a4
1a00feec:	4605      	mov	r5, r0
1a00feee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
1a00fef2:	b085      	sub	sp, #20
1a00fef4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
1a00fef8:	f896 31b0 	ldrb.w	r3, [r6, #432]	; 0x1b0
1a00fefc:	466c      	mov	r4, sp
1a00fefe:	f88d 300c 	strb.w	r3, [sp, #12]
1a00ff02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a00ff04:	6028      	str	r0, [r5, #0]
1a00ff06:	6069      	str	r1, [r5, #4]
1a00ff08:	60aa      	str	r2, [r5, #8]
1a00ff0a:	60eb      	str	r3, [r5, #12]
1a00ff0c:	2000      	movs	r0, #0
1a00ff0e:	b005      	add	sp, #20
1a00ff10:	bc70      	pop	{r4, r5, r6}
1a00ff12:	4770      	bx	lr
1a00ff14:	100870d8 	.word	0x100870d8

1a00ff18 <inv_gtc_load>:
1a00ff18:	b470      	push	{r4, r5, r6}
1a00ff1a:	4603      	mov	r3, r0
1a00ff1c:	b085      	sub	sp, #20
1a00ff1e:	6800      	ldr	r0, [r0, #0]
1a00ff20:	6859      	ldr	r1, [r3, #4]
1a00ff22:	689a      	ldr	r2, [r3, #8]
1a00ff24:	68db      	ldr	r3, [r3, #12]
1a00ff26:	4e08      	ldr	r6, [pc, #32]	; (1a00ff48 <inv_gtc_load+0x30>)
1a00ff28:	466c      	mov	r4, sp
1a00ff2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00ff2c:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00ff30:	f506 73d2 	add.w	r3, r6, #420	; 0x1a4
1a00ff34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
1a00ff38:	466d      	mov	r5, sp
1a00ff3a:	f886 41b0 	strb.w	r4, [r6, #432]	; 0x1b0
1a00ff3e:	2000      	movs	r0, #0
1a00ff40:	b005      	add	sp, #20
1a00ff42:	bc70      	pop	{r4, r5, r6}
1a00ff44:	4770      	bx	lr
1a00ff46:	bf00      	nop
1a00ff48:	100870d8 	.word	0x100870d8

1a00ff4c <inv_gtc_data_cb>:
1a00ff4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00ff50:	b0b5      	sub	sp, #212	; 0xd4
1a00ff52:	a923      	add	r1, sp, #140	; 0x8c
1a00ff54:	4604      	mov	r4, r0
1a00ff56:	a825      	add	r0, sp, #148	; 0x94
1a00ff58:	f7f7 f994 	bl	1a007284 <inv_get_gyro_bias>
1a00ff5c:	a824      	add	r0, sp, #144	; 0x90
1a00ff5e:	f7f8 fe7d 	bl	1a008c5c <inv_get_motion_state>
1a00ff62:	2802      	cmp	r0, #2
1a00ff64:	d00d      	beq.n	1a00ff82 <inv_gtc_data_cb+0x36>
1a00ff66:	4ba4      	ldr	r3, [pc, #656]	; (1a0101f8 <inv_gtc_data_cb+0x2ac>)
1a00ff68:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
1a00ff6c:	f893 01b0 	ldrb.w	r0, [r3, #432]	; 0x1b0
1a00ff70:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a00ff72:	b110      	cbz	r0, 1a00ff7a <inv_gtc_data_cb+0x2e>
1a00ff74:	1a8a      	subs	r2, r1, r2
1a00ff76:	f040 811b 	bne.w	1a0101b0 <inv_gtc_data_cb+0x264>
1a00ff7a:	2000      	movs	r0, #0
1a00ff7c:	b035      	add	sp, #212	; 0xd4
1a00ff7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00ff82:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a00ff84:	2b03      	cmp	r3, #3
1a00ff86:	d1f8      	bne.n	1a00ff7a <inv_gtc_data_cb+0x2e>
1a00ff88:	f7f7 f962 	bl	1a007250 <inv_get_gyro_bias_tc_set>
1a00ff8c:	2800      	cmp	r0, #0
1a00ff8e:	d0f4      	beq.n	1a00ff7a <inv_gtc_data_cb+0x2e>
1a00ff90:	f8df 9264 	ldr.w	r9, [pc, #612]	; 1a0101f8 <inv_gtc_data_cb+0x2ac>
1a00ff94:	4999      	ldr	r1, [pc, #612]	; (1a0101fc <inv_gtc_data_cb+0x2b0>)
1a00ff96:	f8d9 31b4 	ldr.w	r3, [r9, #436]	; 0x1b4
1a00ff9a:	f8d9 21b8 	ldr.w	r2, [r9, #440]	; 0x1b8
1a00ff9e:	9d23      	ldr	r5, [sp, #140]	; 0x8c
1a00ffa0:	1ad2      	subs	r2, r2, r3
1a00ffa2:	fb81 0102 	smull	r0, r1, r1, r2
1a00ffa6:	17d2      	asrs	r2, r2, #31
1a00ffa8:	1aeb      	subs	r3, r5, r3
1a00ffaa:	ebc2 0261 	rsb	r2, r2, r1, asr #1
1a00ffae:	fb93 f4f2 	sdiv	r4, r3, r2
1a00ffb2:	b2e4      	uxtb	r4, r4
1a00ffb4:	2c04      	cmp	r4, #4
1a00ffb6:	d8e0      	bhi.n	1a00ff7a <inv_gtc_data_cb+0x2e>
1a00ffb8:	2654      	movs	r6, #84	; 0x54
1a00ffba:	fb06 f604 	mul.w	r6, r6, r4
1a00ffbe:	eb09 0706 	add.w	r7, r9, r6
1a00ffc2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
1a00ffc6:	2b05      	cmp	r3, #5
1a00ffc8:	f000 81c3 	beq.w	1a010352 <inv_gtc_data_cb+0x406>
1a00ffcc:	1c5a      	adds	r2, r3, #1
1a00ffce:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
1a00ffd2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
1a00ffd6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
1a00ffda:	18e3      	adds	r3, r4, r3
1a00ffdc:	9a25      	ldr	r2, [sp, #148]	; 0x94
1a00ffde:	9827      	ldr	r0, [sp, #156]	; 0x9c
1a00ffe0:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
1a00ffe4:	eb09 0283 	add.w	r2, r9, r3, lsl #2
1a00ffe8:	f103 010a 	add.w	r1, r3, #10
1a00ffec:	63d5      	str	r5, [r2, #60]	; 0x3c
1a00ffee:	4613      	mov	r3, r2
1a00fff0:	9a26      	ldr	r2, [sp, #152]	; 0x98
1a00fff2:	f849 0021 	str.w	r0, [r9, r1, lsl #2]
1a00fff6:	615a      	str	r2, [r3, #20]
1a00fff8:	f899 11c0 	ldrb.w	r1, [r9, #448]	; 0x1c0
1a00fffc:	4b7e      	ldr	r3, [pc, #504]	; (1a0101f8 <inv_gtc_data_cb+0x2ac>)
1a00fffe:	2200      	movs	r2, #0
1a010000:	2901      	cmp	r1, #1
1a010002:	9228      	str	r2, [sp, #160]	; 0xa0
1a010004:	9229      	str	r2, [sp, #164]	; 0xa4
1a010006:	922a      	str	r2, [sp, #168]	; 0xa8
1a010008:	922b      	str	r2, [sp, #172]	; 0xac
1a01000a:	922c      	str	r2, [sp, #176]	; 0xb0
1a01000c:	922d      	str	r2, [sp, #180]	; 0xb4
1a01000e:	922e      	str	r2, [sp, #184]	; 0xb8
1a010010:	922f      	str	r2, [sp, #188]	; 0xbc
1a010012:	9230      	str	r2, [sp, #192]	; 0xc0
1a010014:	9231      	str	r2, [sp, #196]	; 0xc4
1a010016:	9232      	str	r2, [sp, #200]	; 0xc8
1a010018:	9233      	str	r2, [sp, #204]	; 0xcc
1a01001a:	d1ae      	bne.n	1a00ff7a <inv_gtc_data_cb+0x2e>
1a01001c:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
1a010020:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
1a010024:	e9dd 672a 	ldrd	r6, r7, [sp, #168]	; 0xa8
1a010028:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a01002c:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
1a010030:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
1a010034:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
1a010038:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
1a01003c:	e9dd 6730 	ldrd	r6, r7, [sp, #192]	; 0xc0
1a010040:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
1a010044:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
1a010048:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
1a01004c:	920b      	str	r2, [sp, #44]	; 0x2c
1a01004e:	911c      	str	r1, [sp, #112]	; 0x70
1a010050:	931d      	str	r3, [sp, #116]	; 0x74
1a010052:	2200      	movs	r2, #0
1a010054:	2300      	movs	r3, #0
1a010056:	46d0      	mov	r8, sl
1a010058:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
1a01005c:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
1a010060:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a010064:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
1a010068:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
1a01006c:	2300      	movs	r3, #0
1a01006e:	9321      	str	r3, [sp, #132]	; 0x84
1a010070:	931b      	str	r3, [sp, #108]	; 0x6c
1a010072:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
1a010076:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
1a010078:	9e20      	ldr	r6, [sp, #128]	; 0x80
1a01007a:	f04f 0c54 	mov.w	ip, #84	; 0x54
1a01007e:	fb0c 6307 	mla	r3, ip, r7, r6
1a010082:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
1a010086:	2a00      	cmp	r2, #0
1a010088:	921a      	str	r2, [sp, #104]	; 0x68
1a01008a:	f000 80c3 	beq.w	1a010214 <inv_gtc_data_cb+0x2c8>
1a01008e:	f340 80c1 	ble.w	1a010214 <inv_gtc_data_cb+0x2c8>
1a010092:	f04f 0c00 	mov.w	ip, #0
1a010096:	461a      	mov	r2, r3
1a010098:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
1a01009c:	e9cd 0100 	strd	r0, r1, [sp]
1a0100a0:	e9cd ab02 	strd	sl, fp, [sp, #8]
1a0100a4:	e00e      	b.n	1a0100c4 <inv_gtc_data_cb+0x178>
1a0100a6:	9c1d      	ldr	r4, [sp, #116]	; 0x74
1a0100a8:	429c      	cmp	r4, r3
1a0100aa:	bfb8      	it	lt
1a0100ac:	461c      	movlt	r4, r3
1a0100ae:	941d      	str	r4, [sp, #116]	; 0x74
1a0100b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0100b2:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
1a0100b6:	1c6b      	adds	r3, r5, #1
1a0100b8:	b2db      	uxtb	r3, r3
1a0100ba:	3204      	adds	r2, #4
1a0100bc:	4543      	cmp	r3, r8
1a0100be:	930a      	str	r3, [sp, #40]	; 0x28
1a0100c0:	f000 809e 	beq.w	1a010200 <inv_gtc_data_cb+0x2b4>
1a0100c4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
1a0100c6:	6957      	ldr	r7, [r2, #20]
1a0100c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
1a0100ca:	6815      	ldr	r5, [r2, #0]
1a0100cc:	fb87 6703 	smull	r6, r7, r7, r3
1a0100d0:	e9cd 6704 	strd	r6, r7, [sp, #16]
1a0100d4:	fb83 6703 	smull	r6, r7, r3, r3
1a0100d8:	e9cd 6708 	strd	r6, r7, [sp, #32]
1a0100dc:	fb81 0103 	smull	r0, r1, r1, r3
1a0100e0:	9f04      	ldr	r7, [sp, #16]
1a0100e2:	f8dd c020 	ldr.w	ip, [sp, #32]
1a0100e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a0100ea:	9905      	ldr	r1, [sp, #20]
1a0100ec:	0c3f      	lsrs	r7, r7, #16
1a0100ee:	0c00      	lsrs	r0, r0, #16
1a0100f0:	9000      	str	r0, [sp, #0]
1a0100f2:	ea47 4001 	orr.w	r0, r7, r1, lsl #16
1a0100f6:	9002      	str	r0, [sp, #8]
1a0100f8:	9809      	ldr	r0, [sp, #36]	; 0x24
1a0100fa:	9c00      	ldr	r4, [sp, #0]
1a0100fc:	1409      	asrs	r1, r1, #16
1a0100fe:	ea4f 461c 	mov.w	r6, ip, lsr #16
1a010102:	f8dd c01c 	ldr.w	ip, [sp, #28]
1a010106:	9103      	str	r1, [sp, #12]
1a010108:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
1a01010c:	1407      	asrs	r7, r0, #16
1a01010e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a010112:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
1a010116:	9400      	str	r4, [sp, #0]
1a010118:	4664      	mov	r4, ip
1a01011a:	1424      	asrs	r4, r4, #16
1a01011c:	1940      	adds	r0, r0, r5
1a01011e:	fb85 8903 	smull	r8, r9, r5, r3
1a010122:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
1a010126:	9401      	str	r4, [sp, #4]
1a010128:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
1a01012c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
1a010130:	6950      	ldr	r0, [r2, #20]
1a010132:	990b      	ldr	r1, [sp, #44]	; 0x2c
1a010134:	1824      	adds	r4, r4, r0
1a010136:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
1a01013a:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
1a01013e:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
1a010142:	6a90      	ldr	r0, [r2, #40]	; 0x28
1a010144:	1824      	adds	r4, r4, r0
1a010146:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
1a01014a:	ea4f 4a18 	mov.w	sl, r8, lsr #16
1a01014e:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
1a010152:	18c9      	adds	r1, r1, r3
1a010154:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
1a010158:	ea4a 4a09 	orr.w	sl, sl, r9, lsl #16
1a01015c:	ea4f 4b29 	mov.w	fp, r9, asr #16
1a010160:	910b      	str	r1, [sp, #44]	; 0x2c
1a010162:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
1a010166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a01016a:	eb14 040a 	adds.w	r4, r4, sl
1a01016e:	eb45 050b 	adc.w	r5, r5, fp
1a010172:	eb18 0800 	adds.w	r8, r8, r0
1a010176:	eb49 0901 	adc.w	r9, r9, r1
1a01017a:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
1a01017e:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
1a010182:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
1a010186:	e9dd 8900 	ldrd	r8, r9, [sp]
1a01018a:	eb14 0408 	adds.w	r4, r4, r8
1a01018e:	eb45 0509 	adc.w	r5, r5, r9
1a010192:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
1a010196:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a01019a:	1980      	adds	r0, r0, r6
1a01019c:	eb41 0107 	adc.w	r1, r1, r7
1a0101a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a0101a4:	991c      	ldr	r1, [sp, #112]	; 0x70
1a0101a6:	428b      	cmp	r3, r1
1a0101a8:	f6bf af7d 	bge.w	1a0100a6 <inv_gtc_data_cb+0x15a>
1a0101ac:	931c      	str	r3, [sp, #112]	; 0x70
1a0101ae:	e77f      	b.n	1a0100b0 <inv_gtc_data_cb+0x164>
1a0101b0:	f8d3 41a4 	ldr.w	r4, [r3, #420]	; 0x1a4
1a0101b4:	f8d3 01a8 	ldr.w	r0, [r3, #424]	; 0x1a8
1a0101b8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
1a0101bc:	fb82 4504 	smull	r4, r5, r2, r4
1a0101c0:	fb82 0100 	smull	r0, r1, r2, r0
1a0101c4:	fb82 2303 	smull	r2, r3, r2, r3
1a0101c8:	0c12      	lsrs	r2, r2, #16
1a0101ca:	0c24      	lsrs	r4, r4, #16
1a0101cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a0101d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a0101d2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
1a0101d6:	191c      	adds	r4, r3, r4
1a0101d8:	0c00      	lsrs	r0, r0, #16
1a0101da:	9b26      	ldr	r3, [sp, #152]	; 0x98
1a0101dc:	9425      	str	r4, [sp, #148]	; 0x94
1a0101de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
1a0101e2:	181d      	adds	r5, r3, r0
1a0101e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
1a0101e6:	9526      	str	r5, [sp, #152]	; 0x98
1a0101e8:	189a      	adds	r2, r3, r2
1a0101ea:	a825      	add	r0, sp, #148	; 0x94
1a0101ec:	2103      	movs	r1, #3
1a0101ee:	9227      	str	r2, [sp, #156]	; 0x9c
1a0101f0:	f7f6 ffea 	bl	1a0071c8 <inv_set_gyro_bias>
1a0101f4:	e6c1      	b.n	1a00ff7a <inv_gtc_data_cb+0x2e>
1a0101f6:	bf00      	nop
1a0101f8:	100870d8 	.word	0x100870d8
1a0101fc:	66666667 	.word	0x66666667
1a010200:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a010202:	46d0      	mov	r8, sl
1a010204:	18d3      	adds	r3, r2, r3
1a010206:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
1a01020a:	e9dd 0100 	ldrd	r0, r1, [sp]
1a01020e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
1a010212:	9321      	str	r3, [sp, #132]	; 0x84
1a010214:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a010216:	3301      	adds	r3, #1
1a010218:	2b05      	cmp	r3, #5
1a01021a:	931b      	str	r3, [sp, #108]	; 0x6c
1a01021c:	f47f af2b 	bne.w	1a010076 <inv_gtc_data_cb+0x12a>
1a010220:	9c1d      	ldr	r4, [sp, #116]	; 0x74
1a010222:	9d1c      	ldr	r5, [sp, #112]	; 0x70
1a010224:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
1a010228:	1b62      	subs	r2, r4, r5
1a01022a:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
1a01022e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a010232:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
1a010236:	f8d9 31bc 	ldr.w	r3, [r9, #444]	; 0x1bc
1a01023a:	e9cd 6728 	strd	r6, r7, [sp, #160]	; 0xa0
1a01023e:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
1a010242:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
1a010246:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
1a01024a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
1a01024e:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
1a010252:	429a      	cmp	r2, r3
1a010254:	e9cd 672e 	strd	r6, r7, [sp, #184]	; 0xb8
1a010258:	e9cd 0130 	strd	r0, r1, [sp, #192]	; 0xc0
1a01025c:	e9cd 4532 	strd	r4, r5, [sp, #200]	; 0xc8
1a010260:	f6ff ae8b 	blt.w	1a00ff7a <inv_gtc_data_cb+0x2e>
1a010264:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a010266:	9f21      	ldr	r7, [sp, #132]	; 0x84
1a010268:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
1a01026c:	f8df b124 	ldr.w	fp, [pc, #292]	; 1a010394 <inv_gtc_data_cb+0x448>
1a010270:	fb85 2305 	smull	r2, r3, r5, r5
1a010274:	ea4f 4812 	mov.w	r8, r2, lsr #16
1a010278:	9d0c      	ldr	r5, [sp, #48]	; 0x30
1a01027a:	b2fe      	uxtb	r6, r7
1a01027c:	ea48 4703 	orr.w	r7, r8, r3, lsl #16
1a010280:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
1a010284:	9704      	str	r7, [sp, #16]
1a010286:	fba6 4505 	umull	r4, r5, r6, r5
1a01028a:	fb06 5808 	mla	r8, r6, r8, r5
1a01028e:	ea4f 4c23 	mov.w	ip, r3, asr #16
1a010292:	e9cd 4506 	strd	r4, r5, [sp, #24]
1a010296:	f8cd c014 	str.w	ip, [sp, #20]
1a01029a:	f8cd 801c 	str.w	r8, [sp, #28]
1a01029e:	ea4f 74ea 	mov.w	r4, sl, asr #31
1a0102a2:	ad32      	add	r5, sp, #200	; 0xc8
1a0102a4:	940a      	str	r4, [sp, #40]	; 0x28
1a0102a6:	950b      	str	r5, [sp, #44]	; 0x2c
1a0102a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0102ac:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
1a0102b0:	1a24      	subs	r4, r4, r0
1a0102b2:	eb65 0501 	sbc.w	r5, r5, r1
1a0102b6:	e9cd 4508 	strd	r4, r5, [sp, #32]
1a0102ba:	af2c      	add	r7, sp, #176	; 0xb0
1a0102bc:	f10d 0898 	add.w	r8, sp, #152	; 0x98
1a0102c0:	f858 0f08 	ldr.w	r0, [r8, #8]!
1a0102c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0102c6:	f8d8 2004 	ldr.w	r2, [r8, #4]
1a0102ca:	f857 4f08 	ldr.w	r4, [r7, #8]!
1a0102ce:	fb00 f105 	mul.w	r1, r0, r5
1a0102d2:	fb02 110a 	mla	r1, r2, sl, r1
1a0102d6:	fba0 230a 	umull	r2, r3, r0, sl
1a0102da:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
1a0102de:	18cb      	adds	r3, r1, r3
1a0102e0:	687d      	ldr	r5, [r7, #4]
1a0102e2:	930f      	str	r3, [sp, #60]	; 0x3c
1a0102e4:	2300      	movs	r3, #0
1a0102e6:	fb04 f203 	mul.w	r2, r4, r3
1a0102ea:	fba4 0106 	umull	r0, r1, r4, r6
1a0102ee:	fb05 2306 	mla	r3, r5, r6, r2
1a0102f2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a0102f6:	1859      	adds	r1, r3, r1
1a0102f8:	910d      	str	r1, [sp, #52]	; 0x34
1a0102fa:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
1a0102fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a010302:	428d      	cmp	r5, r1
1a010304:	bf08      	it	eq
1a010306:	4284      	cmpeq	r4, r0
1a010308:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a01030c:	d018      	beq.n	1a010340 <inv_gtc_data_cb+0x3f4>
1a01030e:	990e      	ldr	r1, [sp, #56]	; 0x38
1a010310:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
1a010312:	0c09      	lsrs	r1, r1, #16
1a010314:	ea41 4405 	orr.w	r4, r1, r5, lsl #16
1a010318:	ea4f 4c25 	mov.w	ip, r5, asr #16
1a01031c:	941e      	str	r4, [sp, #120]	; 0x78
1a01031e:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
1a010322:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
1a010326:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
1a01032a:	1a24      	subs	r4, r4, r0
1a01032c:	eb65 0501 	sbc.w	r5, r5, r1
1a010330:	0429      	lsls	r1, r5, #16
1a010332:	0420      	lsls	r0, r4, #16
1a010334:	ea41 4114 	orr.w	r1, r1, r4, lsr #16
1a010338:	f004 f9ee 	bl	1a014718 <__aeabi_ldivmod>
1a01033c:	f8cb 01a4 	str.w	r0, [fp, #420]	; 0x1a4
1a010340:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
1a010342:	42a7      	cmp	r7, r4
1a010344:	f10b 0b04 	add.w	fp, fp, #4
1a010348:	d1ba      	bne.n	1a0102c0 <inv_gtc_data_cb+0x374>
1a01034a:	2301      	movs	r3, #1
1a01034c:	f889 31b0 	strb.w	r3, [r9, #432]	; 0x1b0
1a010350:	e613      	b.n	1a00ff7a <inv_gtc_data_cb+0x2e>
1a010352:	eb09 0006 	add.w	r0, r9, r6
1a010356:	4601      	mov	r1, r0
1a010358:	3140      	adds	r1, #64	; 0x40
1a01035a:	2210      	movs	r2, #16
1a01035c:	303c      	adds	r0, #60	; 0x3c
1a01035e:	f004 fcdb 	bl	1a014d18 <memmove>
1a010362:	1d31      	adds	r1, r6, #4
1a010364:	4449      	add	r1, r9
1a010366:	2210      	movs	r2, #16
1a010368:	4638      	mov	r0, r7
1a01036a:	f004 fcd5 	bl	1a014d18 <memmove>
1a01036e:	eb09 0006 	add.w	r0, r9, r6
1a010372:	4601      	mov	r1, r0
1a010374:	3118      	adds	r1, #24
1a010376:	2210      	movs	r2, #16
1a010378:	3014      	adds	r0, #20
1a01037a:	f004 fccd 	bl	1a014d18 <memmove>
1a01037e:	f106 0028 	add.w	r0, r6, #40	; 0x28
1a010382:	f106 012c 	add.w	r1, r6, #44	; 0x2c
1a010386:	4448      	add	r0, r9
1a010388:	4449      	add	r1, r9
1a01038a:	2210      	movs	r2, #16
1a01038c:	f004 fcc4 	bl	1a014d18 <memmove>
1a010390:	2304      	movs	r3, #4
1a010392:	e61e      	b.n	1a00ffd2 <inv_gtc_data_cb+0x86>
1a010394:	100870d8 	.word	0x100870d8

1a010398 <inv_start_gyro_tc>:
1a010398:	4802      	ldr	r0, [pc, #8]	; (1a0103a4 <inv_start_gyro_tc+0xc>)
1a01039a:	2196      	movs	r1, #150	; 0x96
1a01039c:	2208      	movs	r2, #8
1a01039e:	f7f7 b8d7 	b.w	1a007550 <inv_register_data_cb>
1a0103a2:	bf00      	nop
1a0103a4:	1a00ff4d 	.word	0x1a00ff4d

1a0103a8 <inv_init_gyro_ts>:
1a0103a8:	b510      	push	{r4, lr}
1a0103aa:	4c0b      	ldr	r4, [pc, #44]	; (1a0103d8 <inv_init_gyro_ts+0x30>)
1a0103ac:	2100      	movs	r1, #0
1a0103ae:	4620      	mov	r0, r4
1a0103b0:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
1a0103b4:	f004 fd14 	bl	1a014de0 <memset>
1a0103b8:	4b08      	ldr	r3, [pc, #32]	; (1a0103dc <inv_init_gyro_ts+0x34>)
1a0103ba:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
1a0103be:	f44f 03aa 	mov.w	r3, #5570560	; 0x550000
1a0103c2:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
1a0103c6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
1a0103ca:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
1a0103ce:	2301      	movs	r3, #1
1a0103d0:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
1a0103d4:	2000      	movs	r0, #0
1a0103d6:	bd10      	pop	{r4, pc}
1a0103d8:	100870d8 	.word	0x100870d8
1a0103dc:	ffd80000 	.word	0xffd80000

1a0103e0 <inv_enable_gyro_tc>:
1a0103e0:	b508      	push	{r3, lr}
1a0103e2:	f7ff ffe1 	bl	1a0103a8 <inv_init_gyro_ts>
1a0103e6:	480a      	ldr	r0, [pc, #40]	; (1a010410 <inv_enable_gyro_tc+0x30>)
1a0103e8:	490a      	ldr	r1, [pc, #40]	; (1a010414 <inv_enable_gyro_tc+0x34>)
1a0103ea:	2210      	movs	r2, #16
1a0103ec:	f44f 739a 	mov.w	r3, #308	; 0x134
1a0103f0:	f7f8 fed8 	bl	1a0091a4 <inv_register_load_store>
1a0103f4:	b108      	cbz	r0, 1a0103fa <inv_enable_gyro_tc+0x1a>
1a0103f6:	2001      	movs	r0, #1
1a0103f8:	bd08      	pop	{r3, pc}
1a0103fa:	4807      	ldr	r0, [pc, #28]	; (1a010418 <inv_enable_gyro_tc+0x38>)
1a0103fc:	f7f8 fe7c 	bl	1a0090f8 <inv_register_mpl_start_notification>
1a010400:	2800      	cmp	r0, #0
1a010402:	d1f8      	bne.n	1a0103f6 <inv_enable_gyro_tc+0x16>
1a010404:	4b05      	ldr	r3, [pc, #20]	; (1a01041c <inv_enable_gyro_tc+0x3c>)
1a010406:	2201      	movs	r2, #1
1a010408:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
1a01040c:	bd08      	pop	{r3, pc}
1a01040e:	bf00      	nop
1a010410:	1a00ff19 	.word	0x1a00ff19
1a010414:	1a00fee5 	.word	0x1a00fee5
1a010418:	1a010399 	.word	0x1a010399
1a01041c:	100870d8 	.word	0x100870d8

1a010420 <inv_start_heading_from_gyro>:
1a010420:	4802      	ldr	r0, [pc, #8]	; (1a01042c <inv_start_heading_from_gyro+0xc>)
1a010422:	f44f 71af 	mov.w	r1, #350	; 0x15e
1a010426:	2204      	movs	r2, #4
1a010428:	f7f7 b892 	b.w	1a007550 <inv_register_data_cb>
1a01042c:	1a010431 	.word	0x1a010431

1a010430 <inv_run_heading_from_gyro>:
1a010430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a010434:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a010436:	05db      	lsls	r3, r3, #23
1a010438:	b0a7      	sub	sp, #156	; 0x9c
1a01043a:	4682      	mov	sl, r0
1a01043c:	d403      	bmi.n	1a010446 <inv_run_heading_from_gyro+0x16>
1a01043e:	2000      	movs	r0, #0
1a010440:	b027      	add	sp, #156	; 0x9c
1a010442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a010446:	f7f8 fd8b 	bl	1a008f60 <inv_got_compass_bias>
1a01044a:	4604      	mov	r4, r0
1a01044c:	2800      	cmp	r0, #0
1a01044e:	d1f6      	bne.n	1a01043e <inv_run_heading_from_gyro+0xe>
1a010450:	a811      	add	r0, sp, #68	; 0x44
1a010452:	f7f8 fca9 	bl	1a008da8 <inv_get_6axis_quaternion>
1a010456:	a811      	add	r0, sp, #68	; 0x44
1a010458:	a91d      	add	r1, sp, #116	; 0x74
1a01045a:	f7f8 f935 	bl	1a0086c8 <inv_quaternion_to_rotation>
1a01045e:	aa0d      	add	r2, sp, #52	; 0x34
1a010460:	a911      	add	r1, sp, #68	; 0x44
1a010462:	48bb      	ldr	r0, [pc, #748]	; (1a010750 <inv_run_heading_from_gyro+0x320>)
1a010464:	f7f7 fd0c 	bl	1a007e80 <inv_q_mult>
1a010468:	a811      	add	r0, sp, #68	; 0x44
1a01046a:	49b9      	ldr	r1, [pc, #740]	; (1a010750 <inv_run_heading_from_gyro+0x320>)
1a01046c:	f7f7 fe06 	bl	1a00807c <inv_q_invert>
1a010470:	990e      	ldr	r1, [sp, #56]	; 0x38
1a010472:	981d      	ldr	r0, [sp, #116]	; 0x74
1a010474:	f7f7 fcde 	bl	1a007e34 <inv_q30_mult>
1a010478:	990f      	ldr	r1, [sp, #60]	; 0x3c
1a01047a:	9001      	str	r0, [sp, #4]
1a01047c:	981e      	ldr	r0, [sp, #120]	; 0x78
1a01047e:	f7f7 fcd9 	bl	1a007e34 <inv_q30_mult>
1a010482:	9910      	ldr	r1, [sp, #64]	; 0x40
1a010484:	9002      	str	r0, [sp, #8]
1a010486:	981f      	ldr	r0, [sp, #124]	; 0x7c
1a010488:	f7f7 fcd4 	bl	1a007e34 <inv_q30_mult>
1a01048c:	990e      	ldr	r1, [sp, #56]	; 0x38
1a01048e:	9003      	str	r0, [sp, #12]
1a010490:	9820      	ldr	r0, [sp, #128]	; 0x80
1a010492:	f7f7 fccf 	bl	1a007e34 <inv_q30_mult>
1a010496:	990f      	ldr	r1, [sp, #60]	; 0x3c
1a010498:	9005      	str	r0, [sp, #20]
1a01049a:	9821      	ldr	r0, [sp, #132]	; 0x84
1a01049c:	f7f7 fcca 	bl	1a007e34 <inv_q30_mult>
1a0104a0:	9910      	ldr	r1, [sp, #64]	; 0x40
1a0104a2:	9006      	str	r0, [sp, #24]
1a0104a4:	9822      	ldr	r0, [sp, #136]	; 0x88
1a0104a6:	f7f7 fcc5 	bl	1a007e34 <inv_q30_mult>
1a0104aa:	990e      	ldr	r1, [sp, #56]	; 0x38
1a0104ac:	9007      	str	r0, [sp, #28]
1a0104ae:	9823      	ldr	r0, [sp, #140]	; 0x8c
1a0104b0:	f7f7 fcc0 	bl	1a007e34 <inv_q30_mult>
1a0104b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
1a0104b6:	4605      	mov	r5, r0
1a0104b8:	9824      	ldr	r0, [sp, #144]	; 0x90
1a0104ba:	f7f7 fcbb 	bl	1a007e34 <inv_q30_mult>
1a0104be:	9910      	ldr	r1, [sp, #64]	; 0x40
1a0104c0:	182d      	adds	r5, r5, r0
1a0104c2:	9825      	ldr	r0, [sp, #148]	; 0x94
1a0104c4:	f7f7 fcb6 	bl	1a007e34 <inv_q30_mult>
1a0104c8:	1828      	adds	r0, r5, r0
1a0104ca:	4245      	negs	r5, r0
1a0104cc:	2d00      	cmp	r5, #0
1a0104ce:	f2c0 81ec 	blt.w	1a0108aa <inv_run_heading_from_gyro+0x47a>
1a0104d2:	9404      	str	r4, [sp, #16]
1a0104d4:	4b9f      	ldr	r3, [pc, #636]	; (1a010754 <inv_run_heading_from_gyro+0x324>)
1a0104d6:	17ec      	asrs	r4, r5, #31
1a0104d8:	fb83 0305 	smull	r0, r3, r3, r5
1a0104dc:	ebc4 3463 	rsb	r4, r4, r3, asr #13
1a0104e0:	f8df b274 	ldr.w	fp, [pc, #628]	; 1a010758 <inv_run_heading_from_gyro+0x328>
1a0104e4:	f8da 10a0 	ldr.w	r1, [sl, #160]	; 0xa0
1a0104e8:	f8db 6028 	ldr.w	r6, [fp, #40]	; 0x28
1a0104ec:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
1a0104f0:	f8da e0a8 	ldr.w	lr, [sl, #168]	; 0xa8
1a0104f4:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
1a0104f8:	f8db 702c 	ldr.w	r7, [fp, #44]	; 0x2c
1a0104fc:	f8cb 1028 	str.w	r1, [fp, #40]	; 0x28
1a010500:	ebc6 0901 	rsb	r9, r6, r1
1a010504:	4649      	mov	r1, r9
1a010506:	981d      	ldr	r0, [sp, #116]	; 0x74
1a010508:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
1a01050c:	ebc3 060e 	rsb	r6, r3, lr
1a010510:	1bd7      	subs	r7, r2, r7
1a010512:	f8cb e030 	str.w	lr, [fp, #48]	; 0x30
1a010516:	f7f7 fc8d 	bl	1a007e34 <inv_q30_mult>
1a01051a:	4639      	mov	r1, r7
1a01051c:	4680      	mov	r8, r0
1a01051e:	981e      	ldr	r0, [sp, #120]	; 0x78
1a010520:	f7f7 fc88 	bl	1a007e34 <inv_q30_mult>
1a010524:	4631      	mov	r1, r6
1a010526:	4480      	add	r8, r0
1a010528:	981f      	ldr	r0, [sp, #124]	; 0x7c
1a01052a:	f7f7 fc83 	bl	1a007e34 <inv_q30_mult>
1a01052e:	4649      	mov	r1, r9
1a010530:	eb08 0300 	add.w	r3, r8, r0
1a010534:	9820      	ldr	r0, [sp, #128]	; 0x80
1a010536:	f8cb 3000 	str.w	r3, [fp]
1a01053a:	f7f7 fc7b 	bl	1a007e34 <inv_q30_mult>
1a01053e:	4639      	mov	r1, r7
1a010540:	4680      	mov	r8, r0
1a010542:	9821      	ldr	r0, [sp, #132]	; 0x84
1a010544:	f7f7 fc76 	bl	1a007e34 <inv_q30_mult>
1a010548:	4631      	mov	r1, r6
1a01054a:	4480      	add	r8, r0
1a01054c:	9822      	ldr	r0, [sp, #136]	; 0x88
1a01054e:	f7f7 fc71 	bl	1a007e34 <inv_q30_mult>
1a010552:	4649      	mov	r1, r9
1a010554:	eb08 0300 	add.w	r3, r8, r0
1a010558:	9823      	ldr	r0, [sp, #140]	; 0x8c
1a01055a:	f8cb 3004 	str.w	r3, [fp, #4]
1a01055e:	f7f7 fc69 	bl	1a007e34 <inv_q30_mult>
1a010562:	4639      	mov	r1, r7
1a010564:	4681      	mov	r9, r0
1a010566:	9824      	ldr	r0, [sp, #144]	; 0x90
1a010568:	f7f7 fc64 	bl	1a007e34 <inv_q30_mult>
1a01056c:	4631      	mov	r1, r6
1a01056e:	4481      	add	r9, r0
1a010570:	9825      	ldr	r0, [sp, #148]	; 0x94
1a010572:	f7f7 fc5f 	bl	1a007e34 <inv_q30_mult>
1a010576:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
1a01057a:	bfa8      	it	ge
1a01057c:	f44f 3480 	movge.w	r4, #65536	; 0x10000
1a010580:	4448      	add	r0, r9
1a010582:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
1a010586:	f8cb 0008 	str.w	r0, [fp, #8]
1a01058a:	f340 817a 	ble.w	1a010882 <inv_run_heading_from_gyro+0x452>
1a01058e:	2d00      	cmp	r5, #0
1a010590:	f2c0 8197 	blt.w	1a0108c2 <inv_run_heading_from_gyro+0x492>
1a010594:	006b      	lsls	r3, r5, #1
1a010596:	9a01      	ldr	r2, [sp, #4]
1a010598:	9802      	ldr	r0, [sp, #8]
1a01059a:	eb02 0800 	add.w	r8, r2, r0
1a01059e:	9a03      	ldr	r2, [sp, #12]
1a0105a0:	4490      	add	r8, r2
1a0105a2:	f1c8 0800 	rsb	r8, r8, #0
1a0105a6:	f1b8 0f00 	cmp.w	r8, #0
1a0105aa:	bfac      	ite	ge
1a0105ac:	eb08 0848 	addge.w	r8, r8, r8, lsl #1
1a0105b0:	eba8 0888 	sublt.w	r8, r8, r8, lsl #2
1a0105b4:	4543      	cmp	r3, r8
1a0105b6:	f340 8164 	ble.w	1a010882 <inv_run_heading_from_gyro+0x452>
1a0105ba:	9a05      	ldr	r2, [sp, #20]
1a0105bc:	9806      	ldr	r0, [sp, #24]
1a0105be:	1813      	adds	r3, r2, r0
1a0105c0:	9a07      	ldr	r2, [sp, #28]
1a0105c2:	2d00      	cmp	r5, #0
1a0105c4:	4413      	add	r3, r2
1a0105c6:	bfb8      	it	lt
1a0105c8:	ebc5 75c5 	rsblt	r5, r5, r5, lsl #31
1a0105cc:	425b      	negs	r3, r3
1a0105ce:	006d      	lsls	r5, r5, #1
1a0105d0:	2b00      	cmp	r3, #0
1a0105d2:	bfac      	ite	ge
1a0105d4:	eb03 0343 	addge.w	r3, r3, r3, lsl #1
1a0105d8:	eba3 0383 	sublt.w	r3, r3, r3, lsl #2
1a0105dc:	429d      	cmp	r5, r3
1a0105de:	f340 8150 	ble.w	1a010882 <inv_run_heading_from_gyro+0x452>
1a0105e2:	f8db 700c 	ldr.w	r7, [fp, #12]
1a0105e6:	4e5c      	ldr	r6, [pc, #368]	; (1a010758 <inv_run_heading_from_gyro+0x328>)
1a0105e8:	2f00      	cmp	r7, #0
1a0105ea:	f340 816e 	ble.w	1a0108ca <inv_run_heading_from_gyro+0x49a>
1a0105ee:	9b04      	ldr	r3, [sp, #16]
1a0105f0:	6971      	ldr	r1, [r6, #20]
1a0105f2:	6930      	ldr	r0, [r6, #16]
1a0105f4:	f5c4 3280 	rsb	r2, r4, #65536	; 0x10000
1a0105f8:	2b00      	cmp	r3, #0
1a0105fa:	f040 816f 	bne.w	1a0108dc <inv_run_heading_from_gyro+0x4ac>
1a0105fe:	fb02 f101 	mul.w	r1, r2, r1
1a010602:	ea4f 7ce2 	mov.w	ip, r2, asr #31
1a010606:	fb00 150c 	mla	r5, r0, ip, r1
1a01060a:	fba0 0102 	umull	r0, r1, r0, r2
1a01060e:	1869      	adds	r1, r5, r1
1a010610:	6833      	ldr	r3, [r6, #0]
1a010612:	4680      	mov	r8, r0
1a010614:	4689      	mov	r9, r1
1a010616:	425b      	negs	r3, r3
1a010618:	f1b8 0f00 	cmp.w	r8, #0
1a01061c:	f179 0500 	sbcs.w	r5, r9, #0
1a010620:	9301      	str	r3, [sp, #4]
1a010622:	f2c0 81a7 	blt.w	1a010974 <inv_run_heading_from_gyro+0x544>
1a010626:	f8db 301c 	ldr.w	r3, [fp, #28]
1a01062a:	f8db 5018 	ldr.w	r5, [fp, #24]
1a01062e:	fb02 f303 	mul.w	r3, r2, r3
1a010632:	fb05 3c0c 	mla	ip, r5, ip, r3
1a010636:	ea4f 4018 	mov.w	r0, r8, lsr #16
1a01063a:	fba5 2302 	umull	r2, r3, r5, r2
1a01063e:	9d01      	ldr	r5, [sp, #4]
1a010640:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a010644:	ea4f 4129 	mov.w	r1, r9, asr #16
1a010648:	fbc4 0105 	smlal	r0, r1, r4, r5
1a01064c:	e9c6 0104 	strd	r0, r1, [r6, #16]
1a010650:	f8db 0004 	ldr.w	r0, [fp, #4]
1a010654:	4463      	add	r3, ip
1a010656:	4245      	negs	r5, r0
1a010658:	2a00      	cmp	r2, #0
1a01065a:	f173 0100 	sbcs.w	r1, r3, #0
1a01065e:	f2c0 8182 	blt.w	1a010966 <inv_run_heading_from_gyro+0x536>
1a010662:	0c10      	lsrs	r0, r2, #16
1a010664:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
1a010668:	1419      	asrs	r1, r3, #16
1a01066a:	4b3b      	ldr	r3, [pc, #236]	; (1a010758 <inv_run_heading_from_gyro+0x328>)
1a01066c:	fbc5 0104 	smlal	r0, r1, r5, r4
1a010670:	e9c3 0106 	strd	r0, r1, [r3, #24]
1a010674:	f5b7 7faf 	cmp.w	r7, #350	; 0x15e
1a010678:	f2c0 8127 	blt.w	1a0108ca <inv_run_heading_from_gyro+0x49a>
1a01067c:	e9db 0106 	ldrd	r0, r1, [fp, #24]
1a010680:	f003 fa10 	bl	1a013aa4 <__aeabi_l2d>
1a010684:	4604      	mov	r4, r0
1a010686:	460d      	mov	r5, r1
1a010688:	e9db 0104 	ldrd	r0, r1, [fp, #16]
1a01068c:	f003 fa0a 	bl	1a013aa4 <__aeabi_l2d>
1a010690:	4602      	mov	r2, r0
1a010692:	460b      	mov	r3, r1
1a010694:	4620      	mov	r0, r4
1a010696:	4629      	mov	r1, r5
1a010698:	f004 fff0 	bl	1a01567c <atan2>
1a01069c:	2200      	movs	r2, #0
1a01069e:	4b2f      	ldr	r3, [pc, #188]	; (1a01075c <inv_run_heading_from_gyro+0x32c>)
1a0106a0:	f003 fa2e 	bl	1a013b00 <__aeabi_dmul>
1a0106a4:	a326      	add	r3, pc, #152	; (adr r3, 1a010740 <inv_run_heading_from_gyro+0x310>)
1a0106a6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0106aa:	f003 fb53 	bl	1a013d54 <__aeabi_ddiv>
1a0106ae:	4604      	mov	r4, r0
1a0106b0:	460d      	mov	r5, r1
1a0106b2:	a815      	add	r0, sp, #84	; 0x54
1a0106b4:	a909      	add	r1, sp, #36	; 0x24
1a0106b6:	f7f8 faa3 	bl	1a008c00 <inv_get_compass_correction>
1a0106ba:	9815      	ldr	r0, [sp, #84]	; 0x54
1a0106bc:	f003 f9ba 	bl	1a013a34 <__aeabi_i2d>
1a0106c0:	2200      	movs	r2, #0
1a0106c2:	4b27      	ldr	r3, [pc, #156]	; (1a010760 <inv_run_heading_from_gyro+0x330>)
1a0106c4:	f003 fa1c 	bl	1a013b00 <__aeabi_dmul>
1a0106c8:	2200      	movs	r2, #0
1a0106ca:	4b26      	ldr	r3, [pc, #152]	; (1a010764 <inv_run_heading_from_gyro+0x334>)
1a0106cc:	4606      	mov	r6, r0
1a0106ce:	460f      	mov	r7, r1
1a0106d0:	f003 fca6 	bl	1a014020 <__aeabi_dcmpgt>
1a0106d4:	2800      	cmp	r0, #0
1a0106d6:	f000 813a 	beq.w	1a01094e <inv_run_heading_from_gyro+0x51e>
1a0106da:	4f22      	ldr	r7, [pc, #136]	; (1a010764 <inv_run_heading_from_gyro+0x334>)
1a0106dc:	2600      	movs	r6, #0
1a0106de:	4630      	mov	r0, r6
1a0106e0:	4639      	mov	r1, r7
1a0106e2:	f004 ff77 	bl	1a0155d4 <acos>
1a0106e6:	4606      	mov	r6, r0
1a0106e8:	460f      	mov	r7, r1
1a0106ea:	e9db 0106 	ldrd	r0, r1, [fp, #24]
1a0106ee:	f003 f9d9 	bl	1a013aa4 <__aeabi_l2d>
1a0106f2:	4680      	mov	r8, r0
1a0106f4:	4689      	mov	r9, r1
1a0106f6:	e9db 0104 	ldrd	r0, r1, [fp, #16]
1a0106fa:	f003 f9d3 	bl	1a013aa4 <__aeabi_l2d>
1a0106fe:	4602      	mov	r2, r0
1a010700:	460b      	mov	r3, r1
1a010702:	4640      	mov	r0, r8
1a010704:	4649      	mov	r1, r9
1a010706:	f004 ffb9 	bl	1a01567c <atan2>
1a01070a:	a30f      	add	r3, pc, #60	; (adr r3, 1a010748 <inv_run_heading_from_gyro+0x318>)
1a01070c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a010710:	4680      	mov	r8, r0
1a010712:	4689      	mov	r9, r1
1a010714:	4630      	mov	r0, r6
1a010716:	4639      	mov	r1, r7
1a010718:	f003 f9f2 	bl	1a013b00 <__aeabi_dmul>
1a01071c:	2200      	movs	r2, #0
1a01071e:	4606      	mov	r6, r0
1a010720:	460f      	mov	r7, r1
1a010722:	4b11      	ldr	r3, [pc, #68]	; (1a010768 <inv_run_heading_from_gyro+0x338>)
1a010724:	4640      	mov	r0, r8
1a010726:	4649      	mov	r1, r9
1a010728:	f003 f9ea 	bl	1a013b00 <__aeabi_dmul>
1a01072c:	a304      	add	r3, pc, #16	; (adr r3, 1a010740 <inv_run_heading_from_gyro+0x310>)
1a01072e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a010732:	f003 fb0f 	bl	1a013d54 <__aeabi_ddiv>
1a010736:	4602      	mov	r2, r0
1a010738:	460b      	mov	r3, r1
1a01073a:	4630      	mov	r0, r6
1a01073c:	e016      	b.n	1a01076c <inv_run_heading_from_gyro+0x33c>
1a01073e:	bf00      	nop
1a010740:	54442d18 	.word	0x54442d18
1a010744:	400921fb 	.word	0x400921fb
1a010748:	1a63c1f8 	.word	0x1a63c1f8
1a01074c:	405ca5dc 	.word	0x405ca5dc
1a010750:	100872d4 	.word	0x100872d4
1a010754:	45e7b273 	.word	0x45e7b273
1a010758:	100872a0 	.word	0x100872a0
1a01075c:	c0668000 	.word	0xc0668000
1a010760:	3e100000 	.word	0x3e100000
1a010764:	3ff00000 	.word	0x3ff00000
1a010768:	40668000 	.word	0x40668000
1a01076c:	4639      	mov	r1, r7
1a01076e:	f003 f813 	bl	1a013798 <__aeabi_dsub>
1a010772:	2200      	movs	r2, #0
1a010774:	4606      	mov	r6, r0
1a010776:	460f      	mov	r7, r1
1a010778:	4b8d      	ldr	r3, [pc, #564]	; (1a0109b0 <inv_run_heading_from_gyro+0x580>)
1a01077a:	4620      	mov	r0, r4
1a01077c:	4629      	mov	r1, r5
1a01077e:	f003 fc4f 	bl	1a014020 <__aeabi_dcmpgt>
1a010782:	b168      	cbz	r0, 1a0107a0 <inv_run_heading_from_gyro+0x370>
1a010784:	2200      	movs	r2, #0
1a010786:	4b8b      	ldr	r3, [pc, #556]	; (1a0109b4 <inv_run_heading_from_gyro+0x584>)
1a010788:	4620      	mov	r0, r4
1a01078a:	4629      	mov	r1, r5
1a01078c:	f003 f804 	bl	1a013798 <__aeabi_dsub>
1a010790:	2200      	movs	r2, #0
1a010792:	4b87      	ldr	r3, [pc, #540]	; (1a0109b0 <inv_run_heading_from_gyro+0x580>)
1a010794:	4604      	mov	r4, r0
1a010796:	460d      	mov	r5, r1
1a010798:	f003 fc42 	bl	1a014020 <__aeabi_dcmpgt>
1a01079c:	2800      	cmp	r0, #0
1a01079e:	d1f1      	bne.n	1a010784 <inv_run_heading_from_gyro+0x354>
1a0107a0:	4620      	mov	r0, r4
1a0107a2:	4629      	mov	r1, r5
1a0107a4:	2200      	movs	r2, #0
1a0107a6:	4b84      	ldr	r3, [pc, #528]	; (1a0109b8 <inv_run_heading_from_gyro+0x588>)
1a0107a8:	f003 fc1c 	bl	1a013fe4 <__aeabi_dcmplt>
1a0107ac:	b168      	cbz	r0, 1a0107ca <inv_run_heading_from_gyro+0x39a>
1a0107ae:	2200      	movs	r2, #0
1a0107b0:	4b80      	ldr	r3, [pc, #512]	; (1a0109b4 <inv_run_heading_from_gyro+0x584>)
1a0107b2:	4620      	mov	r0, r4
1a0107b4:	4629      	mov	r1, r5
1a0107b6:	f002 fff1 	bl	1a01379c <__adddf3>
1a0107ba:	2200      	movs	r2, #0
1a0107bc:	4b7e      	ldr	r3, [pc, #504]	; (1a0109b8 <inv_run_heading_from_gyro+0x588>)
1a0107be:	4604      	mov	r4, r0
1a0107c0:	460d      	mov	r5, r1
1a0107c2:	f003 fc0f 	bl	1a013fe4 <__aeabi_dcmplt>
1a0107c6:	2800      	cmp	r0, #0
1a0107c8:	d1f1      	bne.n	1a0107ae <inv_run_heading_from_gyro+0x37e>
1a0107ca:	a80a      	add	r0, sp, #40	; 0x28
1a0107cc:	f7f8 fc10 	bl	1a008ff0 <inv_get_compass_bias_error>
1a0107d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0107d2:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 1a0109c4 <inv_run_heading_from_gyro+0x594>
1a0107d6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
1a0107da:	bfc4      	itt	gt
1a0107dc:	f44f 7348 	movgt.w	r3, #800	; 0x320
1a0107e0:	930a      	strgt	r3, [sp, #40]	; 0x28
1a0107e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0107e4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
1a0107e8:	bfc4      	itt	gt
1a0107ea:	f44f 7348 	movgt.w	r3, #800	; 0x320
1a0107ee:	930b      	strgt	r3, [sp, #44]	; 0x2c
1a0107f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0107f2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
1a0107f6:	bfc8      	it	gt
1a0107f8:	f44f 7348 	movgt.w	r3, #800	; 0x320
1a0107fc:	a80a      	add	r0, sp, #40	; 0x28
1a0107fe:	bfc8      	it	gt
1a010800:	930c      	strgt	r3, [sp, #48]	; 0x30
1a010802:	f7f8 fbe5 	bl	1a008fd0 <inv_set_compass_bias_error>
1a010806:	f8db 0044 	ldr.w	r0, [fp, #68]	; 0x44
1a01080a:	f003 f925 	bl	1a013a58 <__aeabi_f2d>
1a01080e:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
1a010812:	4602      	mov	r2, r0
1a010814:	460b      	mov	r3, r1
1a010816:	4630      	mov	r0, r6
1a010818:	4639      	mov	r1, r7
1a01081a:	f003 fc01 	bl	1a014020 <__aeabi_dcmpgt>
1a01081e:	2800      	cmp	r0, #0
1a010820:	f43f ae0d 	beq.w	1a01043e <inv_run_heading_from_gyro+0xe>
1a010824:	4620      	mov	r0, r4
1a010826:	4c65      	ldr	r4, [pc, #404]	; (1a0109bc <inv_run_heading_from_gyro+0x58c>)
1a010828:	2600      	movs	r6, #0
1a01082a:	a35f      	add	r3, pc, #380	; (adr r3, 1a0109a8 <inv_run_heading_from_gyro+0x578>)
1a01082c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a010830:	f8c8 4044 	str.w	r4, [r8, #68]	; 0x44
1a010834:	4629      	mov	r1, r5
1a010836:	961a      	str	r6, [sp, #104]	; 0x68
1a010838:	961b      	str	r6, [sp, #108]	; 0x6c
1a01083a:	f003 f961 	bl	1a013b00 <__aeabi_dmul>
1a01083e:	2200      	movs	r2, #0
1a010840:	4b5f      	ldr	r3, [pc, #380]	; (1a0109c0 <inv_run_heading_from_gyro+0x590>)
1a010842:	f003 f95d 	bl	1a013b00 <__aeabi_dmul>
1a010846:	f003 fc1d 	bl	1a014084 <__aeabi_d2f>
1a01084a:	4604      	mov	r4, r0
1a01084c:	f004 fdd0 	bl	1a0153f0 <cosf>
1a010850:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a010854:	f003 fd74 	bl	1a014340 <__aeabi_fmul>
1a010858:	f003 ff38 	bl	1a0146cc <__aeabi_f2iz>
1a01085c:	9019      	str	r0, [sp, #100]	; 0x64
1a01085e:	4620      	mov	r0, r4
1a010860:	f004 fe6a 	bl	1a015538 <sinf>
1a010864:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a010868:	f003 fd6a 	bl	1a014340 <__aeabi_fmul>
1a01086c:	f003 ff2e 	bl	1a0146cc <__aeabi_f2iz>
1a010870:	f8da 10c0 	ldr.w	r1, [sl, #192]	; 0xc0
1a010874:	901c      	str	r0, [sp, #112]	; 0x70
1a010876:	a819      	add	r0, sp, #100	; 0x64
1a010878:	f7f8 f9a6 	bl	1a008bc8 <inv_set_compass_correction>
1a01087c:	f8c8 600c 	str.w	r6, [r8, #12]
1a010880:	e5dd      	b.n	1a01043e <inv_run_heading_from_gyro+0xe>
1a010882:	f8da 30c4 	ldr.w	r3, [sl, #196]	; 0xc4
1a010886:	f8da 20c0 	ldr.w	r2, [sl, #192]	; 0xc0
1a01088a:	f8db 100c 	ldr.w	r1, [fp, #12]
1a01088e:	1ad2      	subs	r2, r2, r3
1a010890:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
1a010894:	eba1 0362 	sub.w	r3, r1, r2, asr #1
1a010898:	2b00      	cmp	r3, #0
1a01089a:	f8cb 300c 	str.w	r3, [fp, #12]
1a01089e:	f6bf adce 	bge.w	1a01043e <inv_run_heading_from_gyro+0xe>
1a0108a2:	4b48      	ldr	r3, [pc, #288]	; (1a0109c4 <inv_run_heading_from_gyro+0x594>)
1a0108a4:	2200      	movs	r2, #0
1a0108a6:	60da      	str	r2, [r3, #12]
1a0108a8:	e5c9      	b.n	1a01043e <inv_run_heading_from_gyro+0xe>
1a0108aa:	4b47      	ldr	r3, [pc, #284]	; (1a0109c8 <inv_run_heading_from_gyro+0x598>)
1a0108ac:	429d      	cmp	r5, r3
1a0108ae:	da78      	bge.n	1a0109a2 <inv_run_heading_from_gyro+0x572>
1a0108b0:	4b46      	ldr	r3, [pc, #280]	; (1a0109cc <inv_run_heading_from_gyro+0x59c>)
1a0108b2:	17ec      	asrs	r4, r5, #31
1a0108b4:	fb83 1305 	smull	r1, r3, r3, r5
1a0108b8:	2201      	movs	r2, #1
1a0108ba:	eba4 3463 	sub.w	r4, r4, r3, asr #13
1a0108be:	9204      	str	r2, [sp, #16]
1a0108c0:	e60e      	b.n	1a0104e0 <inv_run_heading_from_gyro+0xb0>
1a0108c2:	ebc5 73c5 	rsb	r3, r5, r5, lsl #31
1a0108c6:	005b      	lsls	r3, r3, #1
1a0108c8:	e665      	b.n	1a010596 <inv_run_heading_from_gyro+0x166>
1a0108ca:	f8da 20c0 	ldr.w	r2, [sl, #192]	; 0xc0
1a0108ce:	f8da 30c4 	ldr.w	r3, [sl, #196]	; 0xc4
1a0108d2:	1ad3      	subs	r3, r2, r3
1a0108d4:	18ff      	adds	r7, r7, r3
1a0108d6:	f8cb 700c 	str.w	r7, [fp, #12]
1a0108da:	e5b0      	b.n	1a01043e <inv_run_heading_from_gyro+0xe>
1a0108dc:	6833      	ldr	r3, [r6, #0]
1a0108de:	fb02 f101 	mul.w	r1, r2, r1
1a0108e2:	9302      	str	r3, [sp, #8]
1a0108e4:	17d3      	asrs	r3, r2, #31
1a0108e6:	fb00 1c03 	mla	ip, r0, r3, r1
1a0108ea:	fba0 0102 	umull	r0, r1, r0, r2
1a0108ee:	4461      	add	r1, ip
1a0108f0:	4680      	mov	r8, r0
1a0108f2:	4689      	mov	r9, r1
1a0108f4:	f1b8 0f00 	cmp.w	r8, #0
1a0108f8:	f179 0500 	sbcs.w	r5, r9, #0
1a0108fc:	db49      	blt.n	1a010992 <inv_run_heading_from_gyro+0x562>
1a0108fe:	f8db 501c 	ldr.w	r5, [fp, #28]
1a010902:	f8db 0004 	ldr.w	r0, [fp, #4]
1a010906:	fb02 fc05 	mul.w	ip, r2, r5
1a01090a:	f8db 5018 	ldr.w	r5, [fp, #24]
1a01090e:	9001      	str	r0, [sp, #4]
1a010910:	fb05 cc03 	mla	ip, r5, r3, ip
1a010914:	ea4f 4018 	mov.w	r0, r8, lsr #16
1a010918:	fba5 2302 	umull	r2, r3, r5, r2
1a01091c:	9d02      	ldr	r5, [sp, #8]
1a01091e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a010922:	ea4f 4129 	mov.w	r1, r9, asr #16
1a010926:	fbc4 0105 	smlal	r0, r1, r4, r5
1a01092a:	4463      	add	r3, ip
1a01092c:	e9c6 0104 	strd	r0, r1, [r6, #16]
1a010930:	2a00      	cmp	r2, #0
1a010932:	f173 0000 	sbcs.w	r0, r3, #0
1a010936:	db25      	blt.n	1a010984 <inv_run_heading_from_gyro+0x554>
1a010938:	0c10      	lsrs	r0, r2, #16
1a01093a:	9a01      	ldr	r2, [sp, #4]
1a01093c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
1a010940:	1419      	asrs	r1, r3, #16
1a010942:	4b20      	ldr	r3, [pc, #128]	; (1a0109c4 <inv_run_heading_from_gyro+0x594>)
1a010944:	fbc2 0104 	smlal	r0, r1, r2, r4
1a010948:	e9c3 0106 	strd	r0, r1, [r3, #24]
1a01094c:	e692      	b.n	1a010674 <inv_run_heading_from_gyro+0x244>
1a01094e:	4630      	mov	r0, r6
1a010950:	4639      	mov	r1, r7
1a010952:	2200      	movs	r2, #0
1a010954:	4b1e      	ldr	r3, [pc, #120]	; (1a0109d0 <inv_run_heading_from_gyro+0x5a0>)
1a010956:	f003 fb45 	bl	1a013fe4 <__aeabi_dcmplt>
1a01095a:	2800      	cmp	r0, #0
1a01095c:	f43f aebf 	beq.w	1a0106de <inv_run_heading_from_gyro+0x2ae>
1a010960:	2600      	movs	r6, #0
1a010962:	4f1b      	ldr	r7, [pc, #108]	; (1a0109d0 <inv_run_heading_from_gyro+0x5a0>)
1a010964:	e6bb      	b.n	1a0106de <inv_run_heading_from_gyro+0x2ae>
1a010966:	f64f 70ff 	movw	r0, #65535	; 0xffff
1a01096a:	2100      	movs	r1, #0
1a01096c:	1812      	adds	r2, r2, r0
1a01096e:	eb43 0301 	adc.w	r3, r3, r1
1a010972:	e676      	b.n	1a010662 <inv_run_heading_from_gyro+0x232>
1a010974:	f64f 70ff 	movw	r0, #65535	; 0xffff
1a010978:	2100      	movs	r1, #0
1a01097a:	eb18 0800 	adds.w	r8, r8, r0
1a01097e:	eb49 0901 	adc.w	r9, r9, r1
1a010982:	e650      	b.n	1a010626 <inv_run_heading_from_gyro+0x1f6>
1a010984:	f64f 70ff 	movw	r0, #65535	; 0xffff
1a010988:	2100      	movs	r1, #0
1a01098a:	1812      	adds	r2, r2, r0
1a01098c:	eb43 0301 	adc.w	r3, r3, r1
1a010990:	e7d2      	b.n	1a010938 <inv_run_heading_from_gyro+0x508>
1a010992:	f64f 70ff 	movw	r0, #65535	; 0xffff
1a010996:	2100      	movs	r1, #0
1a010998:	eb18 0800 	adds.w	r8, r8, r0
1a01099c:	eb49 0901 	adc.w	r9, r9, r1
1a0109a0:	e7ad      	b.n	1a0108fe <inv_run_heading_from_gyro+0x4ce>
1a0109a2:	2201      	movs	r2, #1
1a0109a4:	9204      	str	r2, [sp, #16]
1a0109a6:	e595      	b.n	1a0104d4 <inv_run_heading_from_gyro+0xa4>
1a0109a8:	a2529d39 	.word	0xa2529d39
1a0109ac:	3f91df46 	.word	0x3f91df46
1a0109b0:	40668000 	.word	0x40668000
1a0109b4:	40768000 	.word	0x40768000
1a0109b8:	c0668000 	.word	0xc0668000
1a0109bc:	41700000 	.word	0x41700000
1a0109c0:	3fe00000 	.word	0x3fe00000
1a0109c4:	100872a0 	.word	0x100872a0
1a0109c8:	ffff8ad1 	.word	0xffff8ad1
1a0109cc:	45e7b273 	.word	0x45e7b273
1a0109d0:	bff00000 	.word	0xbff00000
1a0109d4:	f3af 8000 	nop.w

1a0109d8 <inv_init_heading_from_gyro>:
1a0109d8:	b510      	push	{r4, lr}
1a0109da:	4c06      	ldr	r4, [pc, #24]	; (1a0109f4 <inv_init_heading_from_gyro+0x1c>)
1a0109dc:	2100      	movs	r1, #0
1a0109de:	4620      	mov	r0, r4
1a0109e0:	2248      	movs	r2, #72	; 0x48
1a0109e2:	f004 f9fd 	bl	1a014de0 <memset>
1a0109e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a0109ea:	6363      	str	r3, [r4, #52]	; 0x34
1a0109ec:	4b02      	ldr	r3, [pc, #8]	; (1a0109f8 <inv_init_heading_from_gyro+0x20>)
1a0109ee:	6463      	str	r3, [r4, #68]	; 0x44
1a0109f0:	bd10      	pop	{r4, pc}
1a0109f2:	bf00      	nop
1a0109f4:	100872a0 	.word	0x100872a0
1a0109f8:	40a00000 	.word	0x40a00000

1a0109fc <inv_enable_heading_from_gyro>:
1a0109fc:	b508      	push	{r3, lr}
1a0109fe:	f7ff ffeb 	bl	1a0109d8 <inv_init_heading_from_gyro>
1a010a02:	4802      	ldr	r0, [pc, #8]	; (1a010a0c <inv_enable_heading_from_gyro+0x10>)
1a010a04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a010a08:	f7f8 bb76 	b.w	1a0090f8 <inv_register_mpl_start_notification>
1a010a0c:	1a010421 	.word	0x1a010421

1a010a10 <inv_start_magnetic_disturbance>:
1a010a10:	4802      	ldr	r0, [pc, #8]	; (1a010a1c <inv_start_magnetic_disturbance+0xc>)
1a010a12:	f44f 7196 	mov.w	r1, #300	; 0x12c
1a010a16:	2204      	movs	r2, #4
1a010a18:	f7f6 bd9a 	b.w	1a007550 <inv_register_data_cb>
1a010a1c:	1a010fc5 	.word	0x1a010fc5

1a010a20 <inv_set_magnetic_disturbance>:
1a010a20:	2800      	cmp	r0, #0
1a010a22:	dd05      	ble.n	1a010a30 <inv_set_magnetic_disturbance+0x10>
1a010a24:	4b03      	ldr	r3, [pc, #12]	; (1a010a34 <inv_set_magnetic_disturbance+0x14>)
1a010a26:	2201      	movs	r2, #1
1a010a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
1a010a2c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
1a010a30:	2000      	movs	r0, #0
1a010a32:	4770      	bx	lr
1a010a34:	100872e8 	.word	0x100872e8

1a010a38 <inv_init_magnetic_disturbance>:
1a010a38:	b510      	push	{r4, lr}
1a010a3a:	4c0c      	ldr	r4, [pc, #48]	; (1a010a6c <inv_init_magnetic_disturbance+0x34>)
1a010a3c:	2100      	movs	r1, #0
1a010a3e:	4620      	mov	r0, r4
1a010a40:	22b8      	movs	r2, #184	; 0xb8
1a010a42:	f004 f9cd 	bl	1a014de0 <memset>
1a010a46:	4b0a      	ldr	r3, [pc, #40]	; (1a010a70 <inv_init_magnetic_disturbance+0x38>)
1a010a48:	60e3      	str	r3, [r4, #12]
1a010a4a:	4b0a      	ldr	r3, [pc, #40]	; (1a010a74 <inv_init_magnetic_disturbance+0x3c>)
1a010a4c:	60a3      	str	r3, [r4, #8]
1a010a4e:	4b0a      	ldr	r3, [pc, #40]	; (1a010a78 <inv_init_magnetic_disturbance+0x40>)
1a010a50:	6023      	str	r3, [r4, #0]
1a010a52:	4b0a      	ldr	r3, [pc, #40]	; (1a010a7c <inv_init_magnetic_disturbance+0x44>)
1a010a54:	6063      	str	r3, [r4, #4]
1a010a56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a010a5a:	6663      	str	r3, [r4, #100]	; 0x64
1a010a5c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
1a010a60:	67e3      	str	r3, [r4, #124]	; 0x7c
1a010a62:	4b07      	ldr	r3, [pc, #28]	; (1a010a80 <inv_init_magnetic_disturbance+0x48>)
1a010a64:	2000      	movs	r0, #0
1a010a66:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
1a010a6a:	bd10      	pop	{r4, pc}
1a010a6c:	100872e8 	.word	0x100872e8
1a010a70:	42b40000 	.word	0x42b40000
1a010a74:	c2b40000 	.word	0xc2b40000
1a010a78:	42700000 	.word	0x42700000
1a010a7c:	41f00000 	.word	0x41f00000
1a010a80:	3e2e147b 	.word	0x3e2e147b

1a010a84 <inv_enable_magnetic_disturbance>:
1a010a84:	b508      	push	{r3, lr}
1a010a86:	f7ff ffd7 	bl	1a010a38 <inv_init_magnetic_disturbance>
1a010a8a:	4603      	mov	r3, r0
1a010a8c:	b100      	cbz	r0, 1a010a90 <inv_enable_magnetic_disturbance+0xc>
1a010a8e:	bd08      	pop	{r3, pc}
1a010a90:	4a05      	ldr	r2, [pc, #20]	; (1a010aa8 <inv_enable_magnetic_disturbance+0x24>)
1a010a92:	4806      	ldr	r0, [pc, #24]	; (1a010aac <inv_enable_magnetic_disturbance+0x28>)
1a010a94:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
1a010a98:	2301      	movs	r3, #1
1a010a9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a010a9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a010aa2:	f7f8 bb29 	b.w	1a0090f8 <inv_register_mpl_start_notification>
1a010aa6:	bf00      	nop
1a010aa8:	100872e8 	.word	0x100872e8
1a010aac:	1a010a11 	.word	0x1a010a11

1a010ab0 <inv_track_dip_angle>:
1a010ab0:	b570      	push	{r4, r5, r6, lr}
1a010ab2:	460c      	mov	r4, r1
1a010ab4:	b158      	cbz	r0, 1a010ace <inv_track_dip_angle+0x1e>
1a010ab6:	2801      	cmp	r0, #1
1a010ab8:	d019      	beq.n	1a010aee <inv_track_dip_angle+0x3e>
1a010aba:	4b22      	ldr	r3, [pc, #136]	; (1a010b44 <inv_track_dip_angle+0x94>)
1a010abc:	2200      	movs	r2, #0
1a010abe:	2101      	movs	r1, #1
1a010ac0:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
1a010ac4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
1a010ac8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
1a010acc:	bd70      	pop	{r4, r5, r6, pc}
1a010ace:	4b1d      	ldr	r3, [pc, #116]	; (1a010b44 <inv_track_dip_angle+0x94>)
1a010ad0:	2200      	movs	r2, #0
1a010ad2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
1a010ad6:	2201      	movs	r2, #1
1a010ad8:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
1a010adc:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
1a010ae0:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
1a010ae4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
1a010ae8:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
1a010aec:	bd70      	pop	{r4, r5, r6, pc}
1a010aee:	4d15      	ldr	r5, [pc, #84]	; (1a010b44 <inv_track_dip_angle+0x94>)
1a010af0:	4608      	mov	r0, r1
1a010af2:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
1a010af6:	f003 fb19 	bl	1a01412c <__aeabi_fsub>
1a010afa:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
1a010afe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a010b02:	f003 fdbb 	bl	1a01467c <__aeabi_fcmplt>
1a010b06:	b1b0      	cbz	r0, 1a010b36 <inv_track_dip_angle+0x86>
1a010b08:	f8d5 6094 	ldr.w	r6, [r5, #148]	; 0x94
1a010b0c:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
1a010b10:	3601      	adds	r6, #1
1a010b12:	4620      	mov	r0, r4
1a010b14:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
1a010b18:	f003 fb0a 	bl	1a014130 <__addsf3>
1a010b1c:	2e31      	cmp	r6, #49	; 0x31
1a010b1e:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
1a010b22:	dd0d      	ble.n	1a010b40 <inv_track_dip_angle+0x90>
1a010b24:	2302      	movs	r3, #2
1a010b26:	4908      	ldr	r1, [pc, #32]	; (1a010b48 <inv_track_dip_angle+0x98>)
1a010b28:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
1a010b2c:	f003 fcbc 	bl	1a0144a8 <__aeabi_fdiv>
1a010b30:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
1a010b34:	bd70      	pop	{r4, r5, r6, pc}
1a010b36:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
1a010b3a:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
1a010b3e:	bd70      	pop	{r4, r5, r6, pc}
1a010b40:	bd70      	pop	{r4, r5, r6, pc}
1a010b42:	bf00      	nop
1a010b44:	100872e8 	.word	0x100872e8
1a010b48:	42480000 	.word	0x42480000

1a010b4c <ComputeAngleVelocity>:
1a010b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a010b4e:	b08f      	sub	sp, #60	; 0x3c
1a010b50:	4605      	mov	r5, r0
1a010b52:	460c      	mov	r4, r1
1a010b54:	a905      	add	r1, sp, #20
1a010b56:	4616      	mov	r6, r2
1a010b58:	f7f7 fdb6 	bl	1a0086c8 <inv_quaternion_to_rotation>
1a010b5c:	aa01      	add	r2, sp, #4
1a010b5e:	4620      	mov	r0, r4
1a010b60:	4629      	mov	r1, r5
1a010b62:	f7f7 f98d 	bl	1a007e80 <inv_q_mult>
1a010b66:	4621      	mov	r1, r4
1a010b68:	4628      	mov	r0, r5
1a010b6a:	f7f7 fa87 	bl	1a00807c <inv_q_invert>
1a010b6e:	ac05      	add	r4, sp, #20
1a010b70:	1f32      	subs	r2, r6, #4
1a010b72:	af0e      	add	r7, sp, #56	; 0x38
1a010b74:	2300      	movs	r3, #0
1a010b76:	2000      	movs	r0, #0
1a010b78:	2100      	movs	r1, #0
1a010b7a:	ae01      	add	r6, sp, #4
1a010b7c:	18f5      	adds	r5, r6, r3
1a010b7e:	58e6      	ldr	r6, [r4, r3]
1a010b80:	686d      	ldr	r5, [r5, #4]
1a010b82:	3304      	adds	r3, #4
1a010b84:	2b0c      	cmp	r3, #12
1a010b86:	fbc5 0106 	smlal	r0, r1, r5, r6
1a010b8a:	d1f6      	bne.n	1a010b7a <ComputeAngleVelocity+0x2e>
1a010b8c:	0f83      	lsrs	r3, r0, #30
1a010b8e:	340c      	adds	r4, #12
1a010b90:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
1a010b94:	42bc      	cmp	r4, r7
1a010b96:	f842 3f04 	str.w	r3, [r2, #4]!
1a010b9a:	d1eb      	bne.n	1a010b74 <ComputeAngleVelocity+0x28>
1a010b9c:	b00f      	add	sp, #60	; 0x3c
1a010b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a010ba0 <Mag3ofNormalizedLong>:
1a010ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a010ba2:	4604      	mov	r4, r0
1a010ba4:	6800      	ldr	r0, [r0, #0]
1a010ba6:	f003 fb77 	bl	1a014298 <__aeabi_i2f>
1a010baa:	4607      	mov	r7, r0
1a010bac:	6860      	ldr	r0, [r4, #4]
1a010bae:	f003 fb73 	bl	1a014298 <__aeabi_i2f>
1a010bb2:	4606      	mov	r6, r0
1a010bb4:	68a0      	ldr	r0, [r4, #8]
1a010bb6:	f003 fb6f 	bl	1a014298 <__aeabi_i2f>
1a010bba:	4639      	mov	r1, r7
1a010bbc:	4605      	mov	r5, r0
1a010bbe:	4638      	mov	r0, r7
1a010bc0:	f003 fbbe 	bl	1a014340 <__aeabi_fmul>
1a010bc4:	4631      	mov	r1, r6
1a010bc6:	4604      	mov	r4, r0
1a010bc8:	4630      	mov	r0, r6
1a010bca:	f003 fbb9 	bl	1a014340 <__aeabi_fmul>
1a010bce:	4601      	mov	r1, r0
1a010bd0:	4620      	mov	r0, r4
1a010bd2:	f003 faad 	bl	1a014130 <__addsf3>
1a010bd6:	4629      	mov	r1, r5
1a010bd8:	4604      	mov	r4, r0
1a010bda:	4628      	mov	r0, r5
1a010bdc:	f003 fbb0 	bl	1a014340 <__aeabi_fmul>
1a010be0:	4601      	mov	r1, r0
1a010be2:	4620      	mov	r0, r4
1a010be4:	f003 faa4 	bl	1a014130 <__addsf3>
1a010be8:	f004 fe72 	bl	1a0158d0 <sqrtf>
1a010bec:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a010bf0:	f003 fba6 	bl	1a014340 <__aeabi_fmul>
1a010bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a010bf6:	bf00      	nop

1a010bf8 <MagDisturbSetDisturbance>:
1a010bf8:	b570      	push	{r4, r5, r6, lr}
1a010bfa:	4c1c      	ldr	r4, [pc, #112]	; (1a010c6c <MagDisturbSetDisturbance+0x74>)
1a010bfc:	4605      	mov	r5, r0
1a010bfe:	460e      	mov	r6, r1
1a010c00:	6820      	ldr	r0, [r4, #0]
1a010c02:	4629      	mov	r1, r5
1a010c04:	f003 fd3a 	bl	1a01467c <__aeabi_fcmplt>
1a010c08:	b920      	cbnz	r0, 1a010c14 <MagDisturbSetDisturbance+0x1c>
1a010c0a:	4628      	mov	r0, r5
1a010c0c:	6861      	ldr	r1, [r4, #4]
1a010c0e:	f003 fd35 	bl	1a01467c <__aeabi_fcmplt>
1a010c12:	b180      	cbz	r0, 1a010c36 <MagDisturbSetDisturbance+0x3e>
1a010c14:	6f63      	ldr	r3, [r4, #116]	; 0x74
1a010c16:	4a15      	ldr	r2, [pc, #84]	; (1a010c6c <MagDisturbSetDisturbance+0x74>)
1a010c18:	b193      	cbz	r3, 1a010c40 <MagDisturbSetDisturbance+0x48>
1a010c1a:	2300      	movs	r3, #0
1a010c1c:	2201      	movs	r2, #1
1a010c1e:	6762      	str	r2, [r4, #116]	; 0x74
1a010c20:	67a3      	str	r3, [r4, #120]	; 0x78
1a010c22:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
1a010c24:	4911      	ldr	r1, [pc, #68]	; (1a010c6c <MagDisturbSetDisturbance+0x74>)
1a010c26:	429a      	cmp	r2, r3
1a010c28:	dc04      	bgt.n	1a010c34 <MagDisturbSetDisturbance+0x3c>
1a010c2a:	6f4b      	ldr	r3, [r1, #116]	; 0x74
1a010c2c:	2b01      	cmp	r3, #1
1a010c2e:	d00d      	beq.n	1a010c4c <MagDisturbSetDisturbance+0x54>
1a010c30:	2300      	movs	r3, #0
1a010c32:	6763      	str	r3, [r4, #116]	; 0x74
1a010c34:	bd70      	pop	{r4, r5, r6, pc}
1a010c36:	6923      	ldr	r3, [r4, #16]
1a010c38:	2b01      	cmp	r3, #1
1a010c3a:	d00a      	beq.n	1a010c52 <MagDisturbSetDisturbance+0x5a>
1a010c3c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
1a010c3e:	e7f0      	b.n	1a010c22 <MagDisturbSetDisturbance+0x2a>
1a010c40:	f102 0018 	add.w	r0, r2, #24
1a010c44:	6d91      	ldr	r1, [r2, #88]	; 0x58
1a010c46:	f7f7 ffbf 	bl	1a008bc8 <inv_set_compass_correction>
1a010c4a:	e7e6      	b.n	1a010c1a <MagDisturbSetDisturbance+0x22>
1a010c4c:	2300      	movs	r3, #0
1a010c4e:	65cb      	str	r3, [r1, #92]	; 0x5c
1a010c50:	e7ee      	b.n	1a010c30 <MagDisturbSetDisturbance+0x38>
1a010c52:	68e0      	ldr	r0, [r4, #12]
1a010c54:	4631      	mov	r1, r6
1a010c56:	f003 fd11 	bl	1a01467c <__aeabi_fcmplt>
1a010c5a:	2800      	cmp	r0, #0
1a010c5c:	d1da      	bne.n	1a010c14 <MagDisturbSetDisturbance+0x1c>
1a010c5e:	4630      	mov	r0, r6
1a010c60:	68a1      	ldr	r1, [r4, #8]
1a010c62:	f003 fd0b 	bl	1a01467c <__aeabi_fcmplt>
1a010c66:	2800      	cmp	r0, #0
1a010c68:	d1d4      	bne.n	1a010c14 <MagDisturbSetDisturbance+0x1c>
1a010c6a:	e7e7      	b.n	1a010c3c <MagDisturbSetDisturbance+0x44>
1a010c6c:	100872e8 	.word	0x100872e8

1a010c70 <MagDisturbCheckSettling>:
1a010c70:	b538      	push	{r3, r4, r5, lr}
1a010c72:	4605      	mov	r5, r0
1a010c74:	460c      	mov	r4, r1
1a010c76:	f7f7 ffe5 	bl	1a008c44 <inv_get_acc_state>
1a010c7a:	b920      	cbnz	r0, 1a010c86 <MagDisturbCheckSettling+0x16>
1a010c7c:	4628      	mov	r0, r5
1a010c7e:	490c      	ldr	r1, [pc, #48]	; (1a010cb0 <MagDisturbCheckSettling+0x40>)
1a010c80:	f003 fd1a 	bl	1a0146b8 <__aeabi_fcmpgt>
1a010c84:	b178      	cbz	r0, 1a010ca6 <MagDisturbCheckSettling+0x36>
1a010c86:	4b0b      	ldr	r3, [pc, #44]	; (1a010cb4 <MagDisturbCheckSettling+0x44>)
1a010c88:	2200      	movs	r2, #0
1a010c8a:	611a      	str	r2, [r3, #16]
1a010c8c:	615a      	str	r2, [r3, #20]
1a010c8e:	6959      	ldr	r1, [r3, #20]
1a010c90:	4a08      	ldr	r2, [pc, #32]	; (1a010cb4 <MagDisturbCheckSettling+0x44>)
1a010c92:	1861      	adds	r1, r4, r1
1a010c94:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
1a010c98:	6159      	str	r1, [r3, #20]
1a010c9a:	dd03      	ble.n	1a010ca4 <MagDisturbCheckSettling+0x34>
1a010c9c:	2301      	movs	r3, #1
1a010c9e:	6113      	str	r3, [r2, #16]
1a010ca0:	2300      	movs	r3, #0
1a010ca2:	6153      	str	r3, [r2, #20]
1a010ca4:	bd38      	pop	{r3, r4, r5, pc}
1a010ca6:	4b03      	ldr	r3, [pc, #12]	; (1a010cb4 <MagDisturbCheckSettling+0x44>)
1a010ca8:	691a      	ldr	r2, [r3, #16]
1a010caa:	2a00      	cmp	r2, #0
1a010cac:	d0ef      	beq.n	1a010c8e <MagDisturbCheckSettling+0x1e>
1a010cae:	bd38      	pop	{r3, r4, r5, pc}
1a010cb0:	461c4000 	.word	0x461c4000
1a010cb4:	100872e8 	.word	0x100872e8

1a010cb8 <inv_check_magnetic_disturbance>:
1a010cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a010cbc:	4ca9      	ldr	r4, [pc, #676]	; (1a010f64 <inv_check_magnetic_disturbance+0x2ac>)
1a010cbe:	b08d      	sub	sp, #52	; 0x34
1a010cc0:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
1a010cc4:	2500      	movs	r5, #0
1a010cc6:	4680      	mov	r8, r0
1a010cc8:	4689      	mov	r9, r1
1a010cca:	4617      	mov	r7, r2
1a010ccc:	469a      	mov	sl, r3
1a010cce:	9506      	str	r5, [sp, #24]
1a010cd0:	9507      	str	r5, [sp, #28]
1a010cd2:	9508      	str	r5, [sp, #32]
1a010cd4:	b926      	cbnz	r6, 1a010ce0 <inv_check_magnetic_disturbance+0x28>
1a010cd6:	2300      	movs	r3, #0
1a010cd8:	4618      	mov	r0, r3
1a010cda:	b00d      	add	sp, #52	; 0x34
1a010cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a010ce0:	f7f6 f8ee 	bl	1a006ec0 <inv_get_gyro_on>
1a010ce4:	2800      	cmp	r0, #0
1a010ce6:	f040 8123 	bne.w	1a010f30 <inv_check_magnetic_disturbance+0x278>
1a010cea:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
1a010cee:	4d9d      	ldr	r5, [pc, #628]	; (1a010f64 <inv_check_magnetic_disturbance+0x2ac>)
1a010cf0:	2b00      	cmp	r3, #0
1a010cf2:	dd12      	ble.n	1a010d1a <inv_check_magnetic_disturbance+0x62>
1a010cf4:	2301      	movs	r3, #1
1a010cf6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
1a010cfa:	f7f6 f8e1 	bl	1a006ec0 <inv_get_gyro_on>
1a010cfe:	2800      	cmp	r0, #0
1a010d00:	f040 80a9 	bne.w	1a010e56 <inv_check_magnetic_disturbance+0x19e>
1a010d04:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
1a010d08:	ebc8 0303 	rsb	r3, r8, r3
1a010d0c:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
1a010d10:	2b00      	cmp	r3, #0
1a010d12:	dc02      	bgt.n	1a010d1a <inv_check_magnetic_disturbance+0x62>
1a010d14:	2300      	movs	r3, #0
1a010d16:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
1a010d1a:	f7f8 f921 	bl	1a008f60 <inv_got_compass_bias>
1a010d1e:	2800      	cmp	r0, #0
1a010d20:	d0d9      	beq.n	1a010cd6 <inv_check_magnetic_disturbance+0x1e>
1a010d22:	2600      	movs	r6, #0
1a010d24:	2500      	movs	r5, #0
1a010d26:	5978      	ldr	r0, [r7, r5]
1a010d28:	f003 fab6 	bl	1a014298 <__aeabi_i2f>
1a010d2c:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a010d30:	f003 fb06 	bl	1a014340 <__aeabi_fmul>
1a010d34:	4683      	mov	fp, r0
1a010d36:	f85a 0005 	ldr.w	r0, [sl, r5]
1a010d3a:	f003 faad 	bl	1a014298 <__aeabi_i2f>
1a010d3e:	4601      	mov	r1, r0
1a010d40:	4658      	mov	r0, fp
1a010d42:	f003 fafd 	bl	1a014340 <__aeabi_fmul>
1a010d46:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a010d4a:	f003 faf9 	bl	1a014340 <__aeabi_fmul>
1a010d4e:	4601      	mov	r1, r0
1a010d50:	4630      	mov	r0, r6
1a010d52:	f003 f9ed 	bl	1a014130 <__addsf3>
1a010d56:	3504      	adds	r5, #4
1a010d58:	2d0c      	cmp	r5, #12
1a010d5a:	4606      	mov	r6, r0
1a010d5c:	d1e3      	bne.n	1a010d26 <inv_check_magnetic_disturbance+0x6e>
1a010d5e:	4638      	mov	r0, r7
1a010d60:	f7ff ff1e 	bl	1a010ba0 <Mag3ofNormalizedLong>
1a010d64:	4607      	mov	r7, r0
1a010d66:	4639      	mov	r1, r7
1a010d68:	4630      	mov	r0, r6
1a010d6a:	f003 fb9d 	bl	1a0144a8 <__aeabi_fdiv>
1a010d6e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
1a010d72:	4605      	mov	r5, r0
1a010d74:	f003 fca0 	bl	1a0146b8 <__aeabi_fcmpgt>
1a010d78:	2800      	cmp	r0, #0
1a010d7a:	d064      	beq.n	1a010e46 <inv_check_magnetic_disturbance+0x18e>
1a010d7c:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
1a010d80:	4628      	mov	r0, r5
1a010d82:	f004 fd51 	bl	1a015828 <acosf>
1a010d86:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
1a010d8a:	4d76      	ldr	r5, [pc, #472]	; (1a010f64 <inv_check_magnetic_disturbance+0x2ac>)
1a010d8c:	4606      	mov	r6, r0
1a010d8e:	b15b      	cbz	r3, 1a010da8 <inv_check_magnetic_disturbance+0xf0>
1a010d90:	4638      	mov	r0, r7
1a010d92:	6829      	ldr	r1, [r5, #0]
1a010d94:	f003 fc72 	bl	1a01467c <__aeabi_fcmplt>
1a010d98:	b130      	cbz	r0, 1a010da8 <inv_check_magnetic_disturbance+0xf0>
1a010d9a:	4638      	mov	r0, r7
1a010d9c:	6869      	ldr	r1, [r5, #4]
1a010d9e:	f003 fc8b 	bl	1a0146b8 <__aeabi_fcmpgt>
1a010da2:	2800      	cmp	r0, #0
1a010da4:	f040 80c8 	bne.w	1a010f38 <inv_check_magnetic_disturbance+0x280>
1a010da8:	ad09      	add	r5, sp, #36	; 0x24
1a010daa:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 1a010f64 <inv_check_magnetic_disturbance+0x2ac>
1a010dae:	4628      	mov	r0, r5
1a010db0:	f7f7 ff9a 	bl	1a008ce8 <inv_get_local_field>
1a010db4:	4628      	mov	r0, r5
1a010db6:	f10a 01ac 	add.w	r1, sl, #172	; 0xac
1a010dba:	220c      	movs	r2, #12
1a010dbc:	f003 fee0 	bl	1a014b80 <memcmp>
1a010dc0:	2800      	cmp	r0, #0
1a010dc2:	d152      	bne.n	1a010e6a <inv_check_magnetic_disturbance+0x1b2>
1a010dc4:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
1a010dc8:	2b01      	cmp	r3, #1
1a010dca:	d04e      	beq.n	1a010e6a <inv_check_magnetic_disturbance+0x1b2>
1a010dcc:	6de5      	ldr	r5, [r4, #92]	; 0x5c
1a010dce:	b95d      	cbnz	r5, 1a010de8 <inv_check_magnetic_disturbance+0x130>
1a010dd0:	4b64      	ldr	r3, [pc, #400]	; (1a010f64 <inv_check_magnetic_disturbance+0x2ac>)
1a010dd2:	2201      	movs	r2, #1
1a010dd4:	65da      	str	r2, [r3, #92]	; 0x5c
1a010dd6:	eb04 1005 	add.w	r0, r4, r5, lsl #4
1a010dda:	3018      	adds	r0, #24
1a010ddc:	4962      	ldr	r1, [pc, #392]	; (1a010f68 <inv_check_magnetic_disturbance+0x2b0>)
1a010dde:	3501      	adds	r5, #1
1a010de0:	f7f7 ff0e 	bl	1a008c00 <inv_get_compass_correction>
1a010de4:	2d04      	cmp	r5, #4
1a010de6:	d1f6      	bne.n	1a010dd6 <inv_check_magnetic_disturbance+0x11e>
1a010de8:	4d5e      	ldr	r5, [pc, #376]	; (1a010f64 <inv_check_magnetic_disturbance+0x2ac>)
1a010dea:	aa03      	add	r2, sp, #12
1a010dec:	f105 0164 	add.w	r1, r5, #100	; 0x64
1a010df0:	4648      	mov	r0, r9
1a010df2:	f7ff feab 	bl	1a010b4c <ComputeAngleVelocity>
1a010df6:	f105 0164 	add.w	r1, r5, #100	; 0x64
1a010dfa:	4648      	mov	r0, r9
1a010dfc:	f7f7 f93e 	bl	1a00807c <inv_q_invert>
1a010e00:	a806      	add	r0, sp, #24
1a010e02:	f7f6 ffcb 	bl	1a007d9c <inv_get_gyro_sum_of_sqr>
1a010e06:	f003 fa43 	bl	1a014290 <__aeabi_ui2f>
1a010e0a:	f04f 5172 	mov.w	r1, #1015021568	; 0x3c800000
1a010e0e:	f003 fa97 	bl	1a014340 <__aeabi_fmul>
1a010e12:	4641      	mov	r1, r8
1a010e14:	f7ff ff2c 	bl	1a010c70 <MagDisturbCheckSettling>
1a010e18:	4638      	mov	r0, r7
1a010e1a:	4631      	mov	r1, r6
1a010e1c:	f7ff feec 	bl	1a010bf8 <MagDisturbSetDisturbance>
1a010e20:	6fa3      	ldr	r3, [r4, #120]	; 0x78
1a010e22:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
1a010e24:	4293      	cmp	r3, r2
1a010e26:	da01      	bge.n	1a010e2c <inv_check_magnetic_disturbance+0x174>
1a010e28:	4443      	add	r3, r8
1a010e2a:	67ab      	str	r3, [r5, #120]	; 0x78
1a010e2c:	6f63      	ldr	r3, [r4, #116]	; 0x74
1a010e2e:	4c4d      	ldr	r4, [pc, #308]	; (1a010f64 <inv_check_magnetic_disturbance+0x2ac>)
1a010e30:	2b00      	cmp	r3, #0
1a010e32:	f47f af51 	bne.w	1a010cd8 <inv_check_magnetic_disturbance+0x20>
1a010e36:	6e22      	ldr	r2, [r4, #96]	; 0x60
1a010e38:	4442      	add	r2, r8
1a010e3a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
1a010e3e:	f300 8081 	bgt.w	1a010f44 <inv_check_magnetic_disturbance+0x28c>
1a010e42:	6622      	str	r2, [r4, #96]	; 0x60
1a010e44:	e748      	b.n	1a010cd8 <inv_check_magnetic_disturbance+0x20>
1a010e46:	4628      	mov	r0, r5
1a010e48:	4948      	ldr	r1, [pc, #288]	; (1a010f6c <inv_check_magnetic_disturbance+0x2b4>)
1a010e4a:	f003 fc17 	bl	1a01467c <__aeabi_fcmplt>
1a010e4e:	2800      	cmp	r0, #0
1a010e50:	d096      	beq.n	1a010d80 <inv_check_magnetic_disturbance+0xc8>
1a010e52:	4d46      	ldr	r5, [pc, #280]	; (1a010f6c <inv_check_magnetic_disturbance+0x2b4>)
1a010e54:	e794      	b.n	1a010d80 <inv_check_magnetic_disturbance+0xc8>
1a010e56:	a806      	add	r0, sp, #24
1a010e58:	f7f6 ffa0 	bl	1a007d9c <inv_get_gyro_sum_of_sqr>
1a010e5c:	f5b0 4fc8 	cmp.w	r0, #25600	; 0x6400
1a010e60:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
1a010e64:	f4bf af50 	bcs.w	1a010d08 <inv_check_magnetic_disturbance+0x50>
1a010e68:	e752      	b.n	1a010d10 <inv_check_magnetic_disturbance+0x58>
1a010e6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
1a010e6e:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 1a010f64 <inv_check_magnetic_disturbance+0x2ac>
1a010e72:	f10a 03ac 	add.w	r3, sl, #172	; 0xac
1a010e76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
1a010e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a010e7c:	b9a3      	cbnz	r3, 1a010ea8 <inv_check_magnetic_disturbance+0x1f0>
1a010e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a010e80:	b993      	cbnz	r3, 1a010ea8 <inv_check_magnetic_disturbance+0x1f0>
1a010e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a010e84:	b983      	cbnz	r3, 1a010ea8 <inv_check_magnetic_disturbance+0x1f0>
1a010e86:	493a      	ldr	r1, [pc, #232]	; (1a010f70 <inv_check_magnetic_disturbance+0x2b8>)
1a010e88:	f8da 2098 	ldr.w	r2, [sl, #152]	; 0x98
1a010e8c:	f8ca 1000 	str.w	r1, [sl]
1a010e90:	4938      	ldr	r1, [pc, #224]	; (1a010f74 <inv_check_magnetic_disturbance+0x2bc>)
1a010e92:	2a01      	cmp	r2, #1
1a010e94:	f8ca 1004 	str.w	r1, [sl, #4]
1a010e98:	d07c      	beq.n	1a010f94 <inv_check_magnetic_disturbance+0x2dc>
1a010e9a:	4b37      	ldr	r3, [pc, #220]	; (1a010f78 <inv_check_magnetic_disturbance+0x2c0>)
1a010e9c:	f8ca 3008 	str.w	r3, [sl, #8]
1a010ea0:	4b36      	ldr	r3, [pc, #216]	; (1a010f7c <inv_check_magnetic_disturbance+0x2c4>)
1a010ea2:	f8ca 300c 	str.w	r3, [sl, #12]
1a010ea6:	e791      	b.n	1a010dcc <inv_check_magnetic_disturbance+0x114>
1a010ea8:	4628      	mov	r0, r5
1a010eaa:	f7ff fe79 	bl	1a010ba0 <Mag3ofNormalizedLong>
1a010eae:	2100      	movs	r1, #0
1a010eb0:	4605      	mov	r5, r0
1a010eb2:	f003 fbd9 	bl	1a014668 <__aeabi_fcmpeq>
1a010eb6:	2800      	cmp	r0, #0
1a010eb8:	d188      	bne.n	1a010dcc <inv_check_magnetic_disturbance+0x114>
1a010eba:	4628      	mov	r0, r5
1a010ebc:	4930      	ldr	r1, [pc, #192]	; (1a010f80 <inv_check_magnetic_disturbance+0x2c8>)
1a010ebe:	f003 f935 	bl	1a01412c <__aeabi_fsub>
1a010ec2:	4601      	mov	r1, r0
1a010ec4:	f003 fa3c 	bl	1a014340 <__aeabi_fmul>
1a010ec8:	f004 fd02 	bl	1a0158d0 <sqrtf>
1a010ecc:	492c      	ldr	r1, [pc, #176]	; (1a010f80 <inv_check_magnetic_disturbance+0x2c8>)
1a010ece:	6060      	str	r0, [r4, #4]
1a010ed0:	4628      	mov	r0, r5
1a010ed2:	f003 f92d 	bl	1a014130 <__addsf3>
1a010ed6:	4601      	mov	r1, r0
1a010ed8:	f003 fa32 	bl	1a014340 <__aeabi_fmul>
1a010edc:	f004 fcf8 	bl	1a0158d0 <sqrtf>
1a010ee0:	6020      	str	r0, [r4, #0]
1a010ee2:	980b      	ldr	r0, [sp, #44]	; 0x2c
1a010ee4:	f003 f9d8 	bl	1a014298 <__aeabi_i2f>
1a010ee8:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a010eec:	f003 fa28 	bl	1a014340 <__aeabi_fmul>
1a010ef0:	4629      	mov	r1, r5
1a010ef2:	f003 fad9 	bl	1a0144a8 <__aeabi_fdiv>
1a010ef6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
1a010efa:	4605      	mov	r5, r0
1a010efc:	f003 fbdc 	bl	1a0146b8 <__aeabi_fcmpgt>
1a010f00:	2800      	cmp	r0, #0
1a010f02:	d03f      	beq.n	1a010f84 <inv_check_magnetic_disturbance+0x2cc>
1a010f04:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
1a010f08:	4628      	mov	r0, r5
1a010f0a:	f004 fc8d 	bl	1a015828 <acosf>
1a010f0e:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
1a010f12:	f003 f90b 	bl	1a01412c <__aeabi_fsub>
1a010f16:	60a0      	str	r0, [r4, #8]
1a010f18:	4628      	mov	r0, r5
1a010f1a:	f004 fc85 	bl	1a015828 <acosf>
1a010f1e:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
1a010f22:	f003 f905 	bl	1a014130 <__addsf3>
1a010f26:	2300      	movs	r3, #0
1a010f28:	60e0      	str	r0, [r4, #12]
1a010f2a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
1a010f2e:	e74d      	b.n	1a010dcc <inv_check_magnetic_disturbance+0x114>
1a010f30:	a806      	add	r0, sp, #24
1a010f32:	f7f6 fd07 	bl	1a007944 <inv_get_gyro>
1a010f36:	e6d8      	b.n	1a010cea <inv_check_magnetic_disturbance+0x32>
1a010f38:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
1a010f3c:	4631      	mov	r1, r6
1a010f3e:	f7ff fdb7 	bl	1a010ab0 <inv_track_dip_angle>
1a010f42:	e731      	b.n	1a010da8 <inv_check_magnetic_disturbance+0xf0>
1a010f44:	f104 0128 	add.w	r1, r4, #40	; 0x28
1a010f48:	2230      	movs	r2, #48	; 0x30
1a010f4a:	f104 0018 	add.w	r0, r4, #24
1a010f4e:	6623      	str	r3, [r4, #96]	; 0x60
1a010f50:	f003 fee2 	bl	1a014d18 <memmove>
1a010f54:	f104 0048 	add.w	r0, r4, #72	; 0x48
1a010f58:	f104 0158 	add.w	r1, r4, #88	; 0x58
1a010f5c:	f7f7 fe50 	bl	1a008c00 <inv_get_compass_correction>
1a010f60:	6f63      	ldr	r3, [r4, #116]	; 0x74
1a010f62:	e6b9      	b.n	1a010cd8 <inv_check_magnetic_disturbance+0x20>
1a010f64:	100872e8 	.word	0x100872e8
1a010f68:	10087340 	.word	0x10087340
1a010f6c:	bf800000 	.word	0xbf800000
1a010f70:	42700000 	.word	0x42700000
1a010f74:	41f00000 	.word	0x41f00000
1a010f78:	c2b40000 	.word	0xc2b40000
1a010f7c:	42b40000 	.word	0x42b40000
1a010f80:	41200000 	.word	0x41200000
1a010f84:	4628      	mov	r0, r5
1a010f86:	490e      	ldr	r1, [pc, #56]	; (1a010fc0 <inv_check_magnetic_disturbance+0x308>)
1a010f88:	f003 fb78 	bl	1a01467c <__aeabi_fcmplt>
1a010f8c:	2800      	cmp	r0, #0
1a010f8e:	d0bb      	beq.n	1a010f08 <inv_check_magnetic_disturbance+0x250>
1a010f90:	4d0b      	ldr	r5, [pc, #44]	; (1a010fc0 <inv_check_magnetic_disturbance+0x308>)
1a010f92:	e7b9      	b.n	1a010f08 <inv_check_magnetic_disturbance+0x250>
1a010f94:	f8da 50a8 	ldr.w	r5, [sl, #168]	; 0xa8
1a010f98:	f8da b09c 	ldr.w	fp, [sl, #156]	; 0x9c
1a010f9c:	9301      	str	r3, [sp, #4]
1a010f9e:	4659      	mov	r1, fp
1a010fa0:	4628      	mov	r0, r5
1a010fa2:	f003 f8c3 	bl	1a01412c <__aeabi_fsub>
1a010fa6:	4659      	mov	r1, fp
1a010fa8:	f8ca 0008 	str.w	r0, [sl, #8]
1a010fac:	4628      	mov	r0, r5
1a010fae:	f003 f8bf 	bl	1a014130 <__addsf3>
1a010fb2:	9b01      	ldr	r3, [sp, #4]
1a010fb4:	f8ca 000c 	str.w	r0, [sl, #12]
1a010fb8:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
1a010fbc:	e706      	b.n	1a010dcc <inv_check_magnetic_disturbance+0x114>
1a010fbe:	bf00      	nop
1a010fc0:	bf800000 	.word	0xbf800000

1a010fc4 <inv_magnetic_disturbance_process>:
1a010fc4:	b570      	push	{r4, r5, r6, lr}
1a010fc6:	4604      	mov	r4, r0
1a010fc8:	b088      	sub	sp, #32
1a010fca:	a801      	add	r0, sp, #4
1a010fcc:	f7f7 fe9c 	bl	1a008d08 <inv_get_gravity>
1a010fd0:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
1a010fd4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
1a010fd8:	1ac6      	subs	r6, r0, r3
1a010fda:	a804      	add	r0, sp, #16
1a010fdc:	f7f7 fee4 	bl	1a008da8 <inv_get_6axis_quaternion>
1a010fe0:	a904      	add	r1, sp, #16
1a010fe2:	4605      	mov	r5, r0
1a010fe4:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
1a010fe8:	ab01      	add	r3, sp, #4
1a010fea:	4630      	mov	r0, r6
1a010fec:	f7ff fe64 	bl	1a010cb8 <inv_check_magnetic_disturbance>
1a010ff0:	f7f6 f87e 	bl	1a0070f0 <inv_set_compass_disturbance>
1a010ff4:	4628      	mov	r0, r5
1a010ff6:	b008      	add	sp, #32
1a010ff8:	bd70      	pop	{r4, r5, r6, pc}
1a010ffa:	bf00      	nop

1a010ffc <inv_get_magnetic_disturbance_state>:
1a010ffc:	4b01      	ldr	r3, [pc, #4]	; (1a011004 <inv_get_magnetic_disturbance_state+0x8>)
1a010ffe:	6f58      	ldr	r0, [r3, #116]	; 0x74
1a011000:	4770      	bx	lr
1a011002:	bf00      	nop
1a011004:	100872e8 	.word	0x100872e8

1a011008 <inv_normalize_quat>:
1a011008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a01100c:	4604      	mov	r4, r0
1a01100e:	6800      	ldr	r0, [r0, #0]
1a011010:	460d      	mov	r5, r1
1a011012:	f003 f941 	bl	1a014298 <__aeabi_i2f>
1a011016:	4606      	mov	r6, r0
1a011018:	6860      	ldr	r0, [r4, #4]
1a01101a:	f003 f93d 	bl	1a014298 <__aeabi_i2f>
1a01101e:	4681      	mov	r9, r0
1a011020:	68a0      	ldr	r0, [r4, #8]
1a011022:	f003 f939 	bl	1a014298 <__aeabi_i2f>
1a011026:	4680      	mov	r8, r0
1a011028:	68e0      	ldr	r0, [r4, #12]
1a01102a:	f003 f935 	bl	1a014298 <__aeabi_i2f>
1a01102e:	4631      	mov	r1, r6
1a011030:	4607      	mov	r7, r0
1a011032:	4630      	mov	r0, r6
1a011034:	f003 f984 	bl	1a014340 <__aeabi_fmul>
1a011038:	4649      	mov	r1, r9
1a01103a:	4606      	mov	r6, r0
1a01103c:	4648      	mov	r0, r9
1a01103e:	f003 f97f 	bl	1a014340 <__aeabi_fmul>
1a011042:	4601      	mov	r1, r0
1a011044:	4630      	mov	r0, r6
1a011046:	f003 f873 	bl	1a014130 <__addsf3>
1a01104a:	4641      	mov	r1, r8
1a01104c:	4606      	mov	r6, r0
1a01104e:	4640      	mov	r0, r8
1a011050:	f003 f976 	bl	1a014340 <__aeabi_fmul>
1a011054:	4601      	mov	r1, r0
1a011056:	4630      	mov	r0, r6
1a011058:	f003 f86a 	bl	1a014130 <__addsf3>
1a01105c:	4639      	mov	r1, r7
1a01105e:	4606      	mov	r6, r0
1a011060:	4638      	mov	r0, r7
1a011062:	f003 f96d 	bl	1a014340 <__aeabi_fmul>
1a011066:	4601      	mov	r1, r0
1a011068:	4630      	mov	r0, r6
1a01106a:	f003 f861 	bl	1a014130 <__addsf3>
1a01106e:	2100      	movs	r1, #0
1a011070:	4606      	mov	r6, r0
1a011072:	f003 fb0d 	bl	1a014690 <__aeabi_fcmple>
1a011076:	2800      	cmp	r0, #0
1a011078:	d132      	bne.n	1a0110e0 <inv_normalize_quat+0xd8>
1a01107a:	4630      	mov	r0, r6
1a01107c:	f004 fc28 	bl	1a0158d0 <sqrtf>
1a011080:	4601      	mov	r1, r0
1a011082:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
1a011086:	f003 fa0f 	bl	1a0144a8 <__aeabi_fdiv>
1a01108a:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a01108e:	f003 f957 	bl	1a014340 <__aeabi_fmul>
1a011092:	4606      	mov	r6, r0
1a011094:	6820      	ldr	r0, [r4, #0]
1a011096:	f003 f8ff 	bl	1a014298 <__aeabi_i2f>
1a01109a:	4631      	mov	r1, r6
1a01109c:	f003 f950 	bl	1a014340 <__aeabi_fmul>
1a0110a0:	f003 fb14 	bl	1a0146cc <__aeabi_f2iz>
1a0110a4:	6028      	str	r0, [r5, #0]
1a0110a6:	6860      	ldr	r0, [r4, #4]
1a0110a8:	f003 f8f6 	bl	1a014298 <__aeabi_i2f>
1a0110ac:	4631      	mov	r1, r6
1a0110ae:	f003 f947 	bl	1a014340 <__aeabi_fmul>
1a0110b2:	f003 fb0b 	bl	1a0146cc <__aeabi_f2iz>
1a0110b6:	6068      	str	r0, [r5, #4]
1a0110b8:	68a0      	ldr	r0, [r4, #8]
1a0110ba:	f003 f8ed 	bl	1a014298 <__aeabi_i2f>
1a0110be:	4631      	mov	r1, r6
1a0110c0:	f003 f93e 	bl	1a014340 <__aeabi_fmul>
1a0110c4:	f003 fb02 	bl	1a0146cc <__aeabi_f2iz>
1a0110c8:	60a8      	str	r0, [r5, #8]
1a0110ca:	68e0      	ldr	r0, [r4, #12]
1a0110cc:	f003 f8e4 	bl	1a014298 <__aeabi_i2f>
1a0110d0:	4631      	mov	r1, r6
1a0110d2:	f003 f935 	bl	1a014340 <__aeabi_fmul>
1a0110d6:	f003 faf9 	bl	1a0146cc <__aeabi_f2iz>
1a0110da:	60e8      	str	r0, [r5, #12]
1a0110dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0110e0:	2300      	movs	r3, #0
1a0110e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a0110e6:	e885 000c 	stmia.w	r5, {r2, r3}
1a0110ea:	60ab      	str	r3, [r5, #8]
1a0110ec:	60eb      	str	r3, [r5, #12]
1a0110ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0110f2:	bf00      	nop

1a0110f4 <inv_start_quaternion>:
1a0110f4:	b508      	push	{r3, lr}
1a0110f6:	4b08      	ldr	r3, [pc, #32]	; (1a011118 <inv_start_quaternion+0x24>)
1a0110f8:	4908      	ldr	r1, [pc, #32]	; (1a01111c <inv_start_quaternion+0x28>)
1a0110fa:	6818      	ldr	r0, [r3, #0]
1a0110fc:	2208      	movs	r2, #8
1a0110fe:	f003 fd3f 	bl	1a014b80 <memcmp>
1a011102:	b108      	cbz	r0, 1a011108 <inv_start_quaternion+0x14>
1a011104:	2032      	movs	r0, #50	; 0x32
1a011106:	bd08      	pop	{r3, pc}
1a011108:	4805      	ldr	r0, [pc, #20]	; (1a011120 <inv_start_quaternion+0x2c>)
1a01110a:	21c8      	movs	r1, #200	; 0xc8
1a01110c:	2213      	movs	r2, #19
1a01110e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a011112:	f7f6 ba1d 	b.w	1a007550 <inv_register_data_cb>
1a011116:	bf00      	nop
1a011118:	10086018 	.word	0x10086018
1a01111c:	1a01aa84 	.word	0x1a01aa84
1a011120:	1a01199d 	.word	0x1a01199d
1a011124:	ffffffff 	.word	0xffffffff

1a011128 <inv_generate_gyro_quaternion>:
1a011128:	b5f0      	push	{r4, r5, r6, r7, lr}
1a01112a:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a01112c:	065b      	lsls	r3, r3, #25
1a01112e:	b089      	sub	sp, #36	; 0x24
1a011130:	4604      	mov	r4, r0
1a011132:	d55b      	bpl.n	1a0111ec <inv_generate_gyro_quaternion+0xc4>
1a011134:	6986      	ldr	r6, [r0, #24]
1a011136:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a01113a:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
1a01113e:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
1a011142:	429a      	cmp	r2, r3
1a011144:	dd54      	ble.n	1a0111f0 <inv_generate_gyro_quaternion+0xc8>
1a011146:	f5b2 0fc8 	cmp.w	r2, #6553600	; 0x640000
1a01114a:	dd70      	ble.n	1a01122e <inv_generate_gyro_quaternion+0x106>
1a01114c:	4d3c      	ldr	r5, [pc, #240]	; (1a011240 <inv_generate_gyro_quaternion+0x118>)
1a01114e:	2303      	movs	r3, #3
1a011150:	63ab      	str	r3, [r5, #56]	; 0x38
1a011152:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a011154:	6b6a      	ldr	r2, [r5, #52]	; 0x34
1a011156:	4f3a      	ldr	r7, [pc, #232]	; (1a011240 <inv_generate_gyro_quaternion+0x118>)
1a011158:	429a      	cmp	r2, r3
1a01115a:	d01c      	beq.n	1a011196 <inv_generate_gyro_quaternion+0x6e>
1a01115c:	4618      	mov	r0, r3
1a01115e:	637b      	str	r3, [r7, #52]	; 0x34
1a011160:	f003 f89a 	bl	1a014298 <__aeabi_i2f>
1a011164:	4937      	ldr	r1, [pc, #220]	; (1a011244 <inv_generate_gyro_quaternion+0x11c>)
1a011166:	f003 f99f 	bl	1a0144a8 <__aeabi_fdiv>
1a01116a:	f04f 419c 	mov.w	r1, #1308622848	; 0x4e000000
1a01116e:	f003 f8e7 	bl	1a014340 <__aeabi_fmul>
1a011172:	f002 fc71 	bl	1a013a58 <__aeabi_f2d>
1a011176:	a330      	add	r3, pc, #192	; (adr r3, 1a011238 <inv_generate_gyro_quaternion+0x110>)
1a011178:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01117c:	f002 fcc0 	bl	1a013b00 <__aeabi_dmul>
1a011180:	2200      	movs	r2, #0
1a011182:	4b31      	ldr	r3, [pc, #196]	; (1a011248 <inv_generate_gyro_quaternion+0x120>)
1a011184:	f002 fcbc 	bl	1a013b00 <__aeabi_dmul>
1a011188:	2200      	movs	r2, #0
1a01118a:	4b30      	ldr	r3, [pc, #192]	; (1a01124c <inv_generate_gyro_quaternion+0x124>)
1a01118c:	f002 fde2 	bl	1a013d54 <__aeabi_ddiv>
1a011190:	f002 ff50 	bl	1a014034 <__aeabi_d2iz>
1a011194:	6338      	str	r0, [r7, #48]	; 0x30
1a011196:	2300      	movs	r3, #0
1a011198:	6b29      	ldr	r1, [r5, #48]	; 0x30
1a01119a:	9300      	str	r3, [sp, #0]
1a01119c:	4630      	mov	r0, r6
1a01119e:	f7f6 fe49 	bl	1a007e34 <inv_q30_mult>
1a0111a2:	6b29      	ldr	r1, [r5, #48]	; 0x30
1a0111a4:	9001      	str	r0, [sp, #4]
1a0111a6:	69e0      	ldr	r0, [r4, #28]
1a0111a8:	f7f6 fe44 	bl	1a007e34 <inv_q30_mult>
1a0111ac:	6b29      	ldr	r1, [r5, #48]	; 0x30
1a0111ae:	9002      	str	r0, [sp, #8]
1a0111b0:	6a20      	ldr	r0, [r4, #32]
1a0111b2:	f7f6 fe3f 	bl	1a007e34 <inv_q30_mult>
1a0111b6:	4669      	mov	r1, sp
1a0111b8:	9003      	str	r0, [sp, #12]
1a0111ba:	aa04      	add	r2, sp, #16
1a0111bc:	4820      	ldr	r0, [pc, #128]	; (1a011240 <inv_generate_gyro_quaternion+0x118>)
1a0111be:	f7f6 fe5f 	bl	1a007e80 <inv_q_mult>
1a0111c2:	9b04      	ldr	r3, [sp, #16]
1a0111c4:	481e      	ldr	r0, [pc, #120]	; (1a011240 <inv_generate_gyro_quaternion+0x118>)
1a0111c6:	019f      	lsls	r7, r3, #6
1a0111c8:	9b05      	ldr	r3, [sp, #20]
1a0111ca:	9704      	str	r7, [sp, #16]
1a0111cc:	019e      	lsls	r6, r3, #6
1a0111ce:	9b06      	ldr	r3, [sp, #24]
1a0111d0:	9605      	str	r6, [sp, #20]
1a0111d2:	019d      	lsls	r5, r3, #6
1a0111d4:	9b07      	ldr	r3, [sp, #28]
1a0111d6:	9506      	str	r5, [sp, #24]
1a0111d8:	019c      	lsls	r4, r3, #6
1a0111da:	a904      	add	r1, sp, #16
1a0111dc:	4602      	mov	r2, r0
1a0111de:	9407      	str	r4, [sp, #28]
1a0111e0:	f7f6 ff1a 	bl	1a008018 <inv_q_add>
1a0111e4:	4816      	ldr	r0, [pc, #88]	; (1a011240 <inv_generate_gyro_quaternion+0x118>)
1a0111e6:	4601      	mov	r1, r0
1a0111e8:	f7ff ff0e 	bl	1a011008 <inv_normalize_quat>
1a0111ec:	b009      	add	sp, #36	; 0x24
1a0111ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0111f0:	69c2      	ldr	r2, [r0, #28]
1a0111f2:	2a00      	cmp	r2, #0
1a0111f4:	bfb8      	it	lt
1a0111f6:	4252      	neglt	r2, r2
1a0111f8:	429a      	cmp	r2, r3
1a0111fa:	dd0d      	ble.n	1a011218 <inv_generate_gyro_quaternion+0xf0>
1a0111fc:	f5b2 0fc8 	cmp.w	r2, #6553600	; 0x640000
1a011200:	dca4      	bgt.n	1a01114c <inv_generate_gyro_quaternion+0x24>
1a011202:	6a22      	ldr	r2, [r4, #32]
1a011204:	2a00      	cmp	r2, #0
1a011206:	bfb8      	it	lt
1a011208:	4252      	neglt	r2, r2
1a01120a:	f5b2 0fc8 	cmp.w	r2, #6553600	; 0x640000
1a01120e:	dc9d      	bgt.n	1a01114c <inv_generate_gyro_quaternion+0x24>
1a011210:	4d0b      	ldr	r5, [pc, #44]	; (1a011240 <inv_generate_gyro_quaternion+0x118>)
1a011212:	2302      	movs	r3, #2
1a011214:	63ab      	str	r3, [r5, #56]	; 0x38
1a011216:	e79c      	b.n	1a011152 <inv_generate_gyro_quaternion+0x2a>
1a011218:	6a02      	ldr	r2, [r0, #32]
1a01121a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
1a01121e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
1a011222:	4299      	cmp	r1, r3
1a011224:	dcee      	bgt.n	1a011204 <inv_generate_gyro_quaternion+0xdc>
1a011226:	4b06      	ldr	r3, [pc, #24]	; (1a011240 <inv_generate_gyro_quaternion+0x118>)
1a011228:	2200      	movs	r2, #0
1a01122a:	639a      	str	r2, [r3, #56]	; 0x38
1a01122c:	e7de      	b.n	1a0111ec <inv_generate_gyro_quaternion+0xc4>
1a01122e:	69c2      	ldr	r2, [r0, #28]
1a011230:	2a00      	cmp	r2, #0
1a011232:	bfb8      	it	lt
1a011234:	4252      	neglt	r2, r2
1a011236:	e7e1      	b.n	1a0111fc <inv_generate_gyro_quaternion+0xd4>
1a011238:	54442d18 	.word	0x54442d18
1a01123c:	400921fb 	.word	0x400921fb
1a011240:	100873a0 	.word	0x100873a0
1a011244:	49742400 	.word	0x49742400
1a011248:	40700000 	.word	0x40700000
1a01124c:	40668000 	.word	0x40668000

1a011250 <inv_generate_accel_gyro_quaternion>:
1a011250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a011254:	6f43      	ldr	r3, [r0, #116]	; 0x74
1a011256:	f003 0350 	and.w	r3, r3, #80	; 0x50
1a01125a:	2b40      	cmp	r3, #64	; 0x40
1a01125c:	b0ab      	sub	sp, #172	; 0xac
1a01125e:	4606      	mov	r6, r0
1a011260:	f000 81e8 	beq.w	1a011634 <inv_generate_accel_gyro_quaternion+0x3e4>
1a011264:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
1a011268:	4f8d      	ldr	r7, [pc, #564]	; (1a0114a0 <inv_generate_accel_gyro_quaternion+0x250>)
1a01126a:	f001 0350 	and.w	r3, r1, #80	; 0x50
1a01126e:	2b40      	cmp	r3, #64	; 0x40
1a011270:	f000 829b 	beq.w	1a0117aa <inv_generate_accel_gyro_quaternion+0x55a>
1a011274:	05cb      	lsls	r3, r1, #23
1a011276:	f140 810e 	bpl.w	1a011496 <inv_generate_accel_gyro_quaternion+0x246>
1a01127a:	0648      	lsls	r0, r1, #25
1a01127c:	f140 80a3 	bpl.w	1a0113c6 <inv_generate_accel_gyro_quaternion+0x176>
1a011280:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
1a011284:	683a      	ldr	r2, [r7, #0]
1a011286:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
1a01128a:	4c85      	ldr	r4, [pc, #532]	; (1a0114a0 <inv_generate_accel_gyro_quaternion+0x250>)
1a01128c:	1a82      	subs	r2, r0, r2
1a01128e:	4885      	ldr	r0, [pc, #532]	; (1a0114a4 <inv_generate_accel_gyro_quaternion+0x254>)
1a011290:	fb00 f303 	mul.w	r3, r0, r3
1a011294:	429a      	cmp	r2, r3
1a011296:	f300 81b6 	bgt.w	1a011606 <inv_generate_accel_gyro_quaternion+0x3b6>
1a01129a:	2302      	movs	r3, #2
1a01129c:	f411 7100 	ands.w	r1, r1, #512	; 0x200
1a0112a0:	63a3      	str	r3, [r4, #56]	; 0x38
1a0112a2:	f040 81b6 	bne.w	1a011612 <inv_generate_accel_gyro_quaternion+0x3c2>
1a0112a6:	ac03      	add	r4, sp, #12
1a0112a8:	4d7d      	ldr	r5, [pc, #500]	; (1a0114a0 <inv_generate_accel_gyro_quaternion+0x250>)
1a0112aa:	4620      	mov	r0, r4
1a0112ac:	f7f5 ffea 	bl	1a007284 <inv_get_gyro_bias>
1a0112b0:	4620      	mov	r0, r4
1a0112b2:	f105 013c 	add.w	r1, r5, #60	; 0x3c
1a0112b6:	220c      	movs	r2, #12
1a0112b8:	f003 fc62 	bl	1a014b80 <memcmp>
1a0112bc:	b928      	cbnz	r0, 1a0112ca <inv_generate_accel_gyro_quaternion+0x7a>
1a0112be:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
1a0112c2:	6daa      	ldr	r2, [r5, #88]	; 0x58
1a0112c4:	4293      	cmp	r3, r2
1a0112c6:	f000 8341 	beq.w	1a01194c <inv_generate_accel_gyro_quaternion+0x6fc>
1a0112ca:	ad0e      	add	r5, sp, #56	; 0x38
1a0112cc:	4622      	mov	r2, r4
1a0112ce:	462b      	mov	r3, r5
1a0112d0:	6a71      	ldr	r1, [r6, #36]	; 0x24
1a0112d2:	8830      	ldrh	r0, [r6, #0]
1a0112d4:	f7f7 fb54 	bl	1a008980 <inv_convert_to_body_with_scale>
1a0112d8:	980e      	ldr	r0, [sp, #56]	; 0x38
1a0112da:	f002 ffdd 	bl	1a014298 <__aeabi_i2f>
1a0112de:	4680      	mov	r8, r0
1a0112e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
1a0112e2:	f002 ffd9 	bl	1a014298 <__aeabi_i2f>
1a0112e6:	4682      	mov	sl, r0
1a0112e8:	9810      	ldr	r0, [sp, #64]	; 0x40
1a0112ea:	f002 ffd5 	bl	1a014298 <__aeabi_i2f>
1a0112ee:	4641      	mov	r1, r8
1a0112f0:	4681      	mov	r9, r0
1a0112f2:	4640      	mov	r0, r8
1a0112f4:	f003 f824 	bl	1a014340 <__aeabi_fmul>
1a0112f8:	4651      	mov	r1, sl
1a0112fa:	4680      	mov	r8, r0
1a0112fc:	4650      	mov	r0, sl
1a0112fe:	f003 f81f 	bl	1a014340 <__aeabi_fmul>
1a011302:	4601      	mov	r1, r0
1a011304:	4640      	mov	r0, r8
1a011306:	f002 ff13 	bl	1a014130 <__addsf3>
1a01130a:	4649      	mov	r1, r9
1a01130c:	4680      	mov	r8, r0
1a01130e:	4648      	mov	r0, r9
1a011310:	f003 f816 	bl	1a014340 <__aeabi_fmul>
1a011314:	4601      	mov	r1, r0
1a011316:	4640      	mov	r0, r8
1a011318:	f002 ff0a 	bl	1a014130 <__addsf3>
1a01131c:	f004 fad8 	bl	1a0158d0 <sqrtf>
1a011320:	4961      	ldr	r1, [pc, #388]	; (1a0114a8 <inv_generate_accel_gyro_quaternion+0x258>)
1a011322:	f8d6 9128 	ldr.w	r9, [r6, #296]	; 0x128
1a011326:	4680      	mov	r8, r0
1a011328:	f003 f80a 	bl	1a014340 <__aeabi_fmul>
1a01132c:	495f      	ldr	r1, [pc, #380]	; (1a0114ac <inv_generate_accel_gyro_quaternion+0x25c>)
1a01132e:	f003 f8bb 	bl	1a0144a8 <__aeabi_fdiv>
1a011332:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
1a011336:	f003 f803 	bl	1a014340 <__aeabi_fmul>
1a01133a:	4682      	mov	sl, r0
1a01133c:	4648      	mov	r0, r9
1a01133e:	f002 ffab 	bl	1a014298 <__aeabi_i2f>
1a011342:	4601      	mov	r1, r0
1a011344:	4650      	mov	r0, sl
1a011346:	f002 fffb 	bl	1a014340 <__aeabi_fmul>
1a01134a:	4959      	ldr	r1, [pc, #356]	; (1a0114b0 <inv_generate_accel_gyro_quaternion+0x260>)
1a01134c:	f003 f8ac 	bl	1a0144a8 <__aeabi_fdiv>
1a011350:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
1a011354:	f002 fff4 	bl	1a014340 <__aeabi_fmul>
1a011358:	4682      	mov	sl, r0
1a01135a:	f004 f849 	bl	1a0153f0 <cosf>
1a01135e:	4683      	mov	fp, r0
1a011360:	4650      	mov	r0, sl
1a011362:	f004 f8e9 	bl	1a015538 <sinf>
1a011366:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
1a01136a:	4682      	mov	sl, r0
1a01136c:	4640      	mov	r0, r8
1a01136e:	f003 f985 	bl	1a01467c <__aeabi_fcmplt>
1a011372:	2800      	cmp	r0, #0
1a011374:	f000 823c 	beq.w	1a0117f0 <inv_generate_accel_gyro_quaternion+0x5a0>
1a011378:	2300      	movs	r3, #0
1a01137a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a01137e:	64ba      	str	r2, [r7, #72]	; 0x48
1a011380:	64fb      	str	r3, [r7, #76]	; 0x4c
1a011382:	653b      	str	r3, [r7, #80]	; 0x50
1a011384:	657b      	str	r3, [r7, #84]	; 0x54
1a011386:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
1a01138a:	4b4a      	ldr	r3, [pc, #296]	; (1a0114b4 <inv_generate_accel_gyro_quaternion+0x264>)
1a01138c:	f8c7 9058 	str.w	r9, [r7, #88]	; 0x58
1a011390:	e883 0007 	stmia.w	r3, {r0, r1, r2}
1a011394:	f506 7488 	add.w	r4, r6, #272	; 0x110
1a011398:	4620      	mov	r0, r4
1a01139a:	462a      	mov	r2, r5
1a01139c:	4946      	ldr	r1, [pc, #280]	; (1a0114b8 <inv_generate_accel_gyro_quaternion+0x268>)
1a01139e:	f7f6 fd6f 	bl	1a007e80 <inv_q_mult>
1a0113a2:	aa0a      	add	r2, sp, #40	; 0x28
1a0113a4:	4629      	mov	r1, r5
1a0113a6:	4845      	ldr	r0, [pc, #276]	; (1a0114bc <inv_generate_accel_gyro_quaternion+0x26c>)
1a0113a8:	f7f6 fd6a 	bl	1a007e80 <inv_q_mult>
1a0113ac:	4620      	mov	r0, r4
1a0113ae:	4943      	ldr	r1, [pc, #268]	; (1a0114bc <inv_generate_accel_gyro_quaternion+0x26c>)
1a0113b0:	f7f6 fe64 	bl	1a00807c <inv_q_invert>
1a0113b4:	a90a      	add	r1, sp, #40	; 0x28
1a0113b6:	483a      	ldr	r0, [pc, #232]	; (1a0114a0 <inv_generate_accel_gyro_quaternion+0x250>)
1a0113b8:	462a      	mov	r2, r5
1a0113ba:	f7f6 fd61 	bl	1a007e80 <inv_q_mult>
1a0113be:	4628      	mov	r0, r5
1a0113c0:	4937      	ldr	r1, [pc, #220]	; (1a0114a0 <inv_generate_accel_gyro_quaternion+0x250>)
1a0113c2:	f7ff fe21 	bl	1a011008 <inv_normalize_quat>
1a0113c6:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1a0114a0 <inv_generate_accel_gyro_quaternion+0x250>
1a0113ca:	4641      	mov	r1, r8
1a0113cc:	f108 0020 	add.w	r0, r8, #32
1a0113d0:	f108 0210 	add.w	r2, r8, #16
1a0113d4:	f7f6 fd54 	bl	1a007e80 <inv_q_mult>
1a0113d8:	6f73      	ldr	r3, [r6, #116]	; 0x74
1a0113da:	0659      	lsls	r1, r3, #25
1a0113dc:	d557      	bpl.n	1a01148e <inv_generate_accel_gyro_quaternion+0x23e>
1a0113de:	f8d6 2120 	ldr.w	r2, [r6, #288]	; 0x120
1a0113e2:	6b33      	ldr	r3, [r6, #48]	; 0x30
1a0113e4:	4313      	orrs	r3, r2
1a0113e6:	05da      	lsls	r2, r3, #23
1a0113e8:	d56e      	bpl.n	1a0114c8 <inv_generate_accel_gyro_quaternion+0x278>
1a0113ea:	f108 0010 	add.w	r0, r8, #16
1a0113ee:	f106 015c 	add.w	r1, r6, #92	; 0x5c
1a0113f2:	aa03      	add	r2, sp, #12
1a0113f4:	f7f6 fe66 	bl	1a0080c4 <inv_q_rotate>
1a0113f8:	6e32      	ldr	r2, [r6, #96]	; 0x60
1a0113fa:	6df0      	ldr	r0, [r6, #92]	; 0x5c
1a0113fc:	6e71      	ldr	r1, [r6, #100]	; 0x64
1a0113fe:	fb82 2302 	smull	r2, r3, r2, r2
1a011402:	fbc0 2300 	smlal	r2, r3, r0, r0
1a011406:	fbc1 2301 	smlal	r2, r3, r1, r1
1a01140a:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
1a01140e:	2502      	movs	r5, #2
1a011410:	4294      	cmp	r4, r2
1a011412:	eb75 0003 	sbcs.w	r0, r5, r3
1a011416:	f2c0 81d5 	blt.w	1a0117c4 <inv_generate_accel_gyro_quaternion+0x574>
1a01141a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a01141c:	2b04      	cmp	r3, #4
1a01141e:	f000 81e5 	beq.w	1a0117ec <inv_generate_accel_gyro_quaternion+0x59c>
1a011422:	1e9a      	subs	r2, r3, #2
1a011424:	2a01      	cmp	r2, #1
1a011426:	f240 80fa 	bls.w	1a01161e <inv_generate_accel_gyro_quaternion+0x3ce>
1a01142a:	2b01      	cmp	r3, #1
1a01142c:	f000 827a 	beq.w	1a011924 <inv_generate_accel_gyro_quaternion+0x6d4>
1a011430:	2501      	movs	r5, #1
1a011432:	2b03      	cmp	r3, #3
1a011434:	4b22      	ldr	r3, [pc, #136]	; (1a0114c0 <inv_generate_accel_gyro_quaternion+0x270>)
1a011436:	bf18      	it	ne
1a011438:	00ad      	lslne	r5, r5, #2
1a01143a:	fb03 f505 	mul.w	r5, r3, r5
1a01143e:	9804      	ldr	r0, [sp, #16]
1a011440:	2400      	movs	r4, #0
1a011442:	4629      	mov	r1, r5
1a011444:	0280      	lsls	r0, r0, #10
1a011446:	940a      	str	r4, [sp, #40]	; 0x28
1a011448:	f7f6 fcf4 	bl	1a007e34 <inv_q30_mult>
1a01144c:	900b      	str	r0, [sp, #44]	; 0x2c
1a01144e:	9803      	ldr	r0, [sp, #12]
1a011450:	4240      	negs	r0, r0
1a011452:	4629      	mov	r1, r5
1a011454:	0280      	lsls	r0, r0, #10
1a011456:	f7f6 fced 	bl	1a007e34 <inv_q30_mult>
1a01145a:	aa0e      	add	r2, sp, #56	; 0x38
1a01145c:	900c      	str	r0, [sp, #48]	; 0x30
1a01145e:	4919      	ldr	r1, [pc, #100]	; (1a0114c4 <inv_generate_accel_gyro_quaternion+0x274>)
1a011460:	940d      	str	r4, [sp, #52]	; 0x34
1a011462:	a80a      	add	r0, sp, #40	; 0x28
1a011464:	f7f6 fd0c 	bl	1a007e80 <inv_q_mult>
1a011468:	4816      	ldr	r0, [pc, #88]	; (1a0114c4 <inv_generate_accel_gyro_quaternion+0x274>)
1a01146a:	a90e      	add	r1, sp, #56	; 0x38
1a01146c:	4602      	mov	r2, r0
1a01146e:	f7f6 fdd3 	bl	1a008018 <inv_q_add>
1a011472:	4814      	ldr	r0, [pc, #80]	; (1a0114c4 <inv_generate_accel_gyro_quaternion+0x274>)
1a011474:	4601      	mov	r1, r0
1a011476:	f7ff fdc7 	bl	1a011008 <inv_normalize_quat>
1a01147a:	a906      	add	r1, sp, #24
1a01147c:	4808      	ldr	r0, [pc, #32]	; (1a0114a0 <inv_generate_accel_gyro_quaternion+0x250>)
1a01147e:	f7f6 fdfd 	bl	1a00807c <inv_q_invert>
1a011482:	4810      	ldr	r0, [pc, #64]	; (1a0114c4 <inv_generate_accel_gyro_quaternion+0x274>)
1a011484:	a906      	add	r1, sp, #24
1a011486:	f100 0210 	add.w	r2, r0, #16
1a01148a:	f7f6 fcf9 	bl	1a007e80 <inv_q_mult>
1a01148e:	2000      	movs	r0, #0
1a011490:	b02b      	add	sp, #172	; 0xac
1a011492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a011496:	4630      	mov	r0, r6
1a011498:	f7ff fe46 	bl	1a011128 <inv_generate_gyro_quaternion>
1a01149c:	e793      	b.n	1a0113c6 <inv_generate_accel_gyro_quaternion+0x176>
1a01149e:	bf00      	nop
1a0114a0:	100873a0 	.word	0x100873a0
1a0114a4:	001c9871 	.word	0x001c9871
1a0114a8:	40490fdb 	.word	0x40490fdb
1a0114ac:	43340000 	.word	0x43340000
1a0114b0:	49742400 	.word	0x49742400
1a0114b4:	100873dc 	.word	0x100873dc
1a0114b8:	100873e8 	.word	0x100873e8
1a0114bc:	100873fc 	.word	0x100873fc
1a0114c0:	00c49ba6 	.word	0x00c49ba6
1a0114c4:	100873b0 	.word	0x100873b0
1a0114c8:	6df0      	ldr	r0, [r6, #92]	; 0x5c
1a0114ca:	f8d6 906c 	ldr.w	r9, [r6, #108]	; 0x6c
1a0114ce:	f002 fee3 	bl	1a014298 <__aeabi_i2f>
1a0114d2:	4604      	mov	r4, r0
1a0114d4:	6e30      	ldr	r0, [r6, #96]	; 0x60
1a0114d6:	f002 fedf 	bl	1a014298 <__aeabi_i2f>
1a0114da:	4682      	mov	sl, r0
1a0114dc:	6e70      	ldr	r0, [r6, #100]	; 0x64
1a0114de:	f002 fedb 	bl	1a014298 <__aeabi_i2f>
1a0114e2:	4621      	mov	r1, r4
1a0114e4:	4605      	mov	r5, r0
1a0114e6:	4620      	mov	r0, r4
1a0114e8:	f002 ff2a 	bl	1a014340 <__aeabi_fmul>
1a0114ec:	4651      	mov	r1, sl
1a0114ee:	4604      	mov	r4, r0
1a0114f0:	4650      	mov	r0, sl
1a0114f2:	f002 ff25 	bl	1a014340 <__aeabi_fmul>
1a0114f6:	4601      	mov	r1, r0
1a0114f8:	4620      	mov	r0, r4
1a0114fa:	f002 fe19 	bl	1a014130 <__addsf3>
1a0114fe:	4629      	mov	r1, r5
1a011500:	4604      	mov	r4, r0
1a011502:	4628      	mov	r0, r5
1a011504:	f002 ff1c 	bl	1a014340 <__aeabi_fmul>
1a011508:	4601      	mov	r1, r0
1a01150a:	4620      	mov	r0, r4
1a01150c:	f002 fe10 	bl	1a014130 <__addsf3>
1a011510:	f004 f9de 	bl	1a0158d0 <sqrtf>
1a011514:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
1a011518:	4604      	mov	r4, r0
1a01151a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a01151e:	f003 f8cb 	bl	1a0146b8 <__aeabi_fcmpgt>
1a011522:	2800      	cmp	r0, #0
1a011524:	d0a9      	beq.n	1a01147a <inv_generate_accel_gyro_quaternion+0x22a>
1a011526:	f8d8 0010 	ldr.w	r0, [r8, #16]
1a01152a:	f002 feb5 	bl	1a014298 <__aeabi_i2f>
1a01152e:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a011532:	f002 ff05 	bl	1a014340 <__aeabi_fmul>
1a011536:	9026      	str	r0, [sp, #152]	; 0x98
1a011538:	f8d8 0014 	ldr.w	r0, [r8, #20]
1a01153c:	f002 feac 	bl	1a014298 <__aeabi_i2f>
1a011540:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a011544:	f002 fefc 	bl	1a014340 <__aeabi_fmul>
1a011548:	9027      	str	r0, [sp, #156]	; 0x9c
1a01154a:	f8d8 0018 	ldr.w	r0, [r8, #24]
1a01154e:	f002 fea3 	bl	1a014298 <__aeabi_i2f>
1a011552:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a011556:	f002 fef3 	bl	1a014340 <__aeabi_fmul>
1a01155a:	9028      	str	r0, [sp, #160]	; 0xa0
1a01155c:	f8d8 001c 	ldr.w	r0, [r8, #28]
1a011560:	f002 fe9a 	bl	1a014298 <__aeabi_i2f>
1a011564:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
1a011568:	f002 feea 	bl	1a014340 <__aeabi_fmul>
1a01156c:	2300      	movs	r3, #0
1a01156e:	9029      	str	r0, [sp, #164]	; 0xa4
1a011570:	6df0      	ldr	r0, [r6, #92]	; 0x5c
1a011572:	9322      	str	r3, [sp, #136]	; 0x88
1a011574:	f002 fe90 	bl	1a014298 <__aeabi_i2f>
1a011578:	4621      	mov	r1, r4
1a01157a:	f002 ff95 	bl	1a0144a8 <__aeabi_fdiv>
1a01157e:	9023      	str	r0, [sp, #140]	; 0x8c
1a011580:	6e30      	ldr	r0, [r6, #96]	; 0x60
1a011582:	f002 fe89 	bl	1a014298 <__aeabi_i2f>
1a011586:	4621      	mov	r1, r4
1a011588:	f002 ff8e 	bl	1a0144a8 <__aeabi_fdiv>
1a01158c:	9024      	str	r0, [sp, #144]	; 0x90
1a01158e:	6e70      	ldr	r0, [r6, #100]	; 0x64
1a011590:	f002 fe82 	bl	1a014298 <__aeabi_i2f>
1a011594:	4621      	mov	r1, r4
1a011596:	f002 ff87 	bl	1a0144a8 <__aeabi_fdiv>
1a01159a:	aa12      	add	r2, sp, #72	; 0x48
1a01159c:	9025      	str	r0, [sp, #148]	; 0x94
1a01159e:	a922      	add	r1, sp, #136	; 0x88
1a0115a0:	a826      	add	r0, sp, #152	; 0x98
1a0115a2:	f7f6 fdc3 	bl	1a00812c <inv_q_multf>
1a0115a6:	a826      	add	r0, sp, #152	; 0x98
1a0115a8:	a91a      	add	r1, sp, #104	; 0x68
1a0115aa:	f7f7 f85f 	bl	1a00866c <inv_q_invertf>
1a0115ae:	aa16      	add	r2, sp, #88	; 0x58
1a0115b0:	a812      	add	r0, sp, #72	; 0x48
1a0115b2:	a91a      	add	r1, sp, #104	; 0x68
1a0115b4:	f7f6 fdba 	bl	1a00812c <inv_q_multf>
1a0115b8:	9d18      	ldr	r5, [sp, #96]	; 0x60
1a0115ba:	9c17      	ldr	r4, [sp, #92]	; 0x5c
1a0115bc:	4629      	mov	r1, r5
1a0115be:	4628      	mov	r0, r5
1a0115c0:	f002 febe 	bl	1a014340 <__aeabi_fmul>
1a0115c4:	4621      	mov	r1, r4
1a0115c6:	4606      	mov	r6, r0
1a0115c8:	4620      	mov	r0, r4
1a0115ca:	f002 feb9 	bl	1a014340 <__aeabi_fmul>
1a0115ce:	4601      	mov	r1, r0
1a0115d0:	4630      	mov	r0, r6
1a0115d2:	f002 fdad 	bl	1a014130 <__addsf3>
1a0115d6:	49a2      	ldr	r1, [pc, #648]	; (1a011860 <inv_generate_accel_gyro_quaternion+0x610>)
1a0115d8:	4606      	mov	r6, r0
1a0115da:	f003 f84f 	bl	1a01467c <__aeabi_fcmplt>
1a0115de:	2800      	cmp	r0, #0
1a0115e0:	f040 814c 	bne.w	1a01187c <inv_generate_accel_gyro_quaternion+0x62c>
1a0115e4:	4630      	mov	r0, r6
1a0115e6:	499f      	ldr	r1, [pc, #636]	; (1a011864 <inv_generate_accel_gyro_quaternion+0x614>)
1a0115e8:	f003 f848 	bl	1a01467c <__aeabi_fcmplt>
1a0115ec:	2800      	cmp	r0, #0
1a0115ee:	f040 81af 	bne.w	1a011950 <inv_generate_accel_gyro_quaternion+0x700>
1a0115f2:	4630      	mov	r0, r6
1a0115f4:	499c      	ldr	r1, [pc, #624]	; (1a011868 <inv_generate_accel_gyro_quaternion+0x618>)
1a0115f6:	f003 f841 	bl	1a01467c <__aeabi_fcmplt>
1a0115fa:	2800      	cmp	r0, #0
1a0115fc:	f040 8186 	bne.w	1a01190c <inv_generate_accel_gyro_quaternion+0x6bc>
1a011600:	f8df 8274 	ldr.w	r8, [pc, #628]	; 1a011878 <inv_generate_accel_gyro_quaternion+0x628>
1a011604:	e13c      	b.n	1a011880 <inv_generate_accel_gyro_quaternion+0x630>
1a011606:	2303      	movs	r3, #3
1a011608:	f411 7100 	ands.w	r1, r1, #512	; 0x200
1a01160c:	63a3      	str	r3, [r4, #56]	; 0x38
1a01160e:	f43f ae4a 	beq.w	1a0112a6 <inv_generate_accel_gyro_quaternion+0x56>
1a011612:	f506 7088 	add.w	r0, r6, #272	; 0x110
1a011616:	4995      	ldr	r1, [pc, #596]	; (1a01186c <inv_generate_accel_gyro_quaternion+0x61c>)
1a011618:	f7ff fcf6 	bl	1a011008 <inv_normalize_quat>
1a01161c:	e6d3      	b.n	1a0113c6 <inv_generate_accel_gyro_quaternion+0x176>
1a01161e:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
1a011620:	4d93      	ldr	r5, [pc, #588]	; (1a011870 <inv_generate_accel_gyro_quaternion+0x620>)
1a011622:	17d1      	asrs	r1, r2, #31
1a011624:	fb85 0502 	smull	r0, r5, r5, r2
1a011628:	ebc1 25e5 	rsb	r5, r1, r5, asr #11
1a01162c:	2d01      	cmp	r5, #1
1a01162e:	bfb8      	it	lt
1a011630:	2501      	movlt	r5, #1
1a011632:	e6fe      	b.n	1a011432 <inv_generate_accel_gyro_quaternion+0x1e2>
1a011634:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
1a011636:	f002 fe2f 	bl	1a014298 <__aeabi_i2f>
1a01163a:	4604      	mov	r4, r0
1a01163c:	6e30      	ldr	r0, [r6, #96]	; 0x60
1a01163e:	f002 fe2b 	bl	1a014298 <__aeabi_i2f>
1a011642:	4607      	mov	r7, r0
1a011644:	6e70      	ldr	r0, [r6, #100]	; 0x64
1a011646:	f002 fe27 	bl	1a014298 <__aeabi_i2f>
1a01164a:	4621      	mov	r1, r4
1a01164c:	4605      	mov	r5, r0
1a01164e:	4620      	mov	r0, r4
1a011650:	f002 fe76 	bl	1a014340 <__aeabi_fmul>
1a011654:	4639      	mov	r1, r7
1a011656:	4604      	mov	r4, r0
1a011658:	4638      	mov	r0, r7
1a01165a:	f002 fe71 	bl	1a014340 <__aeabi_fmul>
1a01165e:	4601      	mov	r1, r0
1a011660:	4620      	mov	r0, r4
1a011662:	f002 fd65 	bl	1a014130 <__addsf3>
1a011666:	4629      	mov	r1, r5
1a011668:	4604      	mov	r4, r0
1a01166a:	4628      	mov	r0, r5
1a01166c:	f002 fe68 	bl	1a014340 <__aeabi_fmul>
1a011670:	4601      	mov	r1, r0
1a011672:	4620      	mov	r0, r4
1a011674:	f002 fd5c 	bl	1a014130 <__addsf3>
1a011678:	f004 f92a 	bl	1a0158d0 <sqrtf>
1a01167c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
1a011680:	4604      	mov	r4, r0
1a011682:	f003 f805 	bl	1a014690 <__aeabi_fcmple>
1a011686:	2800      	cmp	r0, #0
1a011688:	f040 8143 	bne.w	1a011912 <inv_generate_accel_gyro_quaternion+0x6c2>
1a01168c:	6e70      	ldr	r0, [r6, #100]	; 0x64
1a01168e:	f002 fe03 	bl	1a014298 <__aeabi_i2f>
1a011692:	4621      	mov	r1, r4
1a011694:	f002 ff08 	bl	1a0144a8 <__aeabi_fdiv>
1a011698:	4601      	mov	r1, r0
1a01169a:	4604      	mov	r4, r0
1a01169c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
1a0116a0:	f002 fd44 	bl	1a01412c <__aeabi_fsub>
1a0116a4:	2100      	movs	r1, #0
1a0116a6:	4605      	mov	r5, r0
1a0116a8:	f003 f806 	bl	1a0146b8 <__aeabi_fcmpgt>
1a0116ac:	2800      	cmp	r0, #0
1a0116ae:	f000 8160 	beq.w	1a011972 <inv_generate_accel_gyro_quaternion+0x722>
1a0116b2:	4628      	mov	r0, r5
1a0116b4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
1a0116b8:	f002 fe42 	bl	1a014340 <__aeabi_fmul>
1a0116bc:	f004 f908 	bl	1a0158d0 <sqrtf>
1a0116c0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
1a0116c4:	4605      	mov	r5, r0
1a0116c6:	4620      	mov	r0, r4
1a0116c8:	f002 fd32 	bl	1a014130 <__addsf3>
1a0116cc:	2100      	movs	r1, #0
1a0116ce:	4604      	mov	r4, r0
1a0116d0:	f002 fff2 	bl	1a0146b8 <__aeabi_fcmpgt>
1a0116d4:	2800      	cmp	r0, #0
1a0116d6:	f000 814a 	beq.w	1a01196e <inv_generate_accel_gyro_quaternion+0x71e>
1a0116da:	4620      	mov	r0, r4
1a0116dc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
1a0116e0:	f002 fe2e 	bl	1a014340 <__aeabi_fmul>
1a0116e4:	f004 f8f4 	bl	1a0158d0 <sqrtf>
1a0116e8:	4680      	mov	r8, r0
1a0116ea:	6df0      	ldr	r0, [r6, #92]	; 0x5c
1a0116ec:	f002 fdd4 	bl	1a014298 <__aeabi_i2f>
1a0116f0:	4604      	mov	r4, r0
1a0116f2:	6e30      	ldr	r0, [r6, #96]	; 0x60
1a0116f4:	f002 fdd0 	bl	1a014298 <__aeabi_i2f>
1a0116f8:	4621      	mov	r1, r4
1a0116fa:	4607      	mov	r7, r0
1a0116fc:	4620      	mov	r0, r4
1a0116fe:	f002 fe1f 	bl	1a014340 <__aeabi_fmul>
1a011702:	4639      	mov	r1, r7
1a011704:	4604      	mov	r4, r0
1a011706:	4638      	mov	r0, r7
1a011708:	f002 fe1a 	bl	1a014340 <__aeabi_fmul>
1a01170c:	4601      	mov	r1, r0
1a01170e:	4620      	mov	r0, r4
1a011710:	f002 fd0e 	bl	1a014130 <__addsf3>
1a011714:	f004 f8dc 	bl	1a0158d0 <sqrtf>
1a011718:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
1a01171c:	4604      	mov	r4, r0
1a01171e:	f002 ffb7 	bl	1a014690 <__aeabi_fcmple>
1a011722:	2800      	cmp	r0, #0
1a011724:	f040 80f5 	bne.w	1a011912 <inv_generate_accel_gyro_quaternion+0x6c2>
1a011728:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a01172c:	4640      	mov	r0, r8
1a01172e:	f002 fe07 	bl	1a014340 <__aeabi_fmul>
1a011732:	f002 ffcb 	bl	1a0146cc <__aeabi_f2iz>
1a011736:	4f4d      	ldr	r7, [pc, #308]	; (1a01186c <inv_generate_accel_gyro_quaternion+0x61c>)
1a011738:	6138      	str	r0, [r7, #16]
1a01173a:	6e30      	ldr	r0, [r6, #96]	; 0x60
1a01173c:	f002 fdac 	bl	1a014298 <__aeabi_i2f>
1a011740:	4621      	mov	r1, r4
1a011742:	f002 feb1 	bl	1a0144a8 <__aeabi_fdiv>
1a011746:	4601      	mov	r1, r0
1a011748:	4628      	mov	r0, r5
1a01174a:	f002 fdf9 	bl	1a014340 <__aeabi_fmul>
1a01174e:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a011752:	f002 fdf5 	bl	1a014340 <__aeabi_fmul>
1a011756:	f002 ffb9 	bl	1a0146cc <__aeabi_f2iz>
1a01175a:	6178      	str	r0, [r7, #20]
1a01175c:	6df0      	ldr	r0, [r6, #92]	; 0x5c
1a01175e:	f002 fd9b 	bl	1a014298 <__aeabi_i2f>
1a011762:	4621      	mov	r1, r4
1a011764:	f002 fea0 	bl	1a0144a8 <__aeabi_fdiv>
1a011768:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
1a01176c:	4601      	mov	r1, r0
1a01176e:	4628      	mov	r0, r5
1a011770:	f002 fde6 	bl	1a014340 <__aeabi_fmul>
1a011774:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a011778:	f002 fde2 	bl	1a014340 <__aeabi_fmul>
1a01177c:	f002 ffa6 	bl	1a0146cc <__aeabi_f2iz>
1a011780:	2300      	movs	r3, #0
1a011782:	61b8      	str	r0, [r7, #24]
1a011784:	61fb      	str	r3, [r7, #28]
1a011786:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
1a01178a:	05d9      	lsls	r1, r3, #23
1a01178c:	f100 80d8 	bmi.w	1a011940 <inv_generate_accel_gyro_quaternion+0x6f0>
1a011790:	4836      	ldr	r0, [pc, #216]	; (1a01186c <inv_generate_accel_gyro_quaternion+0x61c>)
1a011792:	a906      	add	r1, sp, #24
1a011794:	f7f6 fc72 	bl	1a00807c <inv_q_invert>
1a011798:	4836      	ldr	r0, [pc, #216]	; (1a011874 <inv_generate_accel_gyro_quaternion+0x624>)
1a01179a:	a906      	add	r1, sp, #24
1a01179c:	f100 0210 	add.w	r2, r0, #16
1a0117a0:	f7f6 fb6e 	bl	1a007e80 <inv_q_mult>
1a0117a4:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
1a0117a8:	e564      	b.n	1a011274 <inv_generate_accel_gyro_quaternion+0x24>
1a0117aa:	f500 7088 	add.w	r0, r0, #272	; 0x110
1a0117ae:	f107 015c 	add.w	r1, r7, #92	; 0x5c
1a0117b2:	f7f6 fc63 	bl	1a00807c <inv_q_invert>
1a0117b6:	6f73      	ldr	r3, [r6, #116]	; 0x74
1a0117b8:	05da      	lsls	r2, r3, #23
1a0117ba:	f100 80cc 	bmi.w	1a011956 <inv_generate_accel_gyro_quaternion+0x706>
1a0117be:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
1a0117c2:	e557      	b.n	1a011274 <inv_generate_accel_gyro_quaternion+0x24>
1a0117c4:	4668      	mov	r0, sp
1a0117c6:	f7f7 fc23 	bl	1a009010 <inv_get_linear_accel>
1a0117ca:	e89d 0005 	ldmia.w	sp, {r0, r2}
1a0117ce:	9902      	ldr	r1, [sp, #8]
1a0117d0:	fb82 2302 	smull	r2, r3, r2, r2
1a0117d4:	fbc0 2300 	smlal	r2, r3, r0, r0
1a0117d8:	fbc1 2301 	smlal	r2, r3, r1, r1
1a0117dc:	4294      	cmp	r4, r2
1a0117de:	eb75 0103 	sbcs.w	r1, r5, r3
1a0117e2:	f6bf ae1a 	bge.w	1a01141a <inv_generate_accel_gyro_quaternion+0x1ca>
1a0117e6:	2304      	movs	r3, #4
1a0117e8:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
1a0117ec:	2500      	movs	r5, #0
1a0117ee:	e626      	b.n	1a01143e <inv_generate_accel_gyro_quaternion+0x1ee>
1a0117f0:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a0117f4:	4658      	mov	r0, fp
1a0117f6:	f002 fda3 	bl	1a014340 <__aeabi_fmul>
1a0117fa:	f002 ff67 	bl	1a0146cc <__aeabi_f2iz>
1a0117fe:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
1a011802:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a011806:	64b8      	str	r0, [r7, #72]	; 0x48
1a011808:	4650      	mov	r0, sl
1a01180a:	f002 fd99 	bl	1a014340 <__aeabi_fmul>
1a01180e:	4682      	mov	sl, r0
1a011810:	980e      	ldr	r0, [sp, #56]	; 0x38
1a011812:	f002 fd41 	bl	1a014298 <__aeabi_i2f>
1a011816:	4601      	mov	r1, r0
1a011818:	4650      	mov	r0, sl
1a01181a:	f002 fd91 	bl	1a014340 <__aeabi_fmul>
1a01181e:	4641      	mov	r1, r8
1a011820:	f002 fe42 	bl	1a0144a8 <__aeabi_fdiv>
1a011824:	f002 ff52 	bl	1a0146cc <__aeabi_f2iz>
1a011828:	64f8      	str	r0, [r7, #76]	; 0x4c
1a01182a:	980f      	ldr	r0, [sp, #60]	; 0x3c
1a01182c:	f002 fd34 	bl	1a014298 <__aeabi_i2f>
1a011830:	4601      	mov	r1, r0
1a011832:	4650      	mov	r0, sl
1a011834:	f002 fd84 	bl	1a014340 <__aeabi_fmul>
1a011838:	4641      	mov	r1, r8
1a01183a:	f002 fe35 	bl	1a0144a8 <__aeabi_fdiv>
1a01183e:	f002 ff45 	bl	1a0146cc <__aeabi_f2iz>
1a011842:	6538      	str	r0, [r7, #80]	; 0x50
1a011844:	9810      	ldr	r0, [sp, #64]	; 0x40
1a011846:	f002 fd27 	bl	1a014298 <__aeabi_i2f>
1a01184a:	4601      	mov	r1, r0
1a01184c:	4650      	mov	r0, sl
1a01184e:	f002 fd77 	bl	1a014340 <__aeabi_fmul>
1a011852:	4641      	mov	r1, r8
1a011854:	f002 fe28 	bl	1a0144a8 <__aeabi_fdiv>
1a011858:	f002 ff38 	bl	1a0146cc <__aeabi_f2iz>
1a01185c:	6578      	str	r0, [r7, #84]	; 0x54
1a01185e:	e592      	b.n	1a011386 <inv_generate_accel_gyro_quaternion+0x136>
1a011860:	3951b717 	.word	0x3951b717
1a011864:	3c23d70a 	.word	0x3c23d70a
1a011868:	3e4ccccd 	.word	0x3e4ccccd
1a01186c:	100873a0 	.word	0x100873a0
1a011870:	68db8bad 	.word	0x68db8bad
1a011874:	100873b0 	.word	0x100873b0
1a011878:	3ecccccd 	.word	0x3ecccccd
1a01187c:	f8df 8114 	ldr.w	r8, [pc, #276]	; 1a011994 <inv_generate_accel_gyro_quaternion+0x744>
1a011880:	4648      	mov	r0, r9
1a011882:	f002 fd09 	bl	1a014298 <__aeabi_i2f>
1a011886:	493d      	ldr	r1, [pc, #244]	; (1a01197c <inv_generate_accel_gyro_quaternion+0x72c>)
1a011888:	f002 fe0e 	bl	1a0144a8 <__aeabi_fdiv>
1a01188c:	4641      	mov	r1, r8
1a01188e:	f002 fd57 	bl	1a014340 <__aeabi_fmul>
1a011892:	2600      	movs	r6, #0
1a011894:	4601      	mov	r1, r0
1a011896:	4680      	mov	r8, r0
1a011898:	4628      	mov	r0, r5
1a01189a:	961e      	str	r6, [sp, #120]	; 0x78
1a01189c:	f002 fd50 	bl	1a014340 <__aeabi_fmul>
1a0118a0:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
1a0118a4:	901f      	str	r0, [sp, #124]	; 0x7c
1a0118a6:	4640      	mov	r0, r8
1a0118a8:	f002 fd4a 	bl	1a014340 <__aeabi_fmul>
1a0118ac:	a926      	add	r1, sp, #152	; 0x98
1a0118ae:	9020      	str	r0, [sp, #128]	; 0x80
1a0118b0:	aa16      	add	r2, sp, #88	; 0x58
1a0118b2:	a81e      	add	r0, sp, #120	; 0x78
1a0118b4:	9621      	str	r6, [sp, #132]	; 0x84
1a0118b6:	f7f6 fc39 	bl	1a00812c <inv_q_multf>
1a0118ba:	a816      	add	r0, sp, #88	; 0x58
1a0118bc:	4602      	mov	r2, r0
1a0118be:	a926      	add	r1, sp, #152	; 0x98
1a0118c0:	f7f6 fd00 	bl	1a0082c4 <inv_q_addf>
1a0118c4:	a816      	add	r0, sp, #88	; 0x58
1a0118c6:	f7f6 fe4f 	bl	1a008568 <inv_q_norm4>
1a0118ca:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a0118ce:	9816      	ldr	r0, [sp, #88]	; 0x58
1a0118d0:	f002 fd36 	bl	1a014340 <__aeabi_fmul>
1a0118d4:	f002 fefa 	bl	1a0146cc <__aeabi_f2iz>
1a0118d8:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a0118dc:	6138      	str	r0, [r7, #16]
1a0118de:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a0118e0:	f002 fd2e 	bl	1a014340 <__aeabi_fmul>
1a0118e4:	f002 fef2 	bl	1a0146cc <__aeabi_f2iz>
1a0118e8:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a0118ec:	6178      	str	r0, [r7, #20]
1a0118ee:	9818      	ldr	r0, [sp, #96]	; 0x60
1a0118f0:	f002 fd26 	bl	1a014340 <__aeabi_fmul>
1a0118f4:	f002 feea 	bl	1a0146cc <__aeabi_f2iz>
1a0118f8:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
1a0118fc:	61b8      	str	r0, [r7, #24]
1a0118fe:	9819      	ldr	r0, [sp, #100]	; 0x64
1a011900:	f002 fd1e 	bl	1a014340 <__aeabi_fmul>
1a011904:	f002 fee2 	bl	1a0146cc <__aeabi_f2iz>
1a011908:	61f8      	str	r0, [r7, #28]
1a01190a:	e5b6      	b.n	1a01147a <inv_generate_accel_gyro_quaternion+0x22a>
1a01190c:	f04f 587a 	mov.w	r8, #1048576000	; 0x3e800000
1a011910:	e7b6      	b.n	1a011880 <inv_generate_accel_gyro_quaternion+0x630>
1a011912:	4f1b      	ldr	r7, [pc, #108]	; (1a011980 <inv_generate_accel_gyro_quaternion+0x730>)
1a011914:	2300      	movs	r3, #0
1a011916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a01191a:	613a      	str	r2, [r7, #16]
1a01191c:	617b      	str	r3, [r7, #20]
1a01191e:	61bb      	str	r3, [r7, #24]
1a011920:	61fb      	str	r3, [r7, #28]
1a011922:	e730      	b.n	1a011786 <inv_generate_accel_gyro_quaternion+0x536>
1a011924:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
1a011926:	4917      	ldr	r1, [pc, #92]	; (1a011984 <inv_generate_accel_gyro_quaternion+0x734>)
1a011928:	17da      	asrs	r2, r3, #31
1a01192a:	fb81 0303 	smull	r0, r3, r1, r3
1a01192e:	ebc2 23e3 	rsb	r3, r2, r3, asr #11
1a011932:	2b00      	cmp	r3, #0
1a011934:	dd1f      	ble.n	1a011976 <inv_generate_accel_gyro_quaternion+0x726>
1a011936:	4d14      	ldr	r5, [pc, #80]	; (1a011988 <inv_generate_accel_gyro_quaternion+0x738>)
1a011938:	00db      	lsls	r3, r3, #3
1a01193a:	fb05 f503 	mul.w	r5, r5, r3
1a01193e:	e57e      	b.n	1a01143e <inv_generate_accel_gyro_quaternion+0x1ee>
1a011940:	f506 7088 	add.w	r0, r6, #272	; 0x110
1a011944:	4911      	ldr	r1, [pc, #68]	; (1a01198c <inv_generate_accel_gyro_quaternion+0x73c>)
1a011946:	f7f6 fb99 	bl	1a00807c <inv_q_invert>
1a01194a:	e721      	b.n	1a011790 <inv_generate_accel_gyro_quaternion+0x540>
1a01194c:	ad0e      	add	r5, sp, #56	; 0x38
1a01194e:	e521      	b.n	1a011394 <inv_generate_accel_gyro_quaternion+0x144>
1a011950:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1a011998 <inv_generate_accel_gyro_quaternion+0x748>
1a011954:	e794      	b.n	1a011880 <inv_generate_accel_gyro_quaternion+0x630>
1a011956:	4638      	mov	r0, r7
1a011958:	a906      	add	r1, sp, #24
1a01195a:	f7f6 fb8f 	bl	1a00807c <inv_q_invert>
1a01195e:	f107 0010 	add.w	r0, r7, #16
1a011962:	a906      	add	r1, sp, #24
1a011964:	f107 0220 	add.w	r2, r7, #32
1a011968:	f7f6 fa8a 	bl	1a007e80 <inv_q_mult>
1a01196c:	e727      	b.n	1a0117be <inv_generate_accel_gyro_quaternion+0x56e>
1a01196e:	2000      	movs	r0, #0
1a011970:	e6b8      	b.n	1a0116e4 <inv_generate_accel_gyro_quaternion+0x494>
1a011972:	2000      	movs	r0, #0
1a011974:	e6a2      	b.n	1a0116bc <inv_generate_accel_gyro_quaternion+0x46c>
1a011976:	4d06      	ldr	r5, [pc, #24]	; (1a011990 <inv_generate_accel_gyro_quaternion+0x740>)
1a011978:	e561      	b.n	1a01143e <inv_generate_accel_gyro_quaternion+0x1ee>
1a01197a:	bf00      	nop
1a01197c:	47cd1400 	.word	0x47cd1400
1a011980:	100873a0 	.word	0x100873a0
1a011984:	68db8bad 	.word	0x68db8bad
1a011988:	00c49ba6 	.word	0x00c49ba6
1a01198c:	100873fc 	.word	0x100873fc
1a011990:	0624dd30 	.word	0x0624dd30
1a011994:	3bc49ba6 	.word	0x3bc49ba6
1a011998:	3d75c28f 	.word	0x3d75c28f

1a01199c <inv_generate_quaternion>:
1a01199c:	b538      	push	{r3, r4, r5, lr}
1a01199e:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a0119a0:	05db      	lsls	r3, r3, #23
1a0119a2:	4604      	mov	r4, r0
1a0119a4:	d50f      	bpl.n	1a0119c6 <inv_generate_quaternion+0x2a>
1a0119a6:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
1a0119aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
1a0119ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
1a0119b2:	d015      	beq.n	1a0119e0 <inv_generate_quaternion+0x44>
1a0119b4:	4620      	mov	r0, r4
1a0119b6:	f7ff fc4b 	bl	1a011250 <inv_generate_accel_gyro_quaternion>
1a0119ba:	480d      	ldr	r0, [pc, #52]	; (1a0119f0 <inv_generate_quaternion+0x54>)
1a0119bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a0119be:	f7f7 f8e7 	bl	1a008b90 <inv_store_gaming_quaternion>
1a0119c2:	2000      	movs	r0, #0
1a0119c4:	bd38      	pop	{r3, r4, r5, pc}
1a0119c6:	6f43      	ldr	r3, [r0, #116]	; 0x74
1a0119c8:	f413 7f80 	tst.w	r3, #256	; 0x100
1a0119cc:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
1a0119d0:	d1eb      	bne.n	1a0119aa <inv_generate_quaternion+0xe>
1a0119d2:	05d8      	lsls	r0, r3, #23
1a0119d4:	d5f5      	bpl.n	1a0119c2 <inv_generate_quaternion+0x26>
1a0119d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
1a0119da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
1a0119de:	d1e9      	bne.n	1a0119b4 <inv_generate_quaternion+0x18>
1a0119e0:	f504 7388 	add.w	r3, r4, #272	; 0x110
1a0119e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a0119e6:	4d02      	ldr	r5, [pc, #8]	; (1a0119f0 <inv_generate_quaternion+0x54>)
1a0119e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
1a0119ec:	e7e5      	b.n	1a0119ba <inv_generate_quaternion+0x1e>
1a0119ee:	bf00      	nop
1a0119f0:	100873b0 	.word	0x100873b0

1a0119f4 <inv_init_quaternion>:
1a0119f4:	b510      	push	{r4, lr}
1a0119f6:	4c07      	ldr	r4, [pc, #28]	; (1a011a14 <inv_init_quaternion+0x20>)
1a0119f8:	2100      	movs	r1, #0
1a0119fa:	4620      	mov	r0, r4
1a0119fc:	226c      	movs	r2, #108	; 0x6c
1a0119fe:	f003 f9ef 	bl	1a014de0 <memset>
1a011a02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a011a06:	6123      	str	r3, [r4, #16]
1a011a08:	6023      	str	r3, [r4, #0]
1a011a0a:	6223      	str	r3, [r4, #32]
1a011a0c:	63e3      	str	r3, [r4, #60]	; 0x3c
1a011a0e:	65e3      	str	r3, [r4, #92]	; 0x5c
1a011a10:	2000      	movs	r0, #0
1a011a12:	bd10      	pop	{r4, pc}
1a011a14:	100873a0 	.word	0x100873a0

1a011a18 <inv_enable_quaternion>:
1a011a18:	b508      	push	{r3, lr}
1a011a1a:	f7ff ffeb 	bl	1a0119f4 <inv_init_quaternion>
1a011a1e:	b100      	cbz	r0, 1a011a22 <inv_enable_quaternion+0xa>
1a011a20:	bd08      	pop	{r3, pc}
1a011a22:	4802      	ldr	r0, [pc, #8]	; (1a011a2c <inv_enable_quaternion+0x14>)
1a011a24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a011a28:	f7f7 bb66 	b.w	1a0090f8 <inv_register_mpl_start_notification>
1a011a2c:	1a0110f5 	.word	0x1a0110f5

1a011a30 <getFullConvClk>:
 * Private functions
 ****************************************************************************/

/* Get the number of clock for a full conversion */
STATIC INLINE uint8_t getFullConvClk(void)
{
1a011a30:	b480      	push	{r7}
1a011a32:	af00      	add	r7, sp, #0
	return 11;
1a011a34:	230b      	movs	r3, #11
}
1a011a36:	4618      	mov	r0, r3
1a011a38:	46bd      	mov	sp, r7
1a011a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a011a3e:	4770      	bx	lr

1a011a40 <Chip_ADC_GetClockIndex>:

/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
1a011a40:	b480      	push	{r7}
1a011a42:	b085      	sub	sp, #20
1a011a44:	af00      	add	r7, sp, #0
1a011a46:	6078      	str	r0, [r7, #4]
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a011a48:	687b      	ldr	r3, [r7, #4]
1a011a4a:	4a07      	ldr	r2, [pc, #28]	; (1a011a68 <Chip_ADC_GetClockIndex+0x28>)
1a011a4c:	4293      	cmp	r3, r2
1a011a4e:	d102      	bne.n	1a011a56 <Chip_ADC_GetClockIndex+0x16>
		clkADC = CLK_APB3_ADC1;
1a011a50:	2304      	movs	r3, #4
1a011a52:	81fb      	strh	r3, [r7, #14]
1a011a54:	e001      	b.n	1a011a5a <Chip_ADC_GetClockIndex+0x1a>
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a011a56:	2303      	movs	r3, #3
1a011a58:	81fb      	strh	r3, [r7, #14]
	}

	return clkADC;
1a011a5a:	89fb      	ldrh	r3, [r7, #14]
}
1a011a5c:	4618      	mov	r0, r3
1a011a5e:	3714      	adds	r7, #20
1a011a60:	46bd      	mov	sp, r7
1a011a62:	f85d 7b04 	ldr.w	r7, [sp], #4
1a011a66:	4770      	bx	lr
1a011a68:	400e4000 	.word	0x400e4000

1a011a6c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a011a6c:	b580      	push	{r7, lr}
1a011a6e:	b088      	sub	sp, #32
1a011a70:	af00      	add	r7, sp, #0
1a011a72:	60f8      	str	r0, [r7, #12]
1a011a74:	607a      	str	r2, [r7, #4]
1a011a76:	461a      	mov	r2, r3
1a011a78:	460b      	mov	r3, r1
1a011a7a:	72fb      	strb	r3, [r7, #11]
1a011a7c:	4613      	mov	r3, r2
1a011a7e:	72bb      	strb	r3, [r7, #10]
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a011a80:	68f8      	ldr	r0, [r7, #12]
1a011a82:	f7ff ffdd 	bl	1a011a40 <Chip_ADC_GetClockIndex>
1a011a86:	4603      	mov	r3, r0
1a011a88:	4618      	mov	r0, r3
1a011a8a:	f000 fdad 	bl	1a0125e8 <Chip_Clock_GetRate>
1a011a8e:	61b8      	str	r0, [r7, #24]
	if (burstMode) {
1a011a90:	7afb      	ldrb	r3, [r7, #11]
1a011a92:	2b00      	cmp	r3, #0
1a011a94:	d005      	beq.n	1a011aa2 <getClkDiv+0x36>
		fullAdcRate = adcRate * clks;
1a011a96:	7abb      	ldrb	r3, [r7, #10]
1a011a98:	687a      	ldr	r2, [r7, #4]
1a011a9a:	fb02 f303 	mul.w	r3, r2, r3
1a011a9e:	61fb      	str	r3, [r7, #28]
1a011aa0:	e007      	b.n	1a011ab2 <getClkDiv+0x46>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a011aa2:	f7ff ffc5 	bl	1a011a30 <getFullConvClk>
1a011aa6:	4603      	mov	r3, r0
1a011aa8:	461a      	mov	r2, r3
1a011aaa:	687b      	ldr	r3, [r7, #4]
1a011aac:	fb03 f302 	mul.w	r3, r3, r2
1a011ab0:	61fb      	str	r3, [r7, #28]
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a011ab2:	69bb      	ldr	r3, [r7, #24]
1a011ab4:	005a      	lsls	r2, r3, #1
1a011ab6:	69fb      	ldr	r3, [r7, #28]
1a011ab8:	441a      	add	r2, r3
1a011aba:	69fb      	ldr	r3, [r7, #28]
1a011abc:	005b      	lsls	r3, r3, #1
1a011abe:	fbb2 f3f3 	udiv	r3, r2, r3
1a011ac2:	b2db      	uxtb	r3, r3
1a011ac4:	3b01      	subs	r3, #1
1a011ac6:	75fb      	strb	r3, [r7, #23]
	return div;
1a011ac8:	7dfb      	ldrb	r3, [r7, #23]
}
1a011aca:	4618      	mov	r0, r3
1a011acc:	3720      	adds	r7, #32
1a011ace:	46bd      	mov	sp, r7
1a011ad0:	bd80      	pop	{r7, pc}
1a011ad2:	bf00      	nop

1a011ad4 <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
1a011ad4:	b480      	push	{r7}
1a011ad6:	b085      	sub	sp, #20
1a011ad8:	af00      	add	r7, sp, #0
1a011ada:	6078      	str	r0, [r7, #4]
1a011adc:	460b      	mov	r3, r1
1a011ade:	70fb      	strb	r3, [r7, #3]
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a011ae0:	687b      	ldr	r3, [r7, #4]
1a011ae2:	681b      	ldr	r3, [r3, #0]
1a011ae4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a011ae8:	60fb      	str	r3, [r7, #12]
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a011aea:	78fb      	ldrb	r3, [r7, #3]
1a011aec:	061a      	lsls	r2, r3, #24
1a011aee:	68fb      	ldr	r3, [r7, #12]
1a011af0:	431a      	orrs	r2, r3
1a011af2:	687b      	ldr	r3, [r7, #4]
1a011af4:	601a      	str	r2, [r3, #0]
}
1a011af6:	bf00      	nop
1a011af8:	3714      	adds	r7, #20
1a011afa:	46bd      	mov	sp, r7
1a011afc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a011b00:	4770      	bx	lr
1a011b02:	bf00      	nop

1a011b04 <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a011b04:	b480      	push	{r7}
1a011b06:	b087      	sub	sp, #28
1a011b08:	af00      	add	r7, sp, #0
1a011b0a:	60f8      	str	r0, [r7, #12]
1a011b0c:	460b      	mov	r3, r1
1a011b0e:	607a      	str	r2, [r7, #4]
1a011b10:	72fb      	strb	r3, [r7, #11]
	uint32_t temp;
	temp = pADC->DR[channel];
1a011b12:	7afa      	ldrb	r2, [r7, #11]
1a011b14:	68fb      	ldr	r3, [r7, #12]
1a011b16:	3204      	adds	r2, #4
1a011b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a011b1c:	617b      	str	r3, [r7, #20]
	if (!ADC_DR_DONE(temp)) {
1a011b1e:	697b      	ldr	r3, [r7, #20]
1a011b20:	2b00      	cmp	r3, #0
1a011b22:	db01      	blt.n	1a011b28 <readAdcVal+0x24>
		return ERROR;
1a011b24:	2300      	movs	r3, #0
1a011b26:	e008      	b.n	1a011b3a <readAdcVal+0x36>
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a011b28:	697b      	ldr	r3, [r7, #20]
1a011b2a:	099b      	lsrs	r3, r3, #6
1a011b2c:	b29b      	uxth	r3, r3
1a011b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
1a011b32:	b29a      	uxth	r2, r3
1a011b34:	687b      	ldr	r3, [r7, #4]
1a011b36:	801a      	strh	r2, [r3, #0]
	return SUCCESS;
1a011b38:	2301      	movs	r3, #1
}
1a011b3a:	4618      	mov	r0, r3
1a011b3c:	371c      	adds	r7, #28
1a011b3e:	46bd      	mov	sp, r7
1a011b40:	f85d 7b04 	ldr.w	r7, [sp], #4
1a011b44:	4770      	bx	lr
1a011b46:	bf00      	nop

1a011b48 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a011b48:	b580      	push	{r7, lr}
1a011b4a:	b086      	sub	sp, #24
1a011b4c:	af00      	add	r7, sp, #0
1a011b4e:	6078      	str	r0, [r7, #4]
1a011b50:	6039      	str	r1, [r7, #0]
	uint8_t div;
	uint32_t cr = 0;
1a011b52:	2300      	movs	r3, #0
1a011b54:	617b      	str	r3, [r7, #20]
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a011b56:	6878      	ldr	r0, [r7, #4]
1a011b58:	f7ff ff72 	bl	1a011a40 <Chip_ADC_GetClockIndex>
1a011b5c:	4603      	mov	r3, r0
1a011b5e:	4618      	mov	r0, r3
1a011b60:	2301      	movs	r3, #1
1a011b62:	2201      	movs	r2, #1
1a011b64:	2101      	movs	r1, #1
1a011b66:	f000 fc8b 	bl	1a012480 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a011b6a:	687b      	ldr	r3, [r7, #4]
1a011b6c:	2200      	movs	r2, #0
1a011b6e:	60da      	str	r2, [r3, #12]

	cr |= ADC_CR_PDN;
1a011b70:	697b      	ldr	r3, [r7, #20]
1a011b72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a011b76:	617b      	str	r3, [r7, #20]
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a011b78:	683b      	ldr	r3, [r7, #0]
1a011b7a:	4a14      	ldr	r2, [pc, #80]	; (1a011bcc <Chip_ADC_Init+0x84>)
1a011b7c:	601a      	str	r2, [r3, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a011b7e:	683b      	ldr	r3, [r7, #0]
1a011b80:	2200      	movs	r2, #0
1a011b82:	711a      	strb	r2, [r3, #4]
	clk = 11;
1a011b84:	230b      	movs	r3, #11
1a011b86:	613b      	str	r3, [r7, #16]
	ADCSetup->burstMode = false;
1a011b88:	683b      	ldr	r3, [r7, #0]
1a011b8a:	2200      	movs	r2, #0
1a011b8c:	715a      	strb	r2, [r3, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a011b8e:	683b      	ldr	r3, [r7, #0]
1a011b90:	681a      	ldr	r2, [r3, #0]
1a011b92:	693b      	ldr	r3, [r7, #16]
1a011b94:	b2db      	uxtb	r3, r3
1a011b96:	2100      	movs	r1, #0
1a011b98:	6878      	ldr	r0, [r7, #4]
1a011b9a:	f7ff ff67 	bl	1a011a6c <getClkDiv>
1a011b9e:	4603      	mov	r3, r0
1a011ba0:	73fb      	strb	r3, [r7, #15]
	cr |= ADC_CR_CLKDIV(div);
1a011ba2:	7bfb      	ldrb	r3, [r7, #15]
1a011ba4:	021b      	lsls	r3, r3, #8
1a011ba6:	461a      	mov	r2, r3
1a011ba8:	697b      	ldr	r3, [r7, #20]
1a011baa:	4313      	orrs	r3, r2
1a011bac:	617b      	str	r3, [r7, #20]
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a011bae:	683b      	ldr	r3, [r7, #0]
1a011bb0:	791b      	ldrb	r3, [r3, #4]
1a011bb2:	045b      	lsls	r3, r3, #17
1a011bb4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a011bb8:	697a      	ldr	r2, [r7, #20]
1a011bba:	4313      	orrs	r3, r2
1a011bbc:	617b      	str	r3, [r7, #20]
	pADC->CR = cr;
1a011bbe:	687b      	ldr	r3, [r7, #4]
1a011bc0:	697a      	ldr	r2, [r7, #20]
1a011bc2:	601a      	str	r2, [r3, #0]
}
1a011bc4:	bf00      	nop
1a011bc6:	3718      	adds	r7, #24
1a011bc8:	46bd      	mov	sp, r7
1a011bca:	bd80      	pop	{r7, pc}
1a011bcc:	00061a80 	.word	0x00061a80

1a011bd0 <Chip_ADC_ReadValue>:
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
}

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a011bd0:	b580      	push	{r7, lr}
1a011bd2:	b084      	sub	sp, #16
1a011bd4:	af00      	add	r7, sp, #0
1a011bd6:	60f8      	str	r0, [r7, #12]
1a011bd8:	460b      	mov	r3, r1
1a011bda:	607a      	str	r2, [r7, #4]
1a011bdc:	72fb      	strb	r3, [r7, #11]
	return readAdcVal(pADC, channel, data);
1a011bde:	7afb      	ldrb	r3, [r7, #11]
1a011be0:	687a      	ldr	r2, [r7, #4]
1a011be2:	4619      	mov	r1, r3
1a011be4:	68f8      	ldr	r0, [r7, #12]
1a011be6:	f7ff ff8d 	bl	1a011b04 <readAdcVal>
1a011bea:	4603      	mov	r3, r0
}
1a011bec:	4618      	mov	r0, r3
1a011bee:	3710      	adds	r7, #16
1a011bf0:	46bd      	mov	sp, r7
1a011bf2:	bd80      	pop	{r7, pc}

1a011bf4 <Chip_ADC_SetStartMode>:
	}
}

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a011bf4:	b580      	push	{r7, lr}
1a011bf6:	b082      	sub	sp, #8
1a011bf8:	af00      	add	r7, sp, #0
1a011bfa:	6078      	str	r0, [r7, #4]
1a011bfc:	460b      	mov	r3, r1
1a011bfe:	70fb      	strb	r3, [r7, #3]
1a011c00:	4613      	mov	r3, r2
1a011c02:	70bb      	strb	r3, [r7, #2]
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a011c04:	78fb      	ldrb	r3, [r7, #3]
1a011c06:	2b01      	cmp	r3, #1
1a011c08:	d012      	beq.n	1a011c30 <Chip_ADC_SetStartMode+0x3c>
1a011c0a:	78fb      	ldrb	r3, [r7, #3]
1a011c0c:	2b00      	cmp	r3, #0
1a011c0e:	d00f      	beq.n	1a011c30 <Chip_ADC_SetStartMode+0x3c>
		if (EdgeOption) {
1a011c10:	78bb      	ldrb	r3, [r7, #2]
1a011c12:	2b00      	cmp	r3, #0
1a011c14:	d006      	beq.n	1a011c24 <Chip_ADC_SetStartMode+0x30>
			pADC->CR |= ADC_CR_EDGE;
1a011c16:	687b      	ldr	r3, [r7, #4]
1a011c18:	681b      	ldr	r3, [r3, #0]
1a011c1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
1a011c1e:	687b      	ldr	r3, [r7, #4]
1a011c20:	601a      	str	r2, [r3, #0]
1a011c22:	e005      	b.n	1a011c30 <Chip_ADC_SetStartMode+0x3c>
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
1a011c24:	687b      	ldr	r3, [r7, #4]
1a011c26:	681b      	ldr	r3, [r3, #0]
1a011c28:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
1a011c2c:	687b      	ldr	r3, [r7, #4]
1a011c2e:	601a      	str	r2, [r3, #0]
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a011c30:	78fb      	ldrb	r3, [r7, #3]
1a011c32:	4619      	mov	r1, r3
1a011c34:	6878      	ldr	r0, [r7, #4]
1a011c36:	f7ff ff4d 	bl	1a011ad4 <setStartMode>
}
1a011c3a:	bf00      	nop
1a011c3c:	3708      	adds	r7, #8
1a011c3e:	46bd      	mov	sp, r7
1a011c40:	bd80      	pop	{r7, pc}
1a011c42:	bf00      	nop

1a011c44 <Chip_ADC_EnableChannel>:
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
}

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
1a011c44:	b480      	push	{r7}
1a011c46:	b083      	sub	sp, #12
1a011c48:	af00      	add	r7, sp, #0
1a011c4a:	6078      	str	r0, [r7, #4]
1a011c4c:	460b      	mov	r3, r1
1a011c4e:	70fb      	strb	r3, [r7, #3]
1a011c50:	4613      	mov	r3, r2
1a011c52:	70bb      	strb	r3, [r7, #2]
	if (NewState == ENABLE) {
1a011c54:	78bb      	ldrb	r3, [r7, #2]
1a011c56:	2b01      	cmp	r3, #1
1a011c58:	d109      	bne.n	1a011c6e <Chip_ADC_EnableChannel+0x2a>
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a011c5a:	687b      	ldr	r3, [r7, #4]
1a011c5c:	681a      	ldr	r2, [r3, #0]
1a011c5e:	78fb      	ldrb	r3, [r7, #3]
1a011c60:	2101      	movs	r1, #1
1a011c62:	fa01 f303 	lsl.w	r3, r1, r3
1a011c66:	431a      	orrs	r2, r3
1a011c68:	687b      	ldr	r3, [r7, #4]
1a011c6a:	601a      	str	r2, [r3, #0]
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
	}
}
1a011c6c:	e00f      	b.n	1a011c8e <Chip_ADC_EnableChannel+0x4a>
{
	if (NewState == ENABLE) {
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a011c6e:	687b      	ldr	r3, [r7, #4]
1a011c70:	681b      	ldr	r3, [r3, #0]
1a011c72:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
1a011c76:	687b      	ldr	r3, [r7, #4]
1a011c78:	601a      	str	r2, [r3, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a011c7a:	687b      	ldr	r3, [r7, #4]
1a011c7c:	681a      	ldr	r2, [r3, #0]
1a011c7e:	78fb      	ldrb	r3, [r7, #3]
1a011c80:	2101      	movs	r1, #1
1a011c82:	fa01 f303 	lsl.w	r3, r1, r3
1a011c86:	43db      	mvns	r3, r3
1a011c88:	401a      	ands	r2, r3
1a011c8a:	687b      	ldr	r3, [r7, #4]
1a011c8c:	601a      	str	r2, [r3, #0]
	}
}
1a011c8e:	bf00      	nop
1a011c90:	370c      	adds	r7, #12
1a011c92:	46bd      	mov	sp, r7
1a011c94:	f85d 7b04 	ldr.w	r7, [sp], #4
1a011c98:	4770      	bx	lr
1a011c9a:	bf00      	nop

1a011c9c <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a011c9c:	b580      	push	{r7, lr}
1a011c9e:	b082      	sub	sp, #8
1a011ca0:	af00      	add	r7, sp, #0
1a011ca2:	6078      	str	r0, [r7, #4]
1a011ca4:	460b      	mov	r3, r1
1a011ca6:	70fb      	strb	r3, [r7, #3]
	setStartMode(pADC, ADC_NO_START);
1a011ca8:	2100      	movs	r1, #0
1a011caa:	6878      	ldr	r0, [r7, #4]
1a011cac:	f7ff ff12 	bl	1a011ad4 <setStartMode>
	
    if (NewState == DISABLE) {
1a011cb0:	78fb      	ldrb	r3, [r7, #3]
1a011cb2:	2b00      	cmp	r3, #0
1a011cb4:	d106      	bne.n	1a011cc4 <Chip_ADC_SetBurstCmd+0x28>
		pADC->CR &= ~ADC_CR_BURST;
1a011cb6:	687b      	ldr	r3, [r7, #4]
1a011cb8:	681b      	ldr	r3, [r3, #0]
1a011cba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
1a011cbe:	687b      	ldr	r3, [r7, #4]
1a011cc0:	601a      	str	r2, [r3, #0]
	}
	else {
		pADC->CR |= ADC_CR_BURST;
	}
}
1a011cc2:	e005      	b.n	1a011cd0 <Chip_ADC_SetBurstCmd+0x34>
	
    if (NewState == DISABLE) {
		pADC->CR &= ~ADC_CR_BURST;
	}
	else {
		pADC->CR |= ADC_CR_BURST;
1a011cc4:	687b      	ldr	r3, [r7, #4]
1a011cc6:	681b      	ldr	r3, [r3, #0]
1a011cc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
1a011ccc:	687b      	ldr	r3, [r7, #4]
1a011cce:	601a      	str	r2, [r3, #0]
	}
}
1a011cd0:	bf00      	nop
1a011cd2:	3708      	adds	r7, #8
1a011cd4:	46bd      	mov	sp, r7
1a011cd6:	bd80      	pop	{r7, pc}

1a011cd8 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a011cd8:	b580      	push	{r7, lr}
1a011cda:	af00      	add	r7, sp, #0
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a011cdc:	2069      	movs	r0, #105	; 0x69
1a011cde:	f000 fc83 	bl	1a0125e8 <Chip_Clock_GetRate>
1a011ce2:	4602      	mov	r2, r0
1a011ce4:	4b01      	ldr	r3, [pc, #4]	; (1a011cec <SystemCoreClockUpdate+0x14>)
1a011ce6:	601a      	str	r2, [r3, #0]
}
1a011ce8:	bf00      	nop
1a011cea:	bd80      	pop	{r7, pc}
1a011cec:	100880f8 	.word	0x100880f8

1a011cf0 <Chip_Clock_TestMainPLLMultiplier>:
 * Private functions
 ****************************************************************************/

/* Test PLL input values for a specific frequency range */
static uint32_t Chip_Clock_TestMainPLLMultiplier(uint32_t InputHz, uint32_t TestMult, uint32_t MinHz, uint32_t MaxHz)
{
1a011cf0:	b480      	push	{r7}
1a011cf2:	b087      	sub	sp, #28
1a011cf4:	af00      	add	r7, sp, #0
1a011cf6:	60f8      	str	r0, [r7, #12]
1a011cf8:	60b9      	str	r1, [r7, #8]
1a011cfa:	607a      	str	r2, [r7, #4]
1a011cfc:	603b      	str	r3, [r7, #0]
	uint32_t TestHz = TestMult * InputHz;
1a011cfe:	68bb      	ldr	r3, [r7, #8]
1a011d00:	68fa      	ldr	r2, [r7, #12]
1a011d02:	fb02 f303 	mul.w	r3, r2, r3
1a011d06:	617b      	str	r3, [r7, #20]

	if ((TestHz < MinHz) || (TestHz > MAX_CLOCK_FREQ) || (TestHz > MaxHz)) {
1a011d08:	697a      	ldr	r2, [r7, #20]
1a011d0a:	687b      	ldr	r3, [r7, #4]
1a011d0c:	429a      	cmp	r2, r3
1a011d0e:	d307      	bcc.n	1a011d20 <Chip_Clock_TestMainPLLMultiplier+0x30>
1a011d10:	697b      	ldr	r3, [r7, #20]
1a011d12:	4a08      	ldr	r2, [pc, #32]	; (1a011d34 <Chip_Clock_TestMainPLLMultiplier+0x44>)
1a011d14:	4293      	cmp	r3, r2
1a011d16:	d803      	bhi.n	1a011d20 <Chip_Clock_TestMainPLLMultiplier+0x30>
1a011d18:	697a      	ldr	r2, [r7, #20]
1a011d1a:	683b      	ldr	r3, [r7, #0]
1a011d1c:	429a      	cmp	r2, r3
1a011d1e:	d901      	bls.n	1a011d24 <Chip_Clock_TestMainPLLMultiplier+0x34>
		TestHz = 0;
1a011d20:	2300      	movs	r3, #0
1a011d22:	617b      	str	r3, [r7, #20]
	}

	return TestHz;
1a011d24:	697b      	ldr	r3, [r7, #20]
}
1a011d26:	4618      	mov	r0, r3
1a011d28:	371c      	adds	r7, #28
1a011d2a:	46bd      	mov	sp, r7
1a011d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a011d30:	4770      	bx	lr
1a011d32:	bf00      	nop
1a011d34:	0c28cb00 	.word	0x0c28cb00

1a011d38 <Chip_Clock_GetDivRate>:

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a011d38:	b580      	push	{r7, lr}
1a011d3a:	b084      	sub	sp, #16
1a011d3c:	af00      	add	r7, sp, #0
1a011d3e:	4603      	mov	r3, r0
1a011d40:	460a      	mov	r2, r1
1a011d42:	71fb      	strb	r3, [r7, #7]
1a011d44:	4613      	mov	r3, r2
1a011d46:	71bb      	strb	r3, [r7, #6]
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a011d48:	79bb      	ldrb	r3, [r7, #6]
1a011d4a:	4618      	mov	r0, r3
1a011d4c:	f000 fa16 	bl	1a01217c <Chip_Clock_GetDividerSource>
1a011d50:	4603      	mov	r3, r0
1a011d52:	73fb      	strb	r3, [r7, #15]
	div = Chip_Clock_GetDividerDivisor(divider);
1a011d54:	79bb      	ldrb	r3, [r7, #6]
1a011d56:	4618      	mov	r0, r3
1a011d58:	f000 fa30 	bl	1a0121bc <Chip_Clock_GetDividerDivisor>
1a011d5c:	60b8      	str	r0, [r7, #8]
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a011d5e:	7bfb      	ldrb	r3, [r7, #15]
1a011d60:	4618      	mov	r0, r3
1a011d62:	f000 fa47 	bl	1a0121f4 <Chip_Clock_GetClockInputHz>
1a011d66:	4602      	mov	r2, r0
1a011d68:	68bb      	ldr	r3, [r7, #8]
1a011d6a:	3301      	adds	r3, #1
1a011d6c:	fbb2 f3f3 	udiv	r3, r2, r3
}
1a011d70:	4618      	mov	r0, r3
1a011d72:	3710      	adds	r7, #16
1a011d74:	46bd      	mov	sp, r7
1a011d76:	bd80      	pop	{r7, pc}

1a011d78 <Chip_Clock_FindBaseClock>:

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a011d78:	b480      	push	{r7}
1a011d7a:	b085      	sub	sp, #20
1a011d7c:	af00      	add	r7, sp, #0
1a011d7e:	4603      	mov	r3, r0
1a011d80:	80fb      	strh	r3, [r7, #6]
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a011d82:	231c      	movs	r3, #28
1a011d84:	73fb      	strb	r3, [r7, #15]
	int i = 0;
1a011d86:	2300      	movs	r3, #0
1a011d88:	60bb      	str	r3, [r7, #8]

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a011d8a:	e024      	b.n	1a011dd6 <Chip_Clock_FindBaseClock+0x5e>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a011d8c:	491d      	ldr	r1, [pc, #116]	; (1a011e04 <Chip_Clock_FindBaseClock+0x8c>)
1a011d8e:	68ba      	ldr	r2, [r7, #8]
1a011d90:	4613      	mov	r3, r2
1a011d92:	005b      	lsls	r3, r3, #1
1a011d94:	4413      	add	r3, r2
1a011d96:	005b      	lsls	r3, r3, #1
1a011d98:	440b      	add	r3, r1
1a011d9a:	881b      	ldrh	r3, [r3, #0]
1a011d9c:	88fa      	ldrh	r2, [r7, #6]
1a011d9e:	429a      	cmp	r2, r3
1a011da0:	d316      	bcc.n	1a011dd0 <Chip_Clock_FindBaseClock+0x58>
1a011da2:	4918      	ldr	r1, [pc, #96]	; (1a011e04 <Chip_Clock_FindBaseClock+0x8c>)
1a011da4:	68ba      	ldr	r2, [r7, #8]
1a011da6:	4613      	mov	r3, r2
1a011da8:	005b      	lsls	r3, r3, #1
1a011daa:	4413      	add	r3, r2
1a011dac:	005b      	lsls	r3, r3, #1
1a011dae:	440b      	add	r3, r1
1a011db0:	3302      	adds	r3, #2
1a011db2:	881b      	ldrh	r3, [r3, #0]
1a011db4:	88fa      	ldrh	r2, [r7, #6]
1a011db6:	429a      	cmp	r2, r3
1a011db8:	d80a      	bhi.n	1a011dd0 <Chip_Clock_FindBaseClock+0x58>
			baseclk = periph_to_base[i].clkbase;
1a011dba:	4912      	ldr	r1, [pc, #72]	; (1a011e04 <Chip_Clock_FindBaseClock+0x8c>)
1a011dbc:	68ba      	ldr	r2, [r7, #8]
1a011dbe:	4613      	mov	r3, r2
1a011dc0:	005b      	lsls	r3, r3, #1
1a011dc2:	4413      	add	r3, r2
1a011dc4:	005b      	lsls	r3, r3, #1
1a011dc6:	440b      	add	r3, r1
1a011dc8:	3304      	adds	r3, #4
1a011dca:	781b      	ldrb	r3, [r3, #0]
1a011dcc:	73fb      	strb	r3, [r7, #15]
1a011dce:	e002      	b.n	1a011dd6 <Chip_Clock_FindBaseClock+0x5e>
		}
		else {
			i++;
1a011dd0:	68bb      	ldr	r3, [r7, #8]
1a011dd2:	3301      	adds	r3, #1
1a011dd4:	60bb      	str	r3, [r7, #8]
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a011dd6:	7bfb      	ldrb	r3, [r7, #15]
1a011dd8:	2b1c      	cmp	r3, #28
1a011dda:	d10b      	bne.n	1a011df4 <Chip_Clock_FindBaseClock+0x7c>
1a011ddc:	4909      	ldr	r1, [pc, #36]	; (1a011e04 <Chip_Clock_FindBaseClock+0x8c>)
1a011dde:	68ba      	ldr	r2, [r7, #8]
1a011de0:	4613      	mov	r3, r2
1a011de2:	005b      	lsls	r3, r3, #1
1a011de4:	4413      	add	r3, r2
1a011de6:	005b      	lsls	r3, r3, #1
1a011de8:	440b      	add	r3, r1
1a011dea:	3304      	adds	r3, #4
1a011dec:	781b      	ldrb	r3, [r3, #0]
1a011dee:	7bfa      	ldrb	r2, [r7, #15]
1a011df0:	429a      	cmp	r2, r3
1a011df2:	d1cb      	bne.n	1a011d8c <Chip_Clock_FindBaseClock+0x14>
		else {
			i++;
		}
	}

	return baseclk;
1a011df4:	7bfb      	ldrb	r3, [r7, #15]
}
1a011df6:	4618      	mov	r0, r3
1a011df8:	3714      	adds	r7, #20
1a011dfa:	46bd      	mov	sp, r7
1a011dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a011e00:	4770      	bx	lr
1a011e02:	bf00      	nop
1a011e04:	1a01aa90 	.word	0x1a01aa90

1a011e08 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a011e08:	b480      	push	{r7}
1a011e0a:	b083      	sub	sp, #12
1a011e0c:	af00      	add	r7, sp, #0
	volatile uint32_t delay = 1000;
1a011e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a011e12:	603b      	str	r3, [r7, #0]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a011e14:	4b15      	ldr	r3, [pc, #84]	; (1a011e6c <Chip_Clock_EnableCrystal+0x64>)
1a011e16:	699b      	ldr	r3, [r3, #24]
1a011e18:	607b      	str	r3, [r7, #4]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a011e1a:	687b      	ldr	r3, [r7, #4]
1a011e1c:	f023 0302 	bic.w	r3, r3, #2
1a011e20:	607b      	str	r3, [r7, #4]
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a011e22:	4b12      	ldr	r3, [pc, #72]	; (1a011e6c <Chip_Clock_EnableCrystal+0x64>)
1a011e24:	699a      	ldr	r2, [r3, #24]
1a011e26:	687b      	ldr	r3, [r7, #4]
1a011e28:	429a      	cmp	r2, r3
1a011e2a:	d002      	beq.n	1a011e32 <Chip_Clock_EnableCrystal+0x2a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a011e2c:	4a0f      	ldr	r2, [pc, #60]	; (1a011e6c <Chip_Clock_EnableCrystal+0x64>)
1a011e2e:	687b      	ldr	r3, [r7, #4]
1a011e30:	6193      	str	r3, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a011e32:	687b      	ldr	r3, [r7, #4]
1a011e34:	f023 0301 	bic.w	r3, r3, #1
1a011e38:	607b      	str	r3, [r7, #4]
	if (OscRateIn >= 20000000) {
1a011e3a:	4b0d      	ldr	r3, [pc, #52]	; (1a011e70 <Chip_Clock_EnableCrystal+0x68>)
1a011e3c:	681b      	ldr	r3, [r3, #0]
1a011e3e:	4a0d      	ldr	r2, [pc, #52]	; (1a011e74 <Chip_Clock_EnableCrystal+0x6c>)
1a011e40:	4293      	cmp	r3, r2
1a011e42:	d903      	bls.n	1a011e4c <Chip_Clock_EnableCrystal+0x44>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a011e44:	687b      	ldr	r3, [r7, #4]
1a011e46:	f043 0304 	orr.w	r3, r3, #4
1a011e4a:	607b      	str	r3, [r7, #4]

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a011e4c:	4a07      	ldr	r2, [pc, #28]	; (1a011e6c <Chip_Clock_EnableCrystal+0x64>)
1a011e4e:	687b      	ldr	r3, [r7, #4]
1a011e50:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a011e52:	bf00      	nop
1a011e54:	683b      	ldr	r3, [r7, #0]
1a011e56:	1e5a      	subs	r2, r3, #1
1a011e58:	603a      	str	r2, [r7, #0]
1a011e5a:	2b00      	cmp	r3, #0
1a011e5c:	d1fa      	bne.n	1a011e54 <Chip_Clock_EnableCrystal+0x4c>
}
1a011e5e:	bf00      	nop
1a011e60:	370c      	adds	r7, #12
1a011e62:	46bd      	mov	sp, r7
1a011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
1a011e68:	4770      	bx	lr
1a011e6a:	bf00      	nop
1a011e6c:	40050000 	.word	0x40050000
1a011e70:	1a018948 	.word	0x1a018948
1a011e74:	01312cff 	.word	0x01312cff

1a011e78 <Chip_Clock_SetupMainPLLHz>:
	LPC_CGU->XTAL_OSC_CTRL |= 1;
}

/* Configures the main PLL */
uint32_t Chip_Clock_SetupMainPLLHz(CHIP_CGU_CLKIN_T Input, uint32_t MinHz, uint32_t DesiredHz, uint32_t MaxHz)
{
1a011e78:	b580      	push	{r7, lr}
1a011e7a:	b08a      	sub	sp, #40	; 0x28
1a011e7c:	af00      	add	r7, sp, #0
1a011e7e:	60b9      	str	r1, [r7, #8]
1a011e80:	607a      	str	r2, [r7, #4]
1a011e82:	603b      	str	r3, [r7, #0]
1a011e84:	4603      	mov	r3, r0
1a011e86:	73fb      	strb	r3, [r7, #15]
	uint32_t freqin = Chip_Clock_GetClockInputHz(Input);
1a011e88:	7bfb      	ldrb	r3, [r7, #15]
1a011e8a:	4618      	mov	r0, r3
1a011e8c:	f000 f9b2 	bl	1a0121f4 <Chip_Clock_GetClockInputHz>
1a011e90:	61f8      	str	r0, [r7, #28]
	uint32_t Mult, LastMult, MultEnd;
	uint32_t freqout, freqout2;

	if (DesiredHz != 0xFFFFFFFF) {
1a011e92:	687b      	ldr	r3, [r7, #4]
1a011e94:	f1b3 3fff 	cmp.w	r3, #4294967295
1a011e98:	d051      	beq.n	1a011f3e <Chip_Clock_SetupMainPLLHz+0xc6>
		/* Test DesiredHz rounded down */
		Mult = DesiredHz / freqin;
1a011e9a:	687a      	ldr	r2, [r7, #4]
1a011e9c:	69fb      	ldr	r3, [r7, #28]
1a011e9e:	fbb2 f3f3 	udiv	r3, r2, r3
1a011ea2:	627b      	str	r3, [r7, #36]	; 0x24
		freqout = Chip_Clock_TestMainPLLMultiplier(freqin, Mult, MinHz, MaxHz);
1a011ea4:	683b      	ldr	r3, [r7, #0]
1a011ea6:	68ba      	ldr	r2, [r7, #8]
1a011ea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
1a011eaa:	69f8      	ldr	r0, [r7, #28]
1a011eac:	f7ff ff20 	bl	1a011cf0 <Chip_Clock_TestMainPLLMultiplier>
1a011eb0:	61b8      	str	r0, [r7, #24]

		/* Test DesiredHz rounded up */
		Mult++;
1a011eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a011eb4:	3301      	adds	r3, #1
1a011eb6:	627b      	str	r3, [r7, #36]	; 0x24
		freqout2 = Chip_Clock_TestMainPLLMultiplier(freqin, Mult, MinHz, MaxHz);
1a011eb8:	683b      	ldr	r3, [r7, #0]
1a011eba:	68ba      	ldr	r2, [r7, #8]
1a011ebc:	6a79      	ldr	r1, [r7, #36]	; 0x24
1a011ebe:	69f8      	ldr	r0, [r7, #28]
1a011ec0:	f7ff ff16 	bl	1a011cf0 <Chip_Clock_TestMainPLLMultiplier>
1a011ec4:	6178      	str	r0, [r7, #20]

		if (freqout && !freqout2) {	/* rounding up is no good? set first multiplier */
1a011ec6:	69bb      	ldr	r3, [r7, #24]
1a011ec8:	2b00      	cmp	r3, #0
1a011eca:	d00c      	beq.n	1a011ee6 <Chip_Clock_SetupMainPLLHz+0x6e>
1a011ecc:	697b      	ldr	r3, [r7, #20]
1a011ece:	2b00      	cmp	r3, #0
1a011ed0:	d109      	bne.n	1a011ee6 <Chip_Clock_SetupMainPLLHz+0x6e>
			Mult--;
1a011ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a011ed4:	3b01      	subs	r3, #1
1a011ed6:	627b      	str	r3, [r7, #36]	; 0x24
			return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a011ed8:	7bfb      	ldrb	r3, [r7, #15]
1a011eda:	6a79      	ldr	r1, [r7, #36]	; 0x24
1a011edc:	4618      	mov	r0, r3
1a011ede:	f000 f85f 	bl	1a011fa0 <Chip_Clock_SetupMainPLLMult>
1a011ee2:	4603      	mov	r3, r0
1a011ee4:	e057      	b.n	1a011f96 <Chip_Clock_SetupMainPLLHz+0x11e>
		}
		if (!freqout && freqout2) {	/* didn't work until rounded up? set 2nd multiplier */
1a011ee6:	69bb      	ldr	r3, [r7, #24]
1a011ee8:	2b00      	cmp	r3, #0
1a011eea:	d109      	bne.n	1a011f00 <Chip_Clock_SetupMainPLLHz+0x88>
1a011eec:	697b      	ldr	r3, [r7, #20]
1a011eee:	2b00      	cmp	r3, #0
1a011ef0:	d006      	beq.n	1a011f00 <Chip_Clock_SetupMainPLLHz+0x88>
			return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a011ef2:	7bfb      	ldrb	r3, [r7, #15]
1a011ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
1a011ef6:	4618      	mov	r0, r3
1a011ef8:	f000 f852 	bl	1a011fa0 <Chip_Clock_SetupMainPLLMult>
1a011efc:	4603      	mov	r3, r0
1a011efe:	e04a      	b.n	1a011f96 <Chip_Clock_SetupMainPLLHz+0x11e>
		}

		if (freqout && freqout2) {	/* either multiplier okay? choose closer one */
1a011f00:	69bb      	ldr	r3, [r7, #24]
1a011f02:	2b00      	cmp	r3, #0
1a011f04:	d01b      	beq.n	1a011f3e <Chip_Clock_SetupMainPLLHz+0xc6>
1a011f06:	697b      	ldr	r3, [r7, #20]
1a011f08:	2b00      	cmp	r3, #0
1a011f0a:	d018      	beq.n	1a011f3e <Chip_Clock_SetupMainPLLHz+0xc6>
			if ((DesiredHz - freqout) > (freqout2 - DesiredHz)) {
1a011f0c:	687a      	ldr	r2, [r7, #4]
1a011f0e:	69bb      	ldr	r3, [r7, #24]
1a011f10:	1ad2      	subs	r2, r2, r3
1a011f12:	6979      	ldr	r1, [r7, #20]
1a011f14:	687b      	ldr	r3, [r7, #4]
1a011f16:	1acb      	subs	r3, r1, r3
1a011f18:	429a      	cmp	r2, r3
1a011f1a:	d909      	bls.n	1a011f30 <Chip_Clock_SetupMainPLLHz+0xb8>
				Mult--;
1a011f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a011f1e:	3b01      	subs	r3, #1
1a011f20:	627b      	str	r3, [r7, #36]	; 0x24
				return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a011f22:	7bfb      	ldrb	r3, [r7, #15]
1a011f24:	6a79      	ldr	r1, [r7, #36]	; 0x24
1a011f26:	4618      	mov	r0, r3
1a011f28:	f000 f83a 	bl	1a011fa0 <Chip_Clock_SetupMainPLLMult>
1a011f2c:	4603      	mov	r3, r0
1a011f2e:	e032      	b.n	1a011f96 <Chip_Clock_SetupMainPLLHz+0x11e>
			}
			else {
				return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a011f30:	7bfb      	ldrb	r3, [r7, #15]
1a011f32:	6a79      	ldr	r1, [r7, #36]	; 0x24
1a011f34:	4618      	mov	r0, r3
1a011f36:	f000 f833 	bl	1a011fa0 <Chip_Clock_SetupMainPLLMult>
1a011f3a:	4603      	mov	r3, r0
1a011f3c:	e02b      	b.n	1a011f96 <Chip_Clock_SetupMainPLLHz+0x11e>
		}
	}

	/* Neither multiplier okay? Try to start at MinHz and increment.
	   This should find the highest multiplier that is still good */
	Mult = MinHz / freqin;
1a011f3e:	68ba      	ldr	r2, [r7, #8]
1a011f40:	69fb      	ldr	r3, [r7, #28]
1a011f42:	fbb2 f3f3 	udiv	r3, r2, r3
1a011f46:	627b      	str	r3, [r7, #36]	; 0x24
	MultEnd = MaxHz / freqin;
1a011f48:	683a      	ldr	r2, [r7, #0]
1a011f4a:	69fb      	ldr	r3, [r7, #28]
1a011f4c:	fbb2 f3f3 	udiv	r3, r2, r3
1a011f50:	613b      	str	r3, [r7, #16]
	LastMult = 0;
1a011f52:	2300      	movs	r3, #0
1a011f54:	623b      	str	r3, [r7, #32]
	while (1) {
		freqout = Chip_Clock_TestMainPLLMultiplier(freqin, Mult, MinHz, MaxHz);
1a011f56:	683b      	ldr	r3, [r7, #0]
1a011f58:	68ba      	ldr	r2, [r7, #8]
1a011f5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
1a011f5c:	69f8      	ldr	r0, [r7, #28]
1a011f5e:	f7ff fec7 	bl	1a011cf0 <Chip_Clock_TestMainPLLMultiplier>
1a011f62:	61b8      	str	r0, [r7, #24]

		if (freqout) {
1a011f64:	69bb      	ldr	r3, [r7, #24]
1a011f66:	2b00      	cmp	r3, #0
1a011f68:	d001      	beq.n	1a011f6e <Chip_Clock_SetupMainPLLHz+0xf6>
			LastMult = Mult;
1a011f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a011f6c:	623b      	str	r3, [r7, #32]
		}

		if (Mult >= MultEnd) {
1a011f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1a011f70:	693b      	ldr	r3, [r7, #16]
1a011f72:	429a      	cmp	r2, r3
1a011f74:	d203      	bcs.n	1a011f7e <Chip_Clock_SetupMainPLLHz+0x106>
			break;
		}
		Mult++;
1a011f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a011f78:	3301      	adds	r3, #1
1a011f7a:	627b      	str	r3, [r7, #36]	; 0x24
	}
1a011f7c:	e7eb      	b.n	1a011f56 <Chip_Clock_SetupMainPLLHz+0xde>
		if (freqout) {
			LastMult = Mult;
		}

		if (Mult >= MultEnd) {
			break;
1a011f7e:	bf00      	nop
		}
		Mult++;
	}

	if (LastMult) {
1a011f80:	6a3b      	ldr	r3, [r7, #32]
1a011f82:	2b00      	cmp	r3, #0
1a011f84:	d006      	beq.n	1a011f94 <Chip_Clock_SetupMainPLLHz+0x11c>
		return Chip_Clock_SetupMainPLLMult(Input, LastMult);
1a011f86:	7bfb      	ldrb	r3, [r7, #15]
1a011f88:	6a39      	ldr	r1, [r7, #32]
1a011f8a:	4618      	mov	r0, r3
1a011f8c:	f000 f808 	bl	1a011fa0 <Chip_Clock_SetupMainPLLMult>
1a011f90:	4603      	mov	r3, r0
1a011f92:	e000      	b.n	1a011f96 <Chip_Clock_SetupMainPLLHz+0x11e>
	}

	return 0;
1a011f94:	2300      	movs	r3, #0
}
1a011f96:	4618      	mov	r0, r3
1a011f98:	3728      	adds	r7, #40	; 0x28
1a011f9a:	46bd      	mov	sp, r7
1a011f9c:	bd80      	pop	{r7, pc}
1a011f9e:	bf00      	nop

1a011fa0 <Chip_Clock_SetupMainPLLMult>:

/* Directly set the PLL multipler */
uint32_t Chip_Clock_SetupMainPLLMult(CHIP_CGU_CLKIN_T Input, uint32_t mult)
{
1a011fa0:	b580      	push	{r7, lr}
1a011fa2:	b08a      	sub	sp, #40	; 0x28
1a011fa4:	af00      	add	r7, sp, #0
1a011fa6:	4603      	mov	r3, r0
1a011fa8:	6039      	str	r1, [r7, #0]
1a011faa:	71fb      	strb	r3, [r7, #7]
	volatile uint32_t delay = 250;
1a011fac:	23fa      	movs	r3, #250	; 0xfa
1a011fae:	60fb      	str	r3, [r7, #12]
	uint32_t freq = Chip_Clock_GetClockInputHz(Input);
1a011fb0:	79fb      	ldrb	r3, [r7, #7]
1a011fb2:	4618      	mov	r0, r3
1a011fb4:	f000 f91e 	bl	1a0121f4 <Chip_Clock_GetClockInputHz>
1a011fb8:	61b8      	str	r0, [r7, #24]
	uint32_t msel = 0, nsel = 0, psel = 0, pval = 1;
1a011fba:	2300      	movs	r3, #0
1a011fbc:	617b      	str	r3, [r7, #20]
1a011fbe:	2300      	movs	r3, #0
1a011fc0:	613b      	str	r3, [r7, #16]
1a011fc2:	2300      	movs	r3, #0
1a011fc4:	627b      	str	r3, [r7, #36]	; 0x24
1a011fc6:	2301      	movs	r3, #1
1a011fc8:	623b      	str	r3, [r7, #32]
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a011fca:	4b30      	ldr	r3, [pc, #192]	; (1a01208c <Chip_Clock_SetupMainPLLMult+0xec>)
1a011fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1a011fce:	61fb      	str	r3, [r7, #28]

	freq *= mult;
1a011fd0:	69bb      	ldr	r3, [r7, #24]
1a011fd2:	683a      	ldr	r2, [r7, #0]
1a011fd4:	fb02 f303 	mul.w	r3, r2, r3
1a011fd8:	61bb      	str	r3, [r7, #24]
	msel = mult - 1;
1a011fda:	683b      	ldr	r3, [r7, #0]
1a011fdc:	3b01      	subs	r3, #1
1a011fde:	617b      	str	r3, [r7, #20]

	PLLReg &= ~(0x1F << 24);/* clear input source bits */
1a011fe0:	69fb      	ldr	r3, [r7, #28]
1a011fe2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
1a011fe6:	61fb      	str	r3, [r7, #28]
	PLLReg |= Input << 24;	/* set input source bits to parameter */
1a011fe8:	79fb      	ldrb	r3, [r7, #7]
1a011fea:	061b      	lsls	r3, r3, #24
1a011fec:	461a      	mov	r2, r3
1a011fee:	69fb      	ldr	r3, [r7, #28]
1a011ff0:	4313      	orrs	r3, r2
1a011ff2:	61fb      	str	r3, [r7, #28]

	/* Clear other PLL input bits */
	PLLReg &= ~((1 << 6) |	/* FBSEL */
1a011ff4:	69fa      	ldr	r2, [r7, #28]
1a011ff6:	4b26      	ldr	r3, [pc, #152]	; (1a012090 <Chip_Clock_SetupMainPLLMult+0xf0>)
1a011ff8:	4013      	ands	r3, r2
1a011ffa:	61fb      	str	r3, [r7, #28]
				(1 << 1) |	/* BYPASS */
				(1 << 7) |	/* DIRECT */
				(0x03 << 8) | (0xFF << 16) | (0x03 << 12));	/* PSEL, MSEL, NSEL- divider ratios */

	if (freq < 156000000) {
1a011ffc:	69bb      	ldr	r3, [r7, #24]
1a011ffe:	4a25      	ldr	r2, [pc, #148]	; (1a012094 <Chip_Clock_SetupMainPLLMult+0xf4>)
1a012000:	4293      	cmp	r3, r2
1a012002:	d81c      	bhi.n	1a01203e <Chip_Clock_SetupMainPLLMult+0x9e>
		/* psel is encoded such that 0=1, 1=2, 2=4, 3=8 */
		while ((2 * (pval) * freq) < 156000000) {
1a012004:	e005      	b.n	1a012012 <Chip_Clock_SetupMainPLLMult+0x72>
			psel++;
1a012006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a012008:	3301      	adds	r3, #1
1a01200a:	627b      	str	r3, [r7, #36]	; 0x24
			pval *= 2;
1a01200c:	6a3b      	ldr	r3, [r7, #32]
1a01200e:	005b      	lsls	r3, r3, #1
1a012010:	623b      	str	r3, [r7, #32]
				(1 << 7) |	/* DIRECT */
				(0x03 << 8) | (0xFF << 16) | (0x03 << 12));	/* PSEL, MSEL, NSEL- divider ratios */

	if (freq < 156000000) {
		/* psel is encoded such that 0=1, 1=2, 2=4, 3=8 */
		while ((2 * (pval) * freq) < 156000000) {
1a012012:	6a3b      	ldr	r3, [r7, #32]
1a012014:	69ba      	ldr	r2, [r7, #24]
1a012016:	fb02 f303 	mul.w	r3, r2, r3
1a01201a:	005b      	lsls	r3, r3, #1
1a01201c:	4a1d      	ldr	r2, [pc, #116]	; (1a012094 <Chip_Clock_SetupMainPLLMult+0xf4>)
1a01201e:	4293      	cmp	r3, r2
1a012020:	d9f1      	bls.n	1a012006 <Chip_Clock_SetupMainPLLMult+0x66>
			psel++;
			pval *= 2;
		}

		PLLReg |= (msel << 16) | (nsel << 12) | (psel << 8) | (1 << 6);	/* dividers + FBSEL */
1a012022:	697b      	ldr	r3, [r7, #20]
1a012024:	041a      	lsls	r2, r3, #16
1a012026:	693b      	ldr	r3, [r7, #16]
1a012028:	031b      	lsls	r3, r3, #12
1a01202a:	431a      	orrs	r2, r3
1a01202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a01202e:	021b      	lsls	r3, r3, #8
1a012030:	431a      	orrs	r2, r3
1a012032:	69fb      	ldr	r3, [r7, #28]
1a012034:	4313      	orrs	r3, r2
1a012036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a01203a:	61fb      	str	r3, [r7, #28]
1a01203c:	e015      	b.n	1a01206a <Chip_Clock_SetupMainPLLMult+0xca>
	}
	else if (freq < 320000000) {
1a01203e:	69bb      	ldr	r3, [r7, #24]
1a012040:	4a15      	ldr	r2, [pc, #84]	; (1a012098 <Chip_Clock_SetupMainPLLMult+0xf8>)
1a012042:	4293      	cmp	r3, r2
1a012044:	d80d      	bhi.n	1a012062 <Chip_Clock_SetupMainPLLMult+0xc2>
		PLLReg |= (msel << 16) | (nsel << 12) | (psel << 8) | (1 << 7) | (1 << 6);	/* dividers + DIRECT + FBSEL */
1a012046:	697b      	ldr	r3, [r7, #20]
1a012048:	041a      	lsls	r2, r3, #16
1a01204a:	693b      	ldr	r3, [r7, #16]
1a01204c:	031b      	lsls	r3, r3, #12
1a01204e:	431a      	orrs	r2, r3
1a012050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a012052:	021b      	lsls	r3, r3, #8
1a012054:	431a      	orrs	r2, r3
1a012056:	69fb      	ldr	r3, [r7, #28]
1a012058:	4313      	orrs	r3, r2
1a01205a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
1a01205e:	61fb      	str	r3, [r7, #28]
1a012060:	e003      	b.n	1a01206a <Chip_Clock_SetupMainPLLMult+0xca>
	}
	else {
		Chip_Clock_DisableMainPLL();
1a012062:	f000 f87b 	bl	1a01215c <Chip_Clock_DisableMainPLL>
		return 0;
1a012066:	2300      	movs	r3, #0
1a012068:	e00b      	b.n	1a012082 <Chip_Clock_SetupMainPLLMult+0xe2>
	}
	LPC_CGU->PLL1_CTRL = PLLReg & ~(1 << 0);
1a01206a:	4a08      	ldr	r2, [pc, #32]	; (1a01208c <Chip_Clock_SetupMainPLLMult+0xec>)
1a01206c:	69fb      	ldr	r3, [r7, #28]
1a01206e:	f023 0301 	bic.w	r3, r3, #1
1a012072:	6453      	str	r3, [r2, #68]	; 0x44

	/* Wait for 50uSec */
	while(delay--) {}
1a012074:	bf00      	nop
1a012076:	68fb      	ldr	r3, [r7, #12]
1a012078:	1e5a      	subs	r2, r3, #1
1a01207a:	60fa      	str	r2, [r7, #12]
1a01207c:	2b00      	cmp	r3, #0
1a01207e:	d1fa      	bne.n	1a012076 <Chip_Clock_SetupMainPLLMult+0xd6>

	return freq;
1a012080:	69bb      	ldr	r3, [r7, #24]
}
1a012082:	4618      	mov	r0, r3
1a012084:	3728      	adds	r7, #40	; 0x28
1a012086:	46bd      	mov	sp, r7
1a012088:	bd80      	pop	{r7, pc}
1a01208a:	bf00      	nop
1a01208c:	40050000 	.word	0x40050000
1a012090:	ff00cc3d 	.word	0xff00cc3d
1a012094:	094c5eff 	.word	0x094c5eff
1a012098:	1312cfff 	.word	0x1312cfff

1a01209c <Chip_Clock_GetMainPLLHz>:

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a01209c:	b580      	push	{r7, lr}
1a01209e:	b08c      	sub	sp, #48	; 0x30
1a0120a0:	af00      	add	r7, sp, #0
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0120a2:	4b2c      	ldr	r3, [pc, #176]	; (1a012154 <Chip_Clock_GetMainPLLHz+0xb8>)
1a0120a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1a0120a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0120a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0120aa:	0e1b      	lsrs	r3, r3, #24
1a0120ac:	b2db      	uxtb	r3, r3
1a0120ae:	f003 030f 	and.w	r3, r3, #15
1a0120b2:	b2db      	uxtb	r3, r3
1a0120b4:	4618      	mov	r0, r3
1a0120b6:	f000 f89d 	bl	1a0121f4 <Chip_Clock_GetClockInputHz>
1a0120ba:	62b8      	str	r0, [r7, #40]	; 0x28
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0120bc:	4a26      	ldr	r2, [pc, #152]	; (1a012158 <Chip_Clock_GetMainPLLHz+0xbc>)
1a0120be:	1d3b      	adds	r3, r7, #4
1a0120c0:	6810      	ldr	r0, [r2, #0]
1a0120c2:	6018      	str	r0, [r3, #0]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0120c4:	4b23      	ldr	r3, [pc, #140]	; (1a012154 <Chip_Clock_GetMainPLLHz+0xb8>)
1a0120c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a0120c8:	f003 0301 	and.w	r3, r3, #1
1a0120cc:	2b00      	cmp	r3, #0
1a0120ce:	d101      	bne.n	1a0120d4 <Chip_Clock_GetMainPLLHz+0x38>
		return 0;
1a0120d0:	2300      	movs	r3, #0
1a0120d2:	e03b      	b.n	1a01214c <Chip_Clock_GetMainPLLHz+0xb0>
	}

	msel = (PLLReg >> 16) & 0xFF;
1a0120d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0120d6:	0c1b      	lsrs	r3, r3, #16
1a0120d8:	b2db      	uxtb	r3, r3
1a0120da:	627b      	str	r3, [r7, #36]	; 0x24
	nsel = (PLLReg >> 12) & 0x3;
1a0120dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0120de:	0b1b      	lsrs	r3, r3, #12
1a0120e0:	f003 0303 	and.w	r3, r3, #3
1a0120e4:	623b      	str	r3, [r7, #32]
	psel = (PLLReg >> 8) & 0x3;
1a0120e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0120e8:	0a1b      	lsrs	r3, r3, #8
1a0120ea:	f003 0303 	and.w	r3, r3, #3
1a0120ee:	61fb      	str	r3, [r7, #28]
	direct = (PLLReg >> 7) & 0x1;
1a0120f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0120f2:	09db      	lsrs	r3, r3, #7
1a0120f4:	f003 0301 	and.w	r3, r3, #1
1a0120f8:	61bb      	str	r3, [r7, #24]
	fbsel = (PLLReg >> 6) & 0x1;
1a0120fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0120fc:	099b      	lsrs	r3, r3, #6
1a0120fe:	f003 0301 	and.w	r3, r3, #1
1a012102:	617b      	str	r3, [r7, #20]

	m = msel + 1;
1a012104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a012106:	3301      	adds	r3, #1
1a012108:	613b      	str	r3, [r7, #16]
	n = nsel + 1;
1a01210a:	6a3b      	ldr	r3, [r7, #32]
1a01210c:	3301      	adds	r3, #1
1a01210e:	60fb      	str	r3, [r7, #12]
	p = ptab[psel];
1a012110:	1d3a      	adds	r2, r7, #4
1a012112:	69fb      	ldr	r3, [r7, #28]
1a012114:	4413      	add	r3, r2
1a012116:	781b      	ldrb	r3, [r3, #0]
1a012118:	60bb      	str	r3, [r7, #8]

	if (direct || fbsel) {
1a01211a:	69bb      	ldr	r3, [r7, #24]
1a01211c:	2b00      	cmp	r3, #0
1a01211e:	d102      	bne.n	1a012126 <Chip_Clock_GetMainPLLHz+0x8a>
1a012120:	697b      	ldr	r3, [r7, #20]
1a012122:	2b00      	cmp	r3, #0
1a012124:	d007      	beq.n	1a012136 <Chip_Clock_GetMainPLLHz+0x9a>
		return m * (freq / n);
1a012126:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a012128:	68fb      	ldr	r3, [r7, #12]
1a01212a:	fbb2 f3f3 	udiv	r3, r2, r3
1a01212e:	693a      	ldr	r2, [r7, #16]
1a012130:	fb02 f303 	mul.w	r3, r2, r3
1a012134:	e00a      	b.n	1a01214c <Chip_Clock_GetMainPLLHz+0xb0>
	}

	return (m / (2 * p)) * (freq / n);
1a012136:	68bb      	ldr	r3, [r7, #8]
1a012138:	005b      	lsls	r3, r3, #1
1a01213a:	693a      	ldr	r2, [r7, #16]
1a01213c:	fbb2 f3f3 	udiv	r3, r2, r3
1a012140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
1a012142:	68fa      	ldr	r2, [r7, #12]
1a012144:	fbb1 f2f2 	udiv	r2, r1, r2
1a012148:	fb02 f303 	mul.w	r3, r2, r3
}
1a01214c:	4618      	mov	r0, r3
1a01214e:	3730      	adds	r7, #48	; 0x30
1a012150:	46bd      	mov	sp, r7
1a012152:	bd80      	pop	{r7, pc}
1a012154:	40050000 	.word	0x40050000
1a012158:	1a01aafc 	.word	0x1a01aafc

1a01215c <Chip_Clock_DisableMainPLL>:

/* Disables the main PLL */
void Chip_Clock_DisableMainPLL(void)
{
1a01215c:	b480      	push	{r7}
1a01215e:	af00      	add	r7, sp, #0
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a012160:	4a05      	ldr	r2, [pc, #20]	; (1a012178 <Chip_Clock_DisableMainPLL+0x1c>)
1a012162:	4b05      	ldr	r3, [pc, #20]	; (1a012178 <Chip_Clock_DisableMainPLL+0x1c>)
1a012164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1a012166:	f043 0301 	orr.w	r3, r3, #1
1a01216a:	6453      	str	r3, [r2, #68]	; 0x44
}
1a01216c:	bf00      	nop
1a01216e:	46bd      	mov	sp, r7
1a012170:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012174:	4770      	bx	lr
1a012176:	bf00      	nop
1a012178:	40050000 	.word	0x40050000

1a01217c <Chip_Clock_GetDividerSource>:
	}
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
1a01217c:	b480      	push	{r7}
1a01217e:	b085      	sub	sp, #20
1a012180:	af00      	add	r7, sp, #0
1a012182:	4603      	mov	r3, r0
1a012184:	71fb      	strb	r3, [r7, #7]
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a012186:	4a0c      	ldr	r2, [pc, #48]	; (1a0121b8 <Chip_Clock_GetDividerSource+0x3c>)
1a012188:	79fb      	ldrb	r3, [r7, #7]
1a01218a:	3312      	adds	r3, #18
1a01218c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a012190:	60fb      	str	r3, [r7, #12]

	if (reg & 1) {	/* divider is powered down */
1a012192:	68fb      	ldr	r3, [r7, #12]
1a012194:	f003 0301 	and.w	r3, r3, #1
1a012198:	2b00      	cmp	r3, #0
1a01219a:	d001      	beq.n	1a0121a0 <Chip_Clock_GetDividerSource+0x24>
		return CLKINPUT_PD;
1a01219c:	2311      	movs	r3, #17
1a01219e:	e005      	b.n	1a0121ac <Chip_Clock_GetDividerSource+0x30>
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0121a0:	68fb      	ldr	r3, [r7, #12]
1a0121a2:	0e1b      	lsrs	r3, r3, #24
1a0121a4:	b2db      	uxtb	r3, r3
1a0121a6:	f003 031f 	and.w	r3, r3, #31
1a0121aa:	b2db      	uxtb	r3, r3
}
1a0121ac:	4618      	mov	r0, r3
1a0121ae:	3714      	adds	r7, #20
1a0121b0:	46bd      	mov	sp, r7
1a0121b2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0121b6:	4770      	bx	lr
1a0121b8:	40050000 	.word	0x40050000

1a0121bc <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
1a0121bc:	b480      	push	{r7}
1a0121be:	b083      	sub	sp, #12
1a0121c0:	af00      	add	r7, sp, #0
1a0121c2:	4603      	mov	r3, r0
1a0121c4:	71fb      	strb	r3, [r7, #7]
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0121c6:	4a09      	ldr	r2, [pc, #36]	; (1a0121ec <Chip_Clock_GetDividerDivisor+0x30>)
1a0121c8:	79fb      	ldrb	r3, [r7, #7]
1a0121ca:	3312      	adds	r3, #18
1a0121cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0121d0:	089b      	lsrs	r3, r3, #2
1a0121d2:	b2da      	uxtb	r2, r3
1a0121d4:	79fb      	ldrb	r3, [r7, #7]
1a0121d6:	4906      	ldr	r1, [pc, #24]	; (1a0121f0 <Chip_Clock_GetDividerDivisor+0x34>)
1a0121d8:	5ccb      	ldrb	r3, [r1, r3]
1a0121da:	4013      	ands	r3, r2
1a0121dc:	b2db      	uxtb	r3, r3
}
1a0121de:	4618      	mov	r0, r3
1a0121e0:	370c      	adds	r7, #12
1a0121e2:	46bd      	mov	sp, r7
1a0121e4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0121e8:	4770      	bx	lr
1a0121ea:	bf00      	nop
1a0121ec:	40050000 	.word	0x40050000
1a0121f0:	1a01ab00 	.word	0x1a01ab00

1a0121f4 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0121f4:	b580      	push	{r7, lr}
1a0121f6:	b084      	sub	sp, #16
1a0121f8:	af00      	add	r7, sp, #0
1a0121fa:	4603      	mov	r3, r0
1a0121fc:	71fb      	strb	r3, [r7, #7]
	uint32_t rate = 0;
1a0121fe:	2300      	movs	r3, #0
1a012200:	60fb      	str	r3, [r7, #12]

	switch (input) {
1a012202:	79fb      	ldrb	r3, [r7, #7]
1a012204:	2b11      	cmp	r3, #17
1a012206:	d87f      	bhi.n	1a012308 <Chip_Clock_GetClockInputHz+0x114>
1a012208:	a201      	add	r2, pc, #4	; (adr r2, 1a012210 <Chip_Clock_GetClockInputHz+0x1c>)
1a01220a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a01220e:	bf00      	nop
1a012210:	1a012259 	.word	0x1a012259
1a012214:	1a012261 	.word	0x1a012261
1a012218:	1a012267 	.word	0x1a012267
1a01221c:	1a01227b 	.word	0x1a01227b
1a012220:	1a012295 	.word	0x1a012295
1a012224:	1a012309 	.word	0x1a012309
1a012228:	1a01229d 	.word	0x1a01229d
1a01222c:	1a0122a5 	.word	0x1a0122a5
1a012230:	1a0122ad 	.word	0x1a0122ad
1a012234:	1a0122b5 	.word	0x1a0122b5
1a012238:	1a012309 	.word	0x1a012309
1a01223c:	1a012309 	.word	0x1a012309
1a012240:	1a0122bd 	.word	0x1a0122bd
1a012244:	1a0122cb 	.word	0x1a0122cb
1a012248:	1a0122d9 	.word	0x1a0122d9
1a01224c:	1a0122e7 	.word	0x1a0122e7
1a012250:	1a0122f5 	.word	0x1a0122f5
1a012254:	1a012303 	.word	0x1a012303
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a012258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
1a01225c:	60fb      	str	r3, [r7, #12]
		break;
1a01225e:	e056      	b.n	1a01230e <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a012260:	4b2d      	ldr	r3, [pc, #180]	; (1a012318 <Chip_Clock_GetClockInputHz+0x124>)
1a012262:	60fb      	str	r3, [r7, #12]
		break;
1a012264:	e053      	b.n	1a01230e <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a012266:	4b2d      	ldr	r3, [pc, #180]	; (1a01231c <Chip_Clock_GetClockInputHz+0x128>)
1a012268:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a01226c:	f003 0307 	and.w	r3, r3, #7
1a012270:	2b04      	cmp	r3, #4
1a012272:	d04b      	beq.n	1a01230c <Chip_Clock_GetClockInputHz+0x118>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a012274:	4b2a      	ldr	r3, [pc, #168]	; (1a012320 <Chip_Clock_GetClockInputHz+0x12c>)
1a012276:	60fb      	str	r3, [r7, #12]
		}
		break;
1a012278:	e048      	b.n	1a01230c <Chip_Clock_GetClockInputHz+0x118>

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a01227a:	4b28      	ldr	r3, [pc, #160]	; (1a01231c <Chip_Clock_GetClockInputHz+0x128>)
1a01227c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a012280:	f003 0307 	and.w	r3, r3, #7
1a012284:	2b04      	cmp	r3, #4
1a012286:	d002      	beq.n	1a01228e <Chip_Clock_GetClockInputHz+0x9a>
			rate = 25000000; /* MII uses 25 MHz */
1a012288:	4b25      	ldr	r3, [pc, #148]	; (1a012320 <Chip_Clock_GetClockInputHz+0x12c>)
1a01228a:	60fb      	str	r3, [r7, #12]
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;
1a01228c:	e03f      	b.n	1a01230e <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a01228e:	4b25      	ldr	r3, [pc, #148]	; (1a012324 <Chip_Clock_GetClockInputHz+0x130>)
1a012290:	60fb      	str	r3, [r7, #12]
		}
		break;
1a012292:	e03c      	b.n	1a01230e <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a012294:	4b24      	ldr	r3, [pc, #144]	; (1a012328 <Chip_Clock_GetClockInputHz+0x134>)
1a012296:	681b      	ldr	r3, [r3, #0]
1a012298:	60fb      	str	r3, [r7, #12]
		break;
1a01229a:	e038      	b.n	1a01230e <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a01229c:	4b23      	ldr	r3, [pc, #140]	; (1a01232c <Chip_Clock_GetClockInputHz+0x138>)
1a01229e:	681b      	ldr	r3, [r3, #0]
1a0122a0:	60fb      	str	r3, [r7, #12]
		break;
1a0122a2:	e034      	b.n	1a01230e <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0122a4:	4b22      	ldr	r3, [pc, #136]	; (1a012330 <Chip_Clock_GetClockInputHz+0x13c>)
1a0122a6:	681b      	ldr	r3, [r3, #0]
1a0122a8:	60fb      	str	r3, [r7, #12]
		break;
1a0122aa:	e030      	b.n	1a01230e <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0122ac:	4b20      	ldr	r3, [pc, #128]	; (1a012330 <Chip_Clock_GetClockInputHz+0x13c>)
1a0122ae:	685b      	ldr	r3, [r3, #4]
1a0122b0:	60fb      	str	r3, [r7, #12]
		break;
1a0122b2:	e02c      	b.n	1a01230e <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0122b4:	f7ff fef2 	bl	1a01209c <Chip_Clock_GetMainPLLHz>
1a0122b8:	60f8      	str	r0, [r7, #12]
		break;
1a0122ba:	e028      	b.n	1a01230e <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0122bc:	79fb      	ldrb	r3, [r7, #7]
1a0122be:	2100      	movs	r1, #0
1a0122c0:	4618      	mov	r0, r3
1a0122c2:	f7ff fd39 	bl	1a011d38 <Chip_Clock_GetDivRate>
1a0122c6:	60f8      	str	r0, [r7, #12]
		break;
1a0122c8:	e021      	b.n	1a01230e <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0122ca:	79fb      	ldrb	r3, [r7, #7]
1a0122cc:	2101      	movs	r1, #1
1a0122ce:	4618      	mov	r0, r3
1a0122d0:	f7ff fd32 	bl	1a011d38 <Chip_Clock_GetDivRate>
1a0122d4:	60f8      	str	r0, [r7, #12]
		break;
1a0122d6:	e01a      	b.n	1a01230e <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0122d8:	79fb      	ldrb	r3, [r7, #7]
1a0122da:	2102      	movs	r1, #2
1a0122dc:	4618      	mov	r0, r3
1a0122de:	f7ff fd2b 	bl	1a011d38 <Chip_Clock_GetDivRate>
1a0122e2:	60f8      	str	r0, [r7, #12]
		break;
1a0122e4:	e013      	b.n	1a01230e <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0122e6:	79fb      	ldrb	r3, [r7, #7]
1a0122e8:	2103      	movs	r1, #3
1a0122ea:	4618      	mov	r0, r3
1a0122ec:	f7ff fd24 	bl	1a011d38 <Chip_Clock_GetDivRate>
1a0122f0:	60f8      	str	r0, [r7, #12]
		break;
1a0122f2:	e00c      	b.n	1a01230e <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0122f4:	79fb      	ldrb	r3, [r7, #7]
1a0122f6:	2104      	movs	r1, #4
1a0122f8:	4618      	mov	r0, r3
1a0122fa:	f7ff fd1d 	bl	1a011d38 <Chip_Clock_GetDivRate>
1a0122fe:	60f8      	str	r0, [r7, #12]
		break;
1a012300:	e005      	b.n	1a01230e <Chip_Clock_GetClockInputHz+0x11a>

	case CLKINPUT_PD:
		rate = 0;
1a012302:	2300      	movs	r3, #0
1a012304:	60fb      	str	r3, [r7, #12]
		break;
1a012306:	e002      	b.n	1a01230e <Chip_Clock_GetClockInputHz+0x11a>

	default:
		break;
1a012308:	bf00      	nop
1a01230a:	e000      	b.n	1a01230e <Chip_Clock_GetClockInputHz+0x11a>
	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
		}
		break;
1a01230c:	bf00      	nop

	default:
		break;
	}

	return rate;
1a01230e:	68fb      	ldr	r3, [r7, #12]
}
1a012310:	4618      	mov	r0, r3
1a012312:	3710      	adds	r7, #16
1a012314:	46bd      	mov	sp, r7
1a012316:	bd80      	pop	{r7, pc}
1a012318:	00b71b00 	.word	0x00b71b00
1a01231c:	40043000 	.word	0x40043000
1a012320:	017d7840 	.word	0x017d7840
1a012324:	02faf080 	.word	0x02faf080
1a012328:	1a01894c 	.word	0x1a01894c
1a01232c:	1a018948 	.word	0x1a018948
1a012330:	1008740c 	.word	0x1008740c

1a012334 <Chip_Clock_GetBaseClocktHz>:

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a012334:	b580      	push	{r7, lr}
1a012336:	b082      	sub	sp, #8
1a012338:	af00      	add	r7, sp, #0
1a01233a:	4603      	mov	r3, r0
1a01233c:	71fb      	strb	r3, [r7, #7]
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a01233e:	79fb      	ldrb	r3, [r7, #7]
1a012340:	4618      	mov	r0, r3
1a012342:	f000 f877 	bl	1a012434 <Chip_Clock_GetBaseClock>
1a012346:	4603      	mov	r3, r0
1a012348:	4618      	mov	r0, r3
1a01234a:	f7ff ff53 	bl	1a0121f4 <Chip_Clock_GetClockInputHz>
1a01234e:	4603      	mov	r3, r0
}
1a012350:	4618      	mov	r0, r3
1a012352:	3708      	adds	r7, #8
1a012354:	46bd      	mov	sp, r7
1a012356:	bd80      	pop	{r7, pc}

1a012358 <Chip_Clock_SetBaseClock>:

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a012358:	b490      	push	{r4, r7}
1a01235a:	b084      	sub	sp, #16
1a01235c:	af00      	add	r7, sp, #0
1a01235e:	4604      	mov	r4, r0
1a012360:	4608      	mov	r0, r1
1a012362:	4611      	mov	r1, r2
1a012364:	461a      	mov	r2, r3
1a012366:	4623      	mov	r3, r4
1a012368:	71fb      	strb	r3, [r7, #7]
1a01236a:	4603      	mov	r3, r0
1a01236c:	71bb      	strb	r3, [r7, #6]
1a01236e:	460b      	mov	r3, r1
1a012370:	717b      	strb	r3, [r7, #5]
1a012372:	4613      	mov	r3, r2
1a012374:	713b      	strb	r3, [r7, #4]
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a012376:	4a1d      	ldr	r2, [pc, #116]	; (1a0123ec <Chip_Clock_SetBaseClock+0x94>)
1a012378:	79fb      	ldrb	r3, [r7, #7]
1a01237a:	3316      	adds	r3, #22
1a01237c:	009b      	lsls	r3, r3, #2
1a01237e:	4413      	add	r3, r2
1a012380:	685b      	ldr	r3, [r3, #4]
1a012382:	60fb      	str	r3, [r7, #12]

	if (BaseClock < CLK_BASE_NONE) {
1a012384:	79fb      	ldrb	r3, [r7, #7]
1a012386:	2b1b      	cmp	r3, #27
1a012388:	d822      	bhi.n	1a0123d0 <Chip_Clock_SetBaseClock+0x78>
		if (Input != CLKINPUT_PD) {
1a01238a:	79bb      	ldrb	r3, [r7, #6]
1a01238c:	2b11      	cmp	r3, #17
1a01238e:	d028      	beq.n	1a0123e2 <Chip_Clock_SetBaseClock+0x8a>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a012390:	68fa      	ldr	r2, [r7, #12]
1a012392:	4b17      	ldr	r3, [pc, #92]	; (1a0123f0 <Chip_Clock_SetBaseClock+0x98>)
1a012394:	4013      	ands	r3, r2
1a012396:	60fb      	str	r3, [r7, #12]

			if (autoblocken) {
1a012398:	797b      	ldrb	r3, [r7, #5]
1a01239a:	2b00      	cmp	r3, #0
1a01239c:	d003      	beq.n	1a0123a6 <Chip_Clock_SetBaseClock+0x4e>
				reg |= (1 << 11);
1a01239e:	68fb      	ldr	r3, [r7, #12]
1a0123a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0123a4:	60fb      	str	r3, [r7, #12]
			}
			if (powerdn) {
1a0123a6:	793b      	ldrb	r3, [r7, #4]
1a0123a8:	2b00      	cmp	r3, #0
1a0123aa:	d003      	beq.n	1a0123b4 <Chip_Clock_SetBaseClock+0x5c>
				reg |= (1 << 0);
1a0123ac:	68fb      	ldr	r3, [r7, #12]
1a0123ae:	f043 0301 	orr.w	r3, r3, #1
1a0123b2:	60fb      	str	r3, [r7, #12]
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0123b4:	79bb      	ldrb	r3, [r7, #6]
1a0123b6:	061b      	lsls	r3, r3, #24
1a0123b8:	461a      	mov	r2, r3
1a0123ba:	68fb      	ldr	r3, [r7, #12]
1a0123bc:	4313      	orrs	r3, r2
1a0123be:	60fb      	str	r3, [r7, #12]

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0123c0:	4a0a      	ldr	r2, [pc, #40]	; (1a0123ec <Chip_Clock_SetBaseClock+0x94>)
1a0123c2:	79fb      	ldrb	r3, [r7, #7]
1a0123c4:	3316      	adds	r3, #22
1a0123c6:	009b      	lsls	r3, r3, #2
1a0123c8:	4413      	add	r3, r2
1a0123ca:	68fa      	ldr	r2, [r7, #12]
1a0123cc:	605a      	str	r2, [r3, #4]
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
	}
}
1a0123ce:	e008      	b.n	1a0123e2 <Chip_Clock_SetBaseClock+0x8a>

			LPC_CGU->BASE_CLK[BaseClock] = reg;
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0123d0:	4906      	ldr	r1, [pc, #24]	; (1a0123ec <Chip_Clock_SetBaseClock+0x94>)
1a0123d2:	79fb      	ldrb	r3, [r7, #7]
1a0123d4:	68fa      	ldr	r2, [r7, #12]
1a0123d6:	f042 0201 	orr.w	r2, r2, #1
1a0123da:	3316      	adds	r3, #22
1a0123dc:	009b      	lsls	r3, r3, #2
1a0123de:	440b      	add	r3, r1
1a0123e0:	605a      	str	r2, [r3, #4]
	}
}
1a0123e2:	bf00      	nop
1a0123e4:	3710      	adds	r7, #16
1a0123e6:	46bd      	mov	sp, r7
1a0123e8:	bc90      	pop	{r4, r7}
1a0123ea:	4770      	bx	lr
1a0123ec:	40050000 	.word	0x40050000
1a0123f0:	e0fff7fe 	.word	0xe0fff7fe

1a0123f4 <Chip_Clock_DisableBaseClock>:
	}
}

/* Disables a base clock source */
void Chip_Clock_DisableBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
1a0123f4:	b480      	push	{r7}
1a0123f6:	b083      	sub	sp, #12
1a0123f8:	af00      	add	r7, sp, #0
1a0123fa:	4603      	mov	r3, r0
1a0123fc:	71fb      	strb	r3, [r7, #7]
	if (BaseClock < CLK_BASE_NONE) {
1a0123fe:	79fb      	ldrb	r3, [r7, #7]
1a012400:	2b1b      	cmp	r3, #27
1a012402:	d80e      	bhi.n	1a012422 <Chip_Clock_DisableBaseClock+0x2e>
		LPC_CGU->BASE_CLK[BaseClock] |= 1;
1a012404:	480a      	ldr	r0, [pc, #40]	; (1a012430 <Chip_Clock_DisableBaseClock+0x3c>)
1a012406:	79f9      	ldrb	r1, [r7, #7]
1a012408:	4a09      	ldr	r2, [pc, #36]	; (1a012430 <Chip_Clock_DisableBaseClock+0x3c>)
1a01240a:	79fb      	ldrb	r3, [r7, #7]
1a01240c:	3316      	adds	r3, #22
1a01240e:	009b      	lsls	r3, r3, #2
1a012410:	4413      	add	r3, r2
1a012412:	685b      	ldr	r3, [r3, #4]
1a012414:	f043 0201 	orr.w	r2, r3, #1
1a012418:	f101 0316 	add.w	r3, r1, #22
1a01241c:	009b      	lsls	r3, r3, #2
1a01241e:	4403      	add	r3, r0
1a012420:	605a      	str	r2, [r3, #4]
	}
}
1a012422:	bf00      	nop
1a012424:	370c      	adds	r7, #12
1a012426:	46bd      	mov	sp, r7
1a012428:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01242c:	4770      	bx	lr
1a01242e:	bf00      	nop
1a012430:	40050000 	.word	0x40050000

1a012434 <Chip_Clock_GetBaseClock>:
	return enabled;
}

/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
1a012434:	b480      	push	{r7}
1a012436:	b085      	sub	sp, #20
1a012438:	af00      	add	r7, sp, #0
1a01243a:	4603      	mov	r3, r0
1a01243c:	71fb      	strb	r3, [r7, #7]
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a01243e:	79fb      	ldrb	r3, [r7, #7]
1a012440:	2b1b      	cmp	r3, #27
1a012442:	d901      	bls.n	1a012448 <Chip_Clock_GetBaseClock+0x14>
		return CLKINPUT_PD;
1a012444:	2311      	movs	r3, #17
1a012446:	e013      	b.n	1a012470 <Chip_Clock_GetBaseClock+0x3c>
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a012448:	4a0c      	ldr	r2, [pc, #48]	; (1a01247c <Chip_Clock_GetBaseClock+0x48>)
1a01244a:	79fb      	ldrb	r3, [r7, #7]
1a01244c:	3316      	adds	r3, #22
1a01244e:	009b      	lsls	r3, r3, #2
1a012450:	4413      	add	r3, r2
1a012452:	685b      	ldr	r3, [r3, #4]
1a012454:	60fb      	str	r3, [r7, #12]

	/* base clock is powered down? */
	if (reg & 1) {
1a012456:	68fb      	ldr	r3, [r7, #12]
1a012458:	f003 0301 	and.w	r3, r3, #1
1a01245c:	2b00      	cmp	r3, #0
1a01245e:	d001      	beq.n	1a012464 <Chip_Clock_GetBaseClock+0x30>
		return CLKINPUT_PD;
1a012460:	2311      	movs	r3, #17
1a012462:	e005      	b.n	1a012470 <Chip_Clock_GetBaseClock+0x3c>
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a012464:	68fb      	ldr	r3, [r7, #12]
1a012466:	0e1b      	lsrs	r3, r3, #24
1a012468:	b2db      	uxtb	r3, r3
1a01246a:	f003 031f 	and.w	r3, r3, #31
1a01246e:	b2db      	uxtb	r3, r3
}
1a012470:	4618      	mov	r0, r3
1a012472:	3714      	adds	r7, #20
1a012474:	46bd      	mov	sp, r7
1a012476:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01247a:	4770      	bx	lr
1a01247c:	40050000 	.word	0x40050000

1a012480 <Chip_Clock_EnableOpts>:

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
1a012480:	b480      	push	{r7}
1a012482:	b085      	sub	sp, #20
1a012484:	af00      	add	r7, sp, #0
1a012486:	603b      	str	r3, [r7, #0]
1a012488:	4603      	mov	r3, r0
1a01248a:	80fb      	strh	r3, [r7, #6]
1a01248c:	460b      	mov	r3, r1
1a01248e:	717b      	strb	r3, [r7, #5]
1a012490:	4613      	mov	r3, r2
1a012492:	713b      	strb	r3, [r7, #4]
	uint32_t reg = 1;
1a012494:	2301      	movs	r3, #1
1a012496:	60fb      	str	r3, [r7, #12]

	if (autoen) {
1a012498:	797b      	ldrb	r3, [r7, #5]
1a01249a:	2b00      	cmp	r3, #0
1a01249c:	d003      	beq.n	1a0124a6 <Chip_Clock_EnableOpts+0x26>
		reg |= (1 << 1);
1a01249e:	68fb      	ldr	r3, [r7, #12]
1a0124a0:	f043 0302 	orr.w	r3, r3, #2
1a0124a4:	60fb      	str	r3, [r7, #12]
	}
	if (wakeupen) {
1a0124a6:	793b      	ldrb	r3, [r7, #4]
1a0124a8:	2b00      	cmp	r3, #0
1a0124aa:	d003      	beq.n	1a0124b4 <Chip_Clock_EnableOpts+0x34>
		reg |= (1 << 2);
1a0124ac:	68fb      	ldr	r3, [r7, #12]
1a0124ae:	f043 0304 	orr.w	r3, r3, #4
1a0124b2:	60fb      	str	r3, [r7, #12]
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0124b4:	683b      	ldr	r3, [r7, #0]
1a0124b6:	2b02      	cmp	r3, #2
1a0124b8:	d103      	bne.n	1a0124c2 <Chip_Clock_EnableOpts+0x42>
		reg |= (1 << 5);
1a0124ba:	68fb      	ldr	r3, [r7, #12]
1a0124bc:	f043 0320 	orr.w	r3, r3, #32
1a0124c0:	60fb      	str	r3, [r7, #12]
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0124c2:	88fb      	ldrh	r3, [r7, #6]
1a0124c4:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a0124c8:	d308      	bcc.n	1a0124dc <Chip_Clock_EnableOpts+0x5c>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0124ca:	490a      	ldr	r1, [pc, #40]	; (1a0124f4 <Chip_Clock_EnableOpts+0x74>)
1a0124cc:	88fb      	ldrh	r3, [r7, #6]
1a0124ce:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a0124d2:	3320      	adds	r3, #32
1a0124d4:	68fa      	ldr	r2, [r7, #12]
1a0124d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
	}
}
1a0124da:	e005      	b.n	1a0124e8 <Chip_Clock_EnableOpts+0x68>
	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0124dc:	4906      	ldr	r1, [pc, #24]	; (1a0124f8 <Chip_Clock_EnableOpts+0x78>)
1a0124de:	88fb      	ldrh	r3, [r7, #6]
1a0124e0:	3320      	adds	r3, #32
1a0124e2:	68fa      	ldr	r2, [r7, #12]
1a0124e4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	}
}
1a0124e8:	bf00      	nop
1a0124ea:	3714      	adds	r7, #20
1a0124ec:	46bd      	mov	sp, r7
1a0124ee:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0124f2:	4770      	bx	lr
1a0124f4:	40052000 	.word	0x40052000
1a0124f8:	40051000 	.word	0x40051000

1a0124fc <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
1a0124fc:	b480      	push	{r7}
1a0124fe:	b083      	sub	sp, #12
1a012500:	af00      	add	r7, sp, #0
1a012502:	4603      	mov	r3, r0
1a012504:	80fb      	strh	r3, [r7, #6]
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a012506:	88fb      	ldrh	r3, [r7, #6]
1a012508:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a01250c:	d310      	bcc.n	1a012530 <Chip_Clock_Enable+0x34>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a01250e:	4911      	ldr	r1, [pc, #68]	; (1a012554 <Chip_Clock_Enable+0x58>)
1a012510:	88fb      	ldrh	r3, [r7, #6]
1a012512:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a012516:	480f      	ldr	r0, [pc, #60]	; (1a012554 <Chip_Clock_Enable+0x58>)
1a012518:	88fa      	ldrh	r2, [r7, #6]
1a01251a:	f5a2 72a1 	sub.w	r2, r2, #322	; 0x142
1a01251e:	3220      	adds	r2, #32
1a012520:	f850 2032 	ldr.w	r2, [r0, r2, lsl #3]
1a012524:	f042 0201 	orr.w	r2, r2, #1
1a012528:	3320      	adds	r3, #32
1a01252a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
	}
}
1a01252e:	e00b      	b.n	1a012548 <Chip_Clock_Enable+0x4c>
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a012530:	4909      	ldr	r1, [pc, #36]	; (1a012558 <Chip_Clock_Enable+0x5c>)
1a012532:	88fb      	ldrh	r3, [r7, #6]
1a012534:	4808      	ldr	r0, [pc, #32]	; (1a012558 <Chip_Clock_Enable+0x5c>)
1a012536:	88fa      	ldrh	r2, [r7, #6]
1a012538:	3220      	adds	r2, #32
1a01253a:	f850 2032 	ldr.w	r2, [r0, r2, lsl #3]
1a01253e:	f042 0201 	orr.w	r2, r2, #1
1a012542:	3320      	adds	r3, #32
1a012544:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	}
}
1a012548:	bf00      	nop
1a01254a:	370c      	adds	r7, #12
1a01254c:	46bd      	mov	sp, r7
1a01254e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012552:	4770      	bx	lr
1a012554:	40052000 	.word	0x40052000
1a012558:	40051000 	.word	0x40051000

1a01255c <Chip_Clock_RTCEnable>:

/* Enable RTC Clock */
void Chip_Clock_RTCEnable(void)
{
1a01255c:	b480      	push	{r7}
1a01255e:	af00      	add	r7, sp, #0
	LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));	/* Reset 32Khz oscillator */
1a012560:	4a08      	ldr	r2, [pc, #32]	; (1a012584 <Chip_Clock_RTCEnable+0x28>)
1a012562:	4b08      	ldr	r3, [pc, #32]	; (1a012584 <Chip_Clock_RTCEnable+0x28>)
1a012564:	685b      	ldr	r3, [r3, #4]
1a012566:	f023 030c 	bic.w	r3, r3, #12
1a01256a:	6053      	str	r3, [r2, #4]
	LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);	/* Enable 32 kHz & 1 kHz on osc32k and release reset */
1a01256c:	4a05      	ldr	r2, [pc, #20]	; (1a012584 <Chip_Clock_RTCEnable+0x28>)
1a01256e:	4b05      	ldr	r3, [pc, #20]	; (1a012584 <Chip_Clock_RTCEnable+0x28>)
1a012570:	685b      	ldr	r3, [r3, #4]
1a012572:	f043 0303 	orr.w	r3, r3, #3
1a012576:	6053      	str	r3, [r2, #4]
}
1a012578:	bf00      	nop
1a01257a:	46bd      	mov	sp, r7
1a01257c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012580:	4770      	bx	lr
1a012582:	bf00      	nop
1a012584:	40043000 	.word	0x40043000

1a012588 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
1a012588:	b480      	push	{r7}
1a01258a:	b083      	sub	sp, #12
1a01258c:	af00      	add	r7, sp, #0
1a01258e:	4603      	mov	r3, r0
1a012590:	80fb      	strh	r3, [r7, #6]
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a012592:	88fb      	ldrh	r3, [r7, #6]
1a012594:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a012598:	d310      	bcc.n	1a0125bc <Chip_Clock_Disable+0x34>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a01259a:	4911      	ldr	r1, [pc, #68]	; (1a0125e0 <Chip_Clock_Disable+0x58>)
1a01259c:	88fb      	ldrh	r3, [r7, #6]
1a01259e:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a0125a2:	480f      	ldr	r0, [pc, #60]	; (1a0125e0 <Chip_Clock_Disable+0x58>)
1a0125a4:	88fa      	ldrh	r2, [r7, #6]
1a0125a6:	f5a2 72a1 	sub.w	r2, r2, #322	; 0x142
1a0125aa:	3220      	adds	r2, #32
1a0125ac:	f850 2032 	ldr.w	r2, [r0, r2, lsl #3]
1a0125b0:	f022 0201 	bic.w	r2, r2, #1
1a0125b4:	3320      	adds	r3, #32
1a0125b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
	}
}
1a0125ba:	e00b      	b.n	1a0125d4 <Chip_Clock_Disable+0x4c>
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a0125bc:	4909      	ldr	r1, [pc, #36]	; (1a0125e4 <Chip_Clock_Disable+0x5c>)
1a0125be:	88fb      	ldrh	r3, [r7, #6]
1a0125c0:	4808      	ldr	r0, [pc, #32]	; (1a0125e4 <Chip_Clock_Disable+0x5c>)
1a0125c2:	88fa      	ldrh	r2, [r7, #6]
1a0125c4:	3220      	adds	r2, #32
1a0125c6:	f850 2032 	ldr.w	r2, [r0, r2, lsl #3]
1a0125ca:	f022 0201 	bic.w	r2, r2, #1
1a0125ce:	3320      	adds	r3, #32
1a0125d0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	}
}
1a0125d4:	bf00      	nop
1a0125d6:	370c      	adds	r7, #12
1a0125d8:	46bd      	mov	sp, r7
1a0125da:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0125de:	4770      	bx	lr
1a0125e0:	40052000 	.word	0x40052000
1a0125e4:	40051000 	.word	0x40051000

1a0125e8 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0125e8:	b580      	push	{r7, lr}
1a0125ea:	b086      	sub	sp, #24
1a0125ec:	af00      	add	r7, sp, #0
1a0125ee:	4603      	mov	r3, r0
1a0125f0:	80fb      	strh	r3, [r7, #6]
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0125f2:	88fb      	ldrh	r3, [r7, #6]
1a0125f4:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a0125f8:	d308      	bcc.n	1a01260c <Chip_Clock_GetRate+0x24>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0125fa:	4a1b      	ldr	r2, [pc, #108]	; (1a012668 <Chip_Clock_GetRate+0x80>)
1a0125fc:	88fb      	ldrh	r3, [r7, #6]
1a0125fe:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a012602:	3320      	adds	r3, #32
1a012604:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
1a012608:	617b      	str	r3, [r7, #20]
1a01260a:	e005      	b.n	1a012618 <Chip_Clock_GetRate+0x30>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a01260c:	4a17      	ldr	r2, [pc, #92]	; (1a01266c <Chip_Clock_GetRate+0x84>)
1a01260e:	88fb      	ldrh	r3, [r7, #6]
1a012610:	3320      	adds	r3, #32
1a012612:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
1a012616:	617b      	str	r3, [r7, #20]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a012618:	697b      	ldr	r3, [r7, #20]
1a01261a:	f003 0301 	and.w	r3, r3, #1
1a01261e:	2b00      	cmp	r3, #0
1a012620:	d01b      	beq.n	1a01265a <Chip_Clock_GetRate+0x72>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a012622:	88fb      	ldrh	r3, [r7, #6]
1a012624:	4618      	mov	r0, r3
1a012626:	f7ff fba7 	bl	1a011d78 <Chip_Clock_FindBaseClock>
1a01262a:	4603      	mov	r3, r0
1a01262c:	72fb      	strb	r3, [r7, #11]

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a01262e:	7afb      	ldrb	r3, [r7, #11]
1a012630:	4618      	mov	r0, r3
1a012632:	f7ff fe7f 	bl	1a012334 <Chip_Clock_GetBaseClocktHz>
1a012636:	60f8      	str	r0, [r7, #12]

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a012638:	697b      	ldr	r3, [r7, #20]
1a01263a:	095b      	lsrs	r3, r3, #5
1a01263c:	f003 0307 	and.w	r3, r3, #7
1a012640:	2b00      	cmp	r3, #0
1a012642:	d102      	bne.n	1a01264a <Chip_Clock_GetRate+0x62>
			div = 1;
1a012644:	2301      	movs	r3, #1
1a012646:	613b      	str	r3, [r7, #16]
1a012648:	e001      	b.n	1a01264e <Chip_Clock_GetRate+0x66>
		}
		else {
			div = 2;/* No other dividers supported */
1a01264a:	2302      	movs	r3, #2
1a01264c:	613b      	str	r3, [r7, #16]

		}
		rate = rate / div;
1a01264e:	68fa      	ldr	r2, [r7, #12]
1a012650:	693b      	ldr	r3, [r7, #16]
1a012652:	fbb2 f3f3 	udiv	r3, r2, r3
1a012656:	60fb      	str	r3, [r7, #12]
1a012658:	e001      	b.n	1a01265e <Chip_Clock_GetRate+0x76>
	}
	else {
		rate = 0;
1a01265a:	2300      	movs	r3, #0
1a01265c:	60fb      	str	r3, [r7, #12]
	}

	return rate;
1a01265e:	68fb      	ldr	r3, [r7, #12]
}
1a012660:	4618      	mov	r0, r3
1a012662:	3718      	adds	r7, #24
1a012664:	46bd      	mov	sp, r7
1a012666:	bd80      	pop	{r7, pc}
1a012668:	40052000 	.word	0x40052000
1a01266c:	40051000 	.word	0x40051000

1a012670 <Chip_Clock_DisablePLL>:
	LPC_CGU->PLL[pllnum].PLL_CTRL &= ~1;
}

/* Disables the audio or USB PLL */
void Chip_Clock_DisablePLL(CHIP_CGU_USB_AUDIO_PLL_T pllnum)
{
1a012670:	b480      	push	{r7}
1a012672:	b083      	sub	sp, #12
1a012674:	af00      	add	r7, sp, #0
1a012676:	4603      	mov	r3, r0
1a012678:	71fb      	strb	r3, [r7, #7]
	LPC_CGU->PLL[pllnum].PLL_CTRL |= 1;
1a01267a:	490a      	ldr	r1, [pc, #40]	; (1a0126a4 <Chip_Clock_DisablePLL+0x34>)
1a01267c:	79fb      	ldrb	r3, [r7, #7]
1a01267e:	4809      	ldr	r0, [pc, #36]	; (1a0126a4 <Chip_Clock_DisablePLL+0x34>)
1a012680:	79fa      	ldrb	r2, [r7, #7]
1a012682:	0112      	lsls	r2, r2, #4
1a012684:	4402      	add	r2, r0
1a012686:	3220      	adds	r2, #32
1a012688:	6812      	ldr	r2, [r2, #0]
1a01268a:	f042 0201 	orr.w	r2, r2, #1
1a01268e:	011b      	lsls	r3, r3, #4
1a012690:	440b      	add	r3, r1
1a012692:	3320      	adds	r3, #32
1a012694:	601a      	str	r2, [r3, #0]
}
1a012696:	bf00      	nop
1a012698:	370c      	adds	r7, #12
1a01269a:	46bd      	mov	sp, r7
1a01269c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0126a0:	4770      	bx	lr
1a0126a2:	bf00      	nop
1a0126a4:	40050000 	.word	0x40050000

1a0126a8 <Chip_DAC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the DAC peripheral */
void Chip_DAC_Init(LPC_DAC_T *pDAC)
{
1a0126a8:	b580      	push	{r7, lr}
1a0126aa:	b082      	sub	sp, #8
1a0126ac:	af00      	add	r7, sp, #0
1a0126ae:	6078      	str	r0, [r7, #4]
	Chip_Clock_EnableOpts(CLK_APB3_DAC, true, true, 1);
1a0126b0:	2301      	movs	r3, #1
1a0126b2:	2201      	movs	r2, #1
1a0126b4:	2101      	movs	r1, #1
1a0126b6:	2002      	movs	r0, #2
1a0126b8:	f7ff fee2 	bl	1a012480 <Chip_Clock_EnableOpts>

	/* Set maximum update rate 1MHz */
	Chip_DAC_SetBias(pDAC, DAC_MAX_UPDATE_RATE_1MHz);
1a0126bc:	2100      	movs	r1, #0
1a0126be:	6878      	ldr	r0, [r7, #4]
1a0126c0:	f000 f81e 	bl	1a012700 <Chip_DAC_SetBias>
}
1a0126c4:	bf00      	nop
1a0126c6:	3708      	adds	r7, #8
1a0126c8:	46bd      	mov	sp, r7
1a0126ca:	bd80      	pop	{r7, pc}

1a0126cc <Chip_DAC_UpdateValue>:
	Chip_Clock_Disable(CLK_APB3_DAC);
}

/* Update value to DAC buffer*/
void Chip_DAC_UpdateValue(LPC_DAC_T *pDAC, uint32_t dac_value)
{
1a0126cc:	b480      	push	{r7}
1a0126ce:	b085      	sub	sp, #20
1a0126d0:	af00      	add	r7, sp, #0
1a0126d2:	6078      	str	r0, [r7, #4]
1a0126d4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;

	tmp = pDAC->CR & DAC_BIAS_EN;
1a0126d6:	687b      	ldr	r3, [r7, #4]
1a0126d8:	681b      	ldr	r3, [r3, #0]
1a0126da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
1a0126de:	60fb      	str	r3, [r7, #12]
	tmp |= DAC_VALUE(dac_value);
1a0126e0:	683b      	ldr	r3, [r7, #0]
1a0126e2:	019b      	lsls	r3, r3, #6
1a0126e4:	b29b      	uxth	r3, r3
1a0126e6:	68fa      	ldr	r2, [r7, #12]
1a0126e8:	4313      	orrs	r3, r2
1a0126ea:	60fb      	str	r3, [r7, #12]
	/* Update value */
	pDAC->CR = tmp;
1a0126ec:	687b      	ldr	r3, [r7, #4]
1a0126ee:	68fa      	ldr	r2, [r7, #12]
1a0126f0:	601a      	str	r2, [r3, #0]
}
1a0126f2:	bf00      	nop
1a0126f4:	3714      	adds	r7, #20
1a0126f6:	46bd      	mov	sp, r7
1a0126f8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0126fc:	4770      	bx	lr
1a0126fe:	bf00      	nop

1a012700 <Chip_DAC_SetBias>:

/* Set Maximum update rate for DAC */
void Chip_DAC_SetBias(LPC_DAC_T *pDAC, uint32_t bias)
{
1a012700:	b480      	push	{r7}
1a012702:	b083      	sub	sp, #12
1a012704:	af00      	add	r7, sp, #0
1a012706:	6078      	str	r0, [r7, #4]
1a012708:	6039      	str	r1, [r7, #0]
	pDAC->CR &= ~DAC_BIAS_EN;
1a01270a:	687b      	ldr	r3, [r7, #4]
1a01270c:	681b      	ldr	r3, [r3, #0]
1a01270e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
1a012712:	687b      	ldr	r3, [r7, #4]
1a012714:	601a      	str	r2, [r3, #0]

	if (bias  == DAC_MAX_UPDATE_RATE_400kHz) {
1a012716:	683b      	ldr	r3, [r7, #0]
1a012718:	2b01      	cmp	r3, #1
1a01271a:	d105      	bne.n	1a012728 <Chip_DAC_SetBias+0x28>
		pDAC->CR |= DAC_BIAS_EN;
1a01271c:	687b      	ldr	r3, [r7, #4]
1a01271e:	681b      	ldr	r3, [r3, #0]
1a012720:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
1a012724:	687b      	ldr	r3, [r7, #4]
1a012726:	601a      	str	r2, [r3, #0]
	}
}
1a012728:	bf00      	nop
1a01272a:	370c      	adds	r7, #12
1a01272c:	46bd      	mov	sp, r7
1a01272e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012732:	4770      	bx	lr

1a012734 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a012734:	b480      	push	{r7}
1a012736:	b089      	sub	sp, #36	; 0x24
1a012738:	af00      	add	r7, sp, #0
	//                ; Set bits 20-23 to enable CP10 and CP11 coprocessors
	//                ORR R1, R1, #(0xF << 20)
	//                ; Write back the modified value to the CPACR
	//                STR R1, [R0]

	volatile uint32_t *regCpacr = (uint32_t *) LPC_CPACR;
1a01273a:	4b16      	ldr	r3, [pc, #88]	; (1a012794 <fpuInit+0x60>)
1a01273c:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *regMvfr0 = (uint32_t *) SCB_MVFR0;
1a01273e:	4b16      	ldr	r3, [pc, #88]	; (1a012798 <fpuInit+0x64>)
1a012740:	61bb      	str	r3, [r7, #24]
	volatile uint32_t *regMvfr1 = (uint32_t *) SCB_MVFR1;
1a012742:	4b16      	ldr	r3, [pc, #88]	; (1a01279c <fpuInit+0x68>)
1a012744:	617b      	str	r3, [r7, #20]
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;
1a012746:	2300      	movs	r3, #0
1a012748:	74fb      	strb	r3, [r7, #19]

	Mvfr0 = *regMvfr0;
1a01274a:	69bb      	ldr	r3, [r7, #24]
1a01274c:	681b      	ldr	r3, [r3, #0]
1a01274e:	60bb      	str	r3, [r7, #8]
	Mvfr1 = *regMvfr1;
1a012750:	697b      	ldr	r3, [r7, #20]
1a012752:	681b      	ldr	r3, [r3, #0]
1a012754:	607b      	str	r3, [r7, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a012756:	68bb      	ldr	r3, [r7, #8]
1a012758:	4a11      	ldr	r2, [pc, #68]	; (1a0127a0 <fpuInit+0x6c>)
1a01275a:	4293      	cmp	r3, r2
1a01275c:	d105      	bne.n	1a01276a <fpuInit+0x36>
1a01275e:	687b      	ldr	r3, [r7, #4]
1a012760:	4a10      	ldr	r2, [pc, #64]	; (1a0127a4 <fpuInit+0x70>)
1a012762:	4293      	cmp	r3, r2
1a012764:	d101      	bne.n	1a01276a <fpuInit+0x36>
1a012766:	2301      	movs	r3, #1
1a012768:	e000      	b.n	1a01276c <fpuInit+0x38>
1a01276a:	2300      	movs	r3, #0
1a01276c:	74fb      	strb	r3, [r7, #19]

	if (vfpPresent) {
1a01276e:	7cfb      	ldrb	r3, [r7, #19]
1a012770:	2b00      	cmp	r3, #0
1a012772:	d009      	beq.n	1a012788 <fpuInit+0x54>
		Cpacr = *regCpacr;
1a012774:	69fb      	ldr	r3, [r7, #28]
1a012776:	681b      	ldr	r3, [r3, #0]
1a012778:	60fb      	str	r3, [r7, #12]
		Cpacr |= (0xF << 20);
1a01277a:	68fb      	ldr	r3, [r7, #12]
1a01277c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a012780:	60fb      	str	r3, [r7, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a012782:	68fa      	ldr	r2, [r7, #12]
1a012784:	69fb      	ldr	r3, [r7, #28]
1a012786:	601a      	str	r2, [r3, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a012788:	bf00      	nop
1a01278a:	3724      	adds	r7, #36	; 0x24
1a01278c:	46bd      	mov	sp, r7
1a01278e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012792:	4770      	bx	lr
1a012794:	e000ed88 	.word	0xe000ed88
1a012798:	e000ef40 	.word	0xe000ef40
1a01279c:	e000ef44 	.word	0xe000ef44
1a0127a0:	10110021 	.word	0x10110021
1a0127a4:	11000011 	.word	0x11000011

1a0127a8 <enableClk>:
/*****************************************************************************
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
1a0127a8:	b580      	push	{r7, lr}
1a0127aa:	b082      	sub	sp, #8
1a0127ac:	af00      	add	r7, sp, #0
1a0127ae:	4603      	mov	r3, r0
1a0127b0:	71fb      	strb	r3, [r7, #7]
	Chip_Clock_Enable(i2c[id].clk);
1a0127b2:	79fa      	ldrb	r2, [r7, #7]
1a0127b4:	4907      	ldr	r1, [pc, #28]	; (1a0127d4 <enableClk+0x2c>)
1a0127b6:	4613      	mov	r3, r2
1a0127b8:	00db      	lsls	r3, r3, #3
1a0127ba:	1a9b      	subs	r3, r3, r2
1a0127bc:	009b      	lsls	r3, r3, #2
1a0127be:	440b      	add	r3, r1
1a0127c0:	3304      	adds	r3, #4
1a0127c2:	881b      	ldrh	r3, [r3, #0]
1a0127c4:	4618      	mov	r0, r3
1a0127c6:	f7ff fe99 	bl	1a0124fc <Chip_Clock_Enable>
}
1a0127ca:	bf00      	nop
1a0127cc:	3708      	adds	r7, #8
1a0127ce:	46bd      	mov	sp, r7
1a0127d0:	bd80      	pop	{r7, pc}
1a0127d2:	bf00      	nop
1a0127d4:	10086078 	.word	0x10086078

1a0127d8 <disableClk>:

STATIC INLINE void disableClk(I2C_ID_T id)
{
1a0127d8:	b580      	push	{r7, lr}
1a0127da:	b082      	sub	sp, #8
1a0127dc:	af00      	add	r7, sp, #0
1a0127de:	4603      	mov	r3, r0
1a0127e0:	71fb      	strb	r3, [r7, #7]
	Chip_Clock_Disable(i2c[id].clk);
1a0127e2:	79fa      	ldrb	r2, [r7, #7]
1a0127e4:	4907      	ldr	r1, [pc, #28]	; (1a012804 <disableClk+0x2c>)
1a0127e6:	4613      	mov	r3, r2
1a0127e8:	00db      	lsls	r3, r3, #3
1a0127ea:	1a9b      	subs	r3, r3, r2
1a0127ec:	009b      	lsls	r3, r3, #2
1a0127ee:	440b      	add	r3, r1
1a0127f0:	3304      	adds	r3, #4
1a0127f2:	881b      	ldrh	r3, [r3, #0]
1a0127f4:	4618      	mov	r0, r3
1a0127f6:	f7ff fec7 	bl	1a012588 <Chip_Clock_Disable>
}
1a0127fa:	bf00      	nop
1a0127fc:	3708      	adds	r7, #8
1a0127fe:	46bd      	mov	sp, r7
1a012800:	bd80      	pop	{r7, pc}
1a012802:	bf00      	nop
1a012804:	10086078 	.word	0x10086078

1a012808 <getClkRate>:

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
1a012808:	b580      	push	{r7, lr}
1a01280a:	b082      	sub	sp, #8
1a01280c:	af00      	add	r7, sp, #0
1a01280e:	4603      	mov	r3, r0
1a012810:	71fb      	strb	r3, [r7, #7]
	return Chip_Clock_GetRate(i2c[id].clk);
1a012812:	79fa      	ldrb	r2, [r7, #7]
1a012814:	4907      	ldr	r1, [pc, #28]	; (1a012834 <getClkRate+0x2c>)
1a012816:	4613      	mov	r3, r2
1a012818:	00db      	lsls	r3, r3, #3
1a01281a:	1a9b      	subs	r3, r3, r2
1a01281c:	009b      	lsls	r3, r3, #2
1a01281e:	440b      	add	r3, r1
1a012820:	3304      	adds	r3, #4
1a012822:	881b      	ldrh	r3, [r3, #0]
1a012824:	4618      	mov	r0, r3
1a012826:	f7ff fedf 	bl	1a0125e8 <Chip_Clock_GetRate>
1a01282a:	4603      	mov	r3, r0
}
1a01282c:	4618      	mov	r0, r3
1a01282e:	3708      	adds	r7, #8
1a012830:	46bd      	mov	sp, r7
1a012832:	bd80      	pop	{r7, pc}
1a012834:	10086078 	.word	0x10086078

1a012838 <startMasterXfer>:

/* Enable I2C and start master transfer */
STATIC INLINE void startMasterXfer(LPC_I2C_T *pI2C)
{
1a012838:	b480      	push	{r7}
1a01283a:	b083      	sub	sp, #12
1a01283c:	af00      	add	r7, sp, #0
1a01283e:	6078      	str	r0, [r7, #4]
	/* Reset STA, STO, SI */
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a012840:	687b      	ldr	r3, [r7, #4]
1a012842:	222c      	movs	r2, #44	; 0x2c
1a012844:	619a      	str	r2, [r3, #24]

	/* Enter to Master Transmitter mode */
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a012846:	687b      	ldr	r3, [r7, #4]
1a012848:	2260      	movs	r2, #96	; 0x60
1a01284a:	601a      	str	r2, [r3, #0]
}
1a01284c:	bf00      	nop
1a01284e:	370c      	adds	r7, #12
1a012850:	46bd      	mov	sp, r7
1a012852:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012856:	4770      	bx	lr

1a012858 <startSlaverXfer>:

/* Enable I2C and enable slave transfers */
STATIC INLINE void startSlaverXfer(LPC_I2C_T *pI2C)
{
1a012858:	b480      	push	{r7}
1a01285a:	b083      	sub	sp, #12
1a01285c:	af00      	add	r7, sp, #0
1a01285e:	6078      	str	r0, [r7, #4]
	/* Reset STA, STO, SI */
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA;
1a012860:	687b      	ldr	r3, [r7, #4]
1a012862:	2228      	movs	r2, #40	; 0x28
1a012864:	619a      	str	r2, [r3, #24]

	/* Enter to Master Transmitter mode */
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_AA;
1a012866:	687b      	ldr	r3, [r7, #4]
1a012868:	2244      	movs	r2, #68	; 0x44
1a01286a:	601a      	str	r2, [r3, #0]
}
1a01286c:	bf00      	nop
1a01286e:	370c      	adds	r7, #12
1a012870:	46bd      	mov	sp, r7
1a012872:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012876:	4770      	bx	lr

1a012878 <isI2CBusFree>:

/* Check if I2C bus is free */
STATIC INLINE int isI2CBusFree(LPC_I2C_T *pI2C)
{
1a012878:	b480      	push	{r7}
1a01287a:	b083      	sub	sp, #12
1a01287c:	af00      	add	r7, sp, #0
1a01287e:	6078      	str	r0, [r7, #4]
	return !(pI2C->CONSET & I2C_CON_STO);
1a012880:	687b      	ldr	r3, [r7, #4]
1a012882:	681b      	ldr	r3, [r3, #0]
1a012884:	f003 0310 	and.w	r3, r3, #16
1a012888:	2b00      	cmp	r3, #0
1a01288a:	bf0c      	ite	eq
1a01288c:	2301      	moveq	r3, #1
1a01288e:	2300      	movne	r3, #0
1a012890:	b2db      	uxtb	r3, r3
}
1a012892:	4618      	mov	r0, r3
1a012894:	370c      	adds	r7, #12
1a012896:	46bd      	mov	sp, r7
1a012898:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01289c:	4770      	bx	lr
1a01289e:	bf00      	nop

1a0128a0 <getCurState>:

/* Get current state of the I2C peripheral */
STATIC INLINE int getCurState(LPC_I2C_T *pI2C)
{
1a0128a0:	b480      	push	{r7}
1a0128a2:	b083      	sub	sp, #12
1a0128a4:	af00      	add	r7, sp, #0
1a0128a6:	6078      	str	r0, [r7, #4]
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a0128a8:	687b      	ldr	r3, [r7, #4]
1a0128aa:	685b      	ldr	r3, [r3, #4]
1a0128ac:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
}
1a0128b0:	4618      	mov	r0, r3
1a0128b2:	370c      	adds	r7, #12
1a0128b4:	46bd      	mov	sp, r7
1a0128b6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0128ba:	4770      	bx	lr

1a0128bc <handleMasterXferState>:
	return I2C_SLAVE_GENERAL;
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
1a0128bc:	b580      	push	{r7, lr}
1a0128be:	b084      	sub	sp, #16
1a0128c0:	af00      	add	r7, sp, #0
1a0128c2:	6078      	str	r0, [r7, #4]
1a0128c4:	6039      	str	r1, [r7, #0]
	uint32_t cclr = I2C_CON_FLAGS;
1a0128c6:	233c      	movs	r3, #60	; 0x3c
1a0128c8:	60fb      	str	r3, [r7, #12]

	switch (getCurState(pI2C)) {
1a0128ca:	6878      	ldr	r0, [r7, #4]
1a0128cc:	f7ff ffe8 	bl	1a0128a0 <getCurState>
1a0128d0:	4603      	mov	r3, r0
1a0128d2:	2b58      	cmp	r3, #88	; 0x58
1a0128d4:	f200 811d 	bhi.w	1a012b12 <handleMasterXferState+0x256>
1a0128d8:	a201      	add	r2, pc, #4	; (adr r2, 1a0128e0 <handleMasterXferState+0x24>)
1a0128da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0128de:	bf00      	nop
1a0128e0:	1a012b01 	.word	0x1a012b01
1a0128e4:	1a012b13 	.word	0x1a012b13
1a0128e8:	1a012b13 	.word	0x1a012b13
1a0128ec:	1a012b13 	.word	0x1a012b13
1a0128f0:	1a012b13 	.word	0x1a012b13
1a0128f4:	1a012b13 	.word	0x1a012b13
1a0128f8:	1a012b13 	.word	0x1a012b13
1a0128fc:	1a012b13 	.word	0x1a012b13
1a012900:	1a012a45 	.word	0x1a012a45
1a012904:	1a012b13 	.word	0x1a012b13
1a012908:	1a012b13 	.word	0x1a012b13
1a01290c:	1a012b13 	.word	0x1a012b13
1a012910:	1a012b13 	.word	0x1a012b13
1a012914:	1a012b13 	.word	0x1a012b13
1a012918:	1a012b13 	.word	0x1a012b13
1a01291c:	1a012b13 	.word	0x1a012b13
1a012920:	1a012a45 	.word	0x1a012a45
1a012924:	1a012b13 	.word	0x1a012b13
1a012928:	1a012b13 	.word	0x1a012b13
1a01292c:	1a012b13 	.word	0x1a012b13
1a012930:	1a012b13 	.word	0x1a012b13
1a012934:	1a012b13 	.word	0x1a012b13
1a012938:	1a012b13 	.word	0x1a012b13
1a01293c:	1a012b13 	.word	0x1a012b13
1a012940:	1a012a63 	.word	0x1a012a63
1a012944:	1a012b13 	.word	0x1a012b13
1a012948:	1a012b13 	.word	0x1a012b13
1a01294c:	1a012b13 	.word	0x1a012b13
1a012950:	1a012b13 	.word	0x1a012b13
1a012954:	1a012b13 	.word	0x1a012b13
1a012958:	1a012b13 	.word	0x1a012b13
1a01295c:	1a012b13 	.word	0x1a012b13
1a012960:	1a012ad9 	.word	0x1a012ad9
1a012964:	1a012b13 	.word	0x1a012b13
1a012968:	1a012b13 	.word	0x1a012b13
1a01296c:	1a012b13 	.word	0x1a012b13
1a012970:	1a012b13 	.word	0x1a012b13
1a012974:	1a012b13 	.word	0x1a012b13
1a012978:	1a012b13 	.word	0x1a012b13
1a01297c:	1a012b13 	.word	0x1a012b13
1a012980:	1a012a63 	.word	0x1a012a63
1a012984:	1a012b13 	.word	0x1a012b13
1a012988:	1a012b13 	.word	0x1a012b13
1a01298c:	1a012b13 	.word	0x1a012b13
1a012990:	1a012b13 	.word	0x1a012b13
1a012994:	1a012b13 	.word	0x1a012b13
1a012998:	1a012b13 	.word	0x1a012b13
1a01299c:	1a012b13 	.word	0x1a012b13
1a0129a0:	1a012ae9 	.word	0x1a012ae9
1a0129a4:	1a012b13 	.word	0x1a012b13
1a0129a8:	1a012b13 	.word	0x1a012b13
1a0129ac:	1a012b13 	.word	0x1a012b13
1a0129b0:	1a012b13 	.word	0x1a012b13
1a0129b4:	1a012b13 	.word	0x1a012b13
1a0129b8:	1a012b13 	.word	0x1a012b13
1a0129bc:	1a012b13 	.word	0x1a012b13
1a0129c0:	1a012af9 	.word	0x1a012af9
1a0129c4:	1a012b13 	.word	0x1a012b13
1a0129c8:	1a012b13 	.word	0x1a012b13
1a0129cc:	1a012b13 	.word	0x1a012b13
1a0129d0:	1a012b13 	.word	0x1a012b13
1a0129d4:	1a012b13 	.word	0x1a012b13
1a0129d8:	1a012b13 	.word	0x1a012b13
1a0129dc:	1a012b13 	.word	0x1a012b13
1a0129e0:	1a012ac7 	.word	0x1a012ac7
1a0129e4:	1a012b13 	.word	0x1a012b13
1a0129e8:	1a012b13 	.word	0x1a012b13
1a0129ec:	1a012b13 	.word	0x1a012b13
1a0129f0:	1a012b13 	.word	0x1a012b13
1a0129f4:	1a012b13 	.word	0x1a012b13
1a0129f8:	1a012b13 	.word	0x1a012b13
1a0129fc:	1a012b13 	.word	0x1a012b13
1a012a00:	1a012ad9 	.word	0x1a012ad9
1a012a04:	1a012b13 	.word	0x1a012b13
1a012a08:	1a012b13 	.word	0x1a012b13
1a012a0c:	1a012b13 	.word	0x1a012b13
1a012a10:	1a012b13 	.word	0x1a012b13
1a012a14:	1a012b13 	.word	0x1a012b13
1a012a18:	1a012b13 	.word	0x1a012b13
1a012a1c:	1a012b13 	.word	0x1a012b13
1a012a20:	1a012aab 	.word	0x1a012aab
1a012a24:	1a012b13 	.word	0x1a012b13
1a012a28:	1a012b13 	.word	0x1a012b13
1a012a2c:	1a012b13 	.word	0x1a012b13
1a012a30:	1a012b13 	.word	0x1a012b13
1a012a34:	1a012b13 	.word	0x1a012b13
1a012a38:	1a012b13 	.word	0x1a012b13
1a012a3c:	1a012b13 	.word	0x1a012b13
1a012a40:	1a012aa3 	.word	0x1a012aa3
	case 0x08:		/* Start condition on bus */
	case 0x10:		/* Repeated start condition */
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a012a44:	683b      	ldr	r3, [r7, #0]
1a012a46:	781b      	ldrb	r3, [r3, #0]
1a012a48:	005b      	lsls	r3, r3, #1
1a012a4a:	683a      	ldr	r2, [r7, #0]
1a012a4c:	6892      	ldr	r2, [r2, #8]
1a012a4e:	2a00      	cmp	r2, #0
1a012a50:	bf0c      	ite	eq
1a012a52:	2201      	moveq	r2, #1
1a012a54:	2200      	movne	r2, #0
1a012a56:	b2d2      	uxtb	r2, r2
1a012a58:	4313      	orrs	r3, r2
1a012a5a:	461a      	mov	r2, r3
1a012a5c:	687b      	ldr	r3, [r7, #4]
1a012a5e:	609a      	str	r2, [r3, #8]
		break;
1a012a60:	e057      	b.n	1a012b12 <handleMasterXferState+0x256>

	/* Tx handling */
	case 0x18:		/* SLA+W sent and ACK received */
	case 0x28:		/* DATA sent and ACK received */
		if (!xfer->txSz) {
1a012a62:	683b      	ldr	r3, [r7, #0]
1a012a64:	689b      	ldr	r3, [r3, #8]
1a012a66:	2b00      	cmp	r3, #0
1a012a68:	d10c      	bne.n	1a012a84 <handleMasterXferState+0x1c8>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a012a6a:	683b      	ldr	r3, [r7, #0]
1a012a6c:	691b      	ldr	r3, [r3, #16]
1a012a6e:	2b00      	cmp	r3, #0
1a012a70:	d002      	beq.n	1a012a78 <handleMasterXferState+0x1bc>
1a012a72:	f06f 0320 	mvn.w	r3, #32
1a012a76:	e001      	b.n	1a012a7c <handleMasterXferState+0x1c0>
1a012a78:	f06f 0310 	mvn.w	r3, #16
1a012a7c:	68fa      	ldr	r2, [r7, #12]
1a012a7e:	4013      	ands	r3, r2
1a012a80:	60fb      	str	r3, [r7, #12]
		}
		else {
			pI2C->DAT = *xfer->txBuff++;
			xfer->txSz--;
		}
		break;
1a012a82:	e046      	b.n	1a012b12 <handleMasterXferState+0x256>
	case 0x28:		/* DATA sent and ACK received */
		if (!xfer->txSz) {
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
		}
		else {
			pI2C->DAT = *xfer->txBuff++;
1a012a84:	683b      	ldr	r3, [r7, #0]
1a012a86:	685b      	ldr	r3, [r3, #4]
1a012a88:	1c59      	adds	r1, r3, #1
1a012a8a:	683a      	ldr	r2, [r7, #0]
1a012a8c:	6051      	str	r1, [r2, #4]
1a012a8e:	781b      	ldrb	r3, [r3, #0]
1a012a90:	461a      	mov	r2, r3
1a012a92:	687b      	ldr	r3, [r7, #4]
1a012a94:	609a      	str	r2, [r3, #8]
			xfer->txSz--;
1a012a96:	683b      	ldr	r3, [r7, #0]
1a012a98:	689b      	ldr	r3, [r3, #8]
1a012a9a:	1e5a      	subs	r2, r3, #1
1a012a9c:	683b      	ldr	r3, [r7, #0]
1a012a9e:	609a      	str	r2, [r3, #8]
		}
		break;
1a012aa0:	e037      	b.n	1a012b12 <handleMasterXferState+0x256>

	/* Rx handling */
	case 0x58:		/* Data Received and NACK sent */
		cclr &= ~I2C_CON_STO;
1a012aa2:	68fb      	ldr	r3, [r7, #12]
1a012aa4:	f023 0310 	bic.w	r3, r3, #16
1a012aa8:	60fb      	str	r3, [r7, #12]

	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
1a012aaa:	683b      	ldr	r3, [r7, #0]
1a012aac:	68db      	ldr	r3, [r3, #12]
1a012aae:	1c59      	adds	r1, r3, #1
1a012ab0:	683a      	ldr	r2, [r7, #0]
1a012ab2:	60d1      	str	r1, [r2, #12]
1a012ab4:	687a      	ldr	r2, [r7, #4]
1a012ab6:	6892      	ldr	r2, [r2, #8]
1a012ab8:	b2d2      	uxtb	r2, r2
1a012aba:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a012abc:	683b      	ldr	r3, [r7, #0]
1a012abe:	691b      	ldr	r3, [r3, #16]
1a012ac0:	1e5a      	subs	r2, r3, #1
1a012ac2:	683b      	ldr	r3, [r7, #0]
1a012ac4:	611a      	str	r2, [r3, #16]

	case 0x40:		/* SLA+R sent and ACK received */
		if (xfer->rxSz > 1) {
1a012ac6:	683b      	ldr	r3, [r7, #0]
1a012ac8:	691b      	ldr	r3, [r3, #16]
1a012aca:	2b01      	cmp	r3, #1
1a012acc:	dd20      	ble.n	1a012b10 <handleMasterXferState+0x254>
			cclr &= ~I2C_CON_AA;
1a012ace:	68fb      	ldr	r3, [r7, #12]
1a012ad0:	f023 0304 	bic.w	r3, r3, #4
1a012ad4:	60fb      	str	r3, [r7, #12]
		}
		break;
1a012ad6:	e01b      	b.n	1a012b10 <handleMasterXferState+0x254>

	/* NAK Handling */
	case 0x20:		/* SLA+W sent NAK received */
	case 0x48:		/* SLA+R sent NAK received */
		xfer->status = I2C_STATUS_SLAVENAK;
1a012ad8:	683b      	ldr	r3, [r7, #0]
1a012ada:	2205      	movs	r2, #5
1a012adc:	751a      	strb	r2, [r3, #20]
		cclr &= ~I2C_CON_STO;
1a012ade:	68fb      	ldr	r3, [r7, #12]
1a012ae0:	f023 0310 	bic.w	r3, r3, #16
1a012ae4:	60fb      	str	r3, [r7, #12]
		break;
1a012ae6:	e014      	b.n	1a012b12 <handleMasterXferState+0x256>

	case 0x30:		/* DATA sent NAK received */
		xfer->status = I2C_STATUS_NAK;
1a012ae8:	683b      	ldr	r3, [r7, #0]
1a012aea:	2201      	movs	r2, #1
1a012aec:	751a      	strb	r2, [r3, #20]
		cclr &= ~I2C_CON_STO;
1a012aee:	68fb      	ldr	r3, [r7, #12]
1a012af0:	f023 0310 	bic.w	r3, r3, #16
1a012af4:	60fb      	str	r3, [r7, #12]
		break;
1a012af6:	e00c      	b.n	1a012b12 <handleMasterXferState+0x256>

	case 0x38:		/* Arbitration lost */
		xfer->status = I2C_STATUS_ARBLOST;
1a012af8:	683b      	ldr	r3, [r7, #0]
1a012afa:	2202      	movs	r2, #2
1a012afc:	751a      	strb	r2, [r3, #20]
		break;
1a012afe:	e008      	b.n	1a012b12 <handleMasterXferState+0x256>

	/* Bus Error */
	case 0x00:
		xfer->status = I2C_STATUS_BUSERR;
1a012b00:	683b      	ldr	r3, [r7, #0]
1a012b02:	2203      	movs	r2, #3
1a012b04:	751a      	strb	r2, [r3, #20]
		cclr &= ~I2C_CON_STO;
1a012b06:	68fb      	ldr	r3, [r7, #12]
1a012b08:	f023 0310 	bic.w	r3, r3, #16
1a012b0c:	60fb      	str	r3, [r7, #12]
1a012b0e:	e000      	b.n	1a012b12 <handleMasterXferState+0x256>

	case 0x40:		/* SLA+R sent and ACK received */
		if (xfer->rxSz > 1) {
			cclr &= ~I2C_CON_AA;
		}
		break;
1a012b10:	bf00      	nop
		xfer->status = I2C_STATUS_BUSERR;
		cclr &= ~I2C_CON_STO;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a012b12:	68fb      	ldr	r3, [r7, #12]
1a012b14:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a012b18:	687b      	ldr	r3, [r7, #4]
1a012b1a:	601a      	str	r2, [r3, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a012b1c:	68fb      	ldr	r3, [r7, #12]
1a012b1e:	f023 0210 	bic.w	r2, r3, #16
1a012b22:	687b      	ldr	r3, [r7, #4]
1a012b24:	619a      	str	r2, [r3, #24]

	/* If stopped return 0 */
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a012b26:	68fb      	ldr	r3, [r7, #12]
1a012b28:	f003 0310 	and.w	r3, r3, #16
1a012b2c:	2b00      	cmp	r3, #0
1a012b2e:	d003      	beq.n	1a012b38 <handleMasterXferState+0x27c>
1a012b30:	683b      	ldr	r3, [r7, #0]
1a012b32:	7d1b      	ldrb	r3, [r3, #20]
1a012b34:	2b02      	cmp	r3, #2
1a012b36:	d108      	bne.n	1a012b4a <handleMasterXferState+0x28e>
		if (xfer->status == I2C_STATUS_BUSY) {
1a012b38:	683b      	ldr	r3, [r7, #0]
1a012b3a:	7d1b      	ldrb	r3, [r3, #20]
1a012b3c:	2b04      	cmp	r3, #4
1a012b3e:	d102      	bne.n	1a012b46 <handleMasterXferState+0x28a>
			xfer->status = I2C_STATUS_DONE;
1a012b40:	683b      	ldr	r3, [r7, #0]
1a012b42:	2200      	movs	r2, #0
1a012b44:	751a      	strb	r2, [r3, #20]
		}
		return 0;
1a012b46:	2300      	movs	r3, #0
1a012b48:	e000      	b.n	1a012b4c <handleMasterXferState+0x290>
	}
	return 1;
1a012b4a:	2301      	movs	r3, #1
}
1a012b4c:	4618      	mov	r0, r3
1a012b4e:	3710      	adds	r7, #16
1a012b50:	46bd      	mov	sp, r7
1a012b52:	bd80      	pop	{r7, pc}

1a012b54 <Chip_I2C_EventHandler>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Chip event handler interrupt based */
void Chip_I2C_EventHandler(I2C_ID_T id, I2C_EVENT_T event)
{
1a012b54:	b480      	push	{r7}
1a012b56:	b085      	sub	sp, #20
1a012b58:	af00      	add	r7, sp, #0
1a012b5a:	4603      	mov	r3, r0
1a012b5c:	460a      	mov	r2, r1
1a012b5e:	71fb      	strb	r3, [r7, #7]
1a012b60:	4613      	mov	r3, r2
1a012b62:	71bb      	strb	r3, [r7, #6]
	struct i2c_interface *iic = &i2c[id];
1a012b64:	79fa      	ldrb	r2, [r7, #7]
1a012b66:	4613      	mov	r3, r2
1a012b68:	00db      	lsls	r3, r3, #3
1a012b6a:	1a9b      	subs	r3, r3, r2
1a012b6c:	009b      	lsls	r3, r3, #2
1a012b6e:	4a0b      	ldr	r2, [pc, #44]	; (1a012b9c <Chip_I2C_EventHandler+0x48>)
1a012b70:	4413      	add	r3, r2
1a012b72:	60fb      	str	r3, [r7, #12]
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a012b74:	79bb      	ldrb	r3, [r7, #6]
1a012b76:	2b01      	cmp	r3, #1
1a012b78:	d10a      	bne.n	1a012b90 <Chip_I2C_EventHandler+0x3c>
		return;
	}

	stat = &iic->mXfer->status;
1a012b7a:	68fb      	ldr	r3, [r7, #12]
1a012b7c:	691b      	ldr	r3, [r3, #16]
1a012b7e:	3314      	adds	r3, #20
1a012b80:	60bb      	str	r3, [r7, #8]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a012b82:	bf00      	nop
1a012b84:	68bb      	ldr	r3, [r7, #8]
1a012b86:	781b      	ldrb	r3, [r3, #0]
1a012b88:	b2db      	uxtb	r3, r3
1a012b8a:	2b04      	cmp	r3, #4
1a012b8c:	d0fa      	beq.n	1a012b84 <Chip_I2C_EventHandler+0x30>
1a012b8e:	e000      	b.n	1a012b92 <Chip_I2C_EventHandler+0x3e>
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
		return;
1a012b90:	bf00      	nop
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a012b92:	3714      	adds	r7, #20
1a012b94:	46bd      	mov	sp, r7
1a012b96:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012b9a:	4770      	bx	lr
1a012b9c:	10086078 	.word	0x10086078

1a012ba0 <Chip_I2C_EventHandlerPolling>:

/* Chip polling event handler */
void Chip_I2C_EventHandlerPolling(I2C_ID_T id, I2C_EVENT_T event)
{
1a012ba0:	b580      	push	{r7, lr}
1a012ba2:	b084      	sub	sp, #16
1a012ba4:	af00      	add	r7, sp, #0
1a012ba6:	4603      	mov	r3, r0
1a012ba8:	460a      	mov	r2, r1
1a012baa:	71fb      	strb	r3, [r7, #7]
1a012bac:	4613      	mov	r3, r2
1a012bae:	71bb      	strb	r3, [r7, #6]
	struct i2c_interface *iic = &i2c[id];
1a012bb0:	79fa      	ldrb	r2, [r7, #7]
1a012bb2:	4613      	mov	r3, r2
1a012bb4:	00db      	lsls	r3, r3, #3
1a012bb6:	1a9b      	subs	r3, r3, r2
1a012bb8:	009b      	lsls	r3, r3, #2
1a012bba:	4a10      	ldr	r2, [pc, #64]	; (1a012bfc <Chip_I2C_EventHandlerPolling+0x5c>)
1a012bbc:	4413      	add	r3, r2
1a012bbe:	60fb      	str	r3, [r7, #12]
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a012bc0:	79bb      	ldrb	r3, [r7, #6]
1a012bc2:	2b01      	cmp	r3, #1
1a012bc4:	d115      	bne.n	1a012bf2 <Chip_I2C_EventHandlerPolling+0x52>
		return;
	}

	stat = &iic->mXfer->status;
1a012bc6:	68fb      	ldr	r3, [r7, #12]
1a012bc8:	691b      	ldr	r3, [r3, #16]
1a012bca:	3314      	adds	r3, #20
1a012bcc:	60bb      	str	r3, [r7, #8]
	/* Call the state change handler till xfer is done */
	while (*stat == I2C_STATUS_BUSY) {
1a012bce:	e00a      	b.n	1a012be6 <Chip_I2C_EventHandlerPolling+0x46>
		if (Chip_I2C_IsStateChanged(id)) {
1a012bd0:	79fb      	ldrb	r3, [r7, #7]
1a012bd2:	4618      	mov	r0, r3
1a012bd4:	f000 f996 	bl	1a012f04 <Chip_I2C_IsStateChanged>
1a012bd8:	4603      	mov	r3, r0
1a012bda:	2b00      	cmp	r3, #0
1a012bdc:	d003      	beq.n	1a012be6 <Chip_I2C_EventHandlerPolling+0x46>
			Chip_I2C_MasterStateHandler(id);
1a012bde:	79fb      	ldrb	r3, [r7, #7]
1a012be0:	4618      	mov	r0, r3
1a012be2:	f000 f95f 	bl	1a012ea4 <Chip_I2C_MasterStateHandler>
		return;
	}

	stat = &iic->mXfer->status;
	/* Call the state change handler till xfer is done */
	while (*stat == I2C_STATUS_BUSY) {
1a012be6:	68bb      	ldr	r3, [r7, #8]
1a012be8:	781b      	ldrb	r3, [r3, #0]
1a012bea:	b2db      	uxtb	r3, r3
1a012bec:	2b04      	cmp	r3, #4
1a012bee:	d0ef      	beq.n	1a012bd0 <Chip_I2C_EventHandlerPolling+0x30>
1a012bf0:	e000      	b.n	1a012bf4 <Chip_I2C_EventHandlerPolling+0x54>
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
		return;
1a012bf2:	bf00      	nop
	while (*stat == I2C_STATUS_BUSY) {
		if (Chip_I2C_IsStateChanged(id)) {
			Chip_I2C_MasterStateHandler(id);
		}
	}
}
1a012bf4:	3710      	adds	r7, #16
1a012bf6:	46bd      	mov	sp, r7
1a012bf8:	bd80      	pop	{r7, pc}
1a012bfa:	bf00      	nop
1a012bfc:	10086078 	.word	0x10086078

1a012c00 <Chip_I2C_Init>:

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a012c00:	b580      	push	{r7, lr}
1a012c02:	b082      	sub	sp, #8
1a012c04:	af00      	add	r7, sp, #0
1a012c06:	4603      	mov	r3, r0
1a012c08:	71fb      	strb	r3, [r7, #7]
	enableClk(id);
1a012c0a:	79fb      	ldrb	r3, [r7, #7]
1a012c0c:	4618      	mov	r0, r3
1a012c0e:	f7ff fdcb 	bl	1a0127a8 <enableClk>

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a012c12:	79fa      	ldrb	r2, [r7, #7]
1a012c14:	4906      	ldr	r1, [pc, #24]	; (1a012c30 <Chip_I2C_Init+0x30>)
1a012c16:	4613      	mov	r3, r2
1a012c18:	00db      	lsls	r3, r3, #3
1a012c1a:	1a9b      	subs	r3, r3, r2
1a012c1c:	009b      	lsls	r3, r3, #2
1a012c1e:	440b      	add	r3, r1
1a012c20:	681b      	ldr	r3, [r3, #0]
1a012c22:	226c      	movs	r2, #108	; 0x6c
1a012c24:	619a      	str	r2, [r3, #24]
}
1a012c26:	bf00      	nop
1a012c28:	3708      	adds	r7, #8
1a012c2a:	46bd      	mov	sp, r7
1a012c2c:	bd80      	pop	{r7, pc}
1a012c2e:	bf00      	nop
1a012c30:	10086078 	.word	0x10086078

1a012c34 <Chip_I2C_DeInit>:

/* De-initializes the I2C peripheral registers to their default reset values */
void Chip_I2C_DeInit(I2C_ID_T id)
{
1a012c34:	b580      	push	{r7, lr}
1a012c36:	b082      	sub	sp, #8
1a012c38:	af00      	add	r7, sp, #0
1a012c3a:	4603      	mov	r3, r0
1a012c3c:	71fb      	strb	r3, [r7, #7]
	/* Disable I2C control */
	LPC_I2Cx(id)->CONCLR = I2C_CON_I2EN | I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a012c3e:	79fa      	ldrb	r2, [r7, #7]
1a012c40:	4908      	ldr	r1, [pc, #32]	; (1a012c64 <Chip_I2C_DeInit+0x30>)
1a012c42:	4613      	mov	r3, r2
1a012c44:	00db      	lsls	r3, r3, #3
1a012c46:	1a9b      	subs	r3, r3, r2
1a012c48:	009b      	lsls	r3, r3, #2
1a012c4a:	440b      	add	r3, r1
1a012c4c:	681b      	ldr	r3, [r3, #0]
1a012c4e:	226c      	movs	r2, #108	; 0x6c
1a012c50:	619a      	str	r2, [r3, #24]

	disableClk(id);
1a012c52:	79fb      	ldrb	r3, [r7, #7]
1a012c54:	4618      	mov	r0, r3
1a012c56:	f7ff fdbf 	bl	1a0127d8 <disableClk>
}
1a012c5a:	bf00      	nop
1a012c5c:	3708      	adds	r7, #8
1a012c5e:	46bd      	mov	sp, r7
1a012c60:	bd80      	pop	{r7, pc}
1a012c62:	bf00      	nop
1a012c64:	10086078 	.word	0x10086078

1a012c68 <Chip_I2C_SetClockRate>:

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a012c68:	b580      	push	{r7, lr}
1a012c6a:	b084      	sub	sp, #16
1a012c6c:	af00      	add	r7, sp, #0
1a012c6e:	4603      	mov	r3, r0
1a012c70:	6039      	str	r1, [r7, #0]
1a012c72:	71fb      	strb	r3, [r7, #7]
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a012c74:	79fb      	ldrb	r3, [r7, #7]
1a012c76:	4618      	mov	r0, r3
1a012c78:	f7ff fdc6 	bl	1a012808 <getClkRate>
1a012c7c:	4602      	mov	r2, r0
1a012c7e:	683b      	ldr	r3, [r7, #0]
1a012c80:	fbb2 f3f3 	udiv	r3, r2, r3
1a012c84:	60fb      	str	r3, [r7, #12]
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a012c86:	79fa      	ldrb	r2, [r7, #7]
1a012c88:	4910      	ldr	r1, [pc, #64]	; (1a012ccc <Chip_I2C_SetClockRate+0x64>)
1a012c8a:	4613      	mov	r3, r2
1a012c8c:	00db      	lsls	r3, r3, #3
1a012c8e:	1a9b      	subs	r3, r3, r2
1a012c90:	009b      	lsls	r3, r3, #2
1a012c92:	440b      	add	r3, r1
1a012c94:	681b      	ldr	r3, [r3, #0]
1a012c96:	68fa      	ldr	r2, [r7, #12]
1a012c98:	0852      	lsrs	r2, r2, #1
1a012c9a:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a012c9c:	79fa      	ldrb	r2, [r7, #7]
1a012c9e:	490b      	ldr	r1, [pc, #44]	; (1a012ccc <Chip_I2C_SetClockRate+0x64>)
1a012ca0:	4613      	mov	r3, r2
1a012ca2:	00db      	lsls	r3, r3, #3
1a012ca4:	1a9b      	subs	r3, r3, r2
1a012ca6:	009b      	lsls	r3, r3, #2
1a012ca8:	440b      	add	r3, r1
1a012caa:	6819      	ldr	r1, [r3, #0]
1a012cac:	79fa      	ldrb	r2, [r7, #7]
1a012cae:	4807      	ldr	r0, [pc, #28]	; (1a012ccc <Chip_I2C_SetClockRate+0x64>)
1a012cb0:	4613      	mov	r3, r2
1a012cb2:	00db      	lsls	r3, r3, #3
1a012cb4:	1a9b      	subs	r3, r3, r2
1a012cb6:	009b      	lsls	r3, r3, #2
1a012cb8:	4403      	add	r3, r0
1a012cba:	681b      	ldr	r3, [r3, #0]
1a012cbc:	691b      	ldr	r3, [r3, #16]
1a012cbe:	68fa      	ldr	r2, [r7, #12]
1a012cc0:	1ad3      	subs	r3, r2, r3
1a012cc2:	614b      	str	r3, [r1, #20]
}
1a012cc4:	bf00      	nop
1a012cc6:	3710      	adds	r7, #16
1a012cc8:	46bd      	mov	sp, r7
1a012cca:	bd80      	pop	{r7, pc}
1a012ccc:	10086078 	.word	0x10086078

1a012cd0 <Chip_I2C_SetMasterEventHandler>:
	return getClkRate(id) / (LPC_I2Cx(id)->SCLH + LPC_I2Cx(id)->SCLL);
}

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
1a012cd0:	b480      	push	{r7}
1a012cd2:	b085      	sub	sp, #20
1a012cd4:	af00      	add	r7, sp, #0
1a012cd6:	4603      	mov	r3, r0
1a012cd8:	6039      	str	r1, [r7, #0]
1a012cda:	71fb      	strb	r3, [r7, #7]
	struct i2c_interface *iic = &i2c[id];
1a012cdc:	79fa      	ldrb	r2, [r7, #7]
1a012cde:	4613      	mov	r3, r2
1a012ce0:	00db      	lsls	r3, r3, #3
1a012ce2:	1a9b      	subs	r3, r3, r2
1a012ce4:	009b      	lsls	r3, r3, #2
1a012ce6:	4a0c      	ldr	r2, [pc, #48]	; (1a012d18 <Chip_I2C_SetMasterEventHandler+0x48>)
1a012ce8:	4413      	add	r3, r2
1a012cea:	60fb      	str	r3, [r7, #12]
	if (!iic->mXfer) {
1a012cec:	68fb      	ldr	r3, [r7, #12]
1a012cee:	691b      	ldr	r3, [r3, #16]
1a012cf0:	2b00      	cmp	r3, #0
1a012cf2:	d102      	bne.n	1a012cfa <Chip_I2C_SetMasterEventHandler+0x2a>
		iic->mEvent = event;
1a012cf4:	68fb      	ldr	r3, [r7, #12]
1a012cf6:	683a      	ldr	r2, [r7, #0]
1a012cf8:	609a      	str	r2, [r3, #8]
	}
	return iic->mEvent == event;
1a012cfa:	68fb      	ldr	r3, [r7, #12]
1a012cfc:	689a      	ldr	r2, [r3, #8]
1a012cfe:	683b      	ldr	r3, [r7, #0]
1a012d00:	429a      	cmp	r2, r3
1a012d02:	bf0c      	ite	eq
1a012d04:	2301      	moveq	r3, #1
1a012d06:	2300      	movne	r3, #0
1a012d08:	b2db      	uxtb	r3, r3
}
1a012d0a:	4618      	mov	r0, r3
1a012d0c:	3714      	adds	r7, #20
1a012d0e:	46bd      	mov	sp, r7
1a012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012d14:	4770      	bx	lr
1a012d16:	bf00      	nop
1a012d18:	10086078 	.word	0x10086078

1a012d1c <Chip_I2C_MasterTransfer>:
	return i2c[id].mEvent;
}

/* Transmit and Receive data in master mode */
int Chip_I2C_MasterTransfer(I2C_ID_T id, I2C_XFER_T *xfer)
{
1a012d1c:	b580      	push	{r7, lr}
1a012d1e:	b084      	sub	sp, #16
1a012d20:	af00      	add	r7, sp, #0
1a012d22:	4603      	mov	r3, r0
1a012d24:	6039      	str	r1, [r7, #0]
1a012d26:	71fb      	strb	r3, [r7, #7]
	struct i2c_interface *iic = &i2c[id];
1a012d28:	79fa      	ldrb	r2, [r7, #7]
1a012d2a:	4613      	mov	r3, r2
1a012d2c:	00db      	lsls	r3, r3, #3
1a012d2e:	1a9b      	subs	r3, r3, r2
1a012d30:	009b      	lsls	r3, r3, #2
1a012d32:	4a20      	ldr	r2, [pc, #128]	; (1a012db4 <Chip_I2C_MasterTransfer+0x98>)
1a012d34:	4413      	add	r3, r2
1a012d36:	60fb      	str	r3, [r7, #12]

	iic->mEvent(id, I2C_EVENT_LOCK);
1a012d38:	68fb      	ldr	r3, [r7, #12]
1a012d3a:	689b      	ldr	r3, [r3, #8]
1a012d3c:	79fa      	ldrb	r2, [r7, #7]
1a012d3e:	2103      	movs	r1, #3
1a012d40:	4610      	mov	r0, r2
1a012d42:	4798      	blx	r3
	xfer->status = I2C_STATUS_BUSY;
1a012d44:	683b      	ldr	r3, [r7, #0]
1a012d46:	2204      	movs	r2, #4
1a012d48:	751a      	strb	r2, [r3, #20]
	iic->mXfer = xfer;
1a012d4a:	68fb      	ldr	r3, [r7, #12]
1a012d4c:	683a      	ldr	r2, [r7, #0]
1a012d4e:	611a      	str	r2, [r3, #16]

	/* If slave xfer not in progress */
	if (!iic->sXfer) {
1a012d50:	68fb      	ldr	r3, [r7, #12]
1a012d52:	695b      	ldr	r3, [r3, #20]
1a012d54:	2b00      	cmp	r3, #0
1a012d56:	d104      	bne.n	1a012d62 <Chip_I2C_MasterTransfer+0x46>
		startMasterXfer(iic->ip);
1a012d58:	68fb      	ldr	r3, [r7, #12]
1a012d5a:	681b      	ldr	r3, [r3, #0]
1a012d5c:	4618      	mov	r0, r3
1a012d5e:	f7ff fd6b 	bl	1a012838 <startMasterXfer>
	}
	iic->mEvent(id, I2C_EVENT_WAIT);
1a012d62:	68fb      	ldr	r3, [r7, #12]
1a012d64:	689b      	ldr	r3, [r3, #8]
1a012d66:	79fa      	ldrb	r2, [r7, #7]
1a012d68:	2101      	movs	r1, #1
1a012d6a:	4610      	mov	r0, r2
1a012d6c:	4798      	blx	r3
	iic->mXfer = 0;
1a012d6e:	68fb      	ldr	r3, [r7, #12]
1a012d70:	2200      	movs	r2, #0
1a012d72:	611a      	str	r2, [r3, #16]

	/* Wait for stop condition to appear on bus */
	while (!isI2CBusFree(iic->ip)) {}
1a012d74:	bf00      	nop
1a012d76:	68fb      	ldr	r3, [r7, #12]
1a012d78:	681b      	ldr	r3, [r3, #0]
1a012d7a:	4618      	mov	r0, r3
1a012d7c:	f7ff fd7c 	bl	1a012878 <isI2CBusFree>
1a012d80:	4603      	mov	r3, r0
1a012d82:	2b00      	cmp	r3, #0
1a012d84:	d0f7      	beq.n	1a012d76 <Chip_I2C_MasterTransfer+0x5a>

	/* Start slave if one is active */
	if (SLAVE_ACTIVE(iic)) {
1a012d86:	68fb      	ldr	r3, [r7, #12]
1a012d88:	699b      	ldr	r3, [r3, #24]
1a012d8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
1a012d8e:	2b00      	cmp	r3, #0
1a012d90:	d004      	beq.n	1a012d9c <Chip_I2C_MasterTransfer+0x80>
		startSlaverXfer(iic->ip);
1a012d92:	68fb      	ldr	r3, [r7, #12]
1a012d94:	681b      	ldr	r3, [r3, #0]
1a012d96:	4618      	mov	r0, r3
1a012d98:	f7ff fd5e 	bl	1a012858 <startSlaverXfer>
	}

	iic->mEvent(id, I2C_EVENT_UNLOCK);
1a012d9c:	68fb      	ldr	r3, [r7, #12]
1a012d9e:	689b      	ldr	r3, [r3, #8]
1a012da0:	79fa      	ldrb	r2, [r7, #7]
1a012da2:	2104      	movs	r1, #4
1a012da4:	4610      	mov	r0, r2
1a012da6:	4798      	blx	r3
	return (int) xfer->status;
1a012da8:	683b      	ldr	r3, [r7, #0]
1a012daa:	7d1b      	ldrb	r3, [r3, #20]
}
1a012dac:	4618      	mov	r0, r3
1a012dae:	3710      	adds	r7, #16
1a012db0:	46bd      	mov	sp, r7
1a012db2:	bd80      	pop	{r7, pc}
1a012db4:	10086078 	.word	0x10086078

1a012db8 <Chip_I2C_MasterSend>:

/* Master tx only */
int Chip_I2C_MasterSend(I2C_ID_T id, uint8_t slaveAddr, const uint8_t *buff, uint8_t len)
{
1a012db8:	b580      	push	{r7, lr}
1a012dba:	b08a      	sub	sp, #40	; 0x28
1a012dbc:	af00      	add	r7, sp, #0
1a012dbe:	603a      	str	r2, [r7, #0]
1a012dc0:	461a      	mov	r2, r3
1a012dc2:	4603      	mov	r3, r0
1a012dc4:	71fb      	strb	r3, [r7, #7]
1a012dc6:	460b      	mov	r3, r1
1a012dc8:	71bb      	strb	r3, [r7, #6]
1a012dca:	4613      	mov	r3, r2
1a012dcc:	717b      	strb	r3, [r7, #5]
	I2C_XFER_T xfer = {0};
1a012dce:	f107 030c 	add.w	r3, r7, #12
1a012dd2:	2200      	movs	r2, #0
1a012dd4:	601a      	str	r2, [r3, #0]
1a012dd6:	605a      	str	r2, [r3, #4]
1a012dd8:	609a      	str	r2, [r3, #8]
1a012dda:	60da      	str	r2, [r3, #12]
1a012ddc:	611a      	str	r2, [r3, #16]
1a012dde:	615a      	str	r2, [r3, #20]
	xfer.slaveAddr = slaveAddr;
1a012de0:	79bb      	ldrb	r3, [r7, #6]
1a012de2:	733b      	strb	r3, [r7, #12]
	xfer.txBuff = buff;
1a012de4:	683b      	ldr	r3, [r7, #0]
1a012de6:	613b      	str	r3, [r7, #16]
	xfer.txSz = len;
1a012de8:	797b      	ldrb	r3, [r7, #5]
1a012dea:	617b      	str	r3, [r7, #20]
	uint32_t timeout = TIMEOUT * len;
1a012dec:	797b      	ldrb	r3, [r7, #5]
1a012dee:	f64e 2260 	movw	r2, #60000	; 0xea60
1a012df2:	fb02 f303 	mul.w	r3, r2, r3
1a012df6:	627b      	str	r3, [r7, #36]	; 0x24
	while (Chip_I2C_MasterTransfer(id, &xfer) == I2C_STATUS_ARBLOST) {
1a012df8:	e004      	b.n	1a012e04 <Chip_I2C_MasterSend+0x4c>
		if (timeout-- == 0) {
1a012dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a012dfc:	1e5a      	subs	r2, r3, #1
1a012dfe:	627a      	str	r2, [r7, #36]	; 0x24
1a012e00:	2b00      	cmp	r3, #0
1a012e02:	d00a      	beq.n	1a012e1a <Chip_I2C_MasterSend+0x62>
	I2C_XFER_T xfer = {0};
	xfer.slaveAddr = slaveAddr;
	xfer.txBuff = buff;
	xfer.txSz = len;
	uint32_t timeout = TIMEOUT * len;
	while (Chip_I2C_MasterTransfer(id, &xfer) == I2C_STATUS_ARBLOST) {
1a012e04:	f107 020c 	add.w	r2, r7, #12
1a012e08:	79fb      	ldrb	r3, [r7, #7]
1a012e0a:	4611      	mov	r1, r2
1a012e0c:	4618      	mov	r0, r3
1a012e0e:	f7ff ff85 	bl	1a012d1c <Chip_I2C_MasterTransfer>
1a012e12:	4603      	mov	r3, r0
1a012e14:	2b02      	cmp	r3, #2
1a012e16:	d0f0      	beq.n	1a012dfa <Chip_I2C_MasterSend+0x42>
1a012e18:	e000      	b.n	1a012e1c <Chip_I2C_MasterSend+0x64>
		if (timeout-- == 0) {
			break;
1a012e1a:	bf00      	nop
		}
	}
	return len - xfer.txSz;
1a012e1c:	797a      	ldrb	r2, [r7, #5]
1a012e1e:	697b      	ldr	r3, [r7, #20]
1a012e20:	1ad3      	subs	r3, r2, r3
}
1a012e22:	4618      	mov	r0, r3
1a012e24:	3728      	adds	r7, #40	; 0x28
1a012e26:	46bd      	mov	sp, r7
1a012e28:	bd80      	pop	{r7, pc}
1a012e2a:	bf00      	nop

1a012e2c <Chip_I2C_MasterCmdRead>:

/* Transmit one byte and receive an array of bytes after a repeated start condition is generated in Master mode.
 * This function is useful for communicating with the I2C slave registers
 */
int Chip_I2C_MasterCmdRead(I2C_ID_T id, uint8_t slaveAddr, uint8_t cmd, uint8_t *buff, int len)
{
1a012e2c:	b580      	push	{r7, lr}
1a012e2e:	b08a      	sub	sp, #40	; 0x28
1a012e30:	af00      	add	r7, sp, #0
1a012e32:	603b      	str	r3, [r7, #0]
1a012e34:	4603      	mov	r3, r0
1a012e36:	71fb      	strb	r3, [r7, #7]
1a012e38:	460b      	mov	r3, r1
1a012e3a:	71bb      	strb	r3, [r7, #6]
1a012e3c:	4613      	mov	r3, r2
1a012e3e:	717b      	strb	r3, [r7, #5]
	I2C_XFER_T xfer = {0};
1a012e40:	f107 030c 	add.w	r3, r7, #12
1a012e44:	2200      	movs	r2, #0
1a012e46:	601a      	str	r2, [r3, #0]
1a012e48:	605a      	str	r2, [r3, #4]
1a012e4a:	609a      	str	r2, [r3, #8]
1a012e4c:	60da      	str	r2, [r3, #12]
1a012e4e:	611a      	str	r2, [r3, #16]
1a012e50:	615a      	str	r2, [r3, #20]
	xfer.slaveAddr = slaveAddr;
1a012e52:	79bb      	ldrb	r3, [r7, #6]
1a012e54:	733b      	strb	r3, [r7, #12]
	xfer.txBuff = &cmd;
1a012e56:	1d7b      	adds	r3, r7, #5
1a012e58:	613b      	str	r3, [r7, #16]
	xfer.txSz = 1;
1a012e5a:	2301      	movs	r3, #1
1a012e5c:	617b      	str	r3, [r7, #20]
	xfer.rxBuff = buff;
1a012e5e:	683b      	ldr	r3, [r7, #0]
1a012e60:	61bb      	str	r3, [r7, #24]
	xfer.rxSz = len;
1a012e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a012e64:	61fb      	str	r3, [r7, #28]
	uint32_t timeout = TIMEOUT * len;
1a012e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a012e68:	f64e 2260 	movw	r2, #60000	; 0xea60
1a012e6c:	fb02 f303 	mul.w	r3, r2, r3
1a012e70:	627b      	str	r3, [r7, #36]	; 0x24
	while (Chip_I2C_MasterTransfer(id, &xfer) == I2C_STATUS_ARBLOST) {
1a012e72:	e004      	b.n	1a012e7e <Chip_I2C_MasterCmdRead+0x52>
		if (timeout-- == 0) {
1a012e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a012e76:	1e5a      	subs	r2, r3, #1
1a012e78:	627a      	str	r2, [r7, #36]	; 0x24
1a012e7a:	2b00      	cmp	r3, #0
1a012e7c:	d00a      	beq.n	1a012e94 <Chip_I2C_MasterCmdRead+0x68>
	xfer.txBuff = &cmd;
	xfer.txSz = 1;
	xfer.rxBuff = buff;
	xfer.rxSz = len;
	uint32_t timeout = TIMEOUT * len;
	while (Chip_I2C_MasterTransfer(id, &xfer) == I2C_STATUS_ARBLOST) {
1a012e7e:	f107 020c 	add.w	r2, r7, #12
1a012e82:	79fb      	ldrb	r3, [r7, #7]
1a012e84:	4611      	mov	r1, r2
1a012e86:	4618      	mov	r0, r3
1a012e88:	f7ff ff48 	bl	1a012d1c <Chip_I2C_MasterTransfer>
1a012e8c:	4603      	mov	r3, r0
1a012e8e:	2b02      	cmp	r3, #2
1a012e90:	d0f0      	beq.n	1a012e74 <Chip_I2C_MasterCmdRead+0x48>
1a012e92:	e000      	b.n	1a012e96 <Chip_I2C_MasterCmdRead+0x6a>
		if (timeout-- == 0) {
			break;
1a012e94:	bf00      	nop
		}
	}
	return len - xfer.rxSz;
1a012e96:	69fb      	ldr	r3, [r7, #28]
1a012e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1a012e9a:	1ad3      	subs	r3, r2, r3
}
1a012e9c:	4618      	mov	r0, r3
1a012e9e:	3728      	adds	r7, #40	; 0x28
1a012ea0:	46bd      	mov	sp, r7
1a012ea2:	bd80      	pop	{r7, pc}

1a012ea4 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a012ea4:	b580      	push	{r7, lr}
1a012ea6:	b082      	sub	sp, #8
1a012ea8:	af00      	add	r7, sp, #0
1a012eaa:	4603      	mov	r3, r0
1a012eac:	71fb      	strb	r3, [r7, #7]
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a012eae:	79fa      	ldrb	r2, [r7, #7]
1a012eb0:	4913      	ldr	r1, [pc, #76]	; (1a012f00 <Chip_I2C_MasterStateHandler+0x5c>)
1a012eb2:	4613      	mov	r3, r2
1a012eb4:	00db      	lsls	r3, r3, #3
1a012eb6:	1a9b      	subs	r3, r3, r2
1a012eb8:	009b      	lsls	r3, r3, #2
1a012eba:	440b      	add	r3, r1
1a012ebc:	6818      	ldr	r0, [r3, #0]
1a012ebe:	79fa      	ldrb	r2, [r7, #7]
1a012ec0:	490f      	ldr	r1, [pc, #60]	; (1a012f00 <Chip_I2C_MasterStateHandler+0x5c>)
1a012ec2:	4613      	mov	r3, r2
1a012ec4:	00db      	lsls	r3, r3, #3
1a012ec6:	1a9b      	subs	r3, r3, r2
1a012ec8:	009b      	lsls	r3, r3, #2
1a012eca:	440b      	add	r3, r1
1a012ecc:	3310      	adds	r3, #16
1a012ece:	681b      	ldr	r3, [r3, #0]
1a012ed0:	4619      	mov	r1, r3
1a012ed2:	f7ff fcf3 	bl	1a0128bc <handleMasterXferState>
1a012ed6:	4603      	mov	r3, r0
1a012ed8:	2b00      	cmp	r3, #0
1a012eda:	d10c      	bne.n	1a012ef6 <Chip_I2C_MasterStateHandler+0x52>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a012edc:	79fa      	ldrb	r2, [r7, #7]
1a012ede:	4908      	ldr	r1, [pc, #32]	; (1a012f00 <Chip_I2C_MasterStateHandler+0x5c>)
1a012ee0:	4613      	mov	r3, r2
1a012ee2:	00db      	lsls	r3, r3, #3
1a012ee4:	1a9b      	subs	r3, r3, r2
1a012ee6:	009b      	lsls	r3, r3, #2
1a012ee8:	440b      	add	r3, r1
1a012eea:	3308      	adds	r3, #8
1a012eec:	681b      	ldr	r3, [r3, #0]
1a012eee:	79fa      	ldrb	r2, [r7, #7]
1a012ef0:	2102      	movs	r1, #2
1a012ef2:	4610      	mov	r0, r2
1a012ef4:	4798      	blx	r3
	}
}
1a012ef6:	bf00      	nop
1a012ef8:	3708      	adds	r7, #8
1a012efa:	46bd      	mov	sp, r7
1a012efc:	bd80      	pop	{r7, pc}
1a012efe:	bf00      	nop
1a012f00:	10086078 	.word	0x10086078

1a012f04 <Chip_I2C_IsStateChanged>:
	LPC_I2Cx(id)->CONCLR = I2C_I2CONCLR_I2ENC;
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
1a012f04:	b480      	push	{r7}
1a012f06:	b083      	sub	sp, #12
1a012f08:	af00      	add	r7, sp, #0
1a012f0a:	4603      	mov	r3, r0
1a012f0c:	71fb      	strb	r3, [r7, #7]
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a012f0e:	79fa      	ldrb	r2, [r7, #7]
1a012f10:	490a      	ldr	r1, [pc, #40]	; (1a012f3c <Chip_I2C_IsStateChanged+0x38>)
1a012f12:	4613      	mov	r3, r2
1a012f14:	00db      	lsls	r3, r3, #3
1a012f16:	1a9b      	subs	r3, r3, r2
1a012f18:	009b      	lsls	r3, r3, #2
1a012f1a:	440b      	add	r3, r1
1a012f1c:	681b      	ldr	r3, [r3, #0]
1a012f1e:	681b      	ldr	r3, [r3, #0]
1a012f20:	f003 0308 	and.w	r3, r3, #8
1a012f24:	2b00      	cmp	r3, #0
1a012f26:	bf14      	ite	ne
1a012f28:	2301      	movne	r3, #1
1a012f2a:	2300      	moveq	r3, #0
1a012f2c:	b2db      	uxtb	r3, r3
}
1a012f2e:	4618      	mov	r0, r3
1a012f30:	370c      	adds	r7, #12
1a012f32:	46bd      	mov	sp, r7
1a012f34:	f85d 7b04 	ldr.w	r7, [sp], #4
1a012f38:	4770      	bx	lr
1a012f3a:	bf00      	nop
1a012f3c:	10086078 	.word	0x10086078

1a012f40 <iap_entry>:
/**
 * @}
 */

static INLINE void iap_entry(uint32_t cmd_param[5],uint32_t status_result[4])
{
1a012f40:	b580      	push	{r7, lr}
1a012f42:	b082      	sub	sp, #8
1a012f44:	af00      	add	r7, sp, #0
1a012f46:	6078      	str	r0, [r7, #4]
1a012f48:	6039      	str	r1, [r7, #0]
	((IAP_ENTRY_T) IAP_ENTRY_LOCATION)(cmd_param, status_result);
1a012f4a:	4b04      	ldr	r3, [pc, #16]	; (1a012f5c <iap_entry+0x1c>)
1a012f4c:	681b      	ldr	r3, [r3, #0]
1a012f4e:	6839      	ldr	r1, [r7, #0]
1a012f50:	6878      	ldr	r0, [r7, #4]
1a012f52:	4798      	blx	r3
}
1a012f54:	bf00      	nop
1a012f56:	3708      	adds	r7, #8
1a012f58:	46bd      	mov	sp, r7
1a012f5a:	bd80      	pop	{r7, pc}
1a012f5c:	10400100 	.word	0x10400100

1a012f60 <Chip_IAP_ReinvokeISP>:
	return result[0];
}

/* Reinvoke ISP */
uint8_t Chip_IAP_ReinvokeISP()
{
1a012f60:	b580      	push	{r7, lr}
1a012f62:	b08a      	sub	sp, #40	; 0x28
1a012f64:	af00      	add	r7, sp, #0
	uint32_t command[5], result[4];

	command[0] = IAP_REINVOKE_ISP_CMD;
1a012f66:	2339      	movs	r3, #57	; 0x39
1a012f68:	617b      	str	r3, [r7, #20]
	iap_entry(command, result);
1a012f6a:	1d3a      	adds	r2, r7, #4
1a012f6c:	f107 0314 	add.w	r3, r7, #20
1a012f70:	4611      	mov	r1, r2
1a012f72:	4618      	mov	r0, r3
1a012f74:	f7ff ffe4 	bl	1a012f40 <iap_entry>

	return result[0];
1a012f78:	687b      	ldr	r3, [r7, #4]
1a012f7a:	b2db      	uxtb	r3, r3
}
1a012f7c:	4618      	mov	r0, r3
1a012f7e:	3728      	adds	r7, #40	; 0x28
1a012f80:	46bd      	mov	sp, r7
1a012f82:	bd80      	pop	{r7, pc}

1a012f84 <Chip_OTP_Init>:
 * Public functions
 ****************************************************************************/

/* CHIP OTP Initialisation function */
uint32_t Chip_OTP_Init(void)
{
1a012f84:	b580      	push	{r7, lr}
1a012f86:	b082      	sub	sp, #8
1a012f88:	af00      	add	r7, sp, #0
	uint32_t (*ROM_otp_Init)(void);

	BOOTROM_API_TABLE = *((unsigned long * *) BOOTROM_BASE + OTP_API_TABLE_OFFSET);
1a012f8a:	4b27      	ldr	r3, [pc, #156]	; (1a013028 <Chip_OTP_Init+0xa4>)
1a012f8c:	681b      	ldr	r3, [r3, #0]
1a012f8e:	4a27      	ldr	r2, [pc, #156]	; (1a01302c <Chip_OTP_Init+0xa8>)
1a012f90:	6013      	str	r3, [r2, #0]

	ROM_otp_Init      = (uint32_t (*)(void))BOOTROM_API_TABLE[0];
1a012f92:	4b26      	ldr	r3, [pc, #152]	; (1a01302c <Chip_OTP_Init+0xa8>)
1a012f94:	681b      	ldr	r3, [r3, #0]
1a012f96:	681b      	ldr	r3, [r3, #0]
1a012f98:	607b      	str	r3, [r7, #4]
	Otp_ProgBootSrc   = (uint32_t (*)(CHIP_OTP_BOOT_SRC_T BootSrc))BOOTROM_API_TABLE[1];
1a012f9a:	4b24      	ldr	r3, [pc, #144]	; (1a01302c <Chip_OTP_Init+0xa8>)
1a012f9c:	681b      	ldr	r3, [r3, #0]
1a012f9e:	3304      	adds	r3, #4
1a012fa0:	681b      	ldr	r3, [r3, #0]
1a012fa2:	461a      	mov	r2, r3
1a012fa4:	4b22      	ldr	r3, [pc, #136]	; (1a013030 <Chip_OTP_Init+0xac>)
1a012fa6:	601a      	str	r2, [r3, #0]
	Otp_ProgJTAGDis   = (uint32_t (*)(void))BOOTROM_API_TABLE[2];
1a012fa8:	4b20      	ldr	r3, [pc, #128]	; (1a01302c <Chip_OTP_Init+0xa8>)
1a012faa:	681b      	ldr	r3, [r3, #0]
1a012fac:	3308      	adds	r3, #8
1a012fae:	681b      	ldr	r3, [r3, #0]
1a012fb0:	461a      	mov	r2, r3
1a012fb2:	4b20      	ldr	r3, [pc, #128]	; (1a013034 <Chip_OTP_Init+0xb0>)
1a012fb4:	601a      	str	r2, [r3, #0]
	Otp_ProgUSBID     = (uint32_t (*)(uint32_t ProductID, uint32_t VendorID))BOOTROM_API_TABLE[3];
1a012fb6:	4b1d      	ldr	r3, [pc, #116]	; (1a01302c <Chip_OTP_Init+0xa8>)
1a012fb8:	681b      	ldr	r3, [r3, #0]
1a012fba:	330c      	adds	r3, #12
1a012fbc:	681b      	ldr	r3, [r3, #0]
1a012fbe:	461a      	mov	r2, r3
1a012fc0:	4b1d      	ldr	r3, [pc, #116]	; (1a013038 <Chip_OTP_Init+0xb4>)
1a012fc2:	601a      	str	r2, [r3, #0]
	Otp_ProgGP0       = (uint32_t (*)(uint32_t Data, uint32_t Mask))BOOTROM_API_TABLE[8];
1a012fc4:	4b19      	ldr	r3, [pc, #100]	; (1a01302c <Chip_OTP_Init+0xa8>)
1a012fc6:	681b      	ldr	r3, [r3, #0]
1a012fc8:	3320      	adds	r3, #32
1a012fca:	681b      	ldr	r3, [r3, #0]
1a012fcc:	461a      	mov	r2, r3
1a012fce:	4b1b      	ldr	r3, [pc, #108]	; (1a01303c <Chip_OTP_Init+0xb8>)
1a012fd0:	601a      	str	r2, [r3, #0]
	Otp_ProgGP1       = (uint32_t (*)(uint32_t Data, uint32_t Mask))BOOTROM_API_TABLE[9];
1a012fd2:	4b16      	ldr	r3, [pc, #88]	; (1a01302c <Chip_OTP_Init+0xa8>)
1a012fd4:	681b      	ldr	r3, [r3, #0]
1a012fd6:	3324      	adds	r3, #36	; 0x24
1a012fd8:	681b      	ldr	r3, [r3, #0]
1a012fda:	461a      	mov	r2, r3
1a012fdc:	4b18      	ldr	r3, [pc, #96]	; (1a013040 <Chip_OTP_Init+0xbc>)
1a012fde:	601a      	str	r2, [r3, #0]
	Otp_ProgGP2       = (uint32_t (*)(uint32_t Data, uint32_t Mask))BOOTROM_API_TABLE[10];
1a012fe0:	4b12      	ldr	r3, [pc, #72]	; (1a01302c <Chip_OTP_Init+0xa8>)
1a012fe2:	681b      	ldr	r3, [r3, #0]
1a012fe4:	3328      	adds	r3, #40	; 0x28
1a012fe6:	681b      	ldr	r3, [r3, #0]
1a012fe8:	461a      	mov	r2, r3
1a012fea:	4b16      	ldr	r3, [pc, #88]	; (1a013044 <Chip_OTP_Init+0xc0>)
1a012fec:	601a      	str	r2, [r3, #0]
	Otp_ProgKey1      = (uint32_t (*)(uint8_t *key))BOOTROM_API_TABLE[11];
1a012fee:	4b0f      	ldr	r3, [pc, #60]	; (1a01302c <Chip_OTP_Init+0xa8>)
1a012ff0:	681b      	ldr	r3, [r3, #0]
1a012ff2:	332c      	adds	r3, #44	; 0x2c
1a012ff4:	681b      	ldr	r3, [r3, #0]
1a012ff6:	461a      	mov	r2, r3
1a012ff8:	4b13      	ldr	r3, [pc, #76]	; (1a013048 <Chip_OTP_Init+0xc4>)
1a012ffa:	601a      	str	r2, [r3, #0]
	Otp_ProgKey2      = (uint32_t (*)(uint8_t *key))BOOTROM_API_TABLE[12];
1a012ffc:	4b0b      	ldr	r3, [pc, #44]	; (1a01302c <Chip_OTP_Init+0xa8>)
1a012ffe:	681b      	ldr	r3, [r3, #0]
1a013000:	3330      	adds	r3, #48	; 0x30
1a013002:	681b      	ldr	r3, [r3, #0]
1a013004:	461a      	mov	r2, r3
1a013006:	4b11      	ldr	r3, [pc, #68]	; (1a01304c <Chip_OTP_Init+0xc8>)
1a013008:	601a      	str	r2, [r3, #0]
	Otp_GenRand       = (uint32_t (*)(void))BOOTROM_API_TABLE[13];
1a01300a:	4b08      	ldr	r3, [pc, #32]	; (1a01302c <Chip_OTP_Init+0xa8>)
1a01300c:	681b      	ldr	r3, [r3, #0]
1a01300e:	3334      	adds	r3, #52	; 0x34
1a013010:	681b      	ldr	r3, [r3, #0]
1a013012:	461a      	mov	r2, r3
1a013014:	4b0e      	ldr	r3, [pc, #56]	; (1a013050 <Chip_OTP_Init+0xcc>)
1a013016:	601a      	str	r2, [r3, #0]

	return ROM_otp_Init();
1a013018:	687b      	ldr	r3, [r7, #4]
1a01301a:	4798      	blx	r3
1a01301c:	4603      	mov	r3, r0
}
1a01301e:	4618      	mov	r0, r3
1a013020:	3708      	adds	r7, #8
1a013022:	46bd      	mov	sp, r7
1a013024:	bd80      	pop	{r7, pc}
1a013026:	bf00      	nop
1a013028:	10400104 	.word	0x10400104
1a01302c:	10087414 	.word	0x10087414
1a013030:	10087418 	.word	0x10087418
1a013034:	1008741c 	.word	0x1008741c
1a013038:	10087420 	.word	0x10087420
1a01303c:	10087424 	.word	0x10087424
1a013040:	10087428 	.word	0x10087428
1a013044:	1008742c 	.word	0x1008742c
1a013048:	10087430 	.word	0x10087430
1a01304c:	10087434 	.word	0x10087434
1a013050:	10087438 	.word	0x10087438

1a013054 <Chip_RGU_TriggerReset>:
 * Public functions
 ****************************************************************************/

/* Trigger a peripheral reset for the selected peripheral */
void Chip_RGU_TriggerReset(CHIP_RGU_RST_T ResetNumber)
{
1a013054:	b480      	push	{r7}
1a013056:	b085      	sub	sp, #20
1a013058:	af00      	add	r7, sp, #0
1a01305a:	4603      	mov	r3, r0
1a01305c:	71fb      	strb	r3, [r7, #7]
	volatile uint32_t *p;

	/* To trigger reset- write RESET_CTRLx with a 1 bit */
	p = (volatile uint32_t *) &(LPC_RGU->RESET_CTRL0);
1a01305e:	4b0c      	ldr	r3, [pc, #48]	; (1a013090 <Chip_RGU_TriggerReset+0x3c>)
1a013060:	60fb      	str	r3, [r7, #12]

	/* higher numbers are in RESET_CTRL1, RESET_CTRL2, etc. */
	p += ResetNumber / 32;
1a013062:	79fb      	ldrb	r3, [r7, #7]
1a013064:	095b      	lsrs	r3, r3, #5
1a013066:	b2db      	uxtb	r3, r3
1a013068:	009b      	lsls	r3, r3, #2
1a01306a:	68fa      	ldr	r2, [r7, #12]
1a01306c:	4413      	add	r3, r2
1a01306e:	60fb      	str	r3, [r7, #12]

	/* On the LPC18xx and LPC43xx, most of the reset bits automatically clear
	   after 1 clock cycle, so set the bit and return */
	*p = (1 << (ResetNumber % 32));
1a013070:	79fb      	ldrb	r3, [r7, #7]
1a013072:	f003 031f 	and.w	r3, r3, #31
1a013076:	2201      	movs	r2, #1
1a013078:	fa02 f303 	lsl.w	r3, r2, r3
1a01307c:	461a      	mov	r2, r3
1a01307e:	68fb      	ldr	r3, [r7, #12]
1a013080:	601a      	str	r2, [r3, #0]
}
1a013082:	bf00      	nop
1a013084:	3714      	adds	r7, #20
1a013086:	46bd      	mov	sp, r7
1a013088:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01308c:	4770      	bx	lr
1a01308e:	bf00      	nop
1a013090:	40053100 	.word	0x40053100

1a013094 <Chip_RGU_ClearReset>:

/* Clears reset for the selected peripheral */
void Chip_RGU_ClearReset(CHIP_RGU_RST_T ResetNumber)
{
1a013094:	b480      	push	{r7}
1a013096:	b085      	sub	sp, #20
1a013098:	af00      	add	r7, sp, #0
1a01309a:	4603      	mov	r3, r0
1a01309c:	71fb      	strb	r3, [r7, #7]
	volatile uint32_t *p;

	/* To trigger reset- write RESET_CTRLx with a 1 bit */
	p = (volatile uint32_t *) &(LPC_RGU->RESET_CTRL0);
1a01309e:	4b09      	ldr	r3, [pc, #36]	; (1a0130c4 <Chip_RGU_ClearReset+0x30>)
1a0130a0:	60fb      	str	r3, [r7, #12]

	/* higher numbers are in RESET_CTRL1, RESET_CTRL2, etc. */
	p += ResetNumber / 32;
1a0130a2:	79fb      	ldrb	r3, [r7, #7]
1a0130a4:	095b      	lsrs	r3, r3, #5
1a0130a6:	b2db      	uxtb	r3, r3
1a0130a8:	009b      	lsls	r3, r3, #2
1a0130aa:	68fa      	ldr	r2, [r7, #12]
1a0130ac:	4413      	add	r3, r2
1a0130ae:	60fb      	str	r3, [r7, #12]

	/* On the LPC18xx and LPC43xx, most of the reset bits automatically clear
	   after 1 clock cycle, so set the bit and return */
	*p = 0;
1a0130b0:	68fb      	ldr	r3, [r7, #12]
1a0130b2:	2200      	movs	r2, #0
1a0130b4:	601a      	str	r2, [r3, #0]
}
1a0130b6:	bf00      	nop
1a0130b8:	3714      	adds	r7, #20
1a0130ba:	46bd      	mov	sp, r7
1a0130bc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0130c0:	4770      	bx	lr
1a0130c2:	bf00      	nop
1a0130c4:	40053100 	.word	0x40053100

1a0130c8 <Chip_RIT_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the RIT */
void Chip_RIT_Init(LPC_RITIMER_T *pRITimer)
{
1a0130c8:	b580      	push	{r7, lr}
1a0130ca:	b082      	sub	sp, #8
1a0130cc:	af00      	add	r7, sp, #0
1a0130ce:	6078      	str	r0, [r7, #4]
	Chip_Clock_EnableOpts(CLK_MX_RITIMER, true, true, 1);
1a0130d0:	2301      	movs	r3, #1
1a0130d2:	2201      	movs	r2, #1
1a0130d4:	2101      	movs	r1, #1
1a0130d6:	20a0      	movs	r0, #160	; 0xa0
1a0130d8:	f7ff f9d2 	bl	1a012480 <Chip_Clock_EnableOpts>
	pRITimer->COMPVAL = 0xFFFFFFFF;
1a0130dc:	687b      	ldr	r3, [r7, #4]
1a0130de:	f04f 32ff 	mov.w	r2, #4294967295
1a0130e2:	601a      	str	r2, [r3, #0]
	pRITimer->MASK  = 0x00000000;
1a0130e4:	687b      	ldr	r3, [r7, #4]
1a0130e6:	2200      	movs	r2, #0
1a0130e8:	605a      	str	r2, [r3, #4]
	pRITimer->CTRL  = 0x0C;
1a0130ea:	687b      	ldr	r3, [r7, #4]
1a0130ec:	220c      	movs	r2, #12
1a0130ee:	609a      	str	r2, [r3, #8]
	pRITimer->COUNTER   = 0x00000000;
1a0130f0:	687b      	ldr	r3, [r7, #4]
1a0130f2:	2200      	movs	r2, #0
1a0130f4:	60da      	str	r2, [r3, #12]
}
1a0130f6:	bf00      	nop
1a0130f8:	3708      	adds	r7, #8
1a0130fa:	46bd      	mov	sp, r7
1a0130fc:	bd80      	pop	{r7, pc}
1a0130fe:	bf00      	nop

1a013100 <Chip_RTC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the RTC peripheral */
void Chip_RTC_Init(LPC_RTC_T *pRTC)
{
1a013100:	b580      	push	{r7, lr}
1a013102:	b082      	sub	sp, #8
1a013104:	af00      	add	r7, sp, #0
1a013106:	6078      	str	r0, [r7, #4]
	Chip_Clock_RTCEnable();
1a013108:	f7ff fa28 	bl	1a01255c <Chip_Clock_RTCEnable>

	/* Disable RTC */
	Chip_RTC_Enable(pRTC, DISABLE);
1a01310c:	2100      	movs	r1, #0
1a01310e:	6878      	ldr	r0, [r7, #4]
1a013110:	f000 f84c 	bl	1a0131ac <Chip_RTC_Enable>

	/* Disable Calibration */
	Chip_RTC_CalibCounterCmd(pRTC, DISABLE);
1a013114:	2100      	movs	r1, #0
1a013116:	6878      	ldr	r0, [r7, #4]
1a013118:	f000 f898 	bl	1a01324c <Chip_RTC_CalibCounterCmd>

	/* Reset RTC Clock */
	Chip_RTC_ResetClockTickCounter(pRTC);
1a01311c:	6878      	ldr	r0, [r7, #4]
1a01311e:	f000 f823 	bl	1a013168 <Chip_RTC_ResetClockTickCounter>

	/* Clear counter increment and alarm interrupt */
	pRTC->ILR = RTC_IRL_RTCCIF | RTC_IRL_RTCALF;
1a013122:	687b      	ldr	r3, [r7, #4]
1a013124:	2203      	movs	r2, #3
1a013126:	601a      	str	r2, [r3, #0]
	while (pRTC->ILR != 0) {}
1a013128:	bf00      	nop
1a01312a:	687b      	ldr	r3, [r7, #4]
1a01312c:	681b      	ldr	r3, [r3, #0]
1a01312e:	2b00      	cmp	r3, #0
1a013130:	d1fb      	bne.n	1a01312a <Chip_RTC_Init+0x2a>

	/* Clear all register to be default */
	pRTC->CIIR = 0x00;
1a013132:	687b      	ldr	r3, [r7, #4]
1a013134:	2200      	movs	r2, #0
1a013136:	60da      	str	r2, [r3, #12]
	pRTC->AMR = 0xFF;
1a013138:	687b      	ldr	r3, [r7, #4]
1a01313a:	22ff      	movs	r2, #255	; 0xff
1a01313c:	611a      	str	r2, [r3, #16]
	pRTC->CALIBRATION = 0x00;
1a01313e:	687b      	ldr	r3, [r7, #4]
1a013140:	2200      	movs	r2, #0
1a013142:	641a      	str	r2, [r3, #64]	; 0x40
}
1a013144:	bf00      	nop
1a013146:	3708      	adds	r7, #8
1a013148:	46bd      	mov	sp, r7
1a01314a:	bd80      	pop	{r7, pc}

1a01314c <Chip_RTC_DeInit>:

/*De-initialize the RTC peripheral */
void Chip_RTC_DeInit(LPC_RTC_T *pRTC)
{
1a01314c:	b480      	push	{r7}
1a01314e:	b083      	sub	sp, #12
1a013150:	af00      	add	r7, sp, #0
1a013152:	6078      	str	r0, [r7, #4]
	pRTC->CCR = 0x00;
1a013154:	687b      	ldr	r3, [r7, #4]
1a013156:	2200      	movs	r2, #0
1a013158:	609a      	str	r2, [r3, #8]
}
1a01315a:	bf00      	nop
1a01315c:	370c      	adds	r7, #12
1a01315e:	46bd      	mov	sp, r7
1a013160:	f85d 7b04 	ldr.w	r7, [sp], #4
1a013164:	4770      	bx	lr
1a013166:	bf00      	nop

1a013168 <Chip_RTC_ResetClockTickCounter>:

/* Reset clock tick counter in the RTC peripheral */
void Chip_RTC_ResetClockTickCounter(LPC_RTC_T *pRTC)
{
1a013168:	b480      	push	{r7}
1a01316a:	b083      	sub	sp, #12
1a01316c:	af00      	add	r7, sp, #0
1a01316e:	6078      	str	r0, [r7, #4]
	do {
		/* Reset RTC clock*/
		pRTC->CCR |= RTC_CCR_CTCRST;
1a013170:	687b      	ldr	r3, [r7, #4]
1a013172:	689b      	ldr	r3, [r3, #8]
1a013174:	f043 0202 	orr.w	r2, r3, #2
1a013178:	687b      	ldr	r3, [r7, #4]
1a01317a:	609a      	str	r2, [r3, #8]
	} while ((pRTC->CCR & RTC_CCR_CTCRST) != RTC_CCR_CTCRST);
1a01317c:	687b      	ldr	r3, [r7, #4]
1a01317e:	689b      	ldr	r3, [r3, #8]
1a013180:	f003 0302 	and.w	r3, r3, #2
1a013184:	2b00      	cmp	r3, #0
1a013186:	d0f3      	beq.n	1a013170 <Chip_RTC_ResetClockTickCounter+0x8>

	do {
		/* Finish resetting RTC clock */
		pRTC->CCR &= (~RTC_CCR_CTCRST) & RTC_CCR_BITMASK;
1a013188:	687b      	ldr	r3, [r7, #4]
1a01318a:	689b      	ldr	r3, [r3, #8]
1a01318c:	f003 0211 	and.w	r2, r3, #17
1a013190:	687b      	ldr	r3, [r7, #4]
1a013192:	609a      	str	r2, [r3, #8]
	} while (pRTC->CCR & RTC_CCR_CTCRST);
1a013194:	687b      	ldr	r3, [r7, #4]
1a013196:	689b      	ldr	r3, [r3, #8]
1a013198:	f003 0302 	and.w	r3, r3, #2
1a01319c:	2b00      	cmp	r3, #0
1a01319e:	d1f3      	bne.n	1a013188 <Chip_RTC_ResetClockTickCounter+0x20>
}
1a0131a0:	bf00      	nop
1a0131a2:	370c      	adds	r7, #12
1a0131a4:	46bd      	mov	sp, r7
1a0131a6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0131aa:	4770      	bx	lr

1a0131ac <Chip_RTC_Enable>:

/* Start/Stop RTC peripheral */
void Chip_RTC_Enable(LPC_RTC_T *pRTC, FunctionalState NewState)
{
1a0131ac:	b480      	push	{r7}
1a0131ae:	b083      	sub	sp, #12
1a0131b0:	af00      	add	r7, sp, #0
1a0131b2:	6078      	str	r0, [r7, #4]
1a0131b4:	460b      	mov	r3, r1
1a0131b6:	70fb      	strb	r3, [r7, #3]
	if (NewState == ENABLE) {
1a0131b8:	78fb      	ldrb	r3, [r7, #3]
1a0131ba:	2b01      	cmp	r3, #1
1a0131bc:	d10c      	bne.n	1a0131d8 <Chip_RTC_Enable+0x2c>
		do {
			pRTC->CCR |= RTC_CCR_CLKEN;
1a0131be:	687b      	ldr	r3, [r7, #4]
1a0131c0:	689b      	ldr	r3, [r3, #8]
1a0131c2:	f043 0201 	orr.w	r2, r3, #1
1a0131c6:	687b      	ldr	r3, [r7, #4]
1a0131c8:	609a      	str	r2, [r3, #8]
		} while ((pRTC->CCR & RTC_CCR_CLKEN) == 0);
1a0131ca:	687b      	ldr	r3, [r7, #4]
1a0131cc:	689b      	ldr	r3, [r3, #8]
1a0131ce:	f003 0301 	and.w	r3, r3, #1
1a0131d2:	2b00      	cmp	r3, #0
1a0131d4:	d0f3      	beq.n	1a0131be <Chip_RTC_Enable+0x12>
	}
	else {
		pRTC->CCR &= (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
	}
}
1a0131d6:	e005      	b.n	1a0131e4 <Chip_RTC_Enable+0x38>
		do {
			pRTC->CCR |= RTC_CCR_CLKEN;
		} while ((pRTC->CCR & RTC_CCR_CLKEN) == 0);
	}
	else {
		pRTC->CCR &= (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a0131d8:	687b      	ldr	r3, [r7, #4]
1a0131da:	689b      	ldr	r3, [r3, #8]
1a0131dc:	f003 0212 	and.w	r2, r3, #18
1a0131e0:	687b      	ldr	r3, [r7, #4]
1a0131e2:	609a      	str	r2, [r3, #8]
	}
}
1a0131e4:	bf00      	nop
1a0131e6:	370c      	adds	r7, #12
1a0131e8:	46bd      	mov	sp, r7
1a0131ea:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0131ee:	4770      	bx	lr

1a0131f0 <Chip_RTC_SetFullTime>:
	}
}

/* Set full time in the RTC peripheral */
void Chip_RTC_SetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a0131f0:	b480      	push	{r7}
1a0131f2:	b085      	sub	sp, #20
1a0131f4:	af00      	add	r7, sp, #0
1a0131f6:	6078      	str	r0, [r7, #4]
1a0131f8:	6039      	str	r1, [r7, #0]
	RTC_TIMEINDEX_T i;
	uint32_t ccr_val = pRTC->CCR;
1a0131fa:	687b      	ldr	r3, [r7, #4]
1a0131fc:	689b      	ldr	r3, [r3, #8]
1a0131fe:	60bb      	str	r3, [r7, #8]

	/* Temporarily disable */
	if (ccr_val & RTC_CCR_CLKEN) {
1a013200:	68bb      	ldr	r3, [r7, #8]
1a013202:	f003 0301 	and.w	r3, r3, #1
1a013206:	2b00      	cmp	r3, #0
1a013208:	d004      	beq.n	1a013214 <Chip_RTC_SetFullTime+0x24>
		pRTC->CCR = ccr_val & (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a01320a:	68bb      	ldr	r3, [r7, #8]
1a01320c:	f003 0212 	and.w	r2, r3, #18
1a013210:	687b      	ldr	r3, [r7, #4]
1a013212:	609a      	str	r2, [r3, #8]
	}

	/* Date time setting */
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
1a013214:	2300      	movs	r3, #0
1a013216:	73fb      	strb	r3, [r7, #15]
1a013218:	e00b      	b.n	1a013232 <Chip_RTC_SetFullTime+0x42>
		pRTC->TIME[i] = pFullTime->time[i];
1a01321a:	7bfa      	ldrb	r2, [r7, #15]
1a01321c:	7bf9      	ldrb	r1, [r7, #15]
1a01321e:	683b      	ldr	r3, [r7, #0]
1a013220:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a013224:	687b      	ldr	r3, [r7, #4]
1a013226:	3208      	adds	r2, #8
1a013228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if (ccr_val & RTC_CCR_CLKEN) {
		pRTC->CCR = ccr_val & (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
	}

	/* Date time setting */
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
1a01322c:	7bfb      	ldrb	r3, [r7, #15]
1a01322e:	3301      	adds	r3, #1
1a013230:	73fb      	strb	r3, [r7, #15]
1a013232:	7bfb      	ldrb	r3, [r7, #15]
1a013234:	2b07      	cmp	r3, #7
1a013236:	d9f0      	bls.n	1a01321a <Chip_RTC_SetFullTime+0x2a>
		pRTC->TIME[i] = pFullTime->time[i];
	}

	/* Restore to old setting */
	pRTC->CCR = ccr_val;
1a013238:	687b      	ldr	r3, [r7, #4]
1a01323a:	68ba      	ldr	r2, [r7, #8]
1a01323c:	609a      	str	r2, [r3, #8]
}
1a01323e:	bf00      	nop
1a013240:	3714      	adds	r7, #20
1a013242:	46bd      	mov	sp, r7
1a013244:	f85d 7b04 	ldr.w	r7, [sp], #4
1a013248:	4770      	bx	lr
1a01324a:	bf00      	nop

1a01324c <Chip_RTC_CalibCounterCmd>:
	}
}

/* Enable/Disable calibration counter in the RTC peripheral */
void Chip_RTC_CalibCounterCmd(LPC_RTC_T *pRTC, FunctionalState NewState)
{
1a01324c:	b480      	push	{r7}
1a01324e:	b083      	sub	sp, #12
1a013250:	af00      	add	r7, sp, #0
1a013252:	6078      	str	r0, [r7, #4]
1a013254:	460b      	mov	r3, r1
1a013256:	70fb      	strb	r3, [r7, #3]
	if (NewState == ENABLE) {
1a013258:	78fb      	ldrb	r3, [r7, #3]
1a01325a:	2b01      	cmp	r3, #1
1a01325c:	d10c      	bne.n	1a013278 <Chip_RTC_CalibCounterCmd+0x2c>
		do {
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
1a01325e:	687b      	ldr	r3, [r7, #4]
1a013260:	689b      	ldr	r3, [r3, #8]
1a013262:	f003 0203 	and.w	r2, r3, #3
1a013266:	687b      	ldr	r3, [r7, #4]
1a013268:	609a      	str	r2, [r3, #8]
		} while (pRTC->CCR & RTC_CCR_CCALEN);
1a01326a:	687b      	ldr	r3, [r7, #4]
1a01326c:	689b      	ldr	r3, [r3, #8]
1a01326e:	f003 0310 	and.w	r3, r3, #16
1a013272:	2b00      	cmp	r3, #0
1a013274:	d1f3      	bne.n	1a01325e <Chip_RTC_CalibCounterCmd+0x12>
	}
	else {
		pRTC->CCR |= RTC_CCR_CCALEN;
	}
}
1a013276:	e005      	b.n	1a013284 <Chip_RTC_CalibCounterCmd+0x38>
		do {
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
		} while (pRTC->CCR & RTC_CCR_CCALEN);
	}
	else {
		pRTC->CCR |= RTC_CCR_CCALEN;
1a013278:	687b      	ldr	r3, [r7, #4]
1a01327a:	689b      	ldr	r3, [r3, #8]
1a01327c:	f043 0210 	orr.w	r2, r3, #16
1a013280:	687b      	ldr	r3, [r7, #4]
1a013282:	609a      	str	r2, [r3, #8]
	}
}
1a013284:	bf00      	nop
1a013286:	370c      	adds	r7, #12
1a013288:	46bd      	mov	sp, r7
1a01328a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01328e:	4770      	bx	lr

1a013290 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a013290:	b590      	push	{r4, r7, lr}
1a013292:	b085      	sub	sp, #20
1a013294:	af00      	add	r7, sp, #0
1a013296:	4603      	mov	r3, r0
1a013298:	6039      	str	r1, [r7, #0]
1a01329a:	71fb      	strb	r3, [r7, #7]
1a01329c:	4613      	mov	r3, r2
1a01329e:	71bb      	strb	r3, [r7, #6]
	int i;
	if (clkin == CLKIN_CRYSTAL) {
1a0132a0:	79fb      	ldrb	r3, [r7, #7]
1a0132a2:	2b06      	cmp	r3, #6
1a0132a4:	d101      	bne.n	1a0132aa <Chip_SetupCoreClock+0x1a>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a0132a6:	f7fe fdaf 	bl	1a011e08 <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0132aa:	79f9      	ldrb	r1, [r7, #7]
1a0132ac:	2300      	movs	r3, #0
1a0132ae:	2201      	movs	r2, #1
1a0132b0:	2004      	movs	r0, #4
1a0132b2:	f7ff f851 	bl	1a012358 <Chip_Clock_SetBaseClock>

	if (core_freq > 110000000UL) {
1a0132b6:	683b      	ldr	r3, [r7, #0]
1a0132b8:	4a1d      	ldr	r2, [pc, #116]	; (1a013330 <Chip_SetupCoreClock+0xa0>)
1a0132ba:	4293      	cmp	r3, r2
1a0132bc:	d90b      	bls.n	1a0132d6 <Chip_SetupCoreClock+0x46>
		/* Setup PLL for 100MHz and switch main system clocking */
		Chip_Clock_SetupMainPLLHz(clkin, CGU_IRC_FREQ, 110 * 1000000, 110 * 1000000);
1a0132be:	79f8      	ldrb	r0, [r7, #7]
1a0132c0:	4b1b      	ldr	r3, [pc, #108]	; (1a013330 <Chip_SetupCoreClock+0xa0>)
1a0132c2:	4a1b      	ldr	r2, [pc, #108]	; (1a013330 <Chip_SetupCoreClock+0xa0>)
1a0132c4:	491b      	ldr	r1, [pc, #108]	; (1a013334 <Chip_SetupCoreClock+0xa4>)
1a0132c6:	f7fe fdd7 	bl	1a011e78 <Chip_Clock_SetupMainPLLHz>
		Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0132ca:	2300      	movs	r3, #0
1a0132cc:	2201      	movs	r2, #1
1a0132ce:	2109      	movs	r1, #9
1a0132d0:	2004      	movs	r0, #4
1a0132d2:	f7ff f841 	bl	1a012358 <Chip_Clock_SetBaseClock>
	}

	/* Setup PLL for maximum clock */
	Chip_Clock_SetupMainPLLHz(clkin, OscRateIn, core_freq, core_freq);
1a0132d6:	4b18      	ldr	r3, [pc, #96]	; (1a013338 <Chip_SetupCoreClock+0xa8>)
1a0132d8:	6819      	ldr	r1, [r3, #0]
1a0132da:	79f8      	ldrb	r0, [r7, #7]
1a0132dc:	683b      	ldr	r3, [r7, #0]
1a0132de:	683a      	ldr	r2, [r7, #0]
1a0132e0:	f7fe fdca 	bl	1a011e78 <Chip_Clock_SetupMainPLLHz>

	if (setbase) {
1a0132e4:	79bb      	ldrb	r3, [r7, #6]
1a0132e6:	2b00      	cmp	r3, #0
1a0132e8:	d01e      	beq.n	1a013328 <Chip_SetupCoreClock+0x98>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0132ea:	2300      	movs	r3, #0
1a0132ec:	60fb      	str	r3, [r7, #12]
1a0132ee:	e018      	b.n	1a013322 <Chip_SetupCoreClock+0x92>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0132f0:	4a12      	ldr	r2, [pc, #72]	; (1a01333c <Chip_SetupCoreClock+0xac>)
1a0132f2:	68fb      	ldr	r3, [r7, #12]
1a0132f4:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
1a0132f8:	4a10      	ldr	r2, [pc, #64]	; (1a01333c <Chip_SetupCoreClock+0xac>)
1a0132fa:	68fb      	ldr	r3, [r7, #12]
1a0132fc:	009b      	lsls	r3, r3, #2
1a0132fe:	4413      	add	r3, r2
1a013300:	7859      	ldrb	r1, [r3, #1]
1a013302:	4a0e      	ldr	r2, [pc, #56]	; (1a01333c <Chip_SetupCoreClock+0xac>)
1a013304:	68fb      	ldr	r3, [r7, #12]
1a013306:	009b      	lsls	r3, r3, #2
1a013308:	4413      	add	r3, r2
1a01330a:	789c      	ldrb	r4, [r3, #2]
1a01330c:	4a0b      	ldr	r2, [pc, #44]	; (1a01333c <Chip_SetupCoreClock+0xac>)
1a01330e:	68fb      	ldr	r3, [r7, #12]
1a013310:	009b      	lsls	r3, r3, #2
1a013312:	4413      	add	r3, r2
1a013314:	78db      	ldrb	r3, [r3, #3]
1a013316:	4622      	mov	r2, r4
1a013318:	f7ff f81e 	bl	1a012358 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a01331c:	68fb      	ldr	r3, [r7, #12]
1a01331e:	3301      	adds	r3, #1
1a013320:	60fb      	str	r3, [r7, #12]
1a013322:	68fb      	ldr	r3, [r7, #12]
1a013324:	2b11      	cmp	r3, #17
1a013326:	d9e3      	bls.n	1a0132f0 <Chip_SetupCoreClock+0x60>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a013328:	bf00      	nop
1a01332a:	3714      	adds	r7, #20
1a01332c:	46bd      	mov	sp, r7
1a01332e:	bd90      	pop	{r4, r7, pc}
1a013330:	068e7780 	.word	0x068e7780
1a013334:	00b71b00 	.word	0x00b71b00
1a013338:	1a018948 	.word	0x1a018948
1a01333c:	1a01ab08 	.word	0x1a01ab08

1a013340 <Chip_TIMER_GetClockIndex>:
 * Private functions
 ****************************************************************************/

/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_TIMER_GetClockIndex(LPC_TIMER_T *pTMR)
{
1a013340:	b480      	push	{r7}
1a013342:	b085      	sub	sp, #20
1a013344:	af00      	add	r7, sp, #0
1a013346:	6078      	str	r0, [r7, #4]
	CHIP_CCU_CLK_T clkTMR;

	if (pTMR == LPC_TIMER3) {
1a013348:	687b      	ldr	r3, [r7, #4]
1a01334a:	4a0e      	ldr	r2, [pc, #56]	; (1a013384 <Chip_TIMER_GetClockIndex+0x44>)
1a01334c:	4293      	cmp	r3, r2
1a01334e:	d102      	bne.n	1a013356 <Chip_TIMER_GetClockIndex+0x16>
		clkTMR = CLK_MX_TIMER3;
1a013350:	23a4      	movs	r3, #164	; 0xa4
1a013352:	81fb      	strh	r3, [r7, #14]
1a013354:	e00f      	b.n	1a013376 <Chip_TIMER_GetClockIndex+0x36>
	}
    else if (pTMR == LPC_TIMER2) {
1a013356:	687b      	ldr	r3, [r7, #4]
1a013358:	4a0b      	ldr	r2, [pc, #44]	; (1a013388 <Chip_TIMER_GetClockIndex+0x48>)
1a01335a:	4293      	cmp	r3, r2
1a01335c:	d102      	bne.n	1a013364 <Chip_TIMER_GetClockIndex+0x24>
		clkTMR = CLK_MX_TIMER2;
1a01335e:	23a3      	movs	r3, #163	; 0xa3
1a013360:	81fb      	strh	r3, [r7, #14]
1a013362:	e008      	b.n	1a013376 <Chip_TIMER_GetClockIndex+0x36>
	}
    else if (pTMR == LPC_TIMER1) {
1a013364:	687b      	ldr	r3, [r7, #4]
1a013366:	4a09      	ldr	r2, [pc, #36]	; (1a01338c <Chip_TIMER_GetClockIndex+0x4c>)
1a013368:	4293      	cmp	r3, r2
1a01336a:	d102      	bne.n	1a013372 <Chip_TIMER_GetClockIndex+0x32>
		clkTMR = CLK_MX_TIMER1;
1a01336c:	2385      	movs	r3, #133	; 0x85
1a01336e:	81fb      	strh	r3, [r7, #14]
1a013370:	e001      	b.n	1a013376 <Chip_TIMER_GetClockIndex+0x36>
	}
	else {
		clkTMR = CLK_MX_TIMER0;
1a013372:	2384      	movs	r3, #132	; 0x84
1a013374:	81fb      	strh	r3, [r7, #14]
	}

	return clkTMR;
1a013376:	89fb      	ldrh	r3, [r7, #14]
}
1a013378:	4618      	mov	r0, r3
1a01337a:	3714      	adds	r7, #20
1a01337c:	46bd      	mov	sp, r7
1a01337e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a013382:	4770      	bx	lr
1a013384:	400c4000 	.word	0x400c4000
1a013388:	400c3000 	.word	0x400c3000
1a01338c:	40085000 	.word	0x40085000

1a013390 <Chip_TIMER_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize a timer */
void Chip_TIMER_Init(LPC_TIMER_T *pTMR)
{
1a013390:	b580      	push	{r7, lr}
1a013392:	b082      	sub	sp, #8
1a013394:	af00      	add	r7, sp, #0
1a013396:	6078      	str	r0, [r7, #4]
	Chip_Clock_Enable(Chip_TIMER_GetClockIndex(pTMR));
1a013398:	6878      	ldr	r0, [r7, #4]
1a01339a:	f7ff ffd1 	bl	1a013340 <Chip_TIMER_GetClockIndex>
1a01339e:	4603      	mov	r3, r0
1a0133a0:	4618      	mov	r0, r3
1a0133a2:	f7ff f8ab 	bl	1a0124fc <Chip_Clock_Enable>
}
1a0133a6:	bf00      	nop
1a0133a8:	3708      	adds	r7, #8
1a0133aa:	46bd      	mov	sp, r7
1a0133ac:	bd80      	pop	{r7, pc}
1a0133ae:	bf00      	nop

1a0133b0 <Chip_TIMER_DeInit>:

/*	Shutdown a timer */
void Chip_TIMER_DeInit(LPC_TIMER_T *pTMR)
{
1a0133b0:	b580      	push	{r7, lr}
1a0133b2:	b082      	sub	sp, #8
1a0133b4:	af00      	add	r7, sp, #0
1a0133b6:	6078      	str	r0, [r7, #4]
	Chip_Clock_Disable(Chip_TIMER_GetClockIndex(pTMR));
1a0133b8:	6878      	ldr	r0, [r7, #4]
1a0133ba:	f7ff ffc1 	bl	1a013340 <Chip_TIMER_GetClockIndex>
1a0133be:	4603      	mov	r3, r0
1a0133c0:	4618      	mov	r0, r3
1a0133c2:	f7ff f8e1 	bl	1a012588 <Chip_Clock_Disable>
}
1a0133c6:	bf00      	nop
1a0133c8:	3708      	adds	r7, #8
1a0133ca:	46bd      	mov	sp, r7
1a0133cc:	bd80      	pop	{r7, pc}
1a0133ce:	bf00      	nop

1a0133d0 <Chip_TIMER_Reset>:

/* Resets the timer terminal and prescale counts to 0 */
void Chip_TIMER_Reset(LPC_TIMER_T *pTMR)
{
1a0133d0:	b480      	push	{r7}
1a0133d2:	b085      	sub	sp, #20
1a0133d4:	af00      	add	r7, sp, #0
1a0133d6:	6078      	str	r0, [r7, #4]
	uint32_t reg;

	/* Disable timer, set terminal count to non-0 */
	reg = pTMR->TCR;
1a0133d8:	687b      	ldr	r3, [r7, #4]
1a0133da:	685b      	ldr	r3, [r3, #4]
1a0133dc:	60fb      	str	r3, [r7, #12]
	pTMR->TCR = 0;
1a0133de:	687b      	ldr	r3, [r7, #4]
1a0133e0:	2200      	movs	r2, #0
1a0133e2:	605a      	str	r2, [r3, #4]
	pTMR->TC = 1;
1a0133e4:	687b      	ldr	r3, [r7, #4]
1a0133e6:	2201      	movs	r2, #1
1a0133e8:	609a      	str	r2, [r3, #8]

	/* Reset timer counter */
	pTMR->TCR = TIMER_RESET;
1a0133ea:	687b      	ldr	r3, [r7, #4]
1a0133ec:	2202      	movs	r2, #2
1a0133ee:	605a      	str	r2, [r3, #4]

	/* Wait for terminal count to clear */
	while (pTMR->TC != 0) {}
1a0133f0:	bf00      	nop
1a0133f2:	687b      	ldr	r3, [r7, #4]
1a0133f4:	689b      	ldr	r3, [r3, #8]
1a0133f6:	2b00      	cmp	r3, #0
1a0133f8:	d1fb      	bne.n	1a0133f2 <Chip_TIMER_Reset+0x22>

	/* Restore timer state */
	pTMR->TCR = reg;
1a0133fa:	687b      	ldr	r3, [r7, #4]
1a0133fc:	68fa      	ldr	r2, [r7, #12]
1a0133fe:	605a      	str	r2, [r3, #4]
}
1a013400:	bf00      	nop
1a013402:	3714      	adds	r7, #20
1a013404:	46bd      	mov	sp, r7
1a013406:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01340a:	4770      	bx	lr

1a01340c <Chip_TIMER_ExtMatchControlSet>:

/* Sets external match control (MATn.matchnum) pin control */
void Chip_TIMER_ExtMatchControlSet(LPC_TIMER_T *pTMR, int8_t initial_state,
								   TIMER_PIN_MATCH_STATE_T matchState, int8_t matchnum)
{
1a01340c:	b480      	push	{r7}
1a01340e:	b085      	sub	sp, #20
1a013410:	af00      	add	r7, sp, #0
1a013412:	6078      	str	r0, [r7, #4]
1a013414:	4608      	mov	r0, r1
1a013416:	4611      	mov	r1, r2
1a013418:	461a      	mov	r2, r3
1a01341a:	4603      	mov	r3, r0
1a01341c:	70fb      	strb	r3, [r7, #3]
1a01341e:	460b      	mov	r3, r1
1a013420:	70bb      	strb	r3, [r7, #2]
1a013422:	4613      	mov	r3, r2
1a013424:	707b      	strb	r3, [r7, #1]
	uint32_t mask, reg;

	/* Clear bits corresponding to selected match register */
	mask = (1 << matchnum) | (0x03 << (4 + (matchnum * 2)));
1a013426:	f997 3001 	ldrsb.w	r3, [r7, #1]
1a01342a:	2201      	movs	r2, #1
1a01342c:	409a      	lsls	r2, r3
1a01342e:	f997 3001 	ldrsb.w	r3, [r7, #1]
1a013432:	3302      	adds	r3, #2
1a013434:	005b      	lsls	r3, r3, #1
1a013436:	2103      	movs	r1, #3
1a013438:	fa01 f303 	lsl.w	r3, r1, r3
1a01343c:	4313      	orrs	r3, r2
1a01343e:	60fb      	str	r3, [r7, #12]
	reg = pTMR->EMR &= ~mask;
1a013440:	687b      	ldr	r3, [r7, #4]
1a013442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
1a013444:	68fb      	ldr	r3, [r7, #12]
1a013446:	43db      	mvns	r3, r3
1a013448:	4013      	ands	r3, r2
1a01344a:	687a      	ldr	r2, [r7, #4]
1a01344c:	63d3      	str	r3, [r2, #60]	; 0x3c
1a01344e:	60bb      	str	r3, [r7, #8]

	/* Set new configuration for selected match register */
	pTMR->EMR = reg | (((uint32_t) initial_state) << matchnum) |
1a013450:	f997 2003 	ldrsb.w	r2, [r7, #3]
1a013454:	f997 3001 	ldrsb.w	r3, [r7, #1]
1a013458:	409a      	lsls	r2, r3
1a01345a:	68bb      	ldr	r3, [r7, #8]
1a01345c:	431a      	orrs	r2, r3
				(((uint32_t) matchState) << (4 + (matchnum * 2)));
1a01345e:	78b9      	ldrb	r1, [r7, #2]
1a013460:	f997 3001 	ldrsb.w	r3, [r7, #1]
1a013464:	3302      	adds	r3, #2
1a013466:	005b      	lsls	r3, r3, #1
1a013468:	fa01 f303 	lsl.w	r3, r1, r3
	/* Clear bits corresponding to selected match register */
	mask = (1 << matchnum) | (0x03 << (4 + (matchnum * 2)));
	reg = pTMR->EMR &= ~mask;

	/* Set new configuration for selected match register */
	pTMR->EMR = reg | (((uint32_t) initial_state) << matchnum) |
1a01346c:	431a      	orrs	r2, r3
1a01346e:	687b      	ldr	r3, [r7, #4]
1a013470:	63da      	str	r2, [r3, #60]	; 0x3c
				(((uint32_t) matchState) << (4 + (matchnum * 2)));
}
1a013472:	bf00      	nop
1a013474:	3714      	adds	r7, #20
1a013476:	46bd      	mov	sp, r7
1a013478:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01347c:	4770      	bx	lr
1a01347e:	bf00      	nop

1a013480 <Chip_UART_TXDisable>:
 * @brief	Disable transmission on UART TxD pin
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
1a013480:	b480      	push	{r7}
1a013482:	b083      	sub	sp, #12
1a013484:	af00      	add	r7, sp, #0
1a013486:	6078      	str	r0, [r7, #4]
    pUART->TER2 = 0;
1a013488:	687b      	ldr	r3, [r7, #4]
1a01348a:	2200      	movs	r2, #0
1a01348c:	65da      	str	r2, [r3, #92]	; 0x5c
}
1a01348e:	bf00      	nop
1a013490:	370c      	adds	r7, #12
1a013492:	46bd      	mov	sp, r7
1a013494:	f85d 7b04 	ldr.w	r7, [sp], #4
1a013498:	4770      	bx	lr
1a01349a:	bf00      	nop

1a01349c <Chip_UART_SetupFIFOS>:
 *			to select specific options. For example, to enable the FIFOs
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
1a01349c:	b480      	push	{r7}
1a01349e:	b083      	sub	sp, #12
1a0134a0:	af00      	add	r7, sp, #0
1a0134a2:	6078      	str	r0, [r7, #4]
1a0134a4:	6039      	str	r1, [r7, #0]
	pUART->FCR = fcr;
1a0134a6:	687b      	ldr	r3, [r7, #4]
1a0134a8:	683a      	ldr	r2, [r7, #0]
1a0134aa:	609a      	str	r2, [r3, #8]
}
1a0134ac:	bf00      	nop
1a0134ae:	370c      	adds	r7, #12
1a0134b0:	46bd      	mov	sp, r7
1a0134b2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0134b6:	4770      	bx	lr

1a0134b8 <Chip_UART_ConfigData>:
 *			definitions. For example, a configuration of 8 data bits, 1
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
1a0134b8:	b480      	push	{r7}
1a0134ba:	b083      	sub	sp, #12
1a0134bc:	af00      	add	r7, sp, #0
1a0134be:	6078      	str	r0, [r7, #4]
1a0134c0:	6039      	str	r1, [r7, #0]
	pUART->LCR = config;
1a0134c2:	687b      	ldr	r3, [r7, #4]
1a0134c4:	683a      	ldr	r2, [r7, #0]
1a0134c6:	60da      	str	r2, [r3, #12]
}
1a0134c8:	bf00      	nop
1a0134ca:	370c      	adds	r7, #12
1a0134cc:	46bd      	mov	sp, r7
1a0134ce:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0134d2:	4770      	bx	lr

1a0134d4 <Chip_UART_EnableDivisorAccess>:
 * @brief	Enable access to Divisor Latches
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
1a0134d4:	b480      	push	{r7}
1a0134d6:	b083      	sub	sp, #12
1a0134d8:	af00      	add	r7, sp, #0
1a0134da:	6078      	str	r0, [r7, #4]
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0134dc:	687b      	ldr	r3, [r7, #4]
1a0134de:	68db      	ldr	r3, [r3, #12]
1a0134e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
1a0134e4:	687b      	ldr	r3, [r7, #4]
1a0134e6:	60da      	str	r2, [r3, #12]
}
1a0134e8:	bf00      	nop
1a0134ea:	370c      	adds	r7, #12
1a0134ec:	46bd      	mov	sp, r7
1a0134ee:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0134f2:	4770      	bx	lr

1a0134f4 <Chip_UART_DisableDivisorAccess>:
 * @brief	Disable access to Divisor Latches
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
1a0134f4:	b480      	push	{r7}
1a0134f6:	b083      	sub	sp, #12
1a0134f8:	af00      	add	r7, sp, #0
1a0134fa:	6078      	str	r0, [r7, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0134fc:	687b      	ldr	r3, [r7, #4]
1a0134fe:	68db      	ldr	r3, [r3, #12]
1a013500:	f023 0280 	bic.w	r2, r3, #128	; 0x80
1a013504:	687b      	ldr	r3, [r7, #4]
1a013506:	60da      	str	r2, [r3, #12]
}
1a013508:	bf00      	nop
1a01350a:	370c      	adds	r7, #12
1a01350c:	46bd      	mov	sp, r7
1a01350e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a013512:	4770      	bx	lr

1a013514 <Chip_UART_SetDivisorLatches>:
 * @note	The Divisor Latch Access Bit (DLAB) in LCR must be set in
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
1a013514:	b480      	push	{r7}
1a013516:	b083      	sub	sp, #12
1a013518:	af00      	add	r7, sp, #0
1a01351a:	6078      	str	r0, [r7, #4]
1a01351c:	460b      	mov	r3, r1
1a01351e:	70fb      	strb	r3, [r7, #3]
1a013520:	4613      	mov	r3, r2
1a013522:	70bb      	strb	r3, [r7, #2]
	pUART->DLL = (uint32_t) dll;
1a013524:	78fa      	ldrb	r2, [r7, #3]
1a013526:	687b      	ldr	r3, [r7, #4]
1a013528:	601a      	str	r2, [r3, #0]
	pUART->DLM = (uint32_t) dlm;
1a01352a:	78ba      	ldrb	r2, [r7, #2]
1a01352c:	687b      	ldr	r3, [r7, #4]
1a01352e:	605a      	str	r2, [r3, #4]
}
1a013530:	bf00      	nop
1a013532:	370c      	adds	r7, #12
1a013534:	46bd      	mov	sp, r7
1a013536:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01353a:	4770      	bx	lr

1a01353c <Chip_UART_GetClockIndex>:
 * Private functions
 ****************************************************************************/

/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_UART_GetClockIndex(LPC_USART_T *pUART)
{
1a01353c:	b480      	push	{r7}
1a01353e:	b085      	sub	sp, #20
1a013540:	af00      	add	r7, sp, #0
1a013542:	6078      	str	r0, [r7, #4]
	CHIP_CCU_CLK_T clkUART;

	if (pUART == LPC_USART3) {
1a013544:	687b      	ldr	r3, [r7, #4]
1a013546:	4a0e      	ldr	r2, [pc, #56]	; (1a013580 <Chip_UART_GetClockIndex+0x44>)
1a013548:	4293      	cmp	r3, r2
1a01354a:	d102      	bne.n	1a013552 <Chip_UART_GetClockIndex+0x16>
		clkUART = CLK_MX_UART3;
1a01354c:	23a2      	movs	r3, #162	; 0xa2
1a01354e:	81fb      	strh	r3, [r7, #14]
1a013550:	e00f      	b.n	1a013572 <Chip_UART_GetClockIndex+0x36>
	}
	else if (pUART == LPC_USART2) {
1a013552:	687b      	ldr	r3, [r7, #4]
1a013554:	4a0b      	ldr	r2, [pc, #44]	; (1a013584 <Chip_UART_GetClockIndex+0x48>)
1a013556:	4293      	cmp	r3, r2
1a013558:	d102      	bne.n	1a013560 <Chip_UART_GetClockIndex+0x24>
		clkUART = CLK_MX_UART2;
1a01355a:	23a1      	movs	r3, #161	; 0xa1
1a01355c:	81fb      	strh	r3, [r7, #14]
1a01355e:	e008      	b.n	1a013572 <Chip_UART_GetClockIndex+0x36>
	}
	else if (pUART == LPC_UART1) {
1a013560:	687b      	ldr	r3, [r7, #4]
1a013562:	4a09      	ldr	r2, [pc, #36]	; (1a013588 <Chip_UART_GetClockIndex+0x4c>)
1a013564:	4293      	cmp	r3, r2
1a013566:	d102      	bne.n	1a01356e <Chip_UART_GetClockIndex+0x32>
		clkUART = CLK_MX_UART1;
1a013568:	2382      	movs	r3, #130	; 0x82
1a01356a:	81fb      	strh	r3, [r7, #14]
1a01356c:	e001      	b.n	1a013572 <Chip_UART_GetClockIndex+0x36>
	}
	else {
		clkUART = CLK_MX_UART0;
1a01356e:	2381      	movs	r3, #129	; 0x81
1a013570:	81fb      	strh	r3, [r7, #14]
	}

	return clkUART;
1a013572:	89fb      	ldrh	r3, [r7, #14]
}
1a013574:	4618      	mov	r0, r3
1a013576:	3714      	adds	r7, #20
1a013578:	46bd      	mov	sp, r7
1a01357a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a01357e:	4770      	bx	lr
1a013580:	400c2000 	.word	0x400c2000
1a013584:	400c1000 	.word	0x400c1000
1a013588:	40082000 	.word	0x40082000

1a01358c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a01358c:	b580      	push	{r7, lr}
1a01358e:	b084      	sub	sp, #16
1a013590:	af00      	add	r7, sp, #0
1a013592:	6078      	str	r0, [r7, #4]
    uint32_t tmp;

	(void) tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(Chip_UART_GetClockIndex(pUART), true, true, 1);
1a013594:	6878      	ldr	r0, [r7, #4]
1a013596:	f7ff ffd1 	bl	1a01353c <Chip_UART_GetClockIndex>
1a01359a:	4603      	mov	r3, r0
1a01359c:	4618      	mov	r0, r3
1a01359e:	2301      	movs	r3, #1
1a0135a0:	2201      	movs	r2, #1
1a0135a2:	2101      	movs	r1, #1
1a0135a4:	f7fe ff6c 	bl	1a012480 <Chip_Clock_EnableOpts>

	/* Enable FIFOs by default, reset them */
	Chip_UART_SetupFIFOS(pUART, (UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS));
1a0135a8:	2107      	movs	r1, #7
1a0135aa:	6878      	ldr	r0, [r7, #4]
1a0135ac:	f7ff ff76 	bl	1a01349c <Chip_UART_SetupFIFOS>

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);
1a0135b0:	6878      	ldr	r0, [r7, #4]
1a0135b2:	f7ff ff65 	bl	1a013480 <Chip_UART_TXDisable>

    /* Disable interrupts */
	pUART->IER = 0;
1a0135b6:	687b      	ldr	r3, [r7, #4]
1a0135b8:	2200      	movs	r2, #0
1a0135ba:	605a      	str	r2, [r3, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0135bc:	687b      	ldr	r3, [r7, #4]
1a0135be:	2200      	movs	r2, #0
1a0135c0:	60da      	str	r2, [r3, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0135c2:	687b      	ldr	r3, [r7, #4]
1a0135c4:	2200      	movs	r2, #0
1a0135c6:	621a      	str	r2, [r3, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0135c8:	687b      	ldr	r3, [r7, #4]
1a0135ca:	2200      	movs	r2, #0
1a0135cc:	64da      	str	r2, [r3, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0135ce:	687b      	ldr	r3, [r7, #4]
1a0135d0:	2200      	movs	r2, #0
1a0135d2:	655a      	str	r2, [r3, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0135d4:	687b      	ldr	r3, [r7, #4]
1a0135d6:	2200      	movs	r2, #0
1a0135d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0135da:	687b      	ldr	r3, [r7, #4]
1a0135dc:	4a09      	ldr	r2, [pc, #36]	; (1a013604 <Chip_UART_Init+0x78>)
1a0135de:	4293      	cmp	r3, r2
1a0135e0:	d105      	bne.n	1a0135ee <Chip_UART_Init+0x62>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a0135e2:	687b      	ldr	r3, [r7, #4]
1a0135e4:	2200      	movs	r2, #0
1a0135e6:	611a      	str	r2, [r3, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a0135e8:	687b      	ldr	r3, [r7, #4]
1a0135ea:	699b      	ldr	r3, [r3, #24]
1a0135ec:	60fb      	str	r3, [r7, #12]
	}

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));
1a0135ee:	2103      	movs	r1, #3
1a0135f0:	6878      	ldr	r0, [r7, #4]
1a0135f2:	f7ff ff61 	bl	1a0134b8 <Chip_UART_ConfigData>

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0135f6:	687b      	ldr	r3, [r7, #4]
1a0135f8:	2210      	movs	r2, #16
1a0135fa:	629a      	str	r2, [r3, #40]	; 0x28
}
1a0135fc:	bf00      	nop
1a0135fe:	3710      	adds	r7, #16
1a013600:	46bd      	mov	sp, r7
1a013602:	bd80      	pop	{r7, pc}
1a013604:	40082000 	.word	0x40082000

1a013608 <Chip_UART_DeInit>:

/* De-initializes the pUART peripheral */
void Chip_UART_DeInit(LPC_USART_T *pUART)
{
1a013608:	b580      	push	{r7, lr}
1a01360a:	b082      	sub	sp, #8
1a01360c:	af00      	add	r7, sp, #0
1a01360e:	6078      	str	r0, [r7, #4]
    /* Disable Tx */
    Chip_UART_TXDisable(pUART);
1a013610:	6878      	ldr	r0, [r7, #4]
1a013612:	f7ff ff35 	bl	1a013480 <Chip_UART_TXDisable>

    /* Disable clock */
	Chip_Clock_Disable(Chip_UART_GetClockIndex(pUART));
1a013616:	6878      	ldr	r0, [r7, #4]
1a013618:	f7ff ff90 	bl	1a01353c <Chip_UART_GetClockIndex>
1a01361c:	4603      	mov	r3, r0
1a01361e:	4618      	mov	r0, r3
1a013620:	f7fe ffb2 	bl	1a012588 <Chip_Clock_Disable>
}
1a013624:	bf00      	nop
1a013626:	3708      	adds	r7, #8
1a013628:	46bd      	mov	sp, r7
1a01362a:	bd80      	pop	{r7, pc}

1a01362c <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a01362c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a013630:	b08f      	sub	sp, #60	; 0x3c
1a013632:	af00      	add	r7, sp, #0
1a013634:	6078      	str	r0, [r7, #4]
1a013636:	6039      	str	r1, [r7, #0]
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a013638:	2300      	movs	r3, #0
1a01363a:	637b      	str	r3, [r7, #52]	; 0x34
1a01363c:	2301      	movs	r3, #1
1a01363e:	633b      	str	r3, [r7, #48]	; 0x30
1a013640:	2300      	movs	r3, #0
1a013642:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a013644:	f04f 33ff 	mov.w	r3, #4294967295
1a013648:	623b      	str	r3, [r7, #32]

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(Chip_UART_GetClockIndex(pUART));
1a01364a:	6878      	ldr	r0, [r7, #4]
1a01364c:	f7ff ff76 	bl	1a01353c <Chip_UART_GetClockIndex>
1a013650:	4603      	mov	r3, r0
1a013652:	4618      	mov	r0, r3
1a013654:	f7fe ffc8 	bl	1a0125e8 <Chip_Clock_GetRate>
1a013658:	6178      	str	r0, [r7, #20]

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a01365a:	2301      	movs	r3, #1
1a01365c:	62bb      	str	r3, [r7, #40]	; 0x28
1a01365e:	e062      	b.n	1a013726 <Chip_UART_SetBaudFDR+0xfa>
		for (d = 0; d < m; d++) {
1a013660:	2300      	movs	r3, #0
1a013662:	627b      	str	r3, [r7, #36]	; 0x24
1a013664:	e056      	b.n	1a013714 <Chip_UART_SetBaudFDR+0xe8>
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a013666:	697b      	ldr	r3, [r7, #20]
1a013668:	461a      	mov	r2, r3
1a01366a:	f04f 0300 	mov.w	r3, #0
1a01366e:	071d      	lsls	r5, r3, #28
1a013670:	ea45 1512 	orr.w	r5, r5, r2, lsr #4
1a013674:	0714      	lsls	r4, r2, #28
1a013676:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a013678:	461a      	mov	r2, r3
1a01367a:	f04f 0300 	mov.w	r3, #0
1a01367e:	fb02 f005 	mul.w	r0, r2, r5
1a013682:	fb04 f103 	mul.w	r1, r4, r3
1a013686:	1846      	adds	r6, r0, r1
1a013688:	fba4 0102 	umull	r0, r1, r4, r2
1a01368c:	1873      	adds	r3, r6, r1
1a01368e:	4619      	mov	r1, r3
1a013690:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a013692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a013694:	4413      	add	r3, r2
1a013696:	683a      	ldr	r2, [r7, #0]
1a013698:	fb02 f303 	mul.w	r3, r2, r3
1a01369c:	461a      	mov	r2, r3
1a01369e:	f04f 0300 	mov.w	r3, #0
1a0136a2:	f001 f889 	bl	1a0147b8 <__aeabi_uldivmod>
1a0136a6:	4602      	mov	r2, r0
1a0136a8:	460b      	mov	r3, r1
1a0136aa:	e9c7 2302 	strd	r2, r3, [r7, #8]

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a0136ae:	68bb      	ldr	r3, [r7, #8]
1a0136b0:	61fb      	str	r3, [r7, #28]
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a0136b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
1a0136b6:	4698      	mov	r8, r3
1a0136b8:	f04f 0900 	mov.w	r9, #0
1a0136bc:	4643      	mov	r3, r8
1a0136be:	61bb      	str	r3, [r7, #24]

			/* Closer to next div */
			if ((int)diff < 0) {
1a0136c0:	69fb      	ldr	r3, [r7, #28]
1a0136c2:	2b00      	cmp	r3, #0
1a0136c4:	da05      	bge.n	1a0136d2 <Chip_UART_SetBaudFDR+0xa6>
				diff = -diff;
1a0136c6:	69fb      	ldr	r3, [r7, #28]
1a0136c8:	425b      	negs	r3, r3
1a0136ca:	61fb      	str	r3, [r7, #28]
				div ++;
1a0136cc:	69bb      	ldr	r3, [r7, #24]
1a0136ce:	3301      	adds	r3, #1
1a0136d0:	61bb      	str	r3, [r7, #24]
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0136d2:	6a3a      	ldr	r2, [r7, #32]
1a0136d4:	69fb      	ldr	r3, [r7, #28]
1a0136d6:	429a      	cmp	r2, r3
1a0136d8:	d318      	bcc.n	1a01370c <Chip_UART_SetBaudFDR+0xe0>
1a0136da:	69bb      	ldr	r3, [r7, #24]
1a0136dc:	2b00      	cmp	r3, #0
1a0136de:	d015      	beq.n	1a01370c <Chip_UART_SetBaudFDR+0xe0>
1a0136e0:	69bb      	ldr	r3, [r7, #24]
1a0136e2:	0c1b      	lsrs	r3, r3, #16
1a0136e4:	2b00      	cmp	r3, #0
1a0136e6:	d111      	bne.n	1a01370c <Chip_UART_SetBaudFDR+0xe0>
1a0136e8:	69bb      	ldr	r3, [r7, #24]
1a0136ea:	2b02      	cmp	r3, #2
1a0136ec:	d802      	bhi.n	1a0136f4 <Chip_UART_SetBaudFDR+0xc8>
1a0136ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0136f0:	2b00      	cmp	r3, #0
1a0136f2:	d10b      	bne.n	1a01370c <Chip_UART_SetBaudFDR+0xe0>
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a0136f4:	69bb      	ldr	r3, [r7, #24]
1a0136f6:	637b      	str	r3, [r7, #52]	; 0x34
			sd = d;
1a0136f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0136fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			sm = m;
1a0136fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a0136fe:	633b      	str	r3, [r7, #48]	; 0x30
			odiff = diff;
1a013700:	69fb      	ldr	r3, [r7, #28]
1a013702:	623b      	str	r3, [r7, #32]

			/* On perfect match, break loop */
			if(!diff) {
1a013704:	69fb      	ldr	r3, [r7, #28]
1a013706:	2b00      	cmp	r3, #0
1a013708:	d009      	beq.n	1a01371e <Chip_UART_SetBaudFDR+0xf2>
1a01370a:	e000      	b.n	1a01370e <Chip_UART_SetBaudFDR+0xe2>
				div ++;
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
1a01370c:	bf00      	nop
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(Chip_UART_GetClockIndex(pUART));

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a01370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a013710:	3301      	adds	r3, #1
1a013712:	627b      	str	r3, [r7, #36]	; 0x24
1a013714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1a013716:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a013718:	429a      	cmp	r2, r3
1a01371a:	d3a4      	bcc.n	1a013666 <Chip_UART_SetBaudFDR+0x3a>
1a01371c:	e000      	b.n	1a013720 <Chip_UART_SetBaudFDR+0xf4>
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
				break;
1a01371e:	bf00      	nop

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(Chip_UART_GetClockIndex(pUART));

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a013720:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a013722:	3301      	adds	r3, #1
1a013724:	62bb      	str	r3, [r7, #40]	; 0x28
1a013726:	6a3b      	ldr	r3, [r7, #32]
1a013728:	2b00      	cmp	r3, #0
1a01372a:	d002      	beq.n	1a013732 <Chip_UART_SetBaudFDR+0x106>
1a01372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a01372e:	2b0f      	cmp	r3, #15
1a013730:	d996      	bls.n	1a013660 <Chip_UART_SetBaudFDR+0x34>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a013732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a013734:	2b00      	cmp	r3, #0
1a013736:	d101      	bne.n	1a01373c <Chip_UART_SetBaudFDR+0x110>
		return 0;
1a013738:	2300      	movs	r3, #0
1a01373a:	e024      	b.n	1a013786 <Chip_UART_SetBaudFDR+0x15a>
	}

	/* Update UART registers */
	Chip_UART_EnableDivisorAccess(pUART);
1a01373c:	6878      	ldr	r0, [r7, #4]
1a01373e:	f7ff fec9 	bl	1a0134d4 <Chip_UART_EnableDivisorAccess>
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
1a013742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a013744:	b2d9      	uxtb	r1, r3
1a013746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a013748:	0a1b      	lsrs	r3, r3, #8
1a01374a:	b2db      	uxtb	r3, r3
1a01374c:	461a      	mov	r2, r3
1a01374e:	6878      	ldr	r0, [r7, #4]
1a013750:	f7ff fee0 	bl	1a013514 <Chip_UART_SetDivisorLatches>
	Chip_UART_DisableDivisorAccess(pUART);
1a013754:	6878      	ldr	r0, [r7, #4]
1a013756:	f7ff fecd 	bl	1a0134f4 <Chip_UART_DisableDivisorAccess>

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a01375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a01375c:	011b      	lsls	r3, r3, #4
1a01375e:	b2da      	uxtb	r2, r3
1a013760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a013762:	f003 030f 	and.w	r3, r3, #15
1a013766:	431a      	orrs	r2, r3
1a013768:	687b      	ldr	r3, [r7, #4]
1a01376a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a01376c:	697b      	ldr	r3, [r7, #20]
1a01376e:	091b      	lsrs	r3, r3, #4
1a013770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1a013772:	fb02 f203 	mul.w	r2, r2, r3
1a013776:	6b39      	ldr	r1, [r7, #48]	; 0x30
1a013778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a01377a:	440b      	add	r3, r1
1a01377c:	6b79      	ldr	r1, [r7, #52]	; 0x34
1a01377e:	fb01 f303 	mul.w	r3, r1, r3
1a013782:	fbb2 f3f3 	udiv	r3, r2, r3
}
1a013786:	4618      	mov	r0, r3
1a013788:	373c      	adds	r7, #60	; 0x3c
1a01378a:	46bd      	mov	sp, r7
1a01378c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

1a013790 <__aeabi_drsub>:
1a013790:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a013794:	e002      	b.n	1a01379c <__adddf3>
1a013796:	bf00      	nop

1a013798 <__aeabi_dsub>:
1a013798:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a01379c <__adddf3>:
1a01379c:	b530      	push	{r4, r5, lr}
1a01379e:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a0137a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a0137a6:	ea94 0f05 	teq	r4, r5
1a0137aa:	bf08      	it	eq
1a0137ac:	ea90 0f02 	teqeq	r0, r2
1a0137b0:	bf1f      	itttt	ne
1a0137b2:	ea54 0c00 	orrsne.w	ip, r4, r0
1a0137b6:	ea55 0c02 	orrsne.w	ip, r5, r2
1a0137ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a0137be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0137c2:	f000 80e2 	beq.w	1a01398a <__adddf3+0x1ee>
1a0137c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a0137ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a0137ce:	bfb8      	it	lt
1a0137d0:	426d      	neglt	r5, r5
1a0137d2:	dd0c      	ble.n	1a0137ee <__adddf3+0x52>
1a0137d4:	442c      	add	r4, r5
1a0137d6:	ea80 0202 	eor.w	r2, r0, r2
1a0137da:	ea81 0303 	eor.w	r3, r1, r3
1a0137de:	ea82 0000 	eor.w	r0, r2, r0
1a0137e2:	ea83 0101 	eor.w	r1, r3, r1
1a0137e6:	ea80 0202 	eor.w	r2, r0, r2
1a0137ea:	ea81 0303 	eor.w	r3, r1, r3
1a0137ee:	2d36      	cmp	r5, #54	; 0x36
1a0137f0:	bf88      	it	hi
1a0137f2:	bd30      	pophi	{r4, r5, pc}
1a0137f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0137f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0137fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a013800:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a013804:	d002      	beq.n	1a01380c <__adddf3+0x70>
1a013806:	4240      	negs	r0, r0
1a013808:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a01380c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a013810:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a013814:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a013818:	d002      	beq.n	1a013820 <__adddf3+0x84>
1a01381a:	4252      	negs	r2, r2
1a01381c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a013820:	ea94 0f05 	teq	r4, r5
1a013824:	f000 80a7 	beq.w	1a013976 <__adddf3+0x1da>
1a013828:	f1a4 0401 	sub.w	r4, r4, #1
1a01382c:	f1d5 0e20 	rsbs	lr, r5, #32
1a013830:	db0d      	blt.n	1a01384e <__adddf3+0xb2>
1a013832:	fa02 fc0e 	lsl.w	ip, r2, lr
1a013836:	fa22 f205 	lsr.w	r2, r2, r5
1a01383a:	1880      	adds	r0, r0, r2
1a01383c:	f141 0100 	adc.w	r1, r1, #0
1a013840:	fa03 f20e 	lsl.w	r2, r3, lr
1a013844:	1880      	adds	r0, r0, r2
1a013846:	fa43 f305 	asr.w	r3, r3, r5
1a01384a:	4159      	adcs	r1, r3
1a01384c:	e00e      	b.n	1a01386c <__adddf3+0xd0>
1a01384e:	f1a5 0520 	sub.w	r5, r5, #32
1a013852:	f10e 0e20 	add.w	lr, lr, #32
1a013856:	2a01      	cmp	r2, #1
1a013858:	fa03 fc0e 	lsl.w	ip, r3, lr
1a01385c:	bf28      	it	cs
1a01385e:	f04c 0c02 	orrcs.w	ip, ip, #2
1a013862:	fa43 f305 	asr.w	r3, r3, r5
1a013866:	18c0      	adds	r0, r0, r3
1a013868:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a01386c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a013870:	d507      	bpl.n	1a013882 <__adddf3+0xe6>
1a013872:	f04f 0e00 	mov.w	lr, #0
1a013876:	f1dc 0c00 	rsbs	ip, ip, #0
1a01387a:	eb7e 0000 	sbcs.w	r0, lr, r0
1a01387e:	eb6e 0101 	sbc.w	r1, lr, r1
1a013882:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a013886:	d31b      	bcc.n	1a0138c0 <__adddf3+0x124>
1a013888:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a01388c:	d30c      	bcc.n	1a0138a8 <__adddf3+0x10c>
1a01388e:	0849      	lsrs	r1, r1, #1
1a013890:	ea5f 0030 	movs.w	r0, r0, rrx
1a013894:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a013898:	f104 0401 	add.w	r4, r4, #1
1a01389c:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a0138a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a0138a4:	f080 809a 	bcs.w	1a0139dc <__adddf3+0x240>
1a0138a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a0138ac:	bf08      	it	eq
1a0138ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0138b2:	f150 0000 	adcs.w	r0, r0, #0
1a0138b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0138ba:	ea41 0105 	orr.w	r1, r1, r5
1a0138be:	bd30      	pop	{r4, r5, pc}
1a0138c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a0138c4:	4140      	adcs	r0, r0
1a0138c6:	eb41 0101 	adc.w	r1, r1, r1
1a0138ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0138ce:	f1a4 0401 	sub.w	r4, r4, #1
1a0138d2:	d1e9      	bne.n	1a0138a8 <__adddf3+0x10c>
1a0138d4:	f091 0f00 	teq	r1, #0
1a0138d8:	bf04      	itt	eq
1a0138da:	4601      	moveq	r1, r0
1a0138dc:	2000      	moveq	r0, #0
1a0138de:	fab1 f381 	clz	r3, r1
1a0138e2:	bf08      	it	eq
1a0138e4:	3320      	addeq	r3, #32
1a0138e6:	f1a3 030b 	sub.w	r3, r3, #11
1a0138ea:	f1b3 0220 	subs.w	r2, r3, #32
1a0138ee:	da0c      	bge.n	1a01390a <__adddf3+0x16e>
1a0138f0:	320c      	adds	r2, #12
1a0138f2:	dd08      	ble.n	1a013906 <__adddf3+0x16a>
1a0138f4:	f102 0c14 	add.w	ip, r2, #20
1a0138f8:	f1c2 020c 	rsb	r2, r2, #12
1a0138fc:	fa01 f00c 	lsl.w	r0, r1, ip
1a013900:	fa21 f102 	lsr.w	r1, r1, r2
1a013904:	e00c      	b.n	1a013920 <__adddf3+0x184>
1a013906:	f102 0214 	add.w	r2, r2, #20
1a01390a:	bfd8      	it	le
1a01390c:	f1c2 0c20 	rsble	ip, r2, #32
1a013910:	fa01 f102 	lsl.w	r1, r1, r2
1a013914:	fa20 fc0c 	lsr.w	ip, r0, ip
1a013918:	bfdc      	itt	le
1a01391a:	ea41 010c 	orrle.w	r1, r1, ip
1a01391e:	4090      	lslle	r0, r2
1a013920:	1ae4      	subs	r4, r4, r3
1a013922:	bfa2      	ittt	ge
1a013924:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a013928:	4329      	orrge	r1, r5
1a01392a:	bd30      	popge	{r4, r5, pc}
1a01392c:	ea6f 0404 	mvn.w	r4, r4
1a013930:	3c1f      	subs	r4, #31
1a013932:	da1c      	bge.n	1a01396e <__adddf3+0x1d2>
1a013934:	340c      	adds	r4, #12
1a013936:	dc0e      	bgt.n	1a013956 <__adddf3+0x1ba>
1a013938:	f104 0414 	add.w	r4, r4, #20
1a01393c:	f1c4 0220 	rsb	r2, r4, #32
1a013940:	fa20 f004 	lsr.w	r0, r0, r4
1a013944:	fa01 f302 	lsl.w	r3, r1, r2
1a013948:	ea40 0003 	orr.w	r0, r0, r3
1a01394c:	fa21 f304 	lsr.w	r3, r1, r4
1a013950:	ea45 0103 	orr.w	r1, r5, r3
1a013954:	bd30      	pop	{r4, r5, pc}
1a013956:	f1c4 040c 	rsb	r4, r4, #12
1a01395a:	f1c4 0220 	rsb	r2, r4, #32
1a01395e:	fa20 f002 	lsr.w	r0, r0, r2
1a013962:	fa01 f304 	lsl.w	r3, r1, r4
1a013966:	ea40 0003 	orr.w	r0, r0, r3
1a01396a:	4629      	mov	r1, r5
1a01396c:	bd30      	pop	{r4, r5, pc}
1a01396e:	fa21 f004 	lsr.w	r0, r1, r4
1a013972:	4629      	mov	r1, r5
1a013974:	bd30      	pop	{r4, r5, pc}
1a013976:	f094 0f00 	teq	r4, #0
1a01397a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a01397e:	bf06      	itte	eq
1a013980:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a013984:	3401      	addeq	r4, #1
1a013986:	3d01      	subne	r5, #1
1a013988:	e74e      	b.n	1a013828 <__adddf3+0x8c>
1a01398a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a01398e:	bf18      	it	ne
1a013990:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a013994:	d029      	beq.n	1a0139ea <__adddf3+0x24e>
1a013996:	ea94 0f05 	teq	r4, r5
1a01399a:	bf08      	it	eq
1a01399c:	ea90 0f02 	teqeq	r0, r2
1a0139a0:	d005      	beq.n	1a0139ae <__adddf3+0x212>
1a0139a2:	ea54 0c00 	orrs.w	ip, r4, r0
1a0139a6:	bf04      	itt	eq
1a0139a8:	4619      	moveq	r1, r3
1a0139aa:	4610      	moveq	r0, r2
1a0139ac:	bd30      	pop	{r4, r5, pc}
1a0139ae:	ea91 0f03 	teq	r1, r3
1a0139b2:	bf1e      	ittt	ne
1a0139b4:	2100      	movne	r1, #0
1a0139b6:	2000      	movne	r0, #0
1a0139b8:	bd30      	popne	{r4, r5, pc}
1a0139ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a0139be:	d105      	bne.n	1a0139cc <__adddf3+0x230>
1a0139c0:	0040      	lsls	r0, r0, #1
1a0139c2:	4149      	adcs	r1, r1
1a0139c4:	bf28      	it	cs
1a0139c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a0139ca:	bd30      	pop	{r4, r5, pc}
1a0139cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a0139d0:	bf3c      	itt	cc
1a0139d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a0139d6:	bd30      	popcc	{r4, r5, pc}
1a0139d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0139dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a0139e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0139e4:	f04f 0000 	mov.w	r0, #0
1a0139e8:	bd30      	pop	{r4, r5, pc}
1a0139ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0139ee:	bf1a      	itte	ne
1a0139f0:	4619      	movne	r1, r3
1a0139f2:	4610      	movne	r0, r2
1a0139f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a0139f8:	bf1c      	itt	ne
1a0139fa:	460b      	movne	r3, r1
1a0139fc:	4602      	movne	r2, r0
1a0139fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a013a02:	bf06      	itte	eq
1a013a04:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a013a08:	ea91 0f03 	teqeq	r1, r3
1a013a0c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a013a10:	bd30      	pop	{r4, r5, pc}
1a013a12:	bf00      	nop

1a013a14 <__aeabi_ui2d>:
1a013a14:	f090 0f00 	teq	r0, #0
1a013a18:	bf04      	itt	eq
1a013a1a:	2100      	moveq	r1, #0
1a013a1c:	4770      	bxeq	lr
1a013a1e:	b530      	push	{r4, r5, lr}
1a013a20:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a013a24:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a013a28:	f04f 0500 	mov.w	r5, #0
1a013a2c:	f04f 0100 	mov.w	r1, #0
1a013a30:	e750      	b.n	1a0138d4 <__adddf3+0x138>
1a013a32:	bf00      	nop

1a013a34 <__aeabi_i2d>:
1a013a34:	f090 0f00 	teq	r0, #0
1a013a38:	bf04      	itt	eq
1a013a3a:	2100      	moveq	r1, #0
1a013a3c:	4770      	bxeq	lr
1a013a3e:	b530      	push	{r4, r5, lr}
1a013a40:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a013a44:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a013a48:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a013a4c:	bf48      	it	mi
1a013a4e:	4240      	negmi	r0, r0
1a013a50:	f04f 0100 	mov.w	r1, #0
1a013a54:	e73e      	b.n	1a0138d4 <__adddf3+0x138>
1a013a56:	bf00      	nop

1a013a58 <__aeabi_f2d>:
1a013a58:	0042      	lsls	r2, r0, #1
1a013a5a:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a013a5e:	ea4f 0131 	mov.w	r1, r1, rrx
1a013a62:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a013a66:	bf1f      	itttt	ne
1a013a68:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a013a6c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a013a70:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a013a74:	4770      	bxne	lr
1a013a76:	f092 0f00 	teq	r2, #0
1a013a7a:	bf14      	ite	ne
1a013a7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a013a80:	4770      	bxeq	lr
1a013a82:	b530      	push	{r4, r5, lr}
1a013a84:	f44f 7460 	mov.w	r4, #896	; 0x380
1a013a88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a013a8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a013a90:	e720      	b.n	1a0138d4 <__adddf3+0x138>
1a013a92:	bf00      	nop

1a013a94 <__aeabi_ul2d>:
1a013a94:	ea50 0201 	orrs.w	r2, r0, r1
1a013a98:	bf08      	it	eq
1a013a9a:	4770      	bxeq	lr
1a013a9c:	b530      	push	{r4, r5, lr}
1a013a9e:	f04f 0500 	mov.w	r5, #0
1a013aa2:	e00a      	b.n	1a013aba <__aeabi_l2d+0x16>

1a013aa4 <__aeabi_l2d>:
1a013aa4:	ea50 0201 	orrs.w	r2, r0, r1
1a013aa8:	bf08      	it	eq
1a013aaa:	4770      	bxeq	lr
1a013aac:	b530      	push	{r4, r5, lr}
1a013aae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a013ab2:	d502      	bpl.n	1a013aba <__aeabi_l2d+0x16>
1a013ab4:	4240      	negs	r0, r0
1a013ab6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a013aba:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a013abe:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a013ac2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a013ac6:	f43f aedc 	beq.w	1a013882 <__adddf3+0xe6>
1a013aca:	f04f 0203 	mov.w	r2, #3
1a013ace:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a013ad2:	bf18      	it	ne
1a013ad4:	3203      	addne	r2, #3
1a013ad6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a013ada:	bf18      	it	ne
1a013adc:	3203      	addne	r2, #3
1a013ade:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a013ae2:	f1c2 0320 	rsb	r3, r2, #32
1a013ae6:	fa00 fc03 	lsl.w	ip, r0, r3
1a013aea:	fa20 f002 	lsr.w	r0, r0, r2
1a013aee:	fa01 fe03 	lsl.w	lr, r1, r3
1a013af2:	ea40 000e 	orr.w	r0, r0, lr
1a013af6:	fa21 f102 	lsr.w	r1, r1, r2
1a013afa:	4414      	add	r4, r2
1a013afc:	e6c1      	b.n	1a013882 <__adddf3+0xe6>
1a013afe:	bf00      	nop

1a013b00 <__aeabi_dmul>:
1a013b00:	b570      	push	{r4, r5, r6, lr}
1a013b02:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a013b06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a013b0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a013b0e:	bf1d      	ittte	ne
1a013b10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a013b14:	ea94 0f0c 	teqne	r4, ip
1a013b18:	ea95 0f0c 	teqne	r5, ip
1a013b1c:	f000 f8de 	bleq	1a013cdc <__aeabi_dmul+0x1dc>
1a013b20:	442c      	add	r4, r5
1a013b22:	ea81 0603 	eor.w	r6, r1, r3
1a013b26:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a013b2a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a013b2e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a013b32:	bf18      	it	ne
1a013b34:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a013b38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a013b3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a013b40:	d038      	beq.n	1a013bb4 <__aeabi_dmul+0xb4>
1a013b42:	fba0 ce02 	umull	ip, lr, r0, r2
1a013b46:	f04f 0500 	mov.w	r5, #0
1a013b4a:	fbe1 e502 	umlal	lr, r5, r1, r2
1a013b4e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a013b52:	fbe0 e503 	umlal	lr, r5, r0, r3
1a013b56:	f04f 0600 	mov.w	r6, #0
1a013b5a:	fbe1 5603 	umlal	r5, r6, r1, r3
1a013b5e:	f09c 0f00 	teq	ip, #0
1a013b62:	bf18      	it	ne
1a013b64:	f04e 0e01 	orrne.w	lr, lr, #1
1a013b68:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a013b6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a013b70:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a013b74:	d204      	bcs.n	1a013b80 <__aeabi_dmul+0x80>
1a013b76:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a013b7a:	416d      	adcs	r5, r5
1a013b7c:	eb46 0606 	adc.w	r6, r6, r6
1a013b80:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a013b84:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a013b88:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a013b8c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a013b90:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a013b94:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a013b98:	bf88      	it	hi
1a013b9a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a013b9e:	d81e      	bhi.n	1a013bde <__aeabi_dmul+0xde>
1a013ba0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a013ba4:	bf08      	it	eq
1a013ba6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a013baa:	f150 0000 	adcs.w	r0, r0, #0
1a013bae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a013bb2:	bd70      	pop	{r4, r5, r6, pc}
1a013bb4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a013bb8:	ea46 0101 	orr.w	r1, r6, r1
1a013bbc:	ea40 0002 	orr.w	r0, r0, r2
1a013bc0:	ea81 0103 	eor.w	r1, r1, r3
1a013bc4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a013bc8:	bfc2      	ittt	gt
1a013bca:	ebd4 050c 	rsbsgt	r5, r4, ip
1a013bce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a013bd2:	bd70      	popgt	{r4, r5, r6, pc}
1a013bd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a013bd8:	f04f 0e00 	mov.w	lr, #0
1a013bdc:	3c01      	subs	r4, #1
1a013bde:	f300 80ab 	bgt.w	1a013d38 <__aeabi_dmul+0x238>
1a013be2:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a013be6:	bfde      	ittt	le
1a013be8:	2000      	movle	r0, #0
1a013bea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a013bee:	bd70      	pople	{r4, r5, r6, pc}
1a013bf0:	f1c4 0400 	rsb	r4, r4, #0
1a013bf4:	3c20      	subs	r4, #32
1a013bf6:	da35      	bge.n	1a013c64 <__aeabi_dmul+0x164>
1a013bf8:	340c      	adds	r4, #12
1a013bfa:	dc1b      	bgt.n	1a013c34 <__aeabi_dmul+0x134>
1a013bfc:	f104 0414 	add.w	r4, r4, #20
1a013c00:	f1c4 0520 	rsb	r5, r4, #32
1a013c04:	fa00 f305 	lsl.w	r3, r0, r5
1a013c08:	fa20 f004 	lsr.w	r0, r0, r4
1a013c0c:	fa01 f205 	lsl.w	r2, r1, r5
1a013c10:	ea40 0002 	orr.w	r0, r0, r2
1a013c14:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a013c18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a013c1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a013c20:	fa21 f604 	lsr.w	r6, r1, r4
1a013c24:	eb42 0106 	adc.w	r1, r2, r6
1a013c28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a013c2c:	bf08      	it	eq
1a013c2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a013c32:	bd70      	pop	{r4, r5, r6, pc}
1a013c34:	f1c4 040c 	rsb	r4, r4, #12
1a013c38:	f1c4 0520 	rsb	r5, r4, #32
1a013c3c:	fa00 f304 	lsl.w	r3, r0, r4
1a013c40:	fa20 f005 	lsr.w	r0, r0, r5
1a013c44:	fa01 f204 	lsl.w	r2, r1, r4
1a013c48:	ea40 0002 	orr.w	r0, r0, r2
1a013c4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a013c50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a013c54:	f141 0100 	adc.w	r1, r1, #0
1a013c58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a013c5c:	bf08      	it	eq
1a013c5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a013c62:	bd70      	pop	{r4, r5, r6, pc}
1a013c64:	f1c4 0520 	rsb	r5, r4, #32
1a013c68:	fa00 f205 	lsl.w	r2, r0, r5
1a013c6c:	ea4e 0e02 	orr.w	lr, lr, r2
1a013c70:	fa20 f304 	lsr.w	r3, r0, r4
1a013c74:	fa01 f205 	lsl.w	r2, r1, r5
1a013c78:	ea43 0302 	orr.w	r3, r3, r2
1a013c7c:	fa21 f004 	lsr.w	r0, r1, r4
1a013c80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a013c84:	fa21 f204 	lsr.w	r2, r1, r4
1a013c88:	ea20 0002 	bic.w	r0, r0, r2
1a013c8c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a013c90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a013c94:	bf08      	it	eq
1a013c96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a013c9a:	bd70      	pop	{r4, r5, r6, pc}
1a013c9c:	f094 0f00 	teq	r4, #0
1a013ca0:	d10f      	bne.n	1a013cc2 <__aeabi_dmul+0x1c2>
1a013ca2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a013ca6:	0040      	lsls	r0, r0, #1
1a013ca8:	eb41 0101 	adc.w	r1, r1, r1
1a013cac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a013cb0:	bf08      	it	eq
1a013cb2:	3c01      	subeq	r4, #1
1a013cb4:	d0f7      	beq.n	1a013ca6 <__aeabi_dmul+0x1a6>
1a013cb6:	ea41 0106 	orr.w	r1, r1, r6
1a013cba:	f095 0f00 	teq	r5, #0
1a013cbe:	bf18      	it	ne
1a013cc0:	4770      	bxne	lr
1a013cc2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a013cc6:	0052      	lsls	r2, r2, #1
1a013cc8:	eb43 0303 	adc.w	r3, r3, r3
1a013ccc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a013cd0:	bf08      	it	eq
1a013cd2:	3d01      	subeq	r5, #1
1a013cd4:	d0f7      	beq.n	1a013cc6 <__aeabi_dmul+0x1c6>
1a013cd6:	ea43 0306 	orr.w	r3, r3, r6
1a013cda:	4770      	bx	lr
1a013cdc:	ea94 0f0c 	teq	r4, ip
1a013ce0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a013ce4:	bf18      	it	ne
1a013ce6:	ea95 0f0c 	teqne	r5, ip
1a013cea:	d00c      	beq.n	1a013d06 <__aeabi_dmul+0x206>
1a013cec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a013cf0:	bf18      	it	ne
1a013cf2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a013cf6:	d1d1      	bne.n	1a013c9c <__aeabi_dmul+0x19c>
1a013cf8:	ea81 0103 	eor.w	r1, r1, r3
1a013cfc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a013d00:	f04f 0000 	mov.w	r0, #0
1a013d04:	bd70      	pop	{r4, r5, r6, pc}
1a013d06:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a013d0a:	bf06      	itte	eq
1a013d0c:	4610      	moveq	r0, r2
1a013d0e:	4619      	moveq	r1, r3
1a013d10:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a013d14:	d019      	beq.n	1a013d4a <__aeabi_dmul+0x24a>
1a013d16:	ea94 0f0c 	teq	r4, ip
1a013d1a:	d102      	bne.n	1a013d22 <__aeabi_dmul+0x222>
1a013d1c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a013d20:	d113      	bne.n	1a013d4a <__aeabi_dmul+0x24a>
1a013d22:	ea95 0f0c 	teq	r5, ip
1a013d26:	d105      	bne.n	1a013d34 <__aeabi_dmul+0x234>
1a013d28:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a013d2c:	bf1c      	itt	ne
1a013d2e:	4610      	movne	r0, r2
1a013d30:	4619      	movne	r1, r3
1a013d32:	d10a      	bne.n	1a013d4a <__aeabi_dmul+0x24a>
1a013d34:	ea81 0103 	eor.w	r1, r1, r3
1a013d38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a013d3c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a013d40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a013d44:	f04f 0000 	mov.w	r0, #0
1a013d48:	bd70      	pop	{r4, r5, r6, pc}
1a013d4a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a013d4e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a013d52:	bd70      	pop	{r4, r5, r6, pc}

1a013d54 <__aeabi_ddiv>:
1a013d54:	b570      	push	{r4, r5, r6, lr}
1a013d56:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a013d5a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a013d5e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a013d62:	bf1d      	ittte	ne
1a013d64:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a013d68:	ea94 0f0c 	teqne	r4, ip
1a013d6c:	ea95 0f0c 	teqne	r5, ip
1a013d70:	f000 f8a7 	bleq	1a013ec2 <__aeabi_ddiv+0x16e>
1a013d74:	eba4 0405 	sub.w	r4, r4, r5
1a013d78:	ea81 0e03 	eor.w	lr, r1, r3
1a013d7c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a013d80:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a013d84:	f000 8088 	beq.w	1a013e98 <__aeabi_ddiv+0x144>
1a013d88:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a013d8c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a013d90:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a013d94:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a013d98:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a013d9c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a013da0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a013da4:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a013da8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a013dac:	429d      	cmp	r5, r3
1a013dae:	bf08      	it	eq
1a013db0:	4296      	cmpeq	r6, r2
1a013db2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a013db6:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a013dba:	d202      	bcs.n	1a013dc2 <__aeabi_ddiv+0x6e>
1a013dbc:	085b      	lsrs	r3, r3, #1
1a013dbe:	ea4f 0232 	mov.w	r2, r2, rrx
1a013dc2:	1ab6      	subs	r6, r6, r2
1a013dc4:	eb65 0503 	sbc.w	r5, r5, r3
1a013dc8:	085b      	lsrs	r3, r3, #1
1a013dca:	ea4f 0232 	mov.w	r2, r2, rrx
1a013dce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a013dd2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a013dd6:	ebb6 0e02 	subs.w	lr, r6, r2
1a013dda:	eb75 0e03 	sbcs.w	lr, r5, r3
1a013dde:	bf22      	ittt	cs
1a013de0:	1ab6      	subcs	r6, r6, r2
1a013de2:	4675      	movcs	r5, lr
1a013de4:	ea40 000c 	orrcs.w	r0, r0, ip
1a013de8:	085b      	lsrs	r3, r3, #1
1a013dea:	ea4f 0232 	mov.w	r2, r2, rrx
1a013dee:	ebb6 0e02 	subs.w	lr, r6, r2
1a013df2:	eb75 0e03 	sbcs.w	lr, r5, r3
1a013df6:	bf22      	ittt	cs
1a013df8:	1ab6      	subcs	r6, r6, r2
1a013dfa:	4675      	movcs	r5, lr
1a013dfc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a013e00:	085b      	lsrs	r3, r3, #1
1a013e02:	ea4f 0232 	mov.w	r2, r2, rrx
1a013e06:	ebb6 0e02 	subs.w	lr, r6, r2
1a013e0a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a013e0e:	bf22      	ittt	cs
1a013e10:	1ab6      	subcs	r6, r6, r2
1a013e12:	4675      	movcs	r5, lr
1a013e14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a013e18:	085b      	lsrs	r3, r3, #1
1a013e1a:	ea4f 0232 	mov.w	r2, r2, rrx
1a013e1e:	ebb6 0e02 	subs.w	lr, r6, r2
1a013e22:	eb75 0e03 	sbcs.w	lr, r5, r3
1a013e26:	bf22      	ittt	cs
1a013e28:	1ab6      	subcs	r6, r6, r2
1a013e2a:	4675      	movcs	r5, lr
1a013e2c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a013e30:	ea55 0e06 	orrs.w	lr, r5, r6
1a013e34:	d018      	beq.n	1a013e68 <__aeabi_ddiv+0x114>
1a013e36:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a013e3a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a013e3e:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a013e42:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a013e46:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a013e4a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a013e4e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a013e52:	d1c0      	bne.n	1a013dd6 <__aeabi_ddiv+0x82>
1a013e54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a013e58:	d10b      	bne.n	1a013e72 <__aeabi_ddiv+0x11e>
1a013e5a:	ea41 0100 	orr.w	r1, r1, r0
1a013e5e:	f04f 0000 	mov.w	r0, #0
1a013e62:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a013e66:	e7b6      	b.n	1a013dd6 <__aeabi_ddiv+0x82>
1a013e68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a013e6c:	bf04      	itt	eq
1a013e6e:	4301      	orreq	r1, r0
1a013e70:	2000      	moveq	r0, #0
1a013e72:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a013e76:	bf88      	it	hi
1a013e78:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a013e7c:	f63f aeaf 	bhi.w	1a013bde <__aeabi_dmul+0xde>
1a013e80:	ebb5 0c03 	subs.w	ip, r5, r3
1a013e84:	bf04      	itt	eq
1a013e86:	ebb6 0c02 	subseq.w	ip, r6, r2
1a013e8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a013e8e:	f150 0000 	adcs.w	r0, r0, #0
1a013e92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a013e96:	bd70      	pop	{r4, r5, r6, pc}
1a013e98:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a013e9c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a013ea0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a013ea4:	bfc2      	ittt	gt
1a013ea6:	ebd4 050c 	rsbsgt	r5, r4, ip
1a013eaa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a013eae:	bd70      	popgt	{r4, r5, r6, pc}
1a013eb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a013eb4:	f04f 0e00 	mov.w	lr, #0
1a013eb8:	3c01      	subs	r4, #1
1a013eba:	e690      	b.n	1a013bde <__aeabi_dmul+0xde>
1a013ebc:	ea45 0e06 	orr.w	lr, r5, r6
1a013ec0:	e68d      	b.n	1a013bde <__aeabi_dmul+0xde>
1a013ec2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a013ec6:	ea94 0f0c 	teq	r4, ip
1a013eca:	bf08      	it	eq
1a013ecc:	ea95 0f0c 	teqeq	r5, ip
1a013ed0:	f43f af3b 	beq.w	1a013d4a <__aeabi_dmul+0x24a>
1a013ed4:	ea94 0f0c 	teq	r4, ip
1a013ed8:	d10a      	bne.n	1a013ef0 <__aeabi_ddiv+0x19c>
1a013eda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a013ede:	f47f af34 	bne.w	1a013d4a <__aeabi_dmul+0x24a>
1a013ee2:	ea95 0f0c 	teq	r5, ip
1a013ee6:	f47f af25 	bne.w	1a013d34 <__aeabi_dmul+0x234>
1a013eea:	4610      	mov	r0, r2
1a013eec:	4619      	mov	r1, r3
1a013eee:	e72c      	b.n	1a013d4a <__aeabi_dmul+0x24a>
1a013ef0:	ea95 0f0c 	teq	r5, ip
1a013ef4:	d106      	bne.n	1a013f04 <__aeabi_ddiv+0x1b0>
1a013ef6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a013efa:	f43f aefd 	beq.w	1a013cf8 <__aeabi_dmul+0x1f8>
1a013efe:	4610      	mov	r0, r2
1a013f00:	4619      	mov	r1, r3
1a013f02:	e722      	b.n	1a013d4a <__aeabi_dmul+0x24a>
1a013f04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a013f08:	bf18      	it	ne
1a013f0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a013f0e:	f47f aec5 	bne.w	1a013c9c <__aeabi_dmul+0x19c>
1a013f12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a013f16:	f47f af0d 	bne.w	1a013d34 <__aeabi_dmul+0x234>
1a013f1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a013f1e:	f47f aeeb 	bne.w	1a013cf8 <__aeabi_dmul+0x1f8>
1a013f22:	e712      	b.n	1a013d4a <__aeabi_dmul+0x24a>

1a013f24 <__gedf2>:
1a013f24:	f04f 3cff 	mov.w	ip, #4294967295
1a013f28:	e006      	b.n	1a013f38 <__cmpdf2+0x4>
1a013f2a:	bf00      	nop

1a013f2c <__ledf2>:
1a013f2c:	f04f 0c01 	mov.w	ip, #1
1a013f30:	e002      	b.n	1a013f38 <__cmpdf2+0x4>
1a013f32:	bf00      	nop

1a013f34 <__cmpdf2>:
1a013f34:	f04f 0c01 	mov.w	ip, #1
1a013f38:	f84d cd04 	str.w	ip, [sp, #-4]!
1a013f3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a013f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a013f44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a013f48:	bf18      	it	ne
1a013f4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a013f4e:	d01b      	beq.n	1a013f88 <__cmpdf2+0x54>
1a013f50:	b001      	add	sp, #4
1a013f52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a013f56:	bf0c      	ite	eq
1a013f58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a013f5c:	ea91 0f03 	teqne	r1, r3
1a013f60:	bf02      	ittt	eq
1a013f62:	ea90 0f02 	teqeq	r0, r2
1a013f66:	2000      	moveq	r0, #0
1a013f68:	4770      	bxeq	lr
1a013f6a:	f110 0f00 	cmn.w	r0, #0
1a013f6e:	ea91 0f03 	teq	r1, r3
1a013f72:	bf58      	it	pl
1a013f74:	4299      	cmppl	r1, r3
1a013f76:	bf08      	it	eq
1a013f78:	4290      	cmpeq	r0, r2
1a013f7a:	bf2c      	ite	cs
1a013f7c:	17d8      	asrcs	r0, r3, #31
1a013f7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a013f82:	f040 0001 	orr.w	r0, r0, #1
1a013f86:	4770      	bx	lr
1a013f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a013f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a013f90:	d102      	bne.n	1a013f98 <__cmpdf2+0x64>
1a013f92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a013f96:	d107      	bne.n	1a013fa8 <__cmpdf2+0x74>
1a013f98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a013f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a013fa0:	d1d6      	bne.n	1a013f50 <__cmpdf2+0x1c>
1a013fa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a013fa6:	d0d3      	beq.n	1a013f50 <__cmpdf2+0x1c>
1a013fa8:	f85d 0b04 	ldr.w	r0, [sp], #4
1a013fac:	4770      	bx	lr
1a013fae:	bf00      	nop

1a013fb0 <__aeabi_cdrcmple>:
1a013fb0:	4684      	mov	ip, r0
1a013fb2:	4610      	mov	r0, r2
1a013fb4:	4662      	mov	r2, ip
1a013fb6:	468c      	mov	ip, r1
1a013fb8:	4619      	mov	r1, r3
1a013fba:	4663      	mov	r3, ip
1a013fbc:	e000      	b.n	1a013fc0 <__aeabi_cdcmpeq>
1a013fbe:	bf00      	nop

1a013fc0 <__aeabi_cdcmpeq>:
1a013fc0:	b501      	push	{r0, lr}
1a013fc2:	f7ff ffb7 	bl	1a013f34 <__cmpdf2>
1a013fc6:	2800      	cmp	r0, #0
1a013fc8:	bf48      	it	mi
1a013fca:	f110 0f00 	cmnmi.w	r0, #0
1a013fce:	bd01      	pop	{r0, pc}

1a013fd0 <__aeabi_dcmpeq>:
1a013fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a013fd4:	f7ff fff4 	bl	1a013fc0 <__aeabi_cdcmpeq>
1a013fd8:	bf0c      	ite	eq
1a013fda:	2001      	moveq	r0, #1
1a013fdc:	2000      	movne	r0, #0
1a013fde:	f85d fb08 	ldr.w	pc, [sp], #8
1a013fe2:	bf00      	nop

1a013fe4 <__aeabi_dcmplt>:
1a013fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
1a013fe8:	f7ff ffea 	bl	1a013fc0 <__aeabi_cdcmpeq>
1a013fec:	bf34      	ite	cc
1a013fee:	2001      	movcc	r0, #1
1a013ff0:	2000      	movcs	r0, #0
1a013ff2:	f85d fb08 	ldr.w	pc, [sp], #8
1a013ff6:	bf00      	nop

1a013ff8 <__aeabi_dcmple>:
1a013ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
1a013ffc:	f7ff ffe0 	bl	1a013fc0 <__aeabi_cdcmpeq>
1a014000:	bf94      	ite	ls
1a014002:	2001      	movls	r0, #1
1a014004:	2000      	movhi	r0, #0
1a014006:	f85d fb08 	ldr.w	pc, [sp], #8
1a01400a:	bf00      	nop

1a01400c <__aeabi_dcmpge>:
1a01400c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a014010:	f7ff ffce 	bl	1a013fb0 <__aeabi_cdrcmple>
1a014014:	bf94      	ite	ls
1a014016:	2001      	movls	r0, #1
1a014018:	2000      	movhi	r0, #0
1a01401a:	f85d fb08 	ldr.w	pc, [sp], #8
1a01401e:	bf00      	nop

1a014020 <__aeabi_dcmpgt>:
1a014020:	f84d ed08 	str.w	lr, [sp, #-8]!
1a014024:	f7ff ffc4 	bl	1a013fb0 <__aeabi_cdrcmple>
1a014028:	bf34      	ite	cc
1a01402a:	2001      	movcc	r0, #1
1a01402c:	2000      	movcs	r0, #0
1a01402e:	f85d fb08 	ldr.w	pc, [sp], #8
1a014032:	bf00      	nop

1a014034 <__aeabi_d2iz>:
1a014034:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a014038:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a01403c:	d215      	bcs.n	1a01406a <__aeabi_d2iz+0x36>
1a01403e:	d511      	bpl.n	1a014064 <__aeabi_d2iz+0x30>
1a014040:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a014044:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a014048:	d912      	bls.n	1a014070 <__aeabi_d2iz+0x3c>
1a01404a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a01404e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a014052:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a014056:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a01405a:	fa23 f002 	lsr.w	r0, r3, r2
1a01405e:	bf18      	it	ne
1a014060:	4240      	negne	r0, r0
1a014062:	4770      	bx	lr
1a014064:	f04f 0000 	mov.w	r0, #0
1a014068:	4770      	bx	lr
1a01406a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a01406e:	d105      	bne.n	1a01407c <__aeabi_d2iz+0x48>
1a014070:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a014074:	bf08      	it	eq
1a014076:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a01407a:	4770      	bx	lr
1a01407c:	f04f 0000 	mov.w	r0, #0
1a014080:	4770      	bx	lr
1a014082:	bf00      	nop

1a014084 <__aeabi_d2f>:
1a014084:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a014088:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a01408c:	bf24      	itt	cs
1a01408e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a014092:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a014096:	d90d      	bls.n	1a0140b4 <__aeabi_d2f+0x30>
1a014098:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a01409c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a0140a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a0140a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a0140a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a0140ac:	bf08      	it	eq
1a0140ae:	f020 0001 	biceq.w	r0, r0, #1
1a0140b2:	4770      	bx	lr
1a0140b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a0140b8:	d121      	bne.n	1a0140fe <__aeabi_d2f+0x7a>
1a0140ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a0140be:	bfbc      	itt	lt
1a0140c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a0140c4:	4770      	bxlt	lr
1a0140c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0140ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a0140ce:	f1c2 0218 	rsb	r2, r2, #24
1a0140d2:	f1c2 0c20 	rsb	ip, r2, #32
1a0140d6:	fa10 f30c 	lsls.w	r3, r0, ip
1a0140da:	fa20 f002 	lsr.w	r0, r0, r2
1a0140de:	bf18      	it	ne
1a0140e0:	f040 0001 	orrne.w	r0, r0, #1
1a0140e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a0140e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a0140ec:	fa03 fc0c 	lsl.w	ip, r3, ip
1a0140f0:	ea40 000c 	orr.w	r0, r0, ip
1a0140f4:	fa23 f302 	lsr.w	r3, r3, r2
1a0140f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a0140fc:	e7cc      	b.n	1a014098 <__aeabi_d2f+0x14>
1a0140fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a014102:	d107      	bne.n	1a014114 <__aeabi_d2f+0x90>
1a014104:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a014108:	bf1e      	ittt	ne
1a01410a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a01410e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a014112:	4770      	bxne	lr
1a014114:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a014118:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a01411c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a014120:	4770      	bx	lr
1a014122:	bf00      	nop

1a014124 <__aeabi_frsub>:
1a014124:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
1a014128:	e002      	b.n	1a014130 <__addsf3>
1a01412a:	bf00      	nop

1a01412c <__aeabi_fsub>:
1a01412c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

1a014130 <__addsf3>:
1a014130:	0042      	lsls	r2, r0, #1
1a014132:	bf1f      	itttt	ne
1a014134:	ea5f 0341 	movsne.w	r3, r1, lsl #1
1a014138:	ea92 0f03 	teqne	r2, r3
1a01413c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
1a014140:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
1a014144:	d06a      	beq.n	1a01421c <__addsf3+0xec>
1a014146:	ea4f 6212 	mov.w	r2, r2, lsr #24
1a01414a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
1a01414e:	bfc1      	itttt	gt
1a014150:	18d2      	addgt	r2, r2, r3
1a014152:	4041      	eorgt	r1, r0
1a014154:	4048      	eorgt	r0, r1
1a014156:	4041      	eorgt	r1, r0
1a014158:	bfb8      	it	lt
1a01415a:	425b      	neglt	r3, r3
1a01415c:	2b19      	cmp	r3, #25
1a01415e:	bf88      	it	hi
1a014160:	4770      	bxhi	lr
1a014162:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
1a014166:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a01416a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
1a01416e:	bf18      	it	ne
1a014170:	4240      	negne	r0, r0
1a014172:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a014176:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
1a01417a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
1a01417e:	bf18      	it	ne
1a014180:	4249      	negne	r1, r1
1a014182:	ea92 0f03 	teq	r2, r3
1a014186:	d03f      	beq.n	1a014208 <__addsf3+0xd8>
1a014188:	f1a2 0201 	sub.w	r2, r2, #1
1a01418c:	fa41 fc03 	asr.w	ip, r1, r3
1a014190:	eb10 000c 	adds.w	r0, r0, ip
1a014194:	f1c3 0320 	rsb	r3, r3, #32
1a014198:	fa01 f103 	lsl.w	r1, r1, r3
1a01419c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
1a0141a0:	d502      	bpl.n	1a0141a8 <__addsf3+0x78>
1a0141a2:	4249      	negs	r1, r1
1a0141a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
1a0141a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
1a0141ac:	d313      	bcc.n	1a0141d6 <__addsf3+0xa6>
1a0141ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a0141b2:	d306      	bcc.n	1a0141c2 <__addsf3+0x92>
1a0141b4:	0840      	lsrs	r0, r0, #1
1a0141b6:	ea4f 0131 	mov.w	r1, r1, rrx
1a0141ba:	f102 0201 	add.w	r2, r2, #1
1a0141be:	2afe      	cmp	r2, #254	; 0xfe
1a0141c0:	d251      	bcs.n	1a014266 <__addsf3+0x136>
1a0141c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
1a0141c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
1a0141ca:	bf08      	it	eq
1a0141cc:	f020 0001 	biceq.w	r0, r0, #1
1a0141d0:	ea40 0003 	orr.w	r0, r0, r3
1a0141d4:	4770      	bx	lr
1a0141d6:	0049      	lsls	r1, r1, #1
1a0141d8:	eb40 0000 	adc.w	r0, r0, r0
1a0141dc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
1a0141e0:	f1a2 0201 	sub.w	r2, r2, #1
1a0141e4:	d1ed      	bne.n	1a0141c2 <__addsf3+0x92>
1a0141e6:	fab0 fc80 	clz	ip, r0
1a0141ea:	f1ac 0c08 	sub.w	ip, ip, #8
1a0141ee:	ebb2 020c 	subs.w	r2, r2, ip
1a0141f2:	fa00 f00c 	lsl.w	r0, r0, ip
1a0141f6:	bfaa      	itet	ge
1a0141f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
1a0141fc:	4252      	neglt	r2, r2
1a0141fe:	4318      	orrge	r0, r3
1a014200:	bfbc      	itt	lt
1a014202:	40d0      	lsrlt	r0, r2
1a014204:	4318      	orrlt	r0, r3
1a014206:	4770      	bx	lr
1a014208:	f092 0f00 	teq	r2, #0
1a01420c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
1a014210:	bf06      	itte	eq
1a014212:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
1a014216:	3201      	addeq	r2, #1
1a014218:	3b01      	subne	r3, #1
1a01421a:	e7b5      	b.n	1a014188 <__addsf3+0x58>
1a01421c:	ea4f 0341 	mov.w	r3, r1, lsl #1
1a014220:	ea7f 6c22 	mvns.w	ip, r2, asr #24
1a014224:	bf18      	it	ne
1a014226:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
1a01422a:	d021      	beq.n	1a014270 <__addsf3+0x140>
1a01422c:	ea92 0f03 	teq	r2, r3
1a014230:	d004      	beq.n	1a01423c <__addsf3+0x10c>
1a014232:	f092 0f00 	teq	r2, #0
1a014236:	bf08      	it	eq
1a014238:	4608      	moveq	r0, r1
1a01423a:	4770      	bx	lr
1a01423c:	ea90 0f01 	teq	r0, r1
1a014240:	bf1c      	itt	ne
1a014242:	2000      	movne	r0, #0
1a014244:	4770      	bxne	lr
1a014246:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
1a01424a:	d104      	bne.n	1a014256 <__addsf3+0x126>
1a01424c:	0040      	lsls	r0, r0, #1
1a01424e:	bf28      	it	cs
1a014250:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
1a014254:	4770      	bx	lr
1a014256:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
1a01425a:	bf3c      	itt	cc
1a01425c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
1a014260:	4770      	bxcc	lr
1a014262:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
1a014266:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
1a01426a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a01426e:	4770      	bx	lr
1a014270:	ea7f 6222 	mvns.w	r2, r2, asr #24
1a014274:	bf16      	itet	ne
1a014276:	4608      	movne	r0, r1
1a014278:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
1a01427c:	4601      	movne	r1, r0
1a01427e:	0242      	lsls	r2, r0, #9
1a014280:	bf06      	itte	eq
1a014282:	ea5f 2341 	movseq.w	r3, r1, lsl #9
1a014286:	ea90 0f01 	teqeq	r0, r1
1a01428a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
1a01428e:	4770      	bx	lr

1a014290 <__aeabi_ui2f>:
1a014290:	f04f 0300 	mov.w	r3, #0
1a014294:	e004      	b.n	1a0142a0 <__aeabi_i2f+0x8>
1a014296:	bf00      	nop

1a014298 <__aeabi_i2f>:
1a014298:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
1a01429c:	bf48      	it	mi
1a01429e:	4240      	negmi	r0, r0
1a0142a0:	ea5f 0c00 	movs.w	ip, r0
1a0142a4:	bf08      	it	eq
1a0142a6:	4770      	bxeq	lr
1a0142a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
1a0142ac:	4601      	mov	r1, r0
1a0142ae:	f04f 0000 	mov.w	r0, #0
1a0142b2:	e01c      	b.n	1a0142ee <__aeabi_l2f+0x2a>

1a0142b4 <__aeabi_ul2f>:
1a0142b4:	ea50 0201 	orrs.w	r2, r0, r1
1a0142b8:	bf08      	it	eq
1a0142ba:	4770      	bxeq	lr
1a0142bc:	f04f 0300 	mov.w	r3, #0
1a0142c0:	e00a      	b.n	1a0142d8 <__aeabi_l2f+0x14>
1a0142c2:	bf00      	nop

1a0142c4 <__aeabi_l2f>:
1a0142c4:	ea50 0201 	orrs.w	r2, r0, r1
1a0142c8:	bf08      	it	eq
1a0142ca:	4770      	bxeq	lr
1a0142cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
1a0142d0:	d502      	bpl.n	1a0142d8 <__aeabi_l2f+0x14>
1a0142d2:	4240      	negs	r0, r0
1a0142d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0142d8:	ea5f 0c01 	movs.w	ip, r1
1a0142dc:	bf02      	ittt	eq
1a0142de:	4684      	moveq	ip, r0
1a0142e0:	4601      	moveq	r1, r0
1a0142e2:	2000      	moveq	r0, #0
1a0142e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
1a0142e8:	bf08      	it	eq
1a0142ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
1a0142ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
1a0142f2:	fabc f28c 	clz	r2, ip
1a0142f6:	3a08      	subs	r2, #8
1a0142f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
1a0142fc:	db10      	blt.n	1a014320 <__aeabi_l2f+0x5c>
1a0142fe:	fa01 fc02 	lsl.w	ip, r1, r2
1a014302:	4463      	add	r3, ip
1a014304:	fa00 fc02 	lsl.w	ip, r0, r2
1a014308:	f1c2 0220 	rsb	r2, r2, #32
1a01430c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a014310:	fa20 f202 	lsr.w	r2, r0, r2
1a014314:	eb43 0002 	adc.w	r0, r3, r2
1a014318:	bf08      	it	eq
1a01431a:	f020 0001 	biceq.w	r0, r0, #1
1a01431e:	4770      	bx	lr
1a014320:	f102 0220 	add.w	r2, r2, #32
1a014324:	fa01 fc02 	lsl.w	ip, r1, r2
1a014328:	f1c2 0220 	rsb	r2, r2, #32
1a01432c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
1a014330:	fa21 f202 	lsr.w	r2, r1, r2
1a014334:	eb43 0002 	adc.w	r0, r3, r2
1a014338:	bf08      	it	eq
1a01433a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
1a01433e:	4770      	bx	lr

1a014340 <__aeabi_fmul>:
1a014340:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a014344:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
1a014348:	bf1e      	ittt	ne
1a01434a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
1a01434e:	ea92 0f0c 	teqne	r2, ip
1a014352:	ea93 0f0c 	teqne	r3, ip
1a014356:	d06f      	beq.n	1a014438 <__aeabi_fmul+0xf8>
1a014358:	441a      	add	r2, r3
1a01435a:	ea80 0c01 	eor.w	ip, r0, r1
1a01435e:	0240      	lsls	r0, r0, #9
1a014360:	bf18      	it	ne
1a014362:	ea5f 2141 	movsne.w	r1, r1, lsl #9
1a014366:	d01e      	beq.n	1a0143a6 <__aeabi_fmul+0x66>
1a014368:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
1a01436c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
1a014370:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
1a014374:	fba0 3101 	umull	r3, r1, r0, r1
1a014378:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
1a01437c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
1a014380:	bf3e      	ittt	cc
1a014382:	0049      	lslcc	r1, r1, #1
1a014384:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
1a014388:	005b      	lslcc	r3, r3, #1
1a01438a:	ea40 0001 	orr.w	r0, r0, r1
1a01438e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
1a014392:	2afd      	cmp	r2, #253	; 0xfd
1a014394:	d81d      	bhi.n	1a0143d2 <__aeabi_fmul+0x92>
1a014396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1a01439a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
1a01439e:	bf08      	it	eq
1a0143a0:	f020 0001 	biceq.w	r0, r0, #1
1a0143a4:	4770      	bx	lr
1a0143a6:	f090 0f00 	teq	r0, #0
1a0143aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
1a0143ae:	bf08      	it	eq
1a0143b0:	0249      	lsleq	r1, r1, #9
1a0143b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
1a0143b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
1a0143ba:	3a7f      	subs	r2, #127	; 0x7f
1a0143bc:	bfc2      	ittt	gt
1a0143be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
1a0143c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
1a0143c6:	4770      	bxgt	lr
1a0143c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a0143cc:	f04f 0300 	mov.w	r3, #0
1a0143d0:	3a01      	subs	r2, #1
1a0143d2:	dc5d      	bgt.n	1a014490 <__aeabi_fmul+0x150>
1a0143d4:	f112 0f19 	cmn.w	r2, #25
1a0143d8:	bfdc      	itt	le
1a0143da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
1a0143de:	4770      	bxle	lr
1a0143e0:	f1c2 0200 	rsb	r2, r2, #0
1a0143e4:	0041      	lsls	r1, r0, #1
1a0143e6:	fa21 f102 	lsr.w	r1, r1, r2
1a0143ea:	f1c2 0220 	rsb	r2, r2, #32
1a0143ee:	fa00 fc02 	lsl.w	ip, r0, r2
1a0143f2:	ea5f 0031 	movs.w	r0, r1, rrx
1a0143f6:	f140 0000 	adc.w	r0, r0, #0
1a0143fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
1a0143fe:	bf08      	it	eq
1a014400:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
1a014404:	4770      	bx	lr
1a014406:	f092 0f00 	teq	r2, #0
1a01440a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
1a01440e:	bf02      	ittt	eq
1a014410:	0040      	lsleq	r0, r0, #1
1a014412:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
1a014416:	3a01      	subeq	r2, #1
1a014418:	d0f9      	beq.n	1a01440e <__aeabi_fmul+0xce>
1a01441a:	ea40 000c 	orr.w	r0, r0, ip
1a01441e:	f093 0f00 	teq	r3, #0
1a014422:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a014426:	bf02      	ittt	eq
1a014428:	0049      	lsleq	r1, r1, #1
1a01442a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
1a01442e:	3b01      	subeq	r3, #1
1a014430:	d0f9      	beq.n	1a014426 <__aeabi_fmul+0xe6>
1a014432:	ea41 010c 	orr.w	r1, r1, ip
1a014436:	e78f      	b.n	1a014358 <__aeabi_fmul+0x18>
1a014438:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
1a01443c:	ea92 0f0c 	teq	r2, ip
1a014440:	bf18      	it	ne
1a014442:	ea93 0f0c 	teqne	r3, ip
1a014446:	d00a      	beq.n	1a01445e <__aeabi_fmul+0x11e>
1a014448:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
1a01444c:	bf18      	it	ne
1a01444e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
1a014452:	d1d8      	bne.n	1a014406 <__aeabi_fmul+0xc6>
1a014454:	ea80 0001 	eor.w	r0, r0, r1
1a014458:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
1a01445c:	4770      	bx	lr
1a01445e:	f090 0f00 	teq	r0, #0
1a014462:	bf17      	itett	ne
1a014464:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
1a014468:	4608      	moveq	r0, r1
1a01446a:	f091 0f00 	teqne	r1, #0
1a01446e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
1a014472:	d014      	beq.n	1a01449e <__aeabi_fmul+0x15e>
1a014474:	ea92 0f0c 	teq	r2, ip
1a014478:	d101      	bne.n	1a01447e <__aeabi_fmul+0x13e>
1a01447a:	0242      	lsls	r2, r0, #9
1a01447c:	d10f      	bne.n	1a01449e <__aeabi_fmul+0x15e>
1a01447e:	ea93 0f0c 	teq	r3, ip
1a014482:	d103      	bne.n	1a01448c <__aeabi_fmul+0x14c>
1a014484:	024b      	lsls	r3, r1, #9
1a014486:	bf18      	it	ne
1a014488:	4608      	movne	r0, r1
1a01448a:	d108      	bne.n	1a01449e <__aeabi_fmul+0x15e>
1a01448c:	ea80 0001 	eor.w	r0, r0, r1
1a014490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
1a014494:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a014498:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a01449c:	4770      	bx	lr
1a01449e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a0144a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
1a0144a6:	4770      	bx	lr

1a0144a8 <__aeabi_fdiv>:
1a0144a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a0144ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
1a0144b0:	bf1e      	ittt	ne
1a0144b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
1a0144b6:	ea92 0f0c 	teqne	r2, ip
1a0144ba:	ea93 0f0c 	teqne	r3, ip
1a0144be:	d069      	beq.n	1a014594 <__aeabi_fdiv+0xec>
1a0144c0:	eba2 0203 	sub.w	r2, r2, r3
1a0144c4:	ea80 0c01 	eor.w	ip, r0, r1
1a0144c8:	0249      	lsls	r1, r1, #9
1a0144ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
1a0144ce:	d037      	beq.n	1a014540 <__aeabi_fdiv+0x98>
1a0144d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
1a0144d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
1a0144d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
1a0144dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
1a0144e0:	428b      	cmp	r3, r1
1a0144e2:	bf38      	it	cc
1a0144e4:	005b      	lslcc	r3, r3, #1
1a0144e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
1a0144ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
1a0144ee:	428b      	cmp	r3, r1
1a0144f0:	bf24      	itt	cs
1a0144f2:	1a5b      	subcs	r3, r3, r1
1a0144f4:	ea40 000c 	orrcs.w	r0, r0, ip
1a0144f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
1a0144fc:	bf24      	itt	cs
1a0144fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
1a014502:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a014506:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
1a01450a:	bf24      	itt	cs
1a01450c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
1a014510:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a014514:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
1a014518:	bf24      	itt	cs
1a01451a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
1a01451e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a014522:	011b      	lsls	r3, r3, #4
1a014524:	bf18      	it	ne
1a014526:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
1a01452a:	d1e0      	bne.n	1a0144ee <__aeabi_fdiv+0x46>
1a01452c:	2afd      	cmp	r2, #253	; 0xfd
1a01452e:	f63f af50 	bhi.w	1a0143d2 <__aeabi_fmul+0x92>
1a014532:	428b      	cmp	r3, r1
1a014534:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
1a014538:	bf08      	it	eq
1a01453a:	f020 0001 	biceq.w	r0, r0, #1
1a01453e:	4770      	bx	lr
1a014540:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
1a014544:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
1a014548:	327f      	adds	r2, #127	; 0x7f
1a01454a:	bfc2      	ittt	gt
1a01454c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
1a014550:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
1a014554:	4770      	bxgt	lr
1a014556:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a01455a:	f04f 0300 	mov.w	r3, #0
1a01455e:	3a01      	subs	r2, #1
1a014560:	e737      	b.n	1a0143d2 <__aeabi_fmul+0x92>
1a014562:	f092 0f00 	teq	r2, #0
1a014566:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
1a01456a:	bf02      	ittt	eq
1a01456c:	0040      	lsleq	r0, r0, #1
1a01456e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
1a014572:	3a01      	subeq	r2, #1
1a014574:	d0f9      	beq.n	1a01456a <__aeabi_fdiv+0xc2>
1a014576:	ea40 000c 	orr.w	r0, r0, ip
1a01457a:	f093 0f00 	teq	r3, #0
1a01457e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a014582:	bf02      	ittt	eq
1a014584:	0049      	lsleq	r1, r1, #1
1a014586:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
1a01458a:	3b01      	subeq	r3, #1
1a01458c:	d0f9      	beq.n	1a014582 <__aeabi_fdiv+0xda>
1a01458e:	ea41 010c 	orr.w	r1, r1, ip
1a014592:	e795      	b.n	1a0144c0 <__aeabi_fdiv+0x18>
1a014594:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
1a014598:	ea92 0f0c 	teq	r2, ip
1a01459c:	d108      	bne.n	1a0145b0 <__aeabi_fdiv+0x108>
1a01459e:	0242      	lsls	r2, r0, #9
1a0145a0:	f47f af7d 	bne.w	1a01449e <__aeabi_fmul+0x15e>
1a0145a4:	ea93 0f0c 	teq	r3, ip
1a0145a8:	f47f af70 	bne.w	1a01448c <__aeabi_fmul+0x14c>
1a0145ac:	4608      	mov	r0, r1
1a0145ae:	e776      	b.n	1a01449e <__aeabi_fmul+0x15e>
1a0145b0:	ea93 0f0c 	teq	r3, ip
1a0145b4:	d104      	bne.n	1a0145c0 <__aeabi_fdiv+0x118>
1a0145b6:	024b      	lsls	r3, r1, #9
1a0145b8:	f43f af4c 	beq.w	1a014454 <__aeabi_fmul+0x114>
1a0145bc:	4608      	mov	r0, r1
1a0145be:	e76e      	b.n	1a01449e <__aeabi_fmul+0x15e>
1a0145c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
1a0145c4:	bf18      	it	ne
1a0145c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
1a0145ca:	d1ca      	bne.n	1a014562 <__aeabi_fdiv+0xba>
1a0145cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
1a0145d0:	f47f af5c 	bne.w	1a01448c <__aeabi_fmul+0x14c>
1a0145d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
1a0145d8:	f47f af3c 	bne.w	1a014454 <__aeabi_fmul+0x114>
1a0145dc:	e75f      	b.n	1a01449e <__aeabi_fmul+0x15e>
1a0145de:	bf00      	nop

1a0145e0 <__gesf2>:
1a0145e0:	f04f 3cff 	mov.w	ip, #4294967295
1a0145e4:	e006      	b.n	1a0145f4 <__cmpsf2+0x4>
1a0145e6:	bf00      	nop

1a0145e8 <__lesf2>:
1a0145e8:	f04f 0c01 	mov.w	ip, #1
1a0145ec:	e002      	b.n	1a0145f4 <__cmpsf2+0x4>
1a0145ee:	bf00      	nop

1a0145f0 <__cmpsf2>:
1a0145f0:	f04f 0c01 	mov.w	ip, #1
1a0145f4:	f84d cd04 	str.w	ip, [sp, #-4]!
1a0145f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
1a0145fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
1a014600:	ea7f 6c22 	mvns.w	ip, r2, asr #24
1a014604:	bf18      	it	ne
1a014606:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
1a01460a:	d011      	beq.n	1a014630 <__cmpsf2+0x40>
1a01460c:	b001      	add	sp, #4
1a01460e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
1a014612:	bf18      	it	ne
1a014614:	ea90 0f01 	teqne	r0, r1
1a014618:	bf58      	it	pl
1a01461a:	ebb2 0003 	subspl.w	r0, r2, r3
1a01461e:	bf88      	it	hi
1a014620:	17c8      	asrhi	r0, r1, #31
1a014622:	bf38      	it	cc
1a014624:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
1a014628:	bf18      	it	ne
1a01462a:	f040 0001 	orrne.w	r0, r0, #1
1a01462e:	4770      	bx	lr
1a014630:	ea7f 6c22 	mvns.w	ip, r2, asr #24
1a014634:	d102      	bne.n	1a01463c <__cmpsf2+0x4c>
1a014636:	ea5f 2c40 	movs.w	ip, r0, lsl #9
1a01463a:	d105      	bne.n	1a014648 <__cmpsf2+0x58>
1a01463c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
1a014640:	d1e4      	bne.n	1a01460c <__cmpsf2+0x1c>
1a014642:	ea5f 2c41 	movs.w	ip, r1, lsl #9
1a014646:	d0e1      	beq.n	1a01460c <__cmpsf2+0x1c>
1a014648:	f85d 0b04 	ldr.w	r0, [sp], #4
1a01464c:	4770      	bx	lr
1a01464e:	bf00      	nop

1a014650 <__aeabi_cfrcmple>:
1a014650:	4684      	mov	ip, r0
1a014652:	4608      	mov	r0, r1
1a014654:	4661      	mov	r1, ip
1a014656:	e7ff      	b.n	1a014658 <__aeabi_cfcmpeq>

1a014658 <__aeabi_cfcmpeq>:
1a014658:	b50f      	push	{r0, r1, r2, r3, lr}
1a01465a:	f7ff ffc9 	bl	1a0145f0 <__cmpsf2>
1a01465e:	2800      	cmp	r0, #0
1a014660:	bf48      	it	mi
1a014662:	f110 0f00 	cmnmi.w	r0, #0
1a014666:	bd0f      	pop	{r0, r1, r2, r3, pc}

1a014668 <__aeabi_fcmpeq>:
1a014668:	f84d ed08 	str.w	lr, [sp, #-8]!
1a01466c:	f7ff fff4 	bl	1a014658 <__aeabi_cfcmpeq>
1a014670:	bf0c      	ite	eq
1a014672:	2001      	moveq	r0, #1
1a014674:	2000      	movne	r0, #0
1a014676:	f85d fb08 	ldr.w	pc, [sp], #8
1a01467a:	bf00      	nop

1a01467c <__aeabi_fcmplt>:
1a01467c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a014680:	f7ff ffea 	bl	1a014658 <__aeabi_cfcmpeq>
1a014684:	bf34      	ite	cc
1a014686:	2001      	movcc	r0, #1
1a014688:	2000      	movcs	r0, #0
1a01468a:	f85d fb08 	ldr.w	pc, [sp], #8
1a01468e:	bf00      	nop

1a014690 <__aeabi_fcmple>:
1a014690:	f84d ed08 	str.w	lr, [sp, #-8]!
1a014694:	f7ff ffe0 	bl	1a014658 <__aeabi_cfcmpeq>
1a014698:	bf94      	ite	ls
1a01469a:	2001      	movls	r0, #1
1a01469c:	2000      	movhi	r0, #0
1a01469e:	f85d fb08 	ldr.w	pc, [sp], #8
1a0146a2:	bf00      	nop

1a0146a4 <__aeabi_fcmpge>:
1a0146a4:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0146a8:	f7ff ffd2 	bl	1a014650 <__aeabi_cfrcmple>
1a0146ac:	bf94      	ite	ls
1a0146ae:	2001      	movls	r0, #1
1a0146b0:	2000      	movhi	r0, #0
1a0146b2:	f85d fb08 	ldr.w	pc, [sp], #8
1a0146b6:	bf00      	nop

1a0146b8 <__aeabi_fcmpgt>:
1a0146b8:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0146bc:	f7ff ffc8 	bl	1a014650 <__aeabi_cfrcmple>
1a0146c0:	bf34      	ite	cc
1a0146c2:	2001      	movcc	r0, #1
1a0146c4:	2000      	movcs	r0, #0
1a0146c6:	f85d fb08 	ldr.w	pc, [sp], #8
1a0146ca:	bf00      	nop

1a0146cc <__aeabi_f2iz>:
1a0146cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
1a0146d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
1a0146d4:	d30f      	bcc.n	1a0146f6 <__aeabi_f2iz+0x2a>
1a0146d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
1a0146da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
1a0146de:	d90d      	bls.n	1a0146fc <__aeabi_f2iz+0x30>
1a0146e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
1a0146e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a0146e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
1a0146ec:	fa23 f002 	lsr.w	r0, r3, r2
1a0146f0:	bf18      	it	ne
1a0146f2:	4240      	negne	r0, r0
1a0146f4:	4770      	bx	lr
1a0146f6:	f04f 0000 	mov.w	r0, #0
1a0146fa:	4770      	bx	lr
1a0146fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
1a014700:	d101      	bne.n	1a014706 <__aeabi_f2iz+0x3a>
1a014702:	0242      	lsls	r2, r0, #9
1a014704:	d105      	bne.n	1a014712 <__aeabi_f2iz+0x46>
1a014706:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
1a01470a:	bf08      	it	eq
1a01470c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a014710:	4770      	bx	lr
1a014712:	f04f 0000 	mov.w	r0, #0
1a014716:	4770      	bx	lr

1a014718 <__aeabi_ldivmod>:
1a014718:	b97b      	cbnz	r3, 1a01473a <__aeabi_ldivmod+0x22>
1a01471a:	b972      	cbnz	r2, 1a01473a <__aeabi_ldivmod+0x22>
1a01471c:	2900      	cmp	r1, #0
1a01471e:	bfbe      	ittt	lt
1a014720:	2000      	movlt	r0, #0
1a014722:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
1a014726:	e006      	blt.n	1a014736 <__aeabi_ldivmod+0x1e>
1a014728:	bf08      	it	eq
1a01472a:	2800      	cmpeq	r0, #0
1a01472c:	bf1c      	itt	ne
1a01472e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
1a014732:	f04f 30ff 	movne.w	r0, #4294967295
1a014736:	f000 ba01 	b.w	1a014b3c <__aeabi_idiv0>
1a01473a:	f1ad 0c08 	sub.w	ip, sp, #8
1a01473e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a014742:	2900      	cmp	r1, #0
1a014744:	db09      	blt.n	1a01475a <__aeabi_ldivmod+0x42>
1a014746:	2b00      	cmp	r3, #0
1a014748:	db1a      	blt.n	1a014780 <__aeabi_ldivmod+0x68>
1a01474a:	f000 f885 	bl	1a014858 <__udivmoddi4>
1a01474e:	f8dd e004 	ldr.w	lr, [sp, #4]
1a014752:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a014756:	b004      	add	sp, #16
1a014758:	4770      	bx	lr
1a01475a:	4240      	negs	r0, r0
1a01475c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a014760:	2b00      	cmp	r3, #0
1a014762:	db1b      	blt.n	1a01479c <__aeabi_ldivmod+0x84>
1a014764:	f000 f878 	bl	1a014858 <__udivmoddi4>
1a014768:	f8dd e004 	ldr.w	lr, [sp, #4]
1a01476c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a014770:	b004      	add	sp, #16
1a014772:	4240      	negs	r0, r0
1a014774:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a014778:	4252      	negs	r2, r2
1a01477a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a01477e:	4770      	bx	lr
1a014780:	4252      	negs	r2, r2
1a014782:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a014786:	f000 f867 	bl	1a014858 <__udivmoddi4>
1a01478a:	f8dd e004 	ldr.w	lr, [sp, #4]
1a01478e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a014792:	b004      	add	sp, #16
1a014794:	4240      	negs	r0, r0
1a014796:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a01479a:	4770      	bx	lr
1a01479c:	4252      	negs	r2, r2
1a01479e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0147a2:	f000 f859 	bl	1a014858 <__udivmoddi4>
1a0147a6:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0147aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0147ae:	b004      	add	sp, #16
1a0147b0:	4252      	negs	r2, r2
1a0147b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0147b6:	4770      	bx	lr

1a0147b8 <__aeabi_uldivmod>:
1a0147b8:	b953      	cbnz	r3, 1a0147d0 <__aeabi_uldivmod+0x18>
1a0147ba:	b94a      	cbnz	r2, 1a0147d0 <__aeabi_uldivmod+0x18>
1a0147bc:	2900      	cmp	r1, #0
1a0147be:	bf08      	it	eq
1a0147c0:	2800      	cmpeq	r0, #0
1a0147c2:	bf1c      	itt	ne
1a0147c4:	f04f 31ff 	movne.w	r1, #4294967295
1a0147c8:	f04f 30ff 	movne.w	r0, #4294967295
1a0147cc:	f000 b9b6 	b.w	1a014b3c <__aeabi_idiv0>
1a0147d0:	f1ad 0c08 	sub.w	ip, sp, #8
1a0147d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0147d8:	f000 f83e 	bl	1a014858 <__udivmoddi4>
1a0147dc:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0147e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0147e4:	b004      	add	sp, #16
1a0147e6:	4770      	bx	lr

1a0147e8 <__aeabi_f2lz>:
1a0147e8:	ee07 0a90 	vmov	s15, r0
1a0147ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
1a0147f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0147f4:	d401      	bmi.n	1a0147fa <__aeabi_f2lz+0x12>
1a0147f6:	f000 b809 	b.w	1a01480c <__aeabi_f2ulz>
1a0147fa:	b508      	push	{r3, lr}
1a0147fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
1a014800:	f000 f804 	bl	1a01480c <__aeabi_f2ulz>
1a014804:	4240      	negs	r0, r0
1a014806:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a01480a:	bd08      	pop	{r3, pc}

1a01480c <__aeabi_f2ulz>:
1a01480c:	b5d0      	push	{r4, r6, r7, lr}
1a01480e:	f7ff f923 	bl	1a013a58 <__aeabi_f2d>
1a014812:	2200      	movs	r2, #0
1a014814:	4b0e      	ldr	r3, [pc, #56]	; (1a014850 <__aeabi_f2ulz+0x44>)
1a014816:	4606      	mov	r6, r0
1a014818:	460f      	mov	r7, r1
1a01481a:	f7ff f971 	bl	1a013b00 <__aeabi_dmul>
1a01481e:	f000 f98f 	bl	1a014b40 <__aeabi_d2uiz>
1a014822:	4604      	mov	r4, r0
1a014824:	f7ff f8f6 	bl	1a013a14 <__aeabi_ui2d>
1a014828:	2200      	movs	r2, #0
1a01482a:	4b0a      	ldr	r3, [pc, #40]	; (1a014854 <__aeabi_f2ulz+0x48>)
1a01482c:	f7ff f968 	bl	1a013b00 <__aeabi_dmul>
1a014830:	4602      	mov	r2, r0
1a014832:	460b      	mov	r3, r1
1a014834:	4630      	mov	r0, r6
1a014836:	4639      	mov	r1, r7
1a014838:	f7fe ffae 	bl	1a013798 <__aeabi_dsub>
1a01483c:	f000 f980 	bl	1a014b40 <__aeabi_d2uiz>
1a014840:	4623      	mov	r3, r4
1a014842:	2200      	movs	r2, #0
1a014844:	ea42 0200 	orr.w	r2, r2, r0
1a014848:	4610      	mov	r0, r2
1a01484a:	4619      	mov	r1, r3
1a01484c:	bdd0      	pop	{r4, r6, r7, pc}
1a01484e:	bf00      	nop
1a014850:	3df00000 	.word	0x3df00000
1a014854:	41f00000 	.word	0x41f00000

1a014858 <__udivmoddi4>:
1a014858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a01485c:	468c      	mov	ip, r1
1a01485e:	460e      	mov	r6, r1
1a014860:	4604      	mov	r4, r0
1a014862:	9d08      	ldr	r5, [sp, #32]
1a014864:	2b00      	cmp	r3, #0
1a014866:	d150      	bne.n	1a01490a <__udivmoddi4+0xb2>
1a014868:	428a      	cmp	r2, r1
1a01486a:	4617      	mov	r7, r2
1a01486c:	d96c      	bls.n	1a014948 <__udivmoddi4+0xf0>
1a01486e:	fab2 fe82 	clz	lr, r2
1a014872:	f1be 0f00 	cmp.w	lr, #0
1a014876:	d00b      	beq.n	1a014890 <__udivmoddi4+0x38>
1a014878:	f1ce 0420 	rsb	r4, lr, #32
1a01487c:	fa20 f404 	lsr.w	r4, r0, r4
1a014880:	fa01 f60e 	lsl.w	r6, r1, lr
1a014884:	ea44 0c06 	orr.w	ip, r4, r6
1a014888:	fa02 f70e 	lsl.w	r7, r2, lr
1a01488c:	fa00 f40e 	lsl.w	r4, r0, lr
1a014890:	ea4f 4917 	mov.w	r9, r7, lsr #16
1a014894:	0c22      	lsrs	r2, r4, #16
1a014896:	fbbc f0f9 	udiv	r0, ip, r9
1a01489a:	fa1f f887 	uxth.w	r8, r7
1a01489e:	fb09 c610 	mls	r6, r9, r0, ip
1a0148a2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
1a0148a6:	fb00 f308 	mul.w	r3, r0, r8
1a0148aa:	42b3      	cmp	r3, r6
1a0148ac:	d909      	bls.n	1a0148c2 <__udivmoddi4+0x6a>
1a0148ae:	19f6      	adds	r6, r6, r7
1a0148b0:	f100 32ff 	add.w	r2, r0, #4294967295
1a0148b4:	f080 8122 	bcs.w	1a014afc <__udivmoddi4+0x2a4>
1a0148b8:	42b3      	cmp	r3, r6
1a0148ba:	f240 811f 	bls.w	1a014afc <__udivmoddi4+0x2a4>
1a0148be:	3802      	subs	r0, #2
1a0148c0:	443e      	add	r6, r7
1a0148c2:	1af6      	subs	r6, r6, r3
1a0148c4:	b2a2      	uxth	r2, r4
1a0148c6:	fbb6 f3f9 	udiv	r3, r6, r9
1a0148ca:	fb09 6613 	mls	r6, r9, r3, r6
1a0148ce:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
1a0148d2:	fb03 f808 	mul.w	r8, r3, r8
1a0148d6:	45a0      	cmp	r8, r4
1a0148d8:	d909      	bls.n	1a0148ee <__udivmoddi4+0x96>
1a0148da:	19e4      	adds	r4, r4, r7
1a0148dc:	f103 32ff 	add.w	r2, r3, #4294967295
1a0148e0:	f080 810a 	bcs.w	1a014af8 <__udivmoddi4+0x2a0>
1a0148e4:	45a0      	cmp	r8, r4
1a0148e6:	f240 8107 	bls.w	1a014af8 <__udivmoddi4+0x2a0>
1a0148ea:	3b02      	subs	r3, #2
1a0148ec:	443c      	add	r4, r7
1a0148ee:	ebc8 0404 	rsb	r4, r8, r4
1a0148f2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a0148f6:	2100      	movs	r1, #0
1a0148f8:	2d00      	cmp	r5, #0
1a0148fa:	d062      	beq.n	1a0149c2 <__udivmoddi4+0x16a>
1a0148fc:	fa24 f40e 	lsr.w	r4, r4, lr
1a014900:	2300      	movs	r3, #0
1a014902:	602c      	str	r4, [r5, #0]
1a014904:	606b      	str	r3, [r5, #4]
1a014906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a01490a:	428b      	cmp	r3, r1
1a01490c:	d907      	bls.n	1a01491e <__udivmoddi4+0xc6>
1a01490e:	2d00      	cmp	r5, #0
1a014910:	d055      	beq.n	1a0149be <__udivmoddi4+0x166>
1a014912:	2100      	movs	r1, #0
1a014914:	e885 0041 	stmia.w	r5, {r0, r6}
1a014918:	4608      	mov	r0, r1
1a01491a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a01491e:	fab3 f183 	clz	r1, r3
1a014922:	2900      	cmp	r1, #0
1a014924:	f040 8090 	bne.w	1a014a48 <__udivmoddi4+0x1f0>
1a014928:	42b3      	cmp	r3, r6
1a01492a:	d302      	bcc.n	1a014932 <__udivmoddi4+0xda>
1a01492c:	4282      	cmp	r2, r0
1a01492e:	f200 80f8 	bhi.w	1a014b22 <__udivmoddi4+0x2ca>
1a014932:	1a84      	subs	r4, r0, r2
1a014934:	eb66 0603 	sbc.w	r6, r6, r3
1a014938:	2001      	movs	r0, #1
1a01493a:	46b4      	mov	ip, r6
1a01493c:	2d00      	cmp	r5, #0
1a01493e:	d040      	beq.n	1a0149c2 <__udivmoddi4+0x16a>
1a014940:	e885 1010 	stmia.w	r5, {r4, ip}
1a014944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a014948:	b912      	cbnz	r2, 1a014950 <__udivmoddi4+0xf8>
1a01494a:	2701      	movs	r7, #1
1a01494c:	fbb7 f7f2 	udiv	r7, r7, r2
1a014950:	fab7 fe87 	clz	lr, r7
1a014954:	f1be 0f00 	cmp.w	lr, #0
1a014958:	d135      	bne.n	1a0149c6 <__udivmoddi4+0x16e>
1a01495a:	1bf3      	subs	r3, r6, r7
1a01495c:	ea4f 4817 	mov.w	r8, r7, lsr #16
1a014960:	fa1f fc87 	uxth.w	ip, r7
1a014964:	2101      	movs	r1, #1
1a014966:	fbb3 f0f8 	udiv	r0, r3, r8
1a01496a:	0c22      	lsrs	r2, r4, #16
1a01496c:	fb08 3610 	mls	r6, r8, r0, r3
1a014970:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
1a014974:	fb0c f300 	mul.w	r3, ip, r0
1a014978:	42b3      	cmp	r3, r6
1a01497a:	d907      	bls.n	1a01498c <__udivmoddi4+0x134>
1a01497c:	19f6      	adds	r6, r6, r7
1a01497e:	f100 32ff 	add.w	r2, r0, #4294967295
1a014982:	d202      	bcs.n	1a01498a <__udivmoddi4+0x132>
1a014984:	42b3      	cmp	r3, r6
1a014986:	f200 80ce 	bhi.w	1a014b26 <__udivmoddi4+0x2ce>
1a01498a:	4610      	mov	r0, r2
1a01498c:	1af6      	subs	r6, r6, r3
1a01498e:	b2a2      	uxth	r2, r4
1a014990:	fbb6 f3f8 	udiv	r3, r6, r8
1a014994:	fb08 6613 	mls	r6, r8, r3, r6
1a014998:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
1a01499c:	fb0c fc03 	mul.w	ip, ip, r3
1a0149a0:	45a4      	cmp	ip, r4
1a0149a2:	d907      	bls.n	1a0149b4 <__udivmoddi4+0x15c>
1a0149a4:	19e4      	adds	r4, r4, r7
1a0149a6:	f103 32ff 	add.w	r2, r3, #4294967295
1a0149aa:	d202      	bcs.n	1a0149b2 <__udivmoddi4+0x15a>
1a0149ac:	45a4      	cmp	ip, r4
1a0149ae:	f200 80b5 	bhi.w	1a014b1c <__udivmoddi4+0x2c4>
1a0149b2:	4613      	mov	r3, r2
1a0149b4:	ebcc 0404 	rsb	r4, ip, r4
1a0149b8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a0149bc:	e79c      	b.n	1a0148f8 <__udivmoddi4+0xa0>
1a0149be:	4629      	mov	r1, r5
1a0149c0:	4628      	mov	r0, r5
1a0149c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0149c6:	f1ce 0120 	rsb	r1, lr, #32
1a0149ca:	fa06 f30e 	lsl.w	r3, r6, lr
1a0149ce:	fa07 f70e 	lsl.w	r7, r7, lr
1a0149d2:	fa20 f901 	lsr.w	r9, r0, r1
1a0149d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
1a0149da:	40ce      	lsrs	r6, r1
1a0149dc:	ea49 0903 	orr.w	r9, r9, r3
1a0149e0:	fbb6 faf8 	udiv	sl, r6, r8
1a0149e4:	ea4f 4419 	mov.w	r4, r9, lsr #16
1a0149e8:	fb08 661a 	mls	r6, r8, sl, r6
1a0149ec:	fa1f fc87 	uxth.w	ip, r7
1a0149f0:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
1a0149f4:	fb0a f20c 	mul.w	r2, sl, ip
1a0149f8:	429a      	cmp	r2, r3
1a0149fa:	fa00 f40e 	lsl.w	r4, r0, lr
1a0149fe:	d90a      	bls.n	1a014a16 <__udivmoddi4+0x1be>
1a014a00:	19db      	adds	r3, r3, r7
1a014a02:	f10a 31ff 	add.w	r1, sl, #4294967295
1a014a06:	f080 8087 	bcs.w	1a014b18 <__udivmoddi4+0x2c0>
1a014a0a:	429a      	cmp	r2, r3
1a014a0c:	f240 8084 	bls.w	1a014b18 <__udivmoddi4+0x2c0>
1a014a10:	f1aa 0a02 	sub.w	sl, sl, #2
1a014a14:	443b      	add	r3, r7
1a014a16:	1a9b      	subs	r3, r3, r2
1a014a18:	fa1f f989 	uxth.w	r9, r9
1a014a1c:	fbb3 f1f8 	udiv	r1, r3, r8
1a014a20:	fb08 3311 	mls	r3, r8, r1, r3
1a014a24:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
1a014a28:	fb01 f60c 	mul.w	r6, r1, ip
1a014a2c:	429e      	cmp	r6, r3
1a014a2e:	d907      	bls.n	1a014a40 <__udivmoddi4+0x1e8>
1a014a30:	19db      	adds	r3, r3, r7
1a014a32:	f101 32ff 	add.w	r2, r1, #4294967295
1a014a36:	d26b      	bcs.n	1a014b10 <__udivmoddi4+0x2b8>
1a014a38:	429e      	cmp	r6, r3
1a014a3a:	d969      	bls.n	1a014b10 <__udivmoddi4+0x2b8>
1a014a3c:	3902      	subs	r1, #2
1a014a3e:	443b      	add	r3, r7
1a014a40:	1b9b      	subs	r3, r3, r6
1a014a42:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
1a014a46:	e78e      	b.n	1a014966 <__udivmoddi4+0x10e>
1a014a48:	f1c1 0e20 	rsb	lr, r1, #32
1a014a4c:	fa22 f40e 	lsr.w	r4, r2, lr
1a014a50:	408b      	lsls	r3, r1
1a014a52:	4323      	orrs	r3, r4
1a014a54:	fa20 f70e 	lsr.w	r7, r0, lr
1a014a58:	fa06 f401 	lsl.w	r4, r6, r1
1a014a5c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a014a60:	fa26 f60e 	lsr.w	r6, r6, lr
1a014a64:	433c      	orrs	r4, r7
1a014a66:	fbb6 f9fc 	udiv	r9, r6, ip
1a014a6a:	0c27      	lsrs	r7, r4, #16
1a014a6c:	fb0c 6619 	mls	r6, ip, r9, r6
1a014a70:	fa1f f883 	uxth.w	r8, r3
1a014a74:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
1a014a78:	fb09 f708 	mul.w	r7, r9, r8
1a014a7c:	42b7      	cmp	r7, r6
1a014a7e:	fa02 f201 	lsl.w	r2, r2, r1
1a014a82:	fa00 fa01 	lsl.w	sl, r0, r1
1a014a86:	d908      	bls.n	1a014a9a <__udivmoddi4+0x242>
1a014a88:	18f6      	adds	r6, r6, r3
1a014a8a:	f109 30ff 	add.w	r0, r9, #4294967295
1a014a8e:	d241      	bcs.n	1a014b14 <__udivmoddi4+0x2bc>
1a014a90:	42b7      	cmp	r7, r6
1a014a92:	d93f      	bls.n	1a014b14 <__udivmoddi4+0x2bc>
1a014a94:	f1a9 0902 	sub.w	r9, r9, #2
1a014a98:	441e      	add	r6, r3
1a014a9a:	1bf6      	subs	r6, r6, r7
1a014a9c:	b2a0      	uxth	r0, r4
1a014a9e:	fbb6 f4fc 	udiv	r4, r6, ip
1a014aa2:	fb0c 6614 	mls	r6, ip, r4, r6
1a014aa6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
1a014aaa:	fb04 f808 	mul.w	r8, r4, r8
1a014aae:	45b8      	cmp	r8, r7
1a014ab0:	d907      	bls.n	1a014ac2 <__udivmoddi4+0x26a>
1a014ab2:	18ff      	adds	r7, r7, r3
1a014ab4:	f104 30ff 	add.w	r0, r4, #4294967295
1a014ab8:	d228      	bcs.n	1a014b0c <__udivmoddi4+0x2b4>
1a014aba:	45b8      	cmp	r8, r7
1a014abc:	d926      	bls.n	1a014b0c <__udivmoddi4+0x2b4>
1a014abe:	3c02      	subs	r4, #2
1a014ac0:	441f      	add	r7, r3
1a014ac2:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
1a014ac6:	ebc8 0707 	rsb	r7, r8, r7
1a014aca:	fba0 8902 	umull	r8, r9, r0, r2
1a014ace:	454f      	cmp	r7, r9
1a014ad0:	4644      	mov	r4, r8
1a014ad2:	464e      	mov	r6, r9
1a014ad4:	d314      	bcc.n	1a014b00 <__udivmoddi4+0x2a8>
1a014ad6:	d029      	beq.n	1a014b2c <__udivmoddi4+0x2d4>
1a014ad8:	b365      	cbz	r5, 1a014b34 <__udivmoddi4+0x2dc>
1a014ada:	ebba 0304 	subs.w	r3, sl, r4
1a014ade:	eb67 0706 	sbc.w	r7, r7, r6
1a014ae2:	fa07 fe0e 	lsl.w	lr, r7, lr
1a014ae6:	40cb      	lsrs	r3, r1
1a014ae8:	40cf      	lsrs	r7, r1
1a014aea:	ea4e 0303 	orr.w	r3, lr, r3
1a014aee:	e885 0088 	stmia.w	r5, {r3, r7}
1a014af2:	2100      	movs	r1, #0
1a014af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a014af8:	4613      	mov	r3, r2
1a014afa:	e6f8      	b.n	1a0148ee <__udivmoddi4+0x96>
1a014afc:	4610      	mov	r0, r2
1a014afe:	e6e0      	b.n	1a0148c2 <__udivmoddi4+0x6a>
1a014b00:	ebb8 0402 	subs.w	r4, r8, r2
1a014b04:	eb69 0603 	sbc.w	r6, r9, r3
1a014b08:	3801      	subs	r0, #1
1a014b0a:	e7e5      	b.n	1a014ad8 <__udivmoddi4+0x280>
1a014b0c:	4604      	mov	r4, r0
1a014b0e:	e7d8      	b.n	1a014ac2 <__udivmoddi4+0x26a>
1a014b10:	4611      	mov	r1, r2
1a014b12:	e795      	b.n	1a014a40 <__udivmoddi4+0x1e8>
1a014b14:	4681      	mov	r9, r0
1a014b16:	e7c0      	b.n	1a014a9a <__udivmoddi4+0x242>
1a014b18:	468a      	mov	sl, r1
1a014b1a:	e77c      	b.n	1a014a16 <__udivmoddi4+0x1be>
1a014b1c:	3b02      	subs	r3, #2
1a014b1e:	443c      	add	r4, r7
1a014b20:	e748      	b.n	1a0149b4 <__udivmoddi4+0x15c>
1a014b22:	4608      	mov	r0, r1
1a014b24:	e70a      	b.n	1a01493c <__udivmoddi4+0xe4>
1a014b26:	3802      	subs	r0, #2
1a014b28:	443e      	add	r6, r7
1a014b2a:	e72f      	b.n	1a01498c <__udivmoddi4+0x134>
1a014b2c:	45c2      	cmp	sl, r8
1a014b2e:	d3e7      	bcc.n	1a014b00 <__udivmoddi4+0x2a8>
1a014b30:	463e      	mov	r6, r7
1a014b32:	e7d1      	b.n	1a014ad8 <__udivmoddi4+0x280>
1a014b34:	4629      	mov	r1, r5
1a014b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a014b3a:	bf00      	nop

1a014b3c <__aeabi_idiv0>:
1a014b3c:	4770      	bx	lr
1a014b3e:	bf00      	nop

1a014b40 <__aeabi_d2uiz>:
1a014b40:	004a      	lsls	r2, r1, #1
1a014b42:	d211      	bcs.n	1a014b68 <__aeabi_d2uiz+0x28>
1a014b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a014b48:	d211      	bcs.n	1a014b6e <__aeabi_d2uiz+0x2e>
1a014b4a:	d50d      	bpl.n	1a014b68 <__aeabi_d2uiz+0x28>
1a014b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a014b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a014b54:	d40e      	bmi.n	1a014b74 <__aeabi_d2uiz+0x34>
1a014b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a014b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a014b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a014b62:	fa23 f002 	lsr.w	r0, r3, r2
1a014b66:	4770      	bx	lr
1a014b68:	f04f 0000 	mov.w	r0, #0
1a014b6c:	4770      	bx	lr
1a014b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a014b72:	d102      	bne.n	1a014b7a <__aeabi_d2uiz+0x3a>
1a014b74:	f04f 30ff 	mov.w	r0, #4294967295
1a014b78:	4770      	bx	lr
1a014b7a:	f04f 0000 	mov.w	r0, #0
1a014b7e:	4770      	bx	lr

1a014b80 <memcmp>:
1a014b80:	2a03      	cmp	r2, #3
1a014b82:	b470      	push	{r4, r5, r6}
1a014b84:	d926      	bls.n	1a014bd4 <memcmp+0x54>
1a014b86:	ea40 0301 	orr.w	r3, r0, r1
1a014b8a:	079b      	lsls	r3, r3, #30
1a014b8c:	d011      	beq.n	1a014bb2 <memcmp+0x32>
1a014b8e:	7804      	ldrb	r4, [r0, #0]
1a014b90:	780d      	ldrb	r5, [r1, #0]
1a014b92:	42ac      	cmp	r4, r5
1a014b94:	d122      	bne.n	1a014bdc <memcmp+0x5c>
1a014b96:	4402      	add	r2, r0
1a014b98:	1c43      	adds	r3, r0, #1
1a014b9a:	e005      	b.n	1a014ba8 <memcmp+0x28>
1a014b9c:	f813 4b01 	ldrb.w	r4, [r3], #1
1a014ba0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
1a014ba4:	42ac      	cmp	r4, r5
1a014ba6:	d119      	bne.n	1a014bdc <memcmp+0x5c>
1a014ba8:	4293      	cmp	r3, r2
1a014baa:	d1f7      	bne.n	1a014b9c <memcmp+0x1c>
1a014bac:	2000      	movs	r0, #0
1a014bae:	bc70      	pop	{r4, r5, r6}
1a014bb0:	4770      	bx	lr
1a014bb2:	460c      	mov	r4, r1
1a014bb4:	4603      	mov	r3, r0
1a014bb6:	681e      	ldr	r6, [r3, #0]
1a014bb8:	6825      	ldr	r5, [r4, #0]
1a014bba:	42ae      	cmp	r6, r5
1a014bbc:	4618      	mov	r0, r3
1a014bbe:	4621      	mov	r1, r4
1a014bc0:	f103 0304 	add.w	r3, r3, #4
1a014bc4:	f104 0404 	add.w	r4, r4, #4
1a014bc8:	d1e1      	bne.n	1a014b8e <memcmp+0xe>
1a014bca:	3a04      	subs	r2, #4
1a014bcc:	2a03      	cmp	r2, #3
1a014bce:	4618      	mov	r0, r3
1a014bd0:	4621      	mov	r1, r4
1a014bd2:	d8f0      	bhi.n	1a014bb6 <memcmp+0x36>
1a014bd4:	2a00      	cmp	r2, #0
1a014bd6:	d1da      	bne.n	1a014b8e <memcmp+0xe>
1a014bd8:	4610      	mov	r0, r2
1a014bda:	e7e8      	b.n	1a014bae <memcmp+0x2e>
1a014bdc:	1b60      	subs	r0, r4, r5
1a014bde:	bc70      	pop	{r4, r5, r6}
1a014be0:	4770      	bx	lr
1a014be2:	bf00      	nop

1a014be4 <memcpy>:
1a014be4:	4684      	mov	ip, r0
1a014be6:	ea41 0300 	orr.w	r3, r1, r0
1a014bea:	f013 0303 	ands.w	r3, r3, #3
1a014bee:	d16d      	bne.n	1a014ccc <memcpy+0xe8>
1a014bf0:	3a40      	subs	r2, #64	; 0x40
1a014bf2:	d341      	bcc.n	1a014c78 <memcpy+0x94>
1a014bf4:	f851 3b04 	ldr.w	r3, [r1], #4
1a014bf8:	f840 3b04 	str.w	r3, [r0], #4
1a014bfc:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c00:	f840 3b04 	str.w	r3, [r0], #4
1a014c04:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c08:	f840 3b04 	str.w	r3, [r0], #4
1a014c0c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c10:	f840 3b04 	str.w	r3, [r0], #4
1a014c14:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c18:	f840 3b04 	str.w	r3, [r0], #4
1a014c1c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c20:	f840 3b04 	str.w	r3, [r0], #4
1a014c24:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c28:	f840 3b04 	str.w	r3, [r0], #4
1a014c2c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c30:	f840 3b04 	str.w	r3, [r0], #4
1a014c34:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c38:	f840 3b04 	str.w	r3, [r0], #4
1a014c3c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c40:	f840 3b04 	str.w	r3, [r0], #4
1a014c44:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c48:	f840 3b04 	str.w	r3, [r0], #4
1a014c4c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c50:	f840 3b04 	str.w	r3, [r0], #4
1a014c54:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c58:	f840 3b04 	str.w	r3, [r0], #4
1a014c5c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c60:	f840 3b04 	str.w	r3, [r0], #4
1a014c64:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c68:	f840 3b04 	str.w	r3, [r0], #4
1a014c6c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c70:	f840 3b04 	str.w	r3, [r0], #4
1a014c74:	3a40      	subs	r2, #64	; 0x40
1a014c76:	d2bd      	bcs.n	1a014bf4 <memcpy+0x10>
1a014c78:	3230      	adds	r2, #48	; 0x30
1a014c7a:	d311      	bcc.n	1a014ca0 <memcpy+0xbc>
1a014c7c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c80:	f840 3b04 	str.w	r3, [r0], #4
1a014c84:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c88:	f840 3b04 	str.w	r3, [r0], #4
1a014c8c:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c90:	f840 3b04 	str.w	r3, [r0], #4
1a014c94:	f851 3b04 	ldr.w	r3, [r1], #4
1a014c98:	f840 3b04 	str.w	r3, [r0], #4
1a014c9c:	3a10      	subs	r2, #16
1a014c9e:	d2ed      	bcs.n	1a014c7c <memcpy+0x98>
1a014ca0:	320c      	adds	r2, #12
1a014ca2:	d305      	bcc.n	1a014cb0 <memcpy+0xcc>
1a014ca4:	f851 3b04 	ldr.w	r3, [r1], #4
1a014ca8:	f840 3b04 	str.w	r3, [r0], #4
1a014cac:	3a04      	subs	r2, #4
1a014cae:	d2f9      	bcs.n	1a014ca4 <memcpy+0xc0>
1a014cb0:	3204      	adds	r2, #4
1a014cb2:	d008      	beq.n	1a014cc6 <memcpy+0xe2>
1a014cb4:	07d2      	lsls	r2, r2, #31
1a014cb6:	bf1c      	itt	ne
1a014cb8:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a014cbc:	f800 3b01 	strbne.w	r3, [r0], #1
1a014cc0:	d301      	bcc.n	1a014cc6 <memcpy+0xe2>
1a014cc2:	880b      	ldrh	r3, [r1, #0]
1a014cc4:	8003      	strh	r3, [r0, #0]
1a014cc6:	4660      	mov	r0, ip
1a014cc8:	4770      	bx	lr
1a014cca:	bf00      	nop
1a014ccc:	2a08      	cmp	r2, #8
1a014cce:	d313      	bcc.n	1a014cf8 <memcpy+0x114>
1a014cd0:	078b      	lsls	r3, r1, #30
1a014cd2:	d08d      	beq.n	1a014bf0 <memcpy+0xc>
1a014cd4:	f010 0303 	ands.w	r3, r0, #3
1a014cd8:	d08a      	beq.n	1a014bf0 <memcpy+0xc>
1a014cda:	f1c3 0304 	rsb	r3, r3, #4
1a014cde:	1ad2      	subs	r2, r2, r3
1a014ce0:	07db      	lsls	r3, r3, #31
1a014ce2:	bf1c      	itt	ne
1a014ce4:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a014ce8:	f800 3b01 	strbne.w	r3, [r0], #1
1a014cec:	d380      	bcc.n	1a014bf0 <memcpy+0xc>
1a014cee:	f831 3b02 	ldrh.w	r3, [r1], #2
1a014cf2:	f820 3b02 	strh.w	r3, [r0], #2
1a014cf6:	e77b      	b.n	1a014bf0 <memcpy+0xc>
1a014cf8:	3a04      	subs	r2, #4
1a014cfa:	d3d9      	bcc.n	1a014cb0 <memcpy+0xcc>
1a014cfc:	3a01      	subs	r2, #1
1a014cfe:	f811 3b01 	ldrb.w	r3, [r1], #1
1a014d02:	f800 3b01 	strb.w	r3, [r0], #1
1a014d06:	d2f9      	bcs.n	1a014cfc <memcpy+0x118>
1a014d08:	780b      	ldrb	r3, [r1, #0]
1a014d0a:	7003      	strb	r3, [r0, #0]
1a014d0c:	784b      	ldrb	r3, [r1, #1]
1a014d0e:	7043      	strb	r3, [r0, #1]
1a014d10:	788b      	ldrb	r3, [r1, #2]
1a014d12:	7083      	strb	r3, [r0, #2]
1a014d14:	4660      	mov	r0, ip
1a014d16:	4770      	bx	lr

1a014d18 <memmove>:
1a014d18:	4288      	cmp	r0, r1
1a014d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
1a014d1c:	d90d      	bls.n	1a014d3a <memmove+0x22>
1a014d1e:	188b      	adds	r3, r1, r2
1a014d20:	4298      	cmp	r0, r3
1a014d22:	d20a      	bcs.n	1a014d3a <memmove+0x22>
1a014d24:	1881      	adds	r1, r0, r2
1a014d26:	2a00      	cmp	r2, #0
1a014d28:	d051      	beq.n	1a014dce <memmove+0xb6>
1a014d2a:	1a9a      	subs	r2, r3, r2
1a014d2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a014d30:	f801 4d01 	strb.w	r4, [r1, #-1]!
1a014d34:	4293      	cmp	r3, r2
1a014d36:	d1f9      	bne.n	1a014d2c <memmove+0x14>
1a014d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a014d3a:	2a0f      	cmp	r2, #15
1a014d3c:	d948      	bls.n	1a014dd0 <memmove+0xb8>
1a014d3e:	ea41 0300 	orr.w	r3, r1, r0
1a014d42:	079b      	lsls	r3, r3, #30
1a014d44:	d146      	bne.n	1a014dd4 <memmove+0xbc>
1a014d46:	f100 0410 	add.w	r4, r0, #16
1a014d4a:	f101 0310 	add.w	r3, r1, #16
1a014d4e:	4615      	mov	r5, r2
1a014d50:	f853 6c10 	ldr.w	r6, [r3, #-16]
1a014d54:	f844 6c10 	str.w	r6, [r4, #-16]
1a014d58:	f853 6c0c 	ldr.w	r6, [r3, #-12]
1a014d5c:	f844 6c0c 	str.w	r6, [r4, #-12]
1a014d60:	f853 6c08 	ldr.w	r6, [r3, #-8]
1a014d64:	f844 6c08 	str.w	r6, [r4, #-8]
1a014d68:	3d10      	subs	r5, #16
1a014d6a:	f853 6c04 	ldr.w	r6, [r3, #-4]
1a014d6e:	f844 6c04 	str.w	r6, [r4, #-4]
1a014d72:	2d0f      	cmp	r5, #15
1a014d74:	f103 0310 	add.w	r3, r3, #16
1a014d78:	f104 0410 	add.w	r4, r4, #16
1a014d7c:	d8e8      	bhi.n	1a014d50 <memmove+0x38>
1a014d7e:	f1a2 0310 	sub.w	r3, r2, #16
1a014d82:	f023 030f 	bic.w	r3, r3, #15
1a014d86:	f002 0e0f 	and.w	lr, r2, #15
1a014d8a:	3310      	adds	r3, #16
1a014d8c:	f1be 0f03 	cmp.w	lr, #3
1a014d90:	4419      	add	r1, r3
1a014d92:	4403      	add	r3, r0
1a014d94:	d921      	bls.n	1a014dda <memmove+0xc2>
1a014d96:	1f1e      	subs	r6, r3, #4
1a014d98:	460d      	mov	r5, r1
1a014d9a:	4674      	mov	r4, lr
1a014d9c:	3c04      	subs	r4, #4
1a014d9e:	f855 7b04 	ldr.w	r7, [r5], #4
1a014da2:	f846 7f04 	str.w	r7, [r6, #4]!
1a014da6:	2c03      	cmp	r4, #3
1a014da8:	d8f8      	bhi.n	1a014d9c <memmove+0x84>
1a014daa:	f1ae 0404 	sub.w	r4, lr, #4
1a014dae:	f024 0403 	bic.w	r4, r4, #3
1a014db2:	3404      	adds	r4, #4
1a014db4:	4423      	add	r3, r4
1a014db6:	4421      	add	r1, r4
1a014db8:	f002 0203 	and.w	r2, r2, #3
1a014dbc:	b162      	cbz	r2, 1a014dd8 <memmove+0xc0>
1a014dbe:	3b01      	subs	r3, #1
1a014dc0:	440a      	add	r2, r1
1a014dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
1a014dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
1a014dca:	428a      	cmp	r2, r1
1a014dcc:	d1f9      	bne.n	1a014dc2 <memmove+0xaa>
1a014dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a014dd0:	4603      	mov	r3, r0
1a014dd2:	e7f3      	b.n	1a014dbc <memmove+0xa4>
1a014dd4:	4603      	mov	r3, r0
1a014dd6:	e7f2      	b.n	1a014dbe <memmove+0xa6>
1a014dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a014dda:	4672      	mov	r2, lr
1a014ddc:	e7ee      	b.n	1a014dbc <memmove+0xa4>
1a014dde:	bf00      	nop

1a014de0 <memset>:
1a014de0:	b470      	push	{r4, r5, r6}
1a014de2:	0784      	lsls	r4, r0, #30
1a014de4:	d046      	beq.n	1a014e74 <memset+0x94>
1a014de6:	1e54      	subs	r4, r2, #1
1a014de8:	2a00      	cmp	r2, #0
1a014dea:	d041      	beq.n	1a014e70 <memset+0x90>
1a014dec:	b2cd      	uxtb	r5, r1
1a014dee:	4603      	mov	r3, r0
1a014df0:	e002      	b.n	1a014df8 <memset+0x18>
1a014df2:	1e62      	subs	r2, r4, #1
1a014df4:	b3e4      	cbz	r4, 1a014e70 <memset+0x90>
1a014df6:	4614      	mov	r4, r2
1a014df8:	f803 5b01 	strb.w	r5, [r3], #1
1a014dfc:	079a      	lsls	r2, r3, #30
1a014dfe:	d1f8      	bne.n	1a014df2 <memset+0x12>
1a014e00:	2c03      	cmp	r4, #3
1a014e02:	d92e      	bls.n	1a014e62 <memset+0x82>
1a014e04:	b2cd      	uxtb	r5, r1
1a014e06:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a014e0a:	2c0f      	cmp	r4, #15
1a014e0c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a014e10:	d919      	bls.n	1a014e46 <memset+0x66>
1a014e12:	f103 0210 	add.w	r2, r3, #16
1a014e16:	4626      	mov	r6, r4
1a014e18:	3e10      	subs	r6, #16
1a014e1a:	2e0f      	cmp	r6, #15
1a014e1c:	f842 5c10 	str.w	r5, [r2, #-16]
1a014e20:	f842 5c0c 	str.w	r5, [r2, #-12]
1a014e24:	f842 5c08 	str.w	r5, [r2, #-8]
1a014e28:	f842 5c04 	str.w	r5, [r2, #-4]
1a014e2c:	f102 0210 	add.w	r2, r2, #16
1a014e30:	d8f2      	bhi.n	1a014e18 <memset+0x38>
1a014e32:	f1a4 0210 	sub.w	r2, r4, #16
1a014e36:	f022 020f 	bic.w	r2, r2, #15
1a014e3a:	f004 040f 	and.w	r4, r4, #15
1a014e3e:	3210      	adds	r2, #16
1a014e40:	2c03      	cmp	r4, #3
1a014e42:	4413      	add	r3, r2
1a014e44:	d90d      	bls.n	1a014e62 <memset+0x82>
1a014e46:	461e      	mov	r6, r3
1a014e48:	4622      	mov	r2, r4
1a014e4a:	3a04      	subs	r2, #4
1a014e4c:	2a03      	cmp	r2, #3
1a014e4e:	f846 5b04 	str.w	r5, [r6], #4
1a014e52:	d8fa      	bhi.n	1a014e4a <memset+0x6a>
1a014e54:	1f22      	subs	r2, r4, #4
1a014e56:	f022 0203 	bic.w	r2, r2, #3
1a014e5a:	3204      	adds	r2, #4
1a014e5c:	4413      	add	r3, r2
1a014e5e:	f004 0403 	and.w	r4, r4, #3
1a014e62:	b12c      	cbz	r4, 1a014e70 <memset+0x90>
1a014e64:	b2c9      	uxtb	r1, r1
1a014e66:	441c      	add	r4, r3
1a014e68:	f803 1b01 	strb.w	r1, [r3], #1
1a014e6c:	42a3      	cmp	r3, r4
1a014e6e:	d1fb      	bne.n	1a014e68 <memset+0x88>
1a014e70:	bc70      	pop	{r4, r5, r6}
1a014e72:	4770      	bx	lr
1a014e74:	4614      	mov	r4, r2
1a014e76:	4603      	mov	r3, r0
1a014e78:	e7c2      	b.n	1a014e00 <memset+0x20>
1a014e7a:	bf00      	nop

1a014e7c <__fpclassifyd>:
1a014e7c:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
1a014e80:	b410      	push	{r4}
1a014e82:	460b      	mov	r3, r1
1a014e84:	d008      	beq.n	1a014e98 <__fpclassifyd+0x1c>
1a014e86:	4911      	ldr	r1, [pc, #68]	; (1a014ecc <__fpclassifyd+0x50>)
1a014e88:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
1a014e8c:	428c      	cmp	r4, r1
1a014e8e:	d808      	bhi.n	1a014ea2 <__fpclassifyd+0x26>
1a014e90:	2004      	movs	r0, #4
1a014e92:	f85d 4b04 	ldr.w	r4, [sp], #4
1a014e96:	4770      	bx	lr
1a014e98:	b918      	cbnz	r0, 1a014ea2 <__fpclassifyd+0x26>
1a014e9a:	2002      	movs	r0, #2
1a014e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a014ea0:	4770      	bx	lr
1a014ea2:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
1a014ea6:	4909      	ldr	r1, [pc, #36]	; (1a014ecc <__fpclassifyd+0x50>)
1a014ea8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
1a014eac:	428b      	cmp	r3, r1
1a014eae:	d9ef      	bls.n	1a014e90 <__fpclassifyd+0x14>
1a014eb0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
1a014eb4:	d201      	bcs.n	1a014eba <__fpclassifyd+0x3e>
1a014eb6:	2003      	movs	r0, #3
1a014eb8:	e7eb      	b.n	1a014e92 <__fpclassifyd+0x16>
1a014eba:	4b05      	ldr	r3, [pc, #20]	; (1a014ed0 <__fpclassifyd+0x54>)
1a014ebc:	429a      	cmp	r2, r3
1a014ebe:	d001      	beq.n	1a014ec4 <__fpclassifyd+0x48>
1a014ec0:	2000      	movs	r0, #0
1a014ec2:	e7e6      	b.n	1a014e92 <__fpclassifyd+0x16>
1a014ec4:	fab0 f080 	clz	r0, r0
1a014ec8:	0940      	lsrs	r0, r0, #5
1a014eca:	e7e2      	b.n	1a014e92 <__fpclassifyd+0x16>
1a014ecc:	7fdfffff 	.word	0x7fdfffff
1a014ed0:	7ff00000 	.word	0x7ff00000

1a014ed4 <__fpclassifyf>:
1a014ed4:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
1a014ed8:	d101      	bne.n	1a014ede <__fpclassifyf+0xa>
1a014eda:	2002      	movs	r0, #2
1a014edc:	4770      	bx	lr
1a014ede:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
1a014ee2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
1a014ee6:	d201      	bcs.n	1a014eec <__fpclassifyf+0x18>
1a014ee8:	2004      	movs	r0, #4
1a014eea:	4770      	bx	lr
1a014eec:	4b05      	ldr	r3, [pc, #20]	; (1a014f04 <__fpclassifyf+0x30>)
1a014eee:	1e42      	subs	r2, r0, #1
1a014ef0:	429a      	cmp	r2, r3
1a014ef2:	d801      	bhi.n	1a014ef8 <__fpclassifyf+0x24>
1a014ef4:	2003      	movs	r0, #3
1a014ef6:	4770      	bx	lr
1a014ef8:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
1a014efc:	fab0 f080 	clz	r0, r0
1a014f00:	0940      	lsrs	r0, r0, #5
1a014f02:	4770      	bx	lr
1a014f04:	007ffffe 	.word	0x007ffffe

1a014f08 <atan>:
1a014f08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a014f0c:	4bc4      	ldr	r3, [pc, #784]	; (1a015220 <atan+0x318>)
1a014f0e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
1a014f12:	429e      	cmp	r6, r3
1a014f14:	4604      	mov	r4, r0
1a014f16:	460d      	mov	r5, r1
1a014f18:	468b      	mov	fp, r1
1a014f1a:	dd0e      	ble.n	1a014f3a <atan+0x32>
1a014f1c:	4bc1      	ldr	r3, [pc, #772]	; (1a015224 <atan+0x31c>)
1a014f1e:	429e      	cmp	r6, r3
1a014f20:	f300 80ac 	bgt.w	1a01507c <atan+0x174>
1a014f24:	f000 80a7 	beq.w	1a015076 <atan+0x16e>
1a014f28:	f1bb 0f00 	cmp.w	fp, #0
1a014f2c:	f340 80e9 	ble.w	1a015102 <atan+0x1fa>
1a014f30:	a19f      	add	r1, pc, #636	; (adr r1, 1a0151b0 <atan+0x2a8>)
1a014f32:	e9d1 0100 	ldrd	r0, r1, [r1]
1a014f36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a014f3a:	4bbb      	ldr	r3, [pc, #748]	; (1a015228 <atan+0x320>)
1a014f3c:	429e      	cmp	r6, r3
1a014f3e:	f300 80b5 	bgt.w	1a0150ac <atan+0x1a4>
1a014f42:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
1a014f46:	429e      	cmp	r6, r3
1a014f48:	f340 80a0 	ble.w	1a01508c <atan+0x184>
1a014f4c:	f04f 3aff 	mov.w	sl, #4294967295
1a014f50:	4622      	mov	r2, r4
1a014f52:	462b      	mov	r3, r5
1a014f54:	4620      	mov	r0, r4
1a014f56:	4629      	mov	r1, r5
1a014f58:	f7fe fdd2 	bl	1a013b00 <__aeabi_dmul>
1a014f5c:	4602      	mov	r2, r0
1a014f5e:	460b      	mov	r3, r1
1a014f60:	4680      	mov	r8, r0
1a014f62:	4689      	mov	r9, r1
1a014f64:	f7fe fdcc 	bl	1a013b00 <__aeabi_dmul>
1a014f68:	a393      	add	r3, pc, #588	; (adr r3, 1a0151b8 <atan+0x2b0>)
1a014f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014f6e:	4606      	mov	r6, r0
1a014f70:	460f      	mov	r7, r1
1a014f72:	f7fe fdc5 	bl	1a013b00 <__aeabi_dmul>
1a014f76:	a392      	add	r3, pc, #584	; (adr r3, 1a0151c0 <atan+0x2b8>)
1a014f78:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014f7c:	f7fe fc0e 	bl	1a01379c <__adddf3>
1a014f80:	4632      	mov	r2, r6
1a014f82:	463b      	mov	r3, r7
1a014f84:	f7fe fdbc 	bl	1a013b00 <__aeabi_dmul>
1a014f88:	a38f      	add	r3, pc, #572	; (adr r3, 1a0151c8 <atan+0x2c0>)
1a014f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014f8e:	f7fe fc05 	bl	1a01379c <__adddf3>
1a014f92:	4632      	mov	r2, r6
1a014f94:	463b      	mov	r3, r7
1a014f96:	f7fe fdb3 	bl	1a013b00 <__aeabi_dmul>
1a014f9a:	a38d      	add	r3, pc, #564	; (adr r3, 1a0151d0 <atan+0x2c8>)
1a014f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014fa0:	f7fe fbfc 	bl	1a01379c <__adddf3>
1a014fa4:	4632      	mov	r2, r6
1a014fa6:	463b      	mov	r3, r7
1a014fa8:	f7fe fdaa 	bl	1a013b00 <__aeabi_dmul>
1a014fac:	a38a      	add	r3, pc, #552	; (adr r3, 1a0151d8 <atan+0x2d0>)
1a014fae:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014fb2:	f7fe fbf3 	bl	1a01379c <__adddf3>
1a014fb6:	4632      	mov	r2, r6
1a014fb8:	463b      	mov	r3, r7
1a014fba:	f7fe fda1 	bl	1a013b00 <__aeabi_dmul>
1a014fbe:	a388      	add	r3, pc, #544	; (adr r3, 1a0151e0 <atan+0x2d8>)
1a014fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014fc4:	f7fe fbea 	bl	1a01379c <__adddf3>
1a014fc8:	4642      	mov	r2, r8
1a014fca:	464b      	mov	r3, r9
1a014fcc:	f7fe fd98 	bl	1a013b00 <__aeabi_dmul>
1a014fd0:	a385      	add	r3, pc, #532	; (adr r3, 1a0151e8 <atan+0x2e0>)
1a014fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014fd6:	4680      	mov	r8, r0
1a014fd8:	4689      	mov	r9, r1
1a014fda:	4630      	mov	r0, r6
1a014fdc:	4639      	mov	r1, r7
1a014fde:	f7fe fd8f 	bl	1a013b00 <__aeabi_dmul>
1a014fe2:	a383      	add	r3, pc, #524	; (adr r3, 1a0151f0 <atan+0x2e8>)
1a014fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014fe8:	f7fe fbd6 	bl	1a013798 <__aeabi_dsub>
1a014fec:	4632      	mov	r2, r6
1a014fee:	463b      	mov	r3, r7
1a014ff0:	f7fe fd86 	bl	1a013b00 <__aeabi_dmul>
1a014ff4:	a380      	add	r3, pc, #512	; (adr r3, 1a0151f8 <atan+0x2f0>)
1a014ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a014ffa:	f7fe fbcd 	bl	1a013798 <__aeabi_dsub>
1a014ffe:	4632      	mov	r2, r6
1a015000:	463b      	mov	r3, r7
1a015002:	f7fe fd7d 	bl	1a013b00 <__aeabi_dmul>
1a015006:	a37e      	add	r3, pc, #504	; (adr r3, 1a015200 <atan+0x2f8>)
1a015008:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01500c:	f7fe fbc4 	bl	1a013798 <__aeabi_dsub>
1a015010:	4632      	mov	r2, r6
1a015012:	463b      	mov	r3, r7
1a015014:	f7fe fd74 	bl	1a013b00 <__aeabi_dmul>
1a015018:	a37b      	add	r3, pc, #492	; (adr r3, 1a015208 <atan+0x300>)
1a01501a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01501e:	f7fe fbbb 	bl	1a013798 <__aeabi_dsub>
1a015022:	4632      	mov	r2, r6
1a015024:	463b      	mov	r3, r7
1a015026:	f7fe fd6b 	bl	1a013b00 <__aeabi_dmul>
1a01502a:	f1ba 3fff 	cmp.w	sl, #4294967295
1a01502e:	4602      	mov	r2, r0
1a015030:	460b      	mov	r3, r1
1a015032:	d06b      	beq.n	1a01510c <atan+0x204>
1a015034:	4640      	mov	r0, r8
1a015036:	4649      	mov	r1, r9
1a015038:	f7fe fbb0 	bl	1a01379c <__adddf3>
1a01503c:	4622      	mov	r2, r4
1a01503e:	462b      	mov	r3, r5
1a015040:	f7fe fd5e 	bl	1a013b00 <__aeabi_dmul>
1a015044:	4e79      	ldr	r6, [pc, #484]	; (1a01522c <atan+0x324>)
1a015046:	4b7a      	ldr	r3, [pc, #488]	; (1a015230 <atan+0x328>)
1a015048:	ea4f 0aca 	mov.w	sl, sl, lsl #3
1a01504c:	4456      	add	r6, sl
1a01504e:	449a      	add	sl, r3
1a015050:	e9da 2300 	ldrd	r2, r3, [sl]
1a015054:	f7fe fba0 	bl	1a013798 <__aeabi_dsub>
1a015058:	4622      	mov	r2, r4
1a01505a:	462b      	mov	r3, r5
1a01505c:	f7fe fb9c 	bl	1a013798 <__aeabi_dsub>
1a015060:	4602      	mov	r2, r0
1a015062:	460b      	mov	r3, r1
1a015064:	e9d6 0100 	ldrd	r0, r1, [r6]
1a015068:	f7fe fb96 	bl	1a013798 <__aeabi_dsub>
1a01506c:	f1bb 0f00 	cmp.w	fp, #0
1a015070:	db43      	blt.n	1a0150fa <atan+0x1f2>
1a015072:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015076:	2800      	cmp	r0, #0
1a015078:	f43f af56 	beq.w	1a014f28 <atan+0x20>
1a01507c:	4622      	mov	r2, r4
1a01507e:	462b      	mov	r3, r5
1a015080:	4620      	mov	r0, r4
1a015082:	4629      	mov	r1, r5
1a015084:	f7fe fb8a 	bl	1a01379c <__adddf3>
1a015088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a01508c:	a360      	add	r3, pc, #384	; (adr r3, 1a015210 <atan+0x308>)
1a01508e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015092:	f7fe fb83 	bl	1a01379c <__adddf3>
1a015096:	2200      	movs	r2, #0
1a015098:	4b66      	ldr	r3, [pc, #408]	; (1a015234 <atan+0x32c>)
1a01509a:	f7fe ffc1 	bl	1a014020 <__aeabi_dcmpgt>
1a01509e:	2800      	cmp	r0, #0
1a0150a0:	f43f af54 	beq.w	1a014f4c <atan+0x44>
1a0150a4:	4620      	mov	r0, r4
1a0150a6:	4629      	mov	r1, r5
1a0150a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0150ac:	f000 f914 	bl	1a0152d8 <fabs>
1a0150b0:	4b61      	ldr	r3, [pc, #388]	; (1a015238 <atan+0x330>)
1a0150b2:	429e      	cmp	r6, r3
1a0150b4:	4604      	mov	r4, r0
1a0150b6:	460d      	mov	r5, r1
1a0150b8:	dc38      	bgt.n	1a01512c <atan+0x224>
1a0150ba:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
1a0150be:	429e      	cmp	r6, r3
1a0150c0:	dc5d      	bgt.n	1a01517e <atan+0x276>
1a0150c2:	4602      	mov	r2, r0
1a0150c4:	460b      	mov	r3, r1
1a0150c6:	f7fe fb69 	bl	1a01379c <__adddf3>
1a0150ca:	2200      	movs	r2, #0
1a0150cc:	4b59      	ldr	r3, [pc, #356]	; (1a015234 <atan+0x32c>)
1a0150ce:	f7fe fb63 	bl	1a013798 <__aeabi_dsub>
1a0150d2:	2200      	movs	r2, #0
1a0150d4:	4606      	mov	r6, r0
1a0150d6:	460f      	mov	r7, r1
1a0150d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a0150dc:	4620      	mov	r0, r4
1a0150de:	4629      	mov	r1, r5
1a0150e0:	f7fe fb5c 	bl	1a01379c <__adddf3>
1a0150e4:	4602      	mov	r2, r0
1a0150e6:	460b      	mov	r3, r1
1a0150e8:	4630      	mov	r0, r6
1a0150ea:	4639      	mov	r1, r7
1a0150ec:	f7fe fe32 	bl	1a013d54 <__aeabi_ddiv>
1a0150f0:	f04f 0a00 	mov.w	sl, #0
1a0150f4:	4604      	mov	r4, r0
1a0150f6:	460d      	mov	r5, r1
1a0150f8:	e72a      	b.n	1a014f50 <atan+0x48>
1a0150fa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
1a0150fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015102:	a145      	add	r1, pc, #276	; (adr r1, 1a015218 <atan+0x310>)
1a015104:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015108:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a01510c:	4640      	mov	r0, r8
1a01510e:	4649      	mov	r1, r9
1a015110:	f7fe fb44 	bl	1a01379c <__adddf3>
1a015114:	4622      	mov	r2, r4
1a015116:	462b      	mov	r3, r5
1a015118:	f7fe fcf2 	bl	1a013b00 <__aeabi_dmul>
1a01511c:	4602      	mov	r2, r0
1a01511e:	460b      	mov	r3, r1
1a015120:	4620      	mov	r0, r4
1a015122:	4629      	mov	r1, r5
1a015124:	f7fe fb38 	bl	1a013798 <__aeabi_dsub>
1a015128:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a01512c:	4b43      	ldr	r3, [pc, #268]	; (1a01523c <atan+0x334>)
1a01512e:	429e      	cmp	r6, r3
1a015130:	dc1a      	bgt.n	1a015168 <atan+0x260>
1a015132:	2200      	movs	r2, #0
1a015134:	4b42      	ldr	r3, [pc, #264]	; (1a015240 <atan+0x338>)
1a015136:	f7fe fb2f 	bl	1a013798 <__aeabi_dsub>
1a01513a:	2200      	movs	r2, #0
1a01513c:	4606      	mov	r6, r0
1a01513e:	460f      	mov	r7, r1
1a015140:	4b3f      	ldr	r3, [pc, #252]	; (1a015240 <atan+0x338>)
1a015142:	4620      	mov	r0, r4
1a015144:	4629      	mov	r1, r5
1a015146:	f7fe fcdb 	bl	1a013b00 <__aeabi_dmul>
1a01514a:	2200      	movs	r2, #0
1a01514c:	4b39      	ldr	r3, [pc, #228]	; (1a015234 <atan+0x32c>)
1a01514e:	f7fe fb25 	bl	1a01379c <__adddf3>
1a015152:	4602      	mov	r2, r0
1a015154:	460b      	mov	r3, r1
1a015156:	4630      	mov	r0, r6
1a015158:	4639      	mov	r1, r7
1a01515a:	f7fe fdfb 	bl	1a013d54 <__aeabi_ddiv>
1a01515e:	f04f 0a02 	mov.w	sl, #2
1a015162:	4604      	mov	r4, r0
1a015164:	460d      	mov	r5, r1
1a015166:	e6f3      	b.n	1a014f50 <atan+0x48>
1a015168:	4602      	mov	r2, r0
1a01516a:	460b      	mov	r3, r1
1a01516c:	2000      	movs	r0, #0
1a01516e:	4935      	ldr	r1, [pc, #212]	; (1a015244 <atan+0x33c>)
1a015170:	f7fe fdf0 	bl	1a013d54 <__aeabi_ddiv>
1a015174:	f04f 0a03 	mov.w	sl, #3
1a015178:	4604      	mov	r4, r0
1a01517a:	460d      	mov	r5, r1
1a01517c:	e6e8      	b.n	1a014f50 <atan+0x48>
1a01517e:	2200      	movs	r2, #0
1a015180:	4b2c      	ldr	r3, [pc, #176]	; (1a015234 <atan+0x32c>)
1a015182:	f7fe fb09 	bl	1a013798 <__aeabi_dsub>
1a015186:	2200      	movs	r2, #0
1a015188:	4606      	mov	r6, r0
1a01518a:	460f      	mov	r7, r1
1a01518c:	4b29      	ldr	r3, [pc, #164]	; (1a015234 <atan+0x32c>)
1a01518e:	4620      	mov	r0, r4
1a015190:	4629      	mov	r1, r5
1a015192:	f7fe fb03 	bl	1a01379c <__adddf3>
1a015196:	4602      	mov	r2, r0
1a015198:	460b      	mov	r3, r1
1a01519a:	4630      	mov	r0, r6
1a01519c:	4639      	mov	r1, r7
1a01519e:	f7fe fdd9 	bl	1a013d54 <__aeabi_ddiv>
1a0151a2:	f04f 0a01 	mov.w	sl, #1
1a0151a6:	4604      	mov	r4, r0
1a0151a8:	460d      	mov	r5, r1
1a0151aa:	e6d1      	b.n	1a014f50 <atan+0x48>
1a0151ac:	f3af 8000 	nop.w
1a0151b0:	54442d18 	.word	0x54442d18
1a0151b4:	3ff921fb 	.word	0x3ff921fb
1a0151b8:	e322da11 	.word	0xe322da11
1a0151bc:	3f90ad3a 	.word	0x3f90ad3a
1a0151c0:	24760deb 	.word	0x24760deb
1a0151c4:	3fa97b4b 	.word	0x3fa97b4b
1a0151c8:	a0d03d51 	.word	0xa0d03d51
1a0151cc:	3fb10d66 	.word	0x3fb10d66
1a0151d0:	c54c206e 	.word	0xc54c206e
1a0151d4:	3fb745cd 	.word	0x3fb745cd
1a0151d8:	920083ff 	.word	0x920083ff
1a0151dc:	3fc24924 	.word	0x3fc24924
1a0151e0:	5555550d 	.word	0x5555550d
1a0151e4:	3fd55555 	.word	0x3fd55555
1a0151e8:	2c6a6c2f 	.word	0x2c6a6c2f
1a0151ec:	bfa2b444 	.word	0xbfa2b444
1a0151f0:	52defd9a 	.word	0x52defd9a
1a0151f4:	3fadde2d 	.word	0x3fadde2d
1a0151f8:	af749a6d 	.word	0xaf749a6d
1a0151fc:	3fb3b0f2 	.word	0x3fb3b0f2
1a015200:	fe231671 	.word	0xfe231671
1a015204:	3fbc71c6 	.word	0x3fbc71c6
1a015208:	9998ebc4 	.word	0x9998ebc4
1a01520c:	3fc99999 	.word	0x3fc99999
1a015210:	8800759c 	.word	0x8800759c
1a015214:	7e37e43c 	.word	0x7e37e43c
1a015218:	54442d18 	.word	0x54442d18
1a01521c:	bff921fb 	.word	0xbff921fb
1a015220:	440fffff 	.word	0x440fffff
1a015224:	7ff00000 	.word	0x7ff00000
1a015228:	3fdbffff 	.word	0x3fdbffff
1a01522c:	1a01ac78 	.word	0x1a01ac78
1a015230:	1a01ac58 	.word	0x1a01ac58
1a015234:	3ff00000 	.word	0x3ff00000
1a015238:	3ff2ffff 	.word	0x3ff2ffff
1a01523c:	40037fff 	.word	0x40037fff
1a015240:	3ff80000 	.word	0x3ff80000
1a015244:	bff00000 	.word	0xbff00000

1a015248 <cos>:
1a015248:	b530      	push	{r4, r5, lr}
1a01524a:	4a21      	ldr	r2, [pc, #132]	; (1a0152d0 <cos+0x88>)
1a01524c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a015250:	4293      	cmp	r3, r2
1a015252:	b087      	sub	sp, #28
1a015254:	dd1b      	ble.n	1a01528e <cos+0x46>
1a015256:	4a1f      	ldr	r2, [pc, #124]	; (1a0152d4 <cos+0x8c>)
1a015258:	4293      	cmp	r3, r2
1a01525a:	dd05      	ble.n	1a015268 <cos+0x20>
1a01525c:	4602      	mov	r2, r0
1a01525e:	460b      	mov	r3, r1
1a015260:	f7fe fa9a 	bl	1a013798 <__aeabi_dsub>
1a015264:	b007      	add	sp, #28
1a015266:	bd30      	pop	{r4, r5, pc}
1a015268:	aa02      	add	r2, sp, #8
1a01526a:	f001 f8cd 	bl	1a016408 <__ieee754_rem_pio2>
1a01526e:	f000 0303 	and.w	r3, r0, #3
1a015272:	2b01      	cmp	r3, #1
1a015274:	d01b      	beq.n	1a0152ae <cos+0x66>
1a015276:	2b02      	cmp	r3, #2
1a015278:	d00f      	beq.n	1a01529a <cos+0x52>
1a01527a:	b313      	cbz	r3, 1a0152c2 <cos+0x7a>
1a01527c:	2401      	movs	r4, #1
1a01527e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a015282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a015286:	9400      	str	r4, [sp, #0]
1a015288:	f002 fc5a 	bl	1a017b40 <__kernel_sin>
1a01528c:	e7ea      	b.n	1a015264 <cos+0x1c>
1a01528e:	2200      	movs	r2, #0
1a015290:	2300      	movs	r3, #0
1a015292:	f001 ff29 	bl	1a0170e8 <__kernel_cos>
1a015296:	b007      	add	sp, #28
1a015298:	bd30      	pop	{r4, r5, pc}
1a01529a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a01529e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a0152a2:	f001 ff21 	bl	1a0170e8 <__kernel_cos>
1a0152a6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
1a0152aa:	b007      	add	sp, #28
1a0152ac:	bd30      	pop	{r4, r5, pc}
1a0152ae:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
1a0152b2:	9300      	str	r3, [sp, #0]
1a0152b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a0152b8:	4622      	mov	r2, r4
1a0152ba:	462b      	mov	r3, r5
1a0152bc:	f002 fc40 	bl	1a017b40 <__kernel_sin>
1a0152c0:	e7f1      	b.n	1a0152a6 <cos+0x5e>
1a0152c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a0152c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a0152ca:	f001 ff0d 	bl	1a0170e8 <__kernel_cos>
1a0152ce:	e7c9      	b.n	1a015264 <cos+0x1c>
1a0152d0:	3fe921fb 	.word	0x3fe921fb
1a0152d4:	7fefffff 	.word	0x7fefffff

1a0152d8 <fabs>:
1a0152d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0152dc:	4770      	bx	lr
1a0152de:	bf00      	nop

1a0152e0 <floor>:
1a0152e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0152e4:	f3c1 570a 	ubfx	r7, r1, #20, #11
1a0152e8:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
1a0152ec:	2d13      	cmp	r5, #19
1a0152ee:	4602      	mov	r2, r0
1a0152f0:	460b      	mov	r3, r1
1a0152f2:	460c      	mov	r4, r1
1a0152f4:	4688      	mov	r8, r1
1a0152f6:	4606      	mov	r6, r0
1a0152f8:	dc1c      	bgt.n	1a015334 <floor+0x54>
1a0152fa:	2d00      	cmp	r5, #0
1a0152fc:	db3f      	blt.n	1a01537e <floor+0x9e>
1a0152fe:	4f3a      	ldr	r7, [pc, #232]	; (1a0153e8 <floor+0x108>)
1a015300:	412f      	asrs	r7, r5
1a015302:	4686      	mov	lr, r0
1a015304:	ea01 0c07 	and.w	ip, r1, r7
1a015308:	ea5c 0e0e 	orrs.w	lr, ip, lr
1a01530c:	d017      	beq.n	1a01533e <floor+0x5e>
1a01530e:	a334      	add	r3, pc, #208	; (adr r3, 1a0153e0 <floor+0x100>)
1a015310:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015314:	f7fe fa42 	bl	1a01379c <__adddf3>
1a015318:	2200      	movs	r2, #0
1a01531a:	2300      	movs	r3, #0
1a01531c:	f7fe fe80 	bl	1a014020 <__aeabi_dcmpgt>
1a015320:	b120      	cbz	r0, 1a01532c <floor+0x4c>
1a015322:	2c00      	cmp	r4, #0
1a015324:	db3f      	blt.n	1a0153a6 <floor+0xc6>
1a015326:	ea28 0407 	bic.w	r4, r8, r7
1a01532a:	2600      	movs	r6, #0
1a01532c:	4621      	mov	r1, r4
1a01532e:	4630      	mov	r0, r6
1a015330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a015334:	2d33      	cmp	r5, #51	; 0x33
1a015336:	dd06      	ble.n	1a015346 <floor+0x66>
1a015338:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
1a01533c:	d02f      	beq.n	1a01539e <floor+0xbe>
1a01533e:	4610      	mov	r0, r2
1a015340:	4619      	mov	r1, r3
1a015342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a015346:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
1a01534a:	f04f 3eff 	mov.w	lr, #4294967295
1a01534e:	fa2e f707 	lsr.w	r7, lr, r7
1a015352:	4238      	tst	r0, r7
1a015354:	d0f3      	beq.n	1a01533e <floor+0x5e>
1a015356:	a322      	add	r3, pc, #136	; (adr r3, 1a0153e0 <floor+0x100>)
1a015358:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01535c:	f7fe fa1e 	bl	1a01379c <__adddf3>
1a015360:	2200      	movs	r2, #0
1a015362:	2300      	movs	r3, #0
1a015364:	f7fe fe5c 	bl	1a014020 <__aeabi_dcmpgt>
1a015368:	2800      	cmp	r0, #0
1a01536a:	d0df      	beq.n	1a01532c <floor+0x4c>
1a01536c:	2c00      	cmp	r4, #0
1a01536e:	db20      	blt.n	1a0153b2 <floor+0xd2>
1a015370:	4644      	mov	r4, r8
1a015372:	ea26 0607 	bic.w	r6, r6, r7
1a015376:	4621      	mov	r1, r4
1a015378:	4630      	mov	r0, r6
1a01537a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a01537e:	a318      	add	r3, pc, #96	; (adr r3, 1a0153e0 <floor+0x100>)
1a015380:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015384:	f7fe fa0a 	bl	1a01379c <__adddf3>
1a015388:	2200      	movs	r2, #0
1a01538a:	2300      	movs	r3, #0
1a01538c:	f7fe fe48 	bl	1a014020 <__aeabi_dcmpgt>
1a015390:	2800      	cmp	r0, #0
1a015392:	d0cb      	beq.n	1a01532c <floor+0x4c>
1a015394:	2c00      	cmp	r4, #0
1a015396:	db17      	blt.n	1a0153c8 <floor+0xe8>
1a015398:	2600      	movs	r6, #0
1a01539a:	4634      	mov	r4, r6
1a01539c:	e7c6      	b.n	1a01532c <floor+0x4c>
1a01539e:	f7fe f9fd 	bl	1a01379c <__adddf3>
1a0153a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0153a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
1a0153aa:	fa43 f505 	asr.w	r5, r3, r5
1a0153ae:	44a8      	add	r8, r5
1a0153b0:	e7b9      	b.n	1a015326 <floor+0x46>
1a0153b2:	2d14      	cmp	r5, #20
1a0153b4:	d010      	beq.n	1a0153d8 <floor+0xf8>
1a0153b6:	2301      	movs	r3, #1
1a0153b8:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
1a0153bc:	fa03 f505 	lsl.w	r5, r3, r5
1a0153c0:	19ae      	adds	r6, r5, r6
1a0153c2:	bf28      	it	cs
1a0153c4:	4498      	addcs	r8, r3
1a0153c6:	e7d3      	b.n	1a015370 <floor+0x90>
1a0153c8:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
1a0153cc:	4b07      	ldr	r3, [pc, #28]	; (1a0153ec <floor+0x10c>)
1a0153ce:	4332      	orrs	r2, r6
1a0153d0:	bf18      	it	ne
1a0153d2:	461c      	movne	r4, r3
1a0153d4:	2600      	movs	r6, #0
1a0153d6:	e7a9      	b.n	1a01532c <floor+0x4c>
1a0153d8:	f104 0801 	add.w	r8, r4, #1
1a0153dc:	e7c8      	b.n	1a015370 <floor+0x90>
1a0153de:	bf00      	nop
1a0153e0:	8800759c 	.word	0x8800759c
1a0153e4:	7e37e43c 	.word	0x7e37e43c
1a0153e8:	000fffff 	.word	0x000fffff
1a0153ec:	bff00000 	.word	0xbff00000

1a0153f0 <cosf>:
1a0153f0:	b500      	push	{lr}
1a0153f2:	b085      	sub	sp, #20
1a0153f4:	4a23      	ldr	r2, [pc, #140]	; (1a015484 <cosf+0x94>)
1a0153f6:	9001      	str	r0, [sp, #4]
1a0153f8:	9b01      	ldr	r3, [sp, #4]
1a0153fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
1a0153fe:	4293      	cmp	r3, r2
1a015400:	dd1d      	ble.n	1a01543e <cosf+0x4e>
1a015402:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
1a015406:	db08      	blt.n	1a01541a <cosf+0x2a>
1a015408:	eddd 7a01 	vldr	s15, [sp, #4]
1a01540c:	ee77 7ae7 	vsub.f32	s15, s15, s15
1a015410:	ee17 0a90 	vmov	r0, s15
1a015414:	b005      	add	sp, #20
1a015416:	f85d fb04 	ldr.w	pc, [sp], #4
1a01541a:	a902      	add	r1, sp, #8
1a01541c:	f001 fcc0 	bl	1a016da0 <__ieee754_rem_pio2f>
1a015420:	f000 0203 	and.w	r2, r0, #3
1a015424:	2a01      	cmp	r2, #1
1a015426:	d01d      	beq.n	1a015464 <cosf+0x74>
1a015428:	2a02      	cmp	r2, #2
1a01542a:	d012      	beq.n	1a015452 <cosf+0x62>
1a01542c:	b31a      	cbz	r2, 1a015476 <cosf+0x86>
1a01542e:	2201      	movs	r2, #1
1a015430:	9903      	ldr	r1, [sp, #12]
1a015432:	9802      	ldr	r0, [sp, #8]
1a015434:	f002 fff0 	bl	1a018418 <__kernel_sinf>
1a015438:	ee07 0a90 	vmov	s15, r0
1a01543c:	e7e8      	b.n	1a015410 <cosf+0x20>
1a01543e:	2100      	movs	r1, #0
1a015440:	f002 fc34 	bl	1a017cac <__kernel_cosf>
1a015444:	ee07 0a90 	vmov	s15, r0
1a015448:	ee17 0a90 	vmov	r0, s15
1a01544c:	b005      	add	sp, #20
1a01544e:	f85d fb04 	ldr.w	pc, [sp], #4
1a015452:	9903      	ldr	r1, [sp, #12]
1a015454:	9802      	ldr	r0, [sp, #8]
1a015456:	f002 fc29 	bl	1a017cac <__kernel_cosf>
1a01545a:	ee07 0a90 	vmov	s15, r0
1a01545e:	eef1 7a67 	vneg.f32	s15, s15
1a015462:	e7d5      	b.n	1a015410 <cosf+0x20>
1a015464:	9903      	ldr	r1, [sp, #12]
1a015466:	9802      	ldr	r0, [sp, #8]
1a015468:	f002 ffd6 	bl	1a018418 <__kernel_sinf>
1a01546c:	ee07 0a90 	vmov	s15, r0
1a015470:	eef1 7a67 	vneg.f32	s15, s15
1a015474:	e7cc      	b.n	1a015410 <cosf+0x20>
1a015476:	9903      	ldr	r1, [sp, #12]
1a015478:	9802      	ldr	r0, [sp, #8]
1a01547a:	f002 fc17 	bl	1a017cac <__kernel_cosf>
1a01547e:	ee07 0a90 	vmov	s15, r0
1a015482:	e7c5      	b.n	1a015410 <cosf+0x20>
1a015484:	3f490fd8 	.word	0x3f490fd8

1a015488 <fabsf>:
1a015488:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a01548c:	4770      	bx	lr
1a01548e:	bf00      	nop

1a015490 <floorf>:
1a015490:	b082      	sub	sp, #8
1a015492:	9001      	str	r0, [sp, #4]
1a015494:	9a01      	ldr	r2, [sp, #4]
1a015496:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
1a01549a:	0dcb      	lsrs	r3, r1, #23
1a01549c:	3b7f      	subs	r3, #127	; 0x7f
1a01549e:	2b16      	cmp	r3, #22
1a0154a0:	dc17      	bgt.n	1a0154d2 <floorf+0x42>
1a0154a2:	2b00      	cmp	r3, #0
1a0154a4:	4610      	mov	r0, r2
1a0154a6:	db22      	blt.n	1a0154ee <floorf+0x5e>
1a0154a8:	4921      	ldr	r1, [pc, #132]	; (1a015530 <floorf+0xa0>)
1a0154aa:	4119      	asrs	r1, r3
1a0154ac:	420a      	tst	r2, r1
1a0154ae:	d013      	beq.n	1a0154d8 <floorf+0x48>
1a0154b0:	eddf 7a20 	vldr	s15, [pc, #128]	; 1a015534 <floorf+0xa4>
1a0154b4:	ed9d 7a01 	vldr	s14, [sp, #4]
1a0154b8:	ee77 7a27 	vadd.f32	s15, s14, s15
1a0154bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
1a0154c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0154c4:	dd22      	ble.n	1a01550c <floorf+0x7c>
1a0154c6:	2a00      	cmp	r2, #0
1a0154c8:	db23      	blt.n	1a015512 <floorf+0x82>
1a0154ca:	ea20 0001 	bic.w	r0, r0, r1
1a0154ce:	b002      	add	sp, #8
1a0154d0:	4770      	bx	lr
1a0154d2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
1a0154d6:	d202      	bcs.n	1a0154de <floorf+0x4e>
1a0154d8:	9801      	ldr	r0, [sp, #4]
1a0154da:	b002      	add	sp, #8
1a0154dc:	4770      	bx	lr
1a0154de:	eddd 7a01 	vldr	s15, [sp, #4]
1a0154e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
1a0154e6:	ee17 0a90 	vmov	r0, s15
1a0154ea:	b002      	add	sp, #8
1a0154ec:	4770      	bx	lr
1a0154ee:	eddf 7a11 	vldr	s15, [pc, #68]	; 1a015534 <floorf+0xa4>
1a0154f2:	ed9d 7a01 	vldr	s14, [sp, #4]
1a0154f6:	ee77 7a27 	vadd.f32	s15, s14, s15
1a0154fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
1a0154fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a015502:	dde9      	ble.n	1a0154d8 <floorf+0x48>
1a015504:	2a00      	cmp	r2, #0
1a015506:	db0a      	blt.n	1a01551e <floorf+0x8e>
1a015508:	2000      	movs	r0, #0
1a01550a:	e7e6      	b.n	1a0154da <floorf+0x4a>
1a01550c:	ee17 0a10 	vmov	r0, s14
1a015510:	e7e3      	b.n	1a0154da <floorf+0x4a>
1a015512:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
1a015516:	fa42 f303 	asr.w	r3, r2, r3
1a01551a:	4418      	add	r0, r3
1a01551c:	e7d5      	b.n	1a0154ca <floorf+0x3a>
1a01551e:	ee17 0a10 	vmov	r0, s14
1a015522:	2900      	cmp	r1, #0
1a015524:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
1a015528:	bf18      	it	ne
1a01552a:	ee17 0a90 	vmovne	r0, s15
1a01552e:	e7d4      	b.n	1a0154da <floorf+0x4a>
1a015530:	007fffff 	.word	0x007fffff
1a015534:	7149f2ca 	.word	0x7149f2ca

1a015538 <sinf>:
1a015538:	b500      	push	{lr}
1a01553a:	b085      	sub	sp, #20
1a01553c:	4a24      	ldr	r2, [pc, #144]	; (1a0155d0 <sinf+0x98>)
1a01553e:	9001      	str	r0, [sp, #4]
1a015540:	9b01      	ldr	r3, [sp, #4]
1a015542:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
1a015546:	4293      	cmp	r3, r2
1a015548:	dd1e      	ble.n	1a015588 <sinf+0x50>
1a01554a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
1a01554e:	db08      	blt.n	1a015562 <sinf+0x2a>
1a015550:	eddd 7a01 	vldr	s15, [sp, #4]
1a015554:	ee77 7ae7 	vsub.f32	s15, s15, s15
1a015558:	ee17 0a90 	vmov	r0, s15
1a01555c:	b005      	add	sp, #20
1a01555e:	f85d fb04 	ldr.w	pc, [sp], #4
1a015562:	a902      	add	r1, sp, #8
1a015564:	f001 fc1c 	bl	1a016da0 <__ieee754_rem_pio2f>
1a015568:	f000 0003 	and.w	r0, r0, #3
1a01556c:	2801      	cmp	r0, #1
1a01556e:	d020      	beq.n	1a0155b2 <sinf+0x7a>
1a015570:	2802      	cmp	r0, #2
1a015572:	d014      	beq.n	1a01559e <sinf+0x66>
1a015574:	b320      	cbz	r0, 1a0155c0 <sinf+0x88>
1a015576:	9903      	ldr	r1, [sp, #12]
1a015578:	9802      	ldr	r0, [sp, #8]
1a01557a:	f002 fb97 	bl	1a017cac <__kernel_cosf>
1a01557e:	ee07 0a90 	vmov	s15, r0
1a015582:	eef1 7a67 	vneg.f32	s15, s15
1a015586:	e7e7      	b.n	1a015558 <sinf+0x20>
1a015588:	2200      	movs	r2, #0
1a01558a:	2100      	movs	r1, #0
1a01558c:	f002 ff44 	bl	1a018418 <__kernel_sinf>
1a015590:	ee07 0a90 	vmov	s15, r0
1a015594:	ee17 0a90 	vmov	r0, s15
1a015598:	b005      	add	sp, #20
1a01559a:	f85d fb04 	ldr.w	pc, [sp], #4
1a01559e:	2201      	movs	r2, #1
1a0155a0:	9903      	ldr	r1, [sp, #12]
1a0155a2:	9802      	ldr	r0, [sp, #8]
1a0155a4:	f002 ff38 	bl	1a018418 <__kernel_sinf>
1a0155a8:	ee07 0a90 	vmov	s15, r0
1a0155ac:	eef1 7a67 	vneg.f32	s15, s15
1a0155b0:	e7d2      	b.n	1a015558 <sinf+0x20>
1a0155b2:	9903      	ldr	r1, [sp, #12]
1a0155b4:	9802      	ldr	r0, [sp, #8]
1a0155b6:	f002 fb79 	bl	1a017cac <__kernel_cosf>
1a0155ba:	ee07 0a90 	vmov	s15, r0
1a0155be:	e7cb      	b.n	1a015558 <sinf+0x20>
1a0155c0:	2201      	movs	r2, #1
1a0155c2:	9903      	ldr	r1, [sp, #12]
1a0155c4:	9802      	ldr	r0, [sp, #8]
1a0155c6:	f002 ff27 	bl	1a018418 <__kernel_sinf>
1a0155ca:	ee07 0a90 	vmov	s15, r0
1a0155ce:	e7c3      	b.n	1a015558 <sinf+0x20>
1a0155d0:	3f490fd8 	.word	0x3f490fd8

1a0155d4 <acos>:
1a0155d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0155d8:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1a015678 <acos+0xa4>
1a0155dc:	b08a      	sub	sp, #40	; 0x28
1a0155de:	4606      	mov	r6, r0
1a0155e0:	460f      	mov	r7, r1
1a0155e2:	f000 f9cd 	bl	1a015980 <__ieee754_acos>
1a0155e6:	f998 3000 	ldrsb.w	r3, [r8]
1a0155ea:	3301      	adds	r3, #1
1a0155ec:	4604      	mov	r4, r0
1a0155ee:	460d      	mov	r5, r1
1a0155f0:	d004      	beq.n	1a0155fc <acos+0x28>
1a0155f2:	4630      	mov	r0, r6
1a0155f4:	4639      	mov	r1, r7
1a0155f6:	f7ff fc41 	bl	1a014e7c <__fpclassifyd>
1a0155fa:	b920      	cbnz	r0, 1a015606 <acos+0x32>
1a0155fc:	4620      	mov	r0, r4
1a0155fe:	4629      	mov	r1, r5
1a015600:	b00a      	add	sp, #40	; 0x28
1a015602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a015606:	4630      	mov	r0, r6
1a015608:	4639      	mov	r1, r7
1a01560a:	f7ff fe65 	bl	1a0152d8 <fabs>
1a01560e:	2200      	movs	r2, #0
1a015610:	4b16      	ldr	r3, [pc, #88]	; (1a01566c <acos+0x98>)
1a015612:	f7fe fd05 	bl	1a014020 <__aeabi_dcmpgt>
1a015616:	2800      	cmp	r0, #0
1a015618:	d0f0      	beq.n	1a0155fc <acos+0x28>
1a01561a:	2301      	movs	r3, #1
1a01561c:	4a14      	ldr	r2, [pc, #80]	; (1a015670 <acos+0x9c>)
1a01561e:	9300      	str	r3, [sp, #0]
1a015620:	4814      	ldr	r0, [pc, #80]	; (1a015674 <acos+0xa0>)
1a015622:	9201      	str	r2, [sp, #4]
1a015624:	2300      	movs	r3, #0
1a015626:	9308      	str	r3, [sp, #32]
1a015628:	e9cd 6704 	strd	r6, r7, [sp, #16]
1a01562c:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a015630:	f002 ff42 	bl	1a0184b8 <nan>
1a015634:	f998 3000 	ldrsb.w	r3, [r8]
1a015638:	2b02      	cmp	r3, #2
1a01563a:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a01563e:	d00a      	beq.n	1a015656 <acos+0x82>
1a015640:	4668      	mov	r0, sp
1a015642:	f002 ff37 	bl	1a0184b4 <matherr>
1a015646:	b130      	cbz	r0, 1a015656 <acos+0x82>
1a015648:	9b08      	ldr	r3, [sp, #32]
1a01564a:	b94b      	cbnz	r3, 1a015660 <acos+0x8c>
1a01564c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a015650:	b00a      	add	sp, #40	; 0x28
1a015652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a015656:	f003 f921 	bl	1a01889c <__errno>
1a01565a:	2321      	movs	r3, #33	; 0x21
1a01565c:	6003      	str	r3, [r0, #0]
1a01565e:	e7f3      	b.n	1a015648 <acos+0x74>
1a015660:	f003 f91c 	bl	1a01889c <__errno>
1a015664:	9b08      	ldr	r3, [sp, #32]
1a015666:	6003      	str	r3, [r0, #0]
1a015668:	e7f0      	b.n	1a01564c <acos+0x78>
1a01566a:	bf00      	nop
1a01566c:	3ff00000 	.word	0x3ff00000
1a015670:	1a01ac98 	.word	0x1a01ac98
1a015674:	1a01aa8c 	.word	0x1a01aa8c
1a015678:	100860b4 	.word	0x100860b4

1a01567c <atan2>:
1a01567c:	f000 bbd4 	b.w	1a015e28 <__ieee754_atan2>

1a015680 <log>:
1a015680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a015684:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 1a015774 <log+0xf4>
1a015688:	b08b      	sub	sp, #44	; 0x2c
1a01568a:	4606      	mov	r6, r0
1a01568c:	460f      	mov	r7, r1
1a01568e:	f000 fcc7 	bl	1a016020 <__ieee754_log>
1a015692:	f998 3000 	ldrsb.w	r3, [r8]
1a015696:	3301      	adds	r3, #1
1a015698:	4604      	mov	r4, r0
1a01569a:	460d      	mov	r5, r1
1a01569c:	d00b      	beq.n	1a0156b6 <log+0x36>
1a01569e:	4630      	mov	r0, r6
1a0156a0:	4639      	mov	r1, r7
1a0156a2:	f7ff fbeb 	bl	1a014e7c <__fpclassifyd>
1a0156a6:	b130      	cbz	r0, 1a0156b6 <log+0x36>
1a0156a8:	2200      	movs	r2, #0
1a0156aa:	2300      	movs	r3, #0
1a0156ac:	4630      	mov	r0, r6
1a0156ae:	4639      	mov	r1, r7
1a0156b0:	f7fe fcb6 	bl	1a014020 <__aeabi_dcmpgt>
1a0156b4:	b120      	cbz	r0, 1a0156c0 <log+0x40>
1a0156b6:	4620      	mov	r0, r4
1a0156b8:	4629      	mov	r1, r5
1a0156ba:	b00b      	add	sp, #44	; 0x2c
1a0156bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0156c0:	f898 4000 	ldrb.w	r4, [r8]
1a0156c4:	4b28      	ldr	r3, [pc, #160]	; (1a015768 <log+0xe8>)
1a0156c6:	9008      	str	r0, [sp, #32]
1a0156c8:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a0156cc:	e9cd 6704 	strd	r6, r7, [sp, #16]
1a0156d0:	9301      	str	r3, [sp, #4]
1a0156d2:	b9b4      	cbnz	r4, 1a015702 <log+0x82>
1a0156d4:	4d25      	ldr	r5, [pc, #148]	; (1a01576c <log+0xec>)
1a0156d6:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
1a0156da:	4630      	mov	r0, r6
1a0156dc:	4639      	mov	r1, r7
1a0156de:	2200      	movs	r2, #0
1a0156e0:	2300      	movs	r3, #0
1a0156e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
1a0156e6:	f7fe fc73 	bl	1a013fd0 <__aeabi_dcmpeq>
1a0156ea:	b358      	cbz	r0, 1a015744 <log+0xc4>
1a0156ec:	2302      	movs	r3, #2
1a0156ee:	9300      	str	r3, [sp, #0]
1a0156f0:	4668      	mov	r0, sp
1a0156f2:	f002 fedf 	bl	1a0184b4 <matherr>
1a0156f6:	b9f0      	cbnz	r0, 1a015736 <log+0xb6>
1a0156f8:	f003 f8d0 	bl	1a01889c <__errno>
1a0156fc:	2322      	movs	r3, #34	; 0x22
1a0156fe:	6003      	str	r3, [r0, #0]
1a015700:	e019      	b.n	1a015736 <log+0xb6>
1a015702:	f8df 9074 	ldr.w	r9, [pc, #116]	; 1a015778 <log+0xf8>
1a015706:	f04f 0800 	mov.w	r8, #0
1a01570a:	4630      	mov	r0, r6
1a01570c:	4639      	mov	r1, r7
1a01570e:	2200      	movs	r2, #0
1a015710:	2300      	movs	r3, #0
1a015712:	e9cd 8906 	strd	r8, r9, [sp, #24]
1a015716:	f7fe fc5b 	bl	1a013fd0 <__aeabi_dcmpeq>
1a01571a:	b9d8      	cbnz	r0, 1a015754 <log+0xd4>
1a01571c:	2301      	movs	r3, #1
1a01571e:	2c02      	cmp	r4, #2
1a015720:	9300      	str	r3, [sp, #0]
1a015722:	d111      	bne.n	1a015748 <log+0xc8>
1a015724:	f003 f8ba 	bl	1a01889c <__errno>
1a015728:	2321      	movs	r3, #33	; 0x21
1a01572a:	6003      	str	r3, [r0, #0]
1a01572c:	4810      	ldr	r0, [pc, #64]	; (1a015770 <log+0xf0>)
1a01572e:	f002 fec3 	bl	1a0184b8 <nan>
1a015732:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a015736:	9b08      	ldr	r3, [sp, #32]
1a015738:	b98b      	cbnz	r3, 1a01575e <log+0xde>
1a01573a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a01573e:	b00b      	add	sp, #44	; 0x2c
1a015740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a015744:	2301      	movs	r3, #1
1a015746:	9300      	str	r3, [sp, #0]
1a015748:	4668      	mov	r0, sp
1a01574a:	f002 feb3 	bl	1a0184b4 <matherr>
1a01574e:	2800      	cmp	r0, #0
1a015750:	d1ec      	bne.n	1a01572c <log+0xac>
1a015752:	e7e7      	b.n	1a015724 <log+0xa4>
1a015754:	2302      	movs	r3, #2
1a015756:	429c      	cmp	r4, r3
1a015758:	9300      	str	r3, [sp, #0]
1a01575a:	d0cd      	beq.n	1a0156f8 <log+0x78>
1a01575c:	e7c8      	b.n	1a0156f0 <log+0x70>
1a01575e:	f003 f89d 	bl	1a01889c <__errno>
1a015762:	9b08      	ldr	r3, [sp, #32]
1a015764:	6003      	str	r3, [r0, #0]
1a015766:	e7e8      	b.n	1a01573a <log+0xba>
1a015768:	1a01aca0 	.word	0x1a01aca0
1a01576c:	c7efffff 	.word	0xc7efffff
1a015770:	1a01aa8c 	.word	0x1a01aa8c
1a015774:	100860b4 	.word	0x100860b4
1a015778:	fff00000 	.word	0xfff00000

1a01577c <sqrt>:
1a01577c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a015780:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 1a015824 <sqrt+0xa8>
1a015784:	b08a      	sub	sp, #40	; 0x28
1a015786:	4606      	mov	r6, r0
1a015788:	460f      	mov	r7, r1
1a01578a:	f001 f85b 	bl	1a016844 <__ieee754_sqrt>
1a01578e:	f99a 3000 	ldrsb.w	r3, [sl]
1a015792:	3301      	adds	r3, #1
1a015794:	4604      	mov	r4, r0
1a015796:	460d      	mov	r5, r1
1a015798:	d00f      	beq.n	1a0157ba <sqrt+0x3e>
1a01579a:	4630      	mov	r0, r6
1a01579c:	4639      	mov	r1, r7
1a01579e:	f7ff fb6d 	bl	1a014e7c <__fpclassifyd>
1a0157a2:	b150      	cbz	r0, 1a0157ba <sqrt+0x3e>
1a0157a4:	f04f 0800 	mov.w	r8, #0
1a0157a8:	f04f 0900 	mov.w	r9, #0
1a0157ac:	4630      	mov	r0, r6
1a0157ae:	4639      	mov	r1, r7
1a0157b0:	4642      	mov	r2, r8
1a0157b2:	464b      	mov	r3, r9
1a0157b4:	f7fe fc16 	bl	1a013fe4 <__aeabi_dcmplt>
1a0157b8:	b920      	cbnz	r0, 1a0157c4 <sqrt+0x48>
1a0157ba:	4620      	mov	r0, r4
1a0157bc:	4629      	mov	r1, r5
1a0157be:	b00a      	add	sp, #40	; 0x28
1a0157c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0157c4:	4b16      	ldr	r3, [pc, #88]	; (1a015820 <sqrt+0xa4>)
1a0157c6:	f89a 4000 	ldrb.w	r4, [sl]
1a0157ca:	9301      	str	r3, [sp, #4]
1a0157cc:	2201      	movs	r2, #1
1a0157ce:	2300      	movs	r3, #0
1a0157d0:	e9cd 6704 	strd	r6, r7, [sp, #16]
1a0157d4:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a0157d8:	9200      	str	r2, [sp, #0]
1a0157da:	9308      	str	r3, [sp, #32]
1a0157dc:	b964      	cbnz	r4, 1a0157f8 <sqrt+0x7c>
1a0157de:	e9cd 8906 	strd	r8, r9, [sp, #24]
1a0157e2:	4668      	mov	r0, sp
1a0157e4:	f002 fe66 	bl	1a0184b4 <matherr>
1a0157e8:	b180      	cbz	r0, 1a01580c <sqrt+0x90>
1a0157ea:	9b08      	ldr	r3, [sp, #32]
1a0157ec:	b99b      	cbnz	r3, 1a015816 <sqrt+0x9a>
1a0157ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0157f2:	b00a      	add	sp, #40	; 0x28
1a0157f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0157f8:	4642      	mov	r2, r8
1a0157fa:	464b      	mov	r3, r9
1a0157fc:	4640      	mov	r0, r8
1a0157fe:	4649      	mov	r1, r9
1a015800:	f7fe faa8 	bl	1a013d54 <__aeabi_ddiv>
1a015804:	2c02      	cmp	r4, #2
1a015806:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a01580a:	d1ea      	bne.n	1a0157e2 <sqrt+0x66>
1a01580c:	f003 f846 	bl	1a01889c <__errno>
1a015810:	2321      	movs	r3, #33	; 0x21
1a015812:	6003      	str	r3, [r0, #0]
1a015814:	e7e9      	b.n	1a0157ea <sqrt+0x6e>
1a015816:	f003 f841 	bl	1a01889c <__errno>
1a01581a:	9b08      	ldr	r3, [sp, #32]
1a01581c:	6003      	str	r3, [r0, #0]
1a01581e:	e7e6      	b.n	1a0157ee <sqrt+0x72>
1a015820:	1a01aca4 	.word	0x1a01aca4
1a015824:	100860b4 	.word	0x100860b4

1a015828 <acosf>:
1a015828:	b570      	push	{r4, r5, r6, lr}
1a01582a:	4d25      	ldr	r5, [pc, #148]	; (1a0158c0 <acosf+0x98>)
1a01582c:	b08a      	sub	sp, #40	; 0x28
1a01582e:	4606      	mov	r6, r0
1a015830:	f001 f8ca 	bl	1a0169c8 <__ieee754_acosf>
1a015834:	f995 3000 	ldrsb.w	r3, [r5]
1a015838:	3301      	adds	r3, #1
1a01583a:	4604      	mov	r4, r0
1a01583c:	d003      	beq.n	1a015846 <acosf+0x1e>
1a01583e:	4630      	mov	r0, r6
1a015840:	f7ff fb48 	bl	1a014ed4 <__fpclassifyf>
1a015844:	b910      	cbnz	r0, 1a01584c <acosf+0x24>
1a015846:	4620      	mov	r0, r4
1a015848:	b00a      	add	sp, #40	; 0x28
1a01584a:	bd70      	pop	{r4, r5, r6, pc}
1a01584c:	4630      	mov	r0, r6
1a01584e:	f7ff fe1b 	bl	1a015488 <fabsf>
1a015852:	ee07 0a10 	vmov	s14, r0
1a015856:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
1a01585a:	eeb4 7ae7 	vcmpe.f32	s14, s15
1a01585e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a015862:	ddf0      	ble.n	1a015846 <acosf+0x1e>
1a015864:	2301      	movs	r3, #1
1a015866:	4a17      	ldr	r2, [pc, #92]	; (1a0158c4 <acosf+0x9c>)
1a015868:	9300      	str	r3, [sp, #0]
1a01586a:	4630      	mov	r0, r6
1a01586c:	2300      	movs	r3, #0
1a01586e:	9201      	str	r2, [sp, #4]
1a015870:	9308      	str	r3, [sp, #32]
1a015872:	f7fe f8f1 	bl	1a013a58 <__aeabi_f2d>
1a015876:	4602      	mov	r2, r0
1a015878:	460b      	mov	r3, r1
1a01587a:	4813      	ldr	r0, [pc, #76]	; (1a0158c8 <acosf+0xa0>)
1a01587c:	e9cd 2304 	strd	r2, r3, [sp, #16]
1a015880:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a015884:	f002 fe18 	bl	1a0184b8 <nan>
1a015888:	f995 3000 	ldrsb.w	r3, [r5]
1a01588c:	2b02      	cmp	r3, #2
1a01588e:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a015892:	d00b      	beq.n	1a0158ac <acosf+0x84>
1a015894:	4668      	mov	r0, sp
1a015896:	f002 fe0d 	bl	1a0184b4 <matherr>
1a01589a:	b138      	cbz	r0, 1a0158ac <acosf+0x84>
1a01589c:	9b08      	ldr	r3, [sp, #32]
1a01589e:	b953      	cbnz	r3, 1a0158b6 <acosf+0x8e>
1a0158a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0158a4:	f7fe fbee 	bl	1a014084 <__aeabi_d2f>
1a0158a8:	b00a      	add	sp, #40	; 0x28
1a0158aa:	bd70      	pop	{r4, r5, r6, pc}
1a0158ac:	f002 fff6 	bl	1a01889c <__errno>
1a0158b0:	2321      	movs	r3, #33	; 0x21
1a0158b2:	6003      	str	r3, [r0, #0]
1a0158b4:	e7f2      	b.n	1a01589c <acosf+0x74>
1a0158b6:	f002 fff1 	bl	1a01889c <__errno>
1a0158ba:	9b08      	ldr	r3, [sp, #32]
1a0158bc:	6003      	str	r3, [r0, #0]
1a0158be:	e7ef      	b.n	1a0158a0 <acosf+0x78>
1a0158c0:	100860b4 	.word	0x100860b4
1a0158c4:	1a01acac 	.word	0x1a01acac
1a0158c8:	1a01aa8c 	.word	0x1a01aa8c

1a0158cc <atan2f>:
1a0158cc:	f001 b9a8 	b.w	1a016c20 <__ieee754_atan2f>

1a0158d0 <sqrtf>:
1a0158d0:	b530      	push	{r4, r5, lr}
1a0158d2:	ed2d 8b02 	vpush	{d8}
1a0158d6:	4d27      	ldr	r5, [pc, #156]	; (1a015974 <sqrtf+0xa4>)
1a0158d8:	b08b      	sub	sp, #44	; 0x2c
1a0158da:	ee08 0a10 	vmov	s16, r0
1a0158de:	f001 fbab 	bl	1a017038 <__ieee754_sqrtf>
1a0158e2:	f995 3000 	ldrsb.w	r3, [r5]
1a0158e6:	3301      	adds	r3, #1
1a0158e8:	4604      	mov	r4, r0
1a0158ea:	d009      	beq.n	1a015900 <sqrtf+0x30>
1a0158ec:	ee18 0a10 	vmov	r0, s16
1a0158f0:	f7ff faf0 	bl	1a014ed4 <__fpclassifyf>
1a0158f4:	b120      	cbz	r0, 1a015900 <sqrtf+0x30>
1a0158f6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
1a0158fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0158fe:	d404      	bmi.n	1a01590a <sqrtf+0x3a>
1a015900:	4620      	mov	r0, r4
1a015902:	b00b      	add	sp, #44	; 0x2c
1a015904:	ecbd 8b02 	vpop	{d8}
1a015908:	bd30      	pop	{r4, r5, pc}
1a01590a:	2301      	movs	r3, #1
1a01590c:	4a1a      	ldr	r2, [pc, #104]	; (1a015978 <sqrtf+0xa8>)
1a01590e:	9300      	str	r3, [sp, #0]
1a015910:	ee18 0a10 	vmov	r0, s16
1a015914:	2300      	movs	r3, #0
1a015916:	9201      	str	r2, [sp, #4]
1a015918:	9308      	str	r3, [sp, #32]
1a01591a:	f7fe f89d 	bl	1a013a58 <__aeabi_f2d>
1a01591e:	782c      	ldrb	r4, [r5, #0]
1a015920:	e9cd 0104 	strd	r0, r1, [sp, #16]
1a015924:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a015928:	2200      	movs	r2, #0
1a01592a:	2300      	movs	r3, #0
1a01592c:	b97c      	cbnz	r4, 1a01594e <sqrtf+0x7e>
1a01592e:	e9cd 2306 	strd	r2, r3, [sp, #24]
1a015932:	4668      	mov	r0, sp
1a015934:	f002 fdbe 	bl	1a0184b4 <matherr>
1a015938:	b188      	cbz	r0, 1a01595e <sqrtf+0x8e>
1a01593a:	9b08      	ldr	r3, [sp, #32]
1a01593c:	b9a3      	cbnz	r3, 1a015968 <sqrtf+0x98>
1a01593e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a015942:	f7fe fb9f 	bl	1a014084 <__aeabi_d2f>
1a015946:	b00b      	add	sp, #44	; 0x2c
1a015948:	ecbd 8b02 	vpop	{d8}
1a01594c:	bd30      	pop	{r4, r5, pc}
1a01594e:	4610      	mov	r0, r2
1a015950:	4619      	mov	r1, r3
1a015952:	f7fe f9ff 	bl	1a013d54 <__aeabi_ddiv>
1a015956:	2c02      	cmp	r4, #2
1a015958:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a01595c:	d1e9      	bne.n	1a015932 <sqrtf+0x62>
1a01595e:	f002 ff9d 	bl	1a01889c <__errno>
1a015962:	2321      	movs	r3, #33	; 0x21
1a015964:	6003      	str	r3, [r0, #0]
1a015966:	e7e8      	b.n	1a01593a <sqrtf+0x6a>
1a015968:	f002 ff98 	bl	1a01889c <__errno>
1a01596c:	9b08      	ldr	r3, [sp, #32]
1a01596e:	6003      	str	r3, [r0, #0]
1a015970:	e7e5      	b.n	1a01593e <sqrtf+0x6e>
1a015972:	bf00      	nop
1a015974:	100860b4 	.word	0x100860b4
1a015978:	1a01acb4 	.word	0x1a01acb4
1a01597c:	ffffffff 	.word	0xffffffff

1a015980 <__ieee754_acos>:
1a015980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a015984:	4ec4      	ldr	r6, [pc, #784]	; (1a015c98 <__ieee754_acos+0x318>)
1a015986:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a01598a:	42b3      	cmp	r3, r6
1a01598c:	4604      	mov	r4, r0
1a01598e:	460d      	mov	r5, r1
1a015990:	dd0d      	ble.n	1a0159ae <__ieee754_acos+0x2e>
1a015992:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
1a015996:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
1a01599a:	4303      	orrs	r3, r0
1a01599c:	f040 80b9 	bne.w	1a015b12 <__ieee754_acos+0x192>
1a0159a0:	2900      	cmp	r1, #0
1a0159a2:	f340 8140 	ble.w	1a015c26 <__ieee754_acos+0x2a6>
1a0159a6:	2000      	movs	r0, #0
1a0159a8:	2100      	movs	r1, #0
1a0159aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0159ae:	4ebb      	ldr	r6, [pc, #748]	; (1a015c9c <__ieee754_acos+0x31c>)
1a0159b0:	42b3      	cmp	r3, r6
1a0159b2:	f340 80a6 	ble.w	1a015b02 <__ieee754_acos+0x182>
1a0159b6:	2900      	cmp	r1, #0
1a0159b8:	f2c0 8178 	blt.w	1a015cac <__ieee754_acos+0x32c>
1a0159bc:	4602      	mov	r2, r0
1a0159be:	460b      	mov	r3, r1
1a0159c0:	2000      	movs	r0, #0
1a0159c2:	49b7      	ldr	r1, [pc, #732]	; (1a015ca0 <__ieee754_acos+0x320>)
1a0159c4:	f7fd fee8 	bl	1a013798 <__aeabi_dsub>
1a0159c8:	2200      	movs	r2, #0
1a0159ca:	4bb6      	ldr	r3, [pc, #728]	; (1a015ca4 <__ieee754_acos+0x324>)
1a0159cc:	f7fe f898 	bl	1a013b00 <__aeabi_dmul>
1a0159d0:	4604      	mov	r4, r0
1a0159d2:	460d      	mov	r5, r1
1a0159d4:	f000 ff36 	bl	1a016844 <__ieee754_sqrt>
1a0159d8:	a395      	add	r3, pc, #596	; (adr r3, 1a015c30 <__ieee754_acos+0x2b0>)
1a0159da:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0159de:	4689      	mov	r9, r1
1a0159e0:	4680      	mov	r8, r0
1a0159e2:	4629      	mov	r1, r5
1a0159e4:	4620      	mov	r0, r4
1a0159e6:	f7fe f88b 	bl	1a013b00 <__aeabi_dmul>
1a0159ea:	a393      	add	r3, pc, #588	; (adr r3, 1a015c38 <__ieee754_acos+0x2b8>)
1a0159ec:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0159f0:	f7fd fed4 	bl	1a01379c <__adddf3>
1a0159f4:	4622      	mov	r2, r4
1a0159f6:	462b      	mov	r3, r5
1a0159f8:	f7fe f882 	bl	1a013b00 <__aeabi_dmul>
1a0159fc:	a390      	add	r3, pc, #576	; (adr r3, 1a015c40 <__ieee754_acos+0x2c0>)
1a0159fe:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015a02:	f7fd fec9 	bl	1a013798 <__aeabi_dsub>
1a015a06:	4622      	mov	r2, r4
1a015a08:	462b      	mov	r3, r5
1a015a0a:	f7fe f879 	bl	1a013b00 <__aeabi_dmul>
1a015a0e:	a38e      	add	r3, pc, #568	; (adr r3, 1a015c48 <__ieee754_acos+0x2c8>)
1a015a10:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015a14:	f7fd fec2 	bl	1a01379c <__adddf3>
1a015a18:	4622      	mov	r2, r4
1a015a1a:	462b      	mov	r3, r5
1a015a1c:	f7fe f870 	bl	1a013b00 <__aeabi_dmul>
1a015a20:	a38b      	add	r3, pc, #556	; (adr r3, 1a015c50 <__ieee754_acos+0x2d0>)
1a015a22:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015a26:	f7fd feb7 	bl	1a013798 <__aeabi_dsub>
1a015a2a:	4622      	mov	r2, r4
1a015a2c:	462b      	mov	r3, r5
1a015a2e:	f7fe f867 	bl	1a013b00 <__aeabi_dmul>
1a015a32:	a389      	add	r3, pc, #548	; (adr r3, 1a015c58 <__ieee754_acos+0x2d8>)
1a015a34:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015a38:	f7fd feb0 	bl	1a01379c <__adddf3>
1a015a3c:	4622      	mov	r2, r4
1a015a3e:	462b      	mov	r3, r5
1a015a40:	f7fe f85e 	bl	1a013b00 <__aeabi_dmul>
1a015a44:	a386      	add	r3, pc, #536	; (adr r3, 1a015c60 <__ieee754_acos+0x2e0>)
1a015a46:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015a4a:	4682      	mov	sl, r0
1a015a4c:	468b      	mov	fp, r1
1a015a4e:	4620      	mov	r0, r4
1a015a50:	4629      	mov	r1, r5
1a015a52:	f7fe f855 	bl	1a013b00 <__aeabi_dmul>
1a015a56:	a384      	add	r3, pc, #528	; (adr r3, 1a015c68 <__ieee754_acos+0x2e8>)
1a015a58:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015a5c:	f7fd fe9c 	bl	1a013798 <__aeabi_dsub>
1a015a60:	4622      	mov	r2, r4
1a015a62:	462b      	mov	r3, r5
1a015a64:	f7fe f84c 	bl	1a013b00 <__aeabi_dmul>
1a015a68:	a381      	add	r3, pc, #516	; (adr r3, 1a015c70 <__ieee754_acos+0x2f0>)
1a015a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015a6e:	f7fd fe95 	bl	1a01379c <__adddf3>
1a015a72:	4622      	mov	r2, r4
1a015a74:	462b      	mov	r3, r5
1a015a76:	f7fe f843 	bl	1a013b00 <__aeabi_dmul>
1a015a7a:	a37f      	add	r3, pc, #508	; (adr r3, 1a015c78 <__ieee754_acos+0x2f8>)
1a015a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015a80:	f7fd fe8a 	bl	1a013798 <__aeabi_dsub>
1a015a84:	4622      	mov	r2, r4
1a015a86:	462b      	mov	r3, r5
1a015a88:	f7fe f83a 	bl	1a013b00 <__aeabi_dmul>
1a015a8c:	2200      	movs	r2, #0
1a015a8e:	4b84      	ldr	r3, [pc, #528]	; (1a015ca0 <__ieee754_acos+0x320>)
1a015a90:	f7fd fe84 	bl	1a01379c <__adddf3>
1a015a94:	4602      	mov	r2, r0
1a015a96:	460b      	mov	r3, r1
1a015a98:	4650      	mov	r0, sl
1a015a9a:	4659      	mov	r1, fp
1a015a9c:	f7fe f95a 	bl	1a013d54 <__aeabi_ddiv>
1a015aa0:	4642      	mov	r2, r8
1a015aa2:	464b      	mov	r3, r9
1a015aa4:	f7fe f82c 	bl	1a013b00 <__aeabi_dmul>
1a015aa8:	2600      	movs	r6, #0
1a015aaa:	4682      	mov	sl, r0
1a015aac:	468b      	mov	fp, r1
1a015aae:	4632      	mov	r2, r6
1a015ab0:	464b      	mov	r3, r9
1a015ab2:	4630      	mov	r0, r6
1a015ab4:	4649      	mov	r1, r9
1a015ab6:	f7fe f823 	bl	1a013b00 <__aeabi_dmul>
1a015aba:	4602      	mov	r2, r0
1a015abc:	460b      	mov	r3, r1
1a015abe:	4620      	mov	r0, r4
1a015ac0:	4629      	mov	r1, r5
1a015ac2:	f7fd fe69 	bl	1a013798 <__aeabi_dsub>
1a015ac6:	4632      	mov	r2, r6
1a015ac8:	4604      	mov	r4, r0
1a015aca:	460d      	mov	r5, r1
1a015acc:	464b      	mov	r3, r9
1a015ace:	4640      	mov	r0, r8
1a015ad0:	4649      	mov	r1, r9
1a015ad2:	f7fd fe63 	bl	1a01379c <__adddf3>
1a015ad6:	4602      	mov	r2, r0
1a015ad8:	460b      	mov	r3, r1
1a015ada:	4620      	mov	r0, r4
1a015adc:	4629      	mov	r1, r5
1a015ade:	f7fe f939 	bl	1a013d54 <__aeabi_ddiv>
1a015ae2:	4602      	mov	r2, r0
1a015ae4:	460b      	mov	r3, r1
1a015ae6:	4650      	mov	r0, sl
1a015ae8:	4659      	mov	r1, fp
1a015aea:	f7fd fe57 	bl	1a01379c <__adddf3>
1a015aee:	4632      	mov	r2, r6
1a015af0:	464b      	mov	r3, r9
1a015af2:	f7fd fe53 	bl	1a01379c <__adddf3>
1a015af6:	4602      	mov	r2, r0
1a015af8:	460b      	mov	r3, r1
1a015afa:	f7fd fe4f 	bl	1a01379c <__adddf3>
1a015afe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015b02:	4a69      	ldr	r2, [pc, #420]	; (1a015ca8 <__ieee754_acos+0x328>)
1a015b04:	4293      	cmp	r3, r2
1a015b06:	dc0e      	bgt.n	1a015b26 <__ieee754_acos+0x1a6>
1a015b08:	a15d      	add	r1, pc, #372	; (adr r1, 1a015c80 <__ieee754_acos+0x300>)
1a015b0a:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015b0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015b12:	4602      	mov	r2, r0
1a015b14:	460b      	mov	r3, r1
1a015b16:	f7fd fe3f 	bl	1a013798 <__aeabi_dsub>
1a015b1a:	4602      	mov	r2, r0
1a015b1c:	460b      	mov	r3, r1
1a015b1e:	f7fe f919 	bl	1a013d54 <__aeabi_ddiv>
1a015b22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015b26:	4602      	mov	r2, r0
1a015b28:	460b      	mov	r3, r1
1a015b2a:	f7fd ffe9 	bl	1a013b00 <__aeabi_dmul>
1a015b2e:	a340      	add	r3, pc, #256	; (adr r3, 1a015c30 <__ieee754_acos+0x2b0>)
1a015b30:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015b34:	4606      	mov	r6, r0
1a015b36:	460f      	mov	r7, r1
1a015b38:	f7fd ffe2 	bl	1a013b00 <__aeabi_dmul>
1a015b3c:	a33e      	add	r3, pc, #248	; (adr r3, 1a015c38 <__ieee754_acos+0x2b8>)
1a015b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015b42:	f7fd fe2b 	bl	1a01379c <__adddf3>
1a015b46:	4632      	mov	r2, r6
1a015b48:	463b      	mov	r3, r7
1a015b4a:	f7fd ffd9 	bl	1a013b00 <__aeabi_dmul>
1a015b4e:	a33c      	add	r3, pc, #240	; (adr r3, 1a015c40 <__ieee754_acos+0x2c0>)
1a015b50:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015b54:	f7fd fe20 	bl	1a013798 <__aeabi_dsub>
1a015b58:	4632      	mov	r2, r6
1a015b5a:	463b      	mov	r3, r7
1a015b5c:	f7fd ffd0 	bl	1a013b00 <__aeabi_dmul>
1a015b60:	a339      	add	r3, pc, #228	; (adr r3, 1a015c48 <__ieee754_acos+0x2c8>)
1a015b62:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015b66:	f7fd fe19 	bl	1a01379c <__adddf3>
1a015b6a:	4632      	mov	r2, r6
1a015b6c:	463b      	mov	r3, r7
1a015b6e:	f7fd ffc7 	bl	1a013b00 <__aeabi_dmul>
1a015b72:	a337      	add	r3, pc, #220	; (adr r3, 1a015c50 <__ieee754_acos+0x2d0>)
1a015b74:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015b78:	f7fd fe0e 	bl	1a013798 <__aeabi_dsub>
1a015b7c:	4632      	mov	r2, r6
1a015b7e:	463b      	mov	r3, r7
1a015b80:	f7fd ffbe 	bl	1a013b00 <__aeabi_dmul>
1a015b84:	a334      	add	r3, pc, #208	; (adr r3, 1a015c58 <__ieee754_acos+0x2d8>)
1a015b86:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015b8a:	f7fd fe07 	bl	1a01379c <__adddf3>
1a015b8e:	4632      	mov	r2, r6
1a015b90:	463b      	mov	r3, r7
1a015b92:	f7fd ffb5 	bl	1a013b00 <__aeabi_dmul>
1a015b96:	a332      	add	r3, pc, #200	; (adr r3, 1a015c60 <__ieee754_acos+0x2e0>)
1a015b98:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015b9c:	4680      	mov	r8, r0
1a015b9e:	4689      	mov	r9, r1
1a015ba0:	4630      	mov	r0, r6
1a015ba2:	4639      	mov	r1, r7
1a015ba4:	f7fd ffac 	bl	1a013b00 <__aeabi_dmul>
1a015ba8:	a32f      	add	r3, pc, #188	; (adr r3, 1a015c68 <__ieee754_acos+0x2e8>)
1a015baa:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015bae:	f7fd fdf3 	bl	1a013798 <__aeabi_dsub>
1a015bb2:	4632      	mov	r2, r6
1a015bb4:	463b      	mov	r3, r7
1a015bb6:	f7fd ffa3 	bl	1a013b00 <__aeabi_dmul>
1a015bba:	a32d      	add	r3, pc, #180	; (adr r3, 1a015c70 <__ieee754_acos+0x2f0>)
1a015bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015bc0:	f7fd fdec 	bl	1a01379c <__adddf3>
1a015bc4:	4632      	mov	r2, r6
1a015bc6:	463b      	mov	r3, r7
1a015bc8:	f7fd ff9a 	bl	1a013b00 <__aeabi_dmul>
1a015bcc:	a32a      	add	r3, pc, #168	; (adr r3, 1a015c78 <__ieee754_acos+0x2f8>)
1a015bce:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015bd2:	f7fd fde1 	bl	1a013798 <__aeabi_dsub>
1a015bd6:	4632      	mov	r2, r6
1a015bd8:	463b      	mov	r3, r7
1a015bda:	f7fd ff91 	bl	1a013b00 <__aeabi_dmul>
1a015bde:	2200      	movs	r2, #0
1a015be0:	4b2f      	ldr	r3, [pc, #188]	; (1a015ca0 <__ieee754_acos+0x320>)
1a015be2:	f7fd fddb 	bl	1a01379c <__adddf3>
1a015be6:	4602      	mov	r2, r0
1a015be8:	460b      	mov	r3, r1
1a015bea:	4640      	mov	r0, r8
1a015bec:	4649      	mov	r1, r9
1a015bee:	f7fe f8b1 	bl	1a013d54 <__aeabi_ddiv>
1a015bf2:	4622      	mov	r2, r4
1a015bf4:	462b      	mov	r3, r5
1a015bf6:	f7fd ff83 	bl	1a013b00 <__aeabi_dmul>
1a015bfa:	4602      	mov	r2, r0
1a015bfc:	460b      	mov	r3, r1
1a015bfe:	a122      	add	r1, pc, #136	; (adr r1, 1a015c88 <__ieee754_acos+0x308>)
1a015c00:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015c04:	f7fd fdc8 	bl	1a013798 <__aeabi_dsub>
1a015c08:	4602      	mov	r2, r0
1a015c0a:	460b      	mov	r3, r1
1a015c0c:	4620      	mov	r0, r4
1a015c0e:	4629      	mov	r1, r5
1a015c10:	f7fd fdc2 	bl	1a013798 <__aeabi_dsub>
1a015c14:	4602      	mov	r2, r0
1a015c16:	460b      	mov	r3, r1
1a015c18:	a119      	add	r1, pc, #100	; (adr r1, 1a015c80 <__ieee754_acos+0x300>)
1a015c1a:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015c1e:	f7fd fdbb 	bl	1a013798 <__aeabi_dsub>
1a015c22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015c26:	a11a      	add	r1, pc, #104	; (adr r1, 1a015c90 <__ieee754_acos+0x310>)
1a015c28:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015c2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015c30:	0dfdf709 	.word	0x0dfdf709
1a015c34:	3f023de1 	.word	0x3f023de1
1a015c38:	7501b288 	.word	0x7501b288
1a015c3c:	3f49efe0 	.word	0x3f49efe0
1a015c40:	b5688f3b 	.word	0xb5688f3b
1a015c44:	3fa48228 	.word	0x3fa48228
1a015c48:	0e884455 	.word	0x0e884455
1a015c4c:	3fc9c155 	.word	0x3fc9c155
1a015c50:	03eb6f7d 	.word	0x03eb6f7d
1a015c54:	3fd4d612 	.word	0x3fd4d612
1a015c58:	55555555 	.word	0x55555555
1a015c5c:	3fc55555 	.word	0x3fc55555
1a015c60:	b12e9282 	.word	0xb12e9282
1a015c64:	3fb3b8c5 	.word	0x3fb3b8c5
1a015c68:	1b8d0159 	.word	0x1b8d0159
1a015c6c:	3fe6066c 	.word	0x3fe6066c
1a015c70:	9c598ac8 	.word	0x9c598ac8
1a015c74:	40002ae5 	.word	0x40002ae5
1a015c78:	1c8a2d4b 	.word	0x1c8a2d4b
1a015c7c:	40033a27 	.word	0x40033a27
1a015c80:	54442d18 	.word	0x54442d18
1a015c84:	3ff921fb 	.word	0x3ff921fb
1a015c88:	33145c07 	.word	0x33145c07
1a015c8c:	3c91a626 	.word	0x3c91a626
1a015c90:	54442d18 	.word	0x54442d18
1a015c94:	400921fb 	.word	0x400921fb
1a015c98:	3fefffff 	.word	0x3fefffff
1a015c9c:	3fdfffff 	.word	0x3fdfffff
1a015ca0:	3ff00000 	.word	0x3ff00000
1a015ca4:	3fe00000 	.word	0x3fe00000
1a015ca8:	3c600000 	.word	0x3c600000
1a015cac:	2200      	movs	r2, #0
1a015cae:	4b5c      	ldr	r3, [pc, #368]	; (1a015e20 <__ieee754_acos+0x4a0>)
1a015cb0:	f7fd fd74 	bl	1a01379c <__adddf3>
1a015cb4:	2200      	movs	r2, #0
1a015cb6:	4b5b      	ldr	r3, [pc, #364]	; (1a015e24 <__ieee754_acos+0x4a4>)
1a015cb8:	f7fd ff22 	bl	1a013b00 <__aeabi_dmul>
1a015cbc:	a340      	add	r3, pc, #256	; (adr r3, 1a015dc0 <__ieee754_acos+0x440>)
1a015cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015cc2:	4604      	mov	r4, r0
1a015cc4:	460d      	mov	r5, r1
1a015cc6:	f7fd ff1b 	bl	1a013b00 <__aeabi_dmul>
1a015cca:	a33f      	add	r3, pc, #252	; (adr r3, 1a015dc8 <__ieee754_acos+0x448>)
1a015ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015cd0:	f7fd fd64 	bl	1a01379c <__adddf3>
1a015cd4:	4622      	mov	r2, r4
1a015cd6:	462b      	mov	r3, r5
1a015cd8:	f7fd ff12 	bl	1a013b00 <__aeabi_dmul>
1a015cdc:	a33c      	add	r3, pc, #240	; (adr r3, 1a015dd0 <__ieee754_acos+0x450>)
1a015cde:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015ce2:	f7fd fd59 	bl	1a013798 <__aeabi_dsub>
1a015ce6:	4622      	mov	r2, r4
1a015ce8:	462b      	mov	r3, r5
1a015cea:	f7fd ff09 	bl	1a013b00 <__aeabi_dmul>
1a015cee:	a33a      	add	r3, pc, #232	; (adr r3, 1a015dd8 <__ieee754_acos+0x458>)
1a015cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015cf4:	f7fd fd52 	bl	1a01379c <__adddf3>
1a015cf8:	4622      	mov	r2, r4
1a015cfa:	462b      	mov	r3, r5
1a015cfc:	f7fd ff00 	bl	1a013b00 <__aeabi_dmul>
1a015d00:	a337      	add	r3, pc, #220	; (adr r3, 1a015de0 <__ieee754_acos+0x460>)
1a015d02:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015d06:	f7fd fd47 	bl	1a013798 <__aeabi_dsub>
1a015d0a:	4622      	mov	r2, r4
1a015d0c:	462b      	mov	r3, r5
1a015d0e:	f7fd fef7 	bl	1a013b00 <__aeabi_dmul>
1a015d12:	a335      	add	r3, pc, #212	; (adr r3, 1a015de8 <__ieee754_acos+0x468>)
1a015d14:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015d18:	f7fd fd40 	bl	1a01379c <__adddf3>
1a015d1c:	4622      	mov	r2, r4
1a015d1e:	462b      	mov	r3, r5
1a015d20:	f7fd feee 	bl	1a013b00 <__aeabi_dmul>
1a015d24:	4680      	mov	r8, r0
1a015d26:	4689      	mov	r9, r1
1a015d28:	4620      	mov	r0, r4
1a015d2a:	4629      	mov	r1, r5
1a015d2c:	f000 fd8a 	bl	1a016844 <__ieee754_sqrt>
1a015d30:	a32f      	add	r3, pc, #188	; (adr r3, 1a015df0 <__ieee754_acos+0x470>)
1a015d32:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015d36:	4606      	mov	r6, r0
1a015d38:	460f      	mov	r7, r1
1a015d3a:	4620      	mov	r0, r4
1a015d3c:	4629      	mov	r1, r5
1a015d3e:	f7fd fedf 	bl	1a013b00 <__aeabi_dmul>
1a015d42:	a32d      	add	r3, pc, #180	; (adr r3, 1a015df8 <__ieee754_acos+0x478>)
1a015d44:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015d48:	f7fd fd26 	bl	1a013798 <__aeabi_dsub>
1a015d4c:	4622      	mov	r2, r4
1a015d4e:	462b      	mov	r3, r5
1a015d50:	f7fd fed6 	bl	1a013b00 <__aeabi_dmul>
1a015d54:	a32a      	add	r3, pc, #168	; (adr r3, 1a015e00 <__ieee754_acos+0x480>)
1a015d56:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015d5a:	f7fd fd1f 	bl	1a01379c <__adddf3>
1a015d5e:	4622      	mov	r2, r4
1a015d60:	462b      	mov	r3, r5
1a015d62:	f7fd fecd 	bl	1a013b00 <__aeabi_dmul>
1a015d66:	a328      	add	r3, pc, #160	; (adr r3, 1a015e08 <__ieee754_acos+0x488>)
1a015d68:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015d6c:	f7fd fd14 	bl	1a013798 <__aeabi_dsub>
1a015d70:	4622      	mov	r2, r4
1a015d72:	462b      	mov	r3, r5
1a015d74:	f7fd fec4 	bl	1a013b00 <__aeabi_dmul>
1a015d78:	2200      	movs	r2, #0
1a015d7a:	4b29      	ldr	r3, [pc, #164]	; (1a015e20 <__ieee754_acos+0x4a0>)
1a015d7c:	f7fd fd0e 	bl	1a01379c <__adddf3>
1a015d80:	4602      	mov	r2, r0
1a015d82:	460b      	mov	r3, r1
1a015d84:	4640      	mov	r0, r8
1a015d86:	4649      	mov	r1, r9
1a015d88:	f7fd ffe4 	bl	1a013d54 <__aeabi_ddiv>
1a015d8c:	4632      	mov	r2, r6
1a015d8e:	463b      	mov	r3, r7
1a015d90:	f7fd feb6 	bl	1a013b00 <__aeabi_dmul>
1a015d94:	a31e      	add	r3, pc, #120	; (adr r3, 1a015e10 <__ieee754_acos+0x490>)
1a015d96:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015d9a:	f7fd fcfd 	bl	1a013798 <__aeabi_dsub>
1a015d9e:	4632      	mov	r2, r6
1a015da0:	463b      	mov	r3, r7
1a015da2:	f7fd fcfb 	bl	1a01379c <__adddf3>
1a015da6:	4602      	mov	r2, r0
1a015da8:	460b      	mov	r3, r1
1a015daa:	f7fd fcf7 	bl	1a01379c <__adddf3>
1a015dae:	4602      	mov	r2, r0
1a015db0:	460b      	mov	r3, r1
1a015db2:	a119      	add	r1, pc, #100	; (adr r1, 1a015e18 <__ieee754_acos+0x498>)
1a015db4:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015db8:	f7fd fcee 	bl	1a013798 <__aeabi_dsub>
1a015dbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015dc0:	0dfdf709 	.word	0x0dfdf709
1a015dc4:	3f023de1 	.word	0x3f023de1
1a015dc8:	7501b288 	.word	0x7501b288
1a015dcc:	3f49efe0 	.word	0x3f49efe0
1a015dd0:	b5688f3b 	.word	0xb5688f3b
1a015dd4:	3fa48228 	.word	0x3fa48228
1a015dd8:	0e884455 	.word	0x0e884455
1a015ddc:	3fc9c155 	.word	0x3fc9c155
1a015de0:	03eb6f7d 	.word	0x03eb6f7d
1a015de4:	3fd4d612 	.word	0x3fd4d612
1a015de8:	55555555 	.word	0x55555555
1a015dec:	3fc55555 	.word	0x3fc55555
1a015df0:	b12e9282 	.word	0xb12e9282
1a015df4:	3fb3b8c5 	.word	0x3fb3b8c5
1a015df8:	1b8d0159 	.word	0x1b8d0159
1a015dfc:	3fe6066c 	.word	0x3fe6066c
1a015e00:	9c598ac8 	.word	0x9c598ac8
1a015e04:	40002ae5 	.word	0x40002ae5
1a015e08:	1c8a2d4b 	.word	0x1c8a2d4b
1a015e0c:	40033a27 	.word	0x40033a27
1a015e10:	33145c07 	.word	0x33145c07
1a015e14:	3c91a626 	.word	0x3c91a626
1a015e18:	54442d18 	.word	0x54442d18
1a015e1c:	400921fb 	.word	0x400921fb
1a015e20:	3ff00000 	.word	0x3ff00000
1a015e24:	3fe00000 	.word	0x3fe00000

1a015e28 <__ieee754_atan2>:
1a015e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a015e2c:	461d      	mov	r5, r3
1a015e2e:	4253      	negs	r3, r2
1a015e30:	4313      	orrs	r3, r2
1a015e32:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
1a015e36:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 1a016018 <__ieee754_atan2+0x1f0>
1a015e3a:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
1a015e3e:	4573      	cmp	r3, lr
1a015e40:	4614      	mov	r4, r2
1a015e42:	4606      	mov	r6, r0
1a015e44:	460f      	mov	r7, r1
1a015e46:	d847      	bhi.n	1a015ed8 <__ieee754_atan2+0xb0>
1a015e48:	f1c0 0800 	rsb	r8, r0, #0
1a015e4c:	ea48 0800 	orr.w	r8, r8, r0
1a015e50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a015e54:	ea43 78d8 	orr.w	r8, r3, r8, lsr #31
1a015e58:	45f0      	cmp	r8, lr
1a015e5a:	468b      	mov	fp, r1
1a015e5c:	d83c      	bhi.n	1a015ed8 <__ieee754_atan2+0xb0>
1a015e5e:	f105 4840 	add.w	r8, r5, #3221225472	; 0xc0000000
1a015e62:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
1a015e66:	ea58 0802 	orrs.w	r8, r8, r2
1a015e6a:	d050      	beq.n	1a015f0e <__ieee754_atan2+0xe6>
1a015e6c:	ea4f 78a5 	mov.w	r8, r5, asr #30
1a015e70:	f008 0802 	and.w	r8, r8, #2
1a015e74:	ea48 78d1 	orr.w	r8, r8, r1, lsr #31
1a015e78:	ea50 0103 	orrs.w	r1, r0, r3
1a015e7c:	d034      	beq.n	1a015ee8 <__ieee754_atan2+0xc0>
1a015e7e:	ea52 020a 	orrs.w	r2, r2, sl
1a015e82:	d03c      	beq.n	1a015efe <__ieee754_atan2+0xd6>
1a015e84:	45f2      	cmp	sl, lr
1a015e86:	d057      	beq.n	1a015f38 <__ieee754_atan2+0x110>
1a015e88:	4573      	cmp	r3, lr
1a015e8a:	d038      	beq.n	1a015efe <__ieee754_atan2+0xd6>
1a015e8c:	ebca 0303 	rsb	r3, sl, r3
1a015e90:	151b      	asrs	r3, r3, #20
1a015e92:	2b3c      	cmp	r3, #60	; 0x3c
1a015e94:	dc42      	bgt.n	1a015f1c <__ieee754_atan2+0xf4>
1a015e96:	2d00      	cmp	r5, #0
1a015e98:	db70      	blt.n	1a015f7c <__ieee754_atan2+0x154>
1a015e9a:	4622      	mov	r2, r4
1a015e9c:	462b      	mov	r3, r5
1a015e9e:	4630      	mov	r0, r6
1a015ea0:	4639      	mov	r1, r7
1a015ea2:	f7fd ff57 	bl	1a013d54 <__aeabi_ddiv>
1a015ea6:	f7ff fa17 	bl	1a0152d8 <fabs>
1a015eaa:	f7ff f82d 	bl	1a014f08 <atan>
1a015eae:	f1b8 0f01 	cmp.w	r8, #1
1a015eb2:	d05f      	beq.n	1a015f74 <__ieee754_atan2+0x14c>
1a015eb4:	f1b8 0f02 	cmp.w	r8, #2
1a015eb8:	d04e      	beq.n	1a015f58 <__ieee754_atan2+0x130>
1a015eba:	f1b8 0f00 	cmp.w	r8, #0
1a015ebe:	d062      	beq.n	1a015f86 <__ieee754_atan2+0x15e>
1a015ec0:	a343      	add	r3, pc, #268	; (adr r3, 1a015fd0 <__ieee754_atan2+0x1a8>)
1a015ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015ec6:	f7fd fc67 	bl	1a013798 <__aeabi_dsub>
1a015eca:	a343      	add	r3, pc, #268	; (adr r3, 1a015fd8 <__ieee754_atan2+0x1b0>)
1a015ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015ed0:	f7fd fc62 	bl	1a013798 <__aeabi_dsub>
1a015ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015ed8:	4632      	mov	r2, r6
1a015eda:	463b      	mov	r3, r7
1a015edc:	4620      	mov	r0, r4
1a015ede:	4629      	mov	r1, r5
1a015ee0:	f7fd fc5c 	bl	1a01379c <__adddf3>
1a015ee4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015ee8:	f1b8 0f02 	cmp.w	r8, #2
1a015eec:	d01a      	beq.n	1a015f24 <__ieee754_atan2+0xfc>
1a015eee:	f1b8 0f03 	cmp.w	r8, #3
1a015ef2:	d110      	bne.n	1a015f16 <__ieee754_atan2+0xee>
1a015ef4:	a13a      	add	r1, pc, #232	; (adr r1, 1a015fe0 <__ieee754_atan2+0x1b8>)
1a015ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015efa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015efe:	f1bb 0f00 	cmp.w	fp, #0
1a015f02:	db14      	blt.n	1a015f2e <__ieee754_atan2+0x106>
1a015f04:	a138      	add	r1, pc, #224	; (adr r1, 1a015fe8 <__ieee754_atan2+0x1c0>)
1a015f06:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015f0e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a015f12:	f7fe bff9 	b.w	1a014f08 <atan>
1a015f16:	4639      	mov	r1, r7
1a015f18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015f1c:	a132      	add	r1, pc, #200	; (adr r1, 1a015fe8 <__ieee754_atan2+0x1c0>)
1a015f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015f22:	e7c4      	b.n	1a015eae <__ieee754_atan2+0x86>
1a015f24:	a12c      	add	r1, pc, #176	; (adr r1, 1a015fd8 <__ieee754_atan2+0x1b0>)
1a015f26:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015f2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015f2e:	a130      	add	r1, pc, #192	; (adr r1, 1a015ff0 <__ieee754_atan2+0x1c8>)
1a015f30:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015f34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015f38:	4553      	cmp	r3, sl
1a015f3a:	d026      	beq.n	1a015f8a <__ieee754_atan2+0x162>
1a015f3c:	f1b8 0f02 	cmp.w	r8, #2
1a015f40:	d0f0      	beq.n	1a015f24 <__ieee754_atan2+0xfc>
1a015f42:	f1b8 0f03 	cmp.w	r8, #3
1a015f46:	d0d5      	beq.n	1a015ef4 <__ieee754_atan2+0xcc>
1a015f48:	f1b8 0f01 	cmp.w	r8, #1
1a015f4c:	f04f 0000 	mov.w	r0, #0
1a015f50:	d029      	beq.n	1a015fa6 <__ieee754_atan2+0x17e>
1a015f52:	2100      	movs	r1, #0
1a015f54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015f58:	a31d      	add	r3, pc, #116	; (adr r3, 1a015fd0 <__ieee754_atan2+0x1a8>)
1a015f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a015f5e:	f7fd fc1b 	bl	1a013798 <__aeabi_dsub>
1a015f62:	4602      	mov	r2, r0
1a015f64:	460b      	mov	r3, r1
1a015f66:	a11c      	add	r1, pc, #112	; (adr r1, 1a015fd8 <__ieee754_atan2+0x1b0>)
1a015f68:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015f6c:	f7fd fc14 	bl	1a013798 <__aeabi_dsub>
1a015f70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015f74:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
1a015f78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015f7c:	333c      	adds	r3, #60	; 0x3c
1a015f7e:	da8c      	bge.n	1a015e9a <__ieee754_atan2+0x72>
1a015f80:	2000      	movs	r0, #0
1a015f82:	2100      	movs	r1, #0
1a015f84:	e793      	b.n	1a015eae <__ieee754_atan2+0x86>
1a015f86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015f8a:	f1b8 0f02 	cmp.w	r8, #2
1a015f8e:	d018      	beq.n	1a015fc2 <__ieee754_atan2+0x19a>
1a015f90:	f1b8 0f03 	cmp.w	r8, #3
1a015f94:	d010      	beq.n	1a015fb8 <__ieee754_atan2+0x190>
1a015f96:	f1b8 0f01 	cmp.w	r8, #1
1a015f9a:	d008      	beq.n	1a015fae <__ieee754_atan2+0x186>
1a015f9c:	a116      	add	r1, pc, #88	; (adr r1, 1a015ff8 <__ieee754_atan2+0x1d0>)
1a015f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015fa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015fa6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
1a015faa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015fae:	a114      	add	r1, pc, #80	; (adr r1, 1a016000 <__ieee754_atan2+0x1d8>)
1a015fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015fb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015fb8:	a113      	add	r1, pc, #76	; (adr r1, 1a016008 <__ieee754_atan2+0x1e0>)
1a015fba:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015fbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015fc2:	a113      	add	r1, pc, #76	; (adr r1, 1a016010 <__ieee754_atan2+0x1e8>)
1a015fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
1a015fc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a015fcc:	f3af 8000 	nop.w
1a015fd0:	33145c07 	.word	0x33145c07
1a015fd4:	3ca1a626 	.word	0x3ca1a626
1a015fd8:	54442d18 	.word	0x54442d18
1a015fdc:	400921fb 	.word	0x400921fb
1a015fe0:	54442d18 	.word	0x54442d18
1a015fe4:	c00921fb 	.word	0xc00921fb
1a015fe8:	54442d18 	.word	0x54442d18
1a015fec:	3ff921fb 	.word	0x3ff921fb
1a015ff0:	54442d18 	.word	0x54442d18
1a015ff4:	bff921fb 	.word	0xbff921fb
1a015ff8:	54442d18 	.word	0x54442d18
1a015ffc:	3fe921fb 	.word	0x3fe921fb
1a016000:	54442d18 	.word	0x54442d18
1a016004:	bfe921fb 	.word	0xbfe921fb
1a016008:	7f3321d2 	.word	0x7f3321d2
1a01600c:	c002d97c 	.word	0xc002d97c
1a016010:	7f3321d2 	.word	0x7f3321d2
1a016014:	4002d97c 	.word	0x4002d97c
1a016018:	7ff00000 	.word	0x7ff00000
1a01601c:	ffffffff 	.word	0xffffffff

1a016020 <__ieee754_log>:
1a016020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a016024:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a016028:	b085      	sub	sp, #20
1a01602a:	4606      	mov	r6, r0
1a01602c:	460f      	mov	r7, r1
1a01602e:	460b      	mov	r3, r1
1a016030:	da5a      	bge.n	1a0160e8 <__ieee754_log+0xc8>
1a016032:	4602      	mov	r2, r0
1a016034:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
1a016038:	4322      	orrs	r2, r4
1a01603a:	f000 80f8 	beq.w	1a01622e <__ieee754_log+0x20e>
1a01603e:	2900      	cmp	r1, #0
1a016040:	f2c0 817a 	blt.w	1a016338 <__ieee754_log+0x318>
1a016044:	2200      	movs	r2, #0
1a016046:	4bd6      	ldr	r3, [pc, #856]	; (1a0163a0 <__ieee754_log+0x380>)
1a016048:	f7fd fd5a 	bl	1a013b00 <__aeabi_dmul>
1a01604c:	460b      	mov	r3, r1
1a01604e:	460f      	mov	r7, r1
1a016050:	49d4      	ldr	r1, [pc, #848]	; (1a0163a4 <__ieee754_log+0x384>)
1a016052:	428b      	cmp	r3, r1
1a016054:	4606      	mov	r6, r0
1a016056:	f06f 0235 	mvn.w	r2, #53	; 0x35
1a01605a:	dc4a      	bgt.n	1a0160f2 <__ieee754_log+0xd2>
1a01605c:	f3c3 0513 	ubfx	r5, r3, #0, #20
1a016060:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
1a016064:	f604 7464 	addw	r4, r4, #3940	; 0xf64
1a016068:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
1a01606c:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
1a016070:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
1a016074:	151b      	asrs	r3, r3, #20
1a016076:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
1a01607a:	ea41 0705 	orr.w	r7, r1, r5
1a01607e:	189c      	adds	r4, r3, r2
1a016080:	4630      	mov	r0, r6
1a016082:	2200      	movs	r2, #0
1a016084:	4bc8      	ldr	r3, [pc, #800]	; (1a0163a8 <__ieee754_log+0x388>)
1a016086:	4639      	mov	r1, r7
1a016088:	eb04 541e 	add.w	r4, r4, lr, lsr #20
1a01608c:	f7fd fb84 	bl	1a013798 <__aeabi_dsub>
1a016090:	1cab      	adds	r3, r5, #2
1a016092:	f3c3 0313 	ubfx	r3, r3, #0, #20
1a016096:	2b02      	cmp	r3, #2
1a016098:	4682      	mov	sl, r0
1a01609a:	468b      	mov	fp, r1
1a01609c:	f04f 0200 	mov.w	r2, #0
1a0160a0:	dc30      	bgt.n	1a016104 <__ieee754_log+0xe4>
1a0160a2:	2300      	movs	r3, #0
1a0160a4:	f7fd ff94 	bl	1a013fd0 <__aeabi_dcmpeq>
1a0160a8:	2800      	cmp	r0, #0
1a0160aa:	f000 80c9 	beq.w	1a016240 <__ieee754_log+0x220>
1a0160ae:	2c00      	cmp	r4, #0
1a0160b0:	f000 814b 	beq.w	1a01634a <__ieee754_log+0x32a>
1a0160b4:	4620      	mov	r0, r4
1a0160b6:	f7fd fcbd 	bl	1a013a34 <__aeabi_i2d>
1a0160ba:	a3a5      	add	r3, pc, #660	; (adr r3, 1a016350 <__ieee754_log+0x330>)
1a0160bc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0160c0:	4606      	mov	r6, r0
1a0160c2:	460f      	mov	r7, r1
1a0160c4:	f7fd fd1c 	bl	1a013b00 <__aeabi_dmul>
1a0160c8:	a3a3      	add	r3, pc, #652	; (adr r3, 1a016358 <__ieee754_log+0x338>)
1a0160ca:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0160ce:	4604      	mov	r4, r0
1a0160d0:	460d      	mov	r5, r1
1a0160d2:	4630      	mov	r0, r6
1a0160d4:	4639      	mov	r1, r7
1a0160d6:	f7fd fd13 	bl	1a013b00 <__aeabi_dmul>
1a0160da:	4602      	mov	r2, r0
1a0160dc:	460b      	mov	r3, r1
1a0160de:	4620      	mov	r0, r4
1a0160e0:	4629      	mov	r1, r5
1a0160e2:	f7fd fb5b 	bl	1a01379c <__adddf3>
1a0160e6:	e00a      	b.n	1a0160fe <__ieee754_log+0xde>
1a0160e8:	49ae      	ldr	r1, [pc, #696]	; (1a0163a4 <__ieee754_log+0x384>)
1a0160ea:	428b      	cmp	r3, r1
1a0160ec:	f04f 0200 	mov.w	r2, #0
1a0160f0:	ddb4      	ble.n	1a01605c <__ieee754_log+0x3c>
1a0160f2:	4632      	mov	r2, r6
1a0160f4:	463b      	mov	r3, r7
1a0160f6:	4630      	mov	r0, r6
1a0160f8:	4639      	mov	r1, r7
1a0160fa:	f7fd fb4f 	bl	1a01379c <__adddf3>
1a0160fe:	b005      	add	sp, #20
1a016100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a016104:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a016108:	f7fd fb48 	bl	1a01379c <__adddf3>
1a01610c:	4602      	mov	r2, r0
1a01610e:	460b      	mov	r3, r1
1a016110:	4650      	mov	r0, sl
1a016112:	4659      	mov	r1, fp
1a016114:	f7fd fe1e 	bl	1a013d54 <__aeabi_ddiv>
1a016118:	4606      	mov	r6, r0
1a01611a:	4620      	mov	r0, r4
1a01611c:	460f      	mov	r7, r1
1a01611e:	f7fd fc89 	bl	1a013a34 <__aeabi_i2d>
1a016122:	4632      	mov	r2, r6
1a016124:	e9cd 0100 	strd	r0, r1, [sp]
1a016128:	463b      	mov	r3, r7
1a01612a:	4630      	mov	r0, r6
1a01612c:	4639      	mov	r1, r7
1a01612e:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a016132:	f7fd fce5 	bl	1a013b00 <__aeabi_dmul>
1a016136:	4602      	mov	r2, r0
1a016138:	460b      	mov	r3, r1
1a01613a:	4680      	mov	r8, r0
1a01613c:	4689      	mov	r9, r1
1a01613e:	f7fd fcdf 	bl	1a013b00 <__aeabi_dmul>
1a016142:	a387      	add	r3, pc, #540	; (adr r3, 1a016360 <__ieee754_log+0x340>)
1a016144:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016148:	4606      	mov	r6, r0
1a01614a:	460f      	mov	r7, r1
1a01614c:	f7fd fcd8 	bl	1a013b00 <__aeabi_dmul>
1a016150:	a385      	add	r3, pc, #532	; (adr r3, 1a016368 <__ieee754_log+0x348>)
1a016152:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016156:	f7fd fb21 	bl	1a01379c <__adddf3>
1a01615a:	4632      	mov	r2, r6
1a01615c:	463b      	mov	r3, r7
1a01615e:	f7fd fccf 	bl	1a013b00 <__aeabi_dmul>
1a016162:	a383      	add	r3, pc, #524	; (adr r3, 1a016370 <__ieee754_log+0x350>)
1a016164:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016168:	f7fd fb18 	bl	1a01379c <__adddf3>
1a01616c:	4632      	mov	r2, r6
1a01616e:	463b      	mov	r3, r7
1a016170:	f7fd fcc6 	bl	1a013b00 <__aeabi_dmul>
1a016174:	a380      	add	r3, pc, #512	; (adr r3, 1a016378 <__ieee754_log+0x358>)
1a016176:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01617a:	f7fd fb0f 	bl	1a01379c <__adddf3>
1a01617e:	4642      	mov	r2, r8
1a016180:	464b      	mov	r3, r9
1a016182:	f7fd fcbd 	bl	1a013b00 <__aeabi_dmul>
1a016186:	a37e      	add	r3, pc, #504	; (adr r3, 1a016380 <__ieee754_log+0x360>)
1a016188:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01618c:	4680      	mov	r8, r0
1a01618e:	4689      	mov	r9, r1
1a016190:	4630      	mov	r0, r6
1a016192:	4639      	mov	r1, r7
1a016194:	f7fd fcb4 	bl	1a013b00 <__aeabi_dmul>
1a016198:	a37b      	add	r3, pc, #492	; (adr r3, 1a016388 <__ieee754_log+0x368>)
1a01619a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01619e:	f7fd fafd 	bl	1a01379c <__adddf3>
1a0161a2:	4632      	mov	r2, r6
1a0161a4:	463b      	mov	r3, r7
1a0161a6:	f7fd fcab 	bl	1a013b00 <__aeabi_dmul>
1a0161aa:	a379      	add	r3, pc, #484	; (adr r3, 1a016390 <__ieee754_log+0x370>)
1a0161ac:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0161b0:	f7fd faf4 	bl	1a01379c <__adddf3>
1a0161b4:	4632      	mov	r2, r6
1a0161b6:	463b      	mov	r3, r7
1a0161b8:	f7fd fca2 	bl	1a013b00 <__aeabi_dmul>
1a0161bc:	460b      	mov	r3, r1
1a0161be:	4602      	mov	r2, r0
1a0161c0:	4649      	mov	r1, r9
1a0161c2:	4640      	mov	r0, r8
1a0161c4:	f7fd faea 	bl	1a01379c <__adddf3>
1a0161c8:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
1a0161cc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
1a0161d0:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
1a0161d4:	3551      	adds	r5, #81	; 0x51
1a0161d6:	431d      	orrs	r5, r3
1a0161d8:	2d00      	cmp	r5, #0
1a0161da:	4680      	mov	r8, r0
1a0161dc:	4689      	mov	r9, r1
1a0161de:	dd56      	ble.n	1a01628e <__ieee754_log+0x26e>
1a0161e0:	2200      	movs	r2, #0
1a0161e2:	4b72      	ldr	r3, [pc, #456]	; (1a0163ac <__ieee754_log+0x38c>)
1a0161e4:	4650      	mov	r0, sl
1a0161e6:	4659      	mov	r1, fp
1a0161e8:	f7fd fc8a 	bl	1a013b00 <__aeabi_dmul>
1a0161ec:	4652      	mov	r2, sl
1a0161ee:	465b      	mov	r3, fp
1a0161f0:	f7fd fc86 	bl	1a013b00 <__aeabi_dmul>
1a0161f4:	4606      	mov	r6, r0
1a0161f6:	460f      	mov	r7, r1
1a0161f8:	2c00      	cmp	r4, #0
1a0161fa:	d168      	bne.n	1a0162ce <__ieee754_log+0x2ae>
1a0161fc:	4632      	mov	r2, r6
1a0161fe:	463b      	mov	r3, r7
1a016200:	4640      	mov	r0, r8
1a016202:	4649      	mov	r1, r9
1a016204:	f7fd faca 	bl	1a01379c <__adddf3>
1a016208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a01620c:	f7fd fc78 	bl	1a013b00 <__aeabi_dmul>
1a016210:	4602      	mov	r2, r0
1a016212:	460b      	mov	r3, r1
1a016214:	4630      	mov	r0, r6
1a016216:	4639      	mov	r1, r7
1a016218:	f7fd fabe 	bl	1a013798 <__aeabi_dsub>
1a01621c:	4602      	mov	r2, r0
1a01621e:	460b      	mov	r3, r1
1a016220:	4650      	mov	r0, sl
1a016222:	4659      	mov	r1, fp
1a016224:	f7fd fab8 	bl	1a013798 <__aeabi_dsub>
1a016228:	b005      	add	sp, #20
1a01622a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a01622e:	2200      	movs	r2, #0
1a016230:	2300      	movs	r3, #0
1a016232:	2000      	movs	r0, #0
1a016234:	495e      	ldr	r1, [pc, #376]	; (1a0163b0 <__ieee754_log+0x390>)
1a016236:	f7fd fd8d 	bl	1a013d54 <__aeabi_ddiv>
1a01623a:	b005      	add	sp, #20
1a01623c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a016240:	a355      	add	r3, pc, #340	; (adr r3, 1a016398 <__ieee754_log+0x378>)
1a016242:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016246:	4650      	mov	r0, sl
1a016248:	4659      	mov	r1, fp
1a01624a:	f7fd fc59 	bl	1a013b00 <__aeabi_dmul>
1a01624e:	4602      	mov	r2, r0
1a016250:	460b      	mov	r3, r1
1a016252:	2000      	movs	r0, #0
1a016254:	4955      	ldr	r1, [pc, #340]	; (1a0163ac <__ieee754_log+0x38c>)
1a016256:	f7fd fa9f 	bl	1a013798 <__aeabi_dsub>
1a01625a:	4652      	mov	r2, sl
1a01625c:	4606      	mov	r6, r0
1a01625e:	460f      	mov	r7, r1
1a016260:	465b      	mov	r3, fp
1a016262:	4650      	mov	r0, sl
1a016264:	4659      	mov	r1, fp
1a016266:	f7fd fc4b 	bl	1a013b00 <__aeabi_dmul>
1a01626a:	4602      	mov	r2, r0
1a01626c:	460b      	mov	r3, r1
1a01626e:	4630      	mov	r0, r6
1a016270:	4639      	mov	r1, r7
1a016272:	f7fd fc45 	bl	1a013b00 <__aeabi_dmul>
1a016276:	4606      	mov	r6, r0
1a016278:	460f      	mov	r7, r1
1a01627a:	2c00      	cmp	r4, #0
1a01627c:	f040 809a 	bne.w	1a0163b4 <__ieee754_log+0x394>
1a016280:	4602      	mov	r2, r0
1a016282:	460b      	mov	r3, r1
1a016284:	4650      	mov	r0, sl
1a016286:	4659      	mov	r1, fp
1a016288:	f7fd fa86 	bl	1a013798 <__aeabi_dsub>
1a01628c:	e737      	b.n	1a0160fe <__ieee754_log+0xde>
1a01628e:	2c00      	cmp	r4, #0
1a016290:	f000 80a4 	beq.w	1a0163dc <__ieee754_log+0x3bc>
1a016294:	a32e      	add	r3, pc, #184	; (adr r3, 1a016350 <__ieee754_log+0x330>)
1a016296:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01629a:	e9dd 0100 	ldrd	r0, r1, [sp]
1a01629e:	f7fd fc2f 	bl	1a013b00 <__aeabi_dmul>
1a0162a2:	4642      	mov	r2, r8
1a0162a4:	464b      	mov	r3, r9
1a0162a6:	4604      	mov	r4, r0
1a0162a8:	460d      	mov	r5, r1
1a0162aa:	4650      	mov	r0, sl
1a0162ac:	4659      	mov	r1, fp
1a0162ae:	f7fd fa73 	bl	1a013798 <__aeabi_dsub>
1a0162b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0162b6:	f7fd fc23 	bl	1a013b00 <__aeabi_dmul>
1a0162ba:	a327      	add	r3, pc, #156	; (adr r3, 1a016358 <__ieee754_log+0x338>)
1a0162bc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0162c0:	4606      	mov	r6, r0
1a0162c2:	460f      	mov	r7, r1
1a0162c4:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0162c8:	f7fd fc1a 	bl	1a013b00 <__aeabi_dmul>
1a0162cc:	e021      	b.n	1a016312 <__ieee754_log+0x2f2>
1a0162ce:	a320      	add	r3, pc, #128	; (adr r3, 1a016350 <__ieee754_log+0x330>)
1a0162d0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0162d4:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0162d8:	f7fd fc12 	bl	1a013b00 <__aeabi_dmul>
1a0162dc:	4632      	mov	r2, r6
1a0162de:	463b      	mov	r3, r7
1a0162e0:	4604      	mov	r4, r0
1a0162e2:	460d      	mov	r5, r1
1a0162e4:	4640      	mov	r0, r8
1a0162e6:	4649      	mov	r1, r9
1a0162e8:	f7fd fa58 	bl	1a01379c <__adddf3>
1a0162ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0162f0:	f7fd fc06 	bl	1a013b00 <__aeabi_dmul>
1a0162f4:	a318      	add	r3, pc, #96	; (adr r3, 1a016358 <__ieee754_log+0x338>)
1a0162f6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0162fa:	4680      	mov	r8, r0
1a0162fc:	4689      	mov	r9, r1
1a0162fe:	e9dd 0100 	ldrd	r0, r1, [sp]
1a016302:	f7fd fbfd 	bl	1a013b00 <__aeabi_dmul>
1a016306:	4602      	mov	r2, r0
1a016308:	460b      	mov	r3, r1
1a01630a:	4640      	mov	r0, r8
1a01630c:	4649      	mov	r1, r9
1a01630e:	f7fd fa45 	bl	1a01379c <__adddf3>
1a016312:	4602      	mov	r2, r0
1a016314:	460b      	mov	r3, r1
1a016316:	4630      	mov	r0, r6
1a016318:	4639      	mov	r1, r7
1a01631a:	f7fd fa3d 	bl	1a013798 <__aeabi_dsub>
1a01631e:	4652      	mov	r2, sl
1a016320:	465b      	mov	r3, fp
1a016322:	f7fd fa39 	bl	1a013798 <__aeabi_dsub>
1a016326:	4602      	mov	r2, r0
1a016328:	460b      	mov	r3, r1
1a01632a:	4620      	mov	r0, r4
1a01632c:	4629      	mov	r1, r5
1a01632e:	f7fd fa33 	bl	1a013798 <__aeabi_dsub>
1a016332:	b005      	add	sp, #20
1a016334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a016338:	4602      	mov	r2, r0
1a01633a:	460b      	mov	r3, r1
1a01633c:	f7fd fa2c 	bl	1a013798 <__aeabi_dsub>
1a016340:	2200      	movs	r2, #0
1a016342:	2300      	movs	r3, #0
1a016344:	f7fd fd06 	bl	1a013d54 <__aeabi_ddiv>
1a016348:	e6d9      	b.n	1a0160fe <__ieee754_log+0xde>
1a01634a:	2000      	movs	r0, #0
1a01634c:	2100      	movs	r1, #0
1a01634e:	e6d6      	b.n	1a0160fe <__ieee754_log+0xde>
1a016350:	fee00000 	.word	0xfee00000
1a016354:	3fe62e42 	.word	0x3fe62e42
1a016358:	35793c76 	.word	0x35793c76
1a01635c:	3dea39ef 	.word	0x3dea39ef
1a016360:	df3e5244 	.word	0xdf3e5244
1a016364:	3fc2f112 	.word	0x3fc2f112
1a016368:	96cb03de 	.word	0x96cb03de
1a01636c:	3fc74664 	.word	0x3fc74664
1a016370:	94229359 	.word	0x94229359
1a016374:	3fd24924 	.word	0x3fd24924
1a016378:	55555593 	.word	0x55555593
1a01637c:	3fe55555 	.word	0x3fe55555
1a016380:	d078c69f 	.word	0xd078c69f
1a016384:	3fc39a09 	.word	0x3fc39a09
1a016388:	1d8e78af 	.word	0x1d8e78af
1a01638c:	3fcc71c5 	.word	0x3fcc71c5
1a016390:	9997fa04 	.word	0x9997fa04
1a016394:	3fd99999 	.word	0x3fd99999
1a016398:	55555555 	.word	0x55555555
1a01639c:	3fd55555 	.word	0x3fd55555
1a0163a0:	43500000 	.word	0x43500000
1a0163a4:	7fefffff 	.word	0x7fefffff
1a0163a8:	3ff00000 	.word	0x3ff00000
1a0163ac:	3fe00000 	.word	0x3fe00000
1a0163b0:	c3500000 	.word	0xc3500000
1a0163b4:	4620      	mov	r0, r4
1a0163b6:	f7fd fb3d 	bl	1a013a34 <__aeabi_i2d>
1a0163ba:	a30f      	add	r3, pc, #60	; (adr r3, 1a0163f8 <__ieee754_log+0x3d8>)
1a0163bc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0163c0:	4680      	mov	r8, r0
1a0163c2:	4689      	mov	r9, r1
1a0163c4:	f7fd fb9c 	bl	1a013b00 <__aeabi_dmul>
1a0163c8:	a30d      	add	r3, pc, #52	; (adr r3, 1a016400 <__ieee754_log+0x3e0>)
1a0163ca:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0163ce:	4604      	mov	r4, r0
1a0163d0:	460d      	mov	r5, r1
1a0163d2:	4640      	mov	r0, r8
1a0163d4:	4649      	mov	r1, r9
1a0163d6:	f7fd fb93 	bl	1a013b00 <__aeabi_dmul>
1a0163da:	e79a      	b.n	1a016312 <__ieee754_log+0x2f2>
1a0163dc:	4602      	mov	r2, r0
1a0163de:	460b      	mov	r3, r1
1a0163e0:	4650      	mov	r0, sl
1a0163e2:	4659      	mov	r1, fp
1a0163e4:	f7fd f9d8 	bl	1a013798 <__aeabi_dsub>
1a0163e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0163ec:	f7fd fb88 	bl	1a013b00 <__aeabi_dmul>
1a0163f0:	e714      	b.n	1a01621c <__ieee754_log+0x1fc>
1a0163f2:	bf00      	nop
1a0163f4:	f3af 8000 	nop.w
1a0163f8:	fee00000 	.word	0xfee00000
1a0163fc:	3fe62e42 	.word	0x3fe62e42
1a016400:	35793c76 	.word	0x35793c76
1a016404:	3dea39ef 	.word	0x3dea39ef

1a016408 <__ieee754_rem_pio2>:
1a016408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a01640c:	4b94      	ldr	r3, [pc, #592]	; (1a016660 <__ieee754_rem_pio2+0x258>)
1a01640e:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
1a016412:	459b      	cmp	fp, r3
1a016414:	b08f      	sub	sp, #60	; 0x3c
1a016416:	4606      	mov	r6, r0
1a016418:	460f      	mov	r7, r1
1a01641a:	f340 8082 	ble.w	1a016522 <__ieee754_rem_pio2+0x11a>
1a01641e:	4b91      	ldr	r3, [pc, #580]	; (1a016664 <__ieee754_rem_pio2+0x25c>)
1a016420:	459b      	cmp	fp, r3
1a016422:	460c      	mov	r4, r1
1a016424:	4692      	mov	sl, r2
1a016426:	dc26      	bgt.n	1a016476 <__ieee754_rem_pio2+0x6e>
1a016428:	2900      	cmp	r1, #0
1a01642a:	a383      	add	r3, pc, #524	; (adr r3, 1a016638 <__ieee754_rem_pio2+0x230>)
1a01642c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016430:	f340 81a0 	ble.w	1a016774 <__ieee754_rem_pio2+0x36c>
1a016434:	f7fd f9b0 	bl	1a013798 <__aeabi_dsub>
1a016438:	4b8b      	ldr	r3, [pc, #556]	; (1a016668 <__ieee754_rem_pio2+0x260>)
1a01643a:	459b      	cmp	fp, r3
1a01643c:	4604      	mov	r4, r0
1a01643e:	460d      	mov	r5, r1
1a016440:	f000 8084 	beq.w	1a01654c <__ieee754_rem_pio2+0x144>
1a016444:	a37e      	add	r3, pc, #504	; (adr r3, 1a016640 <__ieee754_rem_pio2+0x238>)
1a016446:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01644a:	f7fd f9a5 	bl	1a013798 <__aeabi_dsub>
1a01644e:	4602      	mov	r2, r0
1a016450:	460b      	mov	r3, r1
1a016452:	e9ca 2300 	strd	r2, r3, [sl]
1a016456:	4620      	mov	r0, r4
1a016458:	4629      	mov	r1, r5
1a01645a:	f7fd f99d 	bl	1a013798 <__aeabi_dsub>
1a01645e:	a378      	add	r3, pc, #480	; (adr r3, 1a016640 <__ieee754_rem_pio2+0x238>)
1a016460:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016464:	f7fd f998 	bl	1a013798 <__aeabi_dsub>
1a016468:	2501      	movs	r5, #1
1a01646a:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a01646e:	4628      	mov	r0, r5
1a016470:	b00f      	add	sp, #60	; 0x3c
1a016472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a016476:	4b7d      	ldr	r3, [pc, #500]	; (1a01666c <__ieee754_rem_pio2+0x264>)
1a016478:	459b      	cmp	fp, r3
1a01647a:	f340 8084 	ble.w	1a016586 <__ieee754_rem_pio2+0x17e>
1a01647e:	4b7c      	ldr	r3, [pc, #496]	; (1a016670 <__ieee754_rem_pio2+0x268>)
1a016480:	459b      	cmp	fp, r3
1a016482:	dc59      	bgt.n	1a016538 <__ieee754_rem_pio2+0x130>
1a016484:	ea4f 552b 	mov.w	r5, fp, asr #20
1a016488:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
1a01648c:	ebab 5705 	sub.w	r7, fp, r5, lsl #20
1a016490:	4639      	mov	r1, r7
1a016492:	4606      	mov	r6, r0
1a016494:	f7fd fdce 	bl	1a014034 <__aeabi_d2iz>
1a016498:	f7fd facc 	bl	1a013a34 <__aeabi_i2d>
1a01649c:	4680      	mov	r8, r0
1a01649e:	4689      	mov	r9, r1
1a0164a0:	4642      	mov	r2, r8
1a0164a2:	464b      	mov	r3, r9
1a0164a4:	4630      	mov	r0, r6
1a0164a6:	4639      	mov	r1, r7
1a0164a8:	e9cd 8908 	strd	r8, r9, [sp, #32]
1a0164ac:	f7fd f974 	bl	1a013798 <__aeabi_dsub>
1a0164b0:	2200      	movs	r2, #0
1a0164b2:	4b70      	ldr	r3, [pc, #448]	; (1a016674 <__ieee754_rem_pio2+0x26c>)
1a0164b4:	f7fd fb24 	bl	1a013b00 <__aeabi_dmul>
1a0164b8:	4689      	mov	r9, r1
1a0164ba:	4680      	mov	r8, r0
1a0164bc:	f7fd fdba 	bl	1a014034 <__aeabi_d2iz>
1a0164c0:	f7fd fab8 	bl	1a013a34 <__aeabi_i2d>
1a0164c4:	4606      	mov	r6, r0
1a0164c6:	460f      	mov	r7, r1
1a0164c8:	4632      	mov	r2, r6
1a0164ca:	463b      	mov	r3, r7
1a0164cc:	4640      	mov	r0, r8
1a0164ce:	4649      	mov	r1, r9
1a0164d0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
1a0164d4:	f7fd f960 	bl	1a013798 <__aeabi_dsub>
1a0164d8:	2200      	movs	r2, #0
1a0164da:	4b66      	ldr	r3, [pc, #408]	; (1a016674 <__ieee754_rem_pio2+0x26c>)
1a0164dc:	f7fd fb10 	bl	1a013b00 <__aeabi_dmul>
1a0164e0:	2200      	movs	r2, #0
1a0164e2:	2300      	movs	r3, #0
1a0164e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a0164e8:	f7fd fd72 	bl	1a013fd0 <__aeabi_dcmpeq>
1a0164ec:	2800      	cmp	r0, #0
1a0164ee:	f000 816d 	beq.w	1a0167cc <__ieee754_rem_pio2+0x3c4>
1a0164f2:	2300      	movs	r3, #0
1a0164f4:	4630      	mov	r0, r6
1a0164f6:	4639      	mov	r1, r7
1a0164f8:	2200      	movs	r2, #0
1a0164fa:	f7fd fd69 	bl	1a013fd0 <__aeabi_dcmpeq>
1a0164fe:	2800      	cmp	r0, #0
1a016500:	bf14      	ite	ne
1a016502:	2301      	movne	r3, #1
1a016504:	2302      	moveq	r3, #2
1a016506:	4a5c      	ldr	r2, [pc, #368]	; (1a016678 <__ieee754_rem_pio2+0x270>)
1a016508:	9201      	str	r2, [sp, #4]
1a01650a:	2102      	movs	r1, #2
1a01650c:	9100      	str	r1, [sp, #0]
1a01650e:	462a      	mov	r2, r5
1a016510:	4651      	mov	r1, sl
1a016512:	a808      	add	r0, sp, #32
1a016514:	f000 ff10 	bl	1a017338 <__kernel_rem_pio2>
1a016518:	2c00      	cmp	r4, #0
1a01651a:	f2c0 8149 	blt.w	1a0167b0 <__ieee754_rem_pio2+0x3a8>
1a01651e:	4605      	mov	r5, r0
1a016520:	e006      	b.n	1a016530 <__ieee754_rem_pio2+0x128>
1a016522:	2000      	movs	r0, #0
1a016524:	2100      	movs	r1, #0
1a016526:	e9c2 6700 	strd	r6, r7, [r2]
1a01652a:	e9c2 0102 	strd	r0, r1, [r2, #8]
1a01652e:	2500      	movs	r5, #0
1a016530:	4628      	mov	r0, r5
1a016532:	b00f      	add	sp, #60	; 0x3c
1a016534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a016538:	4602      	mov	r2, r0
1a01653a:	460b      	mov	r3, r1
1a01653c:	f7fd f92c 	bl	1a013798 <__aeabi_dsub>
1a016540:	2500      	movs	r5, #0
1a016542:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a016546:	e9ca 0100 	strd	r0, r1, [sl]
1a01654a:	e7f1      	b.n	1a016530 <__ieee754_rem_pio2+0x128>
1a01654c:	a33e      	add	r3, pc, #248	; (adr r3, 1a016648 <__ieee754_rem_pio2+0x240>)
1a01654e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016552:	f7fd f921 	bl	1a013798 <__aeabi_dsub>
1a016556:	a33e      	add	r3, pc, #248	; (adr r3, 1a016650 <__ieee754_rem_pio2+0x248>)
1a016558:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01655c:	460d      	mov	r5, r1
1a01655e:	4604      	mov	r4, r0
1a016560:	f7fd f91a 	bl	1a013798 <__aeabi_dsub>
1a016564:	4602      	mov	r2, r0
1a016566:	460b      	mov	r3, r1
1a016568:	e9ca 2300 	strd	r2, r3, [sl]
1a01656c:	4629      	mov	r1, r5
1a01656e:	4620      	mov	r0, r4
1a016570:	f7fd f912 	bl	1a013798 <__aeabi_dsub>
1a016574:	a336      	add	r3, pc, #216	; (adr r3, 1a016650 <__ieee754_rem_pio2+0x248>)
1a016576:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01657a:	f7fd f90d 	bl	1a013798 <__aeabi_dsub>
1a01657e:	2501      	movs	r5, #1
1a016580:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a016584:	e7d4      	b.n	1a016530 <__ieee754_rem_pio2+0x128>
1a016586:	f7fe fea7 	bl	1a0152d8 <fabs>
1a01658a:	a333      	add	r3, pc, #204	; (adr r3, 1a016658 <__ieee754_rem_pio2+0x250>)
1a01658c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016590:	4606      	mov	r6, r0
1a016592:	460f      	mov	r7, r1
1a016594:	f7fd fab4 	bl	1a013b00 <__aeabi_dmul>
1a016598:	2200      	movs	r2, #0
1a01659a:	4b38      	ldr	r3, [pc, #224]	; (1a01667c <__ieee754_rem_pio2+0x274>)
1a01659c:	f7fd f8fe 	bl	1a01379c <__adddf3>
1a0165a0:	f7fd fd48 	bl	1a014034 <__aeabi_d2iz>
1a0165a4:	4605      	mov	r5, r0
1a0165a6:	f7fd fa45 	bl	1a013a34 <__aeabi_i2d>
1a0165aa:	a323      	add	r3, pc, #140	; (adr r3, 1a016638 <__ieee754_rem_pio2+0x230>)
1a0165ac:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0165b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
1a0165b4:	f7fd faa4 	bl	1a013b00 <__aeabi_dmul>
1a0165b8:	4602      	mov	r2, r0
1a0165ba:	460b      	mov	r3, r1
1a0165bc:	4630      	mov	r0, r6
1a0165be:	4639      	mov	r1, r7
1a0165c0:	f7fd f8ea 	bl	1a013798 <__aeabi_dsub>
1a0165c4:	a31e      	add	r3, pc, #120	; (adr r3, 1a016640 <__ieee754_rem_pio2+0x238>)
1a0165c6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0165ca:	4680      	mov	r8, r0
1a0165cc:	4689      	mov	r9, r1
1a0165ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0165d2:	f7fd fa95 	bl	1a013b00 <__aeabi_dmul>
1a0165d6:	2d1f      	cmp	r5, #31
1a0165d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a0165dc:	dc52      	bgt.n	1a016684 <__ieee754_rem_pio2+0x27c>
1a0165de:	4b28      	ldr	r3, [pc, #160]	; (1a016680 <__ieee754_rem_pio2+0x278>)
1a0165e0:	1e6a      	subs	r2, r5, #1
1a0165e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a0165e6:	459b      	cmp	fp, r3
1a0165e8:	d04c      	beq.n	1a016684 <__ieee754_rem_pio2+0x27c>
1a0165ea:	4602      	mov	r2, r0
1a0165ec:	460b      	mov	r3, r1
1a0165ee:	4640      	mov	r0, r8
1a0165f0:	4649      	mov	r1, r9
1a0165f2:	f7fd f8d1 	bl	1a013798 <__aeabi_dsub>
1a0165f6:	4606      	mov	r6, r0
1a0165f8:	460f      	mov	r7, r1
1a0165fa:	e9ca 6700 	strd	r6, r7, [sl]
1a0165fe:	4632      	mov	r2, r6
1a016600:	463b      	mov	r3, r7
1a016602:	4640      	mov	r0, r8
1a016604:	4649      	mov	r1, r9
1a016606:	f7fd f8c7 	bl	1a013798 <__aeabi_dsub>
1a01660a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a01660e:	f7fd f8c3 	bl	1a013798 <__aeabi_dsub>
1a016612:	2c00      	cmp	r4, #0
1a016614:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a016618:	da8a      	bge.n	1a016530 <__ieee754_rem_pio2+0x128>
1a01661a:	f107 4400 	add.w	r4, r7, #2147483648	; 0x80000000
1a01661e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a016622:	426d      	negs	r5, r5
1a016624:	f8ca 6000 	str.w	r6, [sl]
1a016628:	f8ca 4004 	str.w	r4, [sl, #4]
1a01662c:	f8ca 0008 	str.w	r0, [sl, #8]
1a016630:	f8ca 300c 	str.w	r3, [sl, #12]
1a016634:	e77c      	b.n	1a016530 <__ieee754_rem_pio2+0x128>
1a016636:	bf00      	nop
1a016638:	54400000 	.word	0x54400000
1a01663c:	3ff921fb 	.word	0x3ff921fb
1a016640:	1a626331 	.word	0x1a626331
1a016644:	3dd0b461 	.word	0x3dd0b461
1a016648:	1a600000 	.word	0x1a600000
1a01664c:	3dd0b461 	.word	0x3dd0b461
1a016650:	2e037073 	.word	0x2e037073
1a016654:	3ba3198a 	.word	0x3ba3198a
1a016658:	6dc9c883 	.word	0x6dc9c883
1a01665c:	3fe45f30 	.word	0x3fe45f30
1a016660:	3fe921fb 	.word	0x3fe921fb
1a016664:	4002d97b 	.word	0x4002d97b
1a016668:	3ff921fb 	.word	0x3ff921fb
1a01666c:	413921fb 	.word	0x413921fb
1a016670:	7fefffff 	.word	0x7fefffff
1a016674:	41700000 	.word	0x41700000
1a016678:	1a01ad3c 	.word	0x1a01ad3c
1a01667c:	3fe00000 	.word	0x3fe00000
1a016680:	1a01acbc 	.word	0x1a01acbc
1a016684:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a016688:	4640      	mov	r0, r8
1a01668a:	4649      	mov	r1, r9
1a01668c:	f7fd f884 	bl	1a013798 <__aeabi_dsub>
1a016690:	ea4f 5b2b 	mov.w	fp, fp, asr #20
1a016694:	f3c1 530a 	ubfx	r3, r1, #20, #11
1a016698:	ebc3 030b 	rsb	r3, r3, fp
1a01669c:	4606      	mov	r6, r0
1a01669e:	460f      	mov	r7, r1
1a0166a0:	2b10      	cmp	r3, #16
1a0166a2:	e9ca 6700 	strd	r6, r7, [sl]
1a0166a6:	ddaa      	ble.n	1a0165fe <__ieee754_rem_pio2+0x1f6>
1a0166a8:	a35d      	add	r3, pc, #372	; (adr r3, 1a016820 <__ieee754_rem_pio2+0x418>)
1a0166aa:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0166ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0166b2:	f7fd fa25 	bl	1a013b00 <__aeabi_dmul>
1a0166b6:	4606      	mov	r6, r0
1a0166b8:	460f      	mov	r7, r1
1a0166ba:	4602      	mov	r2, r0
1a0166bc:	460b      	mov	r3, r1
1a0166be:	4640      	mov	r0, r8
1a0166c0:	4649      	mov	r1, r9
1a0166c2:	f7fd f869 	bl	1a013798 <__aeabi_dsub>
1a0166c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a0166ca:	4602      	mov	r2, r0
1a0166cc:	460b      	mov	r3, r1
1a0166ce:	4640      	mov	r0, r8
1a0166d0:	4649      	mov	r1, r9
1a0166d2:	f7fd f861 	bl	1a013798 <__aeabi_dsub>
1a0166d6:	4632      	mov	r2, r6
1a0166d8:	463b      	mov	r3, r7
1a0166da:	f7fd f85d 	bl	1a013798 <__aeabi_dsub>
1a0166de:	a352      	add	r3, pc, #328	; (adr r3, 1a016828 <__ieee754_rem_pio2+0x420>)
1a0166e0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0166e4:	4606      	mov	r6, r0
1a0166e6:	460f      	mov	r7, r1
1a0166e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0166ec:	f7fd fa08 	bl	1a013b00 <__aeabi_dmul>
1a0166f0:	4632      	mov	r2, r6
1a0166f2:	463b      	mov	r3, r7
1a0166f4:	f7fd f850 	bl	1a013798 <__aeabi_dsub>
1a0166f8:	460b      	mov	r3, r1
1a0166fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a0166fe:	4602      	mov	r2, r0
1a016700:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a016704:	f7fd f848 	bl	1a013798 <__aeabi_dsub>
1a016708:	f3c1 530a 	ubfx	r3, r1, #20, #11
1a01670c:	ebc3 0b0b 	rsb	fp, r3, fp
1a016710:	4606      	mov	r6, r0
1a016712:	460f      	mov	r7, r1
1a016714:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
1a016718:	e9ca 6700 	strd	r6, r7, [sl]
1a01671c:	dd76      	ble.n	1a01680c <__ieee754_rem_pio2+0x404>
1a01671e:	a345      	add	r3, pc, #276	; (adr r3, 1a016834 <__ieee754_rem_pio2+0x42c>)
1a016720:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016724:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a016728:	f7fd f9ea 	bl	1a013b00 <__aeabi_dmul>
1a01672c:	4606      	mov	r6, r0
1a01672e:	460f      	mov	r7, r1
1a016730:	4602      	mov	r2, r0
1a016732:	460b      	mov	r3, r1
1a016734:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a016738:	f7fd f82e 	bl	1a013798 <__aeabi_dsub>
1a01673c:	4602      	mov	r2, r0
1a01673e:	460b      	mov	r3, r1
1a016740:	4680      	mov	r8, r0
1a016742:	4689      	mov	r9, r1
1a016744:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a016748:	f7fd f826 	bl	1a013798 <__aeabi_dsub>
1a01674c:	4632      	mov	r2, r6
1a01674e:	463b      	mov	r3, r7
1a016750:	f7fd f822 	bl	1a013798 <__aeabi_dsub>
1a016754:	a339      	add	r3, pc, #228	; (adr r3, 1a01683c <__ieee754_rem_pio2+0x434>)
1a016756:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01675a:	4606      	mov	r6, r0
1a01675c:	460f      	mov	r7, r1
1a01675e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a016762:	f7fd f9cd 	bl	1a013b00 <__aeabi_dmul>
1a016766:	4632      	mov	r2, r6
1a016768:	463b      	mov	r3, r7
1a01676a:	f7fd f815 	bl	1a013798 <__aeabi_dsub>
1a01676e:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a016772:	e73a      	b.n	1a0165ea <__ieee754_rem_pio2+0x1e2>
1a016774:	f7fd f812 	bl	1a01379c <__adddf3>
1a016778:	4b2d      	ldr	r3, [pc, #180]	; (1a016830 <__ieee754_rem_pio2+0x428>)
1a01677a:	459b      	cmp	fp, r3
1a01677c:	4604      	mov	r4, r0
1a01677e:	460d      	mov	r5, r1
1a016780:	d026      	beq.n	1a0167d0 <__ieee754_rem_pio2+0x3c8>
1a016782:	a325      	add	r3, pc, #148	; (adr r3, 1a016818 <__ieee754_rem_pio2+0x410>)
1a016784:	e9d3 2300 	ldrd	r2, r3, [r3]
1a016788:	f7fd f808 	bl	1a01379c <__adddf3>
1a01678c:	4602      	mov	r2, r0
1a01678e:	460b      	mov	r3, r1
1a016790:	e9ca 2300 	strd	r2, r3, [sl]
1a016794:	4629      	mov	r1, r5
1a016796:	4620      	mov	r0, r4
1a016798:	f7fc fffe 	bl	1a013798 <__aeabi_dsub>
1a01679c:	a31e      	add	r3, pc, #120	; (adr r3, 1a016818 <__ieee754_rem_pio2+0x410>)
1a01679e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0167a2:	f7fc fffb 	bl	1a01379c <__adddf3>
1a0167a6:	f04f 35ff 	mov.w	r5, #4294967295
1a0167aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a0167ae:	e6bf      	b.n	1a016530 <__ieee754_rem_pio2+0x128>
1a0167b0:	f8da 2004 	ldr.w	r2, [sl, #4]
1a0167b4:	f8da 300c 	ldr.w	r3, [sl, #12]
1a0167b8:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
1a0167bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
1a0167c0:	4245      	negs	r5, r0
1a0167c2:	f8ca 2004 	str.w	r2, [sl, #4]
1a0167c6:	f8ca 300c 	str.w	r3, [sl, #12]
1a0167ca:	e6b1      	b.n	1a016530 <__ieee754_rem_pio2+0x128>
1a0167cc:	2303      	movs	r3, #3
1a0167ce:	e69a      	b.n	1a016506 <__ieee754_rem_pio2+0xfe>
1a0167d0:	a313      	add	r3, pc, #76	; (adr r3, 1a016820 <__ieee754_rem_pio2+0x418>)
1a0167d2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0167d6:	f7fc ffe1 	bl	1a01379c <__adddf3>
1a0167da:	a313      	add	r3, pc, #76	; (adr r3, 1a016828 <__ieee754_rem_pio2+0x420>)
1a0167dc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0167e0:	460d      	mov	r5, r1
1a0167e2:	4604      	mov	r4, r0
1a0167e4:	f7fc ffda 	bl	1a01379c <__adddf3>
1a0167e8:	4602      	mov	r2, r0
1a0167ea:	460b      	mov	r3, r1
1a0167ec:	e9ca 2300 	strd	r2, r3, [sl]
1a0167f0:	4629      	mov	r1, r5
1a0167f2:	4620      	mov	r0, r4
1a0167f4:	f7fc ffd0 	bl	1a013798 <__aeabi_dsub>
1a0167f8:	a30b      	add	r3, pc, #44	; (adr r3, 1a016828 <__ieee754_rem_pio2+0x420>)
1a0167fa:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0167fe:	f7fc ffcd 	bl	1a01379c <__adddf3>
1a016802:	f04f 35ff 	mov.w	r5, #4294967295
1a016806:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a01680a:	e691      	b.n	1a016530 <__ieee754_rem_pio2+0x128>
1a01680c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
1a016810:	e6f5      	b.n	1a0165fe <__ieee754_rem_pio2+0x1f6>
1a016812:	bf00      	nop
1a016814:	f3af 8000 	nop.w
1a016818:	1a626331 	.word	0x1a626331
1a01681c:	3dd0b461 	.word	0x3dd0b461
1a016820:	1a600000 	.word	0x1a600000
1a016824:	3dd0b461 	.word	0x3dd0b461
1a016828:	2e037073 	.word	0x2e037073
1a01682c:	3ba3198a 	.word	0x3ba3198a
1a016830:	3ff921fb 	.word	0x3ff921fb
1a016834:	2e000000 	.word	0x2e000000
1a016838:	3ba3198a 	.word	0x3ba3198a
1a01683c:	252049c1 	.word	0x252049c1
1a016840:	397b839a 	.word	0x397b839a

1a016844 <__ieee754_sqrt>:
1a016844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a016848:	4e5e      	ldr	r6, [pc, #376]	; (1a0169c4 <__ieee754_sqrt+0x180>)
1a01684a:	46b6      	mov	lr, r6
1a01684c:	400e      	ands	r6, r1
1a01684e:	4576      	cmp	r6, lr
1a016850:	4604      	mov	r4, r0
1a016852:	460d      	mov	r5, r1
1a016854:	f000 8094 	beq.w	1a016980 <__ieee754_sqrt+0x13c>
1a016858:	2900      	cmp	r1, #0
1a01685a:	460b      	mov	r3, r1
1a01685c:	4602      	mov	r2, r0
1a01685e:	dd72      	ble.n	1a016946 <__ieee754_sqrt+0x102>
1a016860:	150f      	asrs	r7, r1, #20
1a016862:	d07d      	beq.n	1a016960 <__ieee754_sqrt+0x11c>
1a016864:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
1a016868:	f3c3 0313 	ubfx	r3, r3, #0, #20
1a01686c:	07f8      	lsls	r0, r7, #31
1a01686e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a016872:	d463      	bmi.n	1a01693c <__ieee754_sqrt+0xf8>
1a016874:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
1a016878:	2600      	movs	r6, #0
1a01687a:	440b      	add	r3, r1
1a01687c:	107f      	asrs	r7, r7, #1
1a01687e:	0052      	lsls	r2, r2, #1
1a016880:	46b6      	mov	lr, r6
1a016882:	2016      	movs	r0, #22
1a016884:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
1a016888:	eb0e 0401 	add.w	r4, lr, r1
1a01688c:	429c      	cmp	r4, r3
1a01688e:	ea4f 75d2 	mov.w	r5, r2, lsr #31
1a016892:	ea4f 0242 	mov.w	r2, r2, lsl #1
1a016896:	dc03      	bgt.n	1a0168a0 <__ieee754_sqrt+0x5c>
1a016898:	1b1b      	subs	r3, r3, r4
1a01689a:	eb04 0e01 	add.w	lr, r4, r1
1a01689e:	440e      	add	r6, r1
1a0168a0:	3801      	subs	r0, #1
1a0168a2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
1a0168a6:	ea4f 0151 	mov.w	r1, r1, lsr #1
1a0168aa:	d1ed      	bne.n	1a016888 <__ieee754_sqrt+0x44>
1a0168ac:	4684      	mov	ip, r0
1a0168ae:	2420      	movs	r4, #32
1a0168b0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
1a0168b4:	e009      	b.n	1a0168ca <__ieee754_sqrt+0x86>
1a0168b6:	d020      	beq.n	1a0168fa <__ieee754_sqrt+0xb6>
1a0168b8:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
1a0168bc:	3c01      	subs	r4, #1
1a0168be:	ea4f 0151 	mov.w	r1, r1, lsr #1
1a0168c2:	442b      	add	r3, r5
1a0168c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
1a0168c8:	d020      	beq.n	1a01690c <__ieee754_sqrt+0xc8>
1a0168ca:	459e      	cmp	lr, r3
1a0168cc:	eb01 050c 	add.w	r5, r1, ip
1a0168d0:	daf1      	bge.n	1a0168b6 <__ieee754_sqrt+0x72>
1a0168d2:	2d00      	cmp	r5, #0
1a0168d4:	eb05 0c01 	add.w	ip, r5, r1
1a0168d8:	db09      	blt.n	1a0168ee <__ieee754_sqrt+0xaa>
1a0168da:	46f0      	mov	r8, lr
1a0168dc:	4295      	cmp	r5, r2
1a0168de:	ebce 0303 	rsb	r3, lr, r3
1a0168e2:	d900      	bls.n	1a0168e6 <__ieee754_sqrt+0xa2>
1a0168e4:	3b01      	subs	r3, #1
1a0168e6:	1b52      	subs	r2, r2, r5
1a0168e8:	4408      	add	r0, r1
1a0168ea:	46c6      	mov	lr, r8
1a0168ec:	e7e4      	b.n	1a0168b8 <__ieee754_sqrt+0x74>
1a0168ee:	f1bc 0f00 	cmp.w	ip, #0
1a0168f2:	dbf2      	blt.n	1a0168da <__ieee754_sqrt+0x96>
1a0168f4:	f10e 0801 	add.w	r8, lr, #1
1a0168f8:	e7f0      	b.n	1a0168dc <__ieee754_sqrt+0x98>
1a0168fa:	4295      	cmp	r5, r2
1a0168fc:	d81c      	bhi.n	1a016938 <__ieee754_sqrt+0xf4>
1a0168fe:	2d00      	cmp	r5, #0
1a016900:	eb05 0c01 	add.w	ip, r5, r1
1a016904:	db48      	blt.n	1a016998 <__ieee754_sqrt+0x154>
1a016906:	4698      	mov	r8, r3
1a016908:	2300      	movs	r3, #0
1a01690a:	e7ec      	b.n	1a0168e6 <__ieee754_sqrt+0xa2>
1a01690c:	4313      	orrs	r3, r2
1a01690e:	d004      	beq.n	1a01691a <__ieee754_sqrt+0xd6>
1a016910:	1c41      	adds	r1, r0, #1
1a016912:	d045      	beq.n	1a0169a0 <__ieee754_sqrt+0x15c>
1a016914:	f000 0401 	and.w	r4, r0, #1
1a016918:	4420      	add	r0, r4
1a01691a:	0844      	lsrs	r4, r0, #1
1a01691c:	1073      	asrs	r3, r6, #1
1a01691e:	07f2      	lsls	r2, r6, #31
1a016920:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
1a016924:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
1a016928:	bf48      	it	mi
1a01692a:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
1a01692e:	eb03 5107 	add.w	r1, r3, r7, lsl #20
1a016932:	4620      	mov	r0, r4
1a016934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a016938:	4673      	mov	r3, lr
1a01693a:	e7bd      	b.n	1a0168b8 <__ieee754_sqrt+0x74>
1a01693c:	005b      	lsls	r3, r3, #1
1a01693e:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
1a016942:	0052      	lsls	r2, r2, #1
1a016944:	e796      	b.n	1a016874 <__ieee754_sqrt+0x30>
1a016946:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
1a01694a:	4306      	orrs	r6, r0
1a01694c:	d022      	beq.n	1a016994 <__ieee754_sqrt+0x150>
1a01694e:	bb71      	cbnz	r1, 1a0169ae <__ieee754_sqrt+0x16a>
1a016950:	460f      	mov	r7, r1
1a016952:	0ad3      	lsrs	r3, r2, #11
1a016954:	3f15      	subs	r7, #21
1a016956:	0552      	lsls	r2, r2, #21
1a016958:	2b00      	cmp	r3, #0
1a01695a:	d0fa      	beq.n	1a016952 <__ieee754_sqrt+0x10e>
1a01695c:	02dd      	lsls	r5, r3, #11
1a01695e:	d421      	bmi.n	1a0169a4 <__ieee754_sqrt+0x160>
1a016960:	2100      	movs	r1, #0
1a016962:	e000      	b.n	1a016966 <__ieee754_sqrt+0x122>
1a016964:	4601      	mov	r1, r0
1a016966:	005b      	lsls	r3, r3, #1
1a016968:	02dc      	lsls	r4, r3, #11
1a01696a:	f101 0001 	add.w	r0, r1, #1
1a01696e:	d5f9      	bpl.n	1a016964 <__ieee754_sqrt+0x120>
1a016970:	f1c0 0420 	rsb	r4, r0, #32
1a016974:	fa22 f404 	lsr.w	r4, r2, r4
1a016978:	4323      	orrs	r3, r4
1a01697a:	1a7f      	subs	r7, r7, r1
1a01697c:	4082      	lsls	r2, r0
1a01697e:	e771      	b.n	1a016864 <__ieee754_sqrt+0x20>
1a016980:	4602      	mov	r2, r0
1a016982:	460b      	mov	r3, r1
1a016984:	f7fd f8bc 	bl	1a013b00 <__aeabi_dmul>
1a016988:	4622      	mov	r2, r4
1a01698a:	462b      	mov	r3, r5
1a01698c:	f7fc ff06 	bl	1a01379c <__adddf3>
1a016990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a016994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a016998:	f1bc 0f00 	cmp.w	ip, #0
1a01699c:	dbb3      	blt.n	1a016906 <__ieee754_sqrt+0xc2>
1a01699e:	e7a9      	b.n	1a0168f4 <__ieee754_sqrt+0xb0>
1a0169a0:	3601      	adds	r6, #1
1a0169a2:	e7bb      	b.n	1a01691c <__ieee754_sqrt+0xd8>
1a0169a4:	2420      	movs	r4, #32
1a0169a6:	f04f 31ff 	mov.w	r1, #4294967295
1a0169aa:	2000      	movs	r0, #0
1a0169ac:	e7e2      	b.n	1a016974 <__ieee754_sqrt+0x130>
1a0169ae:	4602      	mov	r2, r0
1a0169b0:	460b      	mov	r3, r1
1a0169b2:	f7fc fef1 	bl	1a013798 <__aeabi_dsub>
1a0169b6:	4602      	mov	r2, r0
1a0169b8:	460b      	mov	r3, r1
1a0169ba:	f7fd f9cb 	bl	1a013d54 <__aeabi_ddiv>
1a0169be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0169c2:	bf00      	nop
1a0169c4:	7ff00000 	.word	0x7ff00000

1a0169c8 <__ieee754_acosf>:
1a0169c8:	b508      	push	{r3, lr}
1a0169ca:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
1a0169ce:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
1a0169d2:	ed2d 8b02 	vpush	{d8}
1a0169d6:	d018      	beq.n	1a016a0a <__ieee754_acosf+0x42>
1a0169d8:	ee07 0a90 	vmov	s15, r0
1a0169dc:	dc0c      	bgt.n	1a0169f8 <__ieee754_acosf+0x30>
1a0169de:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
1a0169e2:	da1f      	bge.n	1a016a24 <__ieee754_acosf+0x5c>
1a0169e4:	f1b3 5f0c 	cmp.w	r3, #587202560	; 0x23000000
1a0169e8:	dc70      	bgt.n	1a016acc <__ieee754_acosf+0x104>
1a0169ea:	ecbd 8b02 	vpop	{d8}
1a0169ee:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 1a016bdc <__ieee754_acosf+0x214>
1a0169f2:	ee17 0a10 	vmov	r0, s14
1a0169f6:	bd08      	pop	{r3, pc}
1a0169f8:	ee77 7ae7 	vsub.f32	s15, s15, s15
1a0169fc:	ee87 7aa7 	vdiv.f32	s14, s15, s15
1a016a00:	ecbd 8b02 	vpop	{d8}
1a016a04:	ee17 0a10 	vmov	r0, s14
1a016a08:	bd08      	pop	{r3, pc}
1a016a0a:	ecbd 8b02 	vpop	{d8}
1a016a0e:	eddf 7a74 	vldr	s15, [pc, #464]	; 1a016be0 <__ieee754_acosf+0x218>
1a016a12:	ed9f 7a74 	vldr	s14, [pc, #464]	; 1a016be4 <__ieee754_acosf+0x21c>
1a016a16:	2800      	cmp	r0, #0
1a016a18:	bfc8      	it	gt
1a016a1a:	eeb0 7a67 	vmovgt.f32	s14, s15
1a016a1e:	ee17 0a10 	vmov	r0, s14
1a016a22:	bd08      	pop	{r3, pc}
1a016a24:	2800      	cmp	r0, #0
1a016a26:	f2c0 8090 	blt.w	1a016b4a <__ieee754_acosf+0x182>
1a016a2a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
1a016a2e:	ee78 7ae7 	vsub.f32	s15, s17, s15
1a016a32:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
1a016a36:	ee27 8a88 	vmul.f32	s16, s15, s16
1a016a3a:	ee18 0a10 	vmov	r0, s16
1a016a3e:	f000 fafb 	bl	1a017038 <__ieee754_sqrtf>
1a016a42:	ed9f 7a69 	vldr	s14, [pc, #420]	; 1a016be8 <__ieee754_acosf+0x220>
1a016a46:	ed9f 3a69 	vldr	s6, [pc, #420]	; 1a016bec <__ieee754_acosf+0x224>
1a016a4a:	ed9f 4a69 	vldr	s8, [pc, #420]	; 1a016bf0 <__ieee754_acosf+0x228>
1a016a4e:	eddf 2a69 	vldr	s5, [pc, #420]	; 1a016bf4 <__ieee754_acosf+0x22c>
1a016a52:	eddf 3a69 	vldr	s7, [pc, #420]	; 1a016bf8 <__ieee754_acosf+0x230>
1a016a56:	ed9f 5a69 	vldr	s10, [pc, #420]	; 1a016bfc <__ieee754_acosf+0x234>
1a016a5a:	eddf 4a69 	vldr	s9, [pc, #420]	; 1a016c00 <__ieee754_acosf+0x238>
1a016a5e:	ed9f 6a69 	vldr	s12, [pc, #420]	; 1a016c04 <__ieee754_acosf+0x23c>
1a016a62:	eddf 5a69 	vldr	s11, [pc, #420]	; 1a016c08 <__ieee754_acosf+0x240>
1a016a66:	eddf 7a69 	vldr	s15, [pc, #420]	; 1a016c0c <__ieee754_acosf+0x244>
1a016a6a:	eea8 3a07 	vfma.f32	s6, s16, s14
1a016a6e:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
1a016a72:	f023 030f 	bic.w	r3, r3, #15
1a016a76:	eee8 3a22 	vfma.f32	s7, s16, s5
1a016a7a:	eea8 4a03 	vfma.f32	s8, s16, s6
1a016a7e:	eee8 4a23 	vfma.f32	s9, s16, s7
1a016a82:	eea8 5a04 	vfma.f32	s10, s16, s8
1a016a86:	eee8 5a24 	vfma.f32	s11, s16, s9
1a016a8a:	eea8 6a05 	vfma.f32	s12, s16, s10
1a016a8e:	ee07 3a10 	vmov	s14, r3
1a016a92:	eee8 7a06 	vfma.f32	s15, s16, s12
1a016a96:	eeb0 5a48 	vmov.f32	s10, s16
1a016a9a:	eee8 8a25 	vfma.f32	s17, s16, s11
1a016a9e:	ee06 0a90 	vmov	s13, r0
1a016aa2:	eea7 5a47 	vfms.f32	s10, s14, s14
1a016aa6:	ee27 8a88 	vmul.f32	s16, s15, s16
1a016aaa:	ee76 5a87 	vadd.f32	s11, s13, s14
1a016aae:	ee88 6a28 	vdiv.f32	s12, s16, s17
1a016ab2:	ecbd 8b02 	vpop	{d8}
1a016ab6:	eec5 7a25 	vdiv.f32	s15, s10, s11
1a016aba:	eee6 7a86 	vfma.f32	s15, s13, s12
1a016abe:	ee77 7a87 	vadd.f32	s15, s15, s14
1a016ac2:	ee37 7aa7 	vadd.f32	s14, s15, s15
1a016ac6:	ee17 0a10 	vmov	r0, s14
1a016aca:	bd08      	pop	{r3, pc}
1a016acc:	ee67 6aa7 	vmul.f32	s13, s15, s15
1a016ad0:	ed9f 1a45 	vldr	s2, [pc, #276]	; 1a016be8 <__ieee754_acosf+0x220>
1a016ad4:	ed9f 2a45 	vldr	s4, [pc, #276]	; 1a016bec <__ieee754_acosf+0x224>
1a016ad8:	ed9f 3a45 	vldr	s6, [pc, #276]	; 1a016bf0 <__ieee754_acosf+0x228>
1a016adc:	eddf 1a45 	vldr	s3, [pc, #276]	; 1a016bf4 <__ieee754_acosf+0x22c>
1a016ae0:	eddf 2a45 	vldr	s5, [pc, #276]	; 1a016bf8 <__ieee754_acosf+0x230>
1a016ae4:	ed9f 5a45 	vldr	s10, [pc, #276]	; 1a016bfc <__ieee754_acosf+0x234>
1a016ae8:	eddf 3a45 	vldr	s7, [pc, #276]	; 1a016c00 <__ieee754_acosf+0x238>
1a016aec:	ed9f 4a45 	vldr	s8, [pc, #276]	; 1a016c04 <__ieee754_acosf+0x23c>
1a016af0:	eddf 4a45 	vldr	s9, [pc, #276]	; 1a016c08 <__ieee754_acosf+0x240>
1a016af4:	ed9f 6a45 	vldr	s12, [pc, #276]	; 1a016c0c <__ieee754_acosf+0x244>
1a016af8:	eddf 5a45 	vldr	s11, [pc, #276]	; 1a016c10 <__ieee754_acosf+0x248>
1a016afc:	ed9f 7a45 	vldr	s14, [pc, #276]	; 1a016c14 <__ieee754_acosf+0x24c>
1a016b00:	eea6 2a81 	vfma.f32	s4, s13, s2
1a016b04:	ecbd 8b02 	vpop	{d8}
1a016b08:	eea6 3a82 	vfma.f32	s6, s13, s4
1a016b0c:	eee6 2aa1 	vfma.f32	s5, s13, s3
1a016b10:	eea6 5a83 	vfma.f32	s10, s13, s6
1a016b14:	eee6 3aa2 	vfma.f32	s7, s13, s5
1a016b18:	eea6 4a85 	vfma.f32	s8, s13, s10
1a016b1c:	eee6 4aa3 	vfma.f32	s9, s13, s7
1a016b20:	eea6 6a84 	vfma.f32	s12, s13, s8
1a016b24:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
1a016b28:	eea6 5aa4 	vfma.f32	s10, s13, s9
1a016b2c:	ee66 6a26 	vmul.f32	s13, s12, s13
1a016b30:	ee86 6a85 	vdiv.f32	s12, s13, s10
1a016b34:	eef0 6a65 	vmov.f32	s13, s11
1a016b38:	eee7 6ac6 	vfms.f32	s13, s15, s12
1a016b3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a016b40:	ee37 7a67 	vsub.f32	s14, s14, s15
1a016b44:	ee17 0a10 	vmov	r0, s14
1a016b48:	bd08      	pop	{r3, pc}
1a016b4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
1a016b4e:	ee77 7a87 	vadd.f32	s15, s15, s14
1a016b52:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
1a016b56:	ee67 7aa6 	vmul.f32	s15, s15, s13
1a016b5a:	eddf 2a23 	vldr	s5, [pc, #140]	; 1a016be8 <__ieee754_acosf+0x220>
1a016b5e:	eddf 3a23 	vldr	s7, [pc, #140]	; 1a016bec <__ieee754_acosf+0x224>
1a016b62:	eddf 4a23 	vldr	s9, [pc, #140]	; 1a016bf0 <__ieee754_acosf+0x228>
1a016b66:	ed9f 3a23 	vldr	s6, [pc, #140]	; 1a016bf4 <__ieee754_acosf+0x22c>
1a016b6a:	ed9f 4a23 	vldr	s8, [pc, #140]	; 1a016bf8 <__ieee754_acosf+0x230>
1a016b6e:	eddf 5a23 	vldr	s11, [pc, #140]	; 1a016bfc <__ieee754_acosf+0x234>
1a016b72:	ed9f 5a23 	vldr	s10, [pc, #140]	; 1a016c00 <__ieee754_acosf+0x238>
1a016b76:	eddf 6a23 	vldr	s13, [pc, #140]	; 1a016c04 <__ieee754_acosf+0x23c>
1a016b7a:	ed9f 6a23 	vldr	s12, [pc, #140]	; 1a016c08 <__ieee754_acosf+0x240>
1a016b7e:	ed9f 8a23 	vldr	s16, [pc, #140]	; 1a016c0c <__ieee754_acosf+0x244>
1a016b82:	eee7 3aa2 	vfma.f32	s7, s15, s5
1a016b86:	eea7 4a83 	vfma.f32	s8, s15, s6
1a016b8a:	eee7 4aa3 	vfma.f32	s9, s15, s7
1a016b8e:	eea7 5a84 	vfma.f32	s10, s15, s8
1a016b92:	eee7 5aa4 	vfma.f32	s11, s15, s9
1a016b96:	eea7 6a85 	vfma.f32	s12, s15, s10
1a016b9a:	eee7 6aa5 	vfma.f32	s13, s15, s11
1a016b9e:	eea7 7a86 	vfma.f32	s14, s15, s12
1a016ba2:	eea7 8aa6 	vfma.f32	s16, s15, s13
1a016ba6:	eef0 8a47 	vmov.f32	s17, s14
1a016baa:	ee28 8a27 	vmul.f32	s16, s16, s15
1a016bae:	ee17 0a90 	vmov	r0, s15
1a016bb2:	f000 fa41 	bl	1a017038 <__ieee754_sqrtf>
1a016bb6:	eec8 6a28 	vdiv.f32	s13, s16, s17
1a016bba:	ee06 0a10 	vmov	s12, r0
1a016bbe:	ed9f 7a16 	vldr	s14, [pc, #88]	; 1a016c18 <__ieee754_acosf+0x250>
1a016bc2:	eddf 7a16 	vldr	s15, [pc, #88]	; 1a016c1c <__ieee754_acosf+0x254>
1a016bc6:	eea6 7a26 	vfma.f32	s14, s12, s13
1a016bca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
1a016bce:	ee37 7a06 	vadd.f32	s14, s14, s12
1a016bd2:	eee7 7a66 	vfms.f32	s15, s14, s13
1a016bd6:	eeb0 7a67 	vmov.f32	s14, s15
1a016bda:	e711      	b.n	1a016a00 <__ieee754_acosf+0x38>
1a016bdc:	3fc90fdb 	.word	0x3fc90fdb
1a016be0:	00000000 	.word	0x00000000
1a016be4:	40490fdb 	.word	0x40490fdb
1a016be8:	3811ef08 	.word	0x3811ef08
1a016bec:	3a4f7f04 	.word	0x3a4f7f04
1a016bf0:	bd241146 	.word	0xbd241146
1a016bf4:	3d9dc62e 	.word	0x3d9dc62e
1a016bf8:	bf303361 	.word	0xbf303361
1a016bfc:	3e4e0aa8 	.word	0x3e4e0aa8
1a016c00:	4001572d 	.word	0x4001572d
1a016c04:	bea6b090 	.word	0xbea6b090
1a016c08:	c019d139 	.word	0xc019d139
1a016c0c:	3e2aaaab 	.word	0x3e2aaaab
1a016c10:	33a22168 	.word	0x33a22168
1a016c14:	3fc90fda 	.word	0x3fc90fda
1a016c18:	b3a22168 	.word	0xb3a22168
1a016c1c:	40490fda 	.word	0x40490fda

1a016c20 <__ieee754_atan2f>:
1a016c20:	b530      	push	{r4, r5, lr}
1a016c22:	b083      	sub	sp, #12
1a016c24:	ee07 0a90 	vmov	s15, r0
1a016c28:	9101      	str	r1, [sp, #4]
1a016c2a:	9b01      	ldr	r3, [sp, #4]
1a016c2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
1a016c30:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
1a016c34:	dc1a      	bgt.n	1a016c6c <__ieee754_atan2f+0x4c>
1a016c36:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
1a016c3a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
1a016c3e:	4605      	mov	r5, r0
1a016c40:	dc14      	bgt.n	1a016c6c <__ieee754_atan2f+0x4c>
1a016c42:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
1a016c46:	d054      	beq.n	1a016cf2 <__ieee754_atan2f+0xd2>
1a016c48:	179c      	asrs	r4, r3, #30
1a016c4a:	f004 0402 	and.w	r4, r4, #2
1a016c4e:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
1a016c52:	b999      	cbnz	r1, 1a016c7c <__ieee754_atan2f+0x5c>
1a016c54:	2c02      	cmp	r4, #2
1a016c56:	d049      	beq.n	1a016cec <__ieee754_atan2f+0xcc>
1a016c58:	ed9f 7a46 	vldr	s14, [pc, #280]	; 1a016d74 <__ieee754_atan2f+0x154>
1a016c5c:	2c03      	cmp	r4, #3
1a016c5e:	bf08      	it	eq
1a016c60:	eef0 7a47 	vmoveq.f32	s15, s14
1a016c64:	ee17 0a90 	vmov	r0, s15
1a016c68:	b003      	add	sp, #12
1a016c6a:	bd30      	pop	{r4, r5, pc}
1a016c6c:	ed9d 7a01 	vldr	s14, [sp, #4]
1a016c70:	ee77 7a27 	vadd.f32	s15, s14, s15
1a016c74:	ee17 0a90 	vmov	r0, s15
1a016c78:	b003      	add	sp, #12
1a016c7a:	bd30      	pop	{r4, r5, pc}
1a016c7c:	b33a      	cbz	r2, 1a016cce <__ieee754_atan2f+0xae>
1a016c7e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
1a016c82:	d03b      	beq.n	1a016cfc <__ieee754_atan2f+0xdc>
1a016c84:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
1a016c88:	d021      	beq.n	1a016cce <__ieee754_atan2f+0xae>
1a016c8a:	1a8a      	subs	r2, r1, r2
1a016c8c:	15d2      	asrs	r2, r2, #23
1a016c8e:	2a3c      	cmp	r2, #60	; 0x3c
1a016c90:	dc29      	bgt.n	1a016ce6 <__ieee754_atan2f+0xc6>
1a016c92:	2b00      	cmp	r3, #0
1a016c94:	db52      	blt.n	1a016d3c <__ieee754_atan2f+0x11c>
1a016c96:	9801      	ldr	r0, [sp, #4]
1a016c98:	ee06 0a90 	vmov	s13, r0
1a016c9c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
1a016ca0:	ee17 0a10 	vmov	r0, s14
1a016ca4:	f7fe fbf0 	bl	1a015488 <fabsf>
1a016ca8:	f001 fc8c 	bl	1a0185c4 <atanf>
1a016cac:	ee07 0a90 	vmov	s15, r0
1a016cb0:	2c01      	cmp	r4, #1
1a016cb2:	d03c      	beq.n	1a016d2e <__ieee754_atan2f+0x10e>
1a016cb4:	2c02      	cmp	r4, #2
1a016cb6:	d031      	beq.n	1a016d1c <__ieee754_atan2f+0xfc>
1a016cb8:	2c00      	cmp	r4, #0
1a016cba:	d0db      	beq.n	1a016c74 <__ieee754_atan2f+0x54>
1a016cbc:	eddf 6a2e 	vldr	s13, [pc, #184]	; 1a016d78 <__ieee754_atan2f+0x158>
1a016cc0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 1a016d7c <__ieee754_atan2f+0x15c>
1a016cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
1a016cc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a016ccc:	e7d2      	b.n	1a016c74 <__ieee754_atan2f+0x54>
1a016cce:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 1a016d80 <__ieee754_atan2f+0x160>
1a016cd2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 1a016d84 <__ieee754_atan2f+0x164>
1a016cd6:	2d00      	cmp	r5, #0
1a016cd8:	bfb8      	it	lt
1a016cda:	eef0 7a47 	vmovlt.f32	s15, s14
1a016cde:	ee17 0a90 	vmov	r0, s15
1a016ce2:	b003      	add	sp, #12
1a016ce4:	bd30      	pop	{r4, r5, pc}
1a016ce6:	eddf 7a27 	vldr	s15, [pc, #156]	; 1a016d84 <__ieee754_atan2f+0x164>
1a016cea:	e7e1      	b.n	1a016cb0 <__ieee754_atan2f+0x90>
1a016cec:	eddf 7a23 	vldr	s15, [pc, #140]	; 1a016d7c <__ieee754_atan2f+0x15c>
1a016cf0:	e7c0      	b.n	1a016c74 <__ieee754_atan2f+0x54>
1a016cf2:	b003      	add	sp, #12
1a016cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1a016cf8:	f001 bc64 	b.w	1a0185c4 <atanf>
1a016cfc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
1a016d00:	d021      	beq.n	1a016d46 <__ieee754_atan2f+0x126>
1a016d02:	2c02      	cmp	r4, #2
1a016d04:	d0f2      	beq.n	1a016cec <__ieee754_atan2f+0xcc>
1a016d06:	2c03      	cmp	r4, #3
1a016d08:	d02a      	beq.n	1a016d60 <__ieee754_atan2f+0x140>
1a016d0a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 1a016d88 <__ieee754_atan2f+0x168>
1a016d0e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 1a016d8c <__ieee754_atan2f+0x16c>
1a016d12:	2c01      	cmp	r4, #1
1a016d14:	bf18      	it	ne
1a016d16:	eef0 7a47 	vmovne.f32	s15, s14
1a016d1a:	e7ab      	b.n	1a016c74 <__ieee754_atan2f+0x54>
1a016d1c:	eddf 6a16 	vldr	s13, [pc, #88]	; 1a016d78 <__ieee754_atan2f+0x158>
1a016d20:	ed9f 7a16 	vldr	s14, [pc, #88]	; 1a016d7c <__ieee754_atan2f+0x15c>
1a016d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
1a016d28:	ee77 7a67 	vsub.f32	s15, s14, s15
1a016d2c:	e7a2      	b.n	1a016c74 <__ieee754_atan2f+0x54>
1a016d2e:	ee17 3a90 	vmov	r3, s15
1a016d32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
1a016d36:	ee07 3a90 	vmov	s15, r3
1a016d3a:	e79b      	b.n	1a016c74 <__ieee754_atan2f+0x54>
1a016d3c:	323c      	adds	r2, #60	; 0x3c
1a016d3e:	daaa      	bge.n	1a016c96 <__ieee754_atan2f+0x76>
1a016d40:	eddf 7a12 	vldr	s15, [pc, #72]	; 1a016d8c <__ieee754_atan2f+0x16c>
1a016d44:	e7b4      	b.n	1a016cb0 <__ieee754_atan2f+0x90>
1a016d46:	2c02      	cmp	r4, #2
1a016d48:	d010      	beq.n	1a016d6c <__ieee754_atan2f+0x14c>
1a016d4a:	2c03      	cmp	r4, #3
1a016d4c:	d00b      	beq.n	1a016d66 <__ieee754_atan2f+0x146>
1a016d4e:	eddf 7a10 	vldr	s15, [pc, #64]	; 1a016d90 <__ieee754_atan2f+0x170>
1a016d52:	ed9f 7a10 	vldr	s14, [pc, #64]	; 1a016d94 <__ieee754_atan2f+0x174>
1a016d56:	2c01      	cmp	r4, #1
1a016d58:	bf18      	it	ne
1a016d5a:	eef0 7a47 	vmovne.f32	s15, s14
1a016d5e:	e789      	b.n	1a016c74 <__ieee754_atan2f+0x54>
1a016d60:	eddf 7a04 	vldr	s15, [pc, #16]	; 1a016d74 <__ieee754_atan2f+0x154>
1a016d64:	e786      	b.n	1a016c74 <__ieee754_atan2f+0x54>
1a016d66:	eddf 7a0c 	vldr	s15, [pc, #48]	; 1a016d98 <__ieee754_atan2f+0x178>
1a016d6a:	e783      	b.n	1a016c74 <__ieee754_atan2f+0x54>
1a016d6c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 1a016d9c <__ieee754_atan2f+0x17c>
1a016d70:	e780      	b.n	1a016c74 <__ieee754_atan2f+0x54>
1a016d72:	bf00      	nop
1a016d74:	c0490fdb 	.word	0xc0490fdb
1a016d78:	33bbbd2e 	.word	0x33bbbd2e
1a016d7c:	40490fdb 	.word	0x40490fdb
1a016d80:	bfc90fdb 	.word	0xbfc90fdb
1a016d84:	3fc90fdb 	.word	0x3fc90fdb
1a016d88:	80000000 	.word	0x80000000
1a016d8c:	00000000 	.word	0x00000000
1a016d90:	bf490fdb 	.word	0xbf490fdb
1a016d94:	3f490fdb 	.word	0x3f490fdb
1a016d98:	c016cbe4 	.word	0xc016cbe4
1a016d9c:	4016cbe4 	.word	0x4016cbe4

1a016da0 <__ieee754_rem_pio2f>:
1a016da0:	b570      	push	{r4, r5, r6, lr}
1a016da2:	4a97      	ldr	r2, [pc, #604]	; (1a017000 <__ieee754_rem_pio2f+0x260>)
1a016da4:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
1a016da8:	4294      	cmp	r4, r2
1a016daa:	b086      	sub	sp, #24
1a016dac:	dd6a      	ble.n	1a016e84 <__ieee754_rem_pio2f+0xe4>
1a016dae:	4a95      	ldr	r2, [pc, #596]	; (1a017004 <__ieee754_rem_pio2f+0x264>)
1a016db0:	4294      	cmp	r4, r2
1a016db2:	4606      	mov	r6, r0
1a016db4:	dc1c      	bgt.n	1a016df0 <__ieee754_rem_pio2f+0x50>
1a016db6:	2800      	cmp	r0, #0
1a016db8:	eddf 7a93 	vldr	s15, [pc, #588]	; 1a017008 <__ieee754_rem_pio2f+0x268>
1a016dbc:	4a93      	ldr	r2, [pc, #588]	; (1a01700c <__ieee754_rem_pio2f+0x26c>)
1a016dbe:	f024 040f 	bic.w	r4, r4, #15
1a016dc2:	ee07 0a10 	vmov	s14, r0
1a016dc6:	f340 80e3 	ble.w	1a016f90 <__ieee754_rem_pio2f+0x1f0>
1a016dca:	4294      	cmp	r4, r2
1a016dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
1a016dd0:	d068      	beq.n	1a016ea4 <__ieee754_rem_pio2f+0x104>
1a016dd2:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 1a017010 <__ieee754_rem_pio2f+0x270>
1a016dd6:	ee77 6ac7 	vsub.f32	s13, s15, s14
1a016dda:	2001      	movs	r0, #1
1a016ddc:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a016de0:	edc1 6a00 	vstr	s13, [r1]
1a016de4:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a016de8:	edc1 7a01 	vstr	s15, [r1, #4]
1a016dec:	b006      	add	sp, #24
1a016dee:	bd70      	pop	{r4, r5, r6, pc}
1a016df0:	4a88      	ldr	r2, [pc, #544]	; (1a017014 <__ieee754_rem_pio2f+0x274>)
1a016df2:	4294      	cmp	r4, r2
1a016df4:	460d      	mov	r5, r1
1a016df6:	dd67      	ble.n	1a016ec8 <__ieee754_rem_pio2f+0x128>
1a016df8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
1a016dfc:	da48      	bge.n	1a016e90 <__ieee754_rem_pio2f+0xf0>
1a016dfe:	15e2      	asrs	r2, r4, #23
1a016e00:	3a86      	subs	r2, #134	; 0x86
1a016e02:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
1a016e06:	ee07 3a10 	vmov	s14, r3
1a016e0a:	eefd 6ac7 	vcvt.s32.f32	s13, s14
1a016e0e:	eddf 7a82 	vldr	s15, [pc, #520]	; 1a017018 <__ieee754_rem_pio2f+0x278>
1a016e12:	eef8 6ae6 	vcvt.f32.s32	s13, s13
1a016e16:	ee37 7a66 	vsub.f32	s14, s14, s13
1a016e1a:	edcd 6a03 	vstr	s13, [sp, #12]
1a016e1e:	ee27 7a27 	vmul.f32	s14, s14, s15
1a016e22:	eefd 6ac7 	vcvt.s32.f32	s13, s14
1a016e26:	eef8 6ae6 	vcvt.f32.s32	s13, s13
1a016e2a:	ee37 7a66 	vsub.f32	s14, s14, s13
1a016e2e:	edcd 6a04 	vstr	s13, [sp, #16]
1a016e32:	ee67 7a27 	vmul.f32	s15, s14, s15
1a016e36:	eef5 7a40 	vcmp.f32	s15, #0.0
1a016e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a016e3e:	edcd 7a05 	vstr	s15, [sp, #20]
1a016e42:	f040 80b8 	bne.w	1a016fb6 <__ieee754_rem_pio2f+0x216>
1a016e46:	eef5 6a40 	vcmp.f32	s13, #0.0
1a016e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a016e4e:	bf0c      	ite	eq
1a016e50:	2301      	moveq	r3, #1
1a016e52:	2302      	movne	r3, #2
1a016e54:	4971      	ldr	r1, [pc, #452]	; (1a01701c <__ieee754_rem_pio2f+0x27c>)
1a016e56:	9101      	str	r1, [sp, #4]
1a016e58:	2102      	movs	r1, #2
1a016e5a:	9100      	str	r1, [sp, #0]
1a016e5c:	a803      	add	r0, sp, #12
1a016e5e:	4629      	mov	r1, r5
1a016e60:	f000 ffae 	bl	1a017dc0 <__kernel_rem_pio2f>
1a016e64:	2e00      	cmp	r6, #0
1a016e66:	da11      	bge.n	1a016e8c <__ieee754_rem_pio2f+0xec>
1a016e68:	ed95 7a00 	vldr	s14, [r5]
1a016e6c:	edd5 7a01 	vldr	s15, [r5, #4]
1a016e70:	eeb1 7a47 	vneg.f32	s14, s14
1a016e74:	eef1 7a67 	vneg.f32	s15, s15
1a016e78:	4240      	negs	r0, r0
1a016e7a:	ed85 7a00 	vstr	s14, [r5]
1a016e7e:	edc5 7a01 	vstr	s15, [r5, #4]
1a016e82:	e003      	b.n	1a016e8c <__ieee754_rem_pio2f+0xec>
1a016e84:	2200      	movs	r2, #0
1a016e86:	6008      	str	r0, [r1, #0]
1a016e88:	604a      	str	r2, [r1, #4]
1a016e8a:	2000      	movs	r0, #0
1a016e8c:	b006      	add	sp, #24
1a016e8e:	bd70      	pop	{r4, r5, r6, pc}
1a016e90:	ee07 0a90 	vmov	s15, r0
1a016e94:	ee77 7ae7 	vsub.f32	s15, s15, s15
1a016e98:	2000      	movs	r0, #0
1a016e9a:	edc1 7a01 	vstr	s15, [r1, #4]
1a016e9e:	edc1 7a00 	vstr	s15, [r1]
1a016ea2:	e7f3      	b.n	1a016e8c <__ieee754_rem_pio2f+0xec>
1a016ea4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 1a017020 <__ieee754_rem_pio2f+0x280>
1a016ea8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 1a017024 <__ieee754_rem_pio2f+0x284>
1a016eac:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a016eb0:	2001      	movs	r0, #1
1a016eb2:	ee77 6ac7 	vsub.f32	s13, s15, s14
1a016eb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a016eba:	edc1 6a00 	vstr	s13, [r1]
1a016ebe:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a016ec2:	edc1 7a01 	vstr	s15, [r1, #4]
1a016ec6:	e7e1      	b.n	1a016e8c <__ieee754_rem_pio2f+0xec>
1a016ec8:	f7fe fade 	bl	1a015488 <fabsf>
1a016ecc:	ed9f 6a56 	vldr	s12, [pc, #344]	; 1a017028 <__ieee754_rem_pio2f+0x288>
1a016ed0:	ed9f 5a4d 	vldr	s10, [pc, #308]	; 1a017008 <__ieee754_rem_pio2f+0x268>
1a016ed4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 1a017010 <__ieee754_rem_pio2f+0x270>
1a016ed8:	ee07 0a10 	vmov	s14, r0
1a016edc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
1a016ee0:	eee7 7a06 	vfma.f32	s15, s14, s12
1a016ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a016ee8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
1a016eec:	ee17 0a90 	vmov	r0, s15
1a016ef0:	eef1 5a46 	vneg.f32	s11, s12
1a016ef4:	eef0 7a47 	vmov.f32	s15, s14
1a016ef8:	281f      	cmp	r0, #31
1a016efa:	eee5 7a85 	vfma.f32	s15, s11, s10
1a016efe:	ee26 7a26 	vmul.f32	s14, s12, s13
1a016f02:	dc1d      	bgt.n	1a016f40 <__ieee754_rem_pio2f+0x1a0>
1a016f04:	4a49      	ldr	r2, [pc, #292]	; (1a01702c <__ieee754_rem_pio2f+0x28c>)
1a016f06:	1e41      	subs	r1, r0, #1
1a016f08:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
1a016f0c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
1a016f10:	4293      	cmp	r3, r2
1a016f12:	d015      	beq.n	1a016f40 <__ieee754_rem_pio2f+0x1a0>
1a016f14:	ee77 6ac7 	vsub.f32	s13, s15, s14
1a016f18:	edc5 6a00 	vstr	s13, [r5]
1a016f1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a016f20:	2e00      	cmp	r6, #0
1a016f22:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a016f26:	edc5 7a01 	vstr	s15, [r5, #4]
1a016f2a:	daaf      	bge.n	1a016e8c <__ieee754_rem_pio2f+0xec>
1a016f2c:	eef1 6a66 	vneg.f32	s13, s13
1a016f30:	eef1 7a67 	vneg.f32	s15, s15
1a016f34:	edc5 6a00 	vstr	s13, [r5]
1a016f38:	edc5 7a01 	vstr	s15, [r5, #4]
1a016f3c:	4240      	negs	r0, r0
1a016f3e:	e7a5      	b.n	1a016e8c <__ieee754_rem_pio2f+0xec>
1a016f40:	ee77 6ac7 	vsub.f32	s13, s15, s14
1a016f44:	15e4      	asrs	r4, r4, #23
1a016f46:	ee16 3a90 	vmov	r3, s13
1a016f4a:	f3c3 53c7 	ubfx	r3, r3, #23, #8
1a016f4e:	1ae3      	subs	r3, r4, r3
1a016f50:	2b08      	cmp	r3, #8
1a016f52:	dde1      	ble.n	1a016f18 <__ieee754_rem_pio2f+0x178>
1a016f54:	ed9f 7a32 	vldr	s14, [pc, #200]	; 1a017020 <__ieee754_rem_pio2f+0x280>
1a016f58:	eddf 6a32 	vldr	s13, [pc, #200]	; 1a017024 <__ieee754_rem_pio2f+0x284>
1a016f5c:	eeb0 5a67 	vmov.f32	s10, s15
1a016f60:	eea5 5a87 	vfma.f32	s10, s11, s14
1a016f64:	ee77 7ac5 	vsub.f32	s15, s15, s10
1a016f68:	eee5 7a87 	vfma.f32	s15, s11, s14
1a016f6c:	eed6 7a26 	vfnms.f32	s15, s12, s13
1a016f70:	ee75 6a67 	vsub.f32	s13, s10, s15
1a016f74:	eeb0 7a67 	vmov.f32	s14, s15
1a016f78:	ee16 3a90 	vmov	r3, s13
1a016f7c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
1a016f80:	1ae4      	subs	r4, r4, r3
1a016f82:	2c19      	cmp	r4, #25
1a016f84:	dc2c      	bgt.n	1a016fe0 <__ieee754_rem_pio2f+0x240>
1a016f86:	edc5 6a00 	vstr	s13, [r5]
1a016f8a:	eef0 7a45 	vmov.f32	s15, s10
1a016f8e:	e7c5      	b.n	1a016f1c <__ieee754_rem_pio2f+0x17c>
1a016f90:	4294      	cmp	r4, r2
1a016f92:	ee77 7a27 	vadd.f32	s15, s14, s15
1a016f96:	d010      	beq.n	1a016fba <__ieee754_rem_pio2f+0x21a>
1a016f98:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 1a017010 <__ieee754_rem_pio2f+0x270>
1a016f9c:	ee77 6a87 	vadd.f32	s13, s15, s14
1a016fa0:	f04f 30ff 	mov.w	r0, #4294967295
1a016fa4:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a016fa8:	edc1 6a00 	vstr	s13, [r1]
1a016fac:	ee77 7a87 	vadd.f32	s15, s15, s14
1a016fb0:	edc1 7a01 	vstr	s15, [r1, #4]
1a016fb4:	e76a      	b.n	1a016e8c <__ieee754_rem_pio2f+0xec>
1a016fb6:	2303      	movs	r3, #3
1a016fb8:	e74c      	b.n	1a016e54 <__ieee754_rem_pio2f+0xb4>
1a016fba:	eddf 6a19 	vldr	s13, [pc, #100]	; 1a017020 <__ieee754_rem_pio2f+0x280>
1a016fbe:	ed9f 7a19 	vldr	s14, [pc, #100]	; 1a017024 <__ieee754_rem_pio2f+0x284>
1a016fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
1a016fc6:	f04f 30ff 	mov.w	r0, #4294967295
1a016fca:	ee77 6a87 	vadd.f32	s13, s15, s14
1a016fce:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a016fd2:	edc1 6a00 	vstr	s13, [r1]
1a016fd6:	ee77 7a87 	vadd.f32	s15, s15, s14
1a016fda:	edc1 7a01 	vstr	s15, [r1, #4]
1a016fde:	e755      	b.n	1a016e8c <__ieee754_rem_pio2f+0xec>
1a016fe0:	eddf 6a13 	vldr	s13, [pc, #76]	; 1a017030 <__ieee754_rem_pio2f+0x290>
1a016fe4:	eddf 4a13 	vldr	s9, [pc, #76]	; 1a017034 <__ieee754_rem_pio2f+0x294>
1a016fe8:	eef0 7a45 	vmov.f32	s15, s10
1a016fec:	eee5 7aa6 	vfma.f32	s15, s11, s13
1a016ff0:	ee35 7a67 	vsub.f32	s14, s10, s15
1a016ff4:	eea5 7aa6 	vfma.f32	s14, s11, s13
1a016ff8:	ee96 7a24 	vfnms.f32	s14, s12, s9
1a016ffc:	e78a      	b.n	1a016f14 <__ieee754_rem_pio2f+0x174>
1a016ffe:	bf00      	nop
1a017000:	3f490fd8 	.word	0x3f490fd8
1a017004:	4016cbe3 	.word	0x4016cbe3
1a017008:	3fc90f80 	.word	0x3fc90f80
1a01700c:	3fc90fd0 	.word	0x3fc90fd0
1a017010:	37354443 	.word	0x37354443
1a017014:	43490f80 	.word	0x43490f80
1a017018:	43800000 	.word	0x43800000
1a01701c:	1a01aec4 	.word	0x1a01aec4
1a017020:	37354400 	.word	0x37354400
1a017024:	2e85a308 	.word	0x2e85a308
1a017028:	3f22f984 	.word	0x3f22f984
1a01702c:	1a01ae44 	.word	0x1a01ae44
1a017030:	2e85a300 	.word	0x2e85a300
1a017034:	248d3132 	.word	0x248d3132

1a017038 <__ieee754_sqrtf>:
1a017038:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
1a01703c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
1a017040:	b470      	push	{r4, r5, r6}
1a017042:	ee07 0a90 	vmov	s15, r0
1a017046:	d233      	bcs.n	1a0170b0 <__ieee754_sqrtf+0x78>
1a017048:	b372      	cbz	r2, 1a0170a8 <__ieee754_sqrtf+0x70>
1a01704a:	2800      	cmp	r0, #0
1a01704c:	4603      	mov	r3, r0
1a01704e:	db41      	blt.n	1a0170d4 <__ieee754_sqrtf+0x9c>
1a017050:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
1a017054:	ea4f 50e0 	mov.w	r0, r0, asr #23
1a017058:	d330      	bcc.n	1a0170bc <__ieee754_sqrtf+0x84>
1a01705a:	f1a0 027f 	sub.w	r2, r0, #127	; 0x7f
1a01705e:	f3c3 0316 	ubfx	r3, r3, #0, #23
1a017062:	07d1      	lsls	r1, r2, #31
1a017064:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
1a017068:	bf48      	it	mi
1a01706a:	005b      	lslmi	r3, r3, #1
1a01706c:	2400      	movs	r4, #0
1a01706e:	1056      	asrs	r6, r2, #1
1a017070:	005b      	lsls	r3, r3, #1
1a017072:	4625      	mov	r5, r4
1a017074:	2119      	movs	r1, #25
1a017076:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
1a01707a:	18a8      	adds	r0, r5, r2
1a01707c:	4298      	cmp	r0, r3
1a01707e:	dc02      	bgt.n	1a017086 <__ieee754_sqrtf+0x4e>
1a017080:	1a1b      	subs	r3, r3, r0
1a017082:	1885      	adds	r5, r0, r2
1a017084:	4414      	add	r4, r2
1a017086:	3901      	subs	r1, #1
1a017088:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a01708c:	ea4f 0252 	mov.w	r2, r2, lsr #1
1a017090:	d1f3      	bne.n	1a01707a <__ieee754_sqrtf+0x42>
1a017092:	b113      	cbz	r3, 1a01709a <__ieee754_sqrtf+0x62>
1a017094:	f004 0301 	and.w	r3, r4, #1
1a017098:	441c      	add	r4, r3
1a01709a:	1064      	asrs	r4, r4, #1
1a01709c:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
1a0170a0:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
1a0170a4:	ee07 3a90 	vmov	s15, r3
1a0170a8:	ee17 0a90 	vmov	r0, s15
1a0170ac:	bc70      	pop	{r4, r5, r6}
1a0170ae:	4770      	bx	lr
1a0170b0:	eee7 7aa7 	vfma.f32	s15, s15, s15
1a0170b4:	bc70      	pop	{r4, r5, r6}
1a0170b6:	ee17 0a90 	vmov	r0, s15
1a0170ba:	4770      	bx	lr
1a0170bc:	f413 0200 	ands.w	r2, r3, #8388608	; 0x800000
1a0170c0:	d001      	beq.n	1a0170c6 <__ieee754_sqrtf+0x8e>
1a0170c2:	e00c      	b.n	1a0170de <__ieee754_sqrtf+0xa6>
1a0170c4:	460a      	mov	r2, r1
1a0170c6:	005b      	lsls	r3, r3, #1
1a0170c8:	021c      	lsls	r4, r3, #8
1a0170ca:	f102 0101 	add.w	r1, r2, #1
1a0170ce:	d5f9      	bpl.n	1a0170c4 <__ieee754_sqrtf+0x8c>
1a0170d0:	1a80      	subs	r0, r0, r2
1a0170d2:	e7c2      	b.n	1a01705a <__ieee754_sqrtf+0x22>
1a0170d4:	ee37 7ae7 	vsub.f32	s14, s15, s15
1a0170d8:	eec7 7a07 	vdiv.f32	s15, s14, s14
1a0170dc:	e7e4      	b.n	1a0170a8 <__ieee754_sqrtf+0x70>
1a0170de:	f04f 32ff 	mov.w	r2, #4294967295
1a0170e2:	e7f5      	b.n	1a0170d0 <__ieee754_sqrtf+0x98>
1a0170e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0170e8 <__kernel_cos>:
1a0170e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0170ec:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
1a0170f0:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
1a0170f4:	b085      	sub	sp, #20
1a0170f6:	4606      	mov	r6, r0
1a0170f8:	460f      	mov	r7, r1
1a0170fa:	4692      	mov	sl, r2
1a0170fc:	469b      	mov	fp, r3
1a0170fe:	da6b      	bge.n	1a0171d8 <__kernel_cos+0xf0>
1a017100:	f7fc ff98 	bl	1a014034 <__aeabi_d2iz>
1a017104:	2800      	cmp	r0, #0
1a017106:	f000 80ea 	beq.w	1a0172de <__kernel_cos+0x1f6>
1a01710a:	4632      	mov	r2, r6
1a01710c:	463b      	mov	r3, r7
1a01710e:	4630      	mov	r0, r6
1a017110:	4639      	mov	r1, r7
1a017112:	f7fc fcf5 	bl	1a013b00 <__aeabi_dmul>
1a017116:	a374      	add	r3, pc, #464	; (adr r3, 1a0172e8 <__kernel_cos+0x200>)
1a017118:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01711c:	4604      	mov	r4, r0
1a01711e:	460d      	mov	r5, r1
1a017120:	f7fc fcee 	bl	1a013b00 <__aeabi_dmul>
1a017124:	a372      	add	r3, pc, #456	; (adr r3, 1a0172f0 <__kernel_cos+0x208>)
1a017126:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01712a:	f7fc fb37 	bl	1a01379c <__adddf3>
1a01712e:	4622      	mov	r2, r4
1a017130:	462b      	mov	r3, r5
1a017132:	f7fc fce5 	bl	1a013b00 <__aeabi_dmul>
1a017136:	a370      	add	r3, pc, #448	; (adr r3, 1a0172f8 <__kernel_cos+0x210>)
1a017138:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01713c:	f7fc fb2c 	bl	1a013798 <__aeabi_dsub>
1a017140:	4622      	mov	r2, r4
1a017142:	462b      	mov	r3, r5
1a017144:	f7fc fcdc 	bl	1a013b00 <__aeabi_dmul>
1a017148:	a36d      	add	r3, pc, #436	; (adr r3, 1a017300 <__kernel_cos+0x218>)
1a01714a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01714e:	f7fc fb25 	bl	1a01379c <__adddf3>
1a017152:	4622      	mov	r2, r4
1a017154:	462b      	mov	r3, r5
1a017156:	f7fc fcd3 	bl	1a013b00 <__aeabi_dmul>
1a01715a:	a36b      	add	r3, pc, #428	; (adr r3, 1a017308 <__kernel_cos+0x220>)
1a01715c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017160:	f7fc fb1a 	bl	1a013798 <__aeabi_dsub>
1a017164:	4622      	mov	r2, r4
1a017166:	462b      	mov	r3, r5
1a017168:	f7fc fcca 	bl	1a013b00 <__aeabi_dmul>
1a01716c:	a368      	add	r3, pc, #416	; (adr r3, 1a017310 <__kernel_cos+0x228>)
1a01716e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017172:	f7fc fb13 	bl	1a01379c <__adddf3>
1a017176:	4622      	mov	r2, r4
1a017178:	462b      	mov	r3, r5
1a01717a:	f7fc fcc1 	bl	1a013b00 <__aeabi_dmul>
1a01717e:	e9cd 0100 	strd	r0, r1, [sp]
1a017182:	2200      	movs	r2, #0
1a017184:	4b66      	ldr	r3, [pc, #408]	; (1a017320 <__kernel_cos+0x238>)
1a017186:	4620      	mov	r0, r4
1a017188:	4629      	mov	r1, r5
1a01718a:	f7fc fcb9 	bl	1a013b00 <__aeabi_dmul>
1a01718e:	e9dd 2300 	ldrd	r2, r3, [sp]
1a017192:	4680      	mov	r8, r0
1a017194:	4689      	mov	r9, r1
1a017196:	4620      	mov	r0, r4
1a017198:	4629      	mov	r1, r5
1a01719a:	f7fc fcb1 	bl	1a013b00 <__aeabi_dmul>
1a01719e:	4652      	mov	r2, sl
1a0171a0:	4604      	mov	r4, r0
1a0171a2:	460d      	mov	r5, r1
1a0171a4:	465b      	mov	r3, fp
1a0171a6:	4630      	mov	r0, r6
1a0171a8:	4639      	mov	r1, r7
1a0171aa:	f7fc fca9 	bl	1a013b00 <__aeabi_dmul>
1a0171ae:	4602      	mov	r2, r0
1a0171b0:	460b      	mov	r3, r1
1a0171b2:	4620      	mov	r0, r4
1a0171b4:	4629      	mov	r1, r5
1a0171b6:	f7fc faef 	bl	1a013798 <__aeabi_dsub>
1a0171ba:	4602      	mov	r2, r0
1a0171bc:	460b      	mov	r3, r1
1a0171be:	4640      	mov	r0, r8
1a0171c0:	4649      	mov	r1, r9
1a0171c2:	f7fc fae9 	bl	1a013798 <__aeabi_dsub>
1a0171c6:	4602      	mov	r2, r0
1a0171c8:	460b      	mov	r3, r1
1a0171ca:	2000      	movs	r0, #0
1a0171cc:	4955      	ldr	r1, [pc, #340]	; (1a017324 <__kernel_cos+0x23c>)
1a0171ce:	f7fc fae3 	bl	1a013798 <__aeabi_dsub>
1a0171d2:	b005      	add	sp, #20
1a0171d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0171d8:	4602      	mov	r2, r0
1a0171da:	460b      	mov	r3, r1
1a0171dc:	f7fc fc90 	bl	1a013b00 <__aeabi_dmul>
1a0171e0:	a341      	add	r3, pc, #260	; (adr r3, 1a0172e8 <__kernel_cos+0x200>)
1a0171e2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0171e6:	4604      	mov	r4, r0
1a0171e8:	460d      	mov	r5, r1
1a0171ea:	f7fc fc89 	bl	1a013b00 <__aeabi_dmul>
1a0171ee:	a340      	add	r3, pc, #256	; (adr r3, 1a0172f0 <__kernel_cos+0x208>)
1a0171f0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0171f4:	f7fc fad2 	bl	1a01379c <__adddf3>
1a0171f8:	4622      	mov	r2, r4
1a0171fa:	462b      	mov	r3, r5
1a0171fc:	f7fc fc80 	bl	1a013b00 <__aeabi_dmul>
1a017200:	a33d      	add	r3, pc, #244	; (adr r3, 1a0172f8 <__kernel_cos+0x210>)
1a017202:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017206:	f7fc fac7 	bl	1a013798 <__aeabi_dsub>
1a01720a:	4622      	mov	r2, r4
1a01720c:	462b      	mov	r3, r5
1a01720e:	f7fc fc77 	bl	1a013b00 <__aeabi_dmul>
1a017212:	a33b      	add	r3, pc, #236	; (adr r3, 1a017300 <__kernel_cos+0x218>)
1a017214:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017218:	f7fc fac0 	bl	1a01379c <__adddf3>
1a01721c:	4622      	mov	r2, r4
1a01721e:	462b      	mov	r3, r5
1a017220:	f7fc fc6e 	bl	1a013b00 <__aeabi_dmul>
1a017224:	a338      	add	r3, pc, #224	; (adr r3, 1a017308 <__kernel_cos+0x220>)
1a017226:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01722a:	f7fc fab5 	bl	1a013798 <__aeabi_dsub>
1a01722e:	4622      	mov	r2, r4
1a017230:	462b      	mov	r3, r5
1a017232:	f7fc fc65 	bl	1a013b00 <__aeabi_dmul>
1a017236:	a336      	add	r3, pc, #216	; (adr r3, 1a017310 <__kernel_cos+0x228>)
1a017238:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01723c:	f7fc faae 	bl	1a01379c <__adddf3>
1a017240:	462b      	mov	r3, r5
1a017242:	4622      	mov	r2, r4
1a017244:	f7fc fc5c 	bl	1a013b00 <__aeabi_dmul>
1a017248:	4b37      	ldr	r3, [pc, #220]	; (1a017328 <__kernel_cos+0x240>)
1a01724a:	4598      	cmp	r8, r3
1a01724c:	e9cd 0100 	strd	r0, r1, [sp]
1a017250:	dd97      	ble.n	1a017182 <__kernel_cos+0x9a>
1a017252:	4b36      	ldr	r3, [pc, #216]	; (1a01732c <__kernel_cos+0x244>)
1a017254:	4598      	cmp	r8, r3
1a017256:	dc39      	bgt.n	1a0172cc <__kernel_cos+0x1e4>
1a017258:	f5a8 1300 	sub.w	r3, r8, #2097152	; 0x200000
1a01725c:	2200      	movs	r2, #0
1a01725e:	2000      	movs	r0, #0
1a017260:	4930      	ldr	r1, [pc, #192]	; (1a017324 <__kernel_cos+0x23c>)
1a017262:	4690      	mov	r8, r2
1a017264:	4699      	mov	r9, r3
1a017266:	f7fc fa97 	bl	1a013798 <__aeabi_dsub>
1a01726a:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a01726e:	2200      	movs	r2, #0
1a017270:	4b2b      	ldr	r3, [pc, #172]	; (1a017320 <__kernel_cos+0x238>)
1a017272:	4620      	mov	r0, r4
1a017274:	4629      	mov	r1, r5
1a017276:	f7fc fc43 	bl	1a013b00 <__aeabi_dmul>
1a01727a:	4642      	mov	r2, r8
1a01727c:	464b      	mov	r3, r9
1a01727e:	f7fc fa8b 	bl	1a013798 <__aeabi_dsub>
1a017282:	e9dd 2300 	ldrd	r2, r3, [sp]
1a017286:	4680      	mov	r8, r0
1a017288:	4689      	mov	r9, r1
1a01728a:	4620      	mov	r0, r4
1a01728c:	4629      	mov	r1, r5
1a01728e:	f7fc fc37 	bl	1a013b00 <__aeabi_dmul>
1a017292:	4652      	mov	r2, sl
1a017294:	4604      	mov	r4, r0
1a017296:	460d      	mov	r5, r1
1a017298:	465b      	mov	r3, fp
1a01729a:	4630      	mov	r0, r6
1a01729c:	4639      	mov	r1, r7
1a01729e:	f7fc fc2f 	bl	1a013b00 <__aeabi_dmul>
1a0172a2:	4602      	mov	r2, r0
1a0172a4:	460b      	mov	r3, r1
1a0172a6:	4620      	mov	r0, r4
1a0172a8:	4629      	mov	r1, r5
1a0172aa:	f7fc fa75 	bl	1a013798 <__aeabi_dsub>
1a0172ae:	4602      	mov	r2, r0
1a0172b0:	460b      	mov	r3, r1
1a0172b2:	4640      	mov	r0, r8
1a0172b4:	4649      	mov	r1, r9
1a0172b6:	f7fc fa6f 	bl	1a013798 <__aeabi_dsub>
1a0172ba:	4602      	mov	r2, r0
1a0172bc:	460b      	mov	r3, r1
1a0172be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a0172c2:	f7fc fa69 	bl	1a013798 <__aeabi_dsub>
1a0172c6:	b005      	add	sp, #20
1a0172c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0172cc:	ed9f 7b12 	vldr	d7, [pc, #72]	; 1a017318 <__kernel_cos+0x230>
1a0172d0:	f04f 0800 	mov.w	r8, #0
1a0172d4:	ed8d 7b02 	vstr	d7, [sp, #8]
1a0172d8:	f8df 9054 	ldr.w	r9, [pc, #84]	; 1a017330 <__kernel_cos+0x248>
1a0172dc:	e7c7      	b.n	1a01726e <__kernel_cos+0x186>
1a0172de:	4911      	ldr	r1, [pc, #68]	; (1a017324 <__kernel_cos+0x23c>)
1a0172e0:	2000      	movs	r0, #0
1a0172e2:	b005      	add	sp, #20
1a0172e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0172e8:	be8838d4 	.word	0xbe8838d4
1a0172ec:	bda8fae9 	.word	0xbda8fae9
1a0172f0:	bdb4b1c4 	.word	0xbdb4b1c4
1a0172f4:	3e21ee9e 	.word	0x3e21ee9e
1a0172f8:	809c52ad 	.word	0x809c52ad
1a0172fc:	3e927e4f 	.word	0x3e927e4f
1a017300:	19cb1590 	.word	0x19cb1590
1a017304:	3efa01a0 	.word	0x3efa01a0
1a017308:	16c15177 	.word	0x16c15177
1a01730c:	3f56c16c 	.word	0x3f56c16c
1a017310:	5555554c 	.word	0x5555554c
1a017314:	3fa55555 	.word	0x3fa55555
1a017318:	00000000 	.word	0x00000000
1a01731c:	3fe70000 	.word	0x3fe70000
1a017320:	3fe00000 	.word	0x3fe00000
1a017324:	3ff00000 	.word	0x3ff00000
1a017328:	3fd33332 	.word	0x3fd33332
1a01732c:	3fe90000 	.word	0x3fe90000
1a017330:	3fd20000 	.word	0x3fd20000
1a017334:	ffffffff 	.word	0xffffffff

1a017338 <__kernel_rem_pio2>:
1a017338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a01733c:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
1a017340:	4c7d      	ldr	r4, [pc, #500]	; (1a017538 <__kernel_rem_pio2+0x200>)
1a017342:	9ea4      	ldr	r6, [sp, #656]	; 0x290
1a017344:	4d7d      	ldr	r5, [pc, #500]	; (1a01753c <__kernel_rem_pio2+0x204>)
1a017346:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
1a01734a:	9407      	str	r4, [sp, #28]
1a01734c:	4626      	mov	r6, r4
1a01734e:	1ed4      	subs	r4, r2, #3
1a017350:	fb85 7504 	smull	r7, r5, r5, r4
1a017354:	17e4      	asrs	r4, r4, #31
1a017356:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
1a01735a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
1a01735e:	461d      	mov	r5, r3
1a017360:	930a      	str	r3, [sp, #40]	; 0x28
1a017362:	1c63      	adds	r3, r4, #1
1a017364:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
1a017368:	3d01      	subs	r5, #1
1a01736a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a01736e:	9306      	str	r3, [sp, #24]
1a017370:	462b      	mov	r3, r5
1a017372:	940b      	str	r4, [sp, #44]	; 0x2c
1a017374:	9500      	str	r5, [sp, #0]
1a017376:	1b65      	subs	r5, r4, r5
1a017378:	18f4      	adds	r4, r6, r3
1a01737a:	9003      	str	r0, [sp, #12]
1a01737c:	9108      	str	r1, [sp, #32]
1a01737e:	d416      	bmi.n	1a0173ae <__kernel_rem_pio2+0x76>
1a017380:	442c      	add	r4, r5
1a017382:	3401      	adds	r4, #1
1a017384:	ae22      	add	r6, sp, #136	; 0x88
1a017386:	9fa5      	ldr	r7, [sp, #660]	; 0x294
1a017388:	e008      	b.n	1a01739c <__kernel_rem_pio2+0x64>
1a01738a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
1a01738e:	f7fc fb51 	bl	1a013a34 <__aeabi_i2d>
1a017392:	3501      	adds	r5, #1
1a017394:	42a5      	cmp	r5, r4
1a017396:	e8e6 0102 	strd	r0, r1, [r6], #8
1a01739a:	d008      	beq.n	1a0173ae <__kernel_rem_pio2+0x76>
1a01739c:	2d00      	cmp	r5, #0
1a01739e:	daf4      	bge.n	1a01738a <__kernel_rem_pio2+0x52>
1a0173a0:	3501      	adds	r5, #1
1a0173a2:	2000      	movs	r0, #0
1a0173a4:	2100      	movs	r1, #0
1a0173a6:	42a5      	cmp	r5, r4
1a0173a8:	e8e6 0102 	strd	r0, r1, [r6], #8
1a0173ac:	d1f6      	bne.n	1a01739c <__kernel_rem_pio2+0x64>
1a0173ae:	9b07      	ldr	r3, [sp, #28]
1a0173b0:	2b00      	cmp	r3, #0
1a0173b2:	f2c0 83b4 	blt.w	1a017b1e <__kernel_rem_pio2+0x7e6>
1a0173b6:	9b07      	ldr	r3, [sp, #28]
1a0173b8:	f103 0b01 	add.w	fp, r3, #1
1a0173bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0173be:	a922      	add	r1, sp, #136	; 0x88
1a0173c0:	00db      	lsls	r3, r3, #3
1a0173c2:	461a      	mov	r2, r3
1a0173c4:	eb01 0903 	add.w	r9, r1, r3
1a0173c8:	9304      	str	r3, [sp, #16]
1a0173ca:	9b03      	ldr	r3, [sp, #12]
1a0173cc:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
1a0173d0:	4619      	mov	r1, r3
1a0173d2:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
1a0173d6:	eb01 0802 	add.w	r8, r1, r2
1a0173da:	9b00      	ldr	r3, [sp, #0]
1a0173dc:	2b00      	cmp	r3, #0
1a0173de:	f2c0 8187 	blt.w	1a0176f0 <__kernel_rem_pio2+0x3b8>
1a0173e2:	9c03      	ldr	r4, [sp, #12]
1a0173e4:	464d      	mov	r5, r9
1a0173e6:	2600      	movs	r6, #0
1a0173e8:	2700      	movs	r7, #0
1a0173ea:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
1a0173ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
1a0173f2:	f7fc fb85 	bl	1a013b00 <__aeabi_dmul>
1a0173f6:	4602      	mov	r2, r0
1a0173f8:	460b      	mov	r3, r1
1a0173fa:	4630      	mov	r0, r6
1a0173fc:	4639      	mov	r1, r7
1a0173fe:	f7fc f9cd 	bl	1a01379c <__adddf3>
1a017402:	4544      	cmp	r4, r8
1a017404:	4606      	mov	r6, r0
1a017406:	460f      	mov	r7, r1
1a017408:	d1ef      	bne.n	1a0173ea <__kernel_rem_pio2+0xb2>
1a01740a:	e8ea 6702 	strd	r6, r7, [sl], #8
1a01740e:	45da      	cmp	sl, fp
1a017410:	f109 0908 	add.w	r9, r9, #8
1a017414:	d1e1      	bne.n	1a0173da <__kernel_rem_pio2+0xa2>
1a017416:	9907      	ldr	r1, [sp, #28]
1a017418:	9804      	ldr	r0, [sp, #16]
1a01741a:	9c03      	ldr	r4, [sp, #12]
1a01741c:	9104      	str	r1, [sp, #16]
1a01741e:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
1a017422:	3b02      	subs	r3, #2
1a017424:	009b      	lsls	r3, r3, #2
1a017426:	4420      	add	r0, r4
1a017428:	1d1a      	adds	r2, r3, #4
1a01742a:	4683      	mov	fp, r0
1a01742c:	a80e      	add	r0, sp, #56	; 0x38
1a01742e:	4402      	add	r2, r0
1a017430:	4403      	add	r3, r0
1a017432:	920d      	str	r2, [sp, #52]	; 0x34
1a017434:	930c      	str	r3, [sp, #48]	; 0x30
1a017436:	9a04      	ldr	r2, [sp, #16]
1a017438:	a99a      	add	r1, sp, #616	; 0x268
1a01743a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
1a01743e:	2a00      	cmp	r2, #0
1a017440:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
1a017444:	dd29      	ble.n	1a01749a <__kernel_rem_pio2+0x162>
1a017446:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
1a01744a:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
1a01744e:	f10d 0934 	add.w	r9, sp, #52	; 0x34
1a017452:	2200      	movs	r2, #0
1a017454:	4b3a      	ldr	r3, [pc, #232]	; (1a017540 <__kernel_rem_pio2+0x208>)
1a017456:	4620      	mov	r0, r4
1a017458:	4629      	mov	r1, r5
1a01745a:	f7fc fb51 	bl	1a013b00 <__aeabi_dmul>
1a01745e:	f7fc fde9 	bl	1a014034 <__aeabi_d2iz>
1a017462:	f7fc fae7 	bl	1a013a34 <__aeabi_i2d>
1a017466:	2200      	movs	r2, #0
1a017468:	4b36      	ldr	r3, [pc, #216]	; (1a017544 <__kernel_rem_pio2+0x20c>)
1a01746a:	4606      	mov	r6, r0
1a01746c:	460f      	mov	r7, r1
1a01746e:	f7fc fb47 	bl	1a013b00 <__aeabi_dmul>
1a017472:	4602      	mov	r2, r0
1a017474:	460b      	mov	r3, r1
1a017476:	4620      	mov	r0, r4
1a017478:	4629      	mov	r1, r5
1a01747a:	f7fc f98d 	bl	1a013798 <__aeabi_dsub>
1a01747e:	f7fc fdd9 	bl	1a014034 <__aeabi_d2iz>
1a017482:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
1a017486:	f849 0f04 	str.w	r0, [r9, #4]!
1a01748a:	4639      	mov	r1, r7
1a01748c:	4630      	mov	r0, r6
1a01748e:	f7fc f985 	bl	1a01379c <__adddf3>
1a017492:	45d0      	cmp	r8, sl
1a017494:	4604      	mov	r4, r0
1a017496:	460d      	mov	r5, r1
1a017498:	d1db      	bne.n	1a017452 <__kernel_rem_pio2+0x11a>
1a01749a:	f8dd 9018 	ldr.w	r9, [sp, #24]
1a01749e:	4620      	mov	r0, r4
1a0174a0:	4629      	mov	r1, r5
1a0174a2:	464a      	mov	r2, r9
1a0174a4:	f001 f810 	bl	1a0184c8 <scalbn>
1a0174a8:	2200      	movs	r2, #0
1a0174aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a0174ae:	4604      	mov	r4, r0
1a0174b0:	460d      	mov	r5, r1
1a0174b2:	f7fc fb25 	bl	1a013b00 <__aeabi_dmul>
1a0174b6:	f7fd ff13 	bl	1a0152e0 <floor>
1a0174ba:	2200      	movs	r2, #0
1a0174bc:	4b22      	ldr	r3, [pc, #136]	; (1a017548 <__kernel_rem_pio2+0x210>)
1a0174be:	f7fc fb1f 	bl	1a013b00 <__aeabi_dmul>
1a0174c2:	4602      	mov	r2, r0
1a0174c4:	460b      	mov	r3, r1
1a0174c6:	4620      	mov	r0, r4
1a0174c8:	4629      	mov	r1, r5
1a0174ca:	f7fc f965 	bl	1a013798 <__aeabi_dsub>
1a0174ce:	460d      	mov	r5, r1
1a0174d0:	4604      	mov	r4, r0
1a0174d2:	f7fc fdaf 	bl	1a014034 <__aeabi_d2iz>
1a0174d6:	4680      	mov	r8, r0
1a0174d8:	f7fc faac 	bl	1a013a34 <__aeabi_i2d>
1a0174dc:	460b      	mov	r3, r1
1a0174de:	4602      	mov	r2, r0
1a0174e0:	4629      	mov	r1, r5
1a0174e2:	4620      	mov	r0, r4
1a0174e4:	f7fc f958 	bl	1a013798 <__aeabi_dsub>
1a0174e8:	464b      	mov	r3, r9
1a0174ea:	2b00      	cmp	r3, #0
1a0174ec:	4606      	mov	r6, r0
1a0174ee:	460f      	mov	r7, r1
1a0174f0:	f340 80e4 	ble.w	1a0176bc <__kernel_rem_pio2+0x384>
1a0174f4:	9a04      	ldr	r2, [sp, #16]
1a0174f6:	a90e      	add	r1, sp, #56	; 0x38
1a0174f8:	3a01      	subs	r2, #1
1a0174fa:	f1c9 0318 	rsb	r3, r9, #24
1a0174fe:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
1a017502:	fa45 f103 	asr.w	r1, r5, r3
1a017506:	fa01 f303 	lsl.w	r3, r1, r3
1a01750a:	a80e      	add	r0, sp, #56	; 0x38
1a01750c:	1aeb      	subs	r3, r5, r3
1a01750e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
1a017512:	f1c9 0517 	rsb	r5, r9, #23
1a017516:	4488      	add	r8, r1
1a017518:	fa43 f505 	asr.w	r5, r3, r5
1a01751c:	2d00      	cmp	r5, #0
1a01751e:	dd40      	ble.n	1a0175a2 <__kernel_rem_pio2+0x26a>
1a017520:	9b04      	ldr	r3, [sp, #16]
1a017522:	2b00      	cmp	r3, #0
1a017524:	f108 0801 	add.w	r8, r8, #1
1a017528:	f340 82c3 	ble.w	1a017ab2 <__kernel_rem_pio2+0x77a>
1a01752c:	2200      	movs	r2, #0
1a01752e:	4614      	mov	r4, r2
1a017530:	a90d      	add	r1, sp, #52	; 0x34
1a017532:	9804      	ldr	r0, [sp, #16]
1a017534:	46ae      	mov	lr, r5
1a017536:	e011      	b.n	1a01755c <__kernel_rem_pio2+0x224>
1a017538:	1a01b1dc 	.word	0x1a01b1dc
1a01753c:	2aaaaaab 	.word	0x2aaaaaab
1a017540:	3e700000 	.word	0x3e700000
1a017544:	41700000 	.word	0x41700000
1a017548:	40200000 	.word	0x40200000
1a01754c:	f1c3 7580 	rsb	r5, r3, #16777216	; 0x1000000
1a017550:	b10b      	cbz	r3, 1a017556 <__kernel_rem_pio2+0x21e>
1a017552:	600d      	str	r5, [r1, #0]
1a017554:	2401      	movs	r4, #1
1a017556:	3201      	adds	r2, #1
1a017558:	4290      	cmp	r0, r2
1a01755a:	dd0d      	ble.n	1a017578 <__kernel_rem_pio2+0x240>
1a01755c:	f851 3f04 	ldr.w	r3, [r1, #4]!
1a017560:	2c00      	cmp	r4, #0
1a017562:	d0f3      	beq.n	1a01754c <__kernel_rem_pio2+0x214>
1a017564:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
1a017568:	3201      	adds	r2, #1
1a01756a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
1a01756e:	4290      	cmp	r0, r2
1a017570:	600b      	str	r3, [r1, #0]
1a017572:	f04f 0401 	mov.w	r4, #1
1a017576:	dcf1      	bgt.n	1a01755c <__kernel_rem_pio2+0x224>
1a017578:	4675      	mov	r5, lr
1a01757a:	9b06      	ldr	r3, [sp, #24]
1a01757c:	2b00      	cmp	r3, #0
1a01757e:	dd0e      	ble.n	1a01759e <__kernel_rem_pio2+0x266>
1a017580:	2b01      	cmp	r3, #1
1a017582:	f000 80a3 	beq.w	1a0176cc <__kernel_rem_pio2+0x394>
1a017586:	2b02      	cmp	r3, #2
1a017588:	d109      	bne.n	1a01759e <__kernel_rem_pio2+0x266>
1a01758a:	9b04      	ldr	r3, [sp, #16]
1a01758c:	1e5a      	subs	r2, r3, #1
1a01758e:	ab0e      	add	r3, sp, #56	; 0x38
1a017590:	a90e      	add	r1, sp, #56	; 0x38
1a017592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a017596:	f3c3 0315 	ubfx	r3, r3, #0, #22
1a01759a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
1a01759e:	2d02      	cmp	r5, #2
1a0175a0:	d074      	beq.n	1a01768c <__kernel_rem_pio2+0x354>
1a0175a2:	2200      	movs	r2, #0
1a0175a4:	2300      	movs	r3, #0
1a0175a6:	4630      	mov	r0, r6
1a0175a8:	4639      	mov	r1, r7
1a0175aa:	f7fc fd11 	bl	1a013fd0 <__aeabi_dcmpeq>
1a0175ae:	2800      	cmp	r0, #0
1a0175b0:	f000 8245 	beq.w	1a017a3e <__kernel_rem_pio2+0x706>
1a0175b4:	9a04      	ldr	r2, [sp, #16]
1a0175b6:	9b07      	ldr	r3, [sp, #28]
1a0175b8:	1e50      	subs	r0, r2, #1
1a0175ba:	4283      	cmp	r3, r0
1a0175bc:	dc10      	bgt.n	1a0175e0 <__kernel_rem_pio2+0x2a8>
1a0175be:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
1a0175c2:	3b01      	subs	r3, #1
1a0175c4:	aa0e      	add	r2, sp, #56	; 0x38
1a0175c6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1a0175c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1a0175cc:	2200      	movs	r2, #0
1a0175ce:	f853 1904 	ldr.w	r1, [r3], #-4
1a0175d2:	42a3      	cmp	r3, r4
1a0175d4:	ea42 0201 	orr.w	r2, r2, r1
1a0175d8:	d1f9      	bne.n	1a0175ce <__kernel_rem_pio2+0x296>
1a0175da:	2a00      	cmp	r2, #0
1a0175dc:	f040 80a4 	bne.w	1a017728 <__kernel_rem_pio2+0x3f0>
1a0175e0:	9b07      	ldr	r3, [sp, #28]
1a0175e2:	aa0e      	add	r2, sp, #56	; 0x38
1a0175e4:	3b01      	subs	r3, #1
1a0175e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0175ea:	2b00      	cmp	r3, #0
1a0175ec:	f040 825f 	bne.w	1a017aae <__kernel_rem_pio2+0x776>
1a0175f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0175f2:	2301      	movs	r3, #1
1a0175f4:	f852 1904 	ldr.w	r1, [r2], #-4
1a0175f8:	3301      	adds	r3, #1
1a0175fa:	2900      	cmp	r1, #0
1a0175fc:	d0fa      	beq.n	1a0175f4 <__kernel_rem_pio2+0x2bc>
1a0175fe:	9a04      	ldr	r2, [sp, #16]
1a017600:	18d3      	adds	r3, r2, r3
1a017602:	f102 0a01 	add.w	sl, r2, #1
1a017606:	459a      	cmp	sl, r3
1a017608:	9309      	str	r3, [sp, #36]	; 0x24
1a01760a:	dc3c      	bgt.n	1a017686 <__kernel_rem_pio2+0x34e>
1a01760c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a01760e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a017610:	9909      	ldr	r1, [sp, #36]	; 0x24
1a017612:	eb0a 0903 	add.w	r9, sl, r3
1a017616:	9b04      	ldr	r3, [sp, #16]
1a017618:	4698      	mov	r8, r3
1a01761a:	4490      	add	r8, r2
1a01761c:	188b      	adds	r3, r1, r2
1a01761e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
1a017622:	9aa5      	ldr	r2, [sp, #660]	; 0x294
1a017624:	f109 39ff 	add.w	r9, r9, #4294967295
1a017628:	eb02 0989 	add.w	r9, r2, r9, lsl #2
1a01762c:	aa22      	add	r2, sp, #136	; 0x88
1a01762e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a017632:	9304      	str	r3, [sp, #16]
1a017634:	ab72      	add	r3, sp, #456	; 0x1c8
1a017636:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
1a01763a:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
1a01763e:	f859 0f04 	ldr.w	r0, [r9, #4]!
1a017642:	f7fc f9f7 	bl	1a013a34 <__aeabi_i2d>
1a017646:	9b00      	ldr	r3, [sp, #0]
1a017648:	2b00      	cmp	r3, #0
1a01764a:	e8e8 0102 	strd	r0, r1, [r8], #8
1a01764e:	f04f 0600 	mov.w	r6, #0
1a017652:	f04f 0700 	mov.w	r7, #0
1a017656:	db11      	blt.n	1a01767c <__kernel_rem_pio2+0x344>
1a017658:	9c03      	ldr	r4, [sp, #12]
1a01765a:	4645      	mov	r5, r8
1a01765c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
1a017660:	e8f4 0102 	ldrd	r0, r1, [r4], #8
1a017664:	f7fc fa4c 	bl	1a013b00 <__aeabi_dmul>
1a017668:	4602      	mov	r2, r0
1a01766a:	460b      	mov	r3, r1
1a01766c:	4630      	mov	r0, r6
1a01766e:	4639      	mov	r1, r7
1a017670:	f7fc f894 	bl	1a01379c <__adddf3>
1a017674:	455c      	cmp	r4, fp
1a017676:	4606      	mov	r6, r0
1a017678:	460f      	mov	r7, r1
1a01767a:	d1ef      	bne.n	1a01765c <__kernel_rem_pio2+0x324>
1a01767c:	9b04      	ldr	r3, [sp, #16]
1a01767e:	4598      	cmp	r8, r3
1a017680:	e8ea 6702 	strd	r6, r7, [sl], #8
1a017684:	d1db      	bne.n	1a01763e <__kernel_rem_pio2+0x306>
1a017686:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a017688:	9304      	str	r3, [sp, #16]
1a01768a:	e6d4      	b.n	1a017436 <__kernel_rem_pio2+0xfe>
1a01768c:	4632      	mov	r2, r6
1a01768e:	463b      	mov	r3, r7
1a017690:	2000      	movs	r0, #0
1a017692:	49b1      	ldr	r1, [pc, #708]	; (1a017958 <__kernel_rem_pio2+0x620>)
1a017694:	f7fc f880 	bl	1a013798 <__aeabi_dsub>
1a017698:	4606      	mov	r6, r0
1a01769a:	460f      	mov	r7, r1
1a01769c:	2c00      	cmp	r4, #0
1a01769e:	d080      	beq.n	1a0175a2 <__kernel_rem_pio2+0x26a>
1a0176a0:	9a06      	ldr	r2, [sp, #24]
1a0176a2:	49ad      	ldr	r1, [pc, #692]	; (1a017958 <__kernel_rem_pio2+0x620>)
1a0176a4:	2000      	movs	r0, #0
1a0176a6:	f000 ff0f 	bl	1a0184c8 <scalbn>
1a0176aa:	4602      	mov	r2, r0
1a0176ac:	460b      	mov	r3, r1
1a0176ae:	4630      	mov	r0, r6
1a0176b0:	4639      	mov	r1, r7
1a0176b2:	f7fc f871 	bl	1a013798 <__aeabi_dsub>
1a0176b6:	4606      	mov	r6, r0
1a0176b8:	460f      	mov	r7, r1
1a0176ba:	e772      	b.n	1a0175a2 <__kernel_rem_pio2+0x26a>
1a0176bc:	d111      	bne.n	1a0176e2 <__kernel_rem_pio2+0x3aa>
1a0176be:	9b04      	ldr	r3, [sp, #16]
1a0176c0:	aa0e      	add	r2, sp, #56	; 0x38
1a0176c2:	3b01      	subs	r3, #1
1a0176c4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
1a0176c8:	15ed      	asrs	r5, r5, #23
1a0176ca:	e727      	b.n	1a01751c <__kernel_rem_pio2+0x1e4>
1a0176cc:	9b04      	ldr	r3, [sp, #16]
1a0176ce:	1e5a      	subs	r2, r3, #1
1a0176d0:	ab0e      	add	r3, sp, #56	; 0x38
1a0176d2:	a90e      	add	r1, sp, #56	; 0x38
1a0176d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a0176d8:	f3c3 0316 	ubfx	r3, r3, #0, #23
1a0176dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
1a0176e0:	e75d      	b.n	1a01759e <__kernel_rem_pio2+0x266>
1a0176e2:	2200      	movs	r2, #0
1a0176e4:	4b9d      	ldr	r3, [pc, #628]	; (1a01795c <__kernel_rem_pio2+0x624>)
1a0176e6:	f7fc fc91 	bl	1a01400c <__aeabi_dcmpge>
1a0176ea:	b958      	cbnz	r0, 1a017704 <__kernel_rem_pio2+0x3cc>
1a0176ec:	4605      	mov	r5, r0
1a0176ee:	e758      	b.n	1a0175a2 <__kernel_rem_pio2+0x26a>
1a0176f0:	2600      	movs	r6, #0
1a0176f2:	2700      	movs	r7, #0
1a0176f4:	e8ea 6702 	strd	r6, r7, [sl], #8
1a0176f8:	45da      	cmp	sl, fp
1a0176fa:	f109 0908 	add.w	r9, r9, #8
1a0176fe:	f47f ae6c 	bne.w	1a0173da <__kernel_rem_pio2+0xa2>
1a017702:	e688      	b.n	1a017416 <__kernel_rem_pio2+0xde>
1a017704:	9b04      	ldr	r3, [sp, #16]
1a017706:	2b00      	cmp	r3, #0
1a017708:	f108 0801 	add.w	r8, r8, #1
1a01770c:	bfc8      	it	gt
1a01770e:	2502      	movgt	r5, #2
1a017710:	f73f af0c 	bgt.w	1a01752c <__kernel_rem_pio2+0x1f4>
1a017714:	4632      	mov	r2, r6
1a017716:	463b      	mov	r3, r7
1a017718:	2000      	movs	r0, #0
1a01771a:	498f      	ldr	r1, [pc, #572]	; (1a017958 <__kernel_rem_pio2+0x620>)
1a01771c:	f7fc f83c 	bl	1a013798 <__aeabi_dsub>
1a017720:	2502      	movs	r5, #2
1a017722:	4606      	mov	r6, r0
1a017724:	460f      	mov	r7, r1
1a017726:	e73c      	b.n	1a0175a2 <__kernel_rem_pio2+0x26a>
1a017728:	a90e      	add	r1, sp, #56	; 0x38
1a01772a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
1a01772e:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
1a017732:	9906      	ldr	r1, [sp, #24]
1a017734:	9000      	str	r0, [sp, #0]
1a017736:	3918      	subs	r1, #24
1a017738:	4602      	mov	r2, r0
1a01773a:	9503      	str	r5, [sp, #12]
1a01773c:	9106      	str	r1, [sp, #24]
1a01773e:	b96b      	cbnz	r3, 1a01775c <__kernel_rem_pio2+0x424>
1a017740:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
1a017744:	3b01      	subs	r3, #1
1a017746:	a80e      	add	r0, sp, #56	; 0x38
1a017748:	eb00 0383 	add.w	r3, r0, r3, lsl #2
1a01774c:	f853 0904 	ldr.w	r0, [r3], #-4
1a017750:	3a01      	subs	r2, #1
1a017752:	3918      	subs	r1, #24
1a017754:	2800      	cmp	r0, #0
1a017756:	d0f9      	beq.n	1a01774c <__kernel_rem_pio2+0x414>
1a017758:	9200      	str	r2, [sp, #0]
1a01775a:	9106      	str	r1, [sp, #24]
1a01775c:	9a06      	ldr	r2, [sp, #24]
1a01775e:	497e      	ldr	r1, [pc, #504]	; (1a017958 <__kernel_rem_pio2+0x620>)
1a017760:	2000      	movs	r0, #0
1a017762:	f000 feb1 	bl	1a0184c8 <scalbn>
1a017766:	9b00      	ldr	r3, [sp, #0]
1a017768:	2b00      	cmp	r3, #0
1a01776a:	4604      	mov	r4, r0
1a01776c:	460d      	mov	r5, r1
1a01776e:	f2c0 81bc 	blt.w	1a017aea <__kernel_rem_pio2+0x7b2>
1a017772:	00da      	lsls	r2, r3, #3
1a017774:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
1a017778:	a90e      	add	r1, sp, #56	; 0x38
1a01777a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
1a01777e:	eb08 0b02 	add.w	fp, r8, r2
1a017782:	9206      	str	r2, [sp, #24]
1a017784:	3604      	adds	r6, #4
1a017786:	f10b 0708 	add.w	r7, fp, #8
1a01778a:	f856 0d04 	ldr.w	r0, [r6, #-4]!
1a01778e:	f7fc f951 	bl	1a013a34 <__aeabi_i2d>
1a017792:	4622      	mov	r2, r4
1a017794:	462b      	mov	r3, r5
1a017796:	f7fc f9b3 	bl	1a013b00 <__aeabi_dmul>
1a01779a:	2200      	movs	r2, #0
1a01779c:	e967 0102 	strd	r0, r1, [r7, #-8]!
1a0177a0:	4b6f      	ldr	r3, [pc, #444]	; (1a017960 <__kernel_rem_pio2+0x628>)
1a0177a2:	4620      	mov	r0, r4
1a0177a4:	4629      	mov	r1, r5
1a0177a6:	f7fc f9ab 	bl	1a013b00 <__aeabi_dmul>
1a0177aa:	4547      	cmp	r7, r8
1a0177ac:	4604      	mov	r4, r0
1a0177ae:	460d      	mov	r5, r1
1a0177b0:	d1eb      	bne.n	1a01778a <__kernel_rem_pio2+0x452>
1a0177b2:	ac4a      	add	r4, sp, #296	; 0x128
1a0177b4:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0177b8:	9404      	str	r4, [sp, #16]
1a0177ba:	f04f 0a00 	mov.w	sl, #0
1a0177be:	f1b9 0f00 	cmp.w	r9, #0
1a0177c2:	f2c0 8127 	blt.w	1a017a14 <__kernel_rem_pio2+0x6dc>
1a0177c6:	f8df 819c 	ldr.w	r8, [pc, #412]	; 1a017964 <__kernel_rem_pio2+0x62c>
1a0177ca:	465d      	mov	r5, fp
1a0177cc:	a360      	add	r3, pc, #384	; (adr r3, 1a017950 <__kernel_rem_pio2+0x618>)
1a0177ce:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0177d2:	2600      	movs	r6, #0
1a0177d4:	2700      	movs	r7, #0
1a0177d6:	2400      	movs	r4, #0
1a0177d8:	e003      	b.n	1a0177e2 <__kernel_rem_pio2+0x4aa>
1a0177da:	45a2      	cmp	sl, r4
1a0177dc:	db10      	blt.n	1a017800 <__kernel_rem_pio2+0x4c8>
1a0177de:	e8f8 2302 	ldrd	r2, r3, [r8], #8
1a0177e2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
1a0177e6:	f7fc f98b 	bl	1a013b00 <__aeabi_dmul>
1a0177ea:	4602      	mov	r2, r0
1a0177ec:	460b      	mov	r3, r1
1a0177ee:	4630      	mov	r0, r6
1a0177f0:	4639      	mov	r1, r7
1a0177f2:	f7fb ffd3 	bl	1a01379c <__adddf3>
1a0177f6:	3401      	adds	r4, #1
1a0177f8:	45a1      	cmp	r9, r4
1a0177fa:	4606      	mov	r6, r0
1a0177fc:	460f      	mov	r7, r1
1a0177fe:	daec      	bge.n	1a0177da <__kernel_rem_pio2+0x4a2>
1a017800:	9b04      	ldr	r3, [sp, #16]
1a017802:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
1a017806:	f1ab 0b08 	sub.w	fp, fp, #8
1a01780a:	e9c3 6700 	strd	r6, r7, [r3]
1a01780e:	ab70      	add	r3, sp, #448	; 0x1c0
1a017810:	459b      	cmp	fp, r3
1a017812:	f10a 0a01 	add.w	sl, sl, #1
1a017816:	d1d2      	bne.n	1a0177be <__kernel_rem_pio2+0x486>
1a017818:	9ba4      	ldr	r3, [sp, #656]	; 0x290
1a01781a:	9c04      	ldr	r4, [sp, #16]
1a01781c:	2b03      	cmp	r3, #3
1a01781e:	f200 808d 	bhi.w	1a01793c <__kernel_rem_pio2+0x604>
1a017822:	e8df f013 	tbh	[pc, r3, lsl #1]
1a017826:	00d9      	.short	0x00d9
1a017828:	00a100a1 	.word	0x00a100a1
1a01782c:	0004      	.short	0x0004
1a01782e:	9b00      	ldr	r3, [sp, #0]
1a017830:	2b00      	cmp	r3, #0
1a017832:	f340 8157 	ble.w	1a017ae4 <__kernel_rem_pio2+0x7ac>
1a017836:	9b00      	ldr	r3, [sp, #0]
1a017838:	f103 5b00 	add.w	fp, r3, #536870912	; 0x20000000
1a01783c:	9b06      	ldr	r3, [sp, #24]
1a01783e:	f10b 3bff 	add.w	fp, fp, #4294967295
1a017842:	18e2      	adds	r2, r4, r3
1a017844:	ea4f 03cb 	mov.w	r3, fp, lsl #3
1a017848:	e9d2 8900 	ldrd	r8, r9, [r2]
1a01784c:	f103 0208 	add.w	r2, r3, #8
1a017850:	3310      	adds	r3, #16
1a017852:	eb04 0a02 	add.w	sl, r4, r2
1a017856:	18e5      	adds	r5, r4, r3
1a017858:	ed3a 7b02 	vldmdb	sl!, {d7}
1a01785c:	4642      	mov	r2, r8
1a01785e:	464b      	mov	r3, r9
1a017860:	ec51 0b17 	vmov	r0, r1, d7
1a017864:	ed8d 7b04 	vstr	d7, [sp, #16]
1a017868:	f7fb ff98 	bl	1a01379c <__adddf3>
1a01786c:	4606      	mov	r6, r0
1a01786e:	460f      	mov	r7, r1
1a017870:	4602      	mov	r2, r0
1a017872:	460b      	mov	r3, r1
1a017874:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a017878:	f7fb ff8e 	bl	1a013798 <__aeabi_dsub>
1a01787c:	464b      	mov	r3, r9
1a01787e:	4642      	mov	r2, r8
1a017880:	f7fb ff8c 	bl	1a01379c <__adddf3>
1a017884:	e965 0102 	strd	r0, r1, [r5, #-8]!
1a017888:	ab4c      	add	r3, sp, #304	; 0x130
1a01788a:	429d      	cmp	r5, r3
1a01788c:	46b0      	mov	r8, r6
1a01788e:	46b9      	mov	r9, r7
1a017890:	e9ca 6700 	strd	r6, r7, [sl]
1a017894:	d1e0      	bne.n	1a017858 <__kernel_rem_pio2+0x520>
1a017896:	9b00      	ldr	r3, [sp, #0]
1a017898:	2b01      	cmp	r3, #1
1a01789a:	f340 8123 	ble.w	1a017ae4 <__kernel_rem_pio2+0x7ac>
1a01789e:	9b06      	ldr	r3, [sp, #24]
1a0178a0:	4423      	add	r3, r4
1a0178a2:	ed93 7b00 	vldr	d7, [r3]
1a0178a6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
1a0178aa:	f10b 0a10 	add.w	sl, fp, #16
1a0178ae:	ed8d 7b00 	vstr	d7, [sp]
1a0178b2:	44a2      	add	sl, r4
1a0178b4:	f10b 0b08 	add.w	fp, fp, #8
1a0178b8:	eb04 050b 	add.w	r5, r4, fp
1a0178bc:	46d0      	mov	r8, sl
1a0178be:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
1a0178c2:	f8cd a010 	str.w	sl, [sp, #16]
1a0178c6:	e975 9a02 	ldrd	r9, sl, [r5, #-8]!
1a0178ca:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0178ce:	464a      	mov	r2, r9
1a0178d0:	4653      	mov	r3, sl
1a0178d2:	f7fb ff63 	bl	1a01379c <__adddf3>
1a0178d6:	4606      	mov	r6, r0
1a0178d8:	460f      	mov	r7, r1
1a0178da:	4602      	mov	r2, r0
1a0178dc:	460b      	mov	r3, r1
1a0178de:	4648      	mov	r0, r9
1a0178e0:	4651      	mov	r1, sl
1a0178e2:	f7fb ff59 	bl	1a013798 <__aeabi_dsub>
1a0178e6:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0178ea:	f7fb ff57 	bl	1a01379c <__adddf3>
1a0178ee:	e968 0102 	strd	r0, r1, [r8, #-8]!
1a0178f2:	45c3      	cmp	fp, r8
1a0178f4:	e9cd 6700 	strd	r6, r7, [sp]
1a0178f8:	e9c5 6700 	strd	r6, r7, [r5]
1a0178fc:	d1e3      	bne.n	1a0178c6 <__kernel_rem_pio2+0x58e>
1a0178fe:	f8dd a010 	ldr.w	sl, [sp, #16]
1a017902:	2000      	movs	r0, #0
1a017904:	2100      	movs	r1, #0
1a017906:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
1a01790a:	f7fb ff47 	bl	1a01379c <__adddf3>
1a01790e:	45d3      	cmp	fp, sl
1a017910:	d1f9      	bne.n	1a017906 <__kernel_rem_pio2+0x5ce>
1a017912:	9b03      	ldr	r3, [sp, #12]
1a017914:	2b00      	cmp	r3, #0
1a017916:	f000 80ce 	beq.w	1a017ab6 <__kernel_rem_pio2+0x77e>
1a01791a:	6862      	ldr	r2, [r4, #4]
1a01791c:	68e3      	ldr	r3, [r4, #12]
1a01791e:	9f08      	ldr	r7, [sp, #32]
1a017920:	6825      	ldr	r5, [r4, #0]
1a017922:	68a4      	ldr	r4, [r4, #8]
1a017924:	603d      	str	r5, [r7, #0]
1a017926:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
1a01792a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
1a01792e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
1a017932:	607a      	str	r2, [r7, #4]
1a017934:	60fb      	str	r3, [r7, #12]
1a017936:	60bc      	str	r4, [r7, #8]
1a017938:	6138      	str	r0, [r7, #16]
1a01793a:	6179      	str	r1, [r7, #20]
1a01793c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a01793e:	f003 0007 	and.w	r0, r3, #7
1a017942:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
1a017946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a01794a:	bf00      	nop
1a01794c:	f3af 8000 	nop.w
1a017950:	40000000 	.word	0x40000000
1a017954:	3ff921fb 	.word	0x3ff921fb
1a017958:	3ff00000 	.word	0x3ff00000
1a01795c:	3fe00000 	.word	0x3fe00000
1a017960:	3e700000 	.word	0x3e700000
1a017964:	1a01b1f8 	.word	0x1a01b1f8
1a017968:	9d06      	ldr	r5, [sp, #24]
1a01796a:	3508      	adds	r5, #8
1a01796c:	4425      	add	r5, r4
1a01796e:	2000      	movs	r0, #0
1a017970:	2100      	movs	r1, #0
1a017972:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
1a017976:	f7fb ff11 	bl	1a01379c <__adddf3>
1a01797a:	42a5      	cmp	r5, r4
1a01797c:	d1f9      	bne.n	1a017972 <__kernel_rem_pio2+0x63a>
1a01797e:	9b03      	ldr	r3, [sp, #12]
1a017980:	2b00      	cmp	r3, #0
1a017982:	d04a      	beq.n	1a017a1a <__kernel_rem_pio2+0x6e2>
1a017984:	9e08      	ldr	r6, [sp, #32]
1a017986:	4602      	mov	r2, r0
1a017988:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a01798c:	e886 000c 	stmia.w	r6, {r2, r3}
1a017990:	460b      	mov	r3, r1
1a017992:	4602      	mov	r2, r0
1a017994:	e9d4 0100 	ldrd	r0, r1, [r4]
1a017998:	f7fb fefe 	bl	1a013798 <__aeabi_dsub>
1a01799c:	9b00      	ldr	r3, [sp, #0]
1a01799e:	2b00      	cmp	r3, #0
1a0179a0:	dd0d      	ble.n	1a0179be <__kernel_rem_pio2+0x686>
1a0179a2:	ad4c      	add	r5, sp, #304	; 0x130
1a0179a4:	2401      	movs	r4, #1
1a0179a6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
1a0179aa:	f7fb fef7 	bl	1a01379c <__adddf3>
1a0179ae:	9b00      	ldr	r3, [sp, #0]
1a0179b0:	3401      	adds	r4, #1
1a0179b2:	42a3      	cmp	r3, r4
1a0179b4:	daf7      	bge.n	1a0179a6 <__kernel_rem_pio2+0x66e>
1a0179b6:	9b03      	ldr	r3, [sp, #12]
1a0179b8:	2b00      	cmp	r3, #0
1a0179ba:	f000 80a5 	beq.w	1a017b08 <__kernel_rem_pio2+0x7d0>
1a0179be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a0179c2:	9908      	ldr	r1, [sp, #32]
1a0179c4:	4602      	mov	r2, r0
1a0179c6:	e9c1 2302 	strd	r2, r3, [r1, #8]
1a0179ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0179cc:	f003 0007 	and.w	r0, r3, #7
1a0179d0:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
1a0179d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0179d8:	9b06      	ldr	r3, [sp, #24]
1a0179da:	9d00      	ldr	r5, [sp, #0]
1a0179dc:	3308      	adds	r3, #8
1a0179de:	2000      	movs	r0, #0
1a0179e0:	2100      	movs	r1, #0
1a0179e2:	441c      	add	r4, r3
1a0179e4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
1a0179e8:	3d01      	subs	r5, #1
1a0179ea:	f7fb fed7 	bl	1a01379c <__adddf3>
1a0179ee:	1c6b      	adds	r3, r5, #1
1a0179f0:	d1f8      	bne.n	1a0179e4 <__kernel_rem_pio2+0x6ac>
1a0179f2:	9b03      	ldr	r3, [sp, #12]
1a0179f4:	4602      	mov	r2, r0
1a0179f6:	2b00      	cmp	r3, #0
1a0179f8:	f000 808c 	beq.w	1a017b14 <__kernel_rem_pio2+0x7dc>
1a0179fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a017a00:	9908      	ldr	r1, [sp, #32]
1a017a02:	e9c1 2300 	strd	r2, r3, [r1]
1a017a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a017a08:	f003 0007 	and.w	r0, r3, #7
1a017a0c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
1a017a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a017a14:	2600      	movs	r6, #0
1a017a16:	2700      	movs	r7, #0
1a017a18:	e6f2      	b.n	1a017800 <__kernel_rem_pio2+0x4c8>
1a017a1a:	9b08      	ldr	r3, [sp, #32]
1a017a1c:	4602      	mov	r2, r0
1a017a1e:	e9c3 0100 	strd	r0, r1, [r3]
1a017a22:	460b      	mov	r3, r1
1a017a24:	e9d4 0100 	ldrd	r0, r1, [r4]
1a017a28:	f7fb feb6 	bl	1a013798 <__aeabi_dsub>
1a017a2c:	9c00      	ldr	r4, [sp, #0]
1a017a2e:	2c00      	cmp	r4, #0
1a017a30:	4602      	mov	r2, r0
1a017a32:	460b      	mov	r3, r1
1a017a34:	dcb5      	bgt.n	1a0179a2 <__kernel_rem_pio2+0x66a>
1a017a36:	9908      	ldr	r1, [sp, #32]
1a017a38:	e9c1 2302 	strd	r2, r3, [r1, #8]
1a017a3c:	e7c5      	b.n	1a0179ca <__kernel_rem_pio2+0x692>
1a017a3e:	4639      	mov	r1, r7
1a017a40:	9f06      	ldr	r7, [sp, #24]
1a017a42:	9503      	str	r5, [sp, #12]
1a017a44:	427a      	negs	r2, r7
1a017a46:	4630      	mov	r0, r6
1a017a48:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
1a017a4c:	f000 fd3c 	bl	1a0184c8 <scalbn>
1a017a50:	2200      	movs	r2, #0
1a017a52:	4b38      	ldr	r3, [pc, #224]	; (1a017b34 <__kernel_rem_pio2+0x7fc>)
1a017a54:	4604      	mov	r4, r0
1a017a56:	460d      	mov	r5, r1
1a017a58:	f7fc fad8 	bl	1a01400c <__aeabi_dcmpge>
1a017a5c:	2800      	cmp	r0, #0
1a017a5e:	d036      	beq.n	1a017ace <__kernel_rem_pio2+0x796>
1a017a60:	2200      	movs	r2, #0
1a017a62:	4b35      	ldr	r3, [pc, #212]	; (1a017b38 <__kernel_rem_pio2+0x800>)
1a017a64:	4620      	mov	r0, r4
1a017a66:	4629      	mov	r1, r5
1a017a68:	f7fc f84a 	bl	1a013b00 <__aeabi_dmul>
1a017a6c:	f7fc fae2 	bl	1a014034 <__aeabi_d2iz>
1a017a70:	4606      	mov	r6, r0
1a017a72:	f7fb ffdf 	bl	1a013a34 <__aeabi_i2d>
1a017a76:	2200      	movs	r2, #0
1a017a78:	4b2e      	ldr	r3, [pc, #184]	; (1a017b34 <__kernel_rem_pio2+0x7fc>)
1a017a7a:	f7fc f841 	bl	1a013b00 <__aeabi_dmul>
1a017a7e:	4602      	mov	r2, r0
1a017a80:	460b      	mov	r3, r1
1a017a82:	4620      	mov	r0, r4
1a017a84:	4629      	mov	r1, r5
1a017a86:	f7fb fe87 	bl	1a013798 <__aeabi_dsub>
1a017a8a:	f7fc fad3 	bl	1a014034 <__aeabi_d2iz>
1a017a8e:	9904      	ldr	r1, [sp, #16]
1a017a90:	460b      	mov	r3, r1
1a017a92:	3301      	adds	r3, #1
1a017a94:	461a      	mov	r2, r3
1a017a96:	9300      	str	r3, [sp, #0]
1a017a98:	463b      	mov	r3, r7
1a017a9a:	3318      	adds	r3, #24
1a017a9c:	9306      	str	r3, [sp, #24]
1a017a9e:	460b      	mov	r3, r1
1a017aa0:	a90e      	add	r1, sp, #56	; 0x38
1a017aa2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
1a017aa6:	4613      	mov	r3, r2
1a017aa8:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
1a017aac:	e656      	b.n	1a01775c <__kernel_rem_pio2+0x424>
1a017aae:	2301      	movs	r3, #1
1a017ab0:	e5a5      	b.n	1a0175fe <__kernel_rem_pio2+0x2c6>
1a017ab2:	2400      	movs	r4, #0
1a017ab4:	e561      	b.n	1a01757a <__kernel_rem_pio2+0x242>
1a017ab6:	e9d4 6700 	ldrd	r6, r7, [r4]
1a017aba:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a017abe:	9d08      	ldr	r5, [sp, #32]
1a017ac0:	e9c5 0104 	strd	r0, r1, [r5, #16]
1a017ac4:	e9c5 6700 	strd	r6, r7, [r5]
1a017ac8:	e9c5 2302 	strd	r2, r3, [r5, #8]
1a017acc:	e736      	b.n	1a01793c <__kernel_rem_pio2+0x604>
1a017ace:	4629      	mov	r1, r5
1a017ad0:	4620      	mov	r0, r4
1a017ad2:	f7fc faaf 	bl	1a014034 <__aeabi_d2iz>
1a017ad6:	9a04      	ldr	r2, [sp, #16]
1a017ad8:	9200      	str	r2, [sp, #0]
1a017ada:	a90e      	add	r1, sp, #56	; 0x38
1a017adc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
1a017ae0:	e63c      	b.n	1a01775c <__kernel_rem_pio2+0x424>
1a017ae2:	ac4a      	add	r4, sp, #296	; 0x128
1a017ae4:	2000      	movs	r0, #0
1a017ae6:	2100      	movs	r1, #0
1a017ae8:	e713      	b.n	1a017912 <__kernel_rem_pio2+0x5da>
1a017aea:	9ba4      	ldr	r3, [sp, #656]	; 0x290
1a017aec:	2b03      	cmp	r3, #3
1a017aee:	f63f af25 	bhi.w	1a01793c <__kernel_rem_pio2+0x604>
1a017af2:	a201      	add	r2, pc, #4	; (adr r2, 1a017af8 <__kernel_rem_pio2+0x7c0>)
1a017af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a017af8:	1a017b2f 	.word	0x1a017b2f
1a017afc:	1a017b27 	.word	0x1a017b27
1a017b00:	1a017b27 	.word	0x1a017b27
1a017b04:	1a017ae3 	.word	0x1a017ae3
1a017b08:	460b      	mov	r3, r1
1a017b0a:	9908      	ldr	r1, [sp, #32]
1a017b0c:	4602      	mov	r2, r0
1a017b0e:	e9c1 2302 	strd	r2, r3, [r1, #8]
1a017b12:	e75a      	b.n	1a0179ca <__kernel_rem_pio2+0x692>
1a017b14:	460b      	mov	r3, r1
1a017b16:	9908      	ldr	r1, [sp, #32]
1a017b18:	e9c1 2300 	strd	r2, r3, [r1]
1a017b1c:	e773      	b.n	1a017a06 <__kernel_rem_pio2+0x6ce>
1a017b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a017b20:	00db      	lsls	r3, r3, #3
1a017b22:	9304      	str	r3, [sp, #16]
1a017b24:	e477      	b.n	1a017416 <__kernel_rem_pio2+0xde>
1a017b26:	2000      	movs	r0, #0
1a017b28:	2100      	movs	r1, #0
1a017b2a:	ac4a      	add	r4, sp, #296	; 0x128
1a017b2c:	e727      	b.n	1a01797e <__kernel_rem_pio2+0x646>
1a017b2e:	2000      	movs	r0, #0
1a017b30:	2100      	movs	r1, #0
1a017b32:	e75e      	b.n	1a0179f2 <__kernel_rem_pio2+0x6ba>
1a017b34:	41700000 	.word	0x41700000
1a017b38:	3e700000 	.word	0x3e700000
1a017b3c:	ffffffff 	.word	0xffffffff

1a017b40 <__kernel_sin>:
1a017b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a017b44:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
1a017b48:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
1a017b4c:	b085      	sub	sp, #20
1a017b4e:	4604      	mov	r4, r0
1a017b50:	460d      	mov	r5, r1
1a017b52:	4690      	mov	r8, r2
1a017b54:	4699      	mov	r9, r3
1a017b56:	da04      	bge.n	1a017b62 <__kernel_sin+0x22>
1a017b58:	f7fc fa6c 	bl	1a014034 <__aeabi_d2iz>
1a017b5c:	2800      	cmp	r0, #0
1a017b5e:	f000 8085 	beq.w	1a017c6c <__kernel_sin+0x12c>
1a017b62:	4622      	mov	r2, r4
1a017b64:	462b      	mov	r3, r5
1a017b66:	4620      	mov	r0, r4
1a017b68:	4629      	mov	r1, r5
1a017b6a:	f7fb ffc9 	bl	1a013b00 <__aeabi_dmul>
1a017b6e:	4606      	mov	r6, r0
1a017b70:	460f      	mov	r7, r1
1a017b72:	4602      	mov	r2, r0
1a017b74:	460b      	mov	r3, r1
1a017b76:	4620      	mov	r0, r4
1a017b78:	4629      	mov	r1, r5
1a017b7a:	f7fb ffc1 	bl	1a013b00 <__aeabi_dmul>
1a017b7e:	a341      	add	r3, pc, #260	; (adr r3, 1a017c84 <__kernel_sin+0x144>)
1a017b80:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017b84:	4682      	mov	sl, r0
1a017b86:	468b      	mov	fp, r1
1a017b88:	4630      	mov	r0, r6
1a017b8a:	4639      	mov	r1, r7
1a017b8c:	f7fb ffb8 	bl	1a013b00 <__aeabi_dmul>
1a017b90:	a33e      	add	r3, pc, #248	; (adr r3, 1a017c8c <__kernel_sin+0x14c>)
1a017b92:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017b96:	f7fb fdff 	bl	1a013798 <__aeabi_dsub>
1a017b9a:	4632      	mov	r2, r6
1a017b9c:	463b      	mov	r3, r7
1a017b9e:	f7fb ffaf 	bl	1a013b00 <__aeabi_dmul>
1a017ba2:	a33c      	add	r3, pc, #240	; (adr r3, 1a017c94 <__kernel_sin+0x154>)
1a017ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017ba8:	f7fb fdf8 	bl	1a01379c <__adddf3>
1a017bac:	4632      	mov	r2, r6
1a017bae:	463b      	mov	r3, r7
1a017bb0:	f7fb ffa6 	bl	1a013b00 <__aeabi_dmul>
1a017bb4:	a339      	add	r3, pc, #228	; (adr r3, 1a017c9c <__kernel_sin+0x15c>)
1a017bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017bba:	f7fb fded 	bl	1a013798 <__aeabi_dsub>
1a017bbe:	4632      	mov	r2, r6
1a017bc0:	463b      	mov	r3, r7
1a017bc2:	f7fb ff9d 	bl	1a013b00 <__aeabi_dmul>
1a017bc6:	a337      	add	r3, pc, #220	; (adr r3, 1a017ca4 <__kernel_sin+0x164>)
1a017bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017bcc:	f7fb fde6 	bl	1a01379c <__adddf3>
1a017bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a017bd2:	e9cd 0100 	strd	r0, r1, [sp]
1a017bd6:	b39b      	cbz	r3, 1a017c40 <__kernel_sin+0x100>
1a017bd8:	2200      	movs	r2, #0
1a017bda:	4b29      	ldr	r3, [pc, #164]	; (1a017c80 <__kernel_sin+0x140>)
1a017bdc:	4640      	mov	r0, r8
1a017bde:	4649      	mov	r1, r9
1a017be0:	f7fb ff8e 	bl	1a013b00 <__aeabi_dmul>
1a017be4:	e9dd 2300 	ldrd	r2, r3, [sp]
1a017be8:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a017bec:	4650      	mov	r0, sl
1a017bee:	4659      	mov	r1, fp
1a017bf0:	f7fb ff86 	bl	1a013b00 <__aeabi_dmul>
1a017bf4:	4602      	mov	r2, r0
1a017bf6:	460b      	mov	r3, r1
1a017bf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a017bfc:	f7fb fdcc 	bl	1a013798 <__aeabi_dsub>
1a017c00:	4632      	mov	r2, r6
1a017c02:	463b      	mov	r3, r7
1a017c04:	f7fb ff7c 	bl	1a013b00 <__aeabi_dmul>
1a017c08:	4642      	mov	r2, r8
1a017c0a:	464b      	mov	r3, r9
1a017c0c:	f7fb fdc4 	bl	1a013798 <__aeabi_dsub>
1a017c10:	a319      	add	r3, pc, #100	; (adr r3, 1a017c78 <__kernel_sin+0x138>)
1a017c12:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017c16:	4606      	mov	r6, r0
1a017c18:	460f      	mov	r7, r1
1a017c1a:	4650      	mov	r0, sl
1a017c1c:	4659      	mov	r1, fp
1a017c1e:	f7fb ff6f 	bl	1a013b00 <__aeabi_dmul>
1a017c22:	4602      	mov	r2, r0
1a017c24:	460b      	mov	r3, r1
1a017c26:	4630      	mov	r0, r6
1a017c28:	4639      	mov	r1, r7
1a017c2a:	f7fb fdb7 	bl	1a01379c <__adddf3>
1a017c2e:	4602      	mov	r2, r0
1a017c30:	460b      	mov	r3, r1
1a017c32:	4620      	mov	r0, r4
1a017c34:	4629      	mov	r1, r5
1a017c36:	f7fb fdaf 	bl	1a013798 <__aeabi_dsub>
1a017c3a:	b005      	add	sp, #20
1a017c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a017c40:	4602      	mov	r2, r0
1a017c42:	460b      	mov	r3, r1
1a017c44:	4630      	mov	r0, r6
1a017c46:	4639      	mov	r1, r7
1a017c48:	f7fb ff5a 	bl	1a013b00 <__aeabi_dmul>
1a017c4c:	a30a      	add	r3, pc, #40	; (adr r3, 1a017c78 <__kernel_sin+0x138>)
1a017c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a017c52:	f7fb fda1 	bl	1a013798 <__aeabi_dsub>
1a017c56:	4652      	mov	r2, sl
1a017c58:	465b      	mov	r3, fp
1a017c5a:	f7fb ff51 	bl	1a013b00 <__aeabi_dmul>
1a017c5e:	4622      	mov	r2, r4
1a017c60:	462b      	mov	r3, r5
1a017c62:	f7fb fd9b 	bl	1a01379c <__adddf3>
1a017c66:	b005      	add	sp, #20
1a017c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a017c6c:	4620      	mov	r0, r4
1a017c6e:	4629      	mov	r1, r5
1a017c70:	b005      	add	sp, #20
1a017c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a017c76:	bf00      	nop
1a017c78:	55555549 	.word	0x55555549
1a017c7c:	3fc55555 	.word	0x3fc55555
1a017c80:	3fe00000 	.word	0x3fe00000
1a017c84:	5acfd57c 	.word	0x5acfd57c
1a017c88:	3de5d93a 	.word	0x3de5d93a
1a017c8c:	8a2b9ceb 	.word	0x8a2b9ceb
1a017c90:	3e5ae5e6 	.word	0x3e5ae5e6
1a017c94:	57b1fe7d 	.word	0x57b1fe7d
1a017c98:	3ec71de3 	.word	0x3ec71de3
1a017c9c:	19c161d5 	.word	0x19c161d5
1a017ca0:	3f2a01a0 	.word	0x3f2a01a0
1a017ca4:	1110f8a6 	.word	0x1110f8a6
1a017ca8:	3f811111 	.word	0x3f811111

1a017cac <__kernel_cosf>:
1a017cac:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
1a017cb0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
1a017cb4:	ee06 0a10 	vmov	s12, r0
1a017cb8:	ee06 1a90 	vmov	s13, r1
1a017cbc:	da2e      	bge.n	1a017d1c <__kernel_cosf+0x70>
1a017cbe:	eefd 7ac6 	vcvt.s32.f32	s15, s12
1a017cc2:	ee17 3a90 	vmov	r3, s15
1a017cc6:	2b00      	cmp	r3, #0
1a017cc8:	d064      	beq.n	1a017d94 <__kernel_cosf+0xe8>
1a017cca:	ee26 7a06 	vmul.f32	s14, s12, s12
1a017cce:	eddf 3a34 	vldr	s7, [pc, #208]	; 1a017da0 <__kernel_cosf+0xf4>
1a017cd2:	ed9f 4a34 	vldr	s8, [pc, #208]	; 1a017da4 <__kernel_cosf+0xf8>
1a017cd6:	eddf 4a34 	vldr	s9, [pc, #208]	; 1a017da8 <__kernel_cosf+0xfc>
1a017cda:	ed9f 5a34 	vldr	s10, [pc, #208]	; 1a017dac <__kernel_cosf+0x100>
1a017cde:	eddf 7a34 	vldr	s15, [pc, #208]	; 1a017db0 <__kernel_cosf+0x104>
1a017ce2:	eddf 5a34 	vldr	s11, [pc, #208]	; 1a017db4 <__kernel_cosf+0x108>
1a017ce6:	eea7 4a23 	vfma.f32	s8, s14, s7
1a017cea:	eee7 4a04 	vfma.f32	s9, s14, s8
1a017cee:	eea7 5a24 	vfma.f32	s10, s14, s9
1a017cf2:	eee7 7a05 	vfma.f32	s15, s14, s10
1a017cf6:	eee7 5a27 	vfma.f32	s11, s14, s15
1a017cfa:	ee65 5a87 	vmul.f32	s11, s11, s14
1a017cfe:	ee66 6ac6 	vnmul.f32	s13, s13, s12
1a017d02:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
1a017d06:	eee7 6a25 	vfma.f32	s13, s14, s11
1a017d0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
1a017d0e:	eed7 6a06 	vfnms.f32	s13, s14, s12
1a017d12:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a017d16:	ee17 0a90 	vmov	r0, s15
1a017d1a:	4770      	bx	lr
1a017d1c:	ee26 7a06 	vmul.f32	s14, s12, s12
1a017d20:	eddf 3a1f 	vldr	s7, [pc, #124]	; 1a017da0 <__kernel_cosf+0xf4>
1a017d24:	ed9f 4a1f 	vldr	s8, [pc, #124]	; 1a017da4 <__kernel_cosf+0xf8>
1a017d28:	eddf 4a1f 	vldr	s9, [pc, #124]	; 1a017da8 <__kernel_cosf+0xfc>
1a017d2c:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 1a017dac <__kernel_cosf+0x100>
1a017d30:	eddf 7a1f 	vldr	s15, [pc, #124]	; 1a017db0 <__kernel_cosf+0x104>
1a017d34:	eddf 5a1f 	vldr	s11, [pc, #124]	; 1a017db4 <__kernel_cosf+0x108>
1a017d38:	4a1f      	ldr	r2, [pc, #124]	; (1a017db8 <__kernel_cosf+0x10c>)
1a017d3a:	eea7 4a23 	vfma.f32	s8, s14, s7
1a017d3e:	4293      	cmp	r3, r2
1a017d40:	eee7 4a04 	vfma.f32	s9, s14, s8
1a017d44:	eea7 5a24 	vfma.f32	s10, s14, s9
1a017d48:	eee7 7a05 	vfma.f32	s15, s14, s10
1a017d4c:	eee7 5a27 	vfma.f32	s11, s14, s15
1a017d50:	ee65 5a87 	vmul.f32	s11, s11, s14
1a017d54:	ddd3      	ble.n	1a017cfe <__kernel_cosf+0x52>
1a017d56:	4a19      	ldr	r2, [pc, #100]	; (1a017dbc <__kernel_cosf+0x110>)
1a017d58:	4293      	cmp	r3, r2
1a017d5a:	dc16      	bgt.n	1a017d8a <__kernel_cosf+0xde>
1a017d5c:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
1a017d60:	ee07 3a90 	vmov	s15, r3
1a017d64:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
1a017d68:	ee35 5a67 	vsub.f32	s10, s10, s15
1a017d6c:	ee66 6ac6 	vnmul.f32	s13, s13, s12
1a017d70:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
1a017d74:	eee7 6a25 	vfma.f32	s13, s14, s11
1a017d78:	eed7 7a06 	vfnms.f32	s15, s14, s12
1a017d7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a017d80:	ee75 7a67 	vsub.f32	s15, s10, s15
1a017d84:	ee17 0a90 	vmov	r0, s15
1a017d88:	4770      	bx	lr
1a017d8a:	eeb6 5a07 	vmov.f32	s10, #103	; 0x3f380000  0.7187500
1a017d8e:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
1a017d92:	e7eb      	b.n	1a017d6c <__kernel_cosf+0xc0>
1a017d94:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
1a017d98:	ee17 0a90 	vmov	r0, s15
1a017d9c:	4770      	bx	lr
1a017d9e:	bf00      	nop
1a017da0:	ad47d74e 	.word	0xad47d74e
1a017da4:	310f74f6 	.word	0x310f74f6
1a017da8:	b493f27c 	.word	0xb493f27c
1a017dac:	37d00d01 	.word	0x37d00d01
1a017db0:	bab60b61 	.word	0xbab60b61
1a017db4:	3d2aaaab 	.word	0x3d2aaaab
1a017db8:	3e999999 	.word	0x3e999999
1a017dbc:	3f480000 	.word	0x3f480000

1a017dc0 <__kernel_rem_pio2f>:
1a017dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a017dc4:	ed2d 8b04 	vpush	{d8-d9}
1a017dc8:	b0d7      	sub	sp, #348	; 0x15c
1a017dca:	1e5e      	subs	r6, r3, #1
1a017dcc:	4ca9      	ldr	r4, [pc, #676]	; (1a018074 <__kernel_rem_pio2f+0x2b4>)
1a017dce:	9d64      	ldr	r5, [sp, #400]	; 0x190
1a017dd0:	9302      	str	r3, [sp, #8]
1a017dd2:	1ed3      	subs	r3, r2, #3
1a017dd4:	bf48      	it	mi
1a017dd6:	1d13      	addmi	r3, r2, #4
1a017dd8:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
1a017ddc:	10db      	asrs	r3, r3, #3
1a017dde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a017de2:	f103 0901 	add.w	r9, r3, #1
1a017de6:	468a      	mov	sl, r1
1a017de8:	19a9      	adds	r1, r5, r6
1a017dea:	9303      	str	r3, [sp, #12]
1a017dec:	4680      	mov	r8, r0
1a017dee:	eba2 09c9 	sub.w	r9, r2, r9, lsl #3
1a017df2:	eba3 0306 	sub.w	r3, r3, r6
1a017df6:	d414      	bmi.n	1a017e22 <__kernel_rem_pio2f+0x62>
1a017df8:	4419      	add	r1, r3
1a017dfa:	9865      	ldr	r0, [sp, #404]	; 0x194
1a017dfc:	3101      	adds	r1, #1
1a017dfe:	aa1a      	add	r2, sp, #104	; 0x68
1a017e00:	2b00      	cmp	r3, #0
1a017e02:	bfaa      	itet	ge
1a017e04:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
1a017e08:	eddf 7a9b 	vldrlt	s15, [pc, #620]	; 1a018078 <__kernel_rem_pio2f+0x2b8>
1a017e0c:	ee07 4a90 	vmovge	s15, r4
1a017e10:	f103 0301 	add.w	r3, r3, #1
1a017e14:	bfa8      	it	ge
1a017e16:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
1a017e1a:	428b      	cmp	r3, r1
1a017e1c:	ece2 7a01 	vstmia	r2!, {s15}
1a017e20:	d1ee      	bne.n	1a017e00 <__kernel_rem_pio2f+0x40>
1a017e22:	2d00      	cmp	r5, #0
1a017e24:	f2c0 82e9 	blt.w	1a0183fa <__kernel_rem_pio2f+0x63a>
1a017e28:	9b02      	ldr	r3, [sp, #8]
1a017e2a:	af42      	add	r7, sp, #264	; 0x108
1a017e2c:	009c      	lsls	r4, r3, #2
1a017e2e:	f105 0e01 	add.w	lr, r5, #1
1a017e32:	ab1a      	add	r3, sp, #104	; 0x68
1a017e34:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
1a017e38:	1918      	adds	r0, r3, r4
1a017e3a:	eb08 0104 	add.w	r1, r8, r4
1a017e3e:	2e00      	cmp	r6, #0
1a017e40:	f2c0 81d1 	blt.w	1a0181e6 <__kernel_rem_pio2f+0x426>
1a017e44:	eddf 7a8c 	vldr	s15, [pc, #560]	; 1a018078 <__kernel_rem_pio2f+0x2b8>
1a017e48:	4643      	mov	r3, r8
1a017e4a:	4602      	mov	r2, r0
1a017e4c:	ecf3 6a01 	vldmia	r3!, {s13}
1a017e50:	ed32 7a01 	vldmdb	r2!, {s14}
1a017e54:	428b      	cmp	r3, r1
1a017e56:	eee6 7a87 	vfma.f32	s15, s13, s14
1a017e5a:	d1f7      	bne.n	1a017e4c <__kernel_rem_pio2f+0x8c>
1a017e5c:	ece7 7a01 	vstmia	r7!, {s15}
1a017e60:	4577      	cmp	r7, lr
1a017e62:	f100 0004 	add.w	r0, r0, #4
1a017e66:	d1ea      	bne.n	1a017e3e <__kernel_rem_pio2f+0x7e>
1a017e68:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
1a017e6c:	3b02      	subs	r3, #2
1a017e6e:	009b      	lsls	r3, r3, #2
1a017e70:	aa06      	add	r2, sp, #24
1a017e72:	1d1f      	adds	r7, r3, #4
1a017e74:	eddf 8a82 	vldr	s17, [pc, #520]	; 1a018080 <__kernel_rem_pio2f+0x2c0>
1a017e78:	ed9f 8a80 	vldr	s16, [pc, #512]	; 1a01807c <__kernel_rem_pio2f+0x2bc>
1a017e7c:	f8cd a014 	str.w	sl, [sp, #20]
1a017e80:	4413      	add	r3, r2
1a017e82:	4444      	add	r4, r8
1a017e84:	4417      	add	r7, r2
1a017e86:	9304      	str	r3, [sp, #16]
1a017e88:	46ab      	mov	fp, r5
1a017e8a:	ab56      	add	r3, sp, #344	; 0x158
1a017e8c:	eb03 038b 	add.w	r3, r3, fp, lsl #2
1a017e90:	f1bb 0f00 	cmp.w	fp, #0
1a017e94:	ed53 6a14 	vldr	s13, [r3, #-80]	; 0xffffffb0
1a017e98:	dd19      	ble.n	1a017ece <__kernel_rem_pio2f+0x10e>
1a017e9a:	a942      	add	r1, sp, #264	; 0x108
1a017e9c:	eb01 038b 	add.w	r3, r1, fp, lsl #2
1a017ea0:	aa05      	add	r2, sp, #20
1a017ea2:	ee66 7aa8 	vmul.f32	s15, s13, s17
1a017ea6:	eeb0 7a66 	vmov.f32	s14, s13
1a017eaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a017eae:	ed33 6a01 	vldmdb	r3!, {s12}
1a017eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a017eb6:	428b      	cmp	r3, r1
1a017eb8:	eea7 7ac8 	vfms.f32	s14, s15, s16
1a017ebc:	ee77 6a86 	vadd.f32	s13, s15, s12
1a017ec0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
1a017ec4:	ee17 0a10 	vmov	r0, s14
1a017ec8:	f842 0f04 	str.w	r0, [r2, #4]!
1a017ecc:	d1e9      	bne.n	1a017ea2 <__kernel_rem_pio2f+0xe2>
1a017ece:	4649      	mov	r1, r9
1a017ed0:	ee16 0a90 	vmov	r0, s13
1a017ed4:	f000 fc54 	bl	1a018780 <scalbnf>
1a017ed8:	ee09 0a10 	vmov	s18, r0
1a017edc:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
1a017ee0:	ee69 7a27 	vmul.f32	s15, s18, s15
1a017ee4:	ee17 0a90 	vmov	r0, s15
1a017ee8:	f7fd fad2 	bl	1a015490 <floorf>
1a017eec:	ee07 0a10 	vmov	s14, r0
1a017ef0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
1a017ef4:	eea7 9a67 	vfms.f32	s18, s14, s15
1a017ef8:	f1b9 0f00 	cmp.w	r9, #0
1a017efc:	eebd 7ac9 	vcvt.s32.f32	s14, s18
1a017f00:	eef0 7a49 	vmov.f32	s15, s18
1a017f04:	eeb8 9ac7 	vcvt.f32.s32	s18, s14
1a017f08:	ee17 aa10 	vmov	sl, s14
1a017f0c:	ee37 9ac9 	vsub.f32	s18, s15, s18
1a017f10:	f340 814b 	ble.w	1a0181aa <__kernel_rem_pio2f+0x3ea>
1a017f14:	f10b 30ff 	add.w	r0, fp, #4294967295
1a017f18:	aa06      	add	r2, sp, #24
1a017f1a:	f1c9 0308 	rsb	r3, r9, #8
1a017f1e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
1a017f22:	fa42 f103 	asr.w	r1, r2, r3
1a017f26:	fa01 f303 	lsl.w	r3, r1, r3
1a017f2a:	f10d 0e18 	add.w	lr, sp, #24
1a017f2e:	1ad2      	subs	r2, r2, r3
1a017f30:	f1c9 0307 	rsb	r3, r9, #7
1a017f34:	fa42 f303 	asr.w	r3, r2, r3
1a017f38:	f84e 2020 	str.w	r2, [lr, r0, lsl #2]
1a017f3c:	448a      	add	sl, r1
1a017f3e:	9301      	str	r3, [sp, #4]
1a017f40:	9b01      	ldr	r3, [sp, #4]
1a017f42:	2b00      	cmp	r3, #0
1a017f44:	dd36      	ble.n	1a017fb4 <__kernel_rem_pio2f+0x1f4>
1a017f46:	f1bb 0f00 	cmp.w	fp, #0
1a017f4a:	f10a 0a01 	add.w	sl, sl, #1
1a017f4e:	f340 8227 	ble.w	1a0183a0 <__kernel_rem_pio2f+0x5e0>
1a017f52:	2100      	movs	r1, #0
1a017f54:	460a      	mov	r2, r1
1a017f56:	a805      	add	r0, sp, #20
1a017f58:	46a6      	mov	lr, r4
1a017f5a:	e007      	b.n	1a017f6c <__kernel_rem_pio2f+0x1ac>
1a017f5c:	f5c3 7480 	rsb	r4, r3, #256	; 0x100
1a017f60:	b10b      	cbz	r3, 1a017f66 <__kernel_rem_pio2f+0x1a6>
1a017f62:	6004      	str	r4, [r0, #0]
1a017f64:	2201      	movs	r2, #1
1a017f66:	3101      	adds	r1, #1
1a017f68:	458b      	cmp	fp, r1
1a017f6a:	dd0b      	ble.n	1a017f84 <__kernel_rem_pio2f+0x1c4>
1a017f6c:	f850 3f04 	ldr.w	r3, [r0, #4]!
1a017f70:	2a00      	cmp	r2, #0
1a017f72:	d0f3      	beq.n	1a017f5c <__kernel_rem_pio2f+0x19c>
1a017f74:	3101      	adds	r1, #1
1a017f76:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
1a017f7a:	458b      	cmp	fp, r1
1a017f7c:	6003      	str	r3, [r0, #0]
1a017f7e:	f04f 0201 	mov.w	r2, #1
1a017f82:	dcf3      	bgt.n	1a017f6c <__kernel_rem_pio2f+0x1ac>
1a017f84:	4674      	mov	r4, lr
1a017f86:	f1b9 0f00 	cmp.w	r9, #0
1a017f8a:	dd10      	ble.n	1a017fae <__kernel_rem_pio2f+0x1ee>
1a017f8c:	f1b9 0f01 	cmp.w	r9, #1
1a017f90:	f000 8114 	beq.w	1a0181bc <__kernel_rem_pio2f+0x3fc>
1a017f94:	f1b9 0f02 	cmp.w	r9, #2
1a017f98:	d109      	bne.n	1a017fae <__kernel_rem_pio2f+0x1ee>
1a017f9a:	f10b 31ff 	add.w	r1, fp, #4294967295
1a017f9e:	ab06      	add	r3, sp, #24
1a017fa0:	a806      	add	r0, sp, #24
1a017fa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
1a017fa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a017faa:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
1a017fae:	9b01      	ldr	r3, [sp, #4]
1a017fb0:	2b02      	cmp	r3, #2
1a017fb2:	d067      	beq.n	1a018084 <__kernel_rem_pio2f+0x2c4>
1a017fb4:	eeb5 9a40 	vcmp.f32	s18, #0.0
1a017fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a017fbc:	d176      	bne.n	1a0180ac <__kernel_rem_pio2f+0x2ec>
1a017fbe:	f10b 3eff 	add.w	lr, fp, #4294967295
1a017fc2:	4575      	cmp	r5, lr
1a017fc4:	dc0f      	bgt.n	1a017fe6 <__kernel_rem_pio2f+0x226>
1a017fc6:	f10b 4180 	add.w	r1, fp, #1073741824	; 0x40000000
1a017fca:	3901      	subs	r1, #1
1a017fcc:	ab06      	add	r3, sp, #24
1a017fce:	eb03 0181 	add.w	r1, r3, r1, lsl #2
1a017fd2:	2000      	movs	r0, #0
1a017fd4:	f851 3904 	ldr.w	r3, [r1], #-4
1a017fd8:	42b9      	cmp	r1, r7
1a017fda:	ea40 0003 	orr.w	r0, r0, r3
1a017fde:	d1f9      	bne.n	1a017fd4 <__kernel_rem_pio2f+0x214>
1a017fe0:	2800      	cmp	r0, #0
1a017fe2:	f040 8113 	bne.w	1a01820c <__kernel_rem_pio2f+0x44c>
1a017fe6:	1e6b      	subs	r3, r5, #1
1a017fe8:	aa06      	add	r2, sp, #24
1a017fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a017fee:	2b00      	cmp	r3, #0
1a017ff0:	f040 81d3 	bne.w	1a01839a <__kernel_rem_pio2f+0x5da>
1a017ff4:	9b04      	ldr	r3, [sp, #16]
1a017ff6:	f04f 0e01 	mov.w	lr, #1
1a017ffa:	f853 2904 	ldr.w	r2, [r3], #-4
1a017ffe:	f10e 0e01 	add.w	lr, lr, #1
1a018002:	2a00      	cmp	r2, #0
1a018004:	d0f9      	beq.n	1a017ffa <__kernel_rem_pio2f+0x23a>
1a018006:	44de      	add	lr, fp
1a018008:	f10b 0c01 	add.w	ip, fp, #1
1a01800c:	45f4      	cmp	ip, lr
1a01800e:	dc2f      	bgt.n	1a018070 <__kernel_rem_pio2f+0x2b0>
1a018010:	9b03      	ldr	r3, [sp, #12]
1a018012:	9a02      	ldr	r2, [sp, #8]
1a018014:	eb0c 0003 	add.w	r0, ip, r3
1a018018:	eb02 010b 	add.w	r1, r2, fp
1a01801c:	eb0e 0302 	add.w	r3, lr, r2
1a018020:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a018024:	9a65      	ldr	r2, [sp, #404]	; 0x194
1a018026:	3801      	subs	r0, #1
1a018028:	eb02 0080 	add.w	r0, r2, r0, lsl #2
1a01802c:	aa1a      	add	r2, sp, #104	; 0x68
1a01802e:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
1a018032:	ab42      	add	r3, sp, #264	; 0x108
1a018034:	eb02 0181 	add.w	r1, r2, r1, lsl #2
1a018038:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
1a01803c:	f850 3f04 	ldr.w	r3, [r0, #4]!
1a018040:	ee07 3a90 	vmov	s15, r3
1a018044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a018048:	2e00      	cmp	r6, #0
1a01804a:	ece1 7a01 	vstmia	r1!, {s15}
1a01804e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 1a018078 <__kernel_rem_pio2f+0x2b8>
1a018052:	db09      	blt.n	1a018068 <__kernel_rem_pio2f+0x2a8>
1a018054:	4643      	mov	r3, r8
1a018056:	460a      	mov	r2, r1
1a018058:	ecf3 6a01 	vldmia	r3!, {s13}
1a01805c:	ed32 7a01 	vldmdb	r2!, {s14}
1a018060:	42a3      	cmp	r3, r4
1a018062:	eee6 7a87 	vfma.f32	s15, s13, s14
1a018066:	d1f7      	bne.n	1a018058 <__kernel_rem_pio2f+0x298>
1a018068:	4559      	cmp	r1, fp
1a01806a:	ecec 7a01 	vstmia	ip!, {s15}
1a01806e:	d1e5      	bne.n	1a01803c <__kernel_rem_pio2f+0x27c>
1a018070:	46f3      	mov	fp, lr
1a018072:	e70a      	b.n	1a017e8a <__kernel_rem_pio2f+0xca>
1a018074:	1a01b230 	.word	0x1a01b230
1a018078:	00000000 	.word	0x00000000
1a01807c:	43800000 	.word	0x43800000
1a018080:	3b800000 	.word	0x3b800000
1a018084:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
1a018088:	ee37 9ac9 	vsub.f32	s18, s15, s18
1a01808c:	2a00      	cmp	r2, #0
1a01808e:	d091      	beq.n	1a017fb4 <__kernel_rem_pio2f+0x1f4>
1a018090:	ee17 0a90 	vmov	r0, s15
1a018094:	4649      	mov	r1, r9
1a018096:	f000 fb73 	bl	1a018780 <scalbnf>
1a01809a:	ee07 0a90 	vmov	s15, r0
1a01809e:	ee39 9a67 	vsub.f32	s18, s18, s15
1a0180a2:	eeb5 9a40 	vcmp.f32	s18, #0.0
1a0180a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0180aa:	d088      	beq.n	1a017fbe <__kernel_rem_pio2f+0x1fe>
1a0180ac:	f1c9 0100 	rsb	r1, r9, #0
1a0180b0:	ee19 0a10 	vmov	r0, s18
1a0180b4:	ee09 aa90 	vmov	s19, sl
1a0180b8:	f8dd a014 	ldr.w	sl, [sp, #20]
1a0180bc:	f000 fb60 	bl	1a018780 <scalbnf>
1a0180c0:	ed5f 6a12 	vldr	s13, [pc, #-72]	; 1a01807c <__kernel_rem_pio2f+0x2bc>
1a0180c4:	ee07 0a10 	vmov	s14, r0
1a0180c8:	eeb4 7ae6 	vcmpe.f32	s14, s13
1a0180cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0180d0:	f2c0 8171 	blt.w	1a0183b6 <__kernel_rem_pio2f+0x5f6>
1a0180d4:	ed5f 7a16 	vldr	s15, [pc, #-88]	; 1a018080 <__kernel_rem_pio2f+0x2c0>
1a0180d8:	ee67 7a27 	vmul.f32	s15, s14, s15
1a0180dc:	a906      	add	r1, sp, #24
1a0180de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a0180e2:	f10b 0301 	add.w	r3, fp, #1
1a0180e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a0180ea:	f109 0908 	add.w	r9, r9, #8
1a0180ee:	eea7 7ae6 	vfms.f32	s14, s15, s13
1a0180f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a0180f6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
1a0180fa:	ee17 2a10 	vmov	r2, s14
1a0180fe:	f841 202b 	str.w	r2, [r1, fp, lsl #2]
1a018102:	ee17 2a90 	vmov	r2, s15
1a018106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a01810a:	4649      	mov	r1, r9
1a01810c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
1a018110:	9302      	str	r3, [sp, #8]
1a018112:	f000 fb35 	bl	1a018780 <scalbnf>
1a018116:	9b02      	ldr	r3, [sp, #8]
1a018118:	2b00      	cmp	r3, #0
1a01811a:	ee07 0a10 	vmov	s14, r0
1a01811e:	f2c0 8156 	blt.w	1a0183ce <__kernel_rem_pio2f+0x60e>
1a018122:	009f      	lsls	r7, r3, #2
1a018124:	ac42      	add	r4, sp, #264	; 0x108
1a018126:	1d38      	adds	r0, r7, #4
1a018128:	eb04 0e07 	add.w	lr, r4, r7
1a01812c:	aa06      	add	r2, sp, #24
1a01812e:	ed5f 6a2c 	vldr	s13, [pc, #-176]	; 1a018080 <__kernel_rem_pio2f+0x2c0>
1a018132:	4410      	add	r0, r2
1a018134:	f10e 0104 	add.w	r1, lr, #4
1a018138:	ed70 7a01 	vldmdb	r0!, {s15}
1a01813c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a018140:	ee67 7a87 	vmul.f32	s15, s15, s14
1a018144:	ee27 7a26 	vmul.f32	s14, s14, s13
1a018148:	ed61 7a01 	vstmdb	r1!, {s15}
1a01814c:	42a1      	cmp	r1, r4
1a01814e:	d1f3      	bne.n	1a018138 <__kernel_rem_pio2f+0x378>
1a018150:	f50d 7c82 	add.w	ip, sp, #260	; 0x104
1a018154:	2600      	movs	r6, #0
1a018156:	2d00      	cmp	r5, #0
1a018158:	f2c0 8111 	blt.w	1a01837e <__kernel_rem_pio2f+0x5be>
1a01815c:	48ab      	ldr	r0, [pc, #684]	; (1a01840c <__kernel_rem_pio2f+0x64c>)
1a01815e:	ed9f 7aac 	vldr	s14, [pc, #688]	; 1a018410 <__kernel_rem_pio2f+0x650>
1a018162:	eddf 7aac 	vldr	s15, [pc, #688]	; 1a018414 <__kernel_rem_pio2f+0x654>
1a018166:	4671      	mov	r1, lr
1a018168:	2200      	movs	r2, #0
1a01816a:	e004      	b.n	1a018176 <__kernel_rem_pio2f+0x3b6>
1a01816c:	4296      	cmp	r6, r2
1a01816e:	db09      	blt.n	1a018184 <__kernel_rem_pio2f+0x3c4>
1a018170:	3004      	adds	r0, #4
1a018172:	ed90 7a00 	vldr	s14, [r0]
1a018176:	ecf1 6a01 	vldmia	r1!, {s13}
1a01817a:	3201      	adds	r2, #1
1a01817c:	4295      	cmp	r5, r2
1a01817e:	eee6 7a87 	vfma.f32	s15, s13, s14
1a018182:	daf3      	bge.n	1a01816c <__kernel_rem_pio2f+0x3ac>
1a018184:	f1ae 0e04 	sub.w	lr, lr, #4
1a018188:	aa56      	add	r2, sp, #344	; 0x158
1a01818a:	eb02 0286 	add.w	r2, r2, r6, lsl #2
1a01818e:	45f4      	cmp	ip, lr
1a018190:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
1a018194:	f106 0601 	add.w	r6, r6, #1
1a018198:	d1dd      	bne.n	1a018156 <__kernel_rem_pio2f+0x396>
1a01819a:	9a64      	ldr	r2, [sp, #400]	; 0x190
1a01819c:	2a03      	cmp	r2, #3
1a01819e:	f200 80ab 	bhi.w	1a0182f8 <__kernel_rem_pio2f+0x538>
1a0181a2:	e8df f002 	tbb	[pc, r2]
1a0181a6:	b2d9      	.short	0xb2d9
1a0181a8:	4db2      	.short	0x4db2
1a0181aa:	d112      	bne.n	1a0181d2 <__kernel_rem_pio2f+0x412>
1a0181ac:	f10b 33ff 	add.w	r3, fp, #4294967295
1a0181b0:	aa06      	add	r2, sp, #24
1a0181b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a0181b6:	1213      	asrs	r3, r2, #8
1a0181b8:	9301      	str	r3, [sp, #4]
1a0181ba:	e6c1      	b.n	1a017f40 <__kernel_rem_pio2f+0x180>
1a0181bc:	f10b 31ff 	add.w	r1, fp, #4294967295
1a0181c0:	ab06      	add	r3, sp, #24
1a0181c2:	a806      	add	r0, sp, #24
1a0181c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
1a0181c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a0181cc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
1a0181d0:	e6ed      	b.n	1a017fae <__kernel_rem_pio2f+0x1ee>
1a0181d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
1a0181d6:	eeb4 9ae7 	vcmpe.f32	s18, s15
1a0181da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0181de:	da0c      	bge.n	1a0181fa <__kernel_rem_pio2f+0x43a>
1a0181e0:	2300      	movs	r3, #0
1a0181e2:	9301      	str	r3, [sp, #4]
1a0181e4:	e6e6      	b.n	1a017fb4 <__kernel_rem_pio2f+0x1f4>
1a0181e6:	eddf 7a8b 	vldr	s15, [pc, #556]	; 1a018414 <__kernel_rem_pio2f+0x654>
1a0181ea:	ece7 7a01 	vstmia	r7!, {s15}
1a0181ee:	4577      	cmp	r7, lr
1a0181f0:	f100 0004 	add.w	r0, r0, #4
1a0181f4:	f47f ae23 	bne.w	1a017e3e <__kernel_rem_pio2f+0x7e>
1a0181f8:	e636      	b.n	1a017e68 <__kernel_rem_pio2f+0xa8>
1a0181fa:	f1bb 0f00 	cmp.w	fp, #0
1a0181fe:	f10a 0a01 	add.w	sl, sl, #1
1a018202:	f340 80f3 	ble.w	1a0183ec <__kernel_rem_pio2f+0x62c>
1a018206:	2302      	movs	r3, #2
1a018208:	9301      	str	r3, [sp, #4]
1a01820a:	e6a2      	b.n	1a017f52 <__kernel_rem_pio2f+0x192>
1a01820c:	aa06      	add	r2, sp, #24
1a01820e:	ee09 aa90 	vmov	s19, sl
1a018212:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
1a018216:	f8dd a014 	ldr.w	sl, [sp, #20]
1a01821a:	4673      	mov	r3, lr
1a01821c:	f1a9 0908 	sub.w	r9, r9, #8
1a018220:	2900      	cmp	r1, #0
1a018222:	f47f af72 	bne.w	1a01810a <__kernel_rem_pio2f+0x34a>
1a018226:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
1a01822a:	3901      	subs	r1, #1
1a01822c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
1a018230:	f851 2904 	ldr.w	r2, [r1], #-4
1a018234:	3b01      	subs	r3, #1
1a018236:	f1a9 0908 	sub.w	r9, r9, #8
1a01823a:	2a00      	cmp	r2, #0
1a01823c:	d0f8      	beq.n	1a018230 <__kernel_rem_pio2f+0x470>
1a01823e:	e764      	b.n	1a01810a <__kernel_rem_pio2f+0x34a>
1a018240:	2b00      	cmp	r3, #0
1a018242:	f340 80c1 	ble.w	1a0183c8 <__kernel_rem_pio2f+0x608>
1a018246:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
1a01824a:	3901      	subs	r1, #1
1a01824c:	0088      	lsls	r0, r1, #2
1a01824e:	aa56      	add	r2, sp, #344	; 0x158
1a018250:	19d5      	adds	r5, r2, r7
1a018252:	1d04      	adds	r4, r0, #4
1a018254:	aa2e      	add	r2, sp, #184	; 0xb8
1a018256:	3008      	adds	r0, #8
1a018258:	ed15 7a28 	vldr	s14, [r5, #-160]	; 0xffffff60
1a01825c:	4414      	add	r4, r2
1a01825e:	4410      	add	r0, r2
1a018260:	ad2f      	add	r5, sp, #188	; 0xbc
1a018262:	ed74 7a01 	vldmdb	r4!, {s15}
1a018266:	ee77 6a87 	vadd.f32	s13, s15, s14
1a01826a:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a01826e:	ee77 7a87 	vadd.f32	s15, s15, s14
1a018272:	eeb0 7a66 	vmov.f32	s14, s13
1a018276:	ed60 7a01 	vstmdb	r0!, {s15}
1a01827a:	42a8      	cmp	r0, r5
1a01827c:	edc4 6a00 	vstr	s13, [r4]
1a018280:	d1ef      	bne.n	1a018262 <__kernel_rem_pio2f+0x4a2>
1a018282:	2b01      	cmp	r3, #1
1a018284:	f340 80a0 	ble.w	1a0183c8 <__kernel_rem_pio2f+0x608>
1a018288:	0089      	lsls	r1, r1, #2
1a01828a:	ab56      	add	r3, sp, #344	; 0x158
1a01828c:	441f      	add	r7, r3
1a01828e:	f101 0008 	add.w	r0, r1, #8
1a018292:	ab2e      	add	r3, sp, #184	; 0xb8
1a018294:	4418      	add	r0, r3
1a018296:	3104      	adds	r1, #4
1a018298:	ed17 7a28 	vldr	s14, [r7, #-160]	; 0xffffff60
1a01829c:	440b      	add	r3, r1
1a01829e:	ac30      	add	r4, sp, #192	; 0xc0
1a0182a0:	4601      	mov	r1, r0
1a0182a2:	ed73 7a01 	vldmdb	r3!, {s15}
1a0182a6:	ee77 6a27 	vadd.f32	s13, s14, s15
1a0182aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a0182ae:	ee77 7a87 	vadd.f32	s15, s15, s14
1a0182b2:	eeb0 7a66 	vmov.f32	s14, s13
1a0182b6:	ed61 7a01 	vstmdb	r1!, {s15}
1a0182ba:	428c      	cmp	r4, r1
1a0182bc:	edc3 6a00 	vstr	s13, [r3]
1a0182c0:	d1ef      	bne.n	1a0182a2 <__kernel_rem_pio2f+0x4e2>
1a0182c2:	eddf 7a54 	vldr	s15, [pc, #336]	; 1a018414 <__kernel_rem_pio2f+0x654>
1a0182c6:	ed30 7a01 	vldmdb	r0!, {s14}
1a0182ca:	4284      	cmp	r4, r0
1a0182cc:	ee77 7a87 	vadd.f32	s15, s15, s14
1a0182d0:	d1f9      	bne.n	1a0182c6 <__kernel_rem_pio2f+0x506>
1a0182d2:	9b01      	ldr	r3, [sp, #4]
1a0182d4:	2b00      	cmp	r3, #0
1a0182d6:	d065      	beq.n	1a0183a4 <__kernel_rem_pio2f+0x5e4>
1a0182d8:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
1a0182dc:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
1a0182e0:	eef1 7a67 	vneg.f32	s15, s15
1a0182e4:	eef1 6a66 	vneg.f32	s13, s13
1a0182e8:	eeb1 7a47 	vneg.f32	s14, s14
1a0182ec:	edca 7a02 	vstr	s15, [sl, #8]
1a0182f0:	edca 6a00 	vstr	s13, [sl]
1a0182f4:	ed8a 7a01 	vstr	s14, [sl, #4]
1a0182f8:	ee19 3a90 	vmov	r3, s19
1a0182fc:	f003 0007 	and.w	r0, r3, #7
1a018300:	b057      	add	sp, #348	; 0x15c
1a018302:	ecbd 8b04 	vpop	{d8-d9}
1a018306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a01830a:	1d39      	adds	r1, r7, #4
1a01830c:	a82e      	add	r0, sp, #184	; 0xb8
1a01830e:	eddf 7a41 	vldr	s15, [pc, #260]	; 1a018414 <__kernel_rem_pio2f+0x654>
1a018312:	4401      	add	r1, r0
1a018314:	ed31 7a01 	vldmdb	r1!, {s14}
1a018318:	4281      	cmp	r1, r0
1a01831a:	ee77 7a87 	vadd.f32	s15, s15, s14
1a01831e:	d1f9      	bne.n	1a018314 <__kernel_rem_pio2f+0x554>
1a018320:	9a01      	ldr	r2, [sp, #4]
1a018322:	b37a      	cbz	r2, 1a018384 <__kernel_rem_pio2f+0x5c4>
1a018324:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
1a018328:	eeb1 7a67 	vneg.f32	s14, s15
1a01832c:	2b00      	cmp	r3, #0
1a01832e:	ee76 7ae7 	vsub.f32	s15, s13, s15
1a018332:	ed8a 7a00 	vstr	s14, [sl]
1a018336:	dd0a      	ble.n	1a01834e <__kernel_rem_pio2f+0x58e>
1a018338:	a82f      	add	r0, sp, #188	; 0xbc
1a01833a:	2101      	movs	r1, #1
1a01833c:	ecb0 7a01 	vldmia	r0!, {s14}
1a018340:	3101      	adds	r1, #1
1a018342:	428b      	cmp	r3, r1
1a018344:	ee77 7a87 	vadd.f32	s15, s15, s14
1a018348:	daf8      	bge.n	1a01833c <__kernel_rem_pio2f+0x57c>
1a01834a:	9b01      	ldr	r3, [sp, #4]
1a01834c:	b10b      	cbz	r3, 1a018352 <__kernel_rem_pio2f+0x592>
1a01834e:	eef1 7a67 	vneg.f32	s15, s15
1a018352:	edca 7a01 	vstr	s15, [sl, #4]
1a018356:	e7cf      	b.n	1a0182f8 <__kernel_rem_pio2f+0x538>
1a018358:	aa56      	add	r2, sp, #344	; 0x158
1a01835a:	19d1      	adds	r1, r2, r7
1a01835c:	eddf 7a2d 	vldr	s15, [pc, #180]	; 1a018414 <__kernel_rem_pio2f+0x654>
1a018360:	399c      	subs	r1, #156	; 0x9c
1a018362:	ed31 7a01 	vldmdb	r1!, {s14}
1a018366:	3b01      	subs	r3, #1
1a018368:	1c5a      	adds	r2, r3, #1
1a01836a:	ee77 7a87 	vadd.f32	s15, s15, s14
1a01836e:	d1f8      	bne.n	1a018362 <__kernel_rem_pio2f+0x5a2>
1a018370:	9b01      	ldr	r3, [sp, #4]
1a018372:	b10b      	cbz	r3, 1a018378 <__kernel_rem_pio2f+0x5b8>
1a018374:	eef1 7a67 	vneg.f32	s15, s15
1a018378:	edca 7a00 	vstr	s15, [sl]
1a01837c:	e7bc      	b.n	1a0182f8 <__kernel_rem_pio2f+0x538>
1a01837e:	eddf 7a25 	vldr	s15, [pc, #148]	; 1a018414 <__kernel_rem_pio2f+0x654>
1a018382:	e6ff      	b.n	1a018184 <__kernel_rem_pio2f+0x3c4>
1a018384:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
1a018388:	edca 7a00 	vstr	s15, [sl]
1a01838c:	2b00      	cmp	r3, #0
1a01838e:	ee77 7a67 	vsub.f32	s15, s14, s15
1a018392:	dcd1      	bgt.n	1a018338 <__kernel_rem_pio2f+0x578>
1a018394:	edca 7a01 	vstr	s15, [sl, #4]
1a018398:	e7ae      	b.n	1a0182f8 <__kernel_rem_pio2f+0x538>
1a01839a:	f04f 0e01 	mov.w	lr, #1
1a01839e:	e632      	b.n	1a018006 <__kernel_rem_pio2f+0x246>
1a0183a0:	2200      	movs	r2, #0
1a0183a2:	e5f0      	b.n	1a017f86 <__kernel_rem_pio2f+0x1c6>
1a0183a4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
1a0183a6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
1a0183a8:	edca 7a02 	vstr	s15, [sl, #8]
1a0183ac:	f8ca 2000 	str.w	r2, [sl]
1a0183b0:	f8ca 3004 	str.w	r3, [sl, #4]
1a0183b4:	e7a0      	b.n	1a0182f8 <__kernel_rem_pio2f+0x538>
1a0183b6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
1a0183ba:	a906      	add	r1, sp, #24
1a0183bc:	ee17 2a10 	vmov	r2, s14
1a0183c0:	465b      	mov	r3, fp
1a0183c2:	f841 202b 	str.w	r2, [r1, fp, lsl #2]
1a0183c6:	e6a0      	b.n	1a01810a <__kernel_rem_pio2f+0x34a>
1a0183c8:	eddf 7a12 	vldr	s15, [pc, #72]	; 1a018414 <__kernel_rem_pio2f+0x654>
1a0183cc:	e781      	b.n	1a0182d2 <__kernel_rem_pio2f+0x512>
1a0183ce:	9a64      	ldr	r2, [sp, #400]	; 0x190
1a0183d0:	2a03      	cmp	r2, #3
1a0183d2:	d891      	bhi.n	1a0182f8 <__kernel_rem_pio2f+0x538>
1a0183d4:	a101      	add	r1, pc, #4	; (adr r1, 1a0183dc <__kernel_rem_pio2f+0x61c>)
1a0183d6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
1a0183da:	bf00      	nop
1a0183dc:	1a018407 	.word	0x1a018407
1a0183e0:	1a018401 	.word	0x1a018401
1a0183e4:	1a018401 	.word	0x1a018401
1a0183e8:	1a0183c9 	.word	0x1a0183c9
1a0183ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
1a0183f0:	2302      	movs	r3, #2
1a0183f2:	ee37 9ac9 	vsub.f32	s18, s15, s18
1a0183f6:	9301      	str	r3, [sp, #4]
1a0183f8:	e5dc      	b.n	1a017fb4 <__kernel_rem_pio2f+0x1f4>
1a0183fa:	9b02      	ldr	r3, [sp, #8]
1a0183fc:	009c      	lsls	r4, r3, #2
1a0183fe:	e533      	b.n	1a017e68 <__kernel_rem_pio2f+0xa8>
1a018400:	eddf 7a04 	vldr	s15, [pc, #16]	; 1a018414 <__kernel_rem_pio2f+0x654>
1a018404:	e78c      	b.n	1a018320 <__kernel_rem_pio2f+0x560>
1a018406:	eddf 7a03 	vldr	s15, [pc, #12]	; 1a018414 <__kernel_rem_pio2f+0x654>
1a01840a:	e7b1      	b.n	1a018370 <__kernel_rem_pio2f+0x5b0>
1a01840c:	1a01b23c 	.word	0x1a01b23c
1a018410:	3fc90000 	.word	0x3fc90000
1a018414:	00000000 	.word	0x00000000

1a018418 <__kernel_sinf>:
1a018418:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
1a01841c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
1a018420:	ee07 0a90 	vmov	s15, r0
1a018424:	ee06 1a10 	vmov	s12, r1
1a018428:	da04      	bge.n	1a018434 <__kernel_sinf+0x1c>
1a01842a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
1a01842e:	ee17 3a10 	vmov	r3, s14
1a018432:	b323      	cbz	r3, 1a01847e <__kernel_sinf+0x66>
1a018434:	ee27 7aa7 	vmul.f32	s14, s15, s15
1a018438:	ed9f 4a17 	vldr	s8, [pc, #92]	; 1a018498 <__kernel_sinf+0x80>
1a01843c:	eddf 4a17 	vldr	s9, [pc, #92]	; 1a01849c <__kernel_sinf+0x84>
1a018440:	ed9f 5a17 	vldr	s10, [pc, #92]	; 1a0184a0 <__kernel_sinf+0x88>
1a018444:	eddf 5a17 	vldr	s11, [pc, #92]	; 1a0184a4 <__kernel_sinf+0x8c>
1a018448:	eddf 6a17 	vldr	s13, [pc, #92]	; 1a0184a8 <__kernel_sinf+0x90>
1a01844c:	eee7 4a04 	vfma.f32	s9, s14, s8
1a018450:	ee27 4a87 	vmul.f32	s8, s15, s14
1a018454:	eea7 5a24 	vfma.f32	s10, s14, s9
1a018458:	eee7 5a05 	vfma.f32	s11, s14, s10
1a01845c:	eee7 6a25 	vfma.f32	s13, s14, s11
1a018460:	b182      	cbz	r2, 1a018484 <__kernel_sinf+0x6c>
1a018462:	ee66 6ac4 	vnmul.f32	s13, s13, s8
1a018466:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
1a01846a:	eee6 6a25 	vfma.f32	s13, s12, s11
1a01846e:	eddf 5a0f 	vldr	s11, [pc, #60]	; 1a0184ac <__kernel_sinf+0x94>
1a018472:	ee97 6a26 	vfnms.f32	s12, s14, s13
1a018476:	eea4 6a25 	vfma.f32	s12, s8, s11
1a01847a:	ee77 7ac6 	vsub.f32	s15, s15, s12
1a01847e:	ee17 0a90 	vmov	r0, s15
1a018482:	4770      	bx	lr
1a018484:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 1a0184b0 <__kernel_sinf+0x98>
1a018488:	eea7 6a26 	vfma.f32	s12, s14, s13
1a01848c:	eee4 7a06 	vfma.f32	s15, s8, s12
1a018490:	ee17 0a90 	vmov	r0, s15
1a018494:	4770      	bx	lr
1a018496:	bf00      	nop
1a018498:	2f2ec9d3 	.word	0x2f2ec9d3
1a01849c:	b2d72f34 	.word	0xb2d72f34
1a0184a0:	3638ef1b 	.word	0x3638ef1b
1a0184a4:	b9500d01 	.word	0xb9500d01
1a0184a8:	3c088889 	.word	0x3c088889
1a0184ac:	3e2aaaab 	.word	0x3e2aaaab
1a0184b0:	be2aaaab 	.word	0xbe2aaaab

1a0184b4 <matherr>:
1a0184b4:	2000      	movs	r0, #0
1a0184b6:	4770      	bx	lr

1a0184b8 <nan>:
1a0184b8:	2000      	movs	r0, #0
1a0184ba:	4901      	ldr	r1, [pc, #4]	; (1a0184c0 <nan+0x8>)
1a0184bc:	4770      	bx	lr
1a0184be:	bf00      	nop
1a0184c0:	7ff80000 	.word	0x7ff80000
1a0184c4:	ffffffff 	.word	0xffffffff

1a0184c8 <scalbn>:
1a0184c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0184ca:	f3c1 560a 	ubfx	r6, r1, #20, #11
1a0184ce:	4604      	mov	r4, r0
1a0184d0:	460d      	mov	r5, r1
1a0184d2:	460b      	mov	r3, r1
1a0184d4:	4617      	mov	r7, r2
1a0184d6:	bb06      	cbnz	r6, 1a01851a <scalbn+0x52>
1a0184d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a0184dc:	4303      	orrs	r3, r0
1a0184de:	d025      	beq.n	1a01852c <scalbn+0x64>
1a0184e0:	2200      	movs	r2, #0
1a0184e2:	4b35      	ldr	r3, [pc, #212]	; (1a0185b8 <scalbn+0xf0>)
1a0184e4:	f7fb fb0c 	bl	1a013b00 <__aeabi_dmul>
1a0184e8:	4a34      	ldr	r2, [pc, #208]	; (1a0185bc <scalbn+0xf4>)
1a0184ea:	4297      	cmp	r7, r2
1a0184ec:	4604      	mov	r4, r0
1a0184ee:	460d      	mov	r5, r1
1a0184f0:	460b      	mov	r3, r1
1a0184f2:	db2a      	blt.n	1a01854a <scalbn+0x82>
1a0184f4:	f3c1 560a 	ubfx	r6, r1, #20, #11
1a0184f8:	3e36      	subs	r6, #54	; 0x36
1a0184fa:	443e      	add	r6, r7
1a0184fc:	f240 72fe 	movw	r2, #2046	; 0x7fe
1a018500:	4296      	cmp	r6, r2
1a018502:	dc28      	bgt.n	1a018556 <scalbn+0x8e>
1a018504:	2e00      	cmp	r6, #0
1a018506:	dd12      	ble.n	1a01852e <scalbn+0x66>
1a018508:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
1a01850c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
1a018510:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
1a018514:	4620      	mov	r0, r4
1a018516:	4629      	mov	r1, r5
1a018518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a01851a:	f240 72ff 	movw	r2, #2047	; 0x7ff
1a01851e:	4296      	cmp	r6, r2
1a018520:	d1eb      	bne.n	1a0184fa <scalbn+0x32>
1a018522:	4602      	mov	r2, r0
1a018524:	460b      	mov	r3, r1
1a018526:	f7fb f939 	bl	1a01379c <__adddf3>
1a01852a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a01852c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a01852e:	f116 0f35 	cmn.w	r6, #53	; 0x35
1a018532:	da1d      	bge.n	1a018570 <scalbn+0xa8>
1a018534:	f24c 3350 	movw	r3, #50000	; 0xc350
1a018538:	429f      	cmp	r7, r3
1a01853a:	4622      	mov	r2, r4
1a01853c:	462b      	mov	r3, r5
1a01853e:	dc25      	bgt.n	1a01858c <scalbn+0xc4>
1a018540:	a119      	add	r1, pc, #100	; (adr r1, 1a0185a8 <scalbn+0xe0>)
1a018542:	e9d1 0100 	ldrd	r0, r1, [r1]
1a018546:	f000 f99b 	bl	1a018880 <copysign>
1a01854a:	a317      	add	r3, pc, #92	; (adr r3, 1a0185a8 <scalbn+0xe0>)
1a01854c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a018550:	f7fb fad6 	bl	1a013b00 <__aeabi_dmul>
1a018554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a018556:	4622      	mov	r2, r4
1a018558:	462b      	mov	r3, r5
1a01855a:	a115      	add	r1, pc, #84	; (adr r1, 1a0185b0 <scalbn+0xe8>)
1a01855c:	e9d1 0100 	ldrd	r0, r1, [r1]
1a018560:	f000 f98e 	bl	1a018880 <copysign>
1a018564:	a312      	add	r3, pc, #72	; (adr r3, 1a0185b0 <scalbn+0xe8>)
1a018566:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01856a:	f7fb fac9 	bl	1a013b00 <__aeabi_dmul>
1a01856e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a018570:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
1a018574:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
1a018578:	3636      	adds	r6, #54	; 0x36
1a01857a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
1a01857e:	4620      	mov	r0, r4
1a018580:	4629      	mov	r1, r5
1a018582:	2200      	movs	r2, #0
1a018584:	4b0e      	ldr	r3, [pc, #56]	; (1a0185c0 <scalbn+0xf8>)
1a018586:	f7fb fabb 	bl	1a013b00 <__aeabi_dmul>
1a01858a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a01858c:	a108      	add	r1, pc, #32	; (adr r1, 1a0185b0 <scalbn+0xe8>)
1a01858e:	e9d1 0100 	ldrd	r0, r1, [r1]
1a018592:	f000 f975 	bl	1a018880 <copysign>
1a018596:	a306      	add	r3, pc, #24	; (adr r3, 1a0185b0 <scalbn+0xe8>)
1a018598:	e9d3 2300 	ldrd	r2, r3, [r3]
1a01859c:	f7fb fab0 	bl	1a013b00 <__aeabi_dmul>
1a0185a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0185a2:	bf00      	nop
1a0185a4:	f3af 8000 	nop.w
1a0185a8:	c2f8f359 	.word	0xc2f8f359
1a0185ac:	01a56e1f 	.word	0x01a56e1f
1a0185b0:	8800759c 	.word	0x8800759c
1a0185b4:	7e37e43c 	.word	0x7e37e43c
1a0185b8:	43500000 	.word	0x43500000
1a0185bc:	ffff3cb0 	.word	0xffff3cb0
1a0185c0:	3c900000 	.word	0x3c900000

1a0185c4 <atanf>:
1a0185c4:	b538      	push	{r3, r4, r5, lr}
1a0185c6:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
1a0185ca:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
1a0185ce:	ee07 0a90 	vmov	s15, r0
1a0185d2:	4605      	mov	r5, r0
1a0185d4:	db0d      	blt.n	1a0185f2 <atanf+0x2e>
1a0185d6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
1a0185da:	dc5c      	bgt.n	1a018696 <atanf+0xd2>
1a0185dc:	eddf 7a55 	vldr	s15, [pc, #340]	; 1a018734 <atanf+0x170>
1a0185e0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 1a018738 <atanf+0x174>
1a0185e4:	2800      	cmp	r0, #0
1a0185e6:	bfd8      	it	le
1a0185e8:	eef0 7a47 	vmovle.f32	s15, s14
1a0185ec:	ee17 0a90 	vmov	r0, s15
1a0185f0:	bd38      	pop	{r3, r4, r5, pc}
1a0185f2:	4b52      	ldr	r3, [pc, #328]	; (1a01873c <atanf+0x178>)
1a0185f4:	429c      	cmp	r4, r3
1a0185f6:	dc61      	bgt.n	1a0186bc <atanf+0xf8>
1a0185f8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
1a0185fc:	db50      	blt.n	1a0186a0 <atanf+0xdc>
1a0185fe:	f04f 33ff 	mov.w	r3, #4294967295
1a018602:	ee67 5aa7 	vmul.f32	s11, s15, s15
1a018606:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 1a018740 <atanf+0x17c>
1a01860a:	ed9f 2a4e 	vldr	s4, [pc, #312]	; 1a018744 <atanf+0x180>
1a01860e:	ed9f 3a4e 	vldr	s6, [pc, #312]	; 1a018748 <atanf+0x184>
1a018612:	eddf 1a4e 	vldr	s3, [pc, #312]	; 1a01874c <atanf+0x188>
1a018616:	eddf 2a4e 	vldr	s5, [pc, #312]	; 1a018750 <atanf+0x18c>
1a01861a:	ed9f 4a4e 	vldr	s8, [pc, #312]	; 1a018754 <atanf+0x190>
1a01861e:	eddf 3a4e 	vldr	s7, [pc, #312]	; 1a018758 <atanf+0x194>
1a018622:	ed9f 5a4e 	vldr	s10, [pc, #312]	; 1a01875c <atanf+0x198>
1a018626:	eddf 4a4e 	vldr	s9, [pc, #312]	; 1a018760 <atanf+0x19c>
1a01862a:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 1a018764 <atanf+0x1a0>
1a01862e:	eddf 6a4e 	vldr	s13, [pc, #312]	; 1a018768 <atanf+0x1a4>
1a018632:	ee25 7aa5 	vmul.f32	s14, s11, s11
1a018636:	1c5a      	adds	r2, r3, #1
1a018638:	eea7 2a01 	vfma.f32	s4, s14, s2
1a01863c:	eee7 2a21 	vfma.f32	s5, s14, s3
1a018640:	eea7 3a02 	vfma.f32	s6, s14, s4
1a018644:	eee7 3a22 	vfma.f32	s7, s14, s5
1a018648:	eea7 4a03 	vfma.f32	s8, s14, s6
1a01864c:	eee7 4a23 	vfma.f32	s9, s14, s7
1a018650:	eea7 5a04 	vfma.f32	s10, s14, s8
1a018654:	eee7 6a24 	vfma.f32	s13, s14, s9
1a018658:	eea7 6a05 	vfma.f32	s12, s14, s10
1a01865c:	ee26 7a87 	vmul.f32	s14, s13, s14
1a018660:	ee66 6a25 	vmul.f32	s13, s12, s11
1a018664:	d041      	beq.n	1a0186ea <atanf+0x126>
1a018666:	4a41      	ldr	r2, [pc, #260]	; (1a01876c <atanf+0x1a8>)
1a018668:	4941      	ldr	r1, [pc, #260]	; (1a018770 <atanf+0x1ac>)
1a01866a:	009b      	lsls	r3, r3, #2
1a01866c:	441a      	add	r2, r3
1a01866e:	ee76 6a87 	vadd.f32	s13, s13, s14
1a018672:	ed92 7a00 	vldr	s14, [r2]
1a018676:	ee97 7aa6 	vfnms.f32	s14, s15, s13
1a01867a:	440b      	add	r3, r1
1a01867c:	2d00      	cmp	r5, #0
1a01867e:	edd3 6a00 	vldr	s13, [r3]
1a018682:	ee77 7a67 	vsub.f32	s15, s14, s15
1a018686:	ee76 7ae7 	vsub.f32	s15, s13, s15
1a01868a:	bfb8      	it	lt
1a01868c:	eef1 7a67 	vneglt.f32	s15, s15
1a018690:	ee17 0a90 	vmov	r0, s15
1a018694:	bd38      	pop	{r3, r4, r5, pc}
1a018696:	ee77 7aa7 	vadd.f32	s15, s15, s15
1a01869a:	ee17 0a90 	vmov	r0, s15
1a01869e:	bd38      	pop	{r3, r4, r5, pc}
1a0186a0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 1a018774 <atanf+0x1b0>
1a0186a4:	ee37 7a87 	vadd.f32	s14, s15, s14
1a0186a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
1a0186ac:	eeb4 7ae6 	vcmpe.f32	s14, s13
1a0186b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0186b4:	dda3      	ble.n	1a0185fe <atanf+0x3a>
1a0186b6:	ee17 0a90 	vmov	r0, s15
1a0186ba:	bd38      	pop	{r3, r4, r5, pc}
1a0186bc:	f7fc fee4 	bl	1a015488 <fabsf>
1a0186c0:	4b2d      	ldr	r3, [pc, #180]	; (1a018778 <atanf+0x1b4>)
1a0186c2:	429c      	cmp	r4, r3
1a0186c4:	ee07 0a10 	vmov	s14, r0
1a0186c8:	dc14      	bgt.n	1a0186f4 <atanf+0x130>
1a0186ca:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
1a0186ce:	429c      	cmp	r4, r3
1a0186d0:	dc25      	bgt.n	1a01871e <atanf+0x15a>
1a0186d2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
1a0186d6:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
1a0186da:	eee7 6a27 	vfma.f32	s13, s14, s15
1a0186de:	2300      	movs	r3, #0
1a0186e0:	ee37 7a27 	vadd.f32	s14, s14, s15
1a0186e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
1a0186e8:	e78b      	b.n	1a018602 <atanf+0x3e>
1a0186ea:	ee76 6a87 	vadd.f32	s13, s13, s14
1a0186ee:	eee7 7ae6 	vfms.f32	s15, s15, s13
1a0186f2:	e77b      	b.n	1a0185ec <atanf+0x28>
1a0186f4:	4b21      	ldr	r3, [pc, #132]	; (1a01877c <atanf+0x1b8>)
1a0186f6:	429c      	cmp	r4, r3
1a0186f8:	dc0b      	bgt.n	1a018712 <atanf+0x14e>
1a0186fa:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
1a0186fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
1a018702:	eee7 6a27 	vfma.f32	s13, s14, s15
1a018706:	2302      	movs	r3, #2
1a018708:	ee37 7a67 	vsub.f32	s14, s14, s15
1a01870c:	eec7 7a26 	vdiv.f32	s15, s14, s13
1a018710:	e777      	b.n	1a018602 <atanf+0x3e>
1a018712:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
1a018716:	eec6 7a87 	vdiv.f32	s15, s13, s14
1a01871a:	2303      	movs	r3, #3
1a01871c:	e771      	b.n	1a018602 <atanf+0x3e>
1a01871e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
1a018722:	ee77 6a67 	vsub.f32	s13, s14, s15
1a018726:	ee37 7a27 	vadd.f32	s14, s14, s15
1a01872a:	2301      	movs	r3, #1
1a01872c:	eec6 7a87 	vdiv.f32	s15, s13, s14
1a018730:	e767      	b.n	1a018602 <atanf+0x3e>
1a018732:	bf00      	nop
1a018734:	3fc90fdb 	.word	0x3fc90fdb
1a018738:	bfc90fdb 	.word	0xbfc90fdb
1a01873c:	3edfffff 	.word	0x3edfffff
1a018740:	3c8569d7 	.word	0x3c8569d7
1a018744:	3d4bda59 	.word	0x3d4bda59
1a018748:	3d886b35 	.word	0x3d886b35
1a01874c:	bd15a221 	.word	0xbd15a221
1a018750:	bd6ef16b 	.word	0xbd6ef16b
1a018754:	3dba2e6e 	.word	0x3dba2e6e
1a018758:	bd9d8795 	.word	0xbd9d8795
1a01875c:	3e124925 	.word	0x3e124925
1a018760:	bde38e38 	.word	0xbde38e38
1a018764:	3eaaaaab 	.word	0x3eaaaaab
1a018768:	be4ccccd 	.word	0xbe4ccccd
1a01876c:	1a01b268 	.word	0x1a01b268
1a018770:	1a01b278 	.word	0x1a01b278
1a018774:	7149f2ca 	.word	0x7149f2ca
1a018778:	3f97ffff 	.word	0x3f97ffff
1a01877c:	401bffff 	.word	0x401bffff

1a018780 <scalbnf>:
1a018780:	b500      	push	{lr}
1a018782:	ed2d 8b02 	vpush	{d8}
1a018786:	b083      	sub	sp, #12
1a018788:	9001      	str	r0, [sp, #4]
1a01878a:	9b01      	ldr	r3, [sp, #4]
1a01878c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
1a018790:	d023      	beq.n	1a0187da <scalbnf+0x5a>
1a018792:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
1a018796:	d215      	bcs.n	1a0187c4 <scalbnf+0x44>
1a018798:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
1a01879c:	d326      	bcc.n	1a0187ec <scalbnf+0x6c>
1a01879e:	0dd2      	lsrs	r2, r2, #23
1a0187a0:	440a      	add	r2, r1
1a0187a2:	2afe      	cmp	r2, #254	; 0xfe
1a0187a4:	dc3c      	bgt.n	1a018820 <scalbnf+0xa0>
1a0187a6:	2a00      	cmp	r2, #0
1a0187a8:	dd30      	ble.n	1a01880c <scalbnf+0x8c>
1a0187aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
1a0187ae:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
1a0187b2:	ee07 3a90 	vmov	s15, r3
1a0187b6:	ee17 0a90 	vmov	r0, s15
1a0187ba:	b003      	add	sp, #12
1a0187bc:	ecbd 8b02 	vpop	{d8}
1a0187c0:	f85d fb04 	ldr.w	pc, [sp], #4
1a0187c4:	ee07 0a90 	vmov	s15, r0
1a0187c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
1a0187cc:	ee17 0a90 	vmov	r0, s15
1a0187d0:	b003      	add	sp, #12
1a0187d2:	ecbd 8b02 	vpop	{d8}
1a0187d6:	f85d fb04 	ldr.w	pc, [sp], #4
1a0187da:	eddd 7a01 	vldr	s15, [sp, #4]
1a0187de:	ee17 0a90 	vmov	r0, s15
1a0187e2:	b003      	add	sp, #12
1a0187e4:	ecbd 8b02 	vpop	{d8}
1a0187e8:	f85d fb04 	ldr.w	pc, [sp], #4
1a0187ec:	ed9d 7a01 	vldr	s14, [sp, #4]
1a0187f0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 1a01886c <scalbnf+0xec>
1a0187f4:	4b1e      	ldr	r3, [pc, #120]	; (1a018870 <scalbnf+0xf0>)
1a0187f6:	ee67 7a27 	vmul.f32	s15, s14, s15
1a0187fa:	4299      	cmp	r1, r3
1a0187fc:	edcd 7a01 	vstr	s15, [sp, #4]
1a018800:	db20      	blt.n	1a018844 <scalbnf+0xc4>
1a018802:	9b01      	ldr	r3, [sp, #4]
1a018804:	f3c3 52c7 	ubfx	r2, r3, #23, #8
1a018808:	3a19      	subs	r2, #25
1a01880a:	e7c9      	b.n	1a0187a0 <scalbnf+0x20>
1a01880c:	f112 0f16 	cmn.w	r2, #22
1a018810:	da1f      	bge.n	1a018852 <scalbnf+0xd2>
1a018812:	f24c 3350 	movw	r3, #50000	; 0xc350
1a018816:	4299      	cmp	r1, r3
1a018818:	dc02      	bgt.n	1a018820 <scalbnf+0xa0>
1a01881a:	ed9f 8a16 	vldr	s16, [pc, #88]	; 1a018874 <scalbnf+0xf4>
1a01881e:	e001      	b.n	1a018824 <scalbnf+0xa4>
1a018820:	ed9f 8a15 	vldr	s16, [pc, #84]	; 1a018878 <scalbnf+0xf8>
1a018824:	9901      	ldr	r1, [sp, #4]
1a018826:	ee18 0a10 	vmov	r0, s16
1a01882a:	f000 f831 	bl	1a018890 <copysignf>
1a01882e:	ee07 0a90 	vmov	s15, r0
1a018832:	ee67 7a88 	vmul.f32	s15, s15, s16
1a018836:	ee17 0a90 	vmov	r0, s15
1a01883a:	b003      	add	sp, #12
1a01883c:	ecbd 8b02 	vpop	{d8}
1a018840:	f85d fb04 	ldr.w	pc, [sp], #4
1a018844:	eddf 7a0b 	vldr	s15, [pc, #44]	; 1a018874 <scalbnf+0xf4>
1a018848:	ed9d 7a01 	vldr	s14, [sp, #4]
1a01884c:	ee67 7a27 	vmul.f32	s15, s14, s15
1a018850:	e7bc      	b.n	1a0187cc <scalbnf+0x4c>
1a018852:	3219      	adds	r2, #25
1a018854:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
1a018858:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
1a01885c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 1a01887c <scalbnf+0xfc>
1a018860:	ee07 3a90 	vmov	s15, r3
1a018864:	ee67 7a87 	vmul.f32	s15, s15, s14
1a018868:	e7b0      	b.n	1a0187cc <scalbnf+0x4c>
1a01886a:	bf00      	nop
1a01886c:	4c000000 	.word	0x4c000000
1a018870:	ffff3cb0 	.word	0xffff3cb0
1a018874:	0da24260 	.word	0x0da24260
1a018878:	7149f2ca 	.word	0x7149f2ca
1a01887c:	33000000 	.word	0x33000000

1a018880 <copysign>:
1a018880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1a018884:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
1a018888:	ea42 0103 	orr.w	r1, r2, r3
1a01888c:	4770      	bx	lr
1a01888e:	bf00      	nop

1a018890 <copysignf>:
1a018890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a018894:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a018898:	4308      	orrs	r0, r1
1a01889a:	4770      	bx	lr

1a01889c <__errno>:
1a01889c:	4b01      	ldr	r3, [pc, #4]	; (1a0188a4 <__errno+0x8>)
1a01889e:	6818      	ldr	r0, [r3, #0]
1a0188a0:	4770      	bx	lr
1a0188a2:	bf00      	nop
1a0188a4:	100864e0 	.word	0x100864e0
1a0188a8:	323a3731 	.word	0x323a3731
1a0188ac:	30343a39 	.word	0x30343a39
1a0188b0:	ffffff00 	.word	0xffffff00
1a0188b4:	4c504d65 	.word	0x4c504d65
1a0188b8:	312e3520 	.word	0x312e3520
1a0188bc:	00000000 	.word	0x00000000
1a0188c0:	00582520 	.word	0x00582520
1a0188c4:	00642520 	.word	0x00642520
1a0188c8:	6425532d 	.word	0x6425532d
1a0188cc:	00000000 	.word	0x00000000
1a0188d0:	0a642520 	.word	0x0a642520
1a0188d4:	00000000 	.word	0x00000000
1a0188d8:	0a582520 	.word	0x0a582520
1a0188dc:	00000000 	.word	0x00000000
1a0188e0:	20732520 	.word	0x20732520
1a0188e4:	000a6425 	.word	0x000a6425
1a0188e8:	6425532d 	.word	0x6425532d
1a0188ec:	20642520 	.word	0x20642520
1a0188f0:	000a6425 	.word	0x000a6425
1a0188f4:	6425532d 	.word	0x6425532d
1a0188f8:	0a752520 	.word	0x0a752520
1a0188fc:	00000000 	.word	0x00000000
1a018900:	6425532d 	.word	0x6425532d
1a018904:	0a312d20 	.word	0x0a312d20
1a018908:	00000000 	.word	0x00000000
1a01890c:	2030532d 	.word	0x2030532d
1a018910:	000a7525 	.word	0x000a7525
1a018914:	2030532d 	.word	0x2030532d
1a018918:	000a312d 	.word	0x000a312d
1a01891c:	6425532d 	.word	0x6425532d
1a018920:	20642520 	.word	0x20642520
1a018924:	25206425 	.word	0x25206425
1a018928:	64252064 	.word	0x64252064
1a01892c:	0000000a 	.word	0x0000000a
1a018930:	6425532d 	.word	0x6425532d
1a018934:	20752520 	.word	0x20752520
1a018938:	000a7525 	.word	0x000a7525
1a01893c:	6425532d 	.word	0x6425532d
1a018940:	0a642520 	.word	0x0a642520
1a018944:	ffffff00 	.word	0xffffff00

1a018948 <OscRateIn>:
1a018948:	00b71b00                                ....

1a01894c <ExtRateIn>:
1a01894c:	00000000 5644450a 33342d53 002c3733     .....EDVS-4337,.
1a01895c:	42454420 00004755 2e305620 00302e37      DEBUG.. V0.7.0.
1a01896c:	554d4920 00000000 4f425020 00000054      IMU.... PBOT...
1a01897c:	6c754a20 20342020 36313032 3731202c      Jul  4 2016, 17
1a01898c:	3a39323a 000a3031 74737953 43206d65     :29:10..System C
1a01899c:	6b636f6c 3325203a 7a484d64 7531203b     lock: %3dMHz; 1u
1a0189ac:	76652073 20746e65 656d6974 73657220     s event time res
1a0189bc:	74756c6f 0a6e6f69 00000000 70707553     olution.....Supp
1a0189cc:	6574726f 6f432064 6e616d6d 0a3a7364     orted Commands:.
1a0189dc:	00000000 2f2b4520 2020202d 20202020     .... E+/-       
1a0189ec:	20202020 20202020 2d202020 616e6520                - ena
1a0189fc:	2f656c62 61736964 20656c62 6e657665     ble/disable even
1a018a0c:	65732074 6e69646e 00000a67 78452120     t sending... !Ex
1a018a1c:	20202020 20202020 20202020 20202020                     
1a018a2c:	2d202020 65707320 79666963 65766520        - specify eve
1a018a3c:	6420746e 20617461 6d726f66 202c7461     nt data format, 
1a018a4c:	20453f3f 73206f74 20776f68 6974706f     ??E to show opti
1a018a5c:	0a736e6f 00000000 54452120 20202078     ons..... !ETx   
1a018a6c:	20202020 20202020 20202020 2d202020                    -
1a018a7c:	74657320 72756320 746e6572 6d697420      set current tim
1a018a8c:	61747365 7420706d 2078206f 66656428     estamp to x (def
1a018a9c:	746c7561 2930203a 0000000a 54452120     ault: 0).... !ET
1a018aac:	20202b4d 20202020 20202020 20202020     M+              
1a018abc:	2d202020 6e797320 74206863 73656d69        - synch times
1a018acc:	706d6174 616d202c 72657473 646f6d20     tamp, master mod
1a018adc:	6f202c65 75707475 63612074 65766974     e, output active
1a018aec:	0000000a 54452120 2020304d 20202020     .... !ETM0      
1a018afc:	20202020 20202020 2d202020 6e797320                - syn
1a018b0c:	74206863 73656d69 706d6174 616d202c     ch timestamp, ma
1a018b1c:	72657473 646f6d20 6f202c65 75707475     ster mode, outpu
1a018b2c:	74732074 6570706f 00000a64 54452120     t stopped... !ET
1a018b3c:	20202053 20202020 20202020 20202020     S               
1a018b4c:	2d202020 6e797320 74206863 73656d69        - synch times
1a018b5c:	706d6174 6c73202c 20657661 65646f6d     tamp, slave mode
1a018b6c:	0000000a 54452120 20202049 20202020     .... !ETI       
1a018b7c:	20202020 20202020 2d202020 6e697320                - sin
1a018b8c:	20656c67 69746572 202c616e 65206f6e     gle retina, no e
1a018b9c:	72657478 206c616e 636e7973 6f6d2068     xternal synch mo
1a018bac:	000a6564 5b422120 31312d30 20783d5d     de.. !B[0-11]=x 
1a018bbc:	20202020 20202020 2d202020 74657320                - set
1a018bcc:	61696220 65722073 74736967 74207265      bias register t
1a018bdc:	6176206f 0a65756c 00000000 46422120     o value..... !BF
1a018bec:	20202020 20202020 20202020 20202020                     
1a018bfc:	2d202020 6e657320 69622064 73207361        - send bias s
1a018c0c:	69747465 2073676e 44206f74 28205356     ettings to DVS (
1a018c1c:	73756c66 000a2968 44422120 20202078     flush).. !BDx   
1a018c2c:	20202020 20202020 20202020 2d202020                    -
1a018c3c:	6c657320 20746365 20646e61 73756c66      select and flus
1a018c4c:	72702068 66656465 64656e69 61696220     h predefined bia
1a018c5c:	65732073 0a782074 00000000 78423f20     s set x..... ?Bx
1a018c6c:	20202020 20202020 20202020 20202020                     
1a018c7c:	2d202020 74656720 61696220 65722073        - get bias re
1a018c8c:	74736967 78207265 72756320 746e6572     gister x current
1a018c9c:	6c617620 000a6575 5b4c2120 2c312c30      value.. !L[0,1,
1a018cac:	20205d32 20202020 20202020 2d202020     2]             -
1a018cbc:	44454c20 66666f20 2f6e6f2f 6e696c62      LED off/on/blin
1a018ccc:	676e696b 0000000a 3d552120 20202078     king.... !U=x   
1a018cdc:	20202020 20202020 20202020 2d202020                    -
1a018cec:	74657320 75616220 61722064 74206574      set baud rate t
1a018cfc:	0a78206f 00000000 5b552120 2c312c30     o x..... !U[0,1,
1a018d0c:	20205d32 20202020 20202020 2d202020     2]             -
1a018d1c:	52415520 63652054 6d206f68 2065646f      UART echo mode 
1a018d2c:	6e6f6e28 63202c65 722d646d 796c7065     (none, cmd-reply
1a018d3c:	6c61202c 000a296c 2b532120 20702c62     , all).. !S+b,p 
1a018d4c:	20202020 20202020 20202020 2d202020                    -
1a018d5c:	616e6520 20656c62 736e6573 2073726f      enable sensors 
1a018d6c:	65727473 6e696d61 3f202c67 7420533f     streaming, ??S t
1a018d7c:	6873206f 6f20776f 6f697470 000a736e     o show options..
1a018d8c:	2d532120 205d625b 20202020 20202020      !S-[b]         
1a018d9c:	20202020 2d202020 73696420 656c6261            - disable
1a018dac:	6e657320 73726f73 72747320 696d6165      sensors streami
1a018dbc:	202c676e 20533f3f 73206f74 20776f68     ng, ??S to show 
1a018dcc:	6974706f 0a736e6f 00000000 62533f20     options..... ?Sb
1a018ddc:	20202020 20202020 20202020 20202020                     
1a018dec:	2d202020 74656720 6e657320 20726f73        - get sensor 
1a018dfc:	64616572 7374756f 63636120 6964726f     readouts accordi
1a018e0c:	7420676e 6962206f 70616d74 000a6220     ng to bitmap b..
1a018e1c:	533f3f20 20202020 20202020 20202020      ??S            
1a018e2c:	20202020 2d202020 74696220 2070616d            - bitmap 
1a018e3c:	706f2062 6e6f6974 00000a73 20205220     b options... R  
1a018e4c:	20202020 20202020 20202020 20202020                     
1a018e5c:	2d202020 73657220 62207465 6472616f        - reset board
1a018e6c:	0000000a 20205020 20202020 20202020     .... P          
1a018e7c:	20202020 20202020 2d202020 746e6520                - ent
1a018e8c:	72207265 6f727065 6d617267 676e696d     er reprogramming
1a018e9c:	646f6d20 00000a65 2b4d2120 20202d2f      mode... !M+/-  
1a018eac:	20202020 20202020 20202020 2d202020                    -
1a018ebc:	616e6520 2f656c62 61736964 20656c62      enable/disable 
1a018ecc:	6f746f6d 72642072 72657669 0000000a     motor driver....
1a018edc:	434d3f20 312c305b 2020205d 20202020      ?MC[0,1]       
1a018eec:	20202020 2d202020 74656720 746f6d20            - get mot
1a018efc:	5020726f 63204449 72746e6f 656c6c6f     or PID controlle
1a018f0c:	61672072 0a736e69 00000000 434d2120     r gains..... !MC
1a018f1c:	312c305b 2c703d5d 20642c69 20202020     [0,1]=p,i,d     
1a018f2c:	2d202020 74657320 746f6d20 5020726f        - set motor P
1a018f3c:	63204449 72746e6f 656c6c6f 61672072     ID controller ga
1a018f4c:	0a736e69 00000000 504d2120 312c305b     ins..... !MP[0,1
1a018f5c:	20783d5d 20202020 20202020 2d202020     ]=x            -
1a018f6c:	74657320 746f6d20 5020726f 70204d57      set motor PWM p
1a018f7c:	6f697265 6e692064 63696d20 65736f72     eriod in microse
1a018f8c:	646e6f63 00000a73 5b4d2120 5d312c30     conds... !M[0,1]
1a018f9c:	5d255b3d 20202078 20202020 2d202020     =[%]x          -
1a018fac:	74657320 746f6d20 6420726f 20797475      set motor duty 
1a018fbc:	74646977 6e692068 63696d20 65736f72     width in microse
1a018fcc:	646e6f63 255b2073 2e2e3020 5d303031     conds [% 0..100]
1a018fdc:	0000000a 564d2120 312c305b 305b3d5d     .... !MV[0,1]=[0
1a018fec:	3030312d 2020205d 2d202020 74657320     -100]      - set
1a018ffc:	746f6d20 7620726f 636f6c65 20797469      motor velocity 
1a01900c:	746e6928 616e7265 2d50206c 746e6f63     (internal P-cont
1a01901c:	6c6c6f72 66207265 5020726f 42687375     roller for PushB
1a01902c:	0a29746f 00000000 444d2120 312c305b     ot)..... !MD[0,1
1a01903c:	255b3d5d 2020205d 20202020 2d202020     ]=[%]          -
1a01904c:	74657320 746f6d20 6420726f 20797475      set motor duty 
1a01905c:	74646977 73202c68 20776f6c 61636564     width, slow deca
1a01906c:	255b2079 2e2e3020 5d303031 0000000a     y [% 0..100]....
1a01907c:	564d2120 2c305b44 783d5d31 20202020      !MVD[0,1]=x    
1a01908c:	20202020 2d202020 74657320 746f6d20            - set mot
1a01909c:	6420726f 20797475 6f6c6576 79746963     or duty velocity
1a0190ac:	6c73202c 6420776f 79616365 0000000a     , slow decay....
1a0190bc:	5b502120 2c422c41 783d5d43 20202020      !P[A,B,C]=x    
1a0190cc:	20202020 2d202020 74657320 6d697420            - set tim
1a0190dc:	62207265 20657361 69726570 6920646f     er base period i
1a0190ec:	696d206e 736f7263 6e6f6365 000a7364     n microseconds..
1a0190fc:	5b502120 2c422c41 305b5d43 3d5d312c      !P[A,B,C][0,1]=
1a01910c:	785d255b 2d202020 74657320 6d697420     [%]x   - set tim
1a01911c:	63207265 6e6e6168 77206c65 68746469     er channel width
1a01912c:	206e6920 7263696d 6365736f 73646e6f      in microseconds
1a01913c:	20255b20 312e2e30 0a5d3030 00000000      [% 0..100].....
1a01914c:	2b542120 20202d2f 20202020 20202020      !T+/-          
1a01915c:	20202020 2d202020 616e6520 2f656c62            - enable/
1a01916c:	61736964 20656c62 6c616552 6d695420     disable Real Tim
1a01917c:	6c432065 206b636f 43545228 00000a29     e Clock (RTC)...
1a01918c:	79542120 2d797979 642d6d6d 68682064      !Tyyyy-mm-dd hh
1a01919c:	3a6d6d3a 2d207373 74657320 43545220     :mm:ss - set RTC
1a0191ac:	6d697420 00000a65 20543f20 20202020      time... ?T     
1a0191bc:	20202020 20202020 20202020 2d202020                    -
1a0191cc:	74656720 43545220 6d697420 00000a65      get RTC time...
1a0191dc:	203f3f20 20202020 20202020 20202020      ??             
1a0191ec:	20202020 2d202020 73696420 79616c70            - display
1a0191fc:	68742820 20297369 706c6568 6e656d20      (this) help men
1a01920c:	00000a75 7473694c 20666f20 69617661     u...List of avai
1a01921c:	6c62616c 76652065 20746e65 61746164     lable event data
1a01922c:	726f6620 7374616d 00000a3a 30452120      formats:... !E0
1a01923c:	2d202020 62203220 73657479 72657020        - 2 bytes per
1a01924c:	65766520 202c746e 616e6962 203a7972      event, binary: 
1a01925c:	79797931 79797979 7878702e 78787878     1yyyyyyy.pxxxxxx
1a01926c:	64282078 75616665 0a29746c 00000000     x (default).....
1a01927c:	31452120 2d202020 2e2e3320 79622036      !E1   - 3..6 by
1a01928c:	20736574 20726570 6e657665 31202c74     tes per event, 1
1a01929c:	20342e2e 65747962 65642073 2d61746c     ..4 bytes delta-
1a0192ac:	656d6974 6d617473 37282070 73746962     timestamp (7bits
1a0192bc:	63616520 000a2968 32452120 2d202020      each).. !E2   -
1a0192cc:	62203420 73657479 72657020 65766520      4 bytes per eve
1a0192dc:	2820746e 21207361 66203045 6f6c6c6f     nt (as !E0 follo
1a0192ec:	20646577 31207962 74696236 6d697420     wed by 16bit tim
1a0192fc:	61747365 0a29706d 00000000 33452120     estamp)..... !E3
1a01930c:	2d202020 62203520 73657479 72657020        - 5 bytes per
1a01931c:	65766520 2820746e 21207361 66203045      event (as !E0 f
1a01932c:	6f6c6c6f 20646577 32207962 74696234     ollowed by 24bit
1a01933c:	6d697420 61747365 0a29706d 00000000      timestamp).....
1a01934c:	34452120 2d202020 62203620 73657479      !E4   - 6 bytes
1a01935c:	72657020 65766520 2820746e 21207361      per event (as !
1a01936c:	66203045 6f6c6c6f 20646577 33207962     E0 followed by 3
1a01937c:	74696232 6d697420 61747365 0a29706d     2bit timestamp).
1a01938c:	00000000 65764520 74207972 73656d69     .... Every times
1a01939c:	706d6174 73616820 73753120 73657220     tamp has 1us res
1a0193ac:	74756c6f 0a6e6f69 00000000 6c746942     olution.....Bitl
1a0193bc:	20747369 20726f66 69617661 6c62616c     ist for availabl
1a0193cc:	65732065 726f736e 000a3a73 74694220     e sensors:.. Bit
1a0193dc:	63654420 6c61562d 4e206575 20656d61      Dec-Value Name 
1a0193ec:	20202020 61562023 7365756c 65442020         # Values  De
1a0193fc:	69726373 6f697470 00000a6e 20203020     scription... 0  
1a01940c:	20203120 20202020 42202020 45545441      1         BATTE
1a01941c:	20205952 20202020 31202020 61722020     RY         1  ra
1a01942c:	61622077 72657474 6f762079 6761746c     w battery voltag
1a01943c:	656c2065 206c6576 2e2e3028 39393939     e level (0..9999
1a01944c:	00000a29 20203120 20203220 20202020     )... 1   2      
1a01945c:	41202020 43204344 4e4e4148 20304c45        ADC CHANNEL0 
1a01946c:	31202020 61722020 44412077 65722043        1  raw ADC re
1a01947c:	6e696461 72662067 70206d6f 32206e69     ading from pin 2
1a01948c:	2e302820 3230312e 000a2933 20203220      (0..1023).. 2  
1a01949c:	20203420 20202020 41202020 43204344      4         ADC C
1a0194ac:	4e4e4148 20314c45 31202020 61722020     HANNEL1    1  ra
1a0194bc:	44412077 65722043 6e696461 72662067     w ADC reading fr
1a0194cc:	70206d6f 33206e69 2e302820 3230312e     om pin 3 (0..102
1a0194dc:	000a2933 20203320 20203820 20202020     3).. 3   8      
1a0194ec:	41202020 43204344 4e4e4148 20324c45        ADC CHANNEL2 
1a0194fc:	31202020 61722020 44412077 65722043        1  raw ADC re
1a01950c:	6e696461 72662067 70206d6f 34206e69     ading from pin 4
1a01951c:	2e302820 3230312e 000a2933 20203420      (0..1023).. 4  
1a01952c:	20363120 20202020 41202020 43204344      16        ADC C
1a01953c:	4e4e4148 20334c45 31202020 61722020     HANNEL3    1  ra
1a01954c:	44412077 65722043 6e696461 72662067     w ADC reading fr
1a01955c:	70206d6f 35206e69 2e302820 3230312e     om pin 5 (0..102
1a01956c:	000a2933 20203520 20323320 20202020     3).. 5   32     
1a01957c:	41202020 43204344 4e4e4148 20344c45        ADC CHANNEL4 
1a01958c:	31202020 61722020 44412077 65722043        1  raw ADC re
1a01959c:	6e696461 72662067 70206d6f 36206e69     ading from pin 6
1a0195ac:	2e302820 3230312e 000a2933 20203620      (0..1023).. 6  
1a0195bc:	20343620 20202020 41202020 43204344      64        ADC C
1a0195cc:	4e4e4148 20354c45 31202020 61722020     HANNEL5    1  ra
1a0195dc:	44412077 65722043 6e696461 72662067     w ADC reading fr
1a0195ec:	70206d6f 37206e69 2e302820 3230312e     om pin 7 (0..102
1a0195fc:	000a2933 20203720 38323120 20202020     3).. 7   128    
1a01960c:	52202020 47205741 204f5259 20202020        RAW GYRO     
1a01961c:	33202020 61722020 79672077 63736f72        3  raw gyrosc
1a01962c:	2065706f 61746164 726f6620 61203320     ope data for 3 a
1a01963c:	20736978 2d2f2b28 36373233 000a2938     xis (+/-32768)..
1a01964c:	20203820 36353220 20202020 52202020      8   256       R
1a01965c:	41205741 4c454343 20202020 33202020     AW ACCEL       3
1a01966c:	61722020 63612077 656c6563 656d6f72       raw accelerome
1a01967c:	20726574 61746164 726f6620 61203320     ter data for 3 a
1a01968c:	20736978 2d2f2b28 36373233 000a2938     xis (+/-32768)..
1a01969c:	20203920 32313520 20202020 52202020      9   512       R
1a0196ac:	43205741 41504d4f 20205353 33202020     AW COMPASS     3
1a0196bc:	61722020 616d2077 74656e67 76206369       raw magnetic v
1a0196cc:	65756c61 6f662073 20332072 73697861     alues for 3 axis
1a0196dc:	2f2b2820 3930342d 000a2936 20303120      (+/-4096).. 10 
1a0196ec:	32303120 20202034 43202020 47204c41      1024      CAL G
1a0196fc:	204f5259 20202020 33202020 79672020     YRO        3  gy
1a01970c:	63736f72 2065706f 61746164 206e6920     roscope data in 
1a01971c:	20737064 20363151 48206e69 000a5845     dps Q16 in HEX..
1a01972c:	20313120 34303220 20202038 43202020      11  2048      C
1a01973c:	41204c41 4c454343 20202020 33202020     AL ACCEL       3
1a01974c:	63612020 656c6563 656d6f72 20726574       accelerometer 
1a01975c:	61746164 206e6920 20732767 20363151     data in g's Q16 
1a01976c:	48206e69 000a5845 20323120 39303420     in HEX.. 12  409
1a01977c:	20202036 43202020 43204c41 41504d4f     6      CAL COMPA
1a01978c:	20205353 33202020 616d2020 74656e67     SS     3  magnet
1a01979c:	76206369 65756c61 6e692073 63696d20     ic values in mic
1a0197ac:	65746f72 73616c73 36315120 206e6920     roteslas Q16 in 
1a0197bc:	0a584548 00000000 20333120 39313820     HEX..... 13  819
1a0197cc:	20202032 51202020 54524155 494e5245     2      QUARTERNI
1a0197dc:	20204e4f 34202020 20392020 73697861     ON     4  9 axis
1a0197ec:	61757120 72657472 6e6f696e 30335120      quarternion Q30
1a0197fc:	206e6920 0a584548 00000000 20343120      in HEX..... 14 
1a01980c:	33363120 20203438 45202020 52454c55      16384     EULER
1a01981c:	474e4120 2053454c 34202020 75652020      ANGLES    4  eu
1a01982c:	2072656c 6c676e61 69207365 6564206e     ler angles in de
1a01983c:	65657267 33512073 6e692030 58454820     grees Q30 in HEX
1a01984c:	0000000a 20353120 37323320 20203836     .... 15  32768  
1a01985c:	52202020 5441544f 204e4f49 5254414d        ROTATION MATR
1a01986c:	39205849 6f722020 69746174 6d206e6f     IX 9  rotation m
1a01987c:	69727461 33512078 6e692030 58454820     atrix Q30 in HEX
1a01988c:	0000000a 20363120 35353620 20203633     .... 16  65536  
1a01989c:	48202020 49444145 2020474e 20202020        HEADING      
1a0198ac:	31202020 65682020 6e696461 6e692067        1  heading in
1a0198bc:	67656420 73656572 36315120 206e6920      degrees Q16 in 
1a0198cc:	0a584548 00000000 20373120 31333120     HEX..... 17  131
1a0198dc:	20323730 4c202020 41454e49 43412052     072    LINEAR AC
1a0198ec:	204c4543 33202020 696c2020 7261656e     CEL    3  linear
1a0198fc:	63636120 69206c65 2f6d206e 20325e73      accel in m/s^2 
1a01990c:	616f6c46 6e692074 58454820 0000000a     Float in HEX....
1a01991c:	20383120 32363220 20343431 49202020      18  262144    I
1a01992c:	5320554d 55544154 20202053 32202020     MU STATUS      2
1a01993c:	4d492020 74732055 73757461 65742820       IMU status (te
1a01994c:	7265706d 72757461 6e612065 69742064     mperature and ti
1a01995c:	7473656d 29706d61 0000000a 20393120     mestamp).... 19 
1a01996c:	34323520 20383832 50202020 53204d57      524288    PWM S
1a01997c:	414e4749 2020534c 34202020 75632020     IGNALS     4  cu
1a01998c:	6e657272 20796c74 20746573 204d5750     rrently set PWM 
1a01999c:	79747564 63796320 6620656c 6120726f     duty cycle for a
1a0199ac:	32206c6c 746f6d20 0a73726f 00000000     ll 2 motors.....
1a0199bc:	20303220 34303120 36373538 4d202020      20  1048576   M
1a0199cc:	524f544f 52554320 544e4552 32202053     OTOR CURRENTS  2
1a0199dc:	6f6d2020 20726f74 72727563 73746e65       motor currents
1a0199ec:	6f726620 6874206d 6f6d2065 20726f74      from the motor 
1a0199fc:	76697264 000a7265 20313220 39303220     driver.. 21  209
1a019a0c:	32353137 45202020 544e4556 41522053     7152   EVENTS RA
1a019a1c:	20204554 31202020 76452020 20746e65     TE     1  Event 
1a019a2c:	65746172 72657020 63657320 20646e6f     rate per second 
1a019a3c:	2e2e3028 30303031 29303030 0000000a     (0..1000000)....
1a019a4c:	20383220 38363220 34353334 4d203635      28  268435456 M
1a019a5c:	524f544f 4e455320 53524f53 32202020     OTOR SENSORS   2
1a019a6c:	68772020 206c6565 6b636974 756f6320       wheel tick cou
1a019a7c:	7265746e 0000000a 6425422d 0a64253d     nter....-B%d=%d.
1a019a8c:	00000000 6425452d 0000000a 30434d2d     ....-E%d....-MC0
1a019a9c:	2c642520 252c6425 00000a64 31434d2d      %d,%d,%d...-MC1
1a019aac:	2c642520 252c6425 00000a64 3a746547      %d,%d,%d...Get:
1a019abc:	72617020 676e6973 72726520 000a726f      parsing error..
1a019acc:	3025542d 252d6434 2d643230 64323025     -T%04d-%02d-%02d
1a019adc:	32302520 30253a64 253a6432 0a643230      %02d:%02d:%02d.
1a019aec:	00000000 6c616e41 6f20676f 75707475     ....Analog outpu
1a019afc:	68732074 646c756f 20656220 77746562     t should be betw
1a019b0c:	206e6565 312d305b 5d333230 0000000a     een [0-1023]....
1a019b1c:	0a46422d 00000000 2544422d 00000a63     -BF.....-BD%c...
1a019b2c:	656c6553 64207463 75616665 6220746c     Select default b
1a019b3c:	20736169 3a746573 72617020 676e6973     ias set: parsing
1a019b4c:	72726520 000a726f 5354452d 0000000a      error..-ETS....
1a019b5c:	4d54452d 00000a30 4d54452d 00000a2b     -ETM0...-ETM+...
1a019b6c:	4954452d 0000000a 3a746553 72617020     -ETI....Set: par
1a019b7c:	676e6973 72726520 000a726f 6f727245     sing error..Erro
1a019b8c:	65732072 6e697474 6f6d2067 20726f74     r setting motor 
1a019b9c:	65657073 00000a64 6f727245 65732072     speed...Error se
1a019bac:	6e697474 6f632067 6f72746e 72656c6c     tting controller
1a019bbc:	44495020 0000000a 6f727245 65732072      PID....Error se
1a019bcc:	6e697474 6f6d2067 20726f74 0a4d5750     tting motor PWM.
1a019bdc:	00000000 6f727245 65732072 6e697474     ....Error settin
1a019bec:	6f6d2067 20726f74 65646f6d 0000000a     g motor mode....
1a019bfc:	6f727245 65732072 6e697474 6f6d2067     Error setting mo
1a019c0c:	20726f74 74646977 00000a68 6f727245     tor width...Erro
1a019c1c:	65732072 6e697474 57502067 7564204d     r setting PWM du
1a019c2c:	79637974 0a656c63 00000000 6f727245     tycycle.....Erro
1a019c3c:	65732072 6e697474 57502067 6977204d     r setting PWM wi
1a019c4c:	0a687464 00000000 6f727245 65732072     dth.....Error se
1a019c5c:	6e697474 57502067 7266204d 65757165     tting PWM freque
1a019c6c:	0a79636e 00000000 6e616843 206c656e     ncy.....Channel 
1a019c7c:	20746f6e 6f636572 7a696e67 000a6465     not recognized..
1a019c8c:	0a2b542d 00000000 0a2d542d 00000000     -T+.....-T-.....
1a019c9c:	6e6f7257 6f662067 74616d72 0000000a     Wrong format....
1a019cac:	20435452 20746f6e 62616e65 0a64656c     RTC not enabled.
1a019cbc:	00000000 74697753 6e696863 61422067     ....Switching Ba
1a019ccc:	52206475 20657461 25206f74 61422064     ud Rate to %d Ba
1a019cdc:	0a216475 00000000 6c696146 74206465     ud!.....Failed t
1a019cec:	7773206f 68637469 75614220 61522064     o switch Baud Ra
1a019cfc:	74206574 6425206f 75614220 000a2164     te to %d Baud!..
1a019d0c:	00000a3f 25206325 ffff0063 62616e55     ?...%c %c...Unab
1a019d1c:	7420656c 6461206f 65662064 72757461     le to add featur
1a019d2c:	61632065 61626c6c 61206b63 6f742073     e callback as to
1a019d3c:	616d206f 7720796e 20657265 65726c61     o many were alre
1a019d4c:	20796461 69676572 72657473 000a6465     ady registered..
1a019d5c:	004c504d 257c7325 64257c73 74657220     MPL.%s|%s|%d ret
1a019d6c:	696e7275 2520676e 00000a64 4d2f2e2e     urning %d...../M
1a019d7c:	6f69746f 6972446e 2f726576 696c6c6d     otionDriver/mlli
1a019d8c:	6d2f6574 632e6c70 ffffff00              te/mpl.c....

1a019d98 <__func__.4633>:
1a019d98:	5f766e69 74696e69 6c706d5f ffffff00     inv_init_mpl....

1a019da8 <__func__.4641>:
1a019da8:	5f766e69 72617473 706d5f74 ffff006c     inv_start_mpl...

1a019db8 <reg>:
1a019db8:	0c1a1975 1c1b236a 201f0000 3b437472     u...j#..... rtC;
1a019dc8:	3a393841 376c6b00 6d24066f 2625706e     A89:.kl7o.$mnp%&
1a019dd8:	2a292827 67646334 ffff0149              '()*4cdgI...

1a019de4 <hw>:
1a019de4:	04000068 01540076 0100fdf7 ffff2666     h...v.T.....f&..

1a019df4 <test>:
1a019df4:	00000083 00000800 18000100 00050032     ............2...
1a019e04:	41200000 42d20000 3e0f5c29 3e99999a     .. A...B)\.>...>
1a019e14:	3f733333 3e0f5c29 78352325 2325203a     33s?)\.>%#5x: %#
1a019e24:	0a0d7835 00000000 706d6f43 20737361     5x......Compass 
1a019e34:	20746f6e 6e756f66 000a2e64              not found...

1a019e40 <dmp_memory>:
1a019e40:	00700000 24000000 02000000 00000300     ..p....$........
1a019e50:	54006500 0000efff 0b0080fa 01008212     .e.T............
1a019e60:	c3300c03 e98c8c0e 0240d514 8e0f7113     ..0.......@..q..
1a019e70:	83f88338 83f80030 83f88e25 83f80030     8...0...%...0...
1a019e80:	ffffffff d6a9fe0f 00040024 a179821a     ........$.....y.
1a019e90:	3c000000 0000ffff 00001000 a26f8338     ...<........8.o.
1a019ea0:	30033e00 00000040 09e3ca02 0000803e     .>.0@.......>...
1a019eb0:	00000020 00000000 00000040 00000060      .......@...`...
1a019ec0:	00000c00 6e180c00 92060000 dfc0160a     .......n........
1a019ed0:	5602ffff 77d38cfd 96c4e1ff aabec5e0     ...V...w........
1a019ee0:	00000000 2b0bffff 57160000 59030000     .......+...W...Y
1a019ef0:	00000040 fa1d0000 1d6c0200 00000000     @.........l.....
1a019f00:	ebdfff3f b6b33e00 78220d00 3c2f0000     ?....>...."x../<
1a019f10:	00000000 b5421900 a2390000 65b30000     ......B...9....e
1a019f20:	c99f0ed9 344ccf1d 00000030 00000050     ......L40...P...
1a019f30:	e87ab63b 00006400 0000c800 00000000     ;.z..d..........
1a019f40:	00000010 92fa0010 5e220010 9f220d00     .........."^..".
1a019f50:	00000100 00003200 000046ff 0000d463     .....2...F..c...
1a019f60:	00000010 0000d604 0000cc04 0000cc04     ................
1a019f70:	72100000 40000000 00000000 00000000     ...r...@........
1a019f80:	02000600 07000500 00000000 00006400     .............d..
1a019f90:	00000000 05000000 64000500 00002000     ...........d. ..
	...
1a019fa8:	00400000 00030000 32000000 000098f8     ..@........2....
1a019fb8:	000065ff 00000f83 00fc9bff 00000000     .e..............
	...
1a019fec:	00100000 00000040 06000000 6ab20000     ....@..........j
1a019ffc:	00000200 83fb0100 00006800 00fcd900     .........h......
1a01a00c:	83fff17c 00000000 00006500 e8036400     |........e...d..
1a01a01c:	28006400 25000000 00000000 0000a016     .d.(...%........
1a01a02c:	00100000 00100000 00002f00 f4010000     ........./......
1a01a03c:	00100000 00002800 8145ffff 72faffff     .....(....E....r
	...
1a01a054:	05004400 c6ba0500 a2784700 01000000     .D.......Gx.....
1a01a064:	00000000 00060000 14000000 4d250000     ..............%M
1a01a074:	6d702f00 ae050000 d0020c00 00000000     ./pm............
	...
1a01a090:	00001b00 00000000 00000000 00000000     ................
1a01a0a0:	00006400 00000800 00000000 00000000     .d..............
	...
1a01a100:	00001b00 00000000 00000000 0e000e00     ................
1a01a110:	c70a0000 00000400 32000000 9cffffff     ...........2....
1a01a120:	2b0b0000 02000000 01000000 64000000     ...+...........d
1a01a130:	0000e5ff 00000000 00000000 00000000     ................
1a01a140:	01000000 00000000 00000100 00000000     ................
1a01a150:	00800100 00800100 00800100 d3262400     .............$&.
	...
1a01a168:	10000600 3c009600 00000000 00000000     .......<........
	...
1a01a180:	684e0a0c 0977cfcd 59671650 82ce19c6     ..Nh..w.P.gY....
	...
1a01a1a8:	0084d717 00000003 00000000 00000000     ................
1a01a1b8:	9d8f93c7 191c1b1e 00000000 00000000     ................
	...
1a01a1d8:	85180302 00400000 03000000 03000000     ......@.........
	...
1a01a1f0:	00000040 00000000 00000000 00000000     @...............
	...
1a01a224:	7edf7d67 552e9072 88e6f64c 00000000     g}.~r..UL.......
	...
1a01a240:	b8b4dcd8 abb9d8b0 b3faf8f3 9e8ebbb7     ................
1a01a250:	f532f1ae b8b4f11b f19780b0 dfdfdfa9     ..2.............
1a01a260:	dfdfdfaa cdc5aaf2 c90ca9c7 a9f1972c     ............,...
1a01a270:	66462689 a99989b2 b07d552d 96a88ab0     .&Ff....-U}.....
1a01a280:	f1765636 b2b4a3ba a8b8c080 83b21197     6Vv.............
1a01a290:	f0a3ba98 10440824 b9b21864 f18398b4     ....$.D.d.......
1a01a2a0:	7d5529a3 a3b1b5ba 00f09383 b2f55028     .)U}........(P..
1a01a2b0:	9383aab6 f17c5428 9382a3b9 daa2ba61     ....(T|.....a...
1a01a2c0:	81dbdfde f5aeb99a f1706860 dfa2bada     ........`hp.....
1a01a2d0:	faa2bad9 9282a3b9 a2ba31db f8a2bad9     .........1......
1a01a2e0:	d0a485df 83adbbc1 b8c7c5c2 dfdfdfa2     ................
1a01a2f0:	dfdfa0ba f1d8d8df 8db3aab8 350d98b4     ...............5
1a01a300:	bab6b25d 19968caf 0ea79f8f 9ab41e16     ]...............
1a01a310:	2c87aab8 a4ba7c54 91b68ab0 b2765632     ...,T|......2Vv.
1a01a320:	c8a49484 b8d8cd08 99f1b0b4 552da882     ..............-U
1a01a330:	0ea8987d 2ca21e16 a4927c54 78502cf0     }......,T|...,Px
1a01a340:	98a884f1 d8fccdc4 fca8db0d bad9f32d     ............-...
1a01a350:	badaf8a6 bad8dea6 9686b6b2 c8f3d0a6     ................
1a01a360:	c8a6da41 b4b0d8f8 92a882b8 88542cf5     A............,T.
1a01a370:	d935f198 f1d818f4 f9f8d0a2 c7d984a8     ..5.............
1a01a380:	83f8f8df 69dfdac5 d8c183df f11401f4     .......i........
1a01a390:	a84e82a8 d111f384 92d9f582 f1889728     ..N.........(...
1a01a3a0:	1c1cf409 f3a884d8 d9d1f9c0 29f18297     ...............)
1a01a3b0:	f3d80df4 d9d1f9f9 03c2f482 1adfded8     ................
1a01a3c0:	faa2f1d8 9884a8f9 f8dfc7d9 c783f8f8     ................
1a01a3d0:	df69dfda d8c383f8 f11401f4 2e82a898     ..i.............
1a01a3e0:	11f384a8 d9f582d1 88975092 1cf409f1     .........P......
1a01a3f0:	f3a884d8 d1f9f8c0 f18297d9 d80df449     ............I...
1a01a400:	d1f9f9f3 c4f482d9 dfded803 88adf1d8     ................
1a01a410:	09a8cc98 9282d9f9 f17cf5a8 94cf3a88     ..........|..:..
1a01a420:	db986e4a adda3169 d8f9def2 f2a89587     Jn..i1..........
1a01a430:	a5dad121 d917f4f9 d08eaef1 82aec3c0     !...............
1a01a440:	a8c384c6 a5c89585 f1c0f288 f10e01f4     ................
1a01a450:	c6a89e8e 54f5563e f47288f1 98f11501     ....>V.T..r.....
1a01a460:	f56e8545 88049e8e 5a9842f1 88069e8e     E.n......B.Z....
1a01a470:	1c01f469 111e98f1 04f5d008 02971ef1     i...............
1a01a480:	25369802 85d9f9db dac1f3a5 dff3a585     ..6%............
1a01a490:	a89585d8 a5da09f3 9282d8fa f178f5a8     ..............x.
1a01a4a0:	9f841a88 21988826 f31df4da 399f87d8     ....&..!.......9
1a01a4b0:	dfd9afd1 f4f9fbdf fad8f30c f9daf8d0     ................
1a01a4c0:	d9dfd0f9 0bf4d8f9 9f87f3d8 d9afd139     ............9...
1a01a4d0:	1df4dfdf fcfad8f3 f9f969a8 dedad0af     .........i......
1a01a4e0:	8ff8d9fa ccf1a89f 45db98f3 d0dfafd9     ...........E....
1a01a4f0:	8ff1d8f8 f3caa89f afda0988 d8f8cb8f     ................
1a01a500:	8d97adf2 dfa5d90c f3a6baf9 f212f4fa     ................
1a01a510:	d10d95d8 f3a6bad9 f2a5dafa f3a6bac1     ................
1a01a520:	baf1d8df 9686b6b2 f3cad0a6 cba6da49     ............I...
1a01a530:	b4b0d8f8 84add8b8 f1dfc0f2 a8c3cb8f     ................
1a01a540:	9686b6b2 c3cbc1c8 88b4b0f3 db21a898     ..............!.
1a01a550:	719d8d71 d9219585 d8faf2ad 28a89785     q..q..!........(
1a01a560:	d808f4d9 da298df2 f2d905f4 f2c2a485     ......).........
1a01a570:	948da8d8 f4d9d101 87d8f211 0af4d821     ............!...
1a01a580:	9884f2d8 d101c8a8 d811f4d9 bbc8a4f3     ................
1a01a590:	def2d0af f8f8f8f8 f8f8f8f8 f6b8f1d8     ................
1a01a5a0:	8ab0b9b5 3cdea395 d8f8d9a3 f8d9a35c     .......<....\...
1a01a5b0:	d9a37cd8 f9f8d8f8 dfd9a5d1 b1d8fada     .|..............
1a01a5c0:	d9f73085 30f8d8de d8dedaad 998cb4f2     .0.....0........
1a01a5d0:	7d552da3 dfdf83a0 a091b5df fbd929f6     .-U}.........)..
1a01a5e0:	29fca0d8 a0d8fad9 f8d951d0 d951fcd8     ...).....Q....Q.
1a01a5f0:	d979d8f9 d0a0d8fb fad979fc f9f9a1d8     ..y......y......
1a01a600:	a0f9f9f9 dfdfdfda f8f8a1d8 acf8f8f8     ................
1a01a610:	deadf8de 2cac9383 a8f17c54 f6dfdfdf     .......,T|......
1a01a620:	a0da2c9d dbfad9df a8d8f82d d0a0da50     .,......-...P...
1a01a630:	f8d0d9de 55dbf8f8 78a8d8f8 dfd0a0da     .......U...x....
1a01a640:	f8fad0d9 dbf8f8f8 9cd8f87d 30f58ca8     ........}......0
1a01a650:	d0d938db d0a0dfde a8d8dfde d958db48     .8..........H.X.
1a01a660:	a0ded0df d8ded0df 70db68a8 a0dfdfd9     .........h.p....
1a01a670:	f1d8dfdf 2c9088a8 a8987c54 d1385cd0     .......,T|...\8.
1a01a680:	8caef2da b0d8f9df c1c1a887 c6a888b1     ................
1a01a690:	36daf9f9 daf9a8d8 f9a8d836 a8d836da     ...6....6....6..
1a01a6a0:	d836daf9 36daf9a8 9d8df7d8 da18f8ad     ..6....6........
1a01a6b0:	d8dfaef2 30faadf7 f9dea4d9 deaef2d8     .......0........
1a01a6c0:	a783f9fa c7c5c3d9 a79b88f1 def7ad7a     ............z...
1a01a6d0:	84f8a4df 97a70894 f2ae00f3 88a41998     ................
1a01a6e0:	8894a3c6 f2df32f6 09db9383 dfaaf2d9     .....2..........
1a01a6f0:	f8aed8d8 f3dad1f9 f1a7dea4 d87a9b88     ..............z.
1a01a700:	ae9484f3 aadaf919 a8d8dff1 c5c3c081     ................
1a01a710:	8392a3c7 dead28f6 a3d8f8d9 f8d9ad50     .....(......P...
1a01a720:	ad78a3d8 f8d8f8d9 daa1d1f9 c7c5c3de     ..x.............
1a01a730:	9481a1d8 b0f218f8 c5c3ac89 b8d8f1c7     ................
1a01a740:	8697b0b4 069b31a8 97ab0799 f09b8828     .....1......(...
1a01a750:	4014200c f0b8b4b0 289a8aa8 9bb77850     . .@.......(Px..
1a01a760:	795129a8 44597024 48643869 abbbf131     .)Qy$pYDi8dH1...
1a01a770:	542c0088 8bb3f07c 2804a8b8 b0f17850     ..,T|......(Px..
1a01a780:	2697b488 bb9859a8 028bb3ab b0664626     ...&.Y......&Ff.
1a01a790:	9c8af0b8 795129a8 7951298b 5970248a     .....)Qy.)Qy.$pY
1a01a7a0:	7158208b 3869448a 6840398b 3148648a     . Xq.Di8.9@h.dH1
1a01a7b0:	6049308b 00acf188 f07c542c 2804a88c     .0I`....,T|....(
1a01a7c0:	88f17850 59a82697 028cac98 f0664626     Px...&.Y....&Ff.
1a01a7d0:	29a89c89 70247951 38694459 a9314864     ...)Qy$pYDi8dH1.
1a01a7e0:	59200988 3811ab70 19a86940 8c604831     .. Yp..8@i..1H`.
1a01a7f0:	5c413ca8 f1007c20 86199887 7e766ea8     .<A\ |.......nv~
1a01a800:	2d8899a9 b1d87d55 dfa3b9b5 d0aedfdf     ...-U}..........
1a01a810:	ded0aadf f9f8abf2 c487b0d9 dfdff1aa     ................
1a01a820:	dfdfafbb f1b1d8b9 608e97a3 f284b0df     ...........`....
1a01a830:	d9f9f8c8 8593d8de 83b14af1 83b508a3     .........J......
1a01a840:	b710089a f1d8109f b0aebab0 b6b2c28a     ................
1a01a850:	fbf19e8e d81df4d9 f10cd9f9 adf8f8d8     ................
1a01a860:	fbaed961 f10cf4d8 adf8f8d8 fbaed919     a...............
1a01a870:	16f4d8df adf8d8f1 f4d9618d 9cf5acf4     .........a......
1a01a880:	2bdf8d9c faaeb6ba d80bf4f8 f8d0aef1     ...+............
1a01a890:	aeda51ad d8f1f8fa a3b6b1b9 b9089c83     .Q..............
1a01a8a0:	b59a83b1 30fdc0aa 109fb783 f2938bb5     .......0........
1a01a8b0:	abd10202 f1d8deda abba80b0 84b2c3c0     ................
1a01a8c0:	b1d8c3c1 a38bf3b9 b409b691 b0deabd9     ................
1a01a8d0:	a3b99c87 8bb3f1dd 8b8b8b8b a3a387b0     ................
1a01a8e0:	8bb2a3a3 a3f29bb6 a3a3a3a3 a3a3a3a3     ................
1a01a8f0:	87b0f1a3 f3a39ab5 dca3a39b b9dfacba     ................
1a01a900:	a3a3a3a3 a3a3a3a3 a3a3a3a3 a3a3a3a3     ................
1a01a910:	bbd8d8d8 aaf1b7b3 d9ffdaf9 28aa9a80     ...............(
1a01a920:	a79880b4 8797b720 f08866a8 90f15179     .... ....f..yQ..
1a01a930:	a70c872c 93629781 607171f0 29019485     ,.....b..qq`...)
1a01a940:	a5907951 6c4c28f1 18950c87 83a37885     Qy...(Ll.....x..
1a01a950:	6c4c2890 f3d86c88 f20082a2 1992a810     .(Ll.l..........
1a01a960:	d9f2a280 88f1d826 48d94da8 39a896d8     ....&....M.H...9
1a01a970:	d83cd980 39a88095 d99886a6 a787da2c     ..<....9....,...
1a01a980:	89a8d82c 80a91995 a8d838d9 80a93989     ,........8...9..
1a01a990:	a8d83cda 9039a82e a8d80cd9 d9983195     .<....9......1..
1a01a9a0:	09a8d80c 01d8ffd9 95d8ffda 26daa939     ............9..&
1a01a9b0:	a890d8ff a899890d 21988010 89d82eda     ...........!....
1a01a9c0:	8031a899 a8d82eda 80319686 a8d82eda     ..1.......1.....
1a01a9d0:	da803187 82a8d82e 8041f392 d82ed9f1     .1........A.....
1a01a9e0:	19f382a8 2ed9f180 f3ac82d8 2280a2c0     ..............."
1a01a9f0:	a72ea6f1 9822a92e acda29a8 a2d8ffde     ......"..)......
1a01aa00:	a9f12af2 a892822e a68031f2 00d9f196     .*.......1......
1a01aa10:	0c9c8cac d0deac30 8cd8ffde 10d0ac9c     ....0...........
1a01aa20:	9280deac 824cf2a2 f2caf1a8 8896f135     ......L.....5...
1a01aa30:	d800d9a6 fffffff1 006ccd4c 002cc90c     ........L.l...,.
1a01aa40:	00765636 00664626 c4abf2fe dfdff1aa     6Vv.&Ff.........
1a01aa50:	dfdfafbb 8db3aab8 350d98b4 0000005d     ...........5]...
1a01aa60:	aaaaaab8 c5c388b0 000000c7 f3b9b1d8     ................
1a01aa70:	b691a38b 00d9b409 f3b9b1da b691a38b     ................
1a01aa80:	ffdab4da 4c504d65 312e3520 ffffff00     ....eMPL 5.1....

1a01aa90 <periph_to_base>:
1a01aa90:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a01aaa0:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a01aab0:	000100e0 01000100 01200003 00060120     .......... . ...
1a01aac0:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a01aad0:	01820013 00120182 01a201a2 01c20011     ................
1a01aae0:	001001c2 01e201e2 0202000f 000e0202     ................
1a01aaf0:	02220222 0223000d 001c0223 08040201     "."...#.#.......
1a01ab00:	0f0f0f03 ffff00ff                       ........

1a01ab08 <InitClkStates>:
1a01ab08:	00010100 00010909 0001090a 01010701     ................
1a01ab18:	00010902 00010906 0101090c 0001090d     ................
1a01ab28:	0001090e 0001090f 00010910 00010911     ................
1a01ab38:	00010912 00010913 00011114 00011119     ................
1a01ab48:	0001111a 0001111b                       ........

1a01ab50 <_ctype_>:
1a01ab50:	20202000 20202020 28282020 20282828     .         ((((( 
1a01ab60:	20202020 20202020 20202020 20202020                     
1a01ab70:	10108820 10101010 10101010 10101010      ...............
1a01ab80:	04040410 04040404 10040404 10101010     ................
1a01ab90:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a01aba0:	01010101 01010101 01010101 10101010     ................
1a01abb0:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a01abc0:	02020202 02020202 02020202 10101010     ................
1a01abd0:	00000020 00000000 00000000 00000000      ...............
	...
1a01ac50:	ffffff00 ffffffff                       ........

1a01ac58 <atanlo>:
1a01ac58:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
1a01ac68:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

1a01ac78 <atanhi>:
1a01ac78:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
1a01ac88:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
1a01ac98:	736f6361 ffffff00 00676f6c 74727173     acos....log.sqrt
1a01aca8:	ffffff00 736f6361 ffff0066 74727173     ....acosf...sqrt
1a01acb8:	ffff0066                                f...

1a01acbc <npio2_hw>:
1a01acbc:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
1a01accc:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
1a01acdc:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
1a01acec:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
1a01acfc:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
1a01ad0c:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
1a01ad1c:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
1a01ad2c:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

1a01ad3c <two_over_pi>:
1a01ad3c:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
1a01ad4c:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
1a01ad5c:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
1a01ad6c:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
1a01ad7c:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
1a01ad8c:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
1a01ad9c:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
1a01adac:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
1a01adbc:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
1a01adcc:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
1a01addc:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
1a01adec:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
1a01adfc:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
1a01ae0c:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
1a01ae1c:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
1a01ae2c:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
1a01ae3c:	0060e27b 00c08c6b                       {.`.k...

1a01ae44 <npio2_hw>:
1a01ae44:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
1a01ae54:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
1a01ae64:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
1a01ae74:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
1a01ae84:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
1a01ae94:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
1a01aea4:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
1a01aeb4:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

1a01aec4 <two_over_pi>:
1a01aec4:	000000a2 000000f9 00000083 0000006e     ............n...
1a01aed4:	0000004e 00000044 00000015 00000029     N...D.......)...
1a01aee4:	000000fc 00000027 00000057 000000d1     ....'...W.......
1a01aef4:	000000f5 00000034 000000dd 000000c0     ....4...........
1a01af04:	000000db 00000062 00000095 00000099     ....b...........
1a01af14:	0000003c 00000043 00000090 00000041     <...C.......A...
1a01af24:	000000fe 00000051 00000063 000000ab     ....Q...c.......
1a01af34:	000000de 000000bb 000000c5 00000061     ............a...
1a01af44:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
1a01af54:	00000042 0000004d 000000d2 000000e0     B...M...........
1a01af64:	00000006 00000049 0000002e 000000ea     ....I...........
1a01af74:	00000009 000000d1 00000092 0000001c     ................
1a01af84:	000000fe 0000001d 000000eb 0000001c     ................
1a01af94:	000000b1 00000029 000000a7 0000003e     ....).......>...
1a01afa4:	000000e8 00000082 00000035 000000f5     ........5.......
1a01afb4:	0000002e 000000bb 00000044 00000084     ........D.......
1a01afc4:	000000e9 0000009c 00000070 00000026     ........p...&...
1a01afd4:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
1a01afe4:	00000039 00000091 000000d6 00000039     9...........9...
1a01aff4:	00000083 00000053 00000039 000000f4     ....S...9.......
1a01b004:	0000009c 00000084 0000005f 0000008b     ........_.......
1a01b014:	000000bd 000000f9 00000028 0000003b     ........(...;...
1a01b024:	0000001f 000000f8 00000097 000000ff     ................
1a01b034:	000000de 00000005 00000098 0000000f     ................
1a01b044:	000000ef 0000002f 00000011 0000008b     ..../...........
1a01b054:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
1a01b064:	0000006d 00000036 0000007e 000000cf     m...6...~.......
1a01b074:	00000027 000000cb 00000009 000000b7     '...............
1a01b084:	0000004f 00000046 0000003f 00000066     O...F...?...f...
1a01b094:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
1a01b0a4:	00000075 00000027 000000ba 000000c7     u...'...........
1a01b0b4:	000000eb 000000e5 000000f1 0000007b     ............{...
1a01b0c4:	0000003d 00000007 00000039 000000f7     =.......9.......
1a01b0d4:	0000008a 00000052 00000092 000000ea     ....R...........
1a01b0e4:	0000006b 000000fb 0000005f 000000b1     k......._.......
1a01b0f4:	0000001f 0000008d 0000005d 00000008     ........].......
1a01b104:	00000056 00000003 00000030 00000046     V.......0...F...
1a01b114:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
1a01b124:	000000f0 000000cf 000000bc 00000020     ............ ...
1a01b134:	0000009a 000000f4 00000036 0000001d     ........6.......
1a01b144:	000000a9 000000e3 00000091 00000061     ............a...
1a01b154:	0000005e 000000e6 0000001b 00000008     ^...............
1a01b164:	00000065 00000099 00000085 0000005f     e..........._...
1a01b174:	00000014 000000a0 00000068 00000040     ........h...@...
1a01b184:	0000008d 000000ff 000000d8 00000080     ................
1a01b194:	0000004d 00000073 00000027 00000031     M...s...'...1...
1a01b1a4:	00000006 00000006 00000015 00000056     ............V...
1a01b1b4:	000000ca 00000073 000000a8 000000c9     ....s...........
1a01b1c4:	00000060 000000e2 0000007b 000000c0     `.......{.......
1a01b1d4:	0000008c 0000006b                       ....k...

1a01b1dc <init_jk>:
1a01b1dc:	00000002 00000003 00000004 00000006     ................
1a01b1ec:	ffffffff                                ....

1a01b1f0 <PIo2>:
1a01b1f0:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
1a01b200:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
1a01b210:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
1a01b220:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

1a01b230 <init_jk>:
1a01b230:	00000004 00000007 00000009              ............

1a01b23c <PIo2>:
1a01b23c:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
1a01b24c:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
1a01b25c:	1fc40000 1bc60000 17440000              ..........D.

1a01b268 <atanlo>:
1a01b268:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

1a01b278 <atanhi>:
1a01b278:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?
1a01b288:	00000043                                C...
